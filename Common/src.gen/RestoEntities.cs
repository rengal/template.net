using System;
using System.Collections.Generic;

using System.Threading.Tasks;
using Resto.Common.Localization;
using Resto.Framework.Common;
using Resto.Framework.Data;
using Resto.Framework.Common.XmlSerialization;
using Resto.Framework.Attributes.JetBrains;

// **
// * Этот класс генерируются ClassConverter'ом по соответствующим Java-файлам,
// * помеченным аннотациями, перечисленными в TypesUtils.java#isDataClass.
// * Например, в front\address\Address.java есть аннотация @DataClassEntityField,
// * на её основе в этом файле создаётся класс Address.
// * Особенность: поля, помеченные @DefaultNull, в конструкторе класса не присутствуют.
// **

// ReSharper disable ConvertToAutoProperty
// ReSharper disable PartialTypeWithSinglePart

namespace Resto.Data
{
	public partial class VersionInfo
	{
		public static readonly long MAJOR = 8;
		public static readonly long MINOR = 7;
		public static readonly long BUILD = 0;
		public static readonly long REVISION = 0;
		public static readonly long BUILD_DATE_MILLIS = 1701717900312;
		public static readonly string OFFICIAL_VERSION = "2023";
		public static readonly string FULL_VERSION = "2023 (8.7 custom built on 4 Dec 2023)";
		public static readonly string INTERNAL_VERSION = "8.7 custom built on 4 Dec 2023";
	}

    [DataClass("CachedEntityInfo")]
    public partial class CachedEntityInfo
    {
        private string className;
        private Guid? entityId;
        private string toString;

        protected CachedEntityInfo() {}

        public CachedEntityInfo(string className, Guid? entityId, string toString)
        {
            this.className = className;
            this.entityId = entityId;
            this.toString = toString;
        }
        public string ClassName
        {
            get { return className; }
            set { className = value; }
        }

        public Guid? EntityId
        {
            get { return entityId; }
            set { entityId = value; }
        }

        public string ToString
        {
            get { return toString; }
            set { toString = value; }
        }

    }

    [DataClass("MissingReference")]
    public partial class MissingReference
    {
        private CachedEntityInfo referenced;
        private CachedEntityInfo referencing;
        private string referencingPath;

        protected MissingReference() {}

        public MissingReference(CachedEntityInfo referenced, CachedEntityInfo referencing, string referencingPath)
        {
            this.referenced = referenced;
            this.referencing = referencing;
            this.referencingPath = referencingPath;
        }
        public CachedEntityInfo Referenced
        {
            get { return referenced; }
            set { referenced = value; }
        }

        public CachedEntityInfo Referencing
        {
            get { return referencing; }
            set { referencing = value; }
        }

        public string ReferencingPath
        {
            get { return referencingPath; }
            set { referencingPath = value; }
        }

    }

    [DataClass("PrivillegedOp")]
    public partial class PrivillegedOp
    {
        private User user;
        private DateTime? date;
        private AuthData authData;

        public PrivillegedOp() {}

        public PrivillegedOp(User user, DateTime? date, AuthData authData)
        {
            this.user = user;
            this.date = date;
            this.authData = authData;
        }
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public AuthData AuthData
        {
            get { return authData; }
            set { authData = value; }
        }

    }

    [DataClass("ATransactionSumSession")]
    public partial class ATransactionSumSession : RestoEvent
    {
        private Guid? sessionId;
        [NotNull, NotNullField]
        private Store storeFrom;
        [NotNull, NotNullField]
        private Product productTo;
        private ProductSize productSizeTo;
        [HasDefaultValue]
        private decimal sum = 0;
        [HasDefaultValue]
        private decimal amountTo = 0;

        protected ATransactionSumSession() {}

        public ATransactionSumSession(Guid id, DepartmentEntity department, DateTime date, Guid? sessionId, Store storeFrom, Product productTo, ProductSize productSizeTo, decimal sum, decimal amountTo)
            : base(id, department, date)
        {
            this.sessionId = sessionId;
            this.storeFrom = storeFrom;
            this.productTo = productTo;
            this.productSizeTo = productSizeTo;
            this.sum = sum;
            this.amountTo = amountTo;
        }

        public ATransactionSumSession(Guid id, DateTime date, Store storeFrom, Product productTo, decimal sum, decimal amountTo)
            : base(id, date)
        {
            this.storeFrom = storeFrom;
            this.productTo = productTo;
            this.sum = sum;
            this.amountTo = amountTo;
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        [NotNull]
        public Store StoreFrom
        {
            get { return storeFrom; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  storeFrom = value;
            }
        }

        [NotNull]
        public Product ProductTo
        {
            get { return productTo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  productTo = value;
            }
        }

        public ProductSize ProductSizeTo
        {
            get { return productSizeTo; }
            set { productSizeTo = value; }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal AmountTo
        {
            get { return amountTo; }
            set { amountTo = value; }
        }

    }

    [DataClass("ATransactionSumSessionKey")]
    public partial class ATransactionSumSessionKey
    {
        private Guid? sessionId;
        private DateTime date;
        [NotNull, NotNullField]
        private Store storeFrom;
        [NotNull, NotNullField]
        private Product productTo;
        private ProductSize productSizeTo;

        protected ATransactionSumSessionKey() {}

        public ATransactionSumSessionKey(Guid? sessionId, DateTime date, Store storeFrom, Product productTo, ProductSize productSizeTo)
        {
            this.sessionId = sessionId;
            this.date = date;
            this.storeFrom = storeFrom;
            this.productTo = productTo;
            this.productSizeTo = productSizeTo;
        }

        public ATransactionSumSessionKey(DateTime date, Store storeFrom, Product productTo)
        {
            this.date = date;
            this.storeFrom = storeFrom;
            this.productTo = productTo;
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        [NotNull]
        public Store StoreFrom
        {
            get { return storeFrom; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  storeFrom = value;
            }
        }

        [NotNull]
        public Product ProductTo
        {
            get { return productTo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  productTo = value;
            }
        }

        public ProductSize ProductSizeTo
        {
            get { return productSizeTo; }
            set { productSizeTo = value; }
        }

    }

    [DataClass("AbstractDocumentPaymentItem")]
    public abstract partial class AbstractDocumentPaymentItem
    {
        private AbstractInvoiceDocument document;
        private decimal? sum;
        private DateTime? date;
        private Account accountFrom;
        private CashFlowCategory cashFlowCategory;

        protected AbstractDocumentPaymentItem() {}

        protected AbstractDocumentPaymentItem(AbstractInvoiceDocument document, decimal? sum, DateTime? date, Account accountFrom, CashFlowCategory cashFlowCategory)
        {
            this.document = document;
            this.sum = sum;
            this.date = date;
            this.accountFrom = accountFrom;
            this.cashFlowCategory = cashFlowCategory;
        }
        public AbstractInvoiceDocument Document
        {
            get { return document; }
            set { document = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Account AccountFrom
        {
            get { return accountFrom; }
            set { accountFrom = value; }
        }

        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

    }

    [RootEntity]
    [DataClass("Account")]
    public partial class Account : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private AccountType type;
        private Account parent;
        [HasDefaultValue]
        private string code = "";
        private string description;
        [HasDefaultValue]
        private bool systemAccount = false;
        [HasDefaultValue]
        private bool customTransactionsAllowed = true;
        private DateTime? startBalanceDate;
        private decimal? startBalanceSum;
        private Guid? startBalanceTransactionId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<User> responsibleUsers = new HashSet<User>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Role> responsibleRoles = new HashSet<Role>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Account() {}

        public Account(Guid id, LocalizableValue name, AccountType type, string description)
            : base(id, name)
        {
            this.type = type;
            this.description = description;
        }

        public Account(Guid id, LocalizableValue name, AccountType type)
            : base(id, name)
        {
            this.type = type;
        }

        [NotNull]
        public AccountType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        [CanBeNull]
        public Account Parent
        {
            get { return parent; }
            set { parent = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public bool SystemAccount
        {
            get { return systemAccount; }
            set { systemAccount = value; }
        }

        public bool CustomTransactionsAllowed
        {
            get { return customTransactionsAllowed; }
            set { customTransactionsAllowed = value; }
        }

        public DateTime? StartBalanceDate
        {
            get { return startBalanceDate; }
            set { startBalanceDate = value; }
        }

        public decimal? StartBalanceSum
        {
            get { return startBalanceSum; }
            set { startBalanceSum = value; }
        }

        public Guid? StartBalanceTransactionId
        {
            get { return startBalanceTransactionId; }
            set { startBalanceTransactionId = value; }
        }

        [NotNull]
        public HashSet<User> ResponsibleUsers
        {
            get { return responsibleUsers; }
        }

        [NotNull]
        public HashSet<Role> ResponsibleRoles
        {
            get { return responsibleRoles; }
        }

    }

    [DataClass("AccountRecordList")]
    public partial class AccountRecordList
    {
        private Account account;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AccountRegisterRecord> records = new List<AccountRegisterRecord>();
        private decimal? startBalance;
        private decimal? sumTotal;
        private bool editable;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AccountRecordList() {}

        public AccountRecordList(Account account, decimal? startBalance, decimal? sumTotal, bool editable)
        {
            this.account = account;
            this.startBalance = startBalance;
            this.sumTotal = sumTotal;
            this.editable = editable;
        }
        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        [NotNull]
        public List<AccountRegisterRecord> Records
        {
            get { return records; }
        }

        public decimal? StartBalance
        {
            get { return startBalance; }
            set { startBalance = value; }
        }

        public decimal? SumTotal
        {
            get { return sumTotal; }
            set { sumTotal = value; }
        }

        public bool Editable
        {
            get { return editable; }
            set { editable = value; }
        }

    }

    [DataClass("AccountRegisterRecord")]
    public partial class AccountRegisterRecord : TransactionInfo
    {
        [HasDefaultValue]
        private decimal? balance = 0;
        [HasDefaultValue]
        private bool editable = false;
        [HasDefaultValue]
        private bool toFlag = false;
        private bool? cashOrderDirection;
        private HashSet<DepartmentEntity> allowedDepartments;
        private HashSet<string> editableFields;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AccountRegisterRecord() {}

        public AccountRegisterRecord(Guid? id, DateTime? date, string number, TransactionType type, Account account, decimal? sum)
            : base(id, date, number, type, account, sum)
        {

        }
        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public bool Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        public bool ToFlag
        {
            get { return toFlag; }
            set { toFlag = value; }
        }

        public bool? CashOrderDirection
        {
            get { return cashOrderDirection; }
            set { cashOrderDirection = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> AllowedDepartments
        {
            get { return allowedDepartments; }
            set { allowedDepartments = value; }
        }

        [CanBeNull]
        public HashSet<string> EditableFields
        {
            get { return editableFields; }
            set { editableFields = value; }
        }

    }

    [DataClass("AccountType")]
    [EnumClass]
    public partial class AccountType : LocalizableName<AccountType>
    {
        /// <summary> Денежные средства. </summary>
        public static readonly AccountType CASH = new AccountType("CASH", CounteragentType.NONE, AccountTypeGroup.ASSETS, false);
        /// <summary> Задолженность покупателей. </summary>
        public static readonly AccountType ACCOUNTS_RECEIVABLE = new AccountType("ACCOUNTS_RECEIVABLE", CounteragentType.SUPPLIER, AccountTypeGroup.ASSETS, false);
        /// <summary> Задолженность сотрудников. </summary>
        public static readonly AccountType DEBTS_OF_EMPLOYEES = new AccountType("DEBTS_OF_EMPLOYEES", CounteragentType.EMPLOYEE, AccountTypeGroup.ASSETS, false);
        /// <summary> Текущие активы. </summary>
        public static readonly AccountType CURRENT_ASSET = new AccountType("CURRENT_ASSET", CounteragentType.NONE, AccountTypeGroup.ASSETS, false);
        /// <summary> Основные средства. </summary>
        public static readonly AccountType OTHER_CURRENT_ASSET = new AccountType("OTHER_CURRENT_ASSET", CounteragentType.NONE, AccountTypeGroup.ASSETS, false);
        /// <summary> Складские запасы. </summary>
        public static readonly AccountType INVENTORY_ASSETS = new AccountType("INVENTORY_ASSETS", CounteragentType.NONE, AccountTypeGroup.ASSETS, true);
        /// <summary> Расчеты с сотрудниками. </summary>
        public static readonly AccountType EMPLOYEES_LIABILITY = new AccountType("EMPLOYEES_LIABILITY", CounteragentType.EMPLOYEE, AccountTypeGroup.LIABILITIES, false);
        /// <summary> Расчеты с поставщиками. </summary>
        public static readonly AccountType ACCOUNTS_PAYABLE = new AccountType("ACCOUNTS_PAYABLE", CounteragentType.SUPPLIER, AccountTypeGroup.LIABILITIES, false);
        /// <summary> Расчеты с гостями. </summary>
        public static readonly AccountType CLIENTS_LIABILITY = new AccountType("CLIENTS_LIABILITY", CounteragentType.CLIENT, AccountTypeGroup.LIABILITIES, false);
        /// <summary> Прочие текущие обязательства. </summary>
        public static readonly AccountType OTHER_CURRENT_LIABILITY = new AccountType("OTHER_CURRENT_LIABILITY", CounteragentType.NONE, AccountTypeGroup.LIABILITIES, false);
        /// <summary> Долгосрочные обязательства. </summary>
        public static readonly AccountType LONG_TERM_LIABILITY = new AccountType("LONG_TERM_LIABILITY", CounteragentType.NONE, AccountTypeGroup.LIABILITIES, false);
        /// <summary> Капитал. </summary>
        public static readonly AccountType EQUITY = new AccountType("EQUITY", CounteragentType.NONE, AccountTypeGroup.EQUITY, false);
        /// <summary> Прямые издержки (себестоимость). </summary>
        public static readonly AccountType COST_OF_GOODS_SOLD = new AccountType("COST_OF_GOODS_SOLD", CounteragentType.NONE, AccountTypeGroup.INCOME_EXPENSES, false);
        /// <summary> Доходы. </summary>
        public static readonly AccountType INCOME = new AccountType("INCOME", CounteragentType.NONE, AccountTypeGroup.INCOME_EXPENSES, false);
        /// <summary> Расходы. </summary>
        public static readonly AccountType EXPENSES = new AccountType("EXPENSES", CounteragentType.NONE, AccountTypeGroup.INCOME_EXPENSES, false);
        /// <summary> Прочие доходы. </summary>
        public static readonly AccountType OTHER_INCOME = new AccountType("OTHER_INCOME", CounteragentType.NONE, AccountTypeGroup.INCOME_EXPENSES, false);
        /// <summary> Прочие расходы. </summary>
        public static readonly AccountType OTHER_EXPENSES = new AccountType("OTHER_EXPENSES", CounteragentType.NONE, AccountTypeGroup.INCOME_EXPENSES, false);

        private readonly CounteragentType counteragentType;
        private readonly AccountTypeGroup group;
        private readonly bool systemType;
        private readonly string __value;
        private readonly string __nameResId;

        private AccountType(string __value, CounteragentType counteragentType, AccountTypeGroup group, bool systemType)
        {
            this.__value = __value;
            this.__nameResId = "ACCOUNTTYPE_NAME_" + __value;
            this.counteragentType = counteragentType;
            this.group = group;
            this.systemType = systemType;
        }

        public static AccountType Parse(string value)
        {
            switch(value)
            {
                case "CASH": return CASH;
                case "ACCOUNTS_RECEIVABLE": return ACCOUNTS_RECEIVABLE;
                case "DEBTS_OF_EMPLOYEES": return DEBTS_OF_EMPLOYEES;
                case "CURRENT_ASSET": return CURRENT_ASSET;
                case "OTHER_CURRENT_ASSET": return OTHER_CURRENT_ASSET;
                case "INVENTORY_ASSETS": return INVENTORY_ASSETS;
                case "EMPLOYEES_LIABILITY": return EMPLOYEES_LIABILITY;
                case "ACCOUNTS_PAYABLE": return ACCOUNTS_PAYABLE;
                case "CLIENTS_LIABILITY": return CLIENTS_LIABILITY;
                case "OTHER_CURRENT_LIABILITY": return OTHER_CURRENT_LIABILITY;
                case "LONG_TERM_LIABILITY": return LONG_TERM_LIABILITY;
                case "EQUITY": return EQUITY;
                case "COST_OF_GOODS_SOLD": return COST_OF_GOODS_SOLD;
                case "INCOME": return INCOME;
                case "EXPENSES": return EXPENSES;
                case "OTHER_INCOME": return OTHER_INCOME;
                case "OTHER_EXPENSES": return OTHER_EXPENSES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AccountType[] VALUES
        {
            get
            {
                return new []
                {
                    CASH, 
                    ACCOUNTS_RECEIVABLE, 
                    DEBTS_OF_EMPLOYEES, 
                    CURRENT_ASSET, 
                    OTHER_CURRENT_ASSET, 
                    INVENTORY_ASSETS, 
                    EMPLOYEES_LIABILITY, 
                    ACCOUNTS_PAYABLE, 
                    CLIENTS_LIABILITY, 
                    OTHER_CURRENT_LIABILITY, 
                    LONG_TERM_LIABILITY, 
                    EQUITY, 
                    COST_OF_GOODS_SOLD, 
                    INCOME, 
                    EXPENSES, 
                    OTHER_INCOME, 
                    OTHER_EXPENSES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public CounteragentType CounteragentType
        {
            get { return counteragentType; }
        }

        public AccountTypeGroup Group
        {
            get { return group; }
        }

        public bool SystemType
        {
            get { return systemType; }
        }

    }

    [DataClass("AccountTypeGroup")]
    [EnumClass]
    public partial class AccountTypeGroup : LocalizableName<AccountTypeGroup>
    {
        /// <summary> Активы. </summary>
        public static readonly AccountTypeGroup ASSETS = new AccountTypeGroup("ASSETS");
        /// <summary> Обязательства. </summary>
        public static readonly AccountTypeGroup LIABILITIES = new AccountTypeGroup("LIABILITIES");
        /// <summary> Капитал. </summary>
        public static readonly AccountTypeGroup EQUITY = new AccountTypeGroup("EQUITY");
        /// <summary> Доходы/Расходы. </summary>
        public static readonly AccountTypeGroup INCOME_EXPENSES = new AccountTypeGroup("INCOME_EXPENSES");

        private readonly string __value;
        private readonly string __nameResId;

        private AccountTypeGroup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACCOUNTTYPEGROUP_NAME_" + __value;
        }

        public static AccountTypeGroup Parse(string value)
        {
            switch(value)
            {
                case "ASSETS": return ASSETS;
                case "LIABILITIES": return LIABILITIES;
                case "EQUITY": return EQUITY;
                case "INCOME_EXPENSES": return INCOME_EXPENSES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AccountTypeGroup[] VALUES
        {
            get
            {
                return new []
                {
                    ASSETS, 
                    LIABILITIES, 
                    EQUITY, 
                    INCOME_EXPENSES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("AccountingTransaction")]
    public partial class AccountingTransaction : RestoEvent
    {
        private DepartmentEntity originDepartment;
        [NotNull, NotNullField]
        private TransactionType type;
        private OperationInfo modifiedInfo;
        private OperationInfo createdInfo;
        [NotNull, NotNullField]
        private AccountingTransactionPart from;
        [NotNull, NotNullField]
        private AccountingTransactionPart to;
        private decimal? sum;
        private decimal? sumNds;
        private string num;
        private Guid? documentId;
        private Guid? documentItemId;
        private string comment;
        private Guid? sessionId;
        private DateTime? dateSecondary;
        private Conception conception;
        private CashFlowCategory cashFlowCategory;
        private string cashOrderNumber;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AccountingTransaction() {}

        public AccountingTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId)
            : base(id, department, date)
        {
            this.type = type;
            this.from = from;
            this.to = to;
            this.sum = sum;
            this.num = num;
            this.documentId = documentId;
            this.documentItemId = documentItemId;
            this.comment = comment;
            this.sessionId = sessionId;
        }

        public AccountingTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date)
        {
            this.type = type;
            this.from = from;
            this.to = to;
        }

        [CanBeNull]
        public DepartmentEntity OriginDepartment
        {
            get { return originDepartment; }
            set { originDepartment = value; }
        }

        [NotNull]
        public TransactionType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

        [CanBeNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        [NotNull]
        public AccountingTransactionPart From
        {
            get { return from; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  from = value;
            }
        }

        [NotNull]
        public AccountingTransactionPart To
        {
            get { return to; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  to = value;
            }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumNds
        {
            get { return sumNds; }
            set { sumNds = value; }
        }

        public string Num
        {
            get { return num; }
            set { num = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public Guid? DocumentItemId
        {
            get { return documentItemId; }
            set { documentItemId = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public DateTime? DateSecondary
        {
            get { return dateSecondary; }
            set { dateSecondary = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        [CanBeNull]
        public string CashOrderNumber
        {
            get { return cashOrderNumber; }
            set { cashOrderNumber = value; }
        }

    }

    [DataClass("AccountingTransactionAccount")]
    [EnumClass]
    public partial class AccountingTransactionAccount : LocalizableName<AccountingTransactionAccount>
    {
        /// <summary> Склад. </summary>
        public static readonly AccountingTransactionAccount STORE = new AccountingTransactionAccount("STORE");
        /// <summary> Счет. </summary>
        public static readonly AccountingTransactionAccount ACCOUNT = new AccountingTransactionAccount("ACCOUNT");

        private readonly string __value;
        private readonly string __nameResId;

        private AccountingTransactionAccount(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACCOUNTINGTRANSACTIONACCOUNT_NAME_" + __value;
        }

        public static AccountingTransactionAccount Parse(string value)
        {
            switch(value)
            {
                case "STORE": return STORE;
                case "ACCOUNT": return ACCOUNT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AccountingTransactionAccount[] VALUES
        {
            get
            {
                return new []
                {
                    STORE, 
                    ACCOUNT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("AccountingTransactionAnalytics")]
    public partial class AccountingTransactionAnalytics
    {
        private Account account;
        private User counteragent;
        private Product product;

        protected AccountingTransactionAnalytics() {}

        public AccountingTransactionAnalytics(Account account, User counteragent, Product product)
        {
            this.account = account;
            this.counteragent = counteragent;
            this.product = product;
        }
        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

    }

    [DataClass("AccountingTransactionCashFlow")]
    [EnumClass]
    public partial class AccountingTransactionCashFlow : LocalizableName<AccountingTransactionCashFlow>
    {
        /// <summary> Участвует в ДДС. </summary>
        public static readonly AccountingTransactionCashFlow CASH_FLOW = new AccountingTransactionCashFlow("CASH_FLOW");
        /// <summary> Не участвует в ДДС. </summary>
        public static readonly AccountingTransactionCashFlow NOT_CASH_FLOW = new AccountingTransactionCashFlow("NOT_CASH_FLOW");

        private readonly string __value;
        private readonly string __nameResId;

        private AccountingTransactionCashFlow(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACCOUNTINGTRANSACTIONCASHFLOW_NAME_" + __value;
        }

        public static AccountingTransactionCashFlow Parse(string value)
        {
            switch(value)
            {
                case "CASH_FLOW": return CASH_FLOW;
                case "NOT_CASH_FLOW": return NOT_CASH_FLOW;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AccountingTransactionCashFlow[] VALUES
        {
            get
            {
                return new []
                {
                    CASH_FLOW, 
                    NOT_CASH_FLOW
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("AccountingTransactionPart")]
    public partial class AccountingTransactionPart : AccountingTransactionAnalytics
    {
        private decimal? amount;

        protected AccountingTransactionPart() {}

        public AccountingTransactionPart(Account account, User counteragent, Product product, decimal? amount)
            : base(account, counteragent, product)
        {
            this.amount = amount;
        }
        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("AccountingTransactionPartType")]
    public enum AccountingTransactionPartType
    {
        ACCOUNT,
        STORE,
        STORE_COST_AFFECTED,
        COUNTERAGENT,
        ANY
    }

    [DataClass("AccountingTransactionSide")]
    [EnumClass]
    public partial class AccountingTransactionSide : LocalizableName<AccountingTransactionSide>
    {
        /// <summary> Дебет. </summary>
        public static readonly AccountingTransactionSide DEBIT = new AccountingTransactionSide("DEBIT");
        /// <summary> Кредит. </summary>
        public static readonly AccountingTransactionSide CREDIT = new AccountingTransactionSide("CREDIT");

        private readonly string __value;
        private readonly string __nameResId;

        private AccountingTransactionSide(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACCOUNTINGTRANSACTIONSIDE_NAME_" + __value;
        }

        public static AccountingTransactionSide Parse(string value)
        {
            switch(value)
            {
                case "DEBIT": return DEBIT;
                case "CREDIT": return CREDIT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AccountingTransactionSide[] VALUES
        {
            get
            {
                return new []
                {
                    DEBIT, 
                    CREDIT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("BankStatementTransaction")]
    public partial class BankStatementTransaction
    {
        private Account account;
        private AccountRegisterRecord record;

        protected BankStatementTransaction() {}

        public BankStatementTransaction(Account account, AccountRegisterRecord record)
        {
            this.account = account;
            this.record = record;
        }
        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public AccountRegisterRecord Record
        {
            get { return record; }
            set { record = value; }
        }

    }

    [DataClass("CafeSessionTransaction")]
    public abstract partial class CafeSessionTransaction : AccountingTransaction
    {
        private Guid? causeEventId;
        private User cashier;
        private AuthData auth;

        protected CafeSessionTransaction() {}

        protected CafeSessionTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {
            this.causeEventId = causeEventId;
            this.cashier = cashier;
            this.auth = auth;
        }

        protected CafeSessionTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public Guid? CauseEventId
        {
            get { return causeEventId; }
            set { causeEventId = value; }
        }

        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

        public AuthData Auth
        {
            get { return auth; }
            set { auth = value; }
        }

    }

    [DataClass("CardOrderTransaction")]
    public partial class CardOrderTransaction : OrderPaymentTransaction
    {
        private string cardNumber;
        private string cardTypeName;
        private string approvalCode;
        private string cardOwnerCompany;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CardOrderTransaction() {}

        public CardOrderTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal, string cardNumber, string cardTypeName, string approvalCode)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal)
        {
            this.cardNumber = cardNumber;
            this.cardTypeName = cardTypeName;
            this.approvalCode = approvalCode;
        }

        public CardOrderTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public string CardTypeName
        {
            get { return cardTypeName; }
            set { cardTypeName = value; }
        }

        public string ApprovalCode
        {
            get { return approvalCode; }
            set { approvalCode = value; }
        }

        [CanBeNull]
        public string CardOwnerCompany
        {
            get { return cardOwnerCompany; }
            set { cardOwnerCompany = value; }
        }

    }

    [RootEntity]
    [DataClass("CashFlowCategory")]
    public partial class CashFlowCategory : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        private CashFlowCategory parentCategory;
        [NotNull, NotNullField]
        private CashFlowType type;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashFlowCategory() {}

        public CashFlowCategory(Guid id, LocalizableValue name, string code, CashFlowType type)
            : base(id, name)
        {
            this.code = code;
            this.type = type;
        }
        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        [CanBeNull]
        public CashFlowCategory ParentCategory
        {
            get { return parentCategory; }
            set { parentCategory = value; }
        }

        [NotNull]
        public CashFlowType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

    }

    [DataClass("CashFlowReportDTO")]
    public partial class CashFlowReportDTO
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CashFlowCategory, Dictionary<Account, decimal>> positiveSums = new Dictionary<CashFlowCategory, Dictionary<Account, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CashFlowCategory, Dictionary<Account, decimal>> negativeSums = new Dictionary<CashFlowCategory, Dictionary<Account, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Account, decimal> positiveSumsWithoutCategory = new Dictionary<Account, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Account, decimal> negativeSumsWithoutCategory = new Dictionary<Account, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Account, decimal> startBalances = new Dictionary<Account, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Account, decimal> endBalances = new Dictionary<Account, decimal>();


        [NotNull]
        public Dictionary<CashFlowCategory, Dictionary<Account, decimal>> PositiveSums
        {
            get { return positiveSums; }
        }

        [NotNull]
        public Dictionary<CashFlowCategory, Dictionary<Account, decimal>> NegativeSums
        {
            get { return negativeSums; }
        }

        [NotNull]
        public Dictionary<Account, decimal> PositiveSumsWithoutCategory
        {
            get { return positiveSumsWithoutCategory; }
        }

        [NotNull]
        public Dictionary<Account, decimal> NegativeSumsWithoutCategory
        {
            get { return negativeSumsWithoutCategory; }
        }

        [NotNull]
        public Dictionary<Account, decimal> StartBalances
        {
            get { return startBalances; }
        }

        [NotNull]
        public Dictionary<Account, decimal> EndBalances
        {
            get { return endBalances; }
        }

    }

    [DataClass("CashFlowType")]
    [EnumClass]
    public partial class CashFlowType : LocalizableName<CashFlowType>
    {
        /// <summary> Операционная деятельность. </summary>
        public static readonly CashFlowType OPERATIONAL = new CashFlowType("OPERATIONAL");
        /// <summary> Инвестиционная деятельность. </summary>
        public static readonly CashFlowType INVESTMENT = new CashFlowType("INVESTMENT");
        /// <summary> Финансовая деятельность. </summary>
        public static readonly CashFlowType FINANCE = new CashFlowType("FINANCE");

        private readonly string __value;
        private readonly string __nameResId;

        private CashFlowType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CASHFLOWTYPE_NAME_" + __value;
        }

        public static CashFlowType Parse(string value)
        {
            switch(value)
            {
                case "OPERATIONAL": return OPERATIONAL;
                case "INVESTMENT": return INVESTMENT;
                case "FINANCE": return FINANCE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CashFlowType[] VALUES
        {
            get
            {
                return new []
                {
                    OPERATIONAL, 
                    INVESTMENT, 
                    FINANCE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CashOrderTransaction")]
    public partial class CashOrderTransaction : OrderPaymentTransaction
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashOrderTransaction() {}

        public CashOrderTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal)
        {

        }

        public CashOrderTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("ChartOfAccounts")]
    public partial class ChartOfAccounts
    {
        private Account cashAssets;
        private Account bankAssets;
        private Account cashInTheWay;
        private Account cashCollectingToBank;
        private Account nonCash;
        private Account creditAccount;
        private Account moneyGivenOnAccount;
        private Account cashTakenOnAccount;
        private Account toolsAndEquipment;
        private Account intangibleAssets;
        private Account cashRegistersAccount;
        private Account receivedCredits;
        private Account prepayAccount;
        private Account employeeDeposits;
        private Account employeeCurrentLiabilities;
        private Account suppliersAccount;
        private Account internalSuppliersAccount;
        private Account suppliersAdvancePaymentAccount;
        private Account ndsAccount;
        private Account openingBalance;
        private Account capitalInFlow;
        private Account capitalOutFlow;
        private Account revenuesAccount;
        private Account revenuesWithoutDiscountsAccount;
        private Account discountsAccount;
        private Account otherIncome;
        private Account inventorySurplus;
        private Account revenueIncoming;
        private Account removeDishWithWriteoff;
        private Account costOfGoodsSold;
        private Account inexpensiveGoods;
        private Account salaryExpense;
        private Account artistsExpense;
        private Account representativeExpense;
        private Account inventoryShortage;
        private Account amortizationExpense;
        private Account employeesFreeFood;
        private Account otherExpense;
        private Account clientDeposits;
        private Account costCalculationCorrection;
        private Account salesNdsAccount;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ChartOfAccounts() {}

        public ChartOfAccounts(Account cashAssets, Account bankAssets, Account cashInTheWay, Account cashCollectingToBank, Account nonCash, Account creditAccount, Account moneyGivenOnAccount, Account cashTakenOnAccount, Account toolsAndEquipment, Account intangibleAssets, Account cashRegistersAccount, Account receivedCredits, Account prepayAccount, Account employeeDeposits, Account employeeCurrentLiabilities, Account suppliersAccount, Account internalSuppliersAccount, Account suppliersAdvancePaymentAccount, Account ndsAccount, Account openingBalance, Account capitalInFlow, Account capitalOutFlow, Account revenuesAccount, Account revenuesWithoutDiscountsAccount, Account discountsAccount, Account otherIncome, Account inventorySurplus, Account revenueIncoming, Account removeDishWithWriteoff, Account costOfGoodsSold, Account inexpensiveGoods, Account salaryExpense, Account artistsExpense, Account representativeExpense, Account inventoryShortage, Account amortizationExpense, Account employeesFreeFood, Account otherExpense, Account clientDeposits, Account costCalculationCorrection, Account salesNdsAccount)
        {
            this.cashAssets = cashAssets;
            this.bankAssets = bankAssets;
            this.cashInTheWay = cashInTheWay;
            this.cashCollectingToBank = cashCollectingToBank;
            this.nonCash = nonCash;
            this.creditAccount = creditAccount;
            this.moneyGivenOnAccount = moneyGivenOnAccount;
            this.cashTakenOnAccount = cashTakenOnAccount;
            this.toolsAndEquipment = toolsAndEquipment;
            this.intangibleAssets = intangibleAssets;
            this.cashRegistersAccount = cashRegistersAccount;
            this.receivedCredits = receivedCredits;
            this.prepayAccount = prepayAccount;
            this.employeeDeposits = employeeDeposits;
            this.employeeCurrentLiabilities = employeeCurrentLiabilities;
            this.suppliersAccount = suppliersAccount;
            this.internalSuppliersAccount = internalSuppliersAccount;
            this.suppliersAdvancePaymentAccount = suppliersAdvancePaymentAccount;
            this.ndsAccount = ndsAccount;
            this.openingBalance = openingBalance;
            this.capitalInFlow = capitalInFlow;
            this.capitalOutFlow = capitalOutFlow;
            this.revenuesAccount = revenuesAccount;
            this.revenuesWithoutDiscountsAccount = revenuesWithoutDiscountsAccount;
            this.discountsAccount = discountsAccount;
            this.otherIncome = otherIncome;
            this.inventorySurplus = inventorySurplus;
            this.revenueIncoming = revenueIncoming;
            this.removeDishWithWriteoff = removeDishWithWriteoff;
            this.costOfGoodsSold = costOfGoodsSold;
            this.inexpensiveGoods = inexpensiveGoods;
            this.salaryExpense = salaryExpense;
            this.artistsExpense = artistsExpense;
            this.representativeExpense = representativeExpense;
            this.inventoryShortage = inventoryShortage;
            this.amortizationExpense = amortizationExpense;
            this.employeesFreeFood = employeesFreeFood;
            this.otherExpense = otherExpense;
            this.clientDeposits = clientDeposits;
            this.costCalculationCorrection = costCalculationCorrection;
            this.salesNdsAccount = salesNdsAccount;
        }
        public Account CashAssets
        {
            get { return cashAssets; }
            set { cashAssets = value; }
        }

        public Account BankAssets
        {
            get { return bankAssets; }
            set { bankAssets = value; }
        }

        public Account CashInTheWay
        {
            get { return cashInTheWay; }
            set { cashInTheWay = value; }
        }

        public Account CashCollectingToBank
        {
            get { return cashCollectingToBank; }
            set { cashCollectingToBank = value; }
        }

        public Account NonCash
        {
            get { return nonCash; }
            set { nonCash = value; }
        }

        public Account CreditAccount
        {
            get { return creditAccount; }
            set { creditAccount = value; }
        }

        public Account MoneyGivenOnAccount
        {
            get { return moneyGivenOnAccount; }
            set { moneyGivenOnAccount = value; }
        }

        public Account CashTakenOnAccount
        {
            get { return cashTakenOnAccount; }
            set { cashTakenOnAccount = value; }
        }

        public Account ToolsAndEquipment
        {
            get { return toolsAndEquipment; }
            set { toolsAndEquipment = value; }
        }

        public Account IntangibleAssets
        {
            get { return intangibleAssets; }
            set { intangibleAssets = value; }
        }

        public Account CashRegistersAccount
        {
            get { return cashRegistersAccount; }
            set { cashRegistersAccount = value; }
        }

        public Account ReceivedCredits
        {
            get { return receivedCredits; }
            set { receivedCredits = value; }
        }

        public Account PrepayAccount
        {
            get { return prepayAccount; }
            set { prepayAccount = value; }
        }

        public Account EmployeeDeposits
        {
            get { return employeeDeposits; }
            set { employeeDeposits = value; }
        }

        public Account EmployeeCurrentLiabilities
        {
            get { return employeeCurrentLiabilities; }
            set { employeeCurrentLiabilities = value; }
        }

        public Account SuppliersAccount
        {
            get { return suppliersAccount; }
            set { suppliersAccount = value; }
        }

        public Account InternalSuppliersAccount
        {
            get { return internalSuppliersAccount; }
            set { internalSuppliersAccount = value; }
        }

        public Account SuppliersAdvancePaymentAccount
        {
            get { return suppliersAdvancePaymentAccount; }
            set { suppliersAdvancePaymentAccount = value; }
        }

        public Account NdsAccount
        {
            get { return ndsAccount; }
            set { ndsAccount = value; }
        }

        public Account OpeningBalance
        {
            get { return openingBalance; }
            set { openingBalance = value; }
        }

        public Account CapitalInFlow
        {
            get { return capitalInFlow; }
            set { capitalInFlow = value; }
        }

        public Account CapitalOutFlow
        {
            get { return capitalOutFlow; }
            set { capitalOutFlow = value; }
        }

        public Account RevenuesAccount
        {
            get { return revenuesAccount; }
            set { revenuesAccount = value; }
        }

        public Account RevenuesWithoutDiscountsAccount
        {
            get { return revenuesWithoutDiscountsAccount; }
            set { revenuesWithoutDiscountsAccount = value; }
        }

        public Account DiscountsAccount
        {
            get { return discountsAccount; }
            set { discountsAccount = value; }
        }

        public Account OtherIncome
        {
            get { return otherIncome; }
            set { otherIncome = value; }
        }

        public Account InventorySurplus
        {
            get { return inventorySurplus; }
            set { inventorySurplus = value; }
        }

        public Account RevenueIncoming
        {
            get { return revenueIncoming; }
            set { revenueIncoming = value; }
        }

        public Account RemoveDishWithWriteoff
        {
            get { return removeDishWithWriteoff; }
            set { removeDishWithWriteoff = value; }
        }

        public Account CostOfGoodsSold
        {
            get { return costOfGoodsSold; }
            set { costOfGoodsSold = value; }
        }

        public Account InexpensiveGoods
        {
            get { return inexpensiveGoods; }
            set { inexpensiveGoods = value; }
        }

        public Account SalaryExpense
        {
            get { return salaryExpense; }
            set { salaryExpense = value; }
        }

        public Account ArtistsExpense
        {
            get { return artistsExpense; }
            set { artistsExpense = value; }
        }

        public Account RepresentativeExpense
        {
            get { return representativeExpense; }
            set { representativeExpense = value; }
        }

        public Account InventoryShortage
        {
            get { return inventoryShortage; }
            set { inventoryShortage = value; }
        }

        public Account AmortizationExpense
        {
            get { return amortizationExpense; }
            set { amortizationExpense = value; }
        }

        public Account EmployeesFreeFood
        {
            get { return employeesFreeFood; }
            set { employeesFreeFood = value; }
        }

        public Account OtherExpense
        {
            get { return otherExpense; }
            set { otherExpense = value; }
        }

        public Account ClientDeposits
        {
            get { return clientDeposits; }
            set { clientDeposits = value; }
        }

        public Account CostCalculationCorrection
        {
            get { return costCalculationCorrection; }
            set { costCalculationCorrection = value; }
        }

        public Account SalesNdsAccount
        {
            get { return salesNdsAccount; }
            set { salesNdsAccount = value; }
        }

    }

    [DataClass("CounteragentType")]
    [EnumClass]
    public partial class CounteragentType : LocalizableName<CounteragentType>
    {
        /// <summary> Нет. </summary>
        public static readonly CounteragentType NONE = new CounteragentType("NONE", "COUNTERAGENTTYPE_NAME_NONE");
        /// <summary> Все. </summary>
        public static readonly CounteragentType COUNTERAGENT = new CounteragentType("COUNTERAGENT", "COUNTERAGENTTYPE_NAME_COUNTERAGENT");
        /// <summary> Сотрудник. </summary>
        public static readonly CounteragentType EMPLOYEE = new CounteragentType("EMPLOYEE", "COUNTERAGENTTYPE_NAME_EMPLOYEE");
        /// <summary> Поставщик. </summary>
        public static readonly CounteragentType SUPPLIER = new CounteragentType("SUPPLIER", "COUNTERAGENTTYPE_NAME_SUPPLIER");
        /// <summary> Гость. </summary>
        public static readonly CounteragentType CLIENT = new CounteragentType("CLIENT", "COUNTERAGENTTYPE_NAME_CLIENT");
        /// <summary> Внутренний поставщик. </summary>
        public static readonly CounteragentType INTERNAL_SUPPLIER = new CounteragentType("INTERNAL_SUPPLIER", "COUNTERAGENTTYPE_NAME_INTERNAL_SUPPLIER");

        private readonly string fakeNameResId;
        private readonly string __value;
        private readonly string __nameResId;

        private CounteragentType(string __value, string fakeNameResId)
        {
            this.__value = __value;
            this.__nameResId = "COUNTERAGENTTYPE_NAME_" + __value;
            this.fakeNameResId = fakeNameResId;
        }

        public static CounteragentType Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "COUNTERAGENT": return COUNTERAGENT;
                case "EMPLOYEE": return EMPLOYEE;
                case "SUPPLIER": return SUPPLIER;
                case "CLIENT": return CLIENT;
                case "INTERNAL_SUPPLIER": return INTERNAL_SUPPLIER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CounteragentType[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    COUNTERAGENT, 
                    EMPLOYEE, 
                    SUPPLIER, 
                    CLIENT, 
                    INTERNAL_SUPPLIER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string FakeNameResId
        {
            get { return fakeNameResId; }
        }

    }

    [DataClass("CreditOrderTransaction")]
    public partial class CreditOrderTransaction : OrderPaymentTransaction
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CreditOrderTransaction() {}

        public CreditOrderTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal)
        {

        }

        public CreditOrderTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("CustomAccountingTransaction")]
    public partial class CustomAccountingTransaction : AccountingTransaction
    {

        protected CustomAccountingTransaction() {}

        public CustomAccountingTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {

        }

        public CustomAccountingTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("DocumentPaymentInfo")]
    public partial class DocumentPaymentInfo
    {
        [HasDefaultValue]
        private decimal sumToPay = 0;
        private DateTime? lastTransactionDate;

        protected DocumentPaymentInfo() {}

        public DocumentPaymentInfo(decimal sumToPay, DateTime? lastTransactionDate)
        {
            this.sumToPay = sumToPay;
            this.lastTransactionDate = lastTransactionDate;
        }

        public DocumentPaymentInfo(decimal sumToPay)
        {
            this.sumToPay = sumToPay;
        }

        public decimal SumToPay
        {
            get { return sumToPay; }
            set { sumToPay = value; }
        }

        public DateTime? LastTransactionDate
        {
            get { return lastTransactionDate; }
            set { lastTransactionDate = value; }
        }

    }

    [DataClass("FiscalOperationType")]
    [EnumClass]
    public partial class FiscalOperationType : LocalizableName<FiscalOperationType>
    {
        /// <summary> Фискальный. </summary>
        public static readonly FiscalOperationType FISCAL = new FiscalOperationType("FISCAL");
        /// <summary> Не фискальный. </summary>
        public static readonly FiscalOperationType NOT_FISCAL = new FiscalOperationType("NOT_FISCAL");
        /// <summary> (без оплаты). </summary>
        public static readonly FiscalOperationType NO_PAYMENT = new FiscalOperationType("NO_PAYMENT");

        private readonly string __value;
        private readonly string __nameResId;

        private FiscalOperationType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "FISCALOPERATIONTYPE_NAME_" + __value;
        }

        public static FiscalOperationType Parse(string value)
        {
            switch(value)
            {
                case "FISCAL": return FISCAL;
                case "NOT_FISCAL": return NOT_FISCAL;
                case "NO_PAYMENT": return NO_PAYMENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static FiscalOperationType[] VALUES
        {
            get
            {
                return new []
                {
                    FISCAL, 
                    NOT_FISCAL, 
                    NO_PAYMENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("IncomingCashOrder")]
    public partial class IncomingCashOrder : StubDocument
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IncomingCashOrder() {}

        public IncomingCashOrder(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public IncomingCashOrder(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("OpeningBalanceTransaction")]
    public partial class OpeningBalanceTransaction : AccountingTransaction
    {

        protected OpeningBalanceTransaction() {}

        public OpeningBalanceTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {

        }

        public OpeningBalanceTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("OrderDiscountTransaction")]
    public partial class OrderDiscountTransaction : CafeSessionTransaction
    {

        protected OrderDiscountTransaction() {}

        public OrderDiscountTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {

        }

        public OrderDiscountTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("OrderPaymentTransaction")]
    public abstract partial class OrderPaymentTransaction : CafeSessionTransaction
    {
        private PaymentType paymentType;
        private Guid? orderId;
        private int? chequeNumber;
        private bool? isFiscal;
        private CurrencyRateInfo currencyRateInfo;
        private decimal? sumInCurrency;

        protected OrderPaymentTransaction() {}

        protected OrderPaymentTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {
            this.paymentType = paymentType;
            this.orderId = orderId;
            this.chequeNumber = chequeNumber;
            this.isFiscal = isFiscal;
        }

        protected OrderPaymentTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public PaymentType PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int? ChequeNumber
        {
            get { return chequeNumber; }
            set { chequeNumber = value; }
        }

        public bool? IsFiscal
        {
            get { return isFiscal; }
            set { isFiscal = value; }
        }

        [CanBeNull]
        public CurrencyRateInfo CurrencyRateInfo
        {
            get { return currencyRateInfo; }
            set { currencyRateInfo = value; }
        }

        public decimal? SumInCurrency
        {
            get { return sumInCurrency; }
            set { sumInCurrency = value; }
        }

    }

    [DataClass("OrderPrepayClosedTransaction")]
    public partial class OrderPrepayClosedTransaction : OrderPaymentTransaction
    {

        protected OrderPrepayClosedTransaction() {}

        public OrderPrepayClosedTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal)
        {

        }

        public OrderPrepayClosedTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("OrderPrepayTransaction")]
    public partial class OrderPrepayTransaction : OrderPaymentTransaction
    {

        protected OrderPrepayTransaction() {}

        public OrderPrepayTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal)
        {

        }

        public OrderPrepayTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("OutgoingCashOrder")]
    public partial class OutgoingCashOrder : StubDocument
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public OutgoingCashOrder() {}

        public OutgoingCashOrder(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public OutgoingCashOrder(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [RootEntity]
    [DataClass("PayInOutType")]
    public partial class PayInOutType : LocalizableNamePersistedEntity
    {
        private Account chiefAccount;
        private Account account;
        private CounteragentType counteragentType;
        private TransactionType type;
        private CashFlowCategory cashFlowCategory;
        private Conception conception;
        private decimal? limit;
        [HasDefaultValue]
        private string comment = "";
        private bool? mandatoryFrontComment;
        [HasDefaultValue]
        private bool hideInFront = true;

        protected PayInOutType() {}

        public PayInOutType(Guid id, LocalizableValue name, Account account, CounteragentType counteragentType, TransactionType type, decimal? limit, bool? mandatoryFrontComment)
            : base(id, name)
        {
            this.account = account;
            this.counteragentType = counteragentType;
            this.type = type;
            this.limit = limit;
            this.mandatoryFrontComment = mandatoryFrontComment;
        }

        public PayInOutType(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        [CanBeNull]
        public Account ChiefAccount
        {
            get { return chiefAccount; }
            set { chiefAccount = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public CounteragentType CounteragentType
        {
            get { return counteragentType; }
            set { counteragentType = value; }
        }

        public TransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public decimal? Limit
        {
            get { return limit; }
            set { limit = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public bool? MandatoryFrontComment
        {
            get { return mandatoryFrontComment; }
            set { mandatoryFrontComment = value; }
        }

        public bool HideInFront
        {
            get { return hideInFront; }
            set { hideInFront = value; }
        }

    }

    [DataClass("TipsPaymentInfo")]
    public partial class TipsPaymentInfo
    {
        private PaymentType paymentType;
        private Account account;
        private bool visibleOnFront;
        private bool deleted;

        protected TipsPaymentInfo() {}

        public TipsPaymentInfo(PaymentType paymentType, Account account, bool visibleOnFront, bool deleted)
        {
            this.paymentType = paymentType;
            this.account = account;
            this.visibleOnFront = visibleOnFront;
            this.deleted = deleted;
        }
        public PaymentType PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public bool VisibleOnFront
        {
            get { return visibleOnFront; }
            set { visibleOnFront = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

    }

    [DataClass("TipsPaymentTransaction")]
    public partial class TipsPaymentTransaction : OrderPaymentTransaction
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public TipsPaymentTransaction() {}

        public TipsPaymentTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal)
        {

        }

        public TipsPaymentTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [RootEntity]
    [DataClass("TipsType")]
    public partial class TipsType : LocalizableNamePersistedEntity
    {
        private HashSet<DepartmentEntity> allowedDepartments;
        private HashSet<OrderServiceType> orderServiceTypes;
        private HashSet<TipsPaymentInfo> tipsPaymentInfos;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public TipsType() {}

        public TipsType(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        public HashSet<DepartmentEntity> AllowedDepartments
        {
            get { return allowedDepartments; }
            set { allowedDepartments = value; }
        }

        public HashSet<OrderServiceType> OrderServiceTypes
        {
            get { return orderServiceTypes; }
            set { orderServiceTypes = value; }
        }

        public HashSet<TipsPaymentInfo> TipsPaymentInfos
        {
            get { return tipsPaymentInfos; }
            set { tipsPaymentInfos = value; }
        }

    }

    [DataClass("TransactionInfo")]
    public partial class TransactionInfo
    {
        private Guid? id;
        private DateTime? date;
        private string number;
        private Guid? documentId;
        private TransactionType type;
        private DocumentType documentType;
        private PenaltyOrBonusType penaltyOrBonusType;
        private Account account;
        private User counterAgent;
        private User secondCounterAgent;
        private decimal? sum;
        private string comment;
        private DateTime? dateSecondary;
        private DateTime? dateCreated;
        private DateTime? dateModified;
        private User userModified;
        private CafeSessionProperties session;
        private AuthData auth;
        private string authStr;
        private Terminal terminal;
        private Guid? causeEventId;
        private DepartmentEntity department;
        private Conception conception;
        private CashFlowCategory cashFlowCategory;
        private string cashOrderNumber;

        protected TransactionInfo() {}

        public TransactionInfo(Guid? id, DateTime? date, string number, TransactionType type, Account account, decimal? sum)
        {
            this.id = id;
            this.date = date;
            this.number = number;
            this.type = type;
            this.account = account;
            this.sum = sum;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public TransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        [CanBeNull]
        public DocumentType DocumentType
        {
            get { return documentType; }
            set { documentType = value; }
        }

        [CanBeNull]
        public PenaltyOrBonusType PenaltyOrBonusType
        {
            get { return penaltyOrBonusType; }
            set { penaltyOrBonusType = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        [CanBeNull]
        public User CounterAgent
        {
            get { return counterAgent; }
            set { counterAgent = value; }
        }

        [CanBeNull]
        public User SecondCounterAgent
        {
            get { return secondCounterAgent; }
            set { secondCounterAgent = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public DateTime? DateSecondary
        {
            get { return dateSecondary; }
            set { dateSecondary = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public DateTime? DateModified
        {
            get { return dateModified; }
            set { dateModified = value; }
        }

        [CanBeNull]
        public User UserModified
        {
            get { return userModified; }
            set { userModified = value; }
        }

        [CanBeNull]
        public CafeSessionProperties Session
        {
            get { return session; }
            set { session = value; }
        }

        [CanBeNull]
        public AuthData Auth
        {
            get { return auth; }
            set { auth = value; }
        }

        [CanBeNull]
        public string AuthStr
        {
            get { return authStr; }
            set { authStr = value; }
        }

        [CanBeNull]
        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

        public Guid? CauseEventId
        {
            get { return causeEventId; }
            set { causeEventId = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        [CanBeNull]
        public string CashOrderNumber
        {
            get { return cashOrderNumber; }
            set { cashOrderNumber = value; }
        }

    }

    [DataClass("TransactionType")]
    [EnumClass]
    public partial class TransactionType : LocalizableName<TransactionType>, ILocalizableShortName
    {
        /// <summary> Начальный баланс. БАЛНАЧ. </summary>
        public static readonly TransactionType OPENING_BALANCE = new TransactionType("OPENING_BALANCE", "OPNBAL", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Ручная проводка. РУЧН. </summary>
        public static readonly TransactionType CUSTOM = new TransactionType("CUSTOM", "CUSTOM", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ANY, AccountingTransactionPartType.ANY);
        /// <summary> Продажа за наличные. ПН. </summary>
        public static readonly TransactionType CASH = new TransactionType("CASH", "CASH", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Продажа с предоплатой. ПН-ПРЕД. </summary>
        public static readonly TransactionType PREPAY_CLOSED = new TransactionType("PREPAY_CLOSED", "PREPS", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Предоплата. ПРЕДОП. </summary>
        public static readonly TransactionType PREPAY = new TransactionType("PREPAY", "PREPAY", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возврат предоплаты. ВОЗВПРЕД. </summary>
        public static readonly TransactionType PREPAY_RETURN = new TransactionType("PREPAY_RETURN", "RPREP", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возврат продажи с предоплатой. ПН-ВОЗВПРЕД. </summary>
        public static readonly TransactionType PREPAY_CLOSED_RETURN = new TransactionType("PREPAY_CLOSED_RETURN", "RPREPS", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Чаевые. ЧВ. </summary>
        public static readonly TransactionType TIPS = new TransactionType("TIPS", "TIPS", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возврат денег покупателю. ВОЗВРАТ. </summary>
        public static readonly TransactionType REVENUE_RETURN = new TransactionType("REVENUE_RETURN", "REVRET", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Скидка. СКИДКА. </summary>
        public static readonly TransactionType DISCOUNT = new TransactionType("DISCOUNT", "DISC", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Выручка по картам. CARD. </summary>
        public static readonly TransactionType CARD = new TransactionType("CARD", "CARD", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Выручка в кредит. КРЕД. </summary>
        public static readonly TransactionType CREDIT = new TransactionType("CREDIT", "CRED", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Внесенная сумма. ВС. </summary>
        public static readonly TransactionType PAYIN = new TransactionType("PAYIN", "PAYIN", true, true, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Изъятая сумма. ИС. </summary>
        public static readonly TransactionType PAYOUT = new TransactionType("PAYOUT", "PAYOUT", true, true, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Снятая выручка. СВ. </summary>
        public static readonly TransactionType PAY_COLLECTION = new TransactionType("PAY_COLLECTION", "PAYCOL", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Коррекция по кассе. КОРР. </summary>
        public static readonly TransactionType CASH_CORRECTION = new TransactionType("CASH_CORRECTION", "CORR", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Инвентаризация. ИНВ. </summary>
        public static readonly TransactionType INVENTORY_CORRECTION = new TransactionType("INVENTORY_CORRECTION", "INVENT", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Коррекция себестоимости. СЕБЕСТ. </summary>
        public static readonly TransactionType STORE_COST_CORRECTION = new TransactionType("STORE_COST_CORRECTION", "CSTCOR", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, true, false, false, AccountingTransactionPartType.STORE_COST_AFFECTED, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Излишек по кассе. ИЗЛИШ. </summary>
        public static readonly TransactionType CASH_SURPLUS = new TransactionType("CASH_SURPLUS", "SURPL", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Недостача по кассе. НЕДОСТ. </summary>
        public static readonly TransactionType CASH_SHORTAGE = new TransactionType("CASH_SHORTAGE", "SHORT", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Штраф. ШТРФ. </summary>
        public static readonly TransactionType PENALTY = new TransactionType("PENALTY", "PENALT", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, true, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Премия. ПРЕМ. </summary>
        public static readonly TransactionType BONUS = new TransactionType("BONUS", "BONUS", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, true, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Накладная. НАКЛ. </summary>
        public static readonly TransactionType INVOICE = new TransactionType("INVOICE", "INVOIC", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.STORE_COST_AFFECTED);
        /// <summary> Возврат от покупателя. ВОЗВРПОК. </summary>
        public static readonly TransactionType INCOMING_RETURNED_INVOICE = new TransactionType("INCOMING_RETURNED_INVOICE", "IRINV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.STORE_COST_AFFECTED);
        /// <summary> Возврат от покупателя по ингредиентам. ВОЗВРПОКИ. </summary>
        public static readonly TransactionType INCOMING_RETURNED_INVOICE_RETURN_GOOD = new TransactionType("INCOMING_RETURNED_INVOICE_RETURN_GOOD", "IRINVG", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возврат выручки покупателю. ВОЗВРПОКВ. </summary>
        public static readonly TransactionType INCOMING_RETURNED_INVOICE_REVENUE = new TransactionType("INCOMING_RETURNED_INVOICE_REVENUE", "IRINVR", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> НДС входящий. НДСВХ. </summary>
        public static readonly TransactionType NDS_INCOMING = new TransactionType("NDS_INCOMING", "NDSINC", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> НДС с продаж. НДСПР. </summary>
        public static readonly TransactionType NDS_SALES = new TransactionType("NDS_SALES", "NDSSAL", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Выручка от реализации. ВЫРРЕАЛ. </summary>
        public static readonly TransactionType SALES_REVENUE = new TransactionType("SALES_REVENUE", "SALREV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Расходная накладная. РАСХНАКЛ. </summary>
        public static readonly TransactionType OUTGOING_INVOICE = new TransactionType("OUTGOING_INVOICE", "OUTINV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Выручка расходной накладной. РАСХНАКЛВ. </summary>
        public static readonly TransactionType OUTGOING_INVOICE_REVENUE = new TransactionType("OUTGOING_INVOICE_REVENUE", "OUTREV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возвратная накладная по текущей себестоимости. ВОЗВРНАКЛ. </summary>
        public static readonly TransactionType RETURNED_INVOICE = new TransactionType("RETURNED_INVOICE", "RETINV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возвратная накладная по себестоимости покупки. ВОЗВРНАКЛПР. </summary>
        public static readonly TransactionType RETURNED_INVOICE_COST_AFFECTED = new TransactionType("RETURNED_INVOICE_COST_AFFECTED", "RETICE", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE_COST_AFFECTED, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Выручка возвратной накладной. ВОЗВРНАКВ. </summary>
        public static readonly TransactionType RETURNED_INVOICE_REVENUE = new TransactionType("RETURNED_INVOICE_REVENUE", "RETREV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Списание. СПИС. </summary>
        public static readonly TransactionType WRITEOFF = new TransactionType("WRITEOFF", "WROFF", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Реализация товаров. РЕАЛИЗ. </summary>
        public static readonly TransactionType SESSION_WRITEOFF = new TransactionType("SESSION_WRITEOFF", "SWROFF", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Внутреннее перемещение. ВНПЕРЕМ. </summary>
        public static readonly TransactionType TRANSFER = new TransactionType("TRANSFER", "TRNSF", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.STORE_COST_AFFECTED);
        /// <summary> Акт переработки. ПЕРЕРАБ. </summary>
        public static readonly TransactionType TRANSFORMATION = new TransactionType("TRANSFORMATION", "TRANS", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.STORE_COST_AFFECTED);
        /// <summary> Почасовая оплата. ПОЧАС. </summary>
        public static readonly TransactionType TARIFF_HOUR = new TransactionType("TARIFF_HOUR", "T_HOUR", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, true, false, false, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Оплата заказа за счет заведения. ПЗАВЕД. </summary>
        public static readonly TransactionType ON_THE_HOUSE = new TransactionType("ON_THE_HOUSE", "OTH", true, false, Serializer.Deserialize<HashSet<string>>("<r><i cls=\"java.lang.String\">cashFlowCategory</i><i cls=\"java.lang.String\">conception</i><i cls=\"java.lang.String\">comment</i></r>", false), false, false, true, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Аванс по зарплате. АВАНС. </summary>
        public static readonly TransactionType ADVANCE = new TransactionType("ADVANCE", "ADV", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Входящий сервис. ВХУСЛ. </summary>
        public static readonly TransactionType INCOMING_SERVICE = new TransactionType("INCOMING_SERVICE", "ISRV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Исходящий сервис. ИСХУСЛ. </summary>
        public static readonly TransactionType OUTGOING_SERVICE = new TransactionType("OUTGOING_SERVICE", "OSRV", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Оплата входящей услуги. ВХУСЛОПЛ. </summary>
        public static readonly TransactionType INCOMING_SERVICE_PAYMENT = new TransactionType("INCOMING_SERVICE_PAYMENT", "ISVP", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Зачет оплаты получения услуг. АОПЛВХУС. </summary>
        public static readonly TransactionType INCOMING_SERVICE_PAYMENT_AUTO = new TransactionType("INCOMING_SERVICE_PAYMENT_AUTO", "ISVPA", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Оплата исходящей услуги. ИСХУСЛОПЛ. </summary>
        public static readonly TransactionType OUTGOING_SERVICE_PAYMENT = new TransactionType("OUTGOING_SERVICE_PAYMENT", "OSVP", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Оплата поступления. ПОСТОПЛ. </summary>
        public static readonly TransactionType INCOMING_SCHEDULED_PAYMENT = new TransactionType("INCOMING_SCHEDULED_PAYMENT", "ISCP", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ANY);
        /// <summary> Оплата платежа. ПЛОПЛ. </summary>
        public static readonly TransactionType OUTGOING_SCHEDULED_PAYMENT = new TransactionType("OUTGOING_SCHEDULED_PAYMENT", "OSCP", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ANY);
        /// <summary> Загрузка банковской выписки. ВЫПИСКА. </summary>
        public static readonly TransactionType IMPORTED_BANK_STATEMENT = new TransactionType("IMPORTED_BANK_STATEMENT", "IBS", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Закрытие стола за счет сотрудника. НЕЗАКР. </summary>
        public static readonly TransactionType CLOSE_AT_EMPLOYEE_EXPENSE = new TransactionType("CLOSE_AT_EMPLOYEE_EXPENSE", "CAEE", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.COUNTERAGENT);
        /// <summary> Мотивационный бонус. МОТИВ. </summary>
        public static readonly TransactionType INCENTIVE_PAYMENT = new TransactionType("INCENTIVE_PAYMENT", "INCENT", true, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, true, false, false, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Процент с продаж. ПРОЦ. </summary>
        public static readonly TransactionType TARIFF_PERCENT = new TransactionType("TARIFF_PERCENT", "T_PERC", false, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, true, false, false, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Принятие смены. ПРИН. </summary>
        public static readonly TransactionType SESSION_ACCEPTANCE = new TransactionType("SESSION_ACCEPTANCE", "S_ACC", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Выдача наличных сотрудникам. НАЛСОТР. </summary>
        public static readonly TransactionType EMPLOYEE_CASH_PAYMENT = new TransactionType("EMPLOYEE_CASH_PAYMENT", "EMCPAY", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Начисление оклада. ОКЛ. </summary>
        public static readonly TransactionType EMPLOYEE_PAYMENT = new TransactionType("EMPLOYEE_PAYMENT", "EMPAY", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.COUNTERAGENT);
        /// <summary> Оплата накладной. НОПЛ. </summary>
        public static readonly TransactionType INVOICE_PAYMENT = new TransactionType("INVOICE_PAYMENT", "IIPAY", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.COUNTERAGENT);
        /// <summary> Зачет оплаты накладной. АОПЛН. </summary>
        public static readonly TransactionType INVOICE_PAYMENT_AUTO = new TransactionType("INVOICE_PAYMENT_AUTO", "IIPAYA", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.COUNTERAGENT);
        /// <summary> Принятие оплаты исходящего документа. ИДОПЛ. </summary>
        public static readonly TransactionType OUTGOING_DOCUMENT_PAYMENT = new TransactionType("OUTGOING_DOCUMENT_PAYMENT", "ODPAY", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.COUNTERAGENT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Принятие оплаты акта реализации. АРОПЛ. </summary>
        public static readonly TransactionType OUTGOING_SALES_DOCUMENT_PAYMENT = new TransactionType("OUTGOING_SALES_DOCUMENT_PAYMENT", "OSDPAY", true, true, Serializer.Deserialize<HashSet<string>>("<r></r>", false), false, false, false, true, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Акт приготовления. ПРГТ. </summary>
        public static readonly TransactionType PRODUCTION = new TransactionType("PRODUCTION", "PROD", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.STORE_COST_AFFECTED);
        /// <summary> Оплата приема возврата. ПРВОЗВР. </summary>
        public static readonly TransactionType SALES_RETURN_PAYMENT = new TransactionType("SALES_RETURN_PAYMENT", "SRPAY", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.ACCOUNT, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Возврат товаров. ВОЗВРТОВ. </summary>
        public static readonly TransactionType SALES_RETURN_WRITEOFF = new TransactionType("SALES_RETURN_WRITEOFF", "SRWRF", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.ACCOUNT);
        /// <summary> Акт разбора. РАЗБОР. </summary>
        public static readonly TransactionType DISASSEMBLE = new TransactionType("DISASSEMBLE", "DASMBL", false, false, Serializer.Deserialize<HashSet<string>>("<r></r>", false), true, false, false, false, AccountingTransactionPartType.STORE, AccountingTransactionPartType.STORE_COST_AFFECTED);

        private readonly string id;
        private readonly bool replicated;
        private readonly bool editable;
        private readonly HashSet<string> editableFields;
        private readonly bool autoDoc;
        private readonly bool autoNoDoc;
        private readonly bool front;
        private readonly bool manual;
        private readonly AccountingTransactionPartType fromPartType;
        private readonly AccountingTransactionPartType toPartType;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __shortNameResId;

        private TransactionType(string __value, string id, bool replicated, bool editable, HashSet<string> editableFields, bool autoDoc, bool autoNoDoc, bool front, bool manual, AccountingTransactionPartType fromPartType, AccountingTransactionPartType toPartType)
        {
            this.__value = __value;
            this.__nameResId = "TRANSACTIONTYPE_NAME_" + __value;
            this.__shortNameResId = "TRANSACTIONTYPE_SHORTNAME_" + __value;
            this.id = id;
            this.replicated = replicated;
            this.editable = editable;
            this.editableFields = editableFields;
            this.autoDoc = autoDoc;
            this.autoNoDoc = autoNoDoc;
            this.front = front;
            this.manual = manual;
            this.fromPartType = fromPartType;
            this.toPartType = toPartType;
        }

        public static TransactionType Parse(string value)
        {
            switch(value)
            {
                case "OPENING_BALANCE": return OPENING_BALANCE;
                case "CUSTOM": return CUSTOM;
                case "CASH": return CASH;
                case "PREPAY_CLOSED": return PREPAY_CLOSED;
                case "PREPAY": return PREPAY;
                case "PREPAY_RETURN": return PREPAY_RETURN;
                case "PREPAY_CLOSED_RETURN": return PREPAY_CLOSED_RETURN;
                case "TIPS": return TIPS;
                case "REVENUE_RETURN": return REVENUE_RETURN;
                case "DISCOUNT": return DISCOUNT;
                case "CARD": return CARD;
                case "CREDIT": return CREDIT;
                case "PAYIN": return PAYIN;
                case "PAYOUT": return PAYOUT;
                case "PAY_COLLECTION": return PAY_COLLECTION;
                case "CASH_CORRECTION": return CASH_CORRECTION;
                case "INVENTORY_CORRECTION": return INVENTORY_CORRECTION;
                case "STORE_COST_CORRECTION": return STORE_COST_CORRECTION;
                case "CASH_SURPLUS": return CASH_SURPLUS;
                case "CASH_SHORTAGE": return CASH_SHORTAGE;
                case "PENALTY": return PENALTY;
                case "BONUS": return BONUS;
                case "INVOICE": return INVOICE;
                case "INCOMING_RETURNED_INVOICE": return INCOMING_RETURNED_INVOICE;
                case "INCOMING_RETURNED_INVOICE_RETURN_GOOD": return INCOMING_RETURNED_INVOICE_RETURN_GOOD;
                case "INCOMING_RETURNED_INVOICE_REVENUE": return INCOMING_RETURNED_INVOICE_REVENUE;
                case "NDS_INCOMING": return NDS_INCOMING;
                case "NDS_SALES": return NDS_SALES;
                case "SALES_REVENUE": return SALES_REVENUE;
                case "OUTGOING_INVOICE": return OUTGOING_INVOICE;
                case "OUTGOING_INVOICE_REVENUE": return OUTGOING_INVOICE_REVENUE;
                case "RETURNED_INVOICE": return RETURNED_INVOICE;
                case "RETURNED_INVOICE_COST_AFFECTED": return RETURNED_INVOICE_COST_AFFECTED;
                case "RETURNED_INVOICE_REVENUE": return RETURNED_INVOICE_REVENUE;
                case "WRITEOFF": return WRITEOFF;
                case "SESSION_WRITEOFF": return SESSION_WRITEOFF;
                case "TRANSFER": return TRANSFER;
                case "TRANSFORMATION": return TRANSFORMATION;
                case "TARIFF_HOUR": return TARIFF_HOUR;
                case "ON_THE_HOUSE": return ON_THE_HOUSE;
                case "ADVANCE": return ADVANCE;
                case "INCOMING_SERVICE": return INCOMING_SERVICE;
                case "OUTGOING_SERVICE": return OUTGOING_SERVICE;
                case "INCOMING_SERVICE_PAYMENT": return INCOMING_SERVICE_PAYMENT;
                case "INCOMING_SERVICE_PAYMENT_AUTO": return INCOMING_SERVICE_PAYMENT_AUTO;
                case "OUTGOING_SERVICE_PAYMENT": return OUTGOING_SERVICE_PAYMENT;
                case "INCOMING_SCHEDULED_PAYMENT": return INCOMING_SCHEDULED_PAYMENT;
                case "OUTGOING_SCHEDULED_PAYMENT": return OUTGOING_SCHEDULED_PAYMENT;
                case "IMPORTED_BANK_STATEMENT": return IMPORTED_BANK_STATEMENT;
                case "CLOSE_AT_EMPLOYEE_EXPENSE": return CLOSE_AT_EMPLOYEE_EXPENSE;
                case "INCENTIVE_PAYMENT": return INCENTIVE_PAYMENT;
                case "TARIFF_PERCENT": return TARIFF_PERCENT;
                case "SESSION_ACCEPTANCE": return SESSION_ACCEPTANCE;
                case "EMPLOYEE_CASH_PAYMENT": return EMPLOYEE_CASH_PAYMENT;
                case "EMPLOYEE_PAYMENT": return EMPLOYEE_PAYMENT;
                case "INVOICE_PAYMENT": return INVOICE_PAYMENT;
                case "INVOICE_PAYMENT_AUTO": return INVOICE_PAYMENT_AUTO;
                case "OUTGOING_DOCUMENT_PAYMENT": return OUTGOING_DOCUMENT_PAYMENT;
                case "OUTGOING_SALES_DOCUMENT_PAYMENT": return OUTGOING_SALES_DOCUMENT_PAYMENT;
                case "PRODUCTION": return PRODUCTION;
                case "SALES_RETURN_PAYMENT": return SALES_RETURN_PAYMENT;
                case "SALES_RETURN_WRITEOFF": return SALES_RETURN_WRITEOFF;
                case "DISASSEMBLE": return DISASSEMBLE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TransactionType[] VALUES
        {
            get
            {
                return new []
                {
                    OPENING_BALANCE, 
                    CUSTOM, 
                    CASH, 
                    PREPAY_CLOSED, 
                    PREPAY, 
                    PREPAY_RETURN, 
                    PREPAY_CLOSED_RETURN, 
                    TIPS, 
                    REVENUE_RETURN, 
                    DISCOUNT, 
                    CARD, 
                    CREDIT, 
                    PAYIN, 
                    PAYOUT, 
                    PAY_COLLECTION, 
                    CASH_CORRECTION, 
                    INVENTORY_CORRECTION, 
                    STORE_COST_CORRECTION, 
                    CASH_SURPLUS, 
                    CASH_SHORTAGE, 
                    PENALTY, 
                    BONUS, 
                    INVOICE, 
                    INCOMING_RETURNED_INVOICE, 
                    INCOMING_RETURNED_INVOICE_RETURN_GOOD, 
                    INCOMING_RETURNED_INVOICE_REVENUE, 
                    NDS_INCOMING, 
                    NDS_SALES, 
                    SALES_REVENUE, 
                    OUTGOING_INVOICE, 
                    OUTGOING_INVOICE_REVENUE, 
                    RETURNED_INVOICE, 
                    RETURNED_INVOICE_COST_AFFECTED, 
                    RETURNED_INVOICE_REVENUE, 
                    WRITEOFF, 
                    SESSION_WRITEOFF, 
                    TRANSFER, 
                    TRANSFORMATION, 
                    TARIFF_HOUR, 
                    ON_THE_HOUSE, 
                    ADVANCE, 
                    INCOMING_SERVICE, 
                    OUTGOING_SERVICE, 
                    INCOMING_SERVICE_PAYMENT, 
                    INCOMING_SERVICE_PAYMENT_AUTO, 
                    OUTGOING_SERVICE_PAYMENT, 
                    INCOMING_SCHEDULED_PAYMENT, 
                    OUTGOING_SCHEDULED_PAYMENT, 
                    IMPORTED_BANK_STATEMENT, 
                    CLOSE_AT_EMPLOYEE_EXPENSE, 
                    INCENTIVE_PAYMENT, 
                    TARIFF_PERCENT, 
                    SESSION_ACCEPTANCE, 
                    EMPLOYEE_CASH_PAYMENT, 
                    EMPLOYEE_PAYMENT, 
                    INVOICE_PAYMENT, 
                    INVOICE_PAYMENT_AUTO, 
                    OUTGOING_DOCUMENT_PAYMENT, 
                    OUTGOING_SALES_DOCUMENT_PAYMENT, 
                    PRODUCTION, 
                    SALES_RETURN_PAYMENT, 
                    SALES_RETURN_WRITEOFF, 
                    DISASSEMBLE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string ShortNameResId
        {
            get { return __shortNameResId; }
        }

        public string Id
        {
            get { return id; }
        }

        public bool Replicated
        {
            get { return replicated; }
        }

        public bool Editable
        {
            get { return editable; }
        }

        public HashSet<string> EditableFields
        {
            get { return editableFields; }
        }

        public bool AutoDoc
        {
            get { return autoDoc; }
        }

        public bool AutoNoDoc
        {
            get { return autoNoDoc; }
        }

        public bool Front
        {
            get { return front; }
        }

        public bool Manual
        {
            get { return manual; }
        }

        public AccountingTransactionPartType FromPartType
        {
            get { return fromPartType; }
        }

        public AccountingTransactionPartType ToPartType
        {
            get { return toPartType; }
        }

    }

    [DataClass("TransactionTypeOperation")]
    [EnumClass]
    public partial class TransactionTypeOperation : LocalizableName<TransactionTypeOperation>
    {
        /// <summary> Сторнирование. </summary>
        public static readonly TransactionTypeOperation STORNED = new TransactionTypeOperation("STORNED");
        /// <summary> Предоплата. </summary>
        public static readonly TransactionTypeOperation PREPAY = new TransactionTypeOperation("PREPAY");
        /// <summary> Возврат предоплаты. </summary>
        public static readonly TransactionTypeOperation PREPAY_RETURN = new TransactionTypeOperation("PREPAY_RETURN");
        /// <summary> (без оплаты). </summary>
        public static readonly TransactionTypeOperation NO_PAYMENT = new TransactionTypeOperation("NO_PAYMENT");
        /// <summary> Оплата. </summary>
        public static readonly TransactionTypeOperation PAYMENT = new TransactionTypeOperation("PAYMENT");

        private readonly string __value;
        private readonly string __nameResId;

        private TransactionTypeOperation(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TRANSACTIONTYPEOPERATION_NAME_" + __value;
        }

        public static TransactionTypeOperation Parse(string value)
        {
            switch(value)
            {
                case "STORNED": return STORNED;
                case "PREPAY": return PREPAY;
                case "PREPAY_RETURN": return PREPAY_RETURN;
                case "NO_PAYMENT": return NO_PAYMENT;
                case "PAYMENT": return PAYMENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TransactionTypeOperation[] VALUES
        {
            get
            {
                return new []
                {
                    STORNED, 
                    PREPAY, 
                    PREPAY_RETURN, 
                    NO_PAYMENT, 
                    PAYMENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("VoucherOrderTransaction")]
    public partial class VoucherOrderTransaction : CardOrderTransaction
    {
        [HasDefaultValue]
        private int vouchersNum = 0;
        private decimal? nominal;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public VoucherOrderTransaction() {}

        public VoucherOrderTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PaymentType paymentType, Guid? orderId, int? chequeNumber, bool? isFiscal, string cardNumber, string cardTypeName, string approvalCode)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth, paymentType, orderId, chequeNumber, isFiscal, cardNumber, cardTypeName, approvalCode)
        {

        }

        public VoucherOrderTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public int VouchersNum
        {
            get { return vouchersNum; }
            set { vouchersNum = value; }
        }

        public decimal? Nominal
        {
            get { return nominal; }
            set { nominal = value; }
        }

    }

    [DataClass("DateDepartmentConceptionStructure")]
    public partial class DateDepartmentConceptionStructure
    {
        private DateTime? date;
        private DepartmentEntity department;
        private Conception conception;

        protected DateDepartmentConceptionStructure() {}

        public DateDepartmentConceptionStructure(DateTime? date, DepartmentEntity department, Conception conception)
        {
            this.date = date;
            this.department = department;
            this.conception = conception;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

    }

    [DataClass("PnLSelectionType")]
    public enum PnLSelectionType
    {
        DATE,
        DEPARTMENT,
        CONCEPTION
    }

    [DataClass("BackOfficeNomenclatureUpdate")]
    public partial class BackOfficeNomenclatureUpdate
    {
        private int revision;
        private bool fullUpdate;
        private Dictionary<Product, ProductCostAndOutput> productCostPricesByDepartment;
        private Dictionary<Product, decimal> productsBalanceForDate;
        private Dictionary<Product, DateTime> lastInventoryDates;
        private Dictionary<ProductTreeEntity, ProductTreeWarning> productTreeWarnings;
        private Dictionary<Product, HashSet<AllergenGroup>> allergenGroups;
        private Dictionary<Product, ProductWriteoffStrategy> currentWriteoffStrategyForProducts;
        private Dictionary<Guid, string> productUsagesSummary;

        protected BackOfficeNomenclatureUpdate() {}

        public BackOfficeNomenclatureUpdate(int revision, bool fullUpdate)
        {
            this.revision = revision;
            this.fullUpdate = fullUpdate;
        }
        public int Revision
        {
            get { return revision; }
            set { revision = value; }
        }

        public bool FullUpdate
        {
            get { return fullUpdate; }
            set { fullUpdate = value; }
        }

        public Dictionary<Product, ProductCostAndOutput> ProductCostPricesByDepartment
        {
            get { return productCostPricesByDepartment; }
            set { productCostPricesByDepartment = value; }
        }

        public Dictionary<Product, decimal> ProductsBalanceForDate
        {
            get { return productsBalanceForDate; }
            set { productsBalanceForDate = value; }
        }

        public Dictionary<Product, DateTime> LastInventoryDates
        {
            get { return lastInventoryDates; }
            set { lastInventoryDates = value; }
        }

        public Dictionary<ProductTreeEntity, ProductTreeWarning> ProductTreeWarnings
        {
            get { return productTreeWarnings; }
            set { productTreeWarnings = value; }
        }

        public Dictionary<Product, HashSet<AllergenGroup>> AllergenGroups
        {
            get { return allergenGroups; }
            set { allergenGroups = value; }
        }

        public Dictionary<Product, ProductWriteoffStrategy> CurrentWriteoffStrategyForProducts
        {
            get { return currentWriteoffStrategyForProducts; }
            set { currentWriteoffStrategyForProducts = value; }
        }

        public Dictionary<Guid, string> ProductUsagesSummary
        {
            get { return productUsagesSummary; }
            set { productUsagesSummary = value; }
        }

    }

    [DataClass("FrontCompositeUpdate")]
    public partial class FrontCompositeUpdate
    {
        private int fromRevision;
        private int toRevision;
        private bool fullUpdate;
        private FrontCorporatedProperties frontCorporatedProperties;
        private AllergenGroupsFrontDto allergenGroupsFront;
        private ICollection<CurrencyRateDto> currencyRates;
        private ICollection<EmployeeScheduleItem> employeeScheduleItems;
        private int? lastRevisionPriceListItem;
        private int? lastRevisionEgaisEntities;
        private int? lastRevisionEgaisMarkState;

        protected FrontCompositeUpdate() {}

        public FrontCompositeUpdate(int fromRevision, int toRevision, bool fullUpdate, FrontCorporatedProperties frontCorporatedProperties, AllergenGroupsFrontDto allergenGroupsFront, int? lastRevisionPriceListItem, int? lastRevisionEgaisEntities, int? lastRevisionEgaisMarkState)
        {
            this.fromRevision = fromRevision;
            this.toRevision = toRevision;
            this.fullUpdate = fullUpdate;
            this.frontCorporatedProperties = frontCorporatedProperties;
            this.allergenGroupsFront = allergenGroupsFront;
            this.lastRevisionPriceListItem = lastRevisionPriceListItem;
            this.lastRevisionEgaisEntities = lastRevisionEgaisEntities;
            this.lastRevisionEgaisMarkState = lastRevisionEgaisMarkState;
        }
        public int FromRevision
        {
            get { return fromRevision; }
            set { fromRevision = value; }
        }

        public int ToRevision
        {
            get { return toRevision; }
            set { toRevision = value; }
        }

        public bool FullUpdate
        {
            get { return fullUpdate; }
            set { fullUpdate = value; }
        }

        public FrontCorporatedProperties FrontCorporatedProperties
        {
            get { return frontCorporatedProperties; }
            set { frontCorporatedProperties = value; }
        }

        public AllergenGroupsFrontDto AllergenGroupsFront
        {
            get { return allergenGroupsFront; }
            set { allergenGroupsFront = value; }
        }

        public ICollection<CurrencyRateDto> CurrencyRates
        {
            get { return currencyRates; }
            set { currencyRates = value; }
        }

        public ICollection<EmployeeScheduleItem> EmployeeScheduleItems
        {
            get { return employeeScheduleItems; }
            set { employeeScheduleItems = value; }
        }

        public int? LastRevisionPriceListItem
        {
            get { return lastRevisionPriceListItem; }
            set { lastRevisionPriceListItem = value; }
        }

        public int? LastRevisionEgaisEntities
        {
            get { return lastRevisionEgaisEntities; }
            set { lastRevisionEgaisEntities = value; }
        }

        public int? LastRevisionEgaisMarkState
        {
            get { return lastRevisionEgaisMarkState; }
            set { lastRevisionEgaisMarkState = value; }
        }

    }

    [DataClass("AbstractChangeDocumentListRecord")]
    public partial class AbstractChangeDocumentListRecord : AbstractDocumentListRecord
    {
        private DateTime? dateAppliedFrom;
        private DateTime? dateAppliedTo;

        protected AbstractChangeDocumentListRecord() {}

        public AbstractChangeDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, DateTime? dateAppliedFrom, DateTime? dateAppliedTo)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary)
        {
            this.dateAppliedFrom = dateAppliedFrom;
            this.dateAppliedTo = dateAppliedTo;
        }
        public DateTime? DateAppliedFrom
        {
            get { return dateAppliedFrom; }
            set { dateAppliedFrom = value; }
        }

        public DateTime? DateAppliedTo
        {
            get { return dateAppliedTo; }
            set { dateAppliedTo = value; }
        }

    }

    [DataClass("AbstractDocument")]
    public abstract partial class AbstractDocument : CachedEntity
    {
        private DateTime dateIncoming;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";
        private OperationInfo modifiedInfo;
        private OperationInfo createdInfo;
        private DocumentStatus status;
        private string comment;
        private Conception conception;
        private bool? disableUserSaving;

        protected AbstractDocument() {}

        protected AbstractDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id)
        {
            this.dateIncoming = dateIncoming;
            this.documentNumber = documentNumber;
            this.status = status;
        }

        protected AbstractDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id)
        {
            this.dateIncoming = dateIncoming;
            this.documentNumber = documentNumber;
        }

        public DateTime DateIncoming
        {
            get { return dateIncoming; }
            set { dateIncoming = value; }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

        [CanBeNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        public DocumentStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public bool? DisableUserSaving
        {
            get { return disableUserSaving; }
            set { disableUserSaving = value; }
        }

    }

    [DataClass("AbstractDocumentListRecord")]
    public partial class AbstractDocumentListRecord
    {
        private Guid? documentID;
        private DateTime? date;
        private string number;
        private DocumentType type;
        private bool processed;
        private bool deleted;
        private DateTime? dateCreated;
        private DateTime? dateModified;
        private User userCreated;
        private User userModified;
        private string comment;
        private Conception conception;
        private string documentSummary;

        public AbstractDocumentListRecord() {}

        public AbstractDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary)
        {
            this.documentID = documentID;
            this.date = date;
            this.number = number;
            this.type = type;
            this.processed = processed;
            this.deleted = deleted;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.userCreated = userCreated;
            this.userModified = userModified;
            this.comment = comment;
            this.documentSummary = documentSummary;
        }
        public Guid? DocumentID
        {
            get { return documentID; }
            set { documentID = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public DocumentType Type
        {
            get { return type; }
            set { type = value; }
        }

        public bool Processed
        {
            get { return processed; }
            set { processed = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public DateTime? DateModified
        {
            get { return dateModified; }
            set { dateModified = value; }
        }

        public User UserCreated
        {
            get { return userCreated; }
            set { userCreated = value; }
        }

        public User UserModified
        {
            get { return userModified; }
            set { userModified = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public string DocumentSummary
        {
            get { return documentSummary; }
            set { documentSummary = value; }
        }

    }

    [DataClass("AccountingDocumentListRecord")]
    public partial class AccountingDocumentListRecord : AbstractDocumentListRecord
    {
        private User counteragent;
        private Store storeFrom;
        private Store storeTo;
        private DateTime? paymentDate;
        private DateTime? dueDate;
        private decimal? amount;
        private decimal? sumWithoutNds;
        private decimal? sum;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Store> assignedStores = new List<Store>();

        protected AccountingDocumentListRecord() {}

        public AccountingDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary)
        {
            this.counteragent = counteragent;
            this.storeFrom = storeFrom;
            this.storeTo = storeTo;
            this.amount = amount;
            this.sumWithoutNds = sumWithoutNds;
            this.sum = sum;
        }
        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        public Store StoreTo
        {
            get { return storeTo; }
            set { storeTo = value; }
        }

        public DateTime? PaymentDate
        {
            get { return paymentDate; }
            set { paymentDate = value; }
        }

        public DateTime? DueDate
        {
            get { return dueDate; }
            set { dueDate = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? SumWithoutNds
        {
            get { return sumWithoutNds; }
            set { sumWithoutNds = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [NotNull]
        public List<Store> AssignedStores
        {
            get { return assignedStores; }
        }

    }

    [DataClass("CachedSwitchable")]
    public partial class CachedSwitchable<T> : Switchable<T>
        where T : CachedEntity
    {
        [ForceTypeAttributeInXml]
        private T value;

        protected CachedSwitchable() {}

        public CachedSwitchable(bool enabled, T value)
            : base(enabled)
        {
            this.value = value;
        }
        public T Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("DocumentStatus")]
    public enum DocumentStatus
    {
        NEW,
        PROCESSED,
        DELETED
    }

    [DataClass("DocumentType")]
    [EnumClass]
    public partial class DocumentType : LocalizableName<DocumentType>, ILocalizableShortName
    {
        /// <summary> Приходная накладная. п/н. </summary>
        public static readonly DocumentType INCOMING_INVOICE = new DocumentType("INCOMING_INVOICE", null, TransactionType.INVOICE_PAYMENT, TransactionType.INVOICE_PAYMENT_AUTO, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">INVOICE_PAYMENT</i><i cls=\"TransactionType\">INVOICE_PAYMENT_AUTO</i><i cls=\"TransactionType\">INVOICE</i><i cls=\"TransactionType\">NDS_INCOMING</i></r>", false), false);
        /// <summary> Инвентаризация. инв. </summary>
        public static readonly DocumentType INCOMING_INVENTORY = new DocumentType("INCOMING_INVENTORY", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">INVENTORY_CORRECTION</i><i cls=\"TransactionType\">PENALTY</i></r>", false), false);
        /// <summary> Акт приема услуг. в/у. </summary>
        public static readonly DocumentType INCOMING_SERVICE = new DocumentType("INCOMING_SERVICE", null, TransactionType.INCOMING_SERVICE_PAYMENT, TransactionType.INCOMING_SERVICE_PAYMENT_AUTO, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">INCOMING_SERVICE_PAYMENT</i><i cls=\"TransactionType\">INCOMING_SERVICE_PAYMENT_AUTO</i><i cls=\"TransactionType\">INCOMING_SERVICE</i></r>", false), false);
        /// <summary> Акт оказания услуг. и/у. </summary>
        public static readonly DocumentType OUTGOING_SERVICE = new DocumentType("OUTGOING_SERVICE", null, TransactionType.OUTGOING_SERVICE_PAYMENT, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">OUTGOING_SERVICE_PAYMENT</i><i cls=\"TransactionType\">OUTGOING_SERVICE</i><i cls=\"TransactionType\">CREDIT</i><i cls=\"TransactionType\">CARD</i><i cls=\"TransactionType\">DISCOUNT</i></r>", false), false);
        /// <summary> Акт списания. а/с. </summary>
        public static readonly DocumentType WRITEOFF_DOCUMENT = new DocumentType("WRITEOFF_DOCUMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">WRITEOFF</i></r>", false), false);
        /// <summary> Акт реализации. а/р. </summary>
        public static readonly DocumentType SALES_DOCUMENT = new DocumentType("SALES_DOCUMENT", null, TransactionType.OUTGOING_SALES_DOCUMENT_PAYMENT, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">OUTGOING_SALES_DOCUMENT_PAYMENT</i><i cls=\"TransactionType\">SALES_REVENUE</i><i cls=\"TransactionType\">SESSION_WRITEOFF</i><i cls=\"TransactionType\">NDS_SALES</i><i cls=\"TransactionType\">DISCOUNT</i></r>", false), false);
        /// <summary> Принятие смены. п/с. </summary>
        public static readonly DocumentType SESSION_ACCEPTANCE = new DocumentType("SESSION_ACCEPTANCE", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">SESSION_ACCEPTANCE</i></r>", false), false);
        /// <summary> Внутреннее перемещение. в/п. </summary>
        public static readonly DocumentType INTERNAL_TRANSFER = new DocumentType("INTERNAL_TRANSFER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">TRANSFER</i></r>", false), false);
        /// <summary> Расходная накладная. р/н. </summary>
        public static readonly DocumentType OUTGOING_INVOICE = new DocumentType("OUTGOING_INVOICE", null, TransactionType.OUTGOING_DOCUMENT_PAYMENT, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">OUTGOING_DOCUMENT_PAYMENT</i><i cls=\"TransactionType\">OUTGOING_INVOICE</i><i cls=\"TransactionType\">OUTGOING_INVOICE_REVENUE</i><i cls=\"TransactionType\">NDS_SALES</i><i cls=\"TransactionType\">DISCOUNT</i></r>", false), false);
        /// <summary> Возвратная накладная. в/н. </summary>
        public static readonly DocumentType RETURNED_INVOICE = new DocumentType("RETURNED_INVOICE", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">RETURNED_INVOICE</i><i cls=\"TransactionType\">RETURNED_INVOICE_COST_AFFECTED</i><i cls=\"TransactionType\">RETURNED_INVOICE_REVENUE</i></r>", false), false);
        /// <summary> Возврат от покупателя. взвр/пок. </summary>
        public static readonly DocumentType INCOMING_RETURNED_INVOICE = new DocumentType("INCOMING_RETURNED_INVOICE", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">INCOMING_RETURNED_INVOICE</i><i cls=\"TransactionType\">INCOMING_RETURNED_INVOICE_RETURN_GOOD</i><i cls=\"TransactionType\">INCOMING_RETURNED_INVOICE_REVENUE</i><i cls=\"TransactionType\">NDS_SALES</i></r>", false), false);
        /// <summary> Акт приготовления. а/пр. </summary>
        public static readonly DocumentType PRODUCTION_DOCUMENT = new DocumentType("PRODUCTION_DOCUMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">PRODUCTION</i></r>", false), false);
        /// <summary> Акт переработки. а/пб. </summary>
        public static readonly DocumentType TRANSFORMATION_DOCUMENT = new DocumentType("TRANSFORMATION_DOCUMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">TRANSFORMATION</i></r>", false), false);
        /// <summary> Заказ в производство. з/п. </summary>
        public static readonly DocumentType PRODUCTION_ORDER = new DocumentType("PRODUCTION_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Консолидированный заказ. к/з. </summary>
        public static readonly DocumentType CONSOLIDATED_ORDER = new DocumentType("CONSOLIDATED_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Ведомость полуфабрикатов. в/пф. </summary>
        public static readonly DocumentType PREPARED_REGISTER = new DocumentType("PREPARED_REGISTER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Приказ об изменении прейскуранта. п/м. </summary>
        public static readonly DocumentType MENU_CHANGE = new DocumentType("MENU_CHANGE", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Замена товаров. з/т. </summary>
        public static readonly DocumentType PRODUCT_REPLACEMENT = new DocumentType("PRODUCT_REPLACEMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Акт приема возврата. п/в. </summary>
        public static readonly DocumentType SALES_RETURN_DOCUMENT = new DocumentType("SALES_RETURN_DOCUMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">SALES_RETURN_PAYMENT</i><i cls=\"TransactionType\">SALES_RETURN_WRITEOFF</i><i cls=\"TransactionType\">NDS_SALES</i><i cls=\"TransactionType\">DISCOUNT</i></r>", false), true);
        /// <summary> Акт разбора. а/рб. </summary>
        public static readonly DocumentType DISASSEMBLE_DOCUMENT = new DocumentType("DISASSEMBLE_DOCUMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">DISASSEMBLE</i></r>", false), false);
        /// <summary> Акт приема топлива. апт. </summary>
        public static readonly DocumentType FUEL_ACCEPTANCE = new DocumentType("FUEL_ACCEPTANCE", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), true);
        /// <summary> Акт замера топлива. азт. </summary>
        public static readonly DocumentType FUEL_GAGING_DOCUMENT = new DocumentType("FUEL_GAGING_DOCUMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), true);
        /// <summary> Платежная ведомость. з/в. </summary>
        public static readonly DocumentType PAYROLL = new DocumentType("PAYROLL", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r><i cls=\"TransactionType\">ADVANCE</i><i cls=\"TransactionType\">PAYOUT</i></r>", false), false);
        /// <summary> Заявка на запланированный платеж. з/пл. </summary>
        public static readonly DocumentType SCHEDULED_PAYMENT_REQUEST = new DocumentType("SCHEDULED_PAYMENT_REQUEST", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Заявка на запланированное поступление. з/зп. </summary>
        public static readonly DocumentType SCHEDULED_INCOMING_REQUEST = new DocumentType("SCHEDULED_INCOMING_REQUEST", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запрос остатков ЕГАИС. з/ое. </summary>
        public static readonly DocumentType EGAIS_BALANCE_QUERY = new DocumentType("EGAIS_BALANCE_QUERY", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запрос справочника организаций ЕГАИС. з/оре. </summary>
        public static readonly DocumentType EGAIS_QUERY_ORGANIZATION = new DocumentType("EGAIS_QUERY_ORGANIZATION", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запрос справочника продукции ЕГАИС. з/пе. </summary>
        public static readonly DocumentType EGAIS_QUERY_PRODUCT = new DocumentType("EGAIS_QUERY_PRODUCT", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запрос справки 1 ЕГАИС. з/ае. </summary>
        public static readonly DocumentType EGAIS_QUERY_FORM_A = new DocumentType("EGAIS_QUERY_FORM_A", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Исходящая накладная ЕГАИС. и/не. </summary>
        public static readonly DocumentType EGAIS_OUTGOING_INVOICE = new DocumentType("EGAIS_OUTGOING_INVOICE", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Постановка на баланс ЕГАИС. п/бе. </summary>
        public static readonly DocumentType EGAIS_SHOP_INCOMING = new DocumentType("EGAIS_SHOP_INCOMING", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Перемещение ЕГАИС. п/е. </summary>
        public static readonly DocumentType EGAIS_SHOP_TRANSFER = new DocumentType("EGAIS_SHOP_TRANSFER", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Акт списания ЕГАИС. а/се. </summary>
        public static readonly DocumentType EGAIS_SHOP_WRITEOFF = new DocumentType("EGAIS_SHOP_WRITEOFF", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запрос на отмену документа ЕГАИС. з/о. </summary>
        public static readonly DocumentType EGAIS_REQUEST_REPEAL = new DocumentType("EGAIS_REQUEST_REPEAL", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Акт фиксации штрихкодов ЕГАИС. а/фе. </summary>
        public static readonly DocumentType EGAIS_MARK_FIX = new DocumentType("EGAIS_MARK_FIX", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Акт отмены фиксации штрихкодов ЕГАИС. а/ое. </summary>
        public static readonly DocumentType EGAIS_MARK_UNFIX = new DocumentType("EGAIS_MARK_UNFIX", RegionalFeatureId.EGAIS, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Внешний заказ поставщику. з/ктр. </summary>
        public static readonly DocumentType EDI_ORDER = new DocumentType("EDI_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Счет фактура. сч/ф. </summary>
        public static readonly DocumentType VAT_INVOICE = new DocumentType("VAT_INVOICE", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запланированный платеж. плат. </summary>
        public static readonly DocumentType SCHEDULED_PAYMENT = new DocumentType("SCHEDULED_PAYMENT", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Запланированное поступление. пост. </summary>
        public static readonly DocumentType SCHEDULED_INCOMING = new DocumentType("SCHEDULED_INCOMING", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Расходный платежный ордер. р/по. </summary>
        public static readonly DocumentType OUTGOING_SCHEDULED_PAYMENT_ORDER = new DocumentType("OUTGOING_SCHEDULED_PAYMENT_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Приходной платежный ордер. п/по. </summary>
        public static readonly DocumentType INCOMING_SCHEDULED_PAYMENT_ORDER = new DocumentType("INCOMING_SCHEDULED_PAYMENT_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Расходный кассовый ордер. р/ко. </summary>
        public static readonly DocumentType OUTGOING_CASH_ORDER = new DocumentType("OUTGOING_CASH_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);
        /// <summary> Приходный кассовый ордер. п/ко. </summary>
        public static readonly DocumentType INCOMING_CASH_ORDER = new DocumentType("INCOMING_CASH_ORDER", null, null, null, Serializer.Deserialize<List<TransactionType>>("<r></r>", false), false);

        private readonly RegionalFeatureId regionalFeatureId;
        private readonly TransactionType manualPaymentTransactionsType;
        private readonly TransactionType autoPaymentTransactionsType;
        private readonly List<TransactionType> transactionTypes;
        private readonly bool obsolete;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __shortNameResId;

        private DocumentType(string __value, RegionalFeatureId regionalFeatureId, TransactionType manualPaymentTransactionsType, TransactionType autoPaymentTransactionsType, List<TransactionType> transactionTypes, bool obsolete)
        {
            this.__value = __value;
            this.__nameResId = "DOCUMENTTYPE_NAME_" + __value;
            this.__shortNameResId = "DOCUMENTTYPE_SHORTNAME_" + __value;
            this.regionalFeatureId = regionalFeatureId;
            this.manualPaymentTransactionsType = manualPaymentTransactionsType;
            this.autoPaymentTransactionsType = autoPaymentTransactionsType;
            this.transactionTypes = transactionTypes;
            this.obsolete = obsolete;
        }

        public static DocumentType Parse(string value)
        {
            switch(value)
            {
                case "INCOMING_INVOICE": return INCOMING_INVOICE;
                case "INCOMING_INVENTORY": return INCOMING_INVENTORY;
                case "INCOMING_SERVICE": return INCOMING_SERVICE;
                case "OUTGOING_SERVICE": return OUTGOING_SERVICE;
                case "WRITEOFF_DOCUMENT": return WRITEOFF_DOCUMENT;
                case "SALES_DOCUMENT": return SALES_DOCUMENT;
                case "SESSION_ACCEPTANCE": return SESSION_ACCEPTANCE;
                case "INTERNAL_TRANSFER": return INTERNAL_TRANSFER;
                case "OUTGOING_INVOICE": return OUTGOING_INVOICE;
                case "RETURNED_INVOICE": return RETURNED_INVOICE;
                case "INCOMING_RETURNED_INVOICE": return INCOMING_RETURNED_INVOICE;
                case "PRODUCTION_DOCUMENT": return PRODUCTION_DOCUMENT;
                case "TRANSFORMATION_DOCUMENT": return TRANSFORMATION_DOCUMENT;
                case "PRODUCTION_ORDER": return PRODUCTION_ORDER;
                case "CONSOLIDATED_ORDER": return CONSOLIDATED_ORDER;
                case "PREPARED_REGISTER": return PREPARED_REGISTER;
                case "MENU_CHANGE": return MENU_CHANGE;
                case "PRODUCT_REPLACEMENT": return PRODUCT_REPLACEMENT;
                case "SALES_RETURN_DOCUMENT": return SALES_RETURN_DOCUMENT;
                case "DISASSEMBLE_DOCUMENT": return DISASSEMBLE_DOCUMENT;
                case "FUEL_ACCEPTANCE": return FUEL_ACCEPTANCE;
                case "FUEL_GAGING_DOCUMENT": return FUEL_GAGING_DOCUMENT;
                case "PAYROLL": return PAYROLL;
                case "SCHEDULED_PAYMENT_REQUEST": return SCHEDULED_PAYMENT_REQUEST;
                case "SCHEDULED_INCOMING_REQUEST": return SCHEDULED_INCOMING_REQUEST;
                case "EGAIS_BALANCE_QUERY": return EGAIS_BALANCE_QUERY;
                case "EGAIS_QUERY_ORGANIZATION": return EGAIS_QUERY_ORGANIZATION;
                case "EGAIS_QUERY_PRODUCT": return EGAIS_QUERY_PRODUCT;
                case "EGAIS_QUERY_FORM_A": return EGAIS_QUERY_FORM_A;
                case "EGAIS_OUTGOING_INVOICE": return EGAIS_OUTGOING_INVOICE;
                case "EGAIS_SHOP_INCOMING": return EGAIS_SHOP_INCOMING;
                case "EGAIS_SHOP_TRANSFER": return EGAIS_SHOP_TRANSFER;
                case "EGAIS_SHOP_WRITEOFF": return EGAIS_SHOP_WRITEOFF;
                case "EGAIS_REQUEST_REPEAL": return EGAIS_REQUEST_REPEAL;
                case "EGAIS_MARK_FIX": return EGAIS_MARK_FIX;
                case "EGAIS_MARK_UNFIX": return EGAIS_MARK_UNFIX;
                case "EDI_ORDER": return EDI_ORDER;
                case "VAT_INVOICE": return VAT_INVOICE;
                case "SCHEDULED_PAYMENT": return SCHEDULED_PAYMENT;
                case "SCHEDULED_INCOMING": return SCHEDULED_INCOMING;
                case "OUTGOING_SCHEDULED_PAYMENT_ORDER": return OUTGOING_SCHEDULED_PAYMENT_ORDER;
                case "INCOMING_SCHEDULED_PAYMENT_ORDER": return INCOMING_SCHEDULED_PAYMENT_ORDER;
                case "OUTGOING_CASH_ORDER": return OUTGOING_CASH_ORDER;
                case "INCOMING_CASH_ORDER": return INCOMING_CASH_ORDER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DocumentType[] VALUES
        {
            get
            {
                return new []
                {
                    INCOMING_INVOICE, 
                    INCOMING_INVENTORY, 
                    INCOMING_SERVICE, 
                    OUTGOING_SERVICE, 
                    WRITEOFF_DOCUMENT, 
                    SALES_DOCUMENT, 
                    SESSION_ACCEPTANCE, 
                    INTERNAL_TRANSFER, 
                    OUTGOING_INVOICE, 
                    RETURNED_INVOICE, 
                    INCOMING_RETURNED_INVOICE, 
                    PRODUCTION_DOCUMENT, 
                    TRANSFORMATION_DOCUMENT, 
                    PRODUCTION_ORDER, 
                    CONSOLIDATED_ORDER, 
                    PREPARED_REGISTER, 
                    MENU_CHANGE, 
                    PRODUCT_REPLACEMENT, 
                    SALES_RETURN_DOCUMENT, 
                    DISASSEMBLE_DOCUMENT, 
                    FUEL_ACCEPTANCE, 
                    FUEL_GAGING_DOCUMENT, 
                    PAYROLL, 
                    SCHEDULED_PAYMENT_REQUEST, 
                    SCHEDULED_INCOMING_REQUEST, 
                    EGAIS_BALANCE_QUERY, 
                    EGAIS_QUERY_ORGANIZATION, 
                    EGAIS_QUERY_PRODUCT, 
                    EGAIS_QUERY_FORM_A, 
                    EGAIS_OUTGOING_INVOICE, 
                    EGAIS_SHOP_INCOMING, 
                    EGAIS_SHOP_TRANSFER, 
                    EGAIS_SHOP_WRITEOFF, 
                    EGAIS_REQUEST_REPEAL, 
                    EGAIS_MARK_FIX, 
                    EGAIS_MARK_UNFIX, 
                    EDI_ORDER, 
                    VAT_INVOICE, 
                    SCHEDULED_PAYMENT, 
                    SCHEDULED_INCOMING, 
                    OUTGOING_SCHEDULED_PAYMENT_ORDER, 
                    INCOMING_SCHEDULED_PAYMENT_ORDER, 
                    OUTGOING_CASH_ORDER, 
                    INCOMING_CASH_ORDER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string ShortNameResId
        {
            get { return __shortNameResId; }
        }

        public RegionalFeatureId RegionalFeatureId
        {
            get { return regionalFeatureId; }
        }

        public TransactionType ManualPaymentTransactionsType
        {
            get { return manualPaymentTransactionsType; }
        }

        public TransactionType AutoPaymentTransactionsType
        {
            get { return autoPaymentTransactionsType; }
        }

        public List<TransactionType> TransactionTypes
        {
            get { return transactionTypes; }
        }

        public bool Obsolete
        {
            get { return obsolete; }
        }

    }

    [DataClass("DocumentValidationResult")]
    public partial class DocumentValidationResult
    {
        [HasDefaultValue]
        private bool valid = true;
        [HasDefaultValue]
        private bool warning = false;
        private string documentNumber;
        private string otherSuggestedNumber;
        private string errorMessage;
        private string additionalInfo;


        public bool Valid
        {
            get { return valid; }
            set { valid = value; }
        }

        public bool Warning
        {
            get { return warning; }
            set { warning = value; }
        }

        [CanBeNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        [CanBeNull]
        public string OtherSuggestedNumber
        {
            get { return otherSuggestedNumber; }
            set { otherSuggestedNumber = value; }
        }

        [CanBeNull]
        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

        [CanBeNull]
        public string AdditionalInfo
        {
            get { return additionalInfo; }
            set { additionalInfo = value; }
        }

    }

    [DataClass("EditableDocumentListRecord")]
    public partial class EditableDocumentListRecord : AccountingDocumentListRecord
    {
        [HasDefaultValue]
        private bool isEditable = true;
        private bool isAutomatic;
        private bool disableUserSaving;

        protected EditableDocumentListRecord() {}

        public EditableDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum)
        {
            this.isAutomatic = isAutomatic;
            this.disableUserSaving = disableUserSaving;
        }
        public bool IsEditable
        {
            get { return isEditable; }
            set { isEditable = value; }
        }

        public bool IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool DisableUserSaving
        {
            get { return disableUserSaving; }
            set { disableUserSaving = value; }
        }

    }

    [DataClass("IncomingInvoiceListRecord")]
    public partial class IncomingInvoiceListRecord : EditableDocumentListRecord
    {
        private string invoiceIncomingNumber;
        private bool hasDifference;
        private string invoice;
        private bool? deliveryOnTime;
        private bool? matchesToTheOrder;
        [HasDefaultValue]
        private bool hasPriceDeviations = false;

        protected IncomingInvoiceListRecord() {}

        public IncomingInvoiceListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, string invoiceIncomingNumber, bool hasDifference)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving)
        {
            this.invoiceIncomingNumber = invoiceIncomingNumber;
            this.hasDifference = hasDifference;
        }
        public string InvoiceIncomingNumber
        {
            get { return invoiceIncomingNumber; }
            set { invoiceIncomingNumber = value; }
        }

        public bool HasDifference
        {
            get { return hasDifference; }
            set { hasDifference = value; }
        }

        [CanBeNull]
        public string Invoice
        {
            get { return invoice; }
            set { invoice = value; }
        }

        public bool? DeliveryOnTime
        {
            get { return deliveryOnTime; }
            set { deliveryOnTime = value; }
        }

        public bool? MatchesToTheOrder
        {
            get { return matchesToTheOrder; }
            set { matchesToTheOrder = value; }
        }

        public bool HasPriceDeviations
        {
            get { return hasPriceDeviations; }
            set { hasPriceDeviations = value; }
        }

    }

    [DataClass("IncomingReturnedInvoiceListRecord")]
    public partial class IncomingReturnedInvoiceListRecord : OutgoingDocumentListRecord
    {
        private string outgoingInvoiceCaption;

        protected IncomingReturnedInvoiceListRecord() {}

        public IncomingReturnedInvoiceListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, Store store, Account revenueAccount, Account expenseAccount, string outgoingInvoiceCaption)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving, store, revenueAccount, expenseAccount)
        {
            this.outgoingInvoiceCaption = outgoingInvoiceCaption;
        }
        public string OutgoingInvoiceCaption
        {
            get { return outgoingInvoiceCaption; }
            set { outgoingInvoiceCaption = value; }
        }

    }

    [DataClass("InventoryDocumentListRecord")]
    public partial class InventoryDocumentListRecord : AccountingDocumentListRecord
    {
        private Account accountSurplus;
        private Account accountShortage;
        private decimal? surplusSum;
        private decimal? shortageSum;
        private HashSet<User> finedUsers;
        private bool automatic;

        protected InventoryDocumentListRecord() {}

        public InventoryDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, Account accountSurplus, Account accountShortage, decimal? surplusSum, decimal? shortageSum, bool automatic)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum)
        {
            this.accountSurplus = accountSurplus;
            this.accountShortage = accountShortage;
            this.surplusSum = surplusSum;
            this.shortageSum = shortageSum;
            this.automatic = automatic;
        }
        public Account AccountSurplus
        {
            get { return accountSurplus; }
            set { accountSurplus = value; }
        }

        public Account AccountShortage
        {
            get { return accountShortage; }
            set { accountShortage = value; }
        }

        public decimal? SurplusSum
        {
            get { return surplusSum; }
            set { surplusSum = value; }
        }

        public decimal? ShortageSum
        {
            get { return shortageSum; }
            set { shortageSum = value; }
        }

        public HashSet<User> FinedUsers
        {
            get { return finedUsers; }
            set { finedUsers = value; }
        }

        public bool Automatic
        {
            get { return automatic; }
            set { automatic = value; }
        }

    }

    [DataClass("InvoiceDocumentSimpleListRecord")]
    public partial class InvoiceDocumentSimpleListRecord
    {
        private Guid? documentId;
        private DateTime? date;
        private string number;
        private User counterParty;

        protected InvoiceDocumentSimpleListRecord() {}

        public InvoiceDocumentSimpleListRecord(Guid? documentId, DateTime? date, string number, User counterParty)
        {
            this.documentId = documentId;
            this.date = date;
            this.number = number;
            this.counterParty = counterParty;
        }
        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public User CounterParty
        {
            get { return counterParty; }
            set { counterParty = value; }
        }

    }

    [DataClass("OutgoingDocumentListRecord")]
    public partial class OutgoingDocumentListRecord : EditableDocumentListRecord
    {
        private Store store;
        private Account revenueAccount;
        private Account expenseAccount;
        [HasDefaultValue]
        private int sessionNumber = 0;
        [HasDefaultValue]
        private int cashNumber = 0;
        [HasDefaultValue]
        private decimal totalCost = 0;
        [HasDefaultValue]
        private bool hasDifference = false;
        [HasDefaultValue]
        private bool hasCostDifference = false;

        protected OutgoingDocumentListRecord() {}

        public OutgoingDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, Store store, Account revenueAccount, Account expenseAccount)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving)
        {
            this.store = store;
            this.revenueAccount = revenueAccount;
            this.expenseAccount = expenseAccount;
        }
        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        public Account ExpenseAccount
        {
            get { return expenseAccount; }
            set { expenseAccount = value; }
        }

        public int SessionNumber
        {
            get { return sessionNumber; }
            set { sessionNumber = value; }
        }

        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public decimal TotalCost
        {
            get { return totalCost; }
            set { totalCost = value; }
        }

        public bool HasDifference
        {
            get { return hasDifference; }
            set { hasDifference = value; }
        }

        public bool HasCostDifference
        {
            get { return hasCostDifference; }
            set { hasCostDifference = value; }
        }

    }

    [DataClass("ProcessableDocument")]
    public abstract partial class ProcessableDocument : AbstractDocument
    {

        protected ProcessableDocument() {}

        protected ProcessableDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        protected ProcessableDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("ReturnedInvoiceListRecord")]
    public partial class ReturnedInvoiceListRecord : OutgoingDocumentListRecord
    {
        private string incomingInvoiceCaption;

        protected ReturnedInvoiceListRecord() {}

        public ReturnedInvoiceListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, Store store, Account revenueAccount, Account expenseAccount, string incomingInvoiceCaption)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving, store, revenueAccount, expenseAccount)
        {
            this.incomingInvoiceCaption = incomingInvoiceCaption;
        }
        public string IncomingInvoiceCaption
        {
            get { return incomingInvoiceCaption; }
            set { incomingInvoiceCaption = value; }
        }

    }

    [DataClass("SalesDocumentListRecord")]
    public partial class SalesDocumentListRecord : OutgoingDocumentListRecord
    {
        private decimal? discountSum;
        private decimal? selfPriceSum;

        protected SalesDocumentListRecord() {}

        public SalesDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, Store store, Account revenueAccount, Account expenseAccount, decimal? discountSum, decimal? selfPriceSum)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving, store, revenueAccount, expenseAccount)
        {
            this.discountSum = discountSum;
            this.selfPriceSum = selfPriceSum;
        }
        public decimal? DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public decimal? SelfPriceSum
        {
            get { return selfPriceSum; }
            set { selfPriceSum = value; }
        }

    }

    [DataClass("SingleProductProcessingDocumentListRecord")]
    public partial class SingleProductProcessingDocumentListRecord : EditableDocumentListRecord
    {
        private decimal? weightDifference;
        private decimal? weightIn;
        private decimal? weightOut;
        private decimal? averageWeight;
        private decimal? deviationWeight;

        protected SingleProductProcessingDocumentListRecord() {}

        public SingleProductProcessingDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving)
        {

        }
        public decimal? WeightDifference
        {
            get { return weightDifference; }
            set { weightDifference = value; }
        }

        public decimal? WeightIn
        {
            get { return weightIn; }
            set { weightIn = value; }
        }

        public decimal? WeightOut
        {
            get { return weightOut; }
            set { weightOut = value; }
        }

        public decimal? AverageWeight
        {
            get { return averageWeight; }
            set { averageWeight = value; }
        }

        public decimal? DeviationWeight
        {
            get { return deviationWeight; }
            set { deviationWeight = value; }
        }

    }

    [RootEntity]
    [DataClass("StoresMapping")]
    public partial class StoresMapping : PersistedEntity
    {
        private Dictionary<Store, Store> mapping;

        protected StoresMapping() {}

        public StoresMapping(Guid id)
            : base(id)
        {

        }
        [CanBeNull]
        public Dictionary<Store, Store> Mapping
        {
            get { return mapping; }
            set { mapping = value; }
        }

    }

    [DataClass("WriteoffDocumentListRecord")]
    public partial class WriteoffDocumentListRecord : EditableDocumentListRecord
    {
        private Account accountTo;

        protected WriteoffDocumentListRecord() {}

        public WriteoffDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, Account accountTo)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving)
        {
            this.accountTo = accountTo;
        }
        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

    }

    [DataClass("DocumentNumberTemplateElement")]
    [EnumClass]
    public partial class DocumentNumberTemplateElement : LocalizableName<DocumentNumberTemplateElement>
    {
        /// <summary> Автоматический счетчик. </summary>
        public static readonly DocumentNumberTemplateElement AUTOINCREMENT = new DocumentNumberTemplateElement("AUTOINCREMENT", "#");
        /// <summary> Код подразделения. </summary>
        public static readonly DocumentNumberTemplateElement DEPARTMENT_ID = new DocumentNumberTemplateElement("DEPARTMENT_ID", "{D}");
        /// <summary> Год (две цифры). </summary>
        public static readonly DocumentNumberTemplateElement YEAR_SHORT = new DocumentNumberTemplateElement("YEAR_SHORT", "{yy}");
        /// <summary> Год (четыре цифры). </summary>
        public static readonly DocumentNumberTemplateElement YEAR_LONG = new DocumentNumberTemplateElement("YEAR_LONG", "{yyyy}");
        /// <summary> Месяц (без ведущего нуля). </summary>
        public static readonly DocumentNumberTemplateElement MONTH_SHORT = new DocumentNumberTemplateElement("MONTH_SHORT", "{m}");
        /// <summary> Месяц (с ведущим нулем). </summary>
        public static readonly DocumentNumberTemplateElement MONTH = new DocumentNumberTemplateElement("MONTH", "{mm}");
        /// <summary> День (без ведущего нуля). </summary>
        public static readonly DocumentNumberTemplateElement DAY_SHORT = new DocumentNumberTemplateElement("DAY_SHORT", "{d}");
        /// <summary> День (с ведущим нулем). </summary>
        public static readonly DocumentNumberTemplateElement DAY = new DocumentNumberTemplateElement("DAY", "{dd}");
        /// <summary> Номер фискального регистратора (только для счетов-фактур). </summary>
        public static readonly DocumentNumberTemplateElement CASH_NUMBER = new DocumentNumberTemplateElement("CASH_NUMBER", "{cashNum}");
        /// <summary> Номер кассовой смены (только для счетов-фактур). </summary>
        public static readonly DocumentNumberTemplateElement SESSION_NUMBER = new DocumentNumberTemplateElement("SESSION_NUMBER", "{sessionNum}");
        /// <summary> Номер заказа (только для счетов-фактур). </summary>
        public static readonly DocumentNumberTemplateElement ORDER_NUMBER = new DocumentNumberTemplateElement("ORDER_NUMBER", "{orderNum}");
        /// <summary> Номер доставки (только для безналичной оплаты контрагентом). </summary>
        public static readonly DocumentNumberTemplateElement DELIVERY_NUMBER = new DocumentNumberTemplateElement("DELIVERY_NUMBER", "{deliveryNum}");
        /// <summary> Номер счета (только для счетов-фактур). </summary>
        public static readonly DocumentNumberTemplateElement INVOICE_NUMBER = new DocumentNumberTemplateElement("INVOICE_NUMBER", "{invoiceNumber}");

        private readonly string symbol;
        private readonly string __value;
        private readonly string __nameResId;

        private DocumentNumberTemplateElement(string __value, string symbol)
        {
            this.__value = __value;
            this.__nameResId = "DOCUMENTNUMBERTEMPLATEELEMENT_NAME_" + __value;
            this.symbol = symbol;
        }

        public static DocumentNumberTemplateElement Parse(string value)
        {
            switch(value)
            {
                case "AUTOINCREMENT": return AUTOINCREMENT;
                case "DEPARTMENT_ID": return DEPARTMENT_ID;
                case "YEAR_SHORT": return YEAR_SHORT;
                case "YEAR_LONG": return YEAR_LONG;
                case "MONTH_SHORT": return MONTH_SHORT;
                case "MONTH": return MONTH;
                case "DAY_SHORT": return DAY_SHORT;
                case "DAY": return DAY;
                case "CASH_NUMBER": return CASH_NUMBER;
                case "SESSION_NUMBER": return SESSION_NUMBER;
                case "ORDER_NUMBER": return ORDER_NUMBER;
                case "DELIVERY_NUMBER": return DELIVERY_NUMBER;
                case "INVOICE_NUMBER": return INVOICE_NUMBER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DocumentNumberTemplateElement[] VALUES
        {
            get
            {
                return new []
                {
                    AUTOINCREMENT, 
                    DEPARTMENT_ID, 
                    YEAR_SHORT, 
                    YEAR_LONG, 
                    MONTH_SHORT, 
                    MONTH, 
                    DAY_SHORT, 
                    DAY, 
                    CASH_NUMBER, 
                    SESSION_NUMBER, 
                    ORDER_NUMBER, 
                    DELIVERY_NUMBER, 
                    INVOICE_NUMBER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Symbol
        {
            get { return symbol; }
        }

    }

    [DataClass("DocumentNumberingAutoincrementValues")]
    public partial class DocumentNumberingAutoincrementValues
    {
        private CorporatedEntity corporatedEntity;
        private Dictionary<DocumentType, int> autoincrementValuesByType;

        protected DocumentNumberingAutoincrementValues() {}

        public DocumentNumberingAutoincrementValues(CorporatedEntity corporatedEntity)
        {
            this.corporatedEntity = corporatedEntity;
        }
        public CorporatedEntity CorporatedEntity
        {
            get { return corporatedEntity; }
            set { corporatedEntity = value; }
        }

        public Dictionary<DocumentType, int> AutoincrementValuesByType
        {
            get { return autoincrementValuesByType; }
            set { autoincrementValuesByType = value; }
        }

    }

    [RootEntity]
    [DataClass("DocumentNumberingSettings")]
    public partial class DocumentNumberingSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        private CorporatedEntity corporatedEntity;
        [NotNull, NotNullField]
        private DocumentType documentType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string template = "####";

        protected DocumentNumberingSettings() {}

        public DocumentNumberingSettings(Guid id, CorporatedEntity corporatedEntity, DocumentType documentType)
            : base(id)
        {
            this.corporatedEntity = corporatedEntity;
            this.documentType = documentType;
        }
        [NotNull]
        public CorporatedEntity CorporatedEntity
        {
            get { return corporatedEntity; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  corporatedEntity = value;
            }
        }

        [NotNull]
        public DocumentType DocumentType
        {
            get { return documentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentType = value;
            }
        }

        [NotNull]
        public string Template
        {
            get { return template; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  template = value;
            }
        }

    }

    [DataClass("DocumentNumberingState")]
    public partial class DocumentNumberingState : CachedEntity
    {
        private DocumentType documentType;
        [HasDefaultValue]
        private int currentAutoIncrementValue = 1;
        private DateTime? modified;
        private DepartmentEntity department;
        private int year;

        protected DocumentNumberingState() {}

        public DocumentNumberingState(Guid id, DocumentType documentType, DepartmentEntity department, int year)
            : base(id)
        {
            this.documentType = documentType;
            this.department = department;
            this.year = year;
        }

        public DocumentNumberingState(Guid id)
            : base(id)
        {

        }

        public DocumentType DocumentType
        {
            get { return documentType; }
            set { documentType = value; }
        }

        public int CurrentAutoIncrementValue
        {
            get { return currentAutoIncrementValue; }
            set { currentAutoIncrementValue = value; }
        }

        public DateTime? Modified
        {
            get { return modified; }
            set { modified = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public int Year
        {
            get { return year; }
            set { year = value; }
        }

    }

    [DataClass("BaseServiceListRecord")]
    public partial class BaseServiceListRecord : EditableDocumentListRecord
    {
        private string invoiceIncomingNumber;
        private Account revenueAccount;
        private string invoice;
        private string docNumber;
        private DateTime? docDate;
        private User supplier;
        private DepartmentEntity department;

        protected BaseServiceListRecord() {}

        public BaseServiceListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, string invoiceIncomingNumber, Account revenueAccount, string invoice, string docNumber, DateTime? docDate, User supplier, DepartmentEntity department)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving)
        {
            this.invoiceIncomingNumber = invoiceIncomingNumber;
            this.revenueAccount = revenueAccount;
            this.invoice = invoice;
            this.docNumber = docNumber;
            this.docDate = docDate;
            this.supplier = supplier;
            this.department = department;
        }
        public string InvoiceIncomingNumber
        {
            get { return invoiceIncomingNumber; }
            set { invoiceIncomingNumber = value; }
        }

        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        public string Invoice
        {
            get { return invoice; }
            set { invoice = value; }
        }

        public string DocNumber
        {
            get { return docNumber; }
            set { docNumber = value; }
        }

        public DateTime? DocDate
        {
            get { return docDate; }
            set { docDate = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("IncomingServiceListRecord")]
    public partial class IncomingServiceListRecord : BaseServiceListRecord
    {
        private User employeePassToAccount;
        private DateTime? fromDate;

        protected IncomingServiceListRecord() {}

        public IncomingServiceListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, string invoiceIncomingNumber, Account revenueAccount, string invoice, string docNumber, DateTime? docDate, User supplier, DepartmentEntity department, User employeePassToAccount, DateTime? fromDate)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving, invoiceIncomingNumber, revenueAccount, invoice, docNumber, docDate, supplier, department)
        {
            this.employeePassToAccount = employeePassToAccount;
            this.fromDate = fromDate;
        }
        public User EmployeePassToAccount
        {
            get { return employeePassToAccount; }
            set { employeePassToAccount = value; }
        }

        public DateTime? FromDate
        {
            get { return fromDate; }
            set { fromDate = value; }
        }

    }

    [DataClass("StubDocument")]
    public abstract partial class StubDocument : AbstractDocument
    {
        private HashSet<DepartmentEntity> departments;

        protected StubDocument() {}

        protected StubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        protected StubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

    }

    [DataClass("StubDocumentItem")]
    public abstract partial class StubDocumentItem
    {


    }

    [RootEntity]
    [DataClass("AttendanceType")]
    public partial class AttendanceType : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private LocalizableValue notation;
        private decimal? payKoeff;
        private int color;
        [HasDefaultValue]
        private bool? status = true;
        [HasDefaultValue]
        private bool? system = false;
        private string comment;

        protected AttendanceType() {}

        public AttendanceType(Guid id, LocalizableValue name, LocalizableValue notation, decimal? payKoeff, int color)
            : base(id, name)
        {
            this.notation = notation;
            this.payKoeff = payKoeff;
            this.color = color;
        }

        public AttendanceType(Guid id, LocalizableValue name, LocalizableValue notation)
            : base(id, name)
        {
            this.notation = notation;
        }

        [NotNull]
        public LocalizableValue Notation
        {
            get { return notation; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  notation = value;
            }
        }

        public decimal? PayKoeff
        {
            get { return payKoeff; }
            set { payKoeff = value; }
        }

        public int Color
        {
            get { return color; }
            set { color = value; }
        }

        public bool? Status
        {
            get { return status; }
            set { status = value; }
        }

        public bool? System
        {
            get { return system; }
            set { system = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("AutoPenaltyType")]
    public abstract partial class AutoPenaltyType : PenaltyOrBonusType
    {
        private CalcStrategy calcType;

        protected AutoPenaltyType() {}

        protected AutoPenaltyType(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment, decimal? sum)
            : base(id, name, notation, comment, sum)
        {

        }

        protected AutoPenaltyType(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment)
            : base(id, name, notation, comment)
        {

        }

        public CalcStrategy CalcType
        {
            get { return calcType; }
            set { calcType = value; }
        }

    }

    [DataClass("CounteragentTransaction")]
    public partial class CounteragentTransaction : CafeSessionTransaction
    {
        private EmployeeAttendanceEntry attendanceEntry;
        private EmployeeScheduleItem scheduleItem;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CounteragentTransaction() {}

        public CounteragentTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {

        }

        public CounteragentTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        [CanBeNull]
        public EmployeeAttendanceEntry AttendanceEntry
        {
            get { return attendanceEntry; }
            set { attendanceEntry = value; }
        }

        [CanBeNull]
        public EmployeeScheduleItem ScheduleItem
        {
            get { return scheduleItem; }
            set { scheduleItem = value; }
        }

    }

    [DataClass("CreateAttendanceForScheduleOperationType")]
    [EnumClass]
    public partial class CreateAttendanceForScheduleOperationType : LocalizableName<CreateAttendanceForScheduleOperationType>
    {
        /// <summary> Никогда. </summary>
        public static readonly CreateAttendanceForScheduleOperationType NEVER = new CreateAttendanceForScheduleOperationType("NEVER");
        /// <summary> Всегда. </summary>
        public static readonly CreateAttendanceForScheduleOperationType ALWAYS = new CreateAttendanceForScheduleOperationType("ALWAYS");
        /// <summary> Спрашивать. </summary>
        public static readonly CreateAttendanceForScheduleOperationType QUESTION = new CreateAttendanceForScheduleOperationType("QUESTION");

        private readonly string __value;
        private readonly string __nameResId;

        private CreateAttendanceForScheduleOperationType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CREATEATTENDANCEFORSCHEDULEOPERATIONTYPE_NAME_" + __value;
        }

        public static CreateAttendanceForScheduleOperationType Parse(string value)
        {
            switch(value)
            {
                case "NEVER": return NEVER;
                case "ALWAYS": return ALWAYS;
                case "QUESTION": return QUESTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CreateAttendanceForScheduleOperationType[] VALUES
        {
            get
            {
                return new []
                {
                    NEVER, 
                    ALWAYS, 
                    QUESTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EmployeeAttendanceEntry")]
    public partial class EmployeeAttendanceEntry : EmployeeIntervalEntry
    {
        private Guid? closeEventId;
        [HasDefaultValue]
        private string comment = "";
        private DateTime? personalSessionStart;
        private DateTime? personalSessionEnd;
        private AttendanceType attendanceType;
        [HasDefaultValue]
        private bool confirmedManually = false;
        [HasDefaultValue]
        private bool autoClosed = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EmployeeAttendanceEntry() {}

        public EmployeeAttendanceEntry(Guid id, DateTime? dateFrom, DateTime? dateTo, User employee, DepartmentEntity department, DepartmentEntity salaryDepartment)
            : base(id, dateFrom, dateTo, employee, department, salaryDepartment)
        {

        }

        public EmployeeAttendanceEntry(Guid id, DepartmentEntity department, DepartmentEntity salaryDepartment)
            : base(id, department, salaryDepartment)
        {

        }

        public Guid? CloseEventId
        {
            get { return closeEventId; }
            set { closeEventId = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public DateTime? PersonalSessionStart
        {
            get { return personalSessionStart; }
            set { personalSessionStart = value; }
        }

        public DateTime? PersonalSessionEnd
        {
            get { return personalSessionEnd; }
            set { personalSessionEnd = value; }
        }

        [CanBeNull]
        public AttendanceType AttendanceType
        {
            get { return attendanceType; }
            set { attendanceType = value; }
        }

        public bool ConfirmedManually
        {
            get { return confirmedManually; }
            set { confirmedManually = value; }
        }

        public bool AutoClosed
        {
            get { return autoClosed; }
            set { autoClosed = value; }
        }

    }

    [DataClass("EmployeeIntervalEntry")]
    public abstract partial class EmployeeIntervalEntry : CachedEntity
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private User employee;
        private Role role;
        private DateTime? created;
        private OperationInfo modifiedInfo;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private DepartmentEntity salaryDepartment;

        protected EmployeeIntervalEntry() {}

        protected EmployeeIntervalEntry(Guid id, DateTime? dateFrom, DateTime? dateTo, User employee, DepartmentEntity department, DepartmentEntity salaryDepartment)
            : base(id)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.employee = employee;
            this.department = department;
            this.salaryDepartment = salaryDepartment;
        }

        protected EmployeeIntervalEntry(Guid id, DepartmentEntity department, DepartmentEntity salaryDepartment)
            : base(id)
        {
            this.department = department;
            this.salaryDepartment = salaryDepartment;
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        [CanBeNull]
        public Role Role
        {
            get { return role; }
            set { role = value; }
        }

        public DateTime? Created
        {
            get { return created; }
            set { created = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        [NotNull]
        public DepartmentEntity SalaryDepartment
        {
            get { return salaryDepartment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  salaryDepartment = value;
            }
        }

    }

    [DataClass("EmployeePercentPayment")]
    public partial class EmployeePercentPayment : CounteragentTransaction
    {
        private decimal? salesSum;

        protected EmployeePercentPayment() {}

        public EmployeePercentPayment(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, decimal? salesSum)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {
            this.salesSum = salesSum;
        }

        public EmployeePercentPayment(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public decimal? SalesSum
        {
            get { return salesSum; }
            set { salesSum = value; }
        }

    }

    [DataClass("EmployeeScheduleItem")]
    public partial class EmployeeScheduleItem : EmployeeIntervalEntry
    {
        private ScheduleItemState state;
        private OperationInfoCommented missPenaltyCancel;
        private OperationInfoCommented latePenaltyCancel;
        private OperationInfoCommented earlyPenaltyCancel;
        private Guid? penaltyOverrideId;
        [NotNull, NotNullField]
        private ScheduleType scheduleType;
        [HasDefaultValue]
        private int nonPaidMinutes = 0;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EmployeeScheduleItem() {}

        public EmployeeScheduleItem(Guid id, DateTime? dateFrom, DateTime? dateTo, User employee, DepartmentEntity department, DepartmentEntity salaryDepartment, ScheduleItemState state, OperationInfoCommented missPenaltyCancel, OperationInfoCommented latePenaltyCancel, OperationInfoCommented earlyPenaltyCancel, ScheduleType scheduleType)
            : base(id, dateFrom, dateTo, employee, department, salaryDepartment)
        {
            this.state = state;
            this.missPenaltyCancel = missPenaltyCancel;
            this.latePenaltyCancel = latePenaltyCancel;
            this.earlyPenaltyCancel = earlyPenaltyCancel;
            this.scheduleType = scheduleType;
        }

        public EmployeeScheduleItem(Guid id, DepartmentEntity department, DepartmentEntity salaryDepartment, ScheduleType scheduleType)
            : base(id, department, salaryDepartment)
        {
            this.scheduleType = scheduleType;
        }

        public ScheduleItemState State
        {
            get { return state; }
            set { state = value; }
        }

        public OperationInfoCommented MissPenaltyCancel
        {
            get { return missPenaltyCancel; }
            set { missPenaltyCancel = value; }
        }

        public OperationInfoCommented LatePenaltyCancel
        {
            get { return latePenaltyCancel; }
            set { latePenaltyCancel = value; }
        }

        public OperationInfoCommented EarlyPenaltyCancel
        {
            get { return earlyPenaltyCancel; }
            set { earlyPenaltyCancel = value; }
        }

        public Guid? PenaltyOverrideId
        {
            get { return penaltyOverrideId; }
            set { penaltyOverrideId = value; }
        }

        [NotNull]
        public ScheduleType ScheduleType
        {
            get { return scheduleType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  scheduleType = value;
            }
        }

        public int NonPaidMinutes
        {
            get { return nonPaidMinutes; }
            set { nonPaidMinutes = value; }
        }

    }

    [DataClass("EmployeeTransactionsAggregatedInfo")]
    public partial class EmployeeTransactionsAggregatedInfo
    {
        private decimal? schedulePayments;
        private decimal? incentiveSum;
        private decimal? dishReceiptsSum;
        private decimal? orderReceiptsSum;
        private decimal? bonusesSum;
        private decimal? addictionsSum;
        private decimal? penaltySum;
        private decimal? deductionSum;
        private decimal? cashSum;
        private decimal? totalSum;

        public EmployeeTransactionsAggregatedInfo() {}

        public EmployeeTransactionsAggregatedInfo(decimal? schedulePayments, decimal? incentiveSum, decimal? dishReceiptsSum, decimal? orderReceiptsSum, decimal? bonusesSum, decimal? addictionsSum, decimal? penaltySum, decimal? deductionSum, decimal? cashSum, decimal? totalSum)
        {
            this.schedulePayments = schedulePayments;
            this.incentiveSum = incentiveSum;
            this.dishReceiptsSum = dishReceiptsSum;
            this.orderReceiptsSum = orderReceiptsSum;
            this.bonusesSum = bonusesSum;
            this.addictionsSum = addictionsSum;
            this.penaltySum = penaltySum;
            this.deductionSum = deductionSum;
            this.cashSum = cashSum;
            this.totalSum = totalSum;
        }
        public decimal? SchedulePayments
        {
            get { return schedulePayments; }
            set { schedulePayments = value; }
        }

        public decimal? IncentiveSum
        {
            get { return incentiveSum; }
            set { incentiveSum = value; }
        }

        public decimal? DishReceiptsSum
        {
            get { return dishReceiptsSum; }
            set { dishReceiptsSum = value; }
        }

        public decimal? OrderReceiptsSum
        {
            get { return orderReceiptsSum; }
            set { orderReceiptsSum = value; }
        }

        public decimal? BonusesSum
        {
            get { return bonusesSum; }
            set { bonusesSum = value; }
        }

        public decimal? AddictionsSum
        {
            get { return addictionsSum; }
            set { addictionsSum = value; }
        }

        public decimal? PenaltySum
        {
            get { return penaltySum; }
            set { penaltySum = value; }
        }

        public decimal? DeductionSum
        {
            get { return deductionSum; }
            set { deductionSum = value; }
        }

        public decimal? CashSum
        {
            get { return cashSum; }
            set { cashSum = value; }
        }

        public decimal? TotalSum
        {
            get { return totalSum; }
            set { totalSum = value; }
        }

    }

    [DataClass("IncentivePayment")]
    public partial class IncentivePayment : CounteragentTransaction
    {
        private IncentiveProgram program;
        private decimal? revenueLevel;

        protected IncentivePayment() {}

        public IncentivePayment(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, IncentiveProgram program)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {
            this.program = program;
        }

        public IncentivePayment(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public IncentiveProgram Program
        {
            get { return program; }
            set { program = value; }
        }

        public decimal? RevenueLevel
        {
            get { return revenueLevel; }
            set { revenueLevel = value; }
        }

    }

    [DataClass("JurPersonDepartmentPair")]
    public partial class JurPersonDepartmentPair
    {
        private JurPerson jurPerson;
        [NotNull, NotNullField]
        private DepartmentEntity department;

        protected JurPersonDepartmentPair() {}

        public JurPersonDepartmentPair(DepartmentEntity department)
        {
            this.department = department;
        }
        [CanBeNull]
        public JurPerson JurPerson
        {
            get { return jurPerson; }
            set { jurPerson = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

    }

    [DataClass("MedicalAnalysis")]
    public partial class MedicalAnalysis
    {
        private MedicalAnalysisType type;
        private DateTime? dateActivate;

        protected MedicalAnalysis() {}

        public MedicalAnalysis(MedicalAnalysisType type)
        {
            this.type = type;
        }
        public MedicalAnalysisType Type
        {
            get { return type; }
            set { type = value; }
        }

        public DateTime? DateActivate
        {
            get { return dateActivate; }
            set { dateActivate = value; }
        }

    }

    [RootEntity]
    [DataClass("MedicalAnalysisType")]
    public partial class MedicalAnalysisType : PersistedEntity
    {
        private string name;
        private int duration;
        private string code;

        protected MedicalAnalysisType() {}

        public MedicalAnalysisType(Guid id, string name, int duration, string code)
            : base(id)
        {
            this.name = name;
            this.duration = duration;
            this.code = code;
        }

        public MedicalAnalysisType(Guid id)
            : base(id)
        {

        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public int Duration
        {
            get { return duration; }
            set { duration = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

    }

    [DataClass("MissPenalty")]
    public partial class MissPenalty : AutoPenaltyType
    {
        private ScheduleType scheduleType;

        protected MissPenalty() {}

        public MissPenalty(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment, decimal? sum, ScheduleType scheduleType)
            : base(id, name, notation, comment, sum)
        {
            this.scheduleType = scheduleType;
        }

        public MissPenalty(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment)
            : base(id, name, notation, comment)
        {

        }

        public ScheduleType ScheduleType
        {
            get { return scheduleType; }
            set { scheduleType = value; }
        }

    }

    [DataClass("OperationInfoCommented")]
    public partial class OperationInfoCommented : OperationInfo
    {
        private string comment;

        protected OperationInfoCommented() {}

        public OperationInfoCommented(string comment)
        {
            this.comment = comment;
        }
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("PayInOutEvent")]
    public partial class PayInOutEvent : UserActionEvent
    {
        private User cashier;
        private TransactionType type;
        private User counterAgent;
        private string paymentOwner;
        private CashRegister cashRegister;
        private decimal? sum;
        private Account account;
        private Account accountTo;
        private CashFlowCategory cashFlowCategory;
        private DateTime? actualDate;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PayInOutEvent() {}

        public PayInOutEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment, User cashier, TransactionType type, User counterAgent, string paymentOwner, CashRegister cashRegister, decimal? sum, Account account)
            : base(id, department, date, eventType, user, terminal, session, auth, comment)
        {
            this.cashier = cashier;
            this.type = type;
            this.counterAgent = counterAgent;
            this.paymentOwner = paymentOwner;
            this.cashRegister = cashRegister;
            this.sum = sum;
            this.account = account;
        }

        public PayInOutEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

        public TransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        public User CounterAgent
        {
            get { return counterAgent; }
            set { counterAgent = value; }
        }

        public string PaymentOwner
        {
            get { return paymentOwner; }
            set { paymentOwner = value; }
        }

        public CashRegister CashRegister
        {
            get { return cashRegister; }
            set { cashRegister = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        [CanBeNull]
        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        public DateTime? ActualDate
        {
            get { return actualDate; }
            set { actualDate = value; }
        }

    }

    [DataClass("PayInOutTransaction")]
    public partial class PayInOutTransaction : CounteragentTransaction
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PayInOutTransaction() {}

        public PayInOutTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {

        }

        public PayInOutTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("PaymentHistoryItem")]
    public partial class PaymentHistoryItem
    {
        private Guid? documentId;
        private DateTime? date;
        private TransactionType transactionType;
        private int? documentNumber;

        protected PaymentHistoryItem() {}

        public PaymentHistoryItem(Guid? documentId, DateTime? date, TransactionType transactionType, int? documentNumber)
        {
            this.documentId = documentId;
            this.date = date;
            this.transactionType = transactionType;
            this.documentNumber = documentNumber;
        }
        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public TransactionType TransactionType
        {
            get { return transactionType; }
            set { transactionType = value; }
        }

        public int? DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

    }

    [DataClass("PaymentStrategy")]
    public partial class PaymentStrategy : AbstractKeyedTimeTableItem
    {
        private User employee;
        private decimal? paymentPerHour;
        [HasDefaultValue]
        private decimal steadySalary = 0;
        private RoleScheduleType scheduleType;
        private DepartmentEntity salaryDepartment;
        [NotNull, NotNullField]
        private PaymentStrategySpecification specification;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PaymentStrategy() {}

        public PaymentStrategy(Guid id, DateTime? dateFrom, DateTime? dateTo, User employee, decimal? paymentPerHour, PaymentStrategySpecification specification)
            : base(id, dateFrom, dateTo)
        {
            this.employee = employee;
            this.paymentPerHour = paymentPerHour;
            this.specification = specification;
        }

        public PaymentStrategy(Guid id, PaymentStrategySpecification specification)
            : base(id)
        {
            this.specification = specification;
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public decimal? PaymentPerHour
        {
            get { return paymentPerHour; }
            set { paymentPerHour = value; }
        }

        public decimal SteadySalary
        {
            get { return steadySalary; }
            set { steadySalary = value; }
        }

        [CanBeNull]
        public RoleScheduleType ScheduleType
        {
            get { return scheduleType; }
            set { scheduleType = value; }
        }

        [CanBeNull]
        public DepartmentEntity SalaryDepartment
        {
            get { return salaryDepartment; }
            set { salaryDepartment = value; }
        }

        [NotNull]
        public PaymentStrategySpecification Specification
        {
            get { return specification; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  specification = value;
            }
        }

    }

    [DataClass("PaymentStrategyItemsToSave")]
    public partial class PaymentStrategyItemsToSave
    {
        private User employee;
        private DepartmentEntity salaryDepartment;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PaymentStrategySpecificationItem> specificationItems = new List<PaymentStrategySpecificationItem>();

        public PaymentStrategyItemsToSave() {}

        public PaymentStrategyItemsToSave(User employee)
        {
            this.employee = employee;
        }
        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        [CanBeNull]
        public DepartmentEntity SalaryDepartment
        {
            get { return salaryDepartment; }
            set { salaryDepartment = value; }
        }

        [NotNull]
        public List<PaymentStrategySpecificationItem> SpecificationItems
        {
            get { return specificationItems; }
        }

    }

    [DataClass("PaymentStrategySpecification")]
    public partial class PaymentStrategySpecification
    {
        private Role mainRole;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PaymentStrategySpecificationItem> items = new List<PaymentStrategySpecificationItem>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PaymentStrategySpecification() {}

        public PaymentStrategySpecification(Role mainRole)
        {
            this.mainRole = mainRole;
        }
        public Role MainRole
        {
            get { return mainRole; }
            set { mainRole = value; }
        }

        [NotNull]
        public List<PaymentStrategySpecificationItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("PaymentStrategySpecificationItem")]
    public partial class PaymentStrategySpecificationItem
    {
        private Role role;
        private RoleScheduleType scheduleType;
        private decimal? paymentPerHour;
        private decimal? steadySalary;

        protected PaymentStrategySpecificationItem() {}

        public PaymentStrategySpecificationItem(Role role, RoleScheduleType scheduleType, decimal? paymentPerHour, decimal? steadySalary)
        {
            this.role = role;
            this.scheduleType = scheduleType;
            this.paymentPerHour = paymentPerHour;
            this.steadySalary = steadySalary;
        }
        public Role Role
        {
            get { return role; }
            set { role = value; }
        }

        public RoleScheduleType ScheduleType
        {
            get { return scheduleType; }
            set { scheduleType = value; }
        }

        public decimal? PaymentPerHour
        {
            get { return paymentPerHour; }
            set { paymentPerHour = value; }
        }

        public decimal? SteadySalary
        {
            get { return steadySalary; }
            set { steadySalary = value; }
        }

    }

    [DataClass("PenaltyOrBonus")]
    [EnumClass]
    public partial class PenaltyOrBonus
    {
        public static readonly PenaltyOrBonus PENALTY = new PenaltyOrBonus("PENALTY", true, TransactionType.PENALTY);
        public static readonly PenaltyOrBonus BONUS = new PenaltyOrBonus("BONUS", false, TransactionType.BONUS);

        private readonly bool isPenalty;
        private readonly TransactionType transactionType;
        private readonly string __value;

        private PenaltyOrBonus(string __value, bool isPenalty, TransactionType transactionType)
        {
            this.__value = __value;
            this.isPenalty = isPenalty;
            this.transactionType = transactionType;
        }

        public static PenaltyOrBonus Parse(string value)
        {
            switch(value)
            {
                case "PENALTY": return PENALTY;
                case "BONUS": return BONUS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PenaltyOrBonus[] VALUES
        {
            get
            {
                return new []
                {
                    PENALTY, 
                    BONUS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public bool IsPenalty
        {
            get { return isPenalty; }
        }

        public TransactionType TransactionType
        {
            get { return transactionType; }
        }

    }

    [DataClass("PenaltyOrBonusCancelEvent")]
    public partial class PenaltyOrBonusCancelEvent : UserActionEvent
    {
        private OperationInfo createdInfo;
        private PenaltyOrBonusType penaltyOrBonusType;
        private User employee;
        private string createdComment;
        private decimal? sum;

        protected PenaltyOrBonusCancelEvent() {}

        public PenaltyOrBonusCancelEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment, OperationInfo createdInfo, PenaltyOrBonusType penaltyOrBonusType, User employee, string createdComment, decimal? sum)
            : base(id, department, date, eventType, user, terminal, session, auth, comment)
        {
            this.createdInfo = createdInfo;
            this.penaltyOrBonusType = penaltyOrBonusType;
            this.employee = employee;
            this.createdComment = createdComment;
            this.sum = sum;
        }

        public PenaltyOrBonusCancelEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        public PenaltyOrBonusType PenaltyOrBonusType
        {
            get { return penaltyOrBonusType; }
            set { penaltyOrBonusType = value; }
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public string CreatedComment
        {
            get { return createdComment; }
            set { createdComment = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PenaltyOrBonusEvent")]
    public partial class PenaltyOrBonusEvent : UserActionEvent
    {
        private decimal? sum;
        private User employee;
        private PenaltyOrBonusType penaltyOrBonusType;

        protected PenaltyOrBonusEvent() {}

        public PenaltyOrBonusEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment, decimal? sum, User employee, PenaltyOrBonusType penaltyOrBonusType)
            : base(id, department, date, eventType, user, terminal, session, auth, comment)
        {
            this.sum = sum;
            this.employee = employee;
            this.penaltyOrBonusType = penaltyOrBonusType;
        }

        public PenaltyOrBonusEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public PenaltyOrBonusType PenaltyOrBonusType
        {
            get { return penaltyOrBonusType; }
            set { penaltyOrBonusType = value; }
        }

    }

    [DataClass("PenaltyOrBonusInfo")]
    public partial class PenaltyOrBonusInfo
    {
        private Guid? transactionId;
        private DateInfo bizDate;
        private User employee;
        private PenaltyOrBonusType type;
        private decimal? sum;
        private OperationInfoCommented createdInfo;
        private OperationInfoCommented cancelInfo;

        protected PenaltyOrBonusInfo() {}

        public PenaltyOrBonusInfo(Guid? transactionId, DateInfo bizDate, User employee, PenaltyOrBonusType type, decimal? sum, OperationInfoCommented createdInfo, OperationInfoCommented cancelInfo)
        {
            this.transactionId = transactionId;
            this.bizDate = bizDate;
            this.employee = employee;
            this.type = type;
            this.sum = sum;
            this.createdInfo = createdInfo;
            this.cancelInfo = cancelInfo;
        }
        public Guid? TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public DateInfo BizDate
        {
            get { return bizDate; }
            set { bizDate = value; }
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public PenaltyOrBonusType Type
        {
            get { return type; }
            set { type = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public OperationInfoCommented CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        public OperationInfoCommented CancelInfo
        {
            get { return cancelInfo; }
            set { cancelInfo = value; }
        }

    }

    [DataClass("PenaltyOrBonusInfoExtended")]
    public partial class PenaltyOrBonusInfoExtended : PenaltyOrBonusInfo
    {
        private DepartmentEntity department;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PenaltyOrBonusInfoExtended() {}

        public PenaltyOrBonusInfoExtended(Guid? transactionId, DateInfo bizDate, User employee, PenaltyOrBonusType type, decimal? sum, OperationInfoCommented createdInfo, OperationInfoCommented cancelInfo, DepartmentEntity department)
            : base(transactionId, bizDate, employee, type, sum, createdInfo, cancelInfo)
        {
            this.department = department;
        }
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("PenaltyOrBonusTransaction")]
    public partial class PenaltyOrBonusTransaction : CounteragentTransaction
    {
        private PenaltyOrBonusType penaltyOrBonusType;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PenaltyOrBonusTransaction() {}

        public PenaltyOrBonusTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth, PenaltyOrBonusType penaltyOrBonusType)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {
            this.penaltyOrBonusType = penaltyOrBonusType;
        }

        public PenaltyOrBonusTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public PenaltyOrBonusType PenaltyOrBonusType
        {
            get { return penaltyOrBonusType; }
            set { penaltyOrBonusType = value; }
        }

    }

    [RootEntity]
    [DataClass("PenaltyOrBonusType")]
    public partial class PenaltyOrBonusType : LocalizableNamePersistedEntity
    {
        [Obsolete("Deprecated in Java code")]
        [HasDefaultValue]
        private bool penaltyOrBonus = false;
        private DateTime? dateCreated;
        private DateTime? dateDeleted;
        [NotNull, NotNullField]
        private LocalizableValue notation;
        [NotNull, NotNullField]
        private LocalizableValue comment;
        private decimal? sum;
        private Role role;
        [HasDefaultValue]
        private bool systemType = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PenaltyOrBonusType() {}

        public PenaltyOrBonusType(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment, decimal? sum)
            : base(id, name)
        {
            this.notation = notation;
            this.comment = comment;
            this.sum = sum;
        }

        public PenaltyOrBonusType(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment)
            : base(id, name)
        {
            this.notation = notation;
            this.comment = comment;
        }

        [Obsolete("Deprecated in Java code")]
        public bool PenaltyOrBonus
        {
            get { return penaltyOrBonus; }
            set { penaltyOrBonus = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public DateTime? DateDeleted
        {
            get { return dateDeleted; }
            set { dateDeleted = value; }
        }

        [NotNull]
        public LocalizableValue Notation
        {
            get { return notation; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  notation = value;
            }
        }

        [NotNull]
        public LocalizableValue Comment
        {
            get { return comment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  comment = value;
            }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [CanBeNull]
        public Role Role
        {
            get { return role; }
            set { role = value; }
        }

        public bool SystemType
        {
            get { return systemType; }
            set { systemType = value; }
        }

    }

    [RootEntity]
    [DataClass("PenaltyOverride")]
    public partial class PenaltyOverride : PersistedEntity
    {
        private Guid? scheduleItemId;
        private Dictionary<PenaltyOrBonusType, decimal> penaltyMap;

        protected PenaltyOverride() {}

        public PenaltyOverride(Guid id, Guid? scheduleItemId)
            : base(id)
        {
            this.scheduleItemId = scheduleItemId;
        }

        public PenaltyOverride(Guid id)
            : base(id)
        {

        }

        public Guid? ScheduleItemId
        {
            get { return scheduleItemId; }
            set { scheduleItemId = value; }
        }

        public Dictionary<PenaltyOrBonusType, decimal> PenaltyMap
        {
            get { return penaltyMap; }
            set { penaltyMap = value; }
        }

    }

    [DataClass("PersonalSessionClosedEvent")]
    public partial class PersonalSessionClosedEvent : UserActionEvent
    {
        private DateTime? dateOpened;
        private Role role;

        protected PersonalSessionClosedEvent() {}

        public PersonalSessionClosedEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment, DateTime? dateOpened, Role role)
            : base(id, department, date, eventType, user, terminal, session, auth, comment)
        {
            this.dateOpened = dateOpened;
            this.role = role;
        }

        public PersonalSessionClosedEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public DateTime? DateOpened
        {
            get { return dateOpened; }
            set { dateOpened = value; }
        }

        public Role Role
        {
            get { return role; }
            set { role = value; }
        }

    }

    [DataClass("PersonalSessionClosedPayment")]
    public partial class PersonalSessionClosedPayment : CounteragentTransaction
    {

        protected PersonalSessionClosedPayment() {}

        public PersonalSessionClosedPayment(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {

        }

        public PersonalSessionClosedPayment(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [RootEntity]
    [DataClass("SalarySettings")]
    public partial class SalarySettings : PersistedEntity
    {
        [HasDefaultValue]
        private int workingHoursPerMonth = 170;
        [HasDefaultValue]
        private bool evaluateSteadySalaryByHoursAndRate = false;
        private DateTime? salaryPeriodClosingDate;
        private CreateAttendanceForScheduleOperationType creationScheduleType;
        [HasDefaultValue]
        private int daysAutomaticCloseAttendance = 3;
        [HasDefaultValue]
        private bool strictDepartmentCheck = false;
        [HasDefaultValue]
        private bool strictScheduleCheck = false;

        protected SalarySettings() {}

        public SalarySettings(Guid id, CreateAttendanceForScheduleOperationType creationScheduleType)
            : base(id)
        {
            this.creationScheduleType = creationScheduleType;
        }

        public SalarySettings(Guid id)
            : base(id)
        {

        }

        public int WorkingHoursPerMonth
        {
            get { return workingHoursPerMonth; }
            set { workingHoursPerMonth = value; }
        }

        public bool EvaluateSteadySalaryByHoursAndRate
        {
            get { return evaluateSteadySalaryByHoursAndRate; }
            set { evaluateSteadySalaryByHoursAndRate = value; }
        }

        public DateTime? SalaryPeriodClosingDate
        {
            get { return salaryPeriodClosingDate; }
            set { salaryPeriodClosingDate = value; }
        }

        public CreateAttendanceForScheduleOperationType CreationScheduleType
        {
            get { return creationScheduleType; }
            set { creationScheduleType = value; }
        }

        public int DaysAutomaticCloseAttendance
        {
            get { return daysAutomaticCloseAttendance; }
            set { daysAutomaticCloseAttendance = value; }
        }

        public bool StrictDepartmentCheck
        {
            get { return strictDepartmentCheck; }
            set { strictDepartmentCheck = value; }
        }

        public bool StrictScheduleCheck
        {
            get { return strictScheduleCheck; }
            set { strictScheduleCheck = value; }
        }

    }

    [DataClass("ScheduleItemState")]
    [EnumClass]
    public partial class ScheduleItemState : LocalizableName<ScheduleItemState>
    {
        /// <summary> . </summary>
        public static readonly ScheduleItemState UNKNOWN = new ScheduleItemState("UNKNOWN", 0);
        /// <summary> пропущена. </summary>
        public static readonly ScheduleItemState MISSED = new ScheduleItemState("MISSED", 1);
        /// <summary> отработана. </summary>
        public static readonly ScheduleItemState WORKED = new ScheduleItemState("WORKED", 2);
        /// <summary> работает. </summary>
        public static readonly ScheduleItemState WORKING = new ScheduleItemState("WORKING", 3);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private ScheduleItemState(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "SCHEDULEITEMSTATE_NAME_" + __value;
            this.id = id;
        }

        public static ScheduleItemState Parse(string value)
        {
            switch(value)
            {
                case "UNKNOWN": return UNKNOWN;
                case "MISSED": return MISSED;
                case "WORKED": return WORKED;
                case "WORKING": return WORKING;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ScheduleItemState[] VALUES
        {
            get
            {
                return new []
                {
                    UNKNOWN, 
                    MISSED, 
                    WORKED, 
                    WORKING
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("SchedulePenalty")]
    public partial class SchedulePenalty : AutoPenaltyType
    {
        private int tresholdMinutes;
        private SchedulePenaltyType type;

        protected SchedulePenalty() {}

        public SchedulePenalty(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment, decimal? sum, int tresholdMinutes, SchedulePenaltyType type)
            : base(id, name, notation, comment, sum)
        {
            this.tresholdMinutes = tresholdMinutes;
            this.type = type;
        }

        public SchedulePenalty(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment)
            : base(id, name, notation, comment)
        {

        }

        public int TresholdMinutes
        {
            get { return tresholdMinutes; }
            set { tresholdMinutes = value; }
        }

        public SchedulePenaltyType Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("SchedulePenaltyType")]
    public enum SchedulePenaltyType
    {
        LATE,
        EARLY
    }

    [DataClass("ScheduleTariffType")]
    public enum ScheduleTariffType
    {
        FIXED,
        PER_HOUR
    }

    [RootEntity]
    [DataClass("ScheduleType")]
    public partial class ScheduleType : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private LocalizableValue notation;
        private DayTime start;
        private int length;
        [HasDefaultValue]
        private int nonPaidMinutes = 0;
        private decimal? tariff;
        private ScheduleTariffType tariffType;
        private bool penaltyEnabled;
        private Role role;
        [HasDefaultValue]
        private string comment = "";
        private int? color;
        private AttendanceType defaultAttendanceType;
        [HasDefaultValue]
        private bool isOvertime = false;

        protected ScheduleType() {}

        public ScheduleType(Guid id, LocalizableValue name, LocalizableValue notation, DayTime start, int length, ScheduleTariffType tariffType, bool penaltyEnabled, Role role)
            : base(id, name)
        {
            this.notation = notation;
            this.start = start;
            this.length = length;
            this.tariffType = tariffType;
            this.penaltyEnabled = penaltyEnabled;
            this.role = role;
        }

        public ScheduleType(Guid id, LocalizableValue name, LocalizableValue notation)
            : base(id, name)
        {
            this.notation = notation;
        }

        [NotNull]
        public LocalizableValue Notation
        {
            get { return notation; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  notation = value;
            }
        }

        public DayTime Start
        {
            get { return start; }
            set { start = value; }
        }

        public int Length
        {
            get { return length; }
            set { length = value; }
        }

        public int NonPaidMinutes
        {
            get { return nonPaidMinutes; }
            set { nonPaidMinutes = value; }
        }

        public decimal? Tariff
        {
            get { return tariff; }
            set { tariff = value; }
        }

        public ScheduleTariffType TariffType
        {
            get { return tariffType; }
            set { tariffType = value; }
        }

        public bool PenaltyEnabled
        {
            get { return penaltyEnabled; }
            set { penaltyEnabled = value; }
        }

        public Role Role
        {
            get { return role; }
            set { role = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public int? Color
        {
            get { return color; }
            set { color = value; }
        }

        [CanBeNull]
        public AttendanceType DefaultAttendanceType
        {
            get { return defaultAttendanceType; }
            set { defaultAttendanceType = value; }
        }

        public bool IsOvertime
        {
            get { return isOvertime; }
            set { isOvertime = value; }
        }

    }

    [DataClass("SessionClosePenaltyType")]
    public partial class SessionClosePenaltyType : PenaltyOrBonusType
    {
        private decimal? treshold;
        private decimal? multiplier;

        protected SessionClosePenaltyType() {}

        public SessionClosePenaltyType(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment, decimal? sum, decimal? treshold, decimal? multiplier)
            : base(id, name, notation, comment, sum)
        {
            this.treshold = treshold;
            this.multiplier = multiplier;
        }

        public SessionClosePenaltyType(Guid id, LocalizableValue name, LocalizableValue notation, LocalizableValue comment)
            : base(id, name, notation, comment)
        {

        }

        public decimal? Treshold
        {
            get { return treshold; }
            set { treshold = value; }
        }

        public decimal? Multiplier
        {
            get { return multiplier; }
            set { multiplier = value; }
        }

    }

    [DataClass("UserAdvanceEvent")]
    public partial class UserAdvanceEvent : UserActionEvent
    {
        private User employee;
        private Account account;
        private DateTime? transactionDate;
        private decimal? sum;

        protected UserAdvanceEvent() {}

        public UserAdvanceEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment, User employee, Account account, DateTime? transactionDate, decimal? sum)
            : base(id, department, date, eventType, user, terminal, session, auth, comment)
        {
            this.employee = employee;
            this.account = account;
            this.transactionDate = transactionDate;
            this.sum = sum;
        }

        public UserAdvanceEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public DateTime? TransactionDate
        {
            get { return transactionDate; }
            set { transactionDate = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("UserAdvanceTransaction")]
    public partial class UserAdvanceTransaction : CounteragentTransaction
    {

        protected UserAdvanceTransaction() {}

        public UserAdvanceTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid? causeEventId, User cashier, AuthData auth)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId, causeEventId, cashier, auth)
        {

        }

        public UserAdvanceTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("UserMask")]
    public partial class UserMask
    {
        private bool supplier;
        private bool client;
        private bool employee;

        protected UserMask() {}

        public UserMask(bool supplier, bool client, bool employee)
        {
            this.supplier = supplier;
            this.client = client;
            this.employee = employee;
        }
        public bool Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public bool Client
        {
            get { return client; }
            set { client = value; }
        }

        public bool Employee
        {
            get { return employee; }
            set { employee = value; }
        }

    }

    [DataClass("Payroll")]
    public partial class Payroll : AbstractDocument
    {
        private DateTime dateFrom;
        private DateTime dateTo;
        [NotNull, NotNullField]
        private DepartmentEntity department;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Payroll() {}

        public Payroll(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, DateTime dateFrom, DateTime dateTo, DepartmentEntity department)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.department = department;
        }

        public Payroll(Guid id, DateTime dateIncoming, string documentNumber, DateTime dateFrom, DateTime dateTo, DepartmentEntity department)
            : base(id, dateIncoming, documentNumber)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.department = department;
        }

        public DateTime DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

    }

    [DataClass("PayrollDocumentListRecord")]
    public partial class PayrollDocumentListRecord : AbstractDocumentListRecord
    {
        [NotNull, NotNullField]
        private DateInterval dateInterval;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [HasDefaultValue]
        private decimal? initialBalance = 0;
        [HasDefaultValue]
        private decimal? earnings = 0;
        [HasDefaultValue]
        private decimal? retained = 0;
        [HasDefaultValue]
        private decimal? payed = 0;
        [HasDefaultValue]
        private decimal? finalBalance = 0;

        protected PayrollDocumentListRecord() {}

        public PayrollDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, DateInterval dateInterval, DepartmentEntity department)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary)
        {
            this.dateInterval = dateInterval;
            this.department = department;
        }

        public PayrollDocumentListRecord(DateInterval dateInterval, DepartmentEntity department)
        {
            this.dateInterval = dateInterval;
            this.department = department;
        }

        [NotNull]
        public DateInterval DateInterval
        {
            get { return dateInterval; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  dateInterval = value;
            }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        public decimal? InitialBalance
        {
            get { return initialBalance; }
            set { initialBalance = value; }
        }

        public decimal? Earnings
        {
            get { return earnings; }
            set { earnings = value; }
        }

        public decimal? Retained
        {
            get { return retained; }
            set { retained = value; }
        }

        public decimal? Payed
        {
            get { return payed; }
            set { payed = value; }
        }

        public decimal? FinalBalance
        {
            get { return finalBalance; }
            set { finalBalance = value; }
        }

    }

    [DataClass("PayrollItem")]
    public partial class PayrollItem
    {
        private User employee;
        [HasDefaultValue]
        private decimal? initialBalance = 0;
        [HasDefaultValue]
        private decimal? earnings = 0;
        [HasDefaultValue]
        private decimal? retained = 0;
        [HasDefaultValue]
        private decimal? payed = 0;

        protected PayrollItem() {}

        public PayrollItem(User employee)
        {
            this.employee = employee;
        }
        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public decimal? InitialBalance
        {
            get { return initialBalance; }
            set { initialBalance = value; }
        }

        public decimal? Earnings
        {
            get { return earnings; }
            set { earnings = value; }
        }

        public decimal? Retained
        {
            get { return retained; }
            set { retained = value; }
        }

        public decimal? Payed
        {
            get { return payed; }
            set { payed = value; }
        }

    }

    [DataClass("RoleScheduleType")]
    [EnumClass]
    public partial class RoleScheduleType : LocalizableName<RoleScheduleType>
    {
        /// <summary> По расписанию. </summary>
        public static readonly RoleScheduleType BYSESSION = new RoleScheduleType("BYSESSION");
        /// <summary> Свободный. </summary>
        public static readonly RoleScheduleType BYTIME = new RoleScheduleType("BYTIME");
        /// <summary> Оклад. </summary>
        public static readonly RoleScheduleType STEADY_SALARY = new RoleScheduleType("STEADY_SALARY");

        private readonly string __value;
        private readonly string __nameResId;

        private RoleScheduleType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ROLESCHEDULETYPE_NAME_" + __value;
        }

        public static RoleScheduleType Parse(string value)
        {
            switch(value)
            {
                case "BYSESSION": return BYSESSION;
                case "BYTIME": return BYTIME;
                case "STEADY_SALARY": return STEADY_SALARY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RoleScheduleType[] VALUES
        {
            get
            {
                return new []
                {
                    BYSESSION, 
                    BYTIME, 
                    STEADY_SALARY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EmployeesPlanningReport")]
    public partial class EmployeesPlanningReport
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<User, ICollection<EmployeeAvailabilitySchedule>> employeeAvailabilitySchedules = new Dictionary<User, ICollection<EmployeeAvailabilitySchedule>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<User, List<EmployeeAvailabilityEntry>> employeeAvailabilityEntries = new Dictionary<User, List<EmployeeAvailabilityEntry>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<RoleRequirementKey, ICollection<RoleRequirementItem>> roleRequirementItems = new Dictionary<RoleRequirementKey, ICollection<RoleRequirementItem>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<User, ICollection<EmployeeScheduleItem>> employeeScheduleItems = new Dictionary<User, ICollection<EmployeeScheduleItem>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<User, Dictionary<DateTime, bool>> employeesTimeline = new Dictionary<User, Dictionary<DateTime, bool>>();


        [NotNull]
        public Dictionary<User, ICollection<EmployeeAvailabilitySchedule>> EmployeeAvailabilitySchedules
        {
            get { return employeeAvailabilitySchedules; }
        }

        [NotNull]
        public Dictionary<User, List<EmployeeAvailabilityEntry>> EmployeeAvailabilityEntries
        {
            get { return employeeAvailabilityEntries; }
        }

        [NotNull]
        public Dictionary<RoleRequirementKey, ICollection<RoleRequirementItem>> RoleRequirementItems
        {
            get { return roleRequirementItems; }
        }

        [NotNull]
        public Dictionary<User, ICollection<EmployeeScheduleItem>> EmployeeScheduleItems
        {
            get { return employeeScheduleItems; }
        }

        [NotNull]
        public Dictionary<User, Dictionary<DateTime, bool>> EmployeesTimeline
        {
            get { return employeesTimeline; }
        }

    }

    [DataClass("EmployeeAvailabilityEntry")]
    public partial class EmployeeAvailabilityEntry : CachedEntity
    {
        private DateTime dateFrom;
        private DateTime dateTo;
        [NotNull, NotNullField]
        private User employee;
        private bool available;
        private EmployeeAvailabilityEntryStatus status;
        private long priority;
        [NotNull, NotNullField]
        private OperationInfo createdInfo;
        private OperationInfo approvedInfo;
        private OperationInfo deletedInfo;
        private OperationInfo modifiedInfo;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EmployeeAvailabilityEntry() {}

        public EmployeeAvailabilityEntry(Guid id, DateTime dateFrom, DateTime dateTo, User employee, bool available, EmployeeAvailabilityEntryStatus status, long priority, OperationInfo createdInfo, OperationInfo approvedInfo, OperationInfo deletedInfo, OperationInfo modifiedInfo)
            : base(id)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.employee = employee;
            this.available = available;
            this.status = status;
            this.priority = priority;
            this.createdInfo = createdInfo;
            this.approvedInfo = approvedInfo;
            this.deletedInfo = deletedInfo;
            this.modifiedInfo = modifiedInfo;
        }

        public EmployeeAvailabilityEntry(Guid id, DateTime dateFrom, DateTime dateTo, User employee, EmployeeAvailabilityEntryStatus status, OperationInfo createdInfo)
            : base(id)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.employee = employee;
            this.status = status;
            this.createdInfo = createdInfo;
        }

        public DateTime DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        [NotNull]
        public User Employee
        {
            get { return employee; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  employee = value;
            }
        }

        public bool Available
        {
            get { return available; }
            set { available = value; }
        }

        public EmployeeAvailabilityEntryStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public long Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        [NotNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  createdInfo = value;
            }
        }

        public OperationInfo ApprovedInfo
        {
            get { return approvedInfo; }
            set { approvedInfo = value; }
        }

        public OperationInfo DeletedInfo
        {
            get { return deletedInfo; }
            set { deletedInfo = value; }
        }

        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("EmployeeAvailabilityEntryStatus")]
    public enum EmployeeAvailabilityEntryStatus
    {
        NEW,
        APPROVED,
        DELETED
    }

    [DataClass("EmployeeAvailabilitySchedule")]
    public partial class EmployeeAvailabilitySchedule : AbstractKeyedTimeTableItem
    {
        [NotNull, NotNullField]
        private User employee;
        [NotNull, NotNullField]
        private ShiftScheduleInfo shiftScheduleInfo;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EmployeeAvailabilitySchedule() {}

        public EmployeeAvailabilitySchedule(Guid id, DateTime? dateFrom, DateTime? dateTo, User employee, ShiftScheduleInfo shiftScheduleInfo)
            : base(id, dateFrom, dateTo)
        {
            this.employee = employee;
            this.shiftScheduleInfo = shiftScheduleInfo;
        }

        public EmployeeAvailabilitySchedule(Guid id, User employee, ShiftScheduleInfo shiftScheduleInfo)
            : base(id)
        {
            this.employee = employee;
            this.shiftScheduleInfo = shiftScheduleInfo;
        }

        [NotNull]
        public User Employee
        {
            get { return employee; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  employee = value;
            }
        }

        [NotNull]
        public ShiftScheduleInfo ShiftScheduleInfo
        {
            get { return shiftScheduleInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  shiftScheduleInfo = value;
            }
        }

    }

    [DataClass("RoleRequirementItem")]
    public partial class RoleRequirementItem : AbstractKeyedTimeTableItem
    {
        private DateTime dateToLimit;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private Role role;
        private ScheduleType scheduleType;
        private int employeesRequired;

        protected RoleRequirementItem() {}

        public RoleRequirementItem(Guid id, DateTime? dateFrom, DateTime? dateTo, DateTime dateToLimit, DepartmentEntity department, Role role, ScheduleType scheduleType, int employeesRequired)
            : base(id, dateFrom, dateTo)
        {
            this.dateToLimit = dateToLimit;
            this.department = department;
            this.role = role;
            this.scheduleType = scheduleType;
            this.employeesRequired = employeesRequired;
        }

        public RoleRequirementItem(Guid id, DateTime dateToLimit, DepartmentEntity department, Role role)
            : base(id)
        {
            this.dateToLimit = dateToLimit;
            this.department = department;
            this.role = role;
        }

        public DateTime DateToLimit
        {
            get { return dateToLimit; }
            set { dateToLimit = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        [NotNull]
        public Role Role
        {
            get { return role; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  role = value;
            }
        }

        public ScheduleType ScheduleType
        {
            get { return scheduleType; }
            set { scheduleType = value; }
        }

        public int EmployeesRequired
        {
            get { return employeesRequired; }
            set { employeesRequired = value; }
        }

    }

    [DataClass("RoleRequirementKey")]
    public partial class RoleRequirementKey
    {
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private Role role;

        protected RoleRequirementKey() {}

        public RoleRequirementKey(DepartmentEntity department, Role role)
        {
            this.department = department;
            this.role = role;
        }
        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        [NotNull]
        public Role Role
        {
            get { return role; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  role = value;
            }
        }

    }

    [DataClass("AttendanceInfoForDay")]
    public partial class AttendanceInfoForDay
    {
        private DateInfo day;
        private long totalMinutes;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<AttendanceType> attendanceTypes = new HashSet<AttendanceType>();

        protected AttendanceInfoForDay() {}

        public AttendanceInfoForDay(DateInfo day, long totalMinutes)
        {
            this.day = day;
            this.totalMinutes = totalMinutes;
        }
        public DateInfo Day
        {
            get { return day; }
            set { day = value; }
        }

        public long TotalMinutes
        {
            get { return totalMinutes; }
            set { totalMinutes = value; }
        }

        [NotNull]
        public HashSet<AttendanceType> AttendanceTypes
        {
            get { return attendanceTypes; }
        }

    }

    [DataClass("AttendanceInfoForPeriod")]
    public partial class AttendanceInfoForPeriod
    {
        private DateInterval interval;
        private bool hasIntersection;
        private long countedMinutes;
        private long lateMinutes;
        private long earlyMinutes;
        private EmployeeAttendanceEntry attendanceEntry;
        private EmployeeScheduleItem scheduleItem;

        protected AttendanceInfoForPeriod() {}

        public AttendanceInfoForPeriod(DateInterval interval, bool hasIntersection, long countedMinutes, long lateMinutes, long earlyMinutes, EmployeeAttendanceEntry attendanceEntry, EmployeeScheduleItem scheduleItem)
        {
            this.interval = interval;
            this.hasIntersection = hasIntersection;
            this.countedMinutes = countedMinutes;
            this.lateMinutes = lateMinutes;
            this.earlyMinutes = earlyMinutes;
            this.attendanceEntry = attendanceEntry;
            this.scheduleItem = scheduleItem;
        }
        public DateInterval Interval
        {
            get { return interval; }
            set { interval = value; }
        }

        public bool HasIntersection
        {
            get { return hasIntersection; }
            set { hasIntersection = value; }
        }

        public long CountedMinutes
        {
            get { return countedMinutes; }
            set { countedMinutes = value; }
        }

        public long LateMinutes
        {
            get { return lateMinutes; }
            set { lateMinutes = value; }
        }

        public long EarlyMinutes
        {
            get { return earlyMinutes; }
            set { earlyMinutes = value; }
        }

        public EmployeeAttendanceEntry AttendanceEntry
        {
            get { return attendanceEntry; }
            set { attendanceEntry = value; }
        }

        public EmployeeScheduleItem ScheduleItem
        {
            get { return scheduleItem; }
            set { scheduleItem = value; }
        }

    }

    [DataClass("DurationInMinutes")]
    public partial class DurationInMinutes
    {
        private long? minutes;

        protected DurationInMinutes() {}

        public DurationInMinutes(long? minutes)
        {
            this.minutes = minutes;
        }
        public long? Minutes
        {
            get { return minutes; }
            set { minutes = value; }
        }

    }

    [DataClass("EmployeeReport")]
    public abstract partial class EmployeeReport : RestoReport
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EmployeeReportColumnDefinition> columnDefinitions = new List<EmployeeReportColumnDefinition>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<EmployeeReportColumnDefinition, EmployeeReportColumn> additionalColumns = new Dictionary<EmployeeReportColumnDefinition, EmployeeReportColumn>();

        protected EmployeeReport() {}

        protected EmployeeReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {

        }

        protected EmployeeReport(Guid id)
            : base(id)
        {

        }

        [NotNull]
        public List<EmployeeReportColumnDefinition> ColumnDefinitions
        {
            get { return columnDefinitions; }
        }

        [NotNull]
        public Dictionary<EmployeeReportColumnDefinition, EmployeeReportColumn> AdditionalColumns
        {
            get { return additionalColumns; }
        }

    }

    [DataClass("EmployeeReportColumn")]
    public partial class EmployeeReportColumn : ReportColumn
    {
        private EmployeeReportColumnGroup group;

        protected EmployeeReportColumn() {}

        public EmployeeReportColumn(Guid id, string name, ColumnType type, bool displayable, bool resizable, bool moveable, bool sortable, TextAligment aligment, string code, bool autoWidth, ReportColumnOrder sortOrder, int sortIndex, bool showHeader, EmployeeReportColumnGroup group)
            : base(id, name, type, displayable, resizable, moveable, sortable, aligment, code, autoWidth, sortOrder, sortIndex, showHeader)
        {
            this.group = group;
        }

        public EmployeeReportColumn(Guid id)
            : base(id)
        {

        }

        public EmployeeReportColumnGroup Group
        {
            get { return group; }
            set { group = value; }
        }

    }

    [DataClass("EmployeeReportColumnDefinition")]
    public partial class EmployeeReportColumnDefinition
    {
        private HashSet<TransactionType> transactionTypes;
        private PenaltyOrBonusType penaltyOrBonusType;
        private string name;
        private bool missPenalty;
        private bool earlyLeavingPenalty;
        private bool lateComingPenalty;

        protected EmployeeReportColumnDefinition() {}

        public EmployeeReportColumnDefinition(PenaltyOrBonusType penaltyOrBonusType, string name, bool missPenalty, bool earlyLeavingPenalty, bool lateComingPenalty)
        {
            this.penaltyOrBonusType = penaltyOrBonusType;
            this.name = name;
            this.missPenalty = missPenalty;
            this.earlyLeavingPenalty = earlyLeavingPenalty;
            this.lateComingPenalty = lateComingPenalty;
        }
        public HashSet<TransactionType> TransactionTypes
        {
            get { return transactionTypes; }
            set { transactionTypes = value; }
        }

        public PenaltyOrBonusType PenaltyOrBonusType
        {
            get { return penaltyOrBonusType; }
            set { penaltyOrBonusType = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public bool MissPenalty
        {
            get { return missPenalty; }
            set { missPenalty = value; }
        }

        public bool EarlyLeavingPenalty
        {
            get { return earlyLeavingPenalty; }
            set { earlyLeavingPenalty = value; }
        }

        public bool LateComingPenalty
        {
            get { return lateComingPenalty; }
            set { lateComingPenalty = value; }
        }

    }

    [DataClass("EmployeeReportColumnGroup")]
    public enum EmployeeReportColumnGroup
    {
        NONE,
        SCHEDULE,
        ATTENDANCE,
        ROLE,
        SALES,
        TRANSACTIONS,
        PENALTY,
        BONUS,
        TARIFF,
        ADDITIONS,
        DEDUCTIONS
    }

    [DataClass("EmployeeTransactionInfo")]
    public partial class EmployeeTransactionInfo
    {
        private Guid id;
        private DateTime date;
        [NotNull, NotNullField]
        private TransactionType type;
        [HasDefaultValue]
        private decimal sum = 0;
        private string comment;
        private string authUserName;

        protected EmployeeTransactionInfo() {}

        public EmployeeTransactionInfo(Guid id, DateTime date, TransactionType type, decimal sum)
        {
            this.id = id;
            this.date = date;
            this.type = type;
            this.sum = sum;
        }
        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        [NotNull]
        public TransactionType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public string AuthUserName
        {
            get { return authUserName; }
            set { authUserName = value; }
        }

    }

    [DataClass("LaborCostsAggregatedInfo")]
    public partial class LaborCostsAggregatedInfo
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PaymentStrategy> userPaymentStrategies = new List<PaymentStrategy>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EmployeeScheduleItem> schedules = new List<EmployeeScheduleItem>();
        [HasDefaultValue]
        private decimal profitFromMonthStart = 0;
        [HasDefaultValue]
        private decimal laborCostFromMonthStart = 0;
        private Dictionary<DateInfo, decimal> profitByDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<User, Dictionary<DateInfo, decimal>> laborCosts = new Dictionary<User, Dictionary<DateInfo, decimal>>();

        protected LaborCostsAggregatedInfo() {}

        public LaborCostsAggregatedInfo(decimal profitFromMonthStart, decimal laborCostFromMonthStart)
        {
            this.profitFromMonthStart = profitFromMonthStart;
            this.laborCostFromMonthStart = laborCostFromMonthStart;
        }
        [NotNull]
        public List<PaymentStrategy> UserPaymentStrategies
        {
            get { return userPaymentStrategies; }
        }

        [NotNull]
        public List<EmployeeScheduleItem> Schedules
        {
            get { return schedules; }
        }

        public decimal ProfitFromMonthStart
        {
            get { return profitFromMonthStart; }
            set { profitFromMonthStart = value; }
        }

        public decimal LaborCostFromMonthStart
        {
            get { return laborCostFromMonthStart; }
            set { laborCostFromMonthStart = value; }
        }

        public Dictionary<DateInfo, decimal> ProfitByDate
        {
            get { return profitByDate; }
            set { profitByDate = value; }
        }

        [NotNull]
        public Dictionary<User, Dictionary<DateInfo, decimal>> LaborCosts
        {
            get { return laborCosts; }
        }

    }

    [DataClass("PersonalReport")]
    public partial class PersonalReport : RestoReport
    {
        private User user;
        private DateInterval dateInterval;
        private HashSet<DepartmentEntity> departments;
        private BusinessDateSettings bizDateSettings;
        private EmployeeReportColumn columnRowName;
        private EmployeeReportColumn columnBizDate;
        private EmployeeReportColumn columnAttendance;
        private EmployeeReportColumn columnAttendanceId;
        private EmployeeReportColumn columnScheduleItemName;
        private EmployeeReportColumn columnRoleName;
        private EmployeeReportColumn columnRoleId;
        private EmployeeReportColumn columnDepartment;
        private EmployeeReportColumn columnTimeCounted;
        private EmployeeReportColumn columnSumCounted;
        private EmployeeReportColumn columnIncentivePayments;
        private EmployeeReportColumn columnDishReceiptsSum;
        private EmployeeReportColumn columnOrderReceiptsSum;
        private EmployeeReportColumn columnLateComingTime;
        private EmployeeReportColumn columnEarlyLeavingTime;
        private EmployeeReportColumn columnAdditions;
        private EmployeeReportColumn columnDeductions;
        private EmployeeReportColumn columnCash;
        private EmployeeReportColumn columnMoneyTotal;

        protected PersonalReport() {}

        public PersonalReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, User user, DateInterval dateInterval, BusinessDateSettings bizDateSettings, EmployeeReportColumn columnRowName, EmployeeReportColumn columnBizDate, EmployeeReportColumn columnAttendance, EmployeeReportColumn columnAttendanceId, EmployeeReportColumn columnScheduleItemName, EmployeeReportColumn columnRoleName, EmployeeReportColumn columnRoleId, EmployeeReportColumn columnDepartment, EmployeeReportColumn columnTimeCounted, EmployeeReportColumn columnSumCounted, EmployeeReportColumn columnIncentivePayments, EmployeeReportColumn columnDishReceiptsSum, EmployeeReportColumn columnOrderReceiptsSum, EmployeeReportColumn columnLateComingTime, EmployeeReportColumn columnEarlyLeavingTime, EmployeeReportColumn columnAdditions, EmployeeReportColumn columnDeductions, EmployeeReportColumn columnCash, EmployeeReportColumn columnMoneyTotal)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.user = user;
            this.dateInterval = dateInterval;
            this.bizDateSettings = bizDateSettings;
            this.columnRowName = columnRowName;
            this.columnBizDate = columnBizDate;
            this.columnAttendance = columnAttendance;
            this.columnAttendanceId = columnAttendanceId;
            this.columnScheduleItemName = columnScheduleItemName;
            this.columnRoleName = columnRoleName;
            this.columnRoleId = columnRoleId;
            this.columnDepartment = columnDepartment;
            this.columnTimeCounted = columnTimeCounted;
            this.columnSumCounted = columnSumCounted;
            this.columnIncentivePayments = columnIncentivePayments;
            this.columnDishReceiptsSum = columnDishReceiptsSum;
            this.columnOrderReceiptsSum = columnOrderReceiptsSum;
            this.columnLateComingTime = columnLateComingTime;
            this.columnEarlyLeavingTime = columnEarlyLeavingTime;
            this.columnAdditions = columnAdditions;
            this.columnDeductions = columnDeductions;
            this.columnCash = columnCash;
            this.columnMoneyTotal = columnMoneyTotal;
        }

        public PersonalReport(Guid id)
            : base(id)
        {

        }

        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public DateInterval DateInterval
        {
            get { return dateInterval; }
            set { dateInterval = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

        public BusinessDateSettings BizDateSettings
        {
            get { return bizDateSettings; }
            set { bizDateSettings = value; }
        }

        public EmployeeReportColumn ColumnRowName
        {
            get { return columnRowName; }
            set { columnRowName = value; }
        }

        public EmployeeReportColumn ColumnBizDate
        {
            get { return columnBizDate; }
            set { columnBizDate = value; }
        }

        public EmployeeReportColumn ColumnAttendance
        {
            get { return columnAttendance; }
            set { columnAttendance = value; }
        }

        public EmployeeReportColumn ColumnAttendanceId
        {
            get { return columnAttendanceId; }
            set { columnAttendanceId = value; }
        }

        public EmployeeReportColumn ColumnScheduleItemName
        {
            get { return columnScheduleItemName; }
            set { columnScheduleItemName = value; }
        }

        public EmployeeReportColumn ColumnRoleName
        {
            get { return columnRoleName; }
            set { columnRoleName = value; }
        }

        public EmployeeReportColumn ColumnRoleId
        {
            get { return columnRoleId; }
            set { columnRoleId = value; }
        }

        public EmployeeReportColumn ColumnDepartment
        {
            get { return columnDepartment; }
            set { columnDepartment = value; }
        }

        public EmployeeReportColumn ColumnTimeCounted
        {
            get { return columnTimeCounted; }
            set { columnTimeCounted = value; }
        }

        public EmployeeReportColumn ColumnSumCounted
        {
            get { return columnSumCounted; }
            set { columnSumCounted = value; }
        }

        public EmployeeReportColumn ColumnIncentivePayments
        {
            get { return columnIncentivePayments; }
            set { columnIncentivePayments = value; }
        }

        public EmployeeReportColumn ColumnDishReceiptsSum
        {
            get { return columnDishReceiptsSum; }
            set { columnDishReceiptsSum = value; }
        }

        public EmployeeReportColumn ColumnOrderReceiptsSum
        {
            get { return columnOrderReceiptsSum; }
            set { columnOrderReceiptsSum = value; }
        }

        public EmployeeReportColumn ColumnLateComingTime
        {
            get { return columnLateComingTime; }
            set { columnLateComingTime = value; }
        }

        public EmployeeReportColumn ColumnEarlyLeavingTime
        {
            get { return columnEarlyLeavingTime; }
            set { columnEarlyLeavingTime = value; }
        }

        public EmployeeReportColumn ColumnAdditions
        {
            get { return columnAdditions; }
            set { columnAdditions = value; }
        }

        public EmployeeReportColumn ColumnDeductions
        {
            get { return columnDeductions; }
            set { columnDeductions = value; }
        }

        public EmployeeReportColumn ColumnCash
        {
            get { return columnCash; }
            set { columnCash = value; }
        }

        public EmployeeReportColumn ColumnMoneyTotal
        {
            get { return columnMoneyTotal; }
            set { columnMoneyTotal = value; }
        }

    }

    [DataClass("PersonalReportRow")]
    public partial class PersonalReportRow
    {
        private string name;
        private DateTime? bizDate;
        private List<AttendanceInfoForPeriod> attendancesInfo;
        private EmployeeTransactionsAggregatedInfo moneyInfo;
        private Dictionary<AttendanceInfoForPeriod, EmployeeTransactionsAggregatedInfo> attendanceMoneyInfos;

        protected PersonalReportRow() {}

        public PersonalReportRow(string name, DateTime? bizDate, EmployeeTransactionsAggregatedInfo moneyInfo)
        {
            this.name = name;
            this.bizDate = bizDate;
            this.moneyInfo = moneyInfo;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public DateTime? BizDate
        {
            get { return bizDate; }
            set { bizDate = value; }
        }

        public List<AttendanceInfoForPeriod> AttendancesInfo
        {
            get { return attendancesInfo; }
            set { attendancesInfo = value; }
        }

        public EmployeeTransactionsAggregatedInfo MoneyInfo
        {
            get { return moneyInfo; }
            set { moneyInfo = value; }
        }

        public Dictionary<AttendanceInfoForPeriod, EmployeeTransactionsAggregatedInfo> AttendanceMoneyInfos
        {
            get { return attendanceMoneyInfos; }
            set { attendanceMoneyInfos = value; }
        }

    }

    [DataClass("SalaryReport")]
    public partial class SalaryReport : EmployeeReport
    {
        private DateInterval dateInterval;
        private User employee;
        private HashSet<DepartmentEntity> departmentsSet;
        [HasDefaultValue]
        private bool showAllEmployees = false;
        private EmployeeReportColumn employeeNameColumn;
        private EmployeeReportColumn employeeCodeColumn;
        private EmployeeReportColumn employeeRoleColumn;
        private EmployeeReportColumn employeeIdColumn;
        private EmployeeReportColumn employeeInitialBalanceColumn;
        private EmployeeReportColumn employeeSteadySalarySumColumn;
        private EmployeeReportColumn employeeAdvanceSumColumn;
        private EmployeeReportColumn employeeAcceptedHoursColumn;
        private EmployeeReportColumn employeeAcceptedMinutesColumn;
        private EmployeeReportColumn employeePaymentPerHourSumColumn;
        private EmployeeReportColumn receiptsDishSumColumn;
        private EmployeeReportColumn receiptsOrderSumColumn;
        private EmployeeReportColumn receiptsPaymentColumn;
        private EmployeeReportColumn otherPaymentsColumn;
        private EmployeeReportColumn totalEarnings;
        private EmployeeReportColumn advanceColumn;
        private EmployeeReportColumn paymentsColumn;
        private EmployeeReportColumn totalColumn;
        private EmployeeReportColumn employeeOutgoingBalanceColumn;

        protected SalaryReport() {}

        public SalaryReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, DateInterval dateInterval, User employee, EmployeeReportColumn employeeNameColumn, EmployeeReportColumn employeeCodeColumn, EmployeeReportColumn employeeRoleColumn, EmployeeReportColumn employeeIdColumn, EmployeeReportColumn employeeInitialBalanceColumn, EmployeeReportColumn employeeSteadySalarySumColumn, EmployeeReportColumn employeeAdvanceSumColumn, EmployeeReportColumn employeeAcceptedHoursColumn, EmployeeReportColumn employeeAcceptedMinutesColumn, EmployeeReportColumn employeePaymentPerHourSumColumn, EmployeeReportColumn receiptsDishSumColumn, EmployeeReportColumn receiptsOrderSumColumn, EmployeeReportColumn receiptsPaymentColumn, EmployeeReportColumn otherPaymentsColumn, EmployeeReportColumn totalEarnings, EmployeeReportColumn advanceColumn, EmployeeReportColumn paymentsColumn, EmployeeReportColumn totalColumn, EmployeeReportColumn employeeOutgoingBalanceColumn)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.dateInterval = dateInterval;
            this.employee = employee;
            this.employeeNameColumn = employeeNameColumn;
            this.employeeCodeColumn = employeeCodeColumn;
            this.employeeRoleColumn = employeeRoleColumn;
            this.employeeIdColumn = employeeIdColumn;
            this.employeeInitialBalanceColumn = employeeInitialBalanceColumn;
            this.employeeSteadySalarySumColumn = employeeSteadySalarySumColumn;
            this.employeeAdvanceSumColumn = employeeAdvanceSumColumn;
            this.employeeAcceptedHoursColumn = employeeAcceptedHoursColumn;
            this.employeeAcceptedMinutesColumn = employeeAcceptedMinutesColumn;
            this.employeePaymentPerHourSumColumn = employeePaymentPerHourSumColumn;
            this.receiptsDishSumColumn = receiptsDishSumColumn;
            this.receiptsOrderSumColumn = receiptsOrderSumColumn;
            this.receiptsPaymentColumn = receiptsPaymentColumn;
            this.otherPaymentsColumn = otherPaymentsColumn;
            this.totalEarnings = totalEarnings;
            this.advanceColumn = advanceColumn;
            this.paymentsColumn = paymentsColumn;
            this.totalColumn = totalColumn;
            this.employeeOutgoingBalanceColumn = employeeOutgoingBalanceColumn;
        }

        public SalaryReport(Guid id)
            : base(id)
        {

        }

        public DateInterval DateInterval
        {
            get { return dateInterval; }
            set { dateInterval = value; }
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public HashSet<DepartmentEntity> DepartmentsSet
        {
            get { return departmentsSet; }
            set { departmentsSet = value; }
        }

        public bool ShowAllEmployees
        {
            get { return showAllEmployees; }
            set { showAllEmployees = value; }
        }

        public EmployeeReportColumn EmployeeNameColumn
        {
            get { return employeeNameColumn; }
            set { employeeNameColumn = value; }
        }

        public EmployeeReportColumn EmployeeCodeColumn
        {
            get { return employeeCodeColumn; }
            set { employeeCodeColumn = value; }
        }

        public EmployeeReportColumn EmployeeRoleColumn
        {
            get { return employeeRoleColumn; }
            set { employeeRoleColumn = value; }
        }

        public EmployeeReportColumn EmployeeIdColumn
        {
            get { return employeeIdColumn; }
            set { employeeIdColumn = value; }
        }

        public EmployeeReportColumn EmployeeInitialBalanceColumn
        {
            get { return employeeInitialBalanceColumn; }
            set { employeeInitialBalanceColumn = value; }
        }

        public EmployeeReportColumn EmployeeSteadySalarySumColumn
        {
            get { return employeeSteadySalarySumColumn; }
            set { employeeSteadySalarySumColumn = value; }
        }

        public EmployeeReportColumn EmployeeAdvanceSumColumn
        {
            get { return employeeAdvanceSumColumn; }
            set { employeeAdvanceSumColumn = value; }
        }

        public EmployeeReportColumn EmployeeAcceptedHoursColumn
        {
            get { return employeeAcceptedHoursColumn; }
            set { employeeAcceptedHoursColumn = value; }
        }

        public EmployeeReportColumn EmployeeAcceptedMinutesColumn
        {
            get { return employeeAcceptedMinutesColumn; }
            set { employeeAcceptedMinutesColumn = value; }
        }

        public EmployeeReportColumn EmployeePaymentPerHourSumColumn
        {
            get { return employeePaymentPerHourSumColumn; }
            set { employeePaymentPerHourSumColumn = value; }
        }

        public EmployeeReportColumn ReceiptsDishSumColumn
        {
            get { return receiptsDishSumColumn; }
            set { receiptsDishSumColumn = value; }
        }

        public EmployeeReportColumn ReceiptsOrderSumColumn
        {
            get { return receiptsOrderSumColumn; }
            set { receiptsOrderSumColumn = value; }
        }

        public EmployeeReportColumn ReceiptsPaymentColumn
        {
            get { return receiptsPaymentColumn; }
            set { receiptsPaymentColumn = value; }
        }

        public EmployeeReportColumn OtherPaymentsColumn
        {
            get { return otherPaymentsColumn; }
            set { otherPaymentsColumn = value; }
        }

        public EmployeeReportColumn TotalEarnings
        {
            get { return totalEarnings; }
            set { totalEarnings = value; }
        }

        public EmployeeReportColumn AdvanceColumn
        {
            get { return advanceColumn; }
            set { advanceColumn = value; }
        }

        public EmployeeReportColumn PaymentsColumn
        {
            get { return paymentsColumn; }
            set { paymentsColumn = value; }
        }

        public EmployeeReportColumn TotalColumn
        {
            get { return totalColumn; }
            set { totalColumn = value; }
        }

        public EmployeeReportColumn EmployeeOutgoingBalanceColumn
        {
            get { return employeeOutgoingBalanceColumn; }
            set { employeeOutgoingBalanceColumn = value; }
        }

    }

    [RootEntity]
    [DataClass("IikoCardSettings")]
    public partial class IikoCardSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<PaymentType> applicablePaymentTypes = new HashSet<PaymentType>();

        protected IikoCardSettings() {}

        public IikoCardSettings(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public HashSet<PaymentType> ApplicablePaymentTypes
        {
            get { return applicablePaymentTypes; }
        }

    }

    [RootEntity]
    [DataClass("IikoNewsItem")]
    public partial class IikoNewsItem : PersistedEntity
    {
        private DateTime? date;
        private string header;
        private string description;
        private string detailsUrl;
        private string picture;
        [HasDefaultValue]
        private int priority = 0;
        private string buttonLabel;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoNewsItem() {}

        public IikoNewsItem(Guid id, DateTime? date, string header, string description, string detailsUrl, string picture)
            : base(id)
        {
            this.date = date;
            this.header = header;
            this.description = description;
            this.detailsUrl = detailsUrl;
            this.picture = picture;
        }

        public IikoNewsItem(Guid id)
            : base(id)
        {

        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string Header
        {
            get { return header; }
            set { header = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public string DetailsUrl
        {
            get { return detailsUrl; }
            set { detailsUrl = value; }
        }

        public string Picture
        {
            get { return picture; }
            set { picture = value; }
        }

        public int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        [CanBeNull]
        public string ButtonLabel
        {
            get { return buttonLabel; }
            set { buttonLabel = value; }
        }

    }

    [DataClass("SavedImageInfo")]
    public partial class SavedImageInfo
    {
        private Guid imageId;

        protected SavedImageInfo() {}

        public SavedImageInfo(Guid imageId)
        {
            this.imageId = imageId;
        }
        public Guid ImageId
        {
            get { return imageId; }
            set { imageId = value; }
        }

    }

    [DataClass("SavedImageRequest")]
    public partial class SavedImageRequest
    {
        private Guid? imageId;
        private string encodedImage;
        private string source;

        public SavedImageRequest() {}

        public SavedImageRequest(Guid? imageId, string encodedImage, string source)
        {
            this.imageId = imageId;
            this.encodedImage = encodedImage;
            this.source = source;
        }
        public Guid? ImageId
        {
            get { return imageId; }
            set { imageId = value; }
        }

        public string EncodedImage
        {
            get { return encodedImage; }
            set { encodedImage = value; }
        }

        public string Source
        {
            get { return source; }
            set { source = value; }
        }

    }

    [DataClass("Notice")]
    public partial class Notice : CachedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string message = "";
        [HasDefaultValue]
        private bool deleted = false;
        [HasDefaultValue]
        private bool unread = true;
        private int importance;
        private DateTime date;
        private DateTime dateCreated;
        private DateTime dateReceived;
        [NotNull, NotNullField]
        private NoticeType type;
        private OperationInfo modifiedInfo;

        protected Notice() {}

        public Notice(Guid id, string message, int importance, DateTime date, DateTime dateCreated, DateTime dateReceived, NoticeType type)
            : base(id)
        {
            this.message = message;
            this.importance = importance;
            this.date = date;
            this.dateCreated = dateCreated;
            this.dateReceived = dateReceived;
            this.type = type;
        }

        public Notice(Guid id, string message, DateTime date, DateTime dateCreated, DateTime dateReceived, NoticeType type)
            : base(id)
        {
            this.message = message;
            this.date = date;
            this.dateCreated = dateCreated;
            this.dateReceived = dateReceived;
            this.type = type;
        }

        [NotNull]
        public string Message
        {
            get { return message; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  message = value;
            }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public bool Unread
        {
            get { return unread; }
            set { unread = value; }
        }

        public int Importance
        {
            get { return importance; }
            set { importance = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public DateTime DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public DateTime DateReceived
        {
            get { return dateReceived; }
            set { dateReceived = value; }
        }

        [NotNull]
        public NoticeType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("NoticeType")]
    [EnumClass]
    public partial class NoticeType
    {
        public static readonly NoticeType OLAP = new NoticeType("OLAP", "Olap");
        public static readonly NoticeType EVENTS = new NoticeType("EVENTS", "Events");
        public static readonly NoticeType MEDICAL_ANALYSIS = new NoticeType("MEDICAL_ANALYSIS", "MedicalAnalysis");

        private readonly string name;
        private readonly string __value;

        private NoticeType(string __value, string name)
        {
            this.__value = __value;
            this.name = name;
        }

        public static NoticeType Parse(string value)
        {
            switch(value)
            {
                case "OLAP": return OLAP;
                case "EVENTS": return EVENTS;
                case "MEDICAL_ANALYSIS": return MEDICAL_ANALYSIS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static NoticeType[] VALUES
        {
            get
            {
                return new []
                {
                    OLAP, 
                    EVENTS, 
                    MEDICAL_ANALYSIS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Name
        {
            get { return name; }
        }

    }

    [RootEntity]
    [DataClass("NoticesState")]
    public partial class NoticesState : PersistedEntity
    {
        private DateTime? dateUpdate;

        protected NoticesState() {}

        public NoticesState(Guid id, DateTime? dateUpdate)
            : base(id)
        {
            this.dateUpdate = dateUpdate;
        }

        public NoticesState(Guid id)
            : base(id)
        {

        }

        public DateTime? DateUpdate
        {
            get { return dateUpdate; }
            set { dateUpdate = value; }
        }

    }

    [DataClass("AbstractScheduledPayment")]
    public abstract partial class AbstractScheduledPayment : AbstractKeyedTimeTableItem
    {
        private string number;
        private Guid paymentRequestId;
        private string name;
        private DateTime dueDate;
        private ScheduledPaymentType paymentType;
        [HasDefaultValue]
        private decimal sum = 0;
        private Account writeoffAccount;
        private Account expenseAccount;
        private User counteragent;
        private DepartmentEntity department;
        private CashFlowCategory cashFlowCategory;
        private Conception conception;
        private bool paid;

        protected AbstractScheduledPayment() {}

        protected AbstractScheduledPayment(Guid id, DateTime? dateFrom, DateTime? dateTo, string number, Guid paymentRequestId, string name, DateTime dueDate, ScheduledPaymentType paymentType, decimal sum, DepartmentEntity department, bool paid)
            : base(id, dateFrom, dateTo)
        {
            this.number = number;
            this.paymentRequestId = paymentRequestId;
            this.name = name;
            this.dueDate = dueDate;
            this.paymentType = paymentType;
            this.sum = sum;
            this.department = department;
            this.paid = paid;
        }

        protected AbstractScheduledPayment(Guid id, Guid paymentRequestId, DateTime dueDate, decimal sum)
            : base(id)
        {
            this.paymentRequestId = paymentRequestId;
            this.dueDate = dueDate;
            this.sum = sum;
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public Guid PaymentRequestId
        {
            get { return paymentRequestId; }
            set { paymentRequestId = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public DateTime DueDate
        {
            get { return dueDate; }
            set { dueDate = value; }
        }

        public ScheduledPaymentType PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [CanBeNull]
        public Account WriteoffAccount
        {
            get { return writeoffAccount; }
            set { writeoffAccount = value; }
        }

        [CanBeNull]
        public Account ExpenseAccount
        {
            get { return expenseAccount; }
            set { expenseAccount = value; }
        }

        [CanBeNull]
        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public bool Paid
        {
            get { return paid; }
            set { paid = value; }
        }

    }

    [DataClass("AbstractScheduledPaymentRequest")]
    public abstract partial class AbstractScheduledPaymentRequest : AbstractDocument
    {
        private string name;
        private DateTime start;
        private DateTime end;
        private ScheduledPeriod period;
        [HasDefaultValue]
        private decimal sum = 0;
        private Account writeoffAccount;
        private Account expenseAccount;
        private User counteragent;
        private CashFlowCategory cashFlowCategory;
        private HashSet<DepartmentEntity> departments;

        protected AbstractScheduledPaymentRequest() {}

        protected AbstractScheduledPaymentRequest(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, string name, DateTime start, DateTime end, ScheduledPeriod period, decimal sum)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.name = name;
            this.start = start;
            this.end = end;
            this.period = period;
            this.sum = sum;
        }

        protected AbstractScheduledPaymentRequest(Guid id, DateTime dateIncoming, string documentNumber, DateTime start, DateTime end, decimal sum)
            : base(id, dateIncoming, documentNumber)
        {
            this.start = start;
            this.end = end;
            this.sum = sum;
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public DateTime Start
        {
            get { return start; }
            set { start = value; }
        }

        public DateTime End
        {
            get { return end; }
            set { end = value; }
        }

        public ScheduledPeriod Period
        {
            get { return period; }
            set { period = value; }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [CanBeNull]
        public Account WriteoffAccount
        {
            get { return writeoffAccount; }
            set { writeoffAccount = value; }
        }

        [CanBeNull]
        public Account ExpenseAccount
        {
            get { return expenseAccount; }
            set { expenseAccount = value; }
        }

        [CanBeNull]
        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

    }

    [DataClass("OperationResult")]
    public partial class OperationResult
    {
        private Object item;
        private List<string> errors;
        private List<string> warnings;
        private bool hasResults;
        private Object result;

        protected OperationResult() {}

        public OperationResult(Object item, bool hasResults, Object result)
        {
            this.item = item;
            this.hasResults = hasResults;
            this.result = result;
        }
        public Object Item
        {
            get { return item; }
            set { item = value; }
        }

        public List<string> Errors
        {
            get { return errors; }
            set { errors = value; }
        }

        public List<string> Warnings
        {
            get { return warnings; }
            set { warnings = value; }
        }

        public bool HasResults
        {
            get { return hasResults; }
            set { hasResults = value; }
        }

        public Object Result
        {
            get { return result; }
            set { result = value; }
        }

    }

    [DataClass("ScheduledIncoming")]
    public partial class ScheduledIncoming : AbstractScheduledPayment
    {

        protected ScheduledIncoming() {}

        public ScheduledIncoming(Guid id, DateTime? dateFrom, DateTime? dateTo, string number, Guid paymentRequestId, string name, DateTime dueDate, ScheduledPaymentType paymentType, decimal sum, DepartmentEntity department, bool paid)
            : base(id, dateFrom, dateTo, number, paymentRequestId, name, dueDate, paymentType, sum, department, paid)
        {

        }

        public ScheduledIncoming(Guid id, Guid paymentRequestId, DateTime dueDate, decimal sum)
            : base(id, paymentRequestId, dueDate, sum)
        {

        }

    }

    [DataClass("ScheduledIncomingRequest")]
    public partial class ScheduledIncomingRequest : AbstractScheduledPaymentRequest
    {

        protected ScheduledIncomingRequest() {}

        public ScheduledIncomingRequest(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, string name, DateTime start, DateTime end, ScheduledPeriod period, decimal sum)
            : base(id, dateIncoming, documentNumber, status, name, start, end, period, sum)
        {

        }

        public ScheduledIncomingRequest(Guid id, DateTime dateIncoming, string documentNumber, DateTime start, DateTime end, decimal sum)
            : base(id, dateIncoming, documentNumber, start, end, sum)
        {

        }

    }

    [DataClass("ScheduledPayment")]
    public partial class ScheduledPayment : AbstractScheduledPayment
    {

        protected ScheduledPayment() {}

        public ScheduledPayment(Guid id, DateTime? dateFrom, DateTime? dateTo, string number, Guid paymentRequestId, string name, DateTime dueDate, ScheduledPaymentType paymentType, decimal sum, DepartmentEntity department, bool paid)
            : base(id, dateFrom, dateTo, number, paymentRequestId, name, dueDate, paymentType, sum, department, paid)
        {

        }

        public ScheduledPayment(Guid id, Guid paymentRequestId, DateTime dueDate, decimal sum)
            : base(id, paymentRequestId, dueDate, sum)
        {

        }

    }

    [DataClass("ScheduledPaymentRequest")]
    public partial class ScheduledPaymentRequest : AbstractScheduledPaymentRequest
    {

        protected ScheduledPaymentRequest() {}

        public ScheduledPaymentRequest(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, string name, DateTime start, DateTime end, ScheduledPeriod period, decimal sum)
            : base(id, dateIncoming, documentNumber, status, name, start, end, period, sum)
        {

        }

        public ScheduledPaymentRequest(Guid id, DateTime dateIncoming, string documentNumber, DateTime start, DateTime end, decimal sum)
            : base(id, dateIncoming, documentNumber, start, end, sum)
        {

        }

    }

    [DataClass("ScheduledPaymentTransaction")]
    public partial class ScheduledPaymentTransaction : AccountingTransaction
    {
        private Guid causeEventId;

        protected ScheduledPaymentTransaction() {}

        public ScheduledPaymentTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, Guid causeEventId)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {
            this.causeEventId = causeEventId;
        }

        public ScheduledPaymentTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, Guid causeEventId)
            : base(id, date, type, from, to)
        {
            this.causeEventId = causeEventId;
        }

        public Guid CauseEventId
        {
            get { return causeEventId; }
            set { causeEventId = value; }
        }

    }

    [DataClass("ScheduledPaymentType")]
    [EnumClass]
    public partial class ScheduledPaymentType : LocalizableName<ScheduledPaymentType>
    {
        /// <summary> Запланированное поступление. </summary>
        public static readonly ScheduledPaymentType SCHEDULED_INCOMING_PAYMENT = new ScheduledPaymentType("SCHEDULED_INCOMING_PAYMENT");
        /// <summary> Запланированный платеж. </summary>
        public static readonly ScheduledPaymentType SCHEDULED_OUTGOING_PAYMENT = new ScheduledPaymentType("SCHEDULED_OUTGOING_PAYMENT");

        private readonly string __value;
        private readonly string __nameResId;

        private ScheduledPaymentType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SCHEDULEDPAYMENTTYPE_NAME_" + __value;
        }

        public static ScheduledPaymentType Parse(string value)
        {
            switch(value)
            {
                case "SCHEDULED_INCOMING_PAYMENT": return SCHEDULED_INCOMING_PAYMENT;
                case "SCHEDULED_OUTGOING_PAYMENT": return SCHEDULED_OUTGOING_PAYMENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ScheduledPaymentType[] VALUES
        {
            get
            {
                return new []
                {
                    SCHEDULED_INCOMING_PAYMENT, 
                    SCHEDULED_OUTGOING_PAYMENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ScheduledPeriod")]
    public partial class ScheduledPeriod
    {
        private ScheduledPeriodType type;
        private int value;

        protected ScheduledPeriod() {}

        public ScheduledPeriod(ScheduledPeriodType type, int value)
        {
            this.type = type;
            this.value = value;
        }
        public ScheduledPeriodType Type
        {
            get { return type; }
            set { type = value; }
        }

        public int Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("ScheduledPeriodType")]
    [EnumClass]
    public partial class ScheduledPeriodType : LocalizableName<ScheduledPeriodType>
    {
        /// <summary> Единоразово. </summary>
        public static readonly ScheduledPeriodType SINGLE_TIME = new ScheduledPeriodType("SINGLE_TIME", false);
        /// <summary> В определенный день недели. </summary>
        public static readonly ScheduledPeriodType DAY_OF_WEEK = new ScheduledPeriodType("DAY_OF_WEEK", true);
        /// <summary> В определенный день месяца. </summary>
        public static readonly ScheduledPeriodType DAY_OF_MONTH = new ScheduledPeriodType("DAY_OF_MONTH", true);
        /// <summary> Через определенное кол-во дней. </summary>
        public static readonly ScheduledPeriodType EVERY_N_DAYS = new ScheduledPeriodType("EVERY_N_DAYS", true);
        /// <summary> Через определенное кол-во месяцев. </summary>
        public static readonly ScheduledPeriodType EVERY_N_MONTHS = new ScheduledPeriodType("EVERY_N_MONTHS", true);

        private readonly bool periodical;
        private readonly string __value;
        private readonly string __nameResId;

        private ScheduledPeriodType(string __value, bool periodical)
        {
            this.__value = __value;
            this.__nameResId = "SCHEDULEDPERIODTYPE_NAME_" + __value;
            this.periodical = periodical;
        }

        public static ScheduledPeriodType Parse(string value)
        {
            switch(value)
            {
                case "SINGLE_TIME": return SINGLE_TIME;
                case "DAY_OF_WEEK": return DAY_OF_WEEK;
                case "DAY_OF_MONTH": return DAY_OF_MONTH;
                case "EVERY_N_DAYS": return EVERY_N_DAYS;
                case "EVERY_N_MONTHS": return EVERY_N_MONTHS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ScheduledPeriodType[] VALUES
        {
            get
            {
                return new []
                {
                    SINGLE_TIME, 
                    DAY_OF_WEEK, 
                    DAY_OF_MONTH, 
                    EVERY_N_DAYS, 
                    EVERY_N_MONTHS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Periodical
        {
            get { return periodical; }
        }

    }

    [DataClass("ChangePaymentStatusResult")]
    public partial class ChangePaymentStatusResult : OperationResult
    {

        protected ChangePaymentStatusResult() {}

        public ChangePaymentStatusResult(Object item, bool hasResults, Object result)
            : base(item, hasResults, result)
        {

        }
    }

    [DataClass("CreateTransactionResult")]
    public partial class CreateTransactionResult : OperationResult
    {

        protected CreateTransactionResult() {}

        public CreateTransactionResult(Object item, bool hasResults, Object result)
            : base(item, hasResults, result)
        {

        }
    }

    [DataClass("DeletePaymentResult")]
    public partial class DeletePaymentResult : OperationResult
    {

        protected DeletePaymentResult() {}

        public DeletePaymentResult(Object item, bool hasResults, Object result)
            : base(item, hasResults, result)
        {

        }
    }

    [DataClass("GeneratePaymentsResult")]
    public partial class GeneratePaymentsResult : OperationResult
    {

        protected GeneratePaymentsResult() {}

        public GeneratePaymentsResult(Object item, bool hasResults, Object result)
            : base(item, hasResults, result)
        {

        }
    }

    [DataClass("GetTransactionResult")]
    public partial class GetTransactionResult : OperationResult
    {

        protected GetTransactionResult() {}

        public GetTransactionResult(Object item, bool hasResults, Object result)
            : base(item, hasResults, result)
        {

        }
    }

    [DataClass("AbsoluteValuePricingStrategy")]
    public partial class AbsoluteValuePricingStrategy : PricingStrategy
    {
        [HasDefaultValue]
        private decimal delta = 0;

        protected AbsoluteValuePricingStrategy() {}

        public AbsoluteValuePricingStrategy(decimal delta)
        {
            this.delta = delta;
        }
        public decimal Delta
        {
            get { return delta; }
            set { delta = value; }
        }

    }

    [RootEntity]
    [DataClass("ClientPriceCategory")]
    public partial class ClientPriceCategory : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        private bool assignableManually;
        [NotNull, NotNullField]
        private PricingStrategy defaultPricingStrategy;
        private Guid? franchiseUniqueId;
        private Guid? franchiseMasterId;

        protected ClientPriceCategory() {}

        public ClientPriceCategory(Guid id, LocalizableValue name, string code, bool assignableManually, PricingStrategy defaultPricingStrategy)
            : base(id, name)
        {
            this.code = code;
            this.assignableManually = assignableManually;
            this.defaultPricingStrategy = defaultPricingStrategy;
        }

        public ClientPriceCategory(Guid id, LocalizableValue name, string code, PricingStrategy defaultPricingStrategy)
            : base(id, name)
        {
            this.code = code;
            this.defaultPricingStrategy = defaultPricingStrategy;
        }

        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        public bool AssignableManually
        {
            get { return assignableManually; }
            set { assignableManually = value; }
        }

        [NotNull]
        public PricingStrategy DefaultPricingStrategy
        {
            get { return defaultPricingStrategy; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  defaultPricingStrategy = value;
            }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("PercentPricingStrategy")]
    public partial class PercentPricingStrategy : PricingStrategy
    {
        [HasDefaultValue]
        private decimal percent = 0;

        protected PercentPricingStrategy() {}

        public PercentPricingStrategy(decimal percent)
        {
            this.percent = percent;
        }
        public decimal Percent
        {
            get { return percent; }
            set { percent = value; }
        }

    }

    [DataClass("PricingInfo")]
    public partial class PricingInfo
    {
        [HasDefaultValue]
        private decimal totalPrice = 0;
        [HasDefaultValue]
        private decimal netCost = 0;
        [HasDefaultValue]
        private decimal markup = 0;
        [HasDefaultValue]
        private decimal nds = 0;
        [HasDefaultValue]
        private decimal markupPercent = 0;
        [HasDefaultValue]
        private decimal ndsPercent = 0;


        public decimal TotalPrice
        {
            get { return totalPrice; }
            set { totalPrice = value; }
        }

        public decimal NetCost
        {
            get { return netCost; }
            set { netCost = value; }
        }

        public decimal Markup
        {
            get { return markup; }
            set { markup = value; }
        }

        public decimal Nds
        {
            get { return nds; }
            set { nds = value; }
        }

        public decimal MarkupPercent
        {
            get { return markupPercent; }
            set { markupPercent = value; }
        }

        public decimal NdsPercent
        {
            get { return ndsPercent; }
            set { ndsPercent = value; }
        }

    }

    [DataClass("PricingParameters")]
    public partial class PricingParameters
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Product> products = new List<Product>();
        private DateTime date;
        [NotNull, NotNullField]
        private RoundRule roundRule;
        private decimal? customMarkupPercent;
        private decimal? customNdsPercent;
        private VatValueSource ndsSource;
        private Dictionary<Product, decimal> ndsPercentsByDocument;
        private decimal? thresholdPercent;
        [HasDefaultValue]
        private bool byLastShipment = false;
        [HasDefaultValue]
        private bool includeNdsInMarkup = false;
        [HasDefaultValue]
        private bool byPriceList = false;

        protected PricingParameters() {}

        public PricingParameters(DateTime date, RoundRule roundRule)
        {
            this.date = date;
            this.roundRule = roundRule;
        }
        [NotNull]
        public ICollection<Product> Products
        {
            get { return products; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        [NotNull]
        public RoundRule RoundRule
        {
            get { return roundRule; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  roundRule = value;
            }
        }

        public decimal? CustomMarkupPercent
        {
            get { return customMarkupPercent; }
            set { customMarkupPercent = value; }
        }

        public decimal? CustomNdsPercent
        {
            get { return customNdsPercent; }
            set { customNdsPercent = value; }
        }

        public VatValueSource NdsSource
        {
            get { return ndsSource; }
            set { ndsSource = value; }
        }

        [CanBeNull]
        public Dictionary<Product, decimal> NdsPercentsByDocument
        {
            get { return ndsPercentsByDocument; }
            set { ndsPercentsByDocument = value; }
        }

        public decimal? ThresholdPercent
        {
            get { return thresholdPercent; }
            set { thresholdPercent = value; }
        }

        public bool ByLastShipment
        {
            get { return byLastShipment; }
            set { byLastShipment = value; }
        }

        public bool IncludeNdsInMarkup
        {
            get { return includeNdsInMarkup; }
            set { includeNdsInMarkup = value; }
        }

        public bool ByPriceList
        {
            get { return byPriceList; }
            set { byPriceList = value; }
        }

    }

    [DataClass("PricingStrategy")]
    public partial interface PricingStrategy
    {

    }

    [DataClass("RoundingPricingStrategy")]
    public partial class RoundingPricingStrategy : PricingStrategy
    {
        [NotNull, NotNullField]
        private PricingStrategy baseStrategy;
        [NotNull, NotNullField]
        private RoundRule roundRule;

        protected RoundingPricingStrategy() {}

        public RoundingPricingStrategy(PricingStrategy baseStrategy, RoundRule roundRule)
        {
            this.baseStrategy = baseStrategy;
            this.roundRule = roundRule;
        }
        [NotNull]
        public PricingStrategy BaseStrategy
        {
            get { return baseStrategy; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  baseStrategy = value;
            }
        }

        [NotNull]
        public RoundRule RoundRule
        {
            get { return roundRule; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  roundRule = value;
            }
        }

    }

    [DataClass("VatValueSource")]
    public enum VatValueSource
    {
        ORIGINAL,
        PRODUCT,
        CUSTOM
    }

    [DataClass("AccountingReportColumn")]
    public partial class AccountingReportColumn
    {
        private DateTime? date;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Account, decimal> balance = new Dictionary<Account, decimal>();

        protected AccountingReportColumn() {}

        public AccountingReportColumn(DateTime? date)
        {
            this.date = date;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        [NotNull]
        public Dictionary<Account, decimal> Balance
        {
            get { return balance; }
        }

    }

    [DataClass("BusinessDateSettings")]
    public partial class BusinessDateSettings
    {
        [NotNull, NotNullField]
        private DayTime dayStartTime;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public BusinessDateSettings() {}

        public BusinessDateSettings(DayTime dayStartTime)
        {
            this.dayStartTime = dayStartTime;
        }
        [NotNull]
        public DayTime DayStartTime
        {
            get { return dayStartTime; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  dayStartTime = value;
            }
        }

    }

    [DataClass("DateDetalization")]
    [EnumClass]
    public partial class DateDetalization : LocalizableName<DateDetalization>
    {
        /// <summary> За весь период. </summary>
        public static readonly DateDetalization TOTAL_ONLY = new DateDetalization("TOTAL_ONLY");
        /// <summary> За день. </summary>
        public static readonly DateDetalization DAY = new DateDetalization("DAY");
        /// <summary> За месяц. </summary>
        public static readonly DateDetalization MONTH = new DateDetalization("MONTH");
        /// <summary> За год. </summary>
        public static readonly DateDetalization YEAR = new DateDetalization("YEAR");
        /// <summary> За полмесяца. </summary>
        public static readonly DateDetalization HALF_MONTH = new DateDetalization("HALF_MONTH");
        /// <summary> За квартал. </summary>
        public static readonly DateDetalization QUARTER = new DateDetalization("QUARTER");
        /// <summary> За неделю. </summary>
        public static readonly DateDetalization WEEK = new DateDetalization("WEEK");

        private readonly string __value;
        private readonly string __nameResId;

        private DateDetalization(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DATEDETALIZATION_NAME_" + __value;
        }

        public static DateDetalization Parse(string value)
        {
            switch(value)
            {
                case "TOTAL_ONLY": return TOTAL_ONLY;
                case "DAY": return DAY;
                case "MONTH": return MONTH;
                case "YEAR": return YEAR;
                case "HALF_MONTH": return HALF_MONTH;
                case "QUARTER": return QUARTER;
                case "WEEK": return WEEK;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DateDetalization[] VALUES
        {
            get
            {
                return new []
                {
                    TOTAL_ONLY, 
                    DAY, 
                    MONTH, 
                    YEAR, 
                    HALF_MONTH, 
                    QUARTER, 
                    WEEK
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("Divider")]
    public enum Divider
    {
        TOP,
        BOTTOM,
        NONE
    }

    [DataClass("OlapBoolean")]
    [EnumClass]
    public partial class OlapBoolean : LocalizableName<OlapBoolean>
    {
        /// <summary> Да. </summary>
        public static readonly OlapBoolean TRUE = new OlapBoolean("TRUE");
        /// <summary> Нет. </summary>
        public static readonly OlapBoolean FALSE = new OlapBoolean("FALSE");

        private readonly string __value;
        private readonly string __nameResId;

        private OlapBoolean(string __value)
        {
            this.__value = __value;
            this.__nameResId = "OLAPBOOLEAN_NAME_" + __value;
        }

        public static OlapBoolean Parse(string value)
        {
            switch(value)
            {
                case "TRUE": return TRUE;
                case "FALSE": return FALSE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OlapBoolean[] VALUES
        {
            get
            {
                return new []
                {
                    TRUE, 
                    FALSE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("OperationalDaySettings")]
    public partial class OperationalDaySettings
    {
        private DayTime dayCloseTime;
        private bool displayEmployee;

        protected OperationalDaySettings() {}

        public OperationalDaySettings(DayTime dayCloseTime, bool displayEmployee)
        {
            this.dayCloseTime = dayCloseTime;
            this.displayEmployee = displayEmployee;
        }
        public DayTime DayCloseTime
        {
            get { return dayCloseTime; }
            set { dayCloseTime = value; }
        }

        public bool DisplayEmployee
        {
            get { return displayEmployee; }
            set { displayEmployee = value; }
        }

    }

    [DataClass("OrderDeletionStatus")]
    [EnumClass]
    public partial class OrderDeletionStatus : LocalizableName<OrderDeletionStatus>
    {
        /// <summary> Заказ не удален. </summary>
        public static readonly OrderDeletionStatus NOT_DELETED = new OrderDeletionStatus("NOT_DELETED", false);
        /// <summary> Заказ удален. </summary>
        public static readonly OrderDeletionStatus DELETED = new OrderDeletionStatus("DELETED", true);

        private readonly bool mappedBoolean;
        private readonly string __value;
        private readonly string __nameResId;

        private OrderDeletionStatus(string __value, bool mappedBoolean)
        {
            this.__value = __value;
            this.__nameResId = "ORDERDELETIONSTATUS_NAME_" + __value;
            this.mappedBoolean = mappedBoolean;
        }

        public static OrderDeletionStatus Parse(string value)
        {
            switch(value)
            {
                case "NOT_DELETED": return NOT_DELETED;
                case "DELETED": return DELETED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OrderDeletionStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_DELETED, 
                    DELETED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool MappedBoolean
        {
            get { return mappedBoolean; }
        }

    }

    [DataClass("ReportBand")]
    public partial class ReportBand
    {
        private TextAligment aligment;
        private string name;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ReportColumn> columns = new List<ReportColumn>();
        private bool visible;

        protected ReportBand() {}

        public ReportBand(TextAligment aligment, string name, bool visible)
        {
            this.aligment = aligment;
            this.name = name;
            this.visible = visible;
        }
        public TextAligment Aligment
        {
            get { return aligment; }
            set { aligment = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [NotNull]
        public List<ReportColumn> Columns
        {
            get { return columns; }
        }

        public bool Visible
        {
            get { return visible; }
            set { visible = value; }
        }

    }

    [DataClass("ReportColumn")]
    public partial class ReportColumn : DataSetColumn
    {
        private bool displayable;
        private bool resizable;
        private bool moveable;
        private bool sortable;
        private TextAligment aligment;
        private string code;
        private bool autoWidth;
        private ReportColumnOrder sortOrder;
        private int sortIndex;
        [HasDefaultValue]
        private int groupIndex = -1;
        private bool showHeader;
        [HasDefaultValue]
        private bool showTotalSum = false;
        [HasDefaultValue]
        private bool showGroupSum = false;
        [HasDefaultValue]
        private bool summaryCustom = false;

        protected ReportColumn() {}

        public ReportColumn(Guid id, string name, ColumnType type, bool displayable, bool resizable, bool moveable, bool sortable, TextAligment aligment, string code, bool autoWidth, ReportColumnOrder sortOrder, int sortIndex, bool showHeader)
            : base(id, name, type)
        {
            this.displayable = displayable;
            this.resizable = resizable;
            this.moveable = moveable;
            this.sortable = sortable;
            this.aligment = aligment;
            this.code = code;
            this.autoWidth = autoWidth;
            this.sortOrder = sortOrder;
            this.sortIndex = sortIndex;
            this.showHeader = showHeader;
        }

        public ReportColumn(Guid id)
            : base(id)
        {

        }

        public bool Displayable
        {
            get { return displayable; }
            set { displayable = value; }
        }

        public bool Resizable
        {
            get { return resizable; }
            set { resizable = value; }
        }

        public bool Moveable
        {
            get { return moveable; }
            set { moveable = value; }
        }

        public bool Sortable
        {
            get { return sortable; }
            set { sortable = value; }
        }

        public TextAligment Aligment
        {
            get { return aligment; }
            set { aligment = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public bool AutoWidth
        {
            get { return autoWidth; }
            set { autoWidth = value; }
        }

        public ReportColumnOrder SortOrder
        {
            get { return sortOrder; }
            set { sortOrder = value; }
        }

        public int SortIndex
        {
            get { return sortIndex; }
            set { sortIndex = value; }
        }

        public int GroupIndex
        {
            get { return groupIndex; }
            set { groupIndex = value; }
        }

        public bool ShowHeader
        {
            get { return showHeader; }
            set { showHeader = value; }
        }

        public bool ShowTotalSum
        {
            get { return showTotalSum; }
            set { showTotalSum = value; }
        }

        public bool ShowGroupSum
        {
            get { return showGroupSum; }
            set { showGroupSum = value; }
        }

        public bool SummaryCustom
        {
            get { return summaryCustom; }
            set { summaryCustom = value; }
        }

    }

    [DataClass("ReportColumnOrder")]
    public enum ReportColumnOrder
    {
        DEFAULT,
        ASC,
        DESC
    }

    [DataClass("ReportRow")]
    public partial class ReportRow : DataSetRow
    {
        private int level;
        private int aligment;
        private ReportRowType type;
        private bool weekSeparator;
        private bool monthSeparator;
        private RowAnchor anchor;
        private Divider divider;

        protected ReportRow() {}

        public ReportRow(Guid id, int level, int aligment, ReportRowType type, bool weekSeparator, bool monthSeparator, RowAnchor anchor, Divider divider)
            : base(id)
        {
            this.level = level;
            this.aligment = aligment;
            this.type = type;
            this.weekSeparator = weekSeparator;
            this.monthSeparator = monthSeparator;
            this.anchor = anchor;
            this.divider = divider;
        }

        public ReportRow(Guid id)
            : base(id)
        {

        }

        public int Level
        {
            get { return level; }
            set { level = value; }
        }

        public int Aligment
        {
            get { return aligment; }
            set { aligment = value; }
        }

        public ReportRowType Type
        {
            get { return type; }
            set { type = value; }
        }

        public bool WeekSeparator
        {
            get { return weekSeparator; }
            set { weekSeparator = value; }
        }

        public bool MonthSeparator
        {
            get { return monthSeparator; }
            set { monthSeparator = value; }
        }

        public RowAnchor Anchor
        {
            get { return anchor; }
            set { anchor = value; }
        }

        public Divider Divider
        {
            get { return divider; }
            set { divider = value; }
        }

    }

    [DataClass("ReportRowType")]
    public enum ReportRowType
    {
        LEAF,
        GROUP_ROOT,
        GROUP_TOTAL,
        EMPTY
    }

    [DataClass("RestoReport")]
    public partial class RestoReport : DataSet
    {
        private DateTime? printDate;
        private string companyName;
        private string reportName;
        private string reportCode;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ReportBand> bands = new List<ReportBand>();
        private bool autoWidth;
        private bool allowSort;

        protected RestoReport() {}

        public RestoReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort)
            : base(id)
        {
            this.printDate = printDate;
            this.companyName = companyName;
            this.reportName = reportName;
            this.reportCode = reportCode;
            this.autoWidth = autoWidth;
            this.allowSort = allowSort;
        }

        public RestoReport(Guid id)
            : base(id)
        {

        }

        public DateTime? PrintDate
        {
            get { return printDate; }
            set { printDate = value; }
        }

        public string CompanyName
        {
            get { return companyName; }
            set { companyName = value; }
        }

        public string ReportName
        {
            get { return reportName; }
            set { reportName = value; }
        }

        public string ReportCode
        {
            get { return reportCode; }
            set { reportCode = value; }
        }

        [NotNull]
        public List<ReportBand> Bands
        {
            get { return bands; }
        }

        public bool AutoWidth
        {
            get { return autoWidth; }
            set { autoWidth = value; }
        }

        public bool AllowSort
        {
            get { return allowSort; }
            set { allowSort = value; }
        }

    }

    [DataClass("RowAnchor")]
    public enum RowAnchor
    {
        TOP,
        BOTTOM,
        NONE
    }

    [DataClass("StoreDataDirection")]
    [EnumClass]
    public partial class StoreDataDirection : LocalizableName<StoreDataDirection>
    {
        /// <summary> Приходы и расходы со склада. </summary>
        public static readonly StoreDataDirection INOUT = new StoreDataDirection("INOUT");
        /// <summary> Только приходы на склад. </summary>
        public static readonly StoreDataDirection IN = new StoreDataDirection("IN");
        /// <summary> Только расходы со склада. </summary>
        public static readonly StoreDataDirection OUT = new StoreDataDirection("OUT");

        private readonly string __value;
        private readonly string __nameResId;

        private StoreDataDirection(string __value)
        {
            this.__value = __value;
            this.__nameResId = "STOREDATADIRECTION_NAME_" + __value;
        }

        public static StoreDataDirection Parse(string value)
        {
            switch(value)
            {
                case "INOUT": return INOUT;
                case "IN": return IN;
                case "OUT": return OUT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static StoreDataDirection[] VALUES
        {
            get
            {
                return new []
                {
                    INOUT, 
                    IN, 
                    OUT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("StoreProductPair")]
    public partial class StoreProductPair : ProductAwareKey
    {
        [NotNull, NotNullField]
        private Store store;
        [NotNull, NotNullField]
        private Product product;

        protected StoreProductPair() {}

        public StoreProductPair(Store store, Product product)
        {
            this.store = store;
            this.product = product;
        }
        [NotNull]
        public Store Store
        {
            get { return store; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  store = value;
            }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

    }

    [DataClass("TextAligment")]
    public enum TextAligment
    {
        LEFT,
        CENTER,
        RIGHT
    }

    [DataClass("TreeReport")]
    public partial class TreeReport : RestoReport
    {
        private ReportColumn idColumn;
        private ReportColumn nameColumn;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ReportColumn> dataColumns = new List<ReportColumn>();

        protected TreeReport() {}

        public TreeReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, ReportColumn idColumn, ReportColumn nameColumn)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.idColumn = idColumn;
            this.nameColumn = nameColumn;
        }

        public TreeReport(Guid id)
            : base(id)
        {

        }

        public ReportColumn IdColumn
        {
            get { return idColumn; }
            set { idColumn = value; }
        }

        public ReportColumn NameColumn
        {
            get { return nameColumn; }
            set { nameColumn = value; }
        }

        [NotNull]
        public List<ReportColumn> DataColumns
        {
            get { return dataColumns; }
        }

    }

    [DataClass("AlcoholIncomeReport")]
    public partial class AlcoholIncomeReport
    {
        private ICollection<Store> stores;
        private ICollection<AlcoholIncomeReportItem> items;


        public ICollection<Store> Stores
        {
            get { return stores; }
            set { stores = value; }
        }

        public ICollection<AlcoholIncomeReportItem> Items
        {
            get { return items; }
            set { items = value; }
        }

    }

    [DataClass("AlcoholIncomeReportItem")]
    public partial class AlcoholIncomeReportItem
    {
        private AlcoholClass alcoholClass;
        private User producer;
        private User supplier;
        private DateTime? date;
        private string transportInvoiceNumber;
        private string customsDeclarationNumber;
        private Store store;
        private ICollection<AlcoholTransactionInfoItem> transactionInfoItems;

        protected AlcoholIncomeReportItem() {}

        public AlcoholIncomeReportItem(AlcoholClass alcoholClass, User producer, User supplier, DateTime? date, string transportInvoiceNumber, string customsDeclarationNumber, Store store)
        {
            this.alcoholClass = alcoholClass;
            this.producer = producer;
            this.supplier = supplier;
            this.date = date;
            this.transportInvoiceNumber = transportInvoiceNumber;
            this.customsDeclarationNumber = customsDeclarationNumber;
            this.store = store;
        }
        public AlcoholClass AlcoholClass
        {
            get { return alcoholClass; }
            set { alcoholClass = value; }
        }

        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string TransportInvoiceNumber
        {
            get { return transportInvoiceNumber; }
            set { transportInvoiceNumber = value; }
        }

        public string CustomsDeclarationNumber
        {
            get { return customsDeclarationNumber; }
            set { customsDeclarationNumber = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        [CanBeNull]
        public ICollection<AlcoholTransactionInfoItem> TransactionInfoItems
        {
            get { return transactionInfoItems; }
            set { transactionInfoItems = value; }
        }

    }

    [DataClass("AlcoholReport")]
    public partial class AlcoholReport
    {
        private AlcoholTurnoverReport turnoverReport;
        private AlcoholIncomeReport incomeReport;
        private AlcoholReturnReport returnReport;

        public AlcoholReport() {}

        public AlcoholReport(AlcoholTurnoverReport turnoverReport, AlcoholIncomeReport incomeReport, AlcoholReturnReport returnReport)
        {
            this.turnoverReport = turnoverReport;
            this.incomeReport = incomeReport;
            this.returnReport = returnReport;
        }
        public AlcoholTurnoverReport TurnoverReport
        {
            get { return turnoverReport; }
            set { turnoverReport = value; }
        }

        public AlcoholIncomeReport IncomeReport
        {
            get { return incomeReport; }
            set { incomeReport = value; }
        }

        public AlcoholReturnReport ReturnReport
        {
            get { return returnReport; }
            set { returnReport = value; }
        }

    }

    [DataClass("AlcoholReturnReport")]
    public partial class AlcoholReturnReport
    {
        private ICollection<Store> stores;
        private ICollection<AlcoholReturnReportItem> items;


        public ICollection<Store> Stores
        {
            get { return stores; }
            set { stores = value; }
        }

        public ICollection<AlcoholReturnReportItem> Items
        {
            get { return items; }
            set { items = value; }
        }

    }

    [DataClass("AlcoholReturnReportItem")]
    public partial class AlcoholReturnReportItem
    {
        private AlcoholClass alcoholClass;
        private User producer;
        private User supplier;
        private DateTime returnDate;
        private string transportInvoiceNumber;
        private string customsDeclarationNumber;
        private Store store;
        private ICollection<AlcoholTransactionInfoItem> transactionInfoItems;

        protected AlcoholReturnReportItem() {}

        public AlcoholReturnReportItem(AlcoholClass alcoholClass, User producer, User supplier, DateTime returnDate, string transportInvoiceNumber, string customsDeclarationNumber, Store store)
        {
            this.alcoholClass = alcoholClass;
            this.producer = producer;
            this.supplier = supplier;
            this.returnDate = returnDate;
            this.transportInvoiceNumber = transportInvoiceNumber;
            this.customsDeclarationNumber = customsDeclarationNumber;
            this.store = store;
        }

        public AlcoholReturnReportItem(DateTime returnDate)
        {
            this.returnDate = returnDate;
        }

        public AlcoholClass AlcoholClass
        {
            get { return alcoholClass; }
            set { alcoholClass = value; }
        }

        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public DateTime ReturnDate
        {
            get { return returnDate; }
            set { returnDate = value; }
        }

        public string TransportInvoiceNumber
        {
            get { return transportInvoiceNumber; }
            set { transportInvoiceNumber = value; }
        }

        public string CustomsDeclarationNumber
        {
            get { return customsDeclarationNumber; }
            set { customsDeclarationNumber = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public ICollection<AlcoholTransactionInfoItem> TransactionInfoItems
        {
            get { return transactionInfoItems; }
            set { transactionInfoItems = value; }
        }

    }

    [DataClass("AlcoholSalesReport")]
    public partial class AlcoholSalesReport
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private HashSet<Store> stores;
        private HashSet<Guid> storeIds;
        private HashSet<Guid> saleDocumentIds;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AlcoholSalesReportItem> items = new List<AlcoholSalesReportItem>();

        protected AlcoholSalesReport() {}

        public AlcoholSalesReport(DateTime? dateFrom, DateTime? dateTo)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }
        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public HashSet<Store> Stores
        {
            get { return stores; }
            set { stores = value; }
        }

        public HashSet<Guid> StoreIds
        {
            get { return storeIds; }
            set { storeIds = value; }
        }

        public HashSet<Guid> SaleDocumentIds
        {
            get { return saleDocumentIds; }
            set { saleDocumentIds = value; }
        }

        [NotNull]
        public List<AlcoholSalesReportItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("AlcoholSalesReportItem")]
    public partial class AlcoholSalesReportItem
    {
        private DateTime? date;
        private Product product;
        private decimal? amount;

        protected AlcoholSalesReportItem() {}

        public AlcoholSalesReportItem(DateTime? date, Product product, decimal? amount)
        {
            this.date = date;
            this.product = product;
            this.amount = amount;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("AlcoholTransactionInfoItem")]
    public partial class AlcoholTransactionInfoItem
    {
        private decimal? debitAmount;
        private decimal? creditAmount;
        private Product product;
        private User supplier;
        private TransactionType transactionType;
        private User producer;
        private DateTime? date;

        protected AlcoholTransactionInfoItem() {}

        public AlcoholTransactionInfoItem(decimal? debitAmount, decimal? creditAmount, Product product, User supplier, TransactionType transactionType, User producer, DateTime? date)
        {
            this.debitAmount = debitAmount;
            this.creditAmount = creditAmount;
            this.product = product;
            this.supplier = supplier;
            this.transactionType = transactionType;
            this.producer = producer;
            this.date = date;
        }
        public decimal? DebitAmount
        {
            get { return debitAmount; }
            set { debitAmount = value; }
        }

        public decimal? CreditAmount
        {
            get { return creditAmount; }
            set { creditAmount = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public TransactionType TransactionType
        {
            get { return transactionType; }
            set { transactionType = value; }
        }

        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

    }

    [DataClass("AlcoholTransactionJournalItem")]
    public partial class AlcoholTransactionJournalItem : AlcoholTransactionInfoItem
    {
        private User invoiceSupplier;
        private Guid? containerId;
        private Guid? documentId;
        private Account account;
        private string transportInvoiceNumber;

        protected AlcoholTransactionJournalItem() {}

        public AlcoholTransactionJournalItem(decimal? debitAmount, decimal? creditAmount, Product product, User supplier, TransactionType transactionType, User producer, DateTime? date, string transportInvoiceNumber)
            : base(debitAmount, creditAmount, product, supplier, transactionType, producer, date)
        {
            this.transportInvoiceNumber = transportInvoiceNumber;
        }
        [CanBeNull]
        public User InvoiceSupplier
        {
            get { return invoiceSupplier; }
            set { invoiceSupplier = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        [CanBeNull]
        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public string TransportInvoiceNumber
        {
            get { return transportInvoiceNumber; }
            set { transportInvoiceNumber = value; }
        }

    }

    [DataClass("AlcoholTurnoverReport")]
    public partial class AlcoholTurnoverReport
    {
        private ICollection<Store> stores;
        private ICollection<AlcoholTurnoverReportItem> items;


        public ICollection<Store> Stores
        {
            get { return stores; }
            set { stores = value; }
        }

        public ICollection<AlcoholTurnoverReportItem> Items
        {
            get { return items; }
            set { items = value; }
        }

    }

    [DataClass("AlcoholTurnoverReportItem")]
    public partial class AlcoholTurnoverReportItem
    {
        private Product product;
        private User producer;
        private Store store;
        [HasDefaultValue]
        private decimal initialBalance = 0;
        private ICollection<AlcoholTransactionInfoItem> transactionInfoItems;

        protected AlcoholTurnoverReportItem() {}

        public AlcoholTurnoverReportItem(Product product, User producer, Store store, decimal initialBalance)
        {
            this.product = product;
            this.producer = producer;
            this.store = store;
            this.initialBalance = initialBalance;
        }

        public AlcoholTurnoverReportItem(decimal initialBalance)
        {
            this.initialBalance = initialBalance;
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public decimal InitialBalance
        {
            get { return initialBalance; }
            set { initialBalance = value; }
        }

        [CanBeNull]
        public ICollection<AlcoholTransactionInfoItem> TransactionInfoItems
        {
            get { return transactionInfoItems; }
            set { transactionInfoItems = value; }
        }

    }

    [DataClass("BalanceDataColumn")]
    public partial class BalanceDataColumn : ReportColumn
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;

        protected BalanceDataColumn() {}

        public BalanceDataColumn(Guid id, string name, ColumnType type, bool displayable, bool resizable, bool moveable, bool sortable, TextAligment aligment, string code, bool autoWidth, ReportColumnOrder sortOrder, int sortIndex, bool showHeader, DateTime? dateFrom, DateTime? dateTo)
            : base(id, name, type, displayable, resizable, moveable, sortable, aligment, code, autoWidth, sortOrder, sortIndex, showHeader)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }

        public BalanceDataColumn(Guid id)
            : base(id)
        {

        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [DataClass("BalanceReport")]
    public partial class BalanceReport : TreeReport
    {
        private DateTime? dateAt;
        private Guid? netIncomeRowId;

        protected BalanceReport() {}

        public BalanceReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, ReportColumn idColumn, ReportColumn nameColumn, DateTime? dateAt, Guid? netIncomeRowId)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort, idColumn, nameColumn)
        {
            this.dateAt = dateAt;
            this.netIncomeRowId = netIncomeRowId;
        }

        public BalanceReport(Guid id)
            : base(id)
        {

        }

        public DateTime? DateAt
        {
            get { return dateAt; }
            set { dateAt = value; }
        }

        public Guid? NetIncomeRowId
        {
            get { return netIncomeRowId; }
            set { netIncomeRowId = value; }
        }

    }

    [DataClass("BudgetPlan")]
    public partial class BudgetPlan : CachedEntity
    {
        private DateTime startDate;
        [NotNull, NotNullField]
        private BudgetType budgetType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";
        private User userModified;
        private DateTime? dateModified;
        private User userCreated;
        private DateTime? dateCreated;
        private DocumentStatus status;
        private string comment;

        protected BudgetPlan() {}

        public BudgetPlan(Guid id, DateTime startDate, BudgetType budgetType, string documentNumber, DocumentStatus status)
            : base(id)
        {
            this.startDate = startDate;
            this.budgetType = budgetType;
            this.documentNumber = documentNumber;
            this.status = status;
        }

        public BudgetPlan(Guid id, DateTime startDate, BudgetType budgetType, string documentNumber)
            : base(id)
        {
            this.startDate = startDate;
            this.budgetType = budgetType;
            this.documentNumber = documentNumber;
        }

        public DateTime StartDate
        {
            get { return startDate; }
            set { startDate = value; }
        }

        [NotNull]
        public BudgetType BudgetType
        {
            get { return budgetType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  budgetType = value;
            }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

        [CanBeNull]
        public User UserModified
        {
            get { return userModified; }
            set { userModified = value; }
        }

        public DateTime? DateModified
        {
            get { return dateModified; }
            set { dateModified = value; }
        }

        [CanBeNull]
        public User UserCreated
        {
            get { return userCreated; }
            set { userCreated = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public DocumentStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("BudgetPlanAccountHierarchy")]
    public partial class BudgetPlanAccountHierarchy
    {
        private Dictionary<BudgetPlanAccountHierarchyNode, List<BudgetPlanAccountHierarchyNode>> result;
        private BudgetPlanAccountHierarchyNode rootNode;

        protected BudgetPlanAccountHierarchy() {}

        public BudgetPlanAccountHierarchy(BudgetPlanAccountHierarchyNode rootNode)
        {
            this.rootNode = rootNode;
        }
        public Dictionary<BudgetPlanAccountHierarchyNode, List<BudgetPlanAccountHierarchyNode>> Result
        {
            get { return result; }
            set { result = value; }
        }

        public BudgetPlanAccountHierarchyNode RootNode
        {
            get { return rootNode; }
            set { rootNode = value; }
        }

    }

    [DataClass("BudgetPlanAccountHierarchyNode")]
    public partial class BudgetPlanAccountHierarchyNode
    {
        private string name;
        private Guid? budgetPlanAccountId;
        private BudgetPlanNodeType type;
        private bool negate;

        protected BudgetPlanAccountHierarchyNode() {}

        public BudgetPlanAccountHierarchyNode(string name, Guid? budgetPlanAccountId, BudgetPlanNodeType type, bool negate)
        {
            this.name = name;
            this.budgetPlanAccountId = budgetPlanAccountId;
            this.type = type;
            this.negate = negate;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Guid? BudgetPlanAccountId
        {
            get { return budgetPlanAccountId; }
            set { budgetPlanAccountId = value; }
        }

        public BudgetPlanNodeType Type
        {
            get { return type; }
            set { type = value; }
        }

        public bool Negate
        {
            get { return negate; }
            set { negate = value; }
        }

    }

    [DataClass("BudgetPlanDocumentItemListRecord")]
    public partial class BudgetPlanDocumentItemListRecord
    {
        private Guid? id;
        private Guid? budgetPlanId;
        private ByValue<BudgetPlanItemAccount> counterAccount;
        private DepartmentEntity department;
        private Conception conception;
        private decimal? planValue;
        private decimal? factValue;
        private decimal? factValueLastYear;
        private int periodInBudget;
        private BudgetPlanItemValueType valueType;

        public BudgetPlanDocumentItemListRecord() {}

        public BudgetPlanDocumentItemListRecord(Guid? id, Guid? budgetPlanId, ByValue<BudgetPlanItemAccount> counterAccount, DepartmentEntity department, Conception conception, decimal? planValue, decimal? factValue, decimal? factValueLastYear, int periodInBudget, BudgetPlanItemValueType valueType)
        {
            this.id = id;
            this.budgetPlanId = budgetPlanId;
            this.counterAccount = counterAccount;
            this.department = department;
            this.conception = conception;
            this.planValue = planValue;
            this.factValue = factValue;
            this.factValueLastYear = factValueLastYear;
            this.periodInBudget = periodInBudget;
            this.valueType = valueType;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public Guid? BudgetPlanId
        {
            get { return budgetPlanId; }
            set { budgetPlanId = value; }
        }

        public ByValue<BudgetPlanItemAccount> CounterAccount
        {
            get { return counterAccount; }
            set { counterAccount = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public decimal? PlanValue
        {
            get { return planValue; }
            set { planValue = value; }
        }

        public decimal? FactValue
        {
            get { return factValue; }
            set { factValue = value; }
        }

        public decimal? FactValueLastYear
        {
            get { return factValueLastYear; }
            set { factValueLastYear = value; }
        }

        public int PeriodInBudget
        {
            get { return periodInBudget; }
            set { periodInBudget = value; }
        }

        public BudgetPlanItemValueType ValueType
        {
            get { return valueType; }
            set { valueType = value; }
        }

    }

    [DataClass("BudgetPlanDocumentListRecord")]
    public partial class BudgetPlanDocumentListRecord
    {
        private Guid? budgetId;
        private BudgetType budgetType;
        private string number;
        private DocumentStatus documentStatus;
        private DateTime? dateCreated;
        private DateTime? dateModified;
        private User userCreated;
        private User userModified;
        private string comment;
        private List<BudgetPlanDocumentItemListRecord> items;
        private DateTime? startDate;

        public BudgetPlanDocumentListRecord() {}

        public BudgetPlanDocumentListRecord(Guid? budgetId, BudgetType budgetType, string number, DocumentStatus documentStatus, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, DateTime? startDate)
        {
            this.budgetId = budgetId;
            this.budgetType = budgetType;
            this.number = number;
            this.documentStatus = documentStatus;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.userCreated = userCreated;
            this.userModified = userModified;
            this.comment = comment;
            this.startDate = startDate;
        }
        public Guid? BudgetId
        {
            get { return budgetId; }
            set { budgetId = value; }
        }

        public BudgetType BudgetType
        {
            get { return budgetType; }
            set { budgetType = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public DocumentStatus DocumentStatus
        {
            get { return documentStatus; }
            set { documentStatus = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public DateTime? DateModified
        {
            get { return dateModified; }
            set { dateModified = value; }
        }

        public User UserCreated
        {
            get { return userCreated; }
            set { userCreated = value; }
        }

        public User UserModified
        {
            get { return userModified; }
            set { userModified = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public List<BudgetPlanDocumentItemListRecord> Items
        {
            get { return items; }
            set { items = value; }
        }

        public DateTime? StartDate
        {
            get { return startDate; }
            set { startDate = value; }
        }

    }

    [DataClass("BudgetPlanItem")]
    public partial class BudgetPlanItem : CachedEntity
    {
        private Guid? budgetPlanId;
        private BudgetPlanItemAccount counterAccount;
        private DepartmentEntity department;
        private Conception conception;
        private decimal? planValue;
        private decimal? factValue;
        private decimal? factValueLastYear;
        private int periodInBudget;
        private BudgetPlanItemValueType valueType;

        protected BudgetPlanItem() {}

        public BudgetPlanItem(Guid id, Guid? budgetPlanId, BudgetPlanItemAccount counterAccount, DepartmentEntity department, Conception conception, decimal? planValue, decimal? factValue, decimal? factValueLastYear, int periodInBudget, BudgetPlanItemValueType valueType)
            : base(id)
        {
            this.budgetPlanId = budgetPlanId;
            this.counterAccount = counterAccount;
            this.department = department;
            this.conception = conception;
            this.planValue = planValue;
            this.factValue = factValue;
            this.factValueLastYear = factValueLastYear;
            this.periodInBudget = periodInBudget;
            this.valueType = valueType;
        }

        public BudgetPlanItem(Guid id)
            : base(id)
        {

        }

        public Guid? BudgetPlanId
        {
            get { return budgetPlanId; }
            set { budgetPlanId = value; }
        }

        public BudgetPlanItemAccount CounterAccount
        {
            get { return counterAccount; }
            set { counterAccount = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public decimal? PlanValue
        {
            get { return planValue; }
            set { planValue = value; }
        }

        public decimal? FactValue
        {
            get { return factValue; }
            set { factValue = value; }
        }

        public decimal? FactValueLastYear
        {
            get { return factValueLastYear; }
            set { factValueLastYear = value; }
        }

        public int PeriodInBudget
        {
            get { return periodInBudget; }
            set { periodInBudget = value; }
        }

        public BudgetPlanItemValueType ValueType
        {
            get { return valueType; }
            set { valueType = value; }
        }

    }

    [RootEntity]
    [DataClass("BudgetPlanItemAccount")]
    public partial class BudgetPlanItemAccount : LocalizableNamePersistedEntity
    {
        private Account account;
        private Guid? syntheticId;
        [HasDefaultValue]
        private bool useInBudget = true;
        private BudgetPlanNodeType itemType;

        protected BudgetPlanItemAccount() {}

        public BudgetPlanItemAccount(Guid id, LocalizableValue name, Account account, Guid? syntheticId, BudgetPlanNodeType itemType)
            : base(id, name)
        {
            this.account = account;
            this.syntheticId = syntheticId;
            this.itemType = itemType;
        }

        public BudgetPlanItemAccount(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public Guid? SyntheticId
        {
            get { return syntheticId; }
            set { syntheticId = value; }
        }

        public bool UseInBudget
        {
            get { return useInBudget; }
            set { useInBudget = value; }
        }

        public BudgetPlanNodeType ItemType
        {
            get { return itemType; }
            set { itemType = value; }
        }

    }

    [DataClass("BudgetPlanItemValueType")]
    public enum BudgetPlanItemValueType
    {
        ABSOLUTE,
        PERCENT,
        AUTOMATIC
    }

    [DataClass("BudgetPlanNodeType")]
    public enum BudgetPlanNodeType
    {
        GROUP,
        ACCOUNT,
        MONTHLY_INCOME,
        MONTHLY_CHEQUES_NUM,
        MONTHLY_AVERAGE_CHEQUE
    }

    [DataClass("BudgetType")]
    [EnumClass]
    public partial class BudgetType : LocalizableName<BudgetType>
    {
        /// <summary> Годовой. </summary>
        public static readonly BudgetType PNL = new BudgetType("PNL");
        /// <summary> Месячный. </summary>
        public static readonly BudgetType MON = new BudgetType("MON");

        private readonly string __value;
        private readonly string __nameResId;

        private BudgetType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "BUDGETTYPE_NAME_" + __value;
        }

        public static BudgetType Parse(string value)
        {
            switch(value)
            {
                case "PNL": return PNL;
                case "MON": return MON;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static BudgetType[] VALUES
        {
            get
            {
                return new []
                {
                    PNL, 
                    MON
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ChequeReport")]
    public partial class ChequeReport : RestoReport
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Group> groups = new HashSet<Group>();
        private ChequeReportDetalizationType detalizationType;
        private ChequeReportOrderType type;
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private DateFormatSettings dateSettings;
        private ReportColumn columnCashRegisterNumber;
        private ReportColumn columnSessionNumber;
        private ReportColumn columnDetalization;
        private ReportColumn columnSalesSum;
        private ReportColumn columnOrderCount;
        private ReportColumn columnGuestsCount;
        private ReportColumn columnAvgCheque;
        private ReportColumn columnAvgOrder;
        private ReportColumn columnAvgGuests;

        protected ChequeReport() {}

        public ChequeReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, ChequeReportDetalizationType detalizationType, ChequeReportOrderType type, DateTime? dateFrom, DateTime? dateTo, DateFormatSettings dateSettings, ReportColumn columnCashRegisterNumber, ReportColumn columnSessionNumber, ReportColumn columnDetalization, ReportColumn columnSalesSum, ReportColumn columnOrderCount, ReportColumn columnGuestsCount, ReportColumn columnAvgCheque, ReportColumn columnAvgOrder, ReportColumn columnAvgGuests)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.detalizationType = detalizationType;
            this.type = type;
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.dateSettings = dateSettings;
            this.columnCashRegisterNumber = columnCashRegisterNumber;
            this.columnSessionNumber = columnSessionNumber;
            this.columnDetalization = columnDetalization;
            this.columnSalesSum = columnSalesSum;
            this.columnOrderCount = columnOrderCount;
            this.columnGuestsCount = columnGuestsCount;
            this.columnAvgCheque = columnAvgCheque;
            this.columnAvgOrder = columnAvgOrder;
            this.columnAvgGuests = columnAvgGuests;
        }

        public ChequeReport(Guid id)
            : base(id)
        {

        }

        [NotNull]
        public HashSet<Group> Groups
        {
            get { return groups; }
        }

        public ChequeReportDetalizationType DetalizationType
        {
            get { return detalizationType; }
            set { detalizationType = value; }
        }

        public ChequeReportOrderType Type
        {
            get { return type; }
            set { type = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public DateFormatSettings DateSettings
        {
            get { return dateSettings; }
            set { dateSettings = value; }
        }

        public ReportColumn ColumnCashRegisterNumber
        {
            get { return columnCashRegisterNumber; }
            set { columnCashRegisterNumber = value; }
        }

        public ReportColumn ColumnSessionNumber
        {
            get { return columnSessionNumber; }
            set { columnSessionNumber = value; }
        }

        public ReportColumn ColumnDetalization
        {
            get { return columnDetalization; }
            set { columnDetalization = value; }
        }

        public ReportColumn ColumnSalesSum
        {
            get { return columnSalesSum; }
            set { columnSalesSum = value; }
        }

        public ReportColumn ColumnOrderCount
        {
            get { return columnOrderCount; }
            set { columnOrderCount = value; }
        }

        public ReportColumn ColumnGuestsCount
        {
            get { return columnGuestsCount; }
            set { columnGuestsCount = value; }
        }

        public ReportColumn ColumnAvgCheque
        {
            get { return columnAvgCheque; }
            set { columnAvgCheque = value; }
        }

        public ReportColumn ColumnAvgOrder
        {
            get { return columnAvgOrder; }
            set { columnAvgOrder = value; }
        }

        public ReportColumn ColumnAvgGuests
        {
            get { return columnAvgGuests; }
            set { columnAvgGuests = value; }
        }

    }

    [DataClass("ChequeReportDateDetalization")]
    public partial class ChequeReportDateDetalization : ChequeReportDetalizationType
    {
        private DateDetalization dateDetalization;

        protected ChequeReportDateDetalization() {}

        public ChequeReportDateDetalization(DateDetalization dateDetalization)
        {
            this.dateDetalization = dateDetalization;
        }
        public DateDetalization DateDetalization
        {
            get { return dateDetalization; }
            set { dateDetalization = value; }
        }

    }

    [DataClass("ChequeReportDetalizationType")]
    public partial interface ChequeReportDetalizationType
    {

    }

    [DataClass("ChequeReportOrderType")]
    public enum ChequeReportOrderType
    {
        BANQUET,
        PLAIN,
        BOTH
    }

    [DataClass("ChequeReportSessionsDetalization")]
    public partial class ChequeReportSessionsDetalization : ChequeReportDetalizationType
    {


    }

    [DataClass("CounteragentReport")]
    public partial class CounteragentReport : RestoReport
    {
        private User counteragent;
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private Account account;
        private ReportColumn dateColumn;
        private ReportColumn operationTypeColumn;
        private ReportColumn sumColumn;
        private ReportColumn restColumn;
        private ReportColumn numberColumn;

        protected CounteragentReport() {}

        public CounteragentReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, User counteragent, DateTime? dateFrom, DateTime? dateTo, Account account, ReportColumn dateColumn, ReportColumn operationTypeColumn, ReportColumn sumColumn, ReportColumn restColumn, ReportColumn numberColumn)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.counteragent = counteragent;
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.account = account;
            this.dateColumn = dateColumn;
            this.operationTypeColumn = operationTypeColumn;
            this.sumColumn = sumColumn;
            this.restColumn = restColumn;
            this.numberColumn = numberColumn;
        }

        public CounteragentReport(Guid id)
            : base(id)
        {

        }

        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public ReportColumn DateColumn
        {
            get { return dateColumn; }
            set { dateColumn = value; }
        }

        public ReportColumn OperationTypeColumn
        {
            get { return operationTypeColumn; }
            set { operationTypeColumn = value; }
        }

        public ReportColumn SumColumn
        {
            get { return sumColumn; }
            set { sumColumn = value; }
        }

        public ReportColumn RestColumn
        {
            get { return restColumn; }
            set { restColumn = value; }
        }

        public ReportColumn NumberColumn
        {
            get { return numberColumn; }
            set { numberColumn = value; }
        }

    }

    [DataClass("CounteragentSummaryReport")]
    public partial class CounteragentSummaryReport : RestoReport
    {
        private CounteragentType counteragentType;
        private DateTime? dateAt;
        private HashSet<Role> roles;
        private bool groupByRole;
        private ReportColumn columnName;
        private ReportColumn columnUserId;
        private ReportColumn columnTotal;
        private List<DepartmentEntity> departments;

        protected CounteragentSummaryReport() {}

        public CounteragentSummaryReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, CounteragentType counteragentType, DateTime? dateAt, bool groupByRole, ReportColumn columnName, ReportColumn columnUserId, ReportColumn columnTotal)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.counteragentType = counteragentType;
            this.dateAt = dateAt;
            this.groupByRole = groupByRole;
            this.columnName = columnName;
            this.columnUserId = columnUserId;
            this.columnTotal = columnTotal;
        }

        public CounteragentSummaryReport(Guid id)
            : base(id)
        {

        }

        public CounteragentType CounteragentType
        {
            get { return counteragentType; }
            set { counteragentType = value; }
        }

        public DateTime? DateAt
        {
            get { return dateAt; }
            set { dateAt = value; }
        }

        public HashSet<Role> Roles
        {
            get { return roles; }
            set { roles = value; }
        }

        public bool GroupByRole
        {
            get { return groupByRole; }
            set { groupByRole = value; }
        }

        public ReportColumn ColumnName
        {
            get { return columnName; }
            set { columnName = value; }
        }

        public ReportColumn ColumnUserId
        {
            get { return columnUserId; }
            set { columnUserId = value; }
        }

        public ReportColumn ColumnTotal
        {
            get { return columnTotal; }
            set { columnTotal = value; }
        }

        public List<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

    }

    [DataClass("CounteragentSummaryReportColumn")]
    public partial class CounteragentSummaryReportColumn : ReportColumn
    {
        private Account account;

        protected CounteragentSummaryReportColumn() {}

        public CounteragentSummaryReportColumn(Guid id, string name, ColumnType type, bool displayable, bool resizable, bool moveable, bool sortable, TextAligment aligment, string code, bool autoWidth, ReportColumnOrder sortOrder, int sortIndex, bool showHeader, Account account)
            : base(id, name, type, displayable, resizable, moveable, sortable, aligment, code, autoWidth, sortOrder, sortIndex, showHeader)
        {
            this.account = account;
        }

        public CounteragentSummaryReportColumn(Guid id)
            : base(id)
        {

        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

    }

    [DataClass("CounteragentSummaryReportRow")]
    public partial class CounteragentSummaryReportRow : ReportRow
    {
        private bool isTotal;

        protected CounteragentSummaryReportRow() {}

        public CounteragentSummaryReportRow(Guid id, int level, int aligment, ReportRowType type, bool weekSeparator, bool monthSeparator, RowAnchor anchor, Divider divider, bool isTotal)
            : base(id, level, aligment, type, weekSeparator, monthSeparator, anchor, divider)
        {
            this.isTotal = isTotal;
        }

        public CounteragentSummaryReportRow(Guid id)
            : base(id)
        {

        }

        public bool IsTotal
        {
            get { return isTotal; }
            set { isTotal = value; }
        }

    }

    [RootEntity]
    [DataClass("Export1CMapping")]
    public partial class Export1CMapping : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Export1COperationType, Export1COperationMapping> mapping = new Dictionary<Export1COperationType, Export1COperationMapping>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Export1COperationType> includedOperations = new HashSet<Export1COperationType>();

        protected Export1CMapping() {}

        public Export1CMapping(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<Export1COperationType, Export1COperationMapping> Mapping
        {
            get { return mapping; }
        }

        [NotNull]
        public HashSet<Export1COperationType> IncludedOperations
        {
            get { return includedOperations; }
        }

    }

    [DataClass("Export1COperationMapping")]
    public partial class Export1COperationMapping
    {
        private string accountDebit;
        private string accountCredit;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Export1COperationMapping() {}

        public Export1COperationMapping(string accountDebit, string accountCredit)
        {
            this.accountDebit = accountDebit;
            this.accountCredit = accountCredit;
        }
        public string AccountDebit
        {
            get { return accountDebit; }
            set { accountDebit = value; }
        }

        public string AccountCredit
        {
            get { return accountCredit; }
            set { accountCredit = value; }
        }

    }

    [DataClass("Export1COperationType")]
    [EnumClass]
    public partial class Export1COperationType : LocalizableName<Export1COperationType>
    {
        /// <summary> Поступление товаров. </summary>
        public static readonly Export1COperationType INCOMING_INVOICE_PRODUCTS = new Export1COperationType("INCOMING_INVOICE_PRODUCTS", DocumentType.INCOMING_INVOICE);
        /// <summary> Учет НДС от стоимости поступивших товаров. </summary>
        public static readonly Export1COperationType INCOMING_INVOICE_NDS = new Export1COperationType("INCOMING_INVOICE_NDS", DocumentType.INCOMING_INVOICE);
        /// <summary> Перемещение товаров. </summary>
        public static readonly Export1COperationType INTERNAL_TRANSFER = new Export1COperationType("INTERNAL_TRANSFER", DocumentType.INTERNAL_TRANSFER);
        /// <summary> Акт приготовления. </summary>
        public static readonly Export1COperationType PRODUCTION_DOCUMENT = new Export1COperationType("PRODUCTION_DOCUMENT", DocumentType.PRODUCTION_DOCUMENT);
        /// <summary> Поступление наличной выручки в главную кассу. </summary>
        public static readonly Export1COperationType SALES_REVENUE_CASH = new Export1COperationType("SALES_REVENUE_CASH", DocumentType.SALES_DOCUMENT);
        /// <summary> Учет выручки от продаж в кредит. </summary>
        public static readonly Export1COperationType SALES_REVENUE_CREDIT = new Export1COperationType("SALES_REVENUE_CREDIT", DocumentType.SALES_DOCUMENT);
        /// <summary> Учет выручки по кредитным картам. </summary>
        public static readonly Export1COperationType SALES_REVENUE_CARD = new Export1COperationType("SALES_REVENUE_CARD", DocumentType.SALES_DOCUMENT);
        /// <summary> Учет предоплаты за проведение мероприятия (банкета). </summary>
        public static readonly Export1COperationType SALES_REVENUE_PREPAY = new Export1COperationType("SALES_REVENUE_PREPAY", DocumentType.SALES_DOCUMENT);
        /// <summary> Начисление НДС на выручку. </summary>
        public static readonly Export1COperationType SALES_NDS = new Export1COperationType("SALES_NDS", DocumentType.SALES_DOCUMENT);
        /// <summary> Списание проданных товаров. </summary>
        public static readonly Export1COperationType SALES_PRODUCTS = new Export1COperationType("SALES_PRODUCTS", DocumentType.SALES_DOCUMENT);
        /// <summary> Оприходование излишков товаров. </summary>
        public static readonly Export1COperationType INVENTORY_SURPLUS = new Export1COperationType("INVENTORY_SURPLUS", DocumentType.INCOMING_INVENTORY);
        /// <summary> Списание недостачи товаров. </summary>
        public static readonly Export1COperationType INVENTORY_SHORTAGE = new Export1COperationType("INVENTORY_SHORTAGE", DocumentType.INCOMING_INVENTORY);
        /// <summary> Списание товаров. </summary>
        public static readonly Export1COperationType PRODUCTS_WRITEOFF = new Export1COperationType("PRODUCTS_WRITEOFF", DocumentType.WRITEOFF_DOCUMENT);

        private readonly DocumentType documentType;
        private readonly string __value;
        private readonly string __nameResId;

        private Export1COperationType(string __value, DocumentType documentType)
        {
            this.__value = __value;
            this.__nameResId = "EXPORT1COPERATIONTYPE_NAME_" + __value;
            this.documentType = documentType;
        }

        public static Export1COperationType Parse(string value)
        {
            switch(value)
            {
                case "INCOMING_INVOICE_PRODUCTS": return INCOMING_INVOICE_PRODUCTS;
                case "INCOMING_INVOICE_NDS": return INCOMING_INVOICE_NDS;
                case "INTERNAL_TRANSFER": return INTERNAL_TRANSFER;
                case "PRODUCTION_DOCUMENT": return PRODUCTION_DOCUMENT;
                case "SALES_REVENUE_CASH": return SALES_REVENUE_CASH;
                case "SALES_REVENUE_CREDIT": return SALES_REVENUE_CREDIT;
                case "SALES_REVENUE_CARD": return SALES_REVENUE_CARD;
                case "SALES_REVENUE_PREPAY": return SALES_REVENUE_PREPAY;
                case "SALES_NDS": return SALES_NDS;
                case "SALES_PRODUCTS": return SALES_PRODUCTS;
                case "INVENTORY_SURPLUS": return INVENTORY_SURPLUS;
                case "INVENTORY_SHORTAGE": return INVENTORY_SHORTAGE;
                case "PRODUCTS_WRITEOFF": return PRODUCTS_WRITEOFF;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static Export1COperationType[] VALUES
        {
            get
            {
                return new []
                {
                    INCOMING_INVOICE_PRODUCTS, 
                    INCOMING_INVOICE_NDS, 
                    INTERNAL_TRANSFER, 
                    PRODUCTION_DOCUMENT, 
                    SALES_REVENUE_CASH, 
                    SALES_REVENUE_CREDIT, 
                    SALES_REVENUE_CARD, 
                    SALES_REVENUE_PREPAY, 
                    SALES_NDS, 
                    SALES_PRODUCTS, 
                    INVENTORY_SURPLUS, 
                    INVENTORY_SHORTAGE, 
                    PRODUCTS_WRITEOFF
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public DocumentType DocumentType
        {
            get { return documentType; }
        }

    }

    [DataClass("Export1CReport")]
    public partial class Export1CReport : RestoReport
    {
        private ReportColumn columnDate;
        private ReportColumn columnOperationType;
        private ReportColumn columnOperationName;
        private ReportColumn columnDocumentTypeName;
        private ReportColumn columnDocumentNumber;
        private ReportColumn columnDebitAccount;
        private ReportColumn columnCreditAccount;
        private ReportColumn columnSum;
        private ReportColumn columnNdsPercent;
        private ReportColumn columnCounteragent;
        private ReportColumn columnStores;
        private DateTime? dateFrom;
        private DateTime? dateTo;

        protected Export1CReport() {}

        public Export1CReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, ReportColumn columnDate, ReportColumn columnOperationType, ReportColumn columnOperationName, ReportColumn columnDocumentTypeName, ReportColumn columnDocumentNumber, ReportColumn columnDebitAccount, ReportColumn columnCreditAccount, ReportColumn columnSum, ReportColumn columnNdsPercent, ReportColumn columnCounteragent, ReportColumn columnStores, DateTime? dateFrom, DateTime? dateTo)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.columnDate = columnDate;
            this.columnOperationType = columnOperationType;
            this.columnOperationName = columnOperationName;
            this.columnDocumentTypeName = columnDocumentTypeName;
            this.columnDocumentNumber = columnDocumentNumber;
            this.columnDebitAccount = columnDebitAccount;
            this.columnCreditAccount = columnCreditAccount;
            this.columnSum = columnSum;
            this.columnNdsPercent = columnNdsPercent;
            this.columnCounteragent = columnCounteragent;
            this.columnStores = columnStores;
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }

        public Export1CReport(Guid id)
            : base(id)
        {

        }

        public ReportColumn ColumnDate
        {
            get { return columnDate; }
            set { columnDate = value; }
        }

        public ReportColumn ColumnOperationType
        {
            get { return columnOperationType; }
            set { columnOperationType = value; }
        }

        public ReportColumn ColumnOperationName
        {
            get { return columnOperationName; }
            set { columnOperationName = value; }
        }

        public ReportColumn ColumnDocumentTypeName
        {
            get { return columnDocumentTypeName; }
            set { columnDocumentTypeName = value; }
        }

        public ReportColumn ColumnDocumentNumber
        {
            get { return columnDocumentNumber; }
            set { columnDocumentNumber = value; }
        }

        public ReportColumn ColumnDebitAccount
        {
            get { return columnDebitAccount; }
            set { columnDebitAccount = value; }
        }

        public ReportColumn ColumnCreditAccount
        {
            get { return columnCreditAccount; }
            set { columnCreditAccount = value; }
        }

        public ReportColumn ColumnSum
        {
            get { return columnSum; }
            set { columnSum = value; }
        }

        public ReportColumn ColumnNdsPercent
        {
            get { return columnNdsPercent; }
            set { columnNdsPercent = value; }
        }

        public ReportColumn ColumnCounteragent
        {
            get { return columnCounteragent; }
            set { columnCounteragent = value; }
        }

        public ReportColumn ColumnStores
        {
            get { return columnStores; }
            set { columnStores = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [DataClass("FoodcostCouldSaveData")]
    public partial class FoodcostCouldSaveData
    {
        private decimal? realCost;
        private decimal? hypotheticalCost;
        private decimal? totalEconomy;
        private decimal? deltaCostPercent;
        private List<FoodcostCouldSaveRecord> records;

        protected FoodcostCouldSaveData() {}

        public FoodcostCouldSaveData(decimal? realCost, decimal? hypotheticalCost, decimal? totalEconomy, decimal? deltaCostPercent)
        {
            this.realCost = realCost;
            this.hypotheticalCost = hypotheticalCost;
            this.totalEconomy = totalEconomy;
            this.deltaCostPercent = deltaCostPercent;
        }
        public decimal? RealCost
        {
            get { return realCost; }
        }

        public decimal? HypotheticalCost
        {
            get { return hypotheticalCost; }
        }

        public decimal? TotalEconomy
        {
            get { return totalEconomy; }
        }

        public decimal? DeltaCostPercent
        {
            get { return deltaCostPercent; }
        }

        public List<FoodcostCouldSaveRecord> Records
        {
            get { return records; }
        }

    }

    [DataClass("FoodcostCouldSaveRecord")]
    public partial class FoodcostCouldSaveRecord
    {
        private Product product;
        private ProductGroup group;
        private MeasureUnit mainUnit;
        private HashSet<User> currentSuppliers;
        [HasDefaultValue]
        private decimal purchaseAmount = 0;
        [HasDefaultValue]
        private decimal averagePurchasePrice = 0;
        private User supplier;
        [HasDefaultValue]
        private decimal supplierAveragePrice = 0;
        [HasDefaultValue]
        private decimal possibleEconomy = 0;

        protected FoodcostCouldSaveRecord() {}

        public FoodcostCouldSaveRecord(Product product, ProductGroup group, MeasureUnit mainUnit, decimal purchaseAmount, decimal averagePurchasePrice, User supplier, decimal supplierAveragePrice, decimal possibleEconomy)
        {
            this.product = product;
            this.group = group;
            this.mainUnit = mainUnit;
            this.purchaseAmount = purchaseAmount;
            this.averagePurchasePrice = averagePurchasePrice;
            this.supplier = supplier;
            this.supplierAveragePrice = supplierAveragePrice;
            this.possibleEconomy = possibleEconomy;
        }

        public FoodcostCouldSaveRecord(decimal purchaseAmount, decimal averagePurchasePrice, decimal supplierAveragePrice, decimal possibleEconomy)
        {
            this.purchaseAmount = purchaseAmount;
            this.averagePurchasePrice = averagePurchasePrice;
            this.supplierAveragePrice = supplierAveragePrice;
            this.possibleEconomy = possibleEconomy;
        }

        public Product Product
        {
            get { return product; }
        }

        public ProductGroup Group
        {
            get { return group; }
        }

        public MeasureUnit MainUnit
        {
            get { return mainUnit; }
        }

        public HashSet<User> CurrentSuppliers
        {
            get { return currentSuppliers; }
        }

        public decimal PurchaseAmount
        {
            get { return purchaseAmount; }
        }

        public decimal AveragePurchasePrice
        {
            get { return averagePurchasePrice; }
        }

        public User Supplier
        {
            get { return supplier; }
        }

        public decimal SupplierAveragePrice
        {
            get { return supplierAveragePrice; }
        }

        public decimal PossibleEconomy
        {
            get { return possibleEconomy; }
        }

    }

    [DataClass("FoodcostMinPriceInfo")]
    public partial class FoodcostMinPriceInfo
    {
        private Product product;
        private Product supplierProduct;
        private User supplier;
        [HasDefaultValue]
        private decimal price = 0;
        private Guid? containerId;
        private DateTime date;
        private bool isFromInvoice;

        protected FoodcostMinPriceInfo() {}

        public FoodcostMinPriceInfo(Product product, Product supplierProduct, User supplier, decimal price, Guid? containerId, DateTime date, bool isFromInvoice)
        {
            this.product = product;
            this.supplierProduct = supplierProduct;
            this.supplier = supplier;
            this.price = price;
            this.containerId = containerId;
            this.date = date;
            this.isFromInvoice = isFromInvoice;
        }

        public FoodcostMinPriceInfo(decimal price, DateTime date)
        {
            this.price = price;
            this.date = date;
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Product SupplierProduct
        {
            get { return supplierProduct; }
            set { supplierProduct = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public decimal Price
        {
            get { return price; }
            set { price = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public bool IsFromInvoice
        {
            get { return isFromInvoice; }
            set { isFromInvoice = value; }
        }

    }

    [DataClass("FoodcostPriceDynamicsData")]
    public partial class FoodcostPriceDynamicsData
    {
        private List<FoodcostPriceDynamicsRecord> records;
        private ICollection<FoodcostMinPriceInfo> minPrices;


        public List<FoodcostPriceDynamicsRecord> Records
        {
            get { return records; }
            set { records = value; }
        }

        public ICollection<FoodcostMinPriceInfo> MinPrices
        {
            get { return minPrices; }
            set { minPrices = value; }
        }

    }

    [DataClass("FoodcostPriceDynamicsRecord")]
    public partial class FoodcostPriceDynamicsRecord
    {
        private Product product;
        private decimal? averagePriceBasePeriod;
        private decimal? averagePriceResearchPeriod;
        private decimal? lastPriceValue;
        private decimal? lastAndMinPricesDeltaPercent;
        [HasDefaultValue]
        private decimal costPercentResearchPeriod = 0;
        private decimal? amountResearchPeriod;
        private decimal? amountBasePeriod;
        private decimal? lossesSavingAveragePriceChanging;
        private decimal? expectedLossesSaving;
        private List<FoodcostReentranceRecord> dishes;
        private HashSet<FoodcostRecommendation> recommendations;
        private User lastPriceSupplier;

        protected FoodcostPriceDynamicsRecord() {}

        public FoodcostPriceDynamicsRecord(Product product, decimal? averagePriceBasePeriod, decimal? averagePriceResearchPeriod, decimal? lastPriceValue, decimal? lastAndMinPricesDeltaPercent, decimal costPercentResearchPeriod, decimal? amountResearchPeriod, decimal? amountBasePeriod, decimal? lossesSavingAveragePriceChanging, decimal? expectedLossesSaving, User lastPriceSupplier)
        {
            this.product = product;
            this.averagePriceBasePeriod = averagePriceBasePeriod;
            this.averagePriceResearchPeriod = averagePriceResearchPeriod;
            this.lastPriceValue = lastPriceValue;
            this.lastAndMinPricesDeltaPercent = lastAndMinPricesDeltaPercent;
            this.costPercentResearchPeriod = costPercentResearchPeriod;
            this.amountResearchPeriod = amountResearchPeriod;
            this.amountBasePeriod = amountBasePeriod;
            this.lossesSavingAveragePriceChanging = lossesSavingAveragePriceChanging;
            this.expectedLossesSaving = expectedLossesSaving;
            this.lastPriceSupplier = lastPriceSupplier;
        }

        public FoodcostPriceDynamicsRecord(decimal costPercentResearchPeriod)
        {
            this.costPercentResearchPeriod = costPercentResearchPeriod;
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? AveragePriceBasePeriod
        {
            get { return averagePriceBasePeriod; }
            set { averagePriceBasePeriod = value; }
        }

        public decimal? AveragePriceResearchPeriod
        {
            get { return averagePriceResearchPeriod; }
            set { averagePriceResearchPeriod = value; }
        }

        public decimal? LastPriceValue
        {
            get { return lastPriceValue; }
            set { lastPriceValue = value; }
        }

        public decimal? LastAndMinPricesDeltaPercent
        {
            get { return lastAndMinPricesDeltaPercent; }
            set { lastAndMinPricesDeltaPercent = value; }
        }

        public decimal CostPercentResearchPeriod
        {
            get { return costPercentResearchPeriod; }
            set { costPercentResearchPeriod = value; }
        }

        public decimal? AmountResearchPeriod
        {
            get { return amountResearchPeriod; }
            set { amountResearchPeriod = value; }
        }

        public decimal? AmountBasePeriod
        {
            get { return amountBasePeriod; }
            set { amountBasePeriod = value; }
        }

        public decimal? LossesSavingAveragePriceChanging
        {
            get { return lossesSavingAveragePriceChanging; }
            set { lossesSavingAveragePriceChanging = value; }
        }

        public decimal? ExpectedLossesSaving
        {
            get { return expectedLossesSaving; }
            set { expectedLossesSaving = value; }
        }

        public List<FoodcostReentranceRecord> Dishes
        {
            get { return dishes; }
            set { dishes = value; }
        }

        public HashSet<FoodcostRecommendation> Recommendations
        {
            get { return recommendations; }
            set { recommendations = value; }
        }

        public User LastPriceSupplier
        {
            get { return lastPriceSupplier; }
            set { lastPriceSupplier = value; }
        }

    }

    [DataClass("FoodcostPricesSource")]
    public partial class FoodcostPricesSource
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private bool searchInInvoices;
        private bool searchInPriceLists;

        protected FoodcostPricesSource() {}

        public FoodcostPricesSource(DateTime? dateFrom, DateTime? dateTo, bool searchInInvoices, bool searchInPriceLists)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.searchInInvoices = searchInInvoices;
            this.searchInPriceLists = searchInPriceLists;
        }
        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public bool SearchInInvoices
        {
            get { return searchInInvoices; }
            set { searchInInvoices = value; }
        }

        public bool SearchInPriceLists
        {
            get { return searchInPriceLists; }
            set { searchInPriceLists = value; }
        }

    }

    [DataClass("FoodcostRecommendation")]
    [EnumClass]
    public partial class FoodcostRecommendation : LocalizableName<FoodcostRecommendation>
    {
        /// <summary> Рекомендуется сменить поставщика. </summary>
        public static readonly FoodcostRecommendation CHANGE_SUPPLIER = new FoodcostRecommendation("CHANGE_SUPPLIER");
        /// <summary> Рекомендуется увеличить наценку на блюда или пересмотреть их рецептуру. </summary>
        public static readonly FoodcostRecommendation CHANGE_MARKUP = new FoodcostRecommendation("CHANGE_MARKUP");
        /// <summary> Ожидаются потери в следующем периоде из-за роста текущей цены закупки. </summary>
        public static readonly FoodcostRecommendation LOSSES_EXPECTED = new FoodcostRecommendation("LOSSES_EXPECTED");

        private readonly string __value;
        private readonly string __nameResId;

        private FoodcostRecommendation(string __value)
        {
            this.__value = __value;
            this.__nameResId = "FOODCOSTRECOMMENDATION_NAME_" + __value;
        }

        public static FoodcostRecommendation Parse(string value)
        {
            switch(value)
            {
                case "CHANGE_SUPPLIER": return CHANGE_SUPPLIER;
                case "CHANGE_MARKUP": return CHANGE_MARKUP;
                case "LOSSES_EXPECTED": return LOSSES_EXPECTED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static FoodcostRecommendation[] VALUES
        {
            get
            {
                return new []
                {
                    CHANGE_SUPPLIER, 
                    CHANGE_MARKUP, 
                    LOSSES_EXPECTED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("FoodcostReentranceRecord")]
    public partial class FoodcostReentranceRecord
    {
        private Product ingredient;
        private ProductSizeKey dish;
        [HasDefaultValue]
        private decimal ingredientCostPercent = 0;
        [HasDefaultValue]
        private decimal ingredientAmountInDish = 0;
        [HasDefaultValue]
        private decimal researchPeriodDishSum = 0;
        [HasDefaultValue]
        private decimal researchPeriodDishCost = 0;
        [HasDefaultValue]
        private decimal basePeriodDishSum = 0;
        [HasDefaultValue]
        private decimal basePeriodDishCost = 0;
        [HasDefaultValue]
        private decimal deltaAmount = 0;

        protected FoodcostReentranceRecord() {}

        public FoodcostReentranceRecord(Product ingredient, ProductSizeKey dish, decimal ingredientCostPercent, decimal ingredientAmountInDish, decimal researchPeriodDishSum, decimal researchPeriodDishCost, decimal basePeriodDishSum, decimal basePeriodDishCost, decimal deltaAmount)
        {
            this.ingredient = ingredient;
            this.dish = dish;
            this.ingredientCostPercent = ingredientCostPercent;
            this.ingredientAmountInDish = ingredientAmountInDish;
            this.researchPeriodDishSum = researchPeriodDishSum;
            this.researchPeriodDishCost = researchPeriodDishCost;
            this.basePeriodDishSum = basePeriodDishSum;
            this.basePeriodDishCost = basePeriodDishCost;
            this.deltaAmount = deltaAmount;
        }

        public FoodcostReentranceRecord(decimal ingredientCostPercent, decimal ingredientAmountInDish, decimal researchPeriodDishSum, decimal researchPeriodDishCost, decimal basePeriodDishSum, decimal basePeriodDishCost, decimal deltaAmount)
        {
            this.ingredientCostPercent = ingredientCostPercent;
            this.ingredientAmountInDish = ingredientAmountInDish;
            this.researchPeriodDishSum = researchPeriodDishSum;
            this.researchPeriodDishCost = researchPeriodDishCost;
            this.basePeriodDishSum = basePeriodDishSum;
            this.basePeriodDishCost = basePeriodDishCost;
            this.deltaAmount = deltaAmount;
        }

        public Product Ingredient
        {
            get { return ingredient; }
            set { ingredient = value; }
        }

        public ProductSizeKey Dish
        {
            get { return dish; }
            set { dish = value; }
        }

        public decimal IngredientCostPercent
        {
            get { return ingredientCostPercent; }
            set { ingredientCostPercent = value; }
        }

        public decimal IngredientAmountInDish
        {
            get { return ingredientAmountInDish; }
            set { ingredientAmountInDish = value; }
        }

        public decimal ResearchPeriodDishSum
        {
            get { return researchPeriodDishSum; }
            set { researchPeriodDishSum = value; }
        }

        public decimal ResearchPeriodDishCost
        {
            get { return researchPeriodDishCost; }
            set { researchPeriodDishCost = value; }
        }

        public decimal BasePeriodDishSum
        {
            get { return basePeriodDishSum; }
            set { basePeriodDishSum = value; }
        }

        public decimal BasePeriodDishCost
        {
            get { return basePeriodDishCost; }
            set { basePeriodDishCost = value; }
        }

        public decimal DeltaAmount
        {
            get { return deltaAmount; }
            set { deltaAmount = value; }
        }

    }

    [DataClass("FoodcostTransactionSource")]
    [EnumClass]
    public partial class FoodcostTransactionSource : LocalizableName<FoodcostTransactionSource>
    {
        /// <summary> Автоматические акты реализации. </summary>
        public static readonly FoodcostTransactionSource SALES_DOCUMENT_AUTO = new FoodcostTransactionSource("SALES_DOCUMENT_AUTO");
        /// <summary> Ручные акты реализации. </summary>
        public static readonly FoodcostTransactionSource SALES_DOCUMENT_MANUAL = new FoodcostTransactionSource("SALES_DOCUMENT_MANUAL");
        /// <summary> Расходные накладные. </summary>
        public static readonly FoodcostTransactionSource OUTGOING_INVOICE = new FoodcostTransactionSource("OUTGOING_INVOICE");

        private readonly string __value;
        private readonly string __nameResId;

        private FoodcostTransactionSource(string __value)
        {
            this.__value = __value;
            this.__nameResId = "FOODCOSTTRANSACTIONSOURCE_NAME_" + __value;
        }

        public static FoodcostTransactionSource Parse(string value)
        {
            switch(value)
            {
                case "SALES_DOCUMENT_AUTO": return SALES_DOCUMENT_AUTO;
                case "SALES_DOCUMENT_MANUAL": return SALES_DOCUMENT_MANUAL;
                case "OUTGOING_INVOICE": return OUTGOING_INVOICE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static FoodcostTransactionSource[] VALUES
        {
            get
            {
                return new []
                {
                    SALES_DOCUMENT_AUTO, 
                    SALES_DOCUMENT_MANUAL, 
                    OUTGOING_INVOICE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("FoodcostWhatIfData")]
    public partial class FoodcostWhatIfData
    {
        private List<FoodcostWhatIfRecord> records;
        private List<FoodcostWhatIfDishRecord> dishRecords;


        public List<FoodcostWhatIfRecord> Records
        {
            get { return records; }
            set { records = value; }
        }

        public List<FoodcostWhatIfDishRecord> DishRecords
        {
            get { return dishRecords; }
            set { dishRecords = value; }
        }

    }

    [DataClass("FoodcostWhatIfDishRecord")]
    public partial class FoodcostWhatIfDishRecord
    {
        private ProductSizeKey dish;
        [HasDefaultValue]
        private decimal cost = 0;
        [HasDefaultValue]
        private decimal sum = 0;
        [HasDefaultValue]
        private decimal markup = 0;
        [HasDefaultValue]
        private decimal amount = 0;
        private decimal? lastPrice;
        private Dictionary<Product, decimal> ingredients;

        protected FoodcostWhatIfDishRecord() {}

        public FoodcostWhatIfDishRecord(ProductSizeKey dish, decimal cost, decimal sum, decimal markup, decimal amount, decimal? lastPrice)
        {
            this.dish = dish;
            this.cost = cost;
            this.sum = sum;
            this.markup = markup;
            this.amount = amount;
            this.lastPrice = lastPrice;
        }

        public FoodcostWhatIfDishRecord(decimal cost, decimal sum, decimal markup, decimal amount)
        {
            this.cost = cost;
            this.sum = sum;
            this.markup = markup;
            this.amount = amount;
        }

        public ProductSizeKey Dish
        {
            get { return dish; }
            set { dish = value; }
        }

        public decimal Cost
        {
            get { return cost; }
            set { cost = value; }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal Markup
        {
            get { return markup; }
            set { markup = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? LastPrice
        {
            get { return lastPrice; }
            set { lastPrice = value; }
        }

        public Dictionary<Product, decimal> Ingredients
        {
            get { return ingredients; }
            set { ingredients = value; }
        }

    }

    [DataClass("FoodcostWhatIfRecord")]
    public partial class FoodcostWhatIfRecord
    {
        private Product product;
        [HasDefaultValue]
        private decimal cost = 0;
        [HasDefaultValue]
        private decimal amount = 0;
        [HasDefaultValue]
        private decimal profit = 0;
        private User lastPriceSupplier;
        private decimal? lastPrice;
        private int reentrance;

        protected FoodcostWhatIfRecord() {}

        public FoodcostWhatIfRecord(Product product, decimal cost, decimal amount, decimal profit, User lastPriceSupplier, decimal? lastPrice, int reentrance)
        {
            this.product = product;
            this.cost = cost;
            this.amount = amount;
            this.profit = profit;
            this.lastPriceSupplier = lastPriceSupplier;
            this.lastPrice = lastPrice;
            this.reentrance = reentrance;
        }

        public FoodcostWhatIfRecord(decimal cost, decimal amount, decimal profit)
        {
            this.cost = cost;
            this.amount = amount;
            this.profit = profit;
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal Cost
        {
            get { return cost; }
            set { cost = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal Profit
        {
            get { return profit; }
            set { profit = value; }
        }

        public User LastPriceSupplier
        {
            get { return lastPriceSupplier; }
            set { lastPriceSupplier = value; }
        }

        public decimal? LastPrice
        {
            get { return lastPrice; }
            set { lastPrice = value; }
        }

        public int Reentrance
        {
            get { return reentrance; }
            set { reentrance = value; }
        }

    }

    [DataClass("GoodMoveReportData")]
    public partial class GoodMoveReportData
    {
        private List<ProductMoveItem> reportItems;
        private decimal? initialAmount;
        private decimal? initialSum;

        protected GoodMoveReportData() {}

        public GoodMoveReportData(decimal? initialAmount, decimal? initialSum)
        {
            this.initialAmount = initialAmount;
            this.initialSum = initialSum;
        }
        public List<ProductMoveItem> ReportItems
        {
            get { return reportItems; }
            set { reportItems = value; }
        }

        public decimal? InitialAmount
        {
            get { return initialAmount; }
            set { initialAmount = value; }
        }

        public decimal? InitialSum
        {
            get { return initialSum; }
            set { initialSum = value; }
        }

    }

    [DataClass("ProductMoveItem")]
    public partial class ProductMoveItem
    {
        private DateTime? date;
        private Guid? documentId;
        private string documentNum;
        private Store store;
        private Account accountFrom;
        private Account accountTo;
        private Product product;
        private Product dish;
        private User counteragent;
        private LocalizableNamePersistedEntity correspondence;
        private TransactionType transactionType;
        private DocumentType documentType;
        private decimal? amount;
        private decimal? balance;
        private decimal? sum;
        private decimal? sumBalance;
        private List<ProductMoveItem> costDetalization;

        protected ProductMoveItem() {}

        public ProductMoveItem(DateTime? date, Guid? documentId, string documentNum, Store store, Account accountFrom, Account accountTo, Product product, Product dish, User counteragent, LocalizableNamePersistedEntity correspondence, TransactionType transactionType, DocumentType documentType, decimal? amount, decimal? balance, decimal? sum, decimal? sumBalance)
        {
            this.date = date;
            this.documentId = documentId;
            this.documentNum = documentNum;
            this.store = store;
            this.accountFrom = accountFrom;
            this.accountTo = accountTo;
            this.product = product;
            this.dish = dish;
            this.counteragent = counteragent;
            this.correspondence = correspondence;
            this.transactionType = transactionType;
            this.documentType = documentType;
            this.amount = amount;
            this.balance = balance;
            this.sum = sum;
            this.sumBalance = sumBalance;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public string DocumentNum
        {
            get { return documentNum; }
            set { documentNum = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Account AccountFrom
        {
            get { return accountFrom; }
            set { accountFrom = value; }
        }

        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Product Dish
        {
            get { return dish; }
            set { dish = value; }
        }

        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public LocalizableNamePersistedEntity Correspondence
        {
            get { return correspondence; }
            set { correspondence = value; }
        }

        public TransactionType TransactionType
        {
            get { return transactionType; }
            set { transactionType = value; }
        }

        public DocumentType DocumentType
        {
            get { return documentType; }
            set { documentType = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumBalance
        {
            get { return sumBalance; }
            set { sumBalance = value; }
        }

        public List<ProductMoveItem> CostDetalization
        {
            get { return costDetalization; }
            set { costDetalization = value; }
        }

    }

    [DataClass("InvoiceReport")]
    public partial class InvoiceReport : RestoReport
    {
        private DateInterval dateInterval;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Store> stores = new List<Store>();
        private InvoiceReportGroupType groupType;
        private ReportColumn columnMain;
        private ReportColumn columnCount;
        private ReportColumn columnAmount;
        private ReportColumn columnAveragePrice;
        private ReportColumn columnSumWithNds;
        private ReportColumn columnSumNds;
        private ReportColumn columnSumWithoutNds;
        private ReportColumn columnAverageSum;

        protected InvoiceReport() {}

        public InvoiceReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, DateInterval dateInterval, InvoiceReportGroupType groupType, ReportColumn columnMain, ReportColumn columnCount, ReportColumn columnAmount, ReportColumn columnAveragePrice, ReportColumn columnSumWithNds, ReportColumn columnSumNds, ReportColumn columnSumWithoutNds, ReportColumn columnAverageSum)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.dateInterval = dateInterval;
            this.groupType = groupType;
            this.columnMain = columnMain;
            this.columnCount = columnCount;
            this.columnAmount = columnAmount;
            this.columnAveragePrice = columnAveragePrice;
            this.columnSumWithNds = columnSumWithNds;
            this.columnSumNds = columnSumNds;
            this.columnSumWithoutNds = columnSumWithoutNds;
            this.columnAverageSum = columnAverageSum;
        }

        public InvoiceReport(Guid id)
            : base(id)
        {

        }

        public DateInterval DateInterval
        {
            get { return dateInterval; }
            set { dateInterval = value; }
        }

        [NotNull]
        public ICollection<Store> Stores
        {
            get { return stores; }
        }

        public InvoiceReportGroupType GroupType
        {
            get { return groupType; }
            set { groupType = value; }
        }

        public ReportColumn ColumnMain
        {
            get { return columnMain; }
            set { columnMain = value; }
        }

        public ReportColumn ColumnCount
        {
            get { return columnCount; }
            set { columnCount = value; }
        }

        public ReportColumn ColumnAmount
        {
            get { return columnAmount; }
            set { columnAmount = value; }
        }

        public ReportColumn ColumnAveragePrice
        {
            get { return columnAveragePrice; }
            set { columnAveragePrice = value; }
        }

        public ReportColumn ColumnSumWithNds
        {
            get { return columnSumWithNds; }
            set { columnSumWithNds = value; }
        }

        public ReportColumn ColumnSumNds
        {
            get { return columnSumNds; }
            set { columnSumNds = value; }
        }

        public ReportColumn ColumnSumWithoutNds
        {
            get { return columnSumWithoutNds; }
            set { columnSumWithoutNds = value; }
        }

        public ReportColumn ColumnAverageSum
        {
            get { return columnAverageSum; }
            set { columnAverageSum = value; }
        }

    }

    [DataClass("InvoiceReportGroupType")]
    public enum InvoiceReportGroupType
    {
        SUPPLIER,
        PRODUCT
    }

    [DataClass("DatePeriod")]
    [EnumClass]
    public partial class DatePeriod : LocalizableName<DatePeriod>
    {
        /// <summary> Другой.... </summary>
        public static readonly DatePeriod CUSTOM = new DatePeriod("CUSTOM");
        /// <summary> Открытый период. </summary>
        public static readonly DatePeriod OPEN_PERIOD = new DatePeriod("OPEN_PERIOD");
        /// <summary> Сегодня. </summary>
        public static readonly DatePeriod TODAY = new DatePeriod("TODAY");
        /// <summary> Вчера. </summary>
        public static readonly DatePeriod YESTERDAY = new DatePeriod("YESTERDAY");
        /// <summary> Текущая неделя. </summary>
        public static readonly DatePeriod CURRENT_WEEK = new DatePeriod("CURRENT_WEEK");
        /// <summary> Текущий месяц. </summary>
        public static readonly DatePeriod CURRENT_MONTH = new DatePeriod("CURRENT_MONTH");
        /// <summary> Текущий год. </summary>
        public static readonly DatePeriod CURRENT_YEAR = new DatePeriod("CURRENT_YEAR");
        /// <summary> Прошлая неделя. </summary>
        public static readonly DatePeriod LAST_WEEK = new DatePeriod("LAST_WEEK");
        /// <summary> Прошлый месяц. </summary>
        public static readonly DatePeriod LAST_MONTH = new DatePeriod("LAST_MONTH");
        /// <summary> Прошлый год. </summary>
        public static readonly DatePeriod LAST_YEAR = new DatePeriod("LAST_YEAR");

        private readonly string __value;
        private readonly string __nameResId;

        private DatePeriod(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DATEPERIOD_NAME_" + __value;
        }

        public static DatePeriod Parse(string value)
        {
            switch(value)
            {
                case "CUSTOM": return CUSTOM;
                case "OPEN_PERIOD": return OPEN_PERIOD;
                case "TODAY": return TODAY;
                case "YESTERDAY": return YESTERDAY;
                case "CURRENT_WEEK": return CURRENT_WEEK;
                case "CURRENT_MONTH": return CURRENT_MONTH;
                case "CURRENT_YEAR": return CURRENT_YEAR;
                case "LAST_WEEK": return LAST_WEEK;
                case "LAST_MONTH": return LAST_MONTH;
                case "LAST_YEAR": return LAST_YEAR;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DatePeriod[] VALUES
        {
            get
            {
                return new []
                {
                    CUSTOM, 
                    OPEN_PERIOD, 
                    TODAY, 
                    YESTERDAY, 
                    CURRENT_WEEK, 
                    CURRENT_MONTH, 
                    CURRENT_YEAR, 
                    LAST_WEEK, 
                    LAST_MONTH, 
                    LAST_YEAR
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("OlapReportColumn")]
    public partial class OlapReportColumn : DataSetColumn
    {
        [HasDefaultValue]
        private bool aggregationAllowed = true;
        [HasDefaultValue]
        private bool groupingAllowed = true;
        [HasDefaultValue]
        private bool filteringAllowed = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<string> tags = new HashSet<string>();
        private bool deprecated;

        protected OlapReportColumn() {}

        public OlapReportColumn(Guid id, string name, ColumnType type, bool deprecated)
            : base(id, name, type)
        {
            this.deprecated = deprecated;
        }

        public OlapReportColumn(Guid id)
            : base(id)
        {

        }

        public bool AggregationAllowed
        {
            get { return aggregationAllowed; }
            set { aggregationAllowed = value; }
        }

        public bool GroupingAllowed
        {
            get { return groupingAllowed; }
            set { groupingAllowed = value; }
        }

        public bool FilteringAllowed
        {
            get { return filteringAllowed; }
            set { filteringAllowed = value; }
        }

        [NotNull]
        public HashSet<string> Tags
        {
            get { return tags; }
        }

        public bool Deprecated
        {
            get { return deprecated; }
            set { deprecated = value; }
        }

    }

    [DataClass("OlapReports")]
    [EnumClass]
    public partial class OlapReports : LocalizableName<OlapReports>
    {
        /// <summary> Отчеты по срокам хранения и остаткам. </summary>
        public static readonly OlapReports STOCK = new OlapReports("STOCK", "stockOlapConfig", "EventDate", null, null, Permission.CAN_ACCESS_SALES_REPORTS, Serializer.Deserialize<List<string>>("<r><i cls=\"java.lang.String\">EventDate</i></r>", false), Serializer.Deserialize<List<string>>("<r></r>", false));
        /// <summary> Отчет по продажам. </summary>
        public static readonly OlapReports SALES = new OlapReports("SALES", "salesOlapConfig", "SessionID.OperDay", "OrderDeleted", "DeletedWithWriteoff", Permission.CAN_ACCESS_SALES_REPORTS, Serializer.Deserialize<List<string>>("<r><i cls=\"java.lang.String\">OpenDate.Typed</i><i cls=\"java.lang.String\">OpenDate</i><i cls=\"java.lang.String\">OpenDate.OperDay</i><i cls=\"java.lang.String\">SessionID.OperDay</i></r>", false), Serializer.Deserialize<List<string>>("<r><i cls=\"java.lang.String\">SessionID</i></r>", false));
        /// <summary> Отчет по проводкам. </summary>
        public static readonly OlapReports TRANSACTIONS = new OlapReports("TRANSACTIONS", "transactionsOlapConfig", "DateTime.OperDayFilter", null, null, Permission.CAN_VIEW_OLAP_TRANSACTIONS_REPORT, Serializer.Deserialize<List<string>>("<r><i cls=\"java.lang.String\">DateTime.DateTyped</i><i cls=\"java.lang.String\">DateTime.Typed</i><i cls=\"java.lang.String\">DateTime</i><i cls=\"java.lang.String\">DateTime.Date</i><i cls=\"java.lang.String\">DateTime.OperDayFilter</i></r>", false), Serializer.Deserialize<List<string>>("<r><i cls=\"java.lang.String\">OrderId</i></r>", false));
        /// <summary> Отчет по доставкам. </summary>
        public static readonly OlapReports DELIVERIES = new OlapReports("DELIVERIES", "salesOlapConfig", "SessionID.OperDay", "OrderDeleted", "DeletedWithWriteoff", Permission.CAN_ACCESS_SALES_REPORTS, Serializer.Deserialize<List<string>>("<r><i cls=\"java.lang.String\">OpenDate.Typed</i><i cls=\"java.lang.String\">OpenDate</i><i cls=\"java.lang.String\">OpenDate.OperDay</i><i cls=\"java.lang.String\">SessionID.OperDay</i></r>", false), Serializer.Deserialize<List<string>>("<r></r>", false));

        private readonly string reportId;
        private readonly string dateOlapField;
        private readonly string orderDeletedOlapField;
        private readonly string deletedWithWriteoffOlapField;
        private readonly Permission permission;
        private readonly List<string> indexedDateOlapFields;
        private readonly List<string> indexedNonDateOlapFields;
        private readonly string __value;
        private readonly string __nameResId;

        private OlapReports(string __value, string reportId, string dateOlapField, string orderDeletedOlapField, string deletedWithWriteoffOlapField, Permission permission, List<string> indexedDateOlapFields, List<string> indexedNonDateOlapFields)
        {
            this.__value = __value;
            this.__nameResId = "OLAPREPORTS_NAME_" + __value;
            this.reportId = reportId;
            this.dateOlapField = dateOlapField;
            this.orderDeletedOlapField = orderDeletedOlapField;
            this.deletedWithWriteoffOlapField = deletedWithWriteoffOlapField;
            this.permission = permission;
            this.indexedDateOlapFields = indexedDateOlapFields;
            this.indexedNonDateOlapFields = indexedNonDateOlapFields;
        }

        public static OlapReports Parse(string value)
        {
            switch(value)
            {
                case "STOCK": return STOCK;
                case "SALES": return SALES;
                case "TRANSACTIONS": return TRANSACTIONS;
                case "DELIVERIES": return DELIVERIES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OlapReports[] VALUES
        {
            get
            {
                return new []
                {
                    STOCK, 
                    SALES, 
                    TRANSACTIONS, 
                    DELIVERIES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string ReportId
        {
            get { return reportId; }
        }

        public string DateOlapField
        {
            get { return dateOlapField; }
        }

        public string OrderDeletedOlapField
        {
            get { return orderDeletedOlapField; }
        }

        public string DeletedWithWriteoffOlapField
        {
            get { return deletedWithWriteoffOlapField; }
        }

        public Permission Permission
        {
            get { return permission; }
        }

        public List<string> IndexedDateOlapFields
        {
            get { return indexedDateOlapFields; }
        }

        public List<string> IndexedNonDateOlapFields
        {
            get { return indexedNonDateOlapFields; }
        }

    }

    [DataClass("FilterCriteria")]
    public abstract partial class FilterCriteria
    {


    }

    [RootEntity]
    [DataClass("OlapReportSetting")]
    public partial class OlapReportSetting : LocalizableNamePersistedEntity
    {
        [Obsolete("Deprecated in Java code")]
        private string reportId;
        [NotNull, NotNullField]
        private OlapReports reportType;
        private string systemName;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> groupByRowFields = new List<string>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> groupByColFields = new List<string>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> aggregateFields = new List<string>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, FilterCriteria> filters = new Dictionary<string, FilterCriteria>();
        private User owner;
        [HasDefaultValue]
        private bool isShared = true;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public OlapReportSetting() {}

        public OlapReportSetting(Guid id, LocalizableValue name, OlapReports reportType)
            : base(id, name)
        {
            this.reportType = reportType;
        }
        [Obsolete("Deprecated in Java code")]
        [CanBeNull]
        public string ReportId
        {
            get { return reportId; }
            set { reportId = value; }
        }

        [NotNull]
        public OlapReports ReportType
        {
            get { return reportType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  reportType = value;
            }
        }

        [CanBeNull]
        public string SystemName
        {
            get { return systemName; }
            set { systemName = value; }
        }

        [NotNull]
        public List<string> GroupByRowFields
        {
            get { return groupByRowFields; }
        }

        [NotNull]
        public List<string> GroupByColFields
        {
            get { return groupByColFields; }
        }

        [NotNull]
        public List<string> AggregateFields
        {
            get { return aggregateFields; }
        }

        [NotNull]
        public Dictionary<string, FilterCriteria> Filters
        {
            get { return filters; }
        }

        [CanBeNull]
        public User Owner
        {
            get { return owner; }
            set { owner = value; }
        }

        public bool IsShared
        {
            get { return isShared; }
            set { isShared = value; }
        }

    }

    [DataClass("Report")]
    public partial class Report
    {
        private List<string> groupingRowFields;
        private List<string> groupingColFields;
        private List<string> aggregationFields;
        private List<Dictionary<string, Object>> data;
        private Dictionary<Dictionary<string, Object>, Dictionary<string, Object>> summary;


        public List<string> GroupingRowFields
        {
            get { return groupingRowFields; }
            set { groupingRowFields = value; }
        }

        public List<string> GroupingColFields
        {
            get { return groupingColFields; }
            set { groupingColFields = value; }
        }

        public List<string> AggregationFields
        {
            get { return aggregationFields; }
            set { aggregationFields = value; }
        }

        public List<Dictionary<string, Object>> Data
        {
            get { return data; }
            set { data = value; }
        }

        public Dictionary<Dictionary<string, Object>, Dictionary<string, Object>> Summary
        {
            get { return summary; }
            set { summary = value; }
        }

    }

    [DataClass("FilterDateRangeCriteria")]
    public partial class FilterDateRangeCriteria : FilterRangeCriteria
    {
        private DatePeriod periodType;

        protected FilterDateRangeCriteria() {}

        public FilterDateRangeCriteria(IComparable from, IComparable to, DatePeriod periodType)
            : base(from, to)
        {
            this.periodType = periodType;
        }
        public DatePeriod PeriodType
        {
            get { return periodType; }
            set { periodType = value; }
        }

    }

    [DataClass("FilterExcludeValuesCriteria")]
    public partial class FilterExcludeValuesCriteria : FilterValuesSetCriteria
    {


    }

    [DataClass("FilterIncludeValuesCriteria")]
    public partial class FilterIncludeValuesCriteria : FilterValuesSetCriteria
    {


    }

    [DataClass("FilterRangeCriteria")]
    public partial class FilterRangeCriteria : FilterCriteria
    {
        private IComparable from;
        private IComparable to;
        [HasDefaultValue]
        private bool? includeLow = true;
        [HasDefaultValue]
        private bool? includeHigh = false;

        protected FilterRangeCriteria() {}

        public FilterRangeCriteria(IComparable from, IComparable to)
        {
            this.from = from;
            this.to = to;
        }
        public IComparable From
        {
            get { return from; }
            set { from = value; }
        }

        public IComparable To
        {
            get { return to; }
            set { to = value; }
        }

        public bool? IncludeLow
        {
            get { return includeLow; }
            set { includeLow = value; }
        }

        public bool? IncludeHigh
        {
            get { return includeHigh; }
            set { includeHigh = value; }
        }

    }

    [DataClass("FilterSingleValueCriteria")]
    public partial class FilterSingleValueCriteria : FilterCriteria
    {
        private Object value;


        [CanBeNull]
        public Object Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("FilterValuesSetCriteria")]
    public abstract partial class FilterValuesSetCriteria : FilterCriteria
    {
        private HashSet<Object> values;


        public HashSet<Object> Values
        {
            get { return values; }
            set { values = value; }
        }

    }

    [DataClass("OP1AssemblyChartItemProperties")]
    public partial class OP1AssemblyChartItemProperties
    {
        private int num;
        private Product product;
        private decimal? norm;
        private decimal? costPrice;
        private decimal? sum;

        public OP1AssemblyChartItemProperties() {}

        public OP1AssemblyChartItemProperties(int num, Product product, decimal? norm, decimal? costPrice, decimal? sum)
        {
            this.num = num;
            this.product = product;
            this.norm = norm;
            this.costPrice = costPrice;
            this.sum = sum;
        }
        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Norm
        {
            get { return norm; }
            set { norm = value; }
        }

        public decimal? CostPrice
        {
            get { return costPrice; }
            set { costPrice = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("OP1AssemblyChartProperties")]
    public partial class OP1AssemblyChartProperties
    {
        private int num;
        private DateTime? dateFrom;
        private decimal? sum;
        private decimal? addPriceSum;
        private decimal? salePrice;
        private decimal? productOut;

        public OP1AssemblyChartProperties() {}

        public OP1AssemblyChartProperties(int num, DateTime? dateFrom, decimal? sum, decimal? addPriceSum, decimal? salePrice, decimal? productOut)
        {
            this.num = num;
            this.dateFrom = dateFrom;
            this.sum = sum;
            this.addPriceSum = addPriceSum;
            this.salePrice = salePrice;
            this.productOut = productOut;
        }
        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? AddPriceSum
        {
            get { return addPriceSum; }
            set { addPriceSum = value; }
        }

        public decimal? SalePrice
        {
            get { return salePrice; }
            set { salePrice = value; }
        }

        public decimal? ProductOut
        {
            get { return productOut; }
            set { productOut = value; }
        }

    }

    [DataClass("OP1ReportData")]
    public partial class OP1ReportData
    {
        private int firstNumber;
        private Product product;
        private List<OP1AssemblyChartProperties> propertiesList;
        private Dictionary<Product, List<OP1AssemblyChartItemProperties>> itemsListMap;

        protected OP1ReportData() {}

        public OP1ReportData(int firstNumber, Product product)
        {
            this.firstNumber = firstNumber;
            this.product = product;
        }
        public int FirstNumber
        {
            get { return firstNumber; }
            set { firstNumber = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public List<OP1AssemblyChartProperties> PropertiesList
        {
            get { return propertiesList; }
            set { propertiesList = value; }
        }

        public Dictionary<Product, List<OP1AssemblyChartItemProperties>> ItemsListMap
        {
            get { return itemsListMap; }
            set { itemsListMap = value; }
        }

    }

    [DataClass("ProfitAndLossDataColumn")]
    public partial class ProfitAndLossDataColumn : ReportColumn
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;

        protected ProfitAndLossDataColumn() {}

        public ProfitAndLossDataColumn(Guid id, string name, ColumnType type, bool displayable, bool resizable, bool moveable, bool sortable, TextAligment aligment, string code, bool autoWidth, ReportColumnOrder sortOrder, int sortIndex, bool showHeader, DateTime? dateFrom, DateTime? dateTo)
            : base(id, name, type, displayable, resizable, moveable, sortable, aligment, code, autoWidth, sortOrder, sortIndex, showHeader)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }

        public ProfitAndLossDataColumn(Guid id)
            : base(id)
        {

        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [DataClass("ProfitAndLossReport")]
    public partial class ProfitAndLossReport : TreeReport
    {
        private List<DateDepartmentConceptionStructure> columnsMetaInformation;
        private DateTime? dateFrom;
        private DateTime? dateTo;

        protected ProfitAndLossReport() {}

        public ProfitAndLossReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, ReportColumn idColumn, ReportColumn nameColumn, DateTime? dateFrom, DateTime? dateTo)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort, idColumn, nameColumn)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }

        public ProfitAndLossReport(Guid id)
            : base(id)
        {

        }

        public List<DateDepartmentConceptionStructure> ColumnsMetaInformation
        {
            get { return columnsMetaInformation; }
            set { columnsMetaInformation = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [DataClass("PurchasingReportRecord")]
    public partial class PurchasingReportRecord
    {
        private Product product;
        private DateTime date;
        private string documentNumber;
        private Guid documentId;
        private User supplier;
        private Product supplierProduct;
        private Store store;
        [HasDefaultValue]
        private decimal price = 0;
        [HasDefaultValue]
        private decimal priceWithoutVat = 0;
        private Guid? containerId;
        private decimal? supplierPrice;
        private decimal? deviation;
        private decimal? deviationPercent;
        private decimal? deviationWithoutVat;
        private decimal? deviationPercentWithoutVat;
        [HasDefaultValue]
        private decimal sum = 0;
        [HasDefaultValue]
        private decimal vatSum = 0;
        [HasDefaultValue]
        private decimal amount = 0;

        protected PurchasingReportRecord() {}

        public PurchasingReportRecord(Product product, DateTime date, string documentNumber, Guid documentId, User supplier, Product supplierProduct, Store store, decimal price, decimal priceWithoutVat, Guid? containerId, decimal? supplierPrice, decimal? deviation, decimal? deviationPercent, decimal? deviationWithoutVat, decimal? deviationPercentWithoutVat, decimal sum, decimal vatSum, decimal amount)
        {
            this.product = product;
            this.date = date;
            this.documentNumber = documentNumber;
            this.documentId = documentId;
            this.supplier = supplier;
            this.supplierProduct = supplierProduct;
            this.store = store;
            this.price = price;
            this.priceWithoutVat = priceWithoutVat;
            this.containerId = containerId;
            this.supplierPrice = supplierPrice;
            this.deviation = deviation;
            this.deviationPercent = deviationPercent;
            this.deviationWithoutVat = deviationWithoutVat;
            this.deviationPercentWithoutVat = deviationPercentWithoutVat;
            this.sum = sum;
            this.vatSum = vatSum;
            this.amount = amount;
        }

        public PurchasingReportRecord(DateTime date, Guid documentId, decimal price, decimal priceWithoutVat, decimal sum, decimal vatSum, decimal amount)
        {
            this.date = date;
            this.documentId = documentId;
            this.price = price;
            this.priceWithoutVat = priceWithoutVat;
            this.sum = sum;
            this.vatSum = vatSum;
            this.amount = amount;
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        public Guid DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public Product SupplierProduct
        {
            get { return supplierProduct; }
            set { supplierProduct = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public decimal Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal PriceWithoutVat
        {
            get { return priceWithoutVat; }
            set { priceWithoutVat = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public decimal? SupplierPrice
        {
            get { return supplierPrice; }
            set { supplierPrice = value; }
        }

        public decimal? Deviation
        {
            get { return deviation; }
            set { deviation = value; }
        }

        public decimal? DeviationPercent
        {
            get { return deviationPercent; }
            set { deviationPercent = value; }
        }

        public decimal? DeviationWithoutVat
        {
            get { return deviationWithoutVat; }
            set { deviationWithoutVat = value; }
        }

        public decimal? DeviationPercentWithoutVat
        {
            get { return deviationPercentWithoutVat; }
            set { deviationPercentWithoutVat = value; }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal VatSum
        {
            get { return vatSum; }
            set { vatSum = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("DishSale")]
    public partial class DishSale : DishSaleKey
    {
        private decimal? sum;
        private decimal? sumWithoutNds;
        private decimal? amount;
        private decimal? sumWithoutDiscount;
        private decimal? cost;
        private decimal? costWithoutNds;

        protected DishSale() {}

        public DishSale(Guid? documentId, DateTime? date, Product product, Conception conception, Group group, decimal? sum, decimal? sumWithoutNds, decimal? amount, decimal? sumWithoutDiscount, decimal? cost, decimal? costWithoutNds)
            : base(documentId, date, product, conception, group)
        {
            this.sum = sum;
            this.sumWithoutNds = sumWithoutNds;
            this.amount = amount;
            this.sumWithoutDiscount = sumWithoutDiscount;
            this.cost = cost;
            this.costWithoutNds = costWithoutNds;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumWithoutNds
        {
            get { return sumWithoutNds; }
            set { sumWithoutNds = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? SumWithoutDiscount
        {
            get { return sumWithoutDiscount; }
            set { sumWithoutDiscount = value; }
        }

        public decimal? Cost
        {
            get { return cost; }
            set { cost = value; }
        }

        public decimal? CostWithoutNds
        {
            get { return costWithoutNds; }
            set { costWithoutNds = value; }
        }

    }

    [DataClass("DishSaleKey")]
    public partial class DishSaleKey
    {
        private Guid? documentId;
        private DateTime? date;
        private Product product;
        private Conception conception;
        private Group group;

        protected DishSaleKey() {}

        public DishSaleKey(Guid? documentId, DateTime? date, Product product, Conception conception, Group group)
        {
            this.documentId = documentId;
            this.date = date;
            this.product = product;
            this.conception = conception;
            this.group = group;
        }
        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

    }

    [DataClass("NotSoldItemRecord")]
    public partial class NotSoldItemRecord
    {
        [HasDefaultValue]
        private decimal? itemAmount = 0;
        private Product product;
        private User waiter;
        private DepartmentEntity department;

        protected NotSoldItemRecord() {}

        public NotSoldItemRecord(Product product, User waiter, DepartmentEntity department)
        {
            this.product = product;
            this.waiter = waiter;
            this.department = department;
        }
        public decimal? ItemAmount
        {
            get { return itemAmount; }
            set { itemAmount = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public User Waiter
        {
            get { return waiter; }
            set { waiter = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("StoreOperationsBaseItem")]
    public abstract partial class StoreOperationsBaseItem
    {
        private DateInfo operationalDate;
        private DateTime? date;
        private TransactionType type;
        private bool incoming;
        private DocumentType documentType;
        private Guid? documentId;
        private string documentComment;
        private Account revenueAccount;
        private Account expenseAccount;
        private string documentNum;
        private Store primaryStore;
        private Account secondaryAccount;
        private User secondaryCounteragent;
        private Product product;
        private ProductGroup productGroup;
        private ProductCategory productCategory;
        private decimal? ndsPercent;
        private Product secondaryProduct;
        private ProductGroup secondaryProductGroup;
        private ProductCategory secondaryProductCategory;
        private string incomingDocumentNumber;

        public StoreOperationsBaseItem() {}

        protected StoreOperationsBaseItem(DateInfo operationalDate, DateTime? date, TransactionType type, bool incoming, DocumentType documentType, Guid? documentId, string documentComment, Account revenueAccount, Account expenseAccount, string documentNum, Store primaryStore, Account secondaryAccount, User secondaryCounteragent, Product product, ProductGroup productGroup, ProductCategory productCategory, decimal? ndsPercent, Product secondaryProduct, ProductGroup secondaryProductGroup, ProductCategory secondaryProductCategory, string incomingDocumentNumber)
        {
            this.operationalDate = operationalDate;
            this.date = date;
            this.type = type;
            this.incoming = incoming;
            this.documentType = documentType;
            this.documentId = documentId;
            this.documentComment = documentComment;
            this.revenueAccount = revenueAccount;
            this.expenseAccount = expenseAccount;
            this.documentNum = documentNum;
            this.primaryStore = primaryStore;
            this.secondaryAccount = secondaryAccount;
            this.secondaryCounteragent = secondaryCounteragent;
            this.product = product;
            this.productGroup = productGroup;
            this.productCategory = productCategory;
            this.ndsPercent = ndsPercent;
            this.secondaryProduct = secondaryProduct;
            this.secondaryProductGroup = secondaryProductGroup;
            this.secondaryProductCategory = secondaryProductCategory;
            this.incomingDocumentNumber = incomingDocumentNumber;
        }
        public DateInfo OperationalDate
        {
            get { return operationalDate; }
            set { operationalDate = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public TransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        public bool Incoming
        {
            get { return incoming; }
            set { incoming = value; }
        }

        public DocumentType DocumentType
        {
            get { return documentType; }
            set { documentType = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public string DocumentComment
        {
            get { return documentComment; }
            set { documentComment = value; }
        }

        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        public Account ExpenseAccount
        {
            get { return expenseAccount; }
            set { expenseAccount = value; }
        }

        public string DocumentNum
        {
            get { return documentNum; }
            set { documentNum = value; }
        }

        public Store PrimaryStore
        {
            get { return primaryStore; }
            set { primaryStore = value; }
        }

        public Account SecondaryAccount
        {
            get { return secondaryAccount; }
            set { secondaryAccount = value; }
        }

        public User SecondaryCounteragent
        {
            get { return secondaryCounteragent; }
            set { secondaryCounteragent = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public ProductGroup ProductGroup
        {
            get { return productGroup; }
            set { productGroup = value; }
        }

        public ProductCategory ProductCategory
        {
            get { return productCategory; }
            set { productCategory = value; }
        }

        public decimal? NdsPercent
        {
            get { return ndsPercent; }
            set { ndsPercent = value; }
        }

        public Product SecondaryProduct
        {
            get { return secondaryProduct; }
            set { secondaryProduct = value; }
        }

        public ProductGroup SecondaryProductGroup
        {
            get { return secondaryProductGroup; }
            set { secondaryProductGroup = value; }
        }

        public ProductCategory SecondaryProductCategory
        {
            get { return secondaryProductCategory; }
            set { secondaryProductCategory = value; }
        }

        public string IncomingDocumentNumber
        {
            get { return incomingDocumentNumber; }
            set { incomingDocumentNumber = value; }
        }

    }

    [DataClass("StoreOperationsColumnNames")]
    [EnumClass]
    public partial class StoreOperationsColumnNames
    {
        public static readonly StoreOperationsColumnNames OPERATIONAL_DAY = new StoreOperationsColumnNames("OPERATIONAL_DAY", "Date");
        public static readonly StoreOperationsColumnNames DATE_AND_TIME = new StoreOperationsColumnNames("DATE_AND_TIME", "DateAndTme");
        public static readonly StoreOperationsColumnNames DOCUMENT_TYPE = new StoreOperationsColumnNames("DOCUMENT_TYPE", "DocumentType");
        public static readonly StoreOperationsColumnNames DOCUMENT_NUMBER = new StoreOperationsColumnNames("DOCUMENT_NUMBER", "DocumentNum");
        public static readonly StoreOperationsColumnNames STORE = new StoreOperationsColumnNames("STORE", "Store");
        public static readonly StoreOperationsColumnNames ACCOUNT = new StoreOperationsColumnNames("ACCOUNT", "Account");
        public static readonly StoreOperationsColumnNames COUNTERAGENT = new StoreOperationsColumnNames("COUNTERAGENT", "CounterAgent");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT = new StoreOperationsColumnNames("FIRST_PRODUCT", "FirstProduct");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT_GROUP = new StoreOperationsColumnNames("FIRST_PRODUCT_GROUP", "FirstProductGroup");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT_CATEGORY = new StoreOperationsColumnNames("FIRST_PRODUCT_CATEGORY", "FirstProductCategory");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT_MEASURE_UNIT = new StoreOperationsColumnNames("FIRST_PRODUCT_MEASURE_UNIT", "FirstProductMeasureUnit");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT_AMOUNT = new StoreOperationsColumnNames("FIRST_PRODUCT_AMOUNT", "FirstProductAmount");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT_AVERAGE_COST = new StoreOperationsColumnNames("FIRST_PRODUCT_AVERAGE_COST", "FirstProductAverageCost");
        public static readonly StoreOperationsColumnNames FIRST_PRODUCT_AMOUNT_PART_INTOTAL_AMOUNT = new StoreOperationsColumnNames("FIRST_PRODUCT_AMOUNT_PART_INTOTAL_AMOUNT", "FirstProductAmountPartInTotalAmount");
        public static readonly StoreOperationsColumnNames SECONDARY_PRODUCT = new StoreOperationsColumnNames("SECONDARY_PRODUCT", "SecondaryProduct");
        public static readonly StoreOperationsColumnNames SECONDARY_PRODUCT_GROUP = new StoreOperationsColumnNames("SECONDARY_PRODUCT_GROUP", "SecondaryProductGroup");
        public static readonly StoreOperationsColumnNames SECONDARY_PRODUCT_CATEGORY = new StoreOperationsColumnNames("SECONDARY_PRODUCT_CATEGORY", "SecondaryProductCategory");
        public static readonly StoreOperationsColumnNames SECONDARY_PRODUCT_MEASURE_UNIT = new StoreOperationsColumnNames("SECONDARY_PRODUCT_MEASURE_UNIT", "SecondaryProductMeasureUnit");
        public static readonly StoreOperationsColumnNames SECONDATY_PRODUCT_AMOUNT = new StoreOperationsColumnNames("SECONDATY_PRODUCT_AMOUNT", "SecondaryProductAmount");
        public static readonly StoreOperationsColumnNames SECONDARY_PRODUCT_AVERAGE_COST = new StoreOperationsColumnNames("SECONDARY_PRODUCT_AVERAGE_COST", "SecondaryProductAverageCost");
        public static readonly StoreOperationsColumnNames SUM = new StoreOperationsColumnNames("SUM", "Sum");
        public static readonly StoreOperationsColumnNames NDS_PERCENT = new StoreOperationsColumnNames("NDS_PERCENT", "NdsPercent");
        public static readonly StoreOperationsColumnNames SUM_NDS = new StoreOperationsColumnNames("SUM_NDS", "SumNDS");
        public static readonly StoreOperationsColumnNames SUM_WITHOUT_NDS = new StoreOperationsColumnNames("SUM_WITHOUT_NDS", "SumWithoutNDS");

        private readonly string fieldIdentifer;
        private readonly string __value;

        private StoreOperationsColumnNames(string __value, string fieldIdentifer)
        {
            this.__value = __value;
            this.fieldIdentifer = fieldIdentifer;
        }

        public static StoreOperationsColumnNames Parse(string value)
        {
            switch(value)
            {
                case "OPERATIONAL_DAY": return OPERATIONAL_DAY;
                case "DATE_AND_TIME": return DATE_AND_TIME;
                case "DOCUMENT_TYPE": return DOCUMENT_TYPE;
                case "DOCUMENT_NUMBER": return DOCUMENT_NUMBER;
                case "STORE": return STORE;
                case "ACCOUNT": return ACCOUNT;
                case "COUNTERAGENT": return COUNTERAGENT;
                case "FIRST_PRODUCT": return FIRST_PRODUCT;
                case "FIRST_PRODUCT_GROUP": return FIRST_PRODUCT_GROUP;
                case "FIRST_PRODUCT_CATEGORY": return FIRST_PRODUCT_CATEGORY;
                case "FIRST_PRODUCT_MEASURE_UNIT": return FIRST_PRODUCT_MEASURE_UNIT;
                case "FIRST_PRODUCT_AMOUNT": return FIRST_PRODUCT_AMOUNT;
                case "FIRST_PRODUCT_AVERAGE_COST": return FIRST_PRODUCT_AVERAGE_COST;
                case "FIRST_PRODUCT_AMOUNT_PART_INTOTAL_AMOUNT": return FIRST_PRODUCT_AMOUNT_PART_INTOTAL_AMOUNT;
                case "SECONDARY_PRODUCT": return SECONDARY_PRODUCT;
                case "SECONDARY_PRODUCT_GROUP": return SECONDARY_PRODUCT_GROUP;
                case "SECONDARY_PRODUCT_CATEGORY": return SECONDARY_PRODUCT_CATEGORY;
                case "SECONDARY_PRODUCT_MEASURE_UNIT": return SECONDARY_PRODUCT_MEASURE_UNIT;
                case "SECONDATY_PRODUCT_AMOUNT": return SECONDATY_PRODUCT_AMOUNT;
                case "SECONDARY_PRODUCT_AVERAGE_COST": return SECONDARY_PRODUCT_AVERAGE_COST;
                case "SUM": return SUM;
                case "NDS_PERCENT": return NDS_PERCENT;
                case "SUM_NDS": return SUM_NDS;
                case "SUM_WITHOUT_NDS": return SUM_WITHOUT_NDS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static StoreOperationsColumnNames[] VALUES
        {
            get
            {
                return new []
                {
                    OPERATIONAL_DAY, 
                    DATE_AND_TIME, 
                    DOCUMENT_TYPE, 
                    DOCUMENT_NUMBER, 
                    STORE, 
                    ACCOUNT, 
                    COUNTERAGENT, 
                    FIRST_PRODUCT, 
                    FIRST_PRODUCT_GROUP, 
                    FIRST_PRODUCT_CATEGORY, 
                    FIRST_PRODUCT_MEASURE_UNIT, 
                    FIRST_PRODUCT_AMOUNT, 
                    FIRST_PRODUCT_AVERAGE_COST, 
                    FIRST_PRODUCT_AMOUNT_PART_INTOTAL_AMOUNT, 
                    SECONDARY_PRODUCT, 
                    SECONDARY_PRODUCT_GROUP, 
                    SECONDARY_PRODUCT_CATEGORY, 
                    SECONDARY_PRODUCT_MEASURE_UNIT, 
                    SECONDATY_PRODUCT_AMOUNT, 
                    SECONDARY_PRODUCT_AVERAGE_COST, 
                    SUM, 
                    NDS_PERCENT, 
                    SUM_NDS, 
                    SUM_WITHOUT_NDS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string FieldIdentifer
        {
            get { return fieldIdentifer; }
        }

    }

    [DataClass("StoreOperationsDetalization")]
    [EnumClass]
    public partial class StoreOperationsDetalization : LocalizableName<StoreOperationsDetalization>
    {
        /// <summary> Учетный день операции/документа. </summary>
        public static readonly StoreOperationsDetalization OPERATIONAL_DATE = new StoreOperationsDetalization("OPERATIONAL_DATE");
        /// <summary> Тип операции/документа. </summary>
        public static readonly StoreOperationsDetalization OPERATION_TYPE = new StoreOperationsDetalization("OPERATION_TYPE");
        /// <summary> Приход/Расход. </summary>
        public static readonly StoreOperationsDetalization OPERATION_DIRECTION = new StoreOperationsDetalization("OPERATION_DIRECTION");
        /// <summary> Дата и номер операции/документа. </summary>
        public static readonly StoreOperationsDetalization OPERATION = new StoreOperationsDetalization("OPERATION");
        /// <summary> Основной склад. </summary>
        public static readonly StoreOperationsDetalization STORE = new StoreOperationsDetalization("STORE");
        /// <summary> Корреспондирующий склад/счет. </summary>
        public static readonly StoreOperationsDetalization SECONDARY_ACCOUNT = new StoreOperationsDetalization("SECONDARY_ACCOUNT");
        /// <summary> Контрагент. </summary>
        public static readonly StoreOperationsDetalization SECONDARY_COUNTERAGENT = new StoreOperationsDetalization("SECONDARY_COUNTERAGENT");
        /// <summary> Ингредиент. </summary>
        public static readonly StoreOperationsDetalization PRODUCT = new StoreOperationsDetalization("PRODUCT");
        /// <summary> Группа товара. </summary>
        public static readonly StoreOperationsDetalization PRODUCT_GROUP = new StoreOperationsDetalization("PRODUCT_GROUP");
        /// <summary> Категория товара. </summary>
        public static readonly StoreOperationsDetalization PRODUCT_CATEGORY = new StoreOperationsDetalization("PRODUCT_CATEGORY");
        /// <summary> НДС. </summary>
        public static readonly StoreOperationsDetalization PRODUCT_NDS = new StoreOperationsDetalization("PRODUCT_NDS");
        /// <summary> Ставка НДС. </summary>
        public static readonly StoreOperationsDetalization PRODUCT_NDS_PERCENT = new StoreOperationsDetalization("PRODUCT_NDS_PERCENT");
        /// <summary> Блюдо/заготовка. </summary>
        public static readonly StoreOperationsDetalization SECONDARY_PRODUCT = new StoreOperationsDetalization("SECONDARY_PRODUCT");
        /// <summary> Группа блюда/заготовки. </summary>
        public static readonly StoreOperationsDetalization SECONDARY_PRODUCT_GROUP = new StoreOperationsDetalization("SECONDARY_PRODUCT_GROUP");
        /// <summary> Категория блюда/заготовки. </summary>
        public static readonly StoreOperationsDetalization SECONDARY_PRODUCT_CATEGORY = new StoreOperationsDetalization("SECONDARY_PRODUCT_CATEGORY");
        /// <summary> Место приготовления. </summary>
        public static readonly StoreOperationsDetalization COOKING_PLACE = new StoreOperationsDetalization("COOKING_PLACE");

        private readonly string __value;
        private readonly string __nameResId;

        private StoreOperationsDetalization(string __value)
        {
            this.__value = __value;
            this.__nameResId = "STOREOPERATIONSDETALIZATION_NAME_" + __value;
        }

        public static StoreOperationsDetalization Parse(string value)
        {
            switch(value)
            {
                case "OPERATIONAL_DATE": return OPERATIONAL_DATE;
                case "OPERATION_TYPE": return OPERATION_TYPE;
                case "OPERATION_DIRECTION": return OPERATION_DIRECTION;
                case "OPERATION": return OPERATION;
                case "STORE": return STORE;
                case "SECONDARY_ACCOUNT": return SECONDARY_ACCOUNT;
                case "SECONDARY_COUNTERAGENT": return SECONDARY_COUNTERAGENT;
                case "PRODUCT": return PRODUCT;
                case "PRODUCT_GROUP": return PRODUCT_GROUP;
                case "PRODUCT_CATEGORY": return PRODUCT_CATEGORY;
                case "PRODUCT_NDS": return PRODUCT_NDS;
                case "PRODUCT_NDS_PERCENT": return PRODUCT_NDS_PERCENT;
                case "SECONDARY_PRODUCT": return SECONDARY_PRODUCT;
                case "SECONDARY_PRODUCT_GROUP": return SECONDARY_PRODUCT_GROUP;
                case "SECONDARY_PRODUCT_CATEGORY": return SECONDARY_PRODUCT_CATEGORY;
                case "COOKING_PLACE": return COOKING_PLACE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static StoreOperationsDetalization[] VALUES
        {
            get
            {
                return new []
                {
                    OPERATIONAL_DATE, 
                    OPERATION_TYPE, 
                    OPERATION_DIRECTION, 
                    OPERATION, 
                    STORE, 
                    SECONDARY_ACCOUNT, 
                    SECONDARY_COUNTERAGENT, 
                    PRODUCT, 
                    PRODUCT_GROUP, 
                    PRODUCT_CATEGORY, 
                    PRODUCT_NDS, 
                    PRODUCT_NDS_PERCENT, 
                    SECONDARY_PRODUCT, 
                    SECONDARY_PRODUCT_GROUP, 
                    SECONDARY_PRODUCT_CATEGORY, 
                    COOKING_PLACE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("StoreOperationsReport")]
    public partial class StoreOperationsReport
    {
        private decimal? startSum;
        private decimal? endSum;
        private decimal? sumIncome;
        private decimal? sumOutcome;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<StoreOperationsReportItem> items = new List<StoreOperationsReportItem>();

        public StoreOperationsReport() {}

        public StoreOperationsReport(decimal? startSum, decimal? endSum, decimal? sumIncome, decimal? sumOutcome)
        {
            this.startSum = startSum;
            this.endSum = endSum;
            this.sumIncome = sumIncome;
            this.sumOutcome = sumOutcome;
        }
        public decimal? StartSum
        {
            get { return startSum; }
            set { startSum = value; }
        }

        public decimal? EndSum
        {
            get { return endSum; }
            set { endSum = value; }
        }

        public decimal? SumIncome
        {
            get { return sumIncome; }
            set { sumIncome = value; }
        }

        public decimal? SumOutcome
        {
            get { return sumOutcome; }
            set { sumOutcome = value; }
        }

        [NotNull]
        public List<StoreOperationsReportItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("StoreOperationsReportFilter")]
    public partial class StoreOperationsReportFilter
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Store> primaryStores = new HashSet<Store>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Account> secondaryAccounts = new HashSet<Account>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<User> counteragents = new HashSet<User>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Product> products = new HashSet<Product>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Product> secondaryProducts = new HashSet<Product>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<TransactionType> transactionTypes = new HashSet<TransactionType>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DocumentType> documentTypes = new HashSet<DocumentType>();
        [NotNull, NotNullField]
        private StoreDataDirection dataDirection;
        [HasDefaultValue]
        private bool includeZeroAmountAndSum = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public StoreOperationsReportFilter() {}

        public StoreOperationsReportFilter(StoreDataDirection dataDirection)
        {
            this.dataDirection = dataDirection;
        }
        [NotNull]
        public HashSet<Store> PrimaryStores
        {
            get { return primaryStores; }
        }

        [NotNull]
        public HashSet<Account> SecondaryAccounts
        {
            get { return secondaryAccounts; }
        }

        [NotNull]
        public HashSet<User> Counteragents
        {
            get { return counteragents; }
        }

        [NotNull]
        public HashSet<Product> Products
        {
            get { return products; }
        }

        [NotNull]
        public HashSet<Product> SecondaryProducts
        {
            get { return secondaryProducts; }
        }

        [NotNull]
        public HashSet<TransactionType> TransactionTypes
        {
            get { return transactionTypes; }
        }

        [NotNull]
        public HashSet<DocumentType> DocumentTypes
        {
            get { return documentTypes; }
        }

        [NotNull]
        public StoreDataDirection DataDirection
        {
            get { return dataDirection; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  dataDirection = value;
            }
        }

        public bool IncludeZeroAmountAndSum
        {
            get { return includeZeroAmountAndSum; }
            set { includeZeroAmountAndSum = value; }
        }

    }

    [DataClass("StoreOperationsReportGrouping")]
    public partial class StoreOperationsReportGrouping
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<StoreOperationsDetalization> detalizations = new HashSet<StoreOperationsDetalization>();
        private DateDetalization dateDetalization;

        public StoreOperationsReportGrouping() {}

        public StoreOperationsReportGrouping(DateDetalization dateDetalization)
        {
            this.dateDetalization = dateDetalization;
        }
        [NotNull]
        public HashSet<StoreOperationsDetalization> Detalizations
        {
            get { return detalizations; }
        }

        public DateDetalization DateDetalization
        {
            get { return dateDetalization; }
            set { dateDetalization = value; }
        }

    }

    [DataClass("StoreOperationsReportItem")]
    public partial class StoreOperationsReportItem : StoreOperationsBaseItem
    {
        private decimal? sum;
        private decimal? sumNds;
        private decimal? sumWithoutNds;
        private decimal? amount;
        private decimal? secondaryAmount;
        private decimal? documentSum;
        private decimal? firstEstimatedPurchasePrice;
        private decimal? secondEstimatedPurchasePrice;
        private List<Store> stores;
        private decimal? cost;

        protected StoreOperationsReportItem() {}

        public StoreOperationsReportItem(DateInfo operationalDate, DateTime? date, TransactionType type, bool incoming, DocumentType documentType, Guid? documentId, string documentComment, Account revenueAccount, Account expenseAccount, string documentNum, Store primaryStore, Account secondaryAccount, User secondaryCounteragent, Product product, ProductGroup productGroup, ProductCategory productCategory, decimal? ndsPercent, Product secondaryProduct, ProductGroup secondaryProductGroup, ProductCategory secondaryProductCategory, string incomingDocumentNumber, decimal? sum, decimal? sumNds, decimal? sumWithoutNds, decimal? amount, decimal? secondaryAmount, decimal? documentSum, decimal? firstEstimatedPurchasePrice, decimal? secondEstimatedPurchasePrice, decimal? cost)
            : base(operationalDate, date, type, incoming, documentType, documentId, documentComment, revenueAccount, expenseAccount, documentNum, primaryStore, secondaryAccount, secondaryCounteragent, product, productGroup, productCategory, ndsPercent, secondaryProduct, secondaryProductGroup, secondaryProductCategory, incomingDocumentNumber)
        {
            this.sum = sum;
            this.sumNds = sumNds;
            this.sumWithoutNds = sumWithoutNds;
            this.amount = amount;
            this.secondaryAmount = secondaryAmount;
            this.documentSum = documentSum;
            this.firstEstimatedPurchasePrice = firstEstimatedPurchasePrice;
            this.secondEstimatedPurchasePrice = secondEstimatedPurchasePrice;
            this.cost = cost;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumNds
        {
            get { return sumNds; }
            set { sumNds = value; }
        }

        public decimal? SumWithoutNds
        {
            get { return sumWithoutNds; }
            set { sumWithoutNds = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? SecondaryAmount
        {
            get { return secondaryAmount; }
            set { secondaryAmount = value; }
        }

        public decimal? DocumentSum
        {
            get { return documentSum; }
            set { documentSum = value; }
        }

        public decimal? FirstEstimatedPurchasePrice
        {
            get { return firstEstimatedPurchasePrice; }
            set { firstEstimatedPurchasePrice = value; }
        }

        public decimal? SecondEstimatedPurchasePrice
        {
            get { return secondEstimatedPurchasePrice; }
            set { secondEstimatedPurchasePrice = value; }
        }

        public List<Store> Stores
        {
            get { return stores; }
            set { stores = value; }
        }

        public decimal? Cost
        {
            get { return cost; }
            set { cost = value; }
        }

    }

    [DataClass("StoreTurnoverItem")]
    public partial class StoreTurnoverItem
    {
        private string name;
        private ReportColumn amountColumn;
        private ReportColumn sumColumn;
        private ReportColumn ndsColumn;
        private ReportBand itemBand;

        protected StoreTurnoverItem() {}

        public StoreTurnoverItem(string name, ReportColumn amountColumn, ReportColumn sumColumn, ReportColumn ndsColumn, ReportBand itemBand)
        {
            this.name = name;
            this.amountColumn = amountColumn;
            this.sumColumn = sumColumn;
            this.ndsColumn = ndsColumn;
            this.itemBand = itemBand;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public ReportColumn AmountColumn
        {
            get { return amountColumn; }
            set { amountColumn = value; }
        }

        public ReportColumn SumColumn
        {
            get { return sumColumn; }
            set { sumColumn = value; }
        }

        public ReportColumn NdsColumn
        {
            get { return ndsColumn; }
            set { ndsColumn = value; }
        }

        public ReportBand ItemBand
        {
            get { return itemBand; }
            set { itemBand = value; }
        }

    }

    [DataClass("StoreTurnoverReport")]
    public partial class StoreTurnoverReport : RestoReport
    {
        private DateInterval reportInterval;
        private ReportBand productBand;
        private ReportBand invisibleServiceColumnsBand;
        private ReportColumn codeColumn;
        private ReportColumn productColumn;
        private ReportColumn categoryColumn;
        private ReportColumn groupColumn;
        private ReportColumn secondGroupColumn;
        private ReportColumn thirdGroupColumn;
        private ReportColumn measureUnit;
        private ReportColumn hasCostCorrectionTransactionColumn;
        private StoreTurnoverItem startItem;
        private StoreTurnoverItem endItem;
        private StoreTurnoverItem invoiceItem;
        private StoreTurnoverItem counteragentInvoiceItem;
        private StoreTurnoverItem counteragentReturnItem;
        private StoreTurnoverItem salesItem;
        private StoreTurnoverItem transferItem;
        private StoreTurnoverItem writeoffItem;
        private StoreTurnoverItem inventorySurplusItem;
        private StoreTurnoverItem inventoryShortageItem;
        private StoreTurnoverItem outgoingInvoiceItem;
        private StoreTurnoverItem returnedItem;
        private StoreTurnoverItem incomingReturnedItem;
        private StoreTurnoverItem inventoryItem;
        private StoreTurnoverItem disassembleItem;
        private StoreTurnoverItem transformationItem;
        private StoreTurnoverItem productionItem;
        private bool withoutNds;
        private bool withCounteragentItem;
        private bool extendedReport;
        private HashSet<User> counteragents;

        protected StoreTurnoverReport() {}

        public StoreTurnoverReport(Guid id, DateTime? printDate, string companyName, string reportName, string reportCode, bool autoWidth, bool allowSort, DateInterval reportInterval, ReportBand productBand, ReportBand invisibleServiceColumnsBand, ReportColumn codeColumn, ReportColumn productColumn, ReportColumn categoryColumn, ReportColumn groupColumn, ReportColumn secondGroupColumn, ReportColumn thirdGroupColumn, ReportColumn measureUnit, ReportColumn hasCostCorrectionTransactionColumn, StoreTurnoverItem startItem, StoreTurnoverItem endItem, StoreTurnoverItem invoiceItem, StoreTurnoverItem counteragentInvoiceItem, StoreTurnoverItem counteragentReturnItem, StoreTurnoverItem salesItem, StoreTurnoverItem transferItem, StoreTurnoverItem writeoffItem, StoreTurnoverItem inventorySurplusItem, StoreTurnoverItem inventoryShortageItem, StoreTurnoverItem outgoingInvoiceItem, StoreTurnoverItem returnedItem, StoreTurnoverItem incomingReturnedItem, StoreTurnoverItem inventoryItem, StoreTurnoverItem disassembleItem, StoreTurnoverItem transformationItem, StoreTurnoverItem productionItem, bool withoutNds, bool withCounteragentItem, bool extendedReport)
            : base(id, printDate, companyName, reportName, reportCode, autoWidth, allowSort)
        {
            this.reportInterval = reportInterval;
            this.productBand = productBand;
            this.invisibleServiceColumnsBand = invisibleServiceColumnsBand;
            this.codeColumn = codeColumn;
            this.productColumn = productColumn;
            this.categoryColumn = categoryColumn;
            this.groupColumn = groupColumn;
            this.secondGroupColumn = secondGroupColumn;
            this.thirdGroupColumn = thirdGroupColumn;
            this.measureUnit = measureUnit;
            this.hasCostCorrectionTransactionColumn = hasCostCorrectionTransactionColumn;
            this.startItem = startItem;
            this.endItem = endItem;
            this.invoiceItem = invoiceItem;
            this.counteragentInvoiceItem = counteragentInvoiceItem;
            this.counteragentReturnItem = counteragentReturnItem;
            this.salesItem = salesItem;
            this.transferItem = transferItem;
            this.writeoffItem = writeoffItem;
            this.inventorySurplusItem = inventorySurplusItem;
            this.inventoryShortageItem = inventoryShortageItem;
            this.outgoingInvoiceItem = outgoingInvoiceItem;
            this.returnedItem = returnedItem;
            this.incomingReturnedItem = incomingReturnedItem;
            this.inventoryItem = inventoryItem;
            this.disassembleItem = disassembleItem;
            this.transformationItem = transformationItem;
            this.productionItem = productionItem;
            this.withoutNds = withoutNds;
            this.withCounteragentItem = withCounteragentItem;
            this.extendedReport = extendedReport;
        }

        public StoreTurnoverReport(Guid id)
            : base(id)
        {

        }

        public DateInterval ReportInterval
        {
            get { return reportInterval; }
            set { reportInterval = value; }
        }

        public ReportBand ProductBand
        {
            get { return productBand; }
            set { productBand = value; }
        }

        public ReportBand InvisibleServiceColumnsBand
        {
            get { return invisibleServiceColumnsBand; }
            set { invisibleServiceColumnsBand = value; }
        }

        public ReportColumn CodeColumn
        {
            get { return codeColumn; }
            set { codeColumn = value; }
        }

        public ReportColumn ProductColumn
        {
            get { return productColumn; }
            set { productColumn = value; }
        }

        public ReportColumn CategoryColumn
        {
            get { return categoryColumn; }
            set { categoryColumn = value; }
        }

        public ReportColumn GroupColumn
        {
            get { return groupColumn; }
            set { groupColumn = value; }
        }

        public ReportColumn SecondGroupColumn
        {
            get { return secondGroupColumn; }
            set { secondGroupColumn = value; }
        }

        public ReportColumn ThirdGroupColumn
        {
            get { return thirdGroupColumn; }
            set { thirdGroupColumn = value; }
        }

        public ReportColumn MeasureUnit
        {
            get { return measureUnit; }
            set { measureUnit = value; }
        }

        public ReportColumn HasCostCorrectionTransactionColumn
        {
            get { return hasCostCorrectionTransactionColumn; }
            set { hasCostCorrectionTransactionColumn = value; }
        }

        public StoreTurnoverItem StartItem
        {
            get { return startItem; }
            set { startItem = value; }
        }

        public StoreTurnoverItem EndItem
        {
            get { return endItem; }
            set { endItem = value; }
        }

        public StoreTurnoverItem InvoiceItem
        {
            get { return invoiceItem; }
            set { invoiceItem = value; }
        }

        public StoreTurnoverItem CounteragentInvoiceItem
        {
            get { return counteragentInvoiceItem; }
            set { counteragentInvoiceItem = value; }
        }

        public StoreTurnoverItem CounteragentReturnItem
        {
            get { return counteragentReturnItem; }
            set { counteragentReturnItem = value; }
        }

        public StoreTurnoverItem SalesItem
        {
            get { return salesItem; }
            set { salesItem = value; }
        }

        public StoreTurnoverItem TransferItem
        {
            get { return transferItem; }
            set { transferItem = value; }
        }

        public StoreTurnoverItem WriteoffItem
        {
            get { return writeoffItem; }
            set { writeoffItem = value; }
        }

        public StoreTurnoverItem InventorySurplusItem
        {
            get { return inventorySurplusItem; }
            set { inventorySurplusItem = value; }
        }

        public StoreTurnoverItem InventoryShortageItem
        {
            get { return inventoryShortageItem; }
            set { inventoryShortageItem = value; }
        }

        public StoreTurnoverItem OutgoingInvoiceItem
        {
            get { return outgoingInvoiceItem; }
            set { outgoingInvoiceItem = value; }
        }

        public StoreTurnoverItem ReturnedItem
        {
            get { return returnedItem; }
            set { returnedItem = value; }
        }

        public StoreTurnoverItem IncomingReturnedItem
        {
            get { return incomingReturnedItem; }
            set { incomingReturnedItem = value; }
        }

        public StoreTurnoverItem InventoryItem
        {
            get { return inventoryItem; }
            set { inventoryItem = value; }
        }

        public StoreTurnoverItem DisassembleItem
        {
            get { return disassembleItem; }
            set { disassembleItem = value; }
        }

        public StoreTurnoverItem TransformationItem
        {
            get { return transformationItem; }
            set { transformationItem = value; }
        }

        public StoreTurnoverItem ProductionItem
        {
            get { return productionItem; }
            set { productionItem = value; }
        }

        public bool WithoutNds
        {
            get { return withoutNds; }
            set { withoutNds = value; }
        }

        public bool WithCounteragentItem
        {
            get { return withCounteragentItem; }
            set { withCounteragentItem = value; }
        }

        public bool ExtendedReport
        {
            get { return extendedReport; }
            set { extendedReport = value; }
        }

        public HashSet<User> Counteragents
        {
            get { return counteragents; }
            set { counteragents = value; }
        }

    }

    [DataClass("BanquetSaleItem")]
    public partial class BanquetSaleItem : SaleItem
    {
        private Guid? reserveId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public BanquetSaleItem() {}

        public BanquetSaleItem(Guid id, Guid? orderId, int orderNum, Product dishInfo, decimal? dishPrice, decimal? dishAmount, decimal? dishSum, decimal? dishDiscountSum, Store store, Guid? reserveId)
            : base(id, orderId, orderNum, dishInfo, dishPrice, dishAmount, dishSum, dishDiscountSum, store)
        {
            this.reserveId = reserveId;
        }

        public BanquetSaleItem(Guid id)
            : base(id)
        {

        }

        public Guid? ReserveId
        {
            get { return reserveId; }
            set { reserveId = value; }
        }

    }

    [DataClass("CloseSessionEvent")]
    public partial class CloseSessionEvent : UserActionEvent
    {
        private int sessionNumber;
        private int? fiscalNumber;
        private int cashRegNumber;
        private string cashRegSerial;
        private string taxpayerIdNumber;
        private string accountingReasonCode;
        private DateTime? openDate;
        private DateTime? closeDate;
        private DateTime? acceptDate;
        private User manager;
        private User responsibleUser;
        private decimal? sessionStartCash;
        private decimal? payOrders;
        private decimal? sumWriteoffOrders;
        private decimal? salesCash;
        private decimal? salesCredit;
        private decimal? salesCard;
        private decimal? payIn;
        private decimal? payOut;
        private decimal? payIncome;
        private decimal? cashRemain;
        private decimal? cashDiff;
        private ClosedSessionStatus sessionStatus;
        private Conception conception;
        private PointOfSale pointOfSale;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CloseSessionEvent() {}

        public CloseSessionEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment, int sessionNumber, int? fiscalNumber, int cashRegNumber, string cashRegSerial, DateTime? openDate, DateTime? closeDate, DateTime? acceptDate, User manager, User responsibleUser, decimal? sessionStartCash, decimal? payOrders, decimal? sumWriteoffOrders, decimal? salesCash, decimal? salesCredit, decimal? salesCard, decimal? payIn, decimal? payOut, decimal? payIncome, decimal? cashRemain, decimal? cashDiff, ClosedSessionStatus sessionStatus)
            : base(id, department, date, eventType, user, terminal, session, auth, comment)
        {
            this.sessionNumber = sessionNumber;
            this.fiscalNumber = fiscalNumber;
            this.cashRegNumber = cashRegNumber;
            this.cashRegSerial = cashRegSerial;
            this.openDate = openDate;
            this.closeDate = closeDate;
            this.acceptDate = acceptDate;
            this.manager = manager;
            this.responsibleUser = responsibleUser;
            this.sessionStartCash = sessionStartCash;
            this.payOrders = payOrders;
            this.sumWriteoffOrders = sumWriteoffOrders;
            this.salesCash = salesCash;
            this.salesCredit = salesCredit;
            this.salesCard = salesCard;
            this.payIn = payIn;
            this.payOut = payOut;
            this.payIncome = payIncome;
            this.cashRemain = cashRemain;
            this.cashDiff = cashDiff;
            this.sessionStatus = sessionStatus;
        }

        public CloseSessionEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public int SessionNumber
        {
            get { return sessionNumber; }
            set { sessionNumber = value; }
        }

        public int? FiscalNumber
        {
            get { return fiscalNumber; }
            set { fiscalNumber = value; }
        }

        public int CashRegNumber
        {
            get { return cashRegNumber; }
            set { cashRegNumber = value; }
        }

        public string CashRegSerial
        {
            get { return cashRegSerial; }
            set { cashRegSerial = value; }
        }

        [CanBeNull]
        public string TaxpayerIdNumber
        {
            get { return taxpayerIdNumber; }
            set { taxpayerIdNumber = value; }
        }

        [CanBeNull]
        public string AccountingReasonCode
        {
            get { return accountingReasonCode; }
            set { accountingReasonCode = value; }
        }

        public DateTime? OpenDate
        {
            get { return openDate; }
            set { openDate = value; }
        }

        public DateTime? CloseDate
        {
            get { return closeDate; }
            set { closeDate = value; }
        }

        public DateTime? AcceptDate
        {
            get { return acceptDate; }
            set { acceptDate = value; }
        }

        public User Manager
        {
            get { return manager; }
            set { manager = value; }
        }

        public User ResponsibleUser
        {
            get { return responsibleUser; }
            set { responsibleUser = value; }
        }

        public decimal? SessionStartCash
        {
            get { return sessionStartCash; }
            set { sessionStartCash = value; }
        }

        public decimal? PayOrders
        {
            get { return payOrders; }
            set { payOrders = value; }
        }

        public decimal? SumWriteoffOrders
        {
            get { return sumWriteoffOrders; }
            set { sumWriteoffOrders = value; }
        }

        public decimal? SalesCash
        {
            get { return salesCash; }
            set { salesCash = value; }
        }

        public decimal? SalesCredit
        {
            get { return salesCredit; }
            set { salesCredit = value; }
        }

        public decimal? SalesCard
        {
            get { return salesCard; }
            set { salesCard = value; }
        }

        public decimal? PayIn
        {
            get { return payIn; }
            set { payIn = value; }
        }

        public decimal? PayOut
        {
            get { return payOut; }
            set { payOut = value; }
        }

        public decimal? PayIncome
        {
            get { return payIncome; }
            set { payIncome = value; }
        }

        public decimal? CashRemain
        {
            get { return cashRemain; }
            set { cashRemain = value; }
        }

        public decimal? CashDiff
        {
            get { return cashDiff; }
            set { cashDiff = value; }
        }

        public ClosedSessionStatus SessionStatus
        {
            get { return sessionStatus; }
            set { sessionStatus = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        [CanBeNull]
        public PointOfSale PointOfSale
        {
            get { return pointOfSale; }
            set { pointOfSale = value; }
        }

    }

    [DataClass("ClosedSessionDocument")]
    public partial class ClosedSessionDocument : ProcessableDocument
    {
        private CafeSessionProperties session;
        private Account accountShortage;
        private User counteragentShortage;
        private Account accountSurplus;
        private User counteragentSurplus;
        private DepartmentEntity department;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ClosedSessionDocumentItem> items = new List<ClosedSessionDocumentItem>();

        protected ClosedSessionDocument() {}

        public ClosedSessionDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, CafeSessionProperties session, Account accountShortage, User counteragentShortage, Account accountSurplus)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.session = session;
            this.accountShortage = accountShortage;
            this.counteragentShortage = counteragentShortage;
            this.accountSurplus = accountSurplus;
        }

        public ClosedSessionDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public CafeSessionProperties Session
        {
            get { return session; }
            set { session = value; }
        }

        public Account AccountShortage
        {
            get { return accountShortage; }
            set { accountShortage = value; }
        }

        public User CounteragentShortage
        {
            get { return counteragentShortage; }
            set { counteragentShortage = value; }
        }

        public Account AccountSurplus
        {
            get { return accountSurplus; }
            set { accountSurplus = value; }
        }

        [CanBeNull]
        public User CounteragentSurplus
        {
            get { return counteragentSurplus; }
            set { counteragentSurplus = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [NotNull]
        public List<ClosedSessionDocumentItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("ClosedSessionDocumentItem")]
    public partial class ClosedSessionDocumentItem : Entity
    {
        [Obsolete("Deprecated in Java code")]
        [NotNull, NotNullField]
        private ClosedSessionDocument document;
        private Guid? transactionId;
        private decimal? sumReal;
        private Account accountOverride;
        private User counteragentOverride;
        [NotNull, NotNullField]
        private CachedSwitchable<Conception> conceptionOverride;
        [NotNull, NotNullField]
        private CachedSwitchable<CashFlowCategory> cashFlowCategoryOverride;
        private ClosedSessionStatus status;
        private string comment;

        protected ClosedSessionDocumentItem() {}

        public ClosedSessionDocumentItem(Guid id, ClosedSessionDocument document, Guid? transactionId, decimal? sumReal, Account accountOverride, User counteragentOverride, CachedSwitchable<Conception> conceptionOverride, CachedSwitchable<CashFlowCategory> cashFlowCategoryOverride, ClosedSessionStatus status, string comment)
            : base(id)
        {
            this.document = document;
            this.transactionId = transactionId;
            this.sumReal = sumReal;
            this.accountOverride = accountOverride;
            this.counteragentOverride = counteragentOverride;
            this.conceptionOverride = conceptionOverride;
            this.cashFlowCategoryOverride = cashFlowCategoryOverride;
            this.status = status;
            this.comment = comment;
        }

        public ClosedSessionDocumentItem(Guid id, ClosedSessionDocument document, CachedSwitchable<Conception> conceptionOverride, CachedSwitchable<CashFlowCategory> cashFlowCategoryOverride)
            : base(id)
        {
            this.document = document;
            this.conceptionOverride = conceptionOverride;
            this.cashFlowCategoryOverride = cashFlowCategoryOverride;
        }

        [Obsolete("Deprecated in Java code")]
        [NotNull]
        public ClosedSessionDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

        public Guid? TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public decimal? SumReal
        {
            get { return sumReal; }
            set { sumReal = value; }
        }

        public Account AccountOverride
        {
            get { return accountOverride; }
            set { accountOverride = value; }
        }

        public User CounteragentOverride
        {
            get { return counteragentOverride; }
            set { counteragentOverride = value; }
        }

        [NotNull]
        public CachedSwitchable<Conception> ConceptionOverride
        {
            get { return conceptionOverride; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  conceptionOverride = value;
            }
        }

        [NotNull]
        public CachedSwitchable<CashFlowCategory> CashFlowCategoryOverride
        {
            get { return cashFlowCategoryOverride; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cashFlowCategoryOverride = value;
            }
        }

        public ClosedSessionStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("ClosedSessionStatus")]
    public enum ClosedSessionStatus
    {
        UNACCEPTED,
        ACCEPTED,
        HASWARNINGS
    }

    [DataClass("ClosedSessionTransactionGroup")]
    public enum ClosedSessionTransactionGroup
    {
        CARD,
        CREDIT,
        PAYOUT,
        PAYIN
    }

    [DataClass("ClosedSessionTransactionInfo")]
    public partial class ClosedSessionTransactionInfo
    {
        private Guid? id;
        private DateTime? date;
        private DateTime? creationDate;
        private ClosedSessionTransactionGroup group;
        private Account account;
        private User counteragent;
        private PaymentType paymentType;
        private TransactionType type;
        private decimal? sum;
        private string comment;
        private AuthData auth;
        private Guid? causeEventId;
        private User cashier;
        private DepartmentEntity department;
        private CashFlowCategory cashFlowCategory;

        protected ClosedSessionTransactionInfo() {}

        public ClosedSessionTransactionInfo(Guid? id, DateTime? date, DateTime? creationDate, ClosedSessionTransactionGroup group, Account account, User counteragent, PaymentType paymentType, TransactionType type, decimal? sum, string comment, AuthData auth, Guid? causeEventId, User cashier, DepartmentEntity department, CashFlowCategory cashFlowCategory)
        {
            this.id = id;
            this.date = date;
            this.creationDate = creationDate;
            this.group = group;
            this.account = account;
            this.counteragent = counteragent;
            this.paymentType = paymentType;
            this.type = type;
            this.sum = sum;
            this.comment = comment;
            this.auth = auth;
            this.causeEventId = causeEventId;
            this.cashier = cashier;
            this.department = department;
            this.cashFlowCategory = cashFlowCategory;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public DateTime? CreationDate
        {
            get { return creationDate; }
            set { creationDate = value; }
        }

        public ClosedSessionTransactionGroup Group
        {
            get { return group; }
            set { group = value; }
        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public PaymentType PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public TransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public AuthData Auth
        {
            get { return auth; }
            set { auth = value; }
        }

        public Guid? CauseEventId
        {
            get { return causeEventId; }
            set { causeEventId = value; }
        }

        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

    }

    [DataClass("DeliveryFlag")]
    [EnumClass]
    public partial class DeliveryFlag : LocalizableName<DeliveryFlag>
    {
        /// <summary> Доставка. </summary>
        public static readonly DeliveryFlag DELIVERY_ORDER = new DeliveryFlag("DELIVERY_ORDER");
        /// <summary> Без доставки. </summary>
        public static readonly DeliveryFlag ORDER_WITHOUT_DELIVERY = new DeliveryFlag("ORDER_WITHOUT_DELIVERY");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryFlag(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYFLAG_NAME_" + __value;
        }

        public static DeliveryFlag Parse(string value)
        {
            switch(value)
            {
                case "DELIVERY_ORDER": return DELIVERY_ORDER;
                case "ORDER_WITHOUT_DELIVERY": return ORDER_WITHOUT_DELIVERY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryFlag[] VALUES
        {
            get
            {
                return new []
                {
                    DELIVERY_ORDER, 
                    ORDER_WITHOUT_DELIVERY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliverySaleItem")]
    public partial class DeliverySaleItem : SaleItem
    {
        private Guid? deliveryId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DeliverySaleItem() {}

        public DeliverySaleItem(Guid id, Guid? orderId, int orderNum, Product dishInfo, decimal? dishPrice, decimal? dishAmount, decimal? dishSum, decimal? dishDiscountSum, Store store, Guid? deliveryId)
            : base(id, orderId, orderNum, dishInfo, dishPrice, dishAmount, dishSum, dishDiscountSum, store)
        {
            this.deliveryId = deliveryId;
        }

        public DeliverySaleItem(Guid id)
            : base(id)
        {

        }

        public Guid? DeliveryId
        {
            get { return deliveryId; }
            set { deliveryId = value; }
        }

    }

    [DataClass("DeliveryType")]
    [EnumClass]
    public partial class DeliveryType : LocalizableName<DeliveryType>
    {
        /// <summary> Самовывоз. </summary>
        public static readonly DeliveryType PICKUP = new DeliveryType("PICKUP");
        /// <summary> Курьером. </summary>
        public static readonly DeliveryType COURIER = new DeliveryType("COURIER");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYTYPE_NAME_" + __value;
        }

        public static DeliveryType Parse(string value)
        {
            switch(value)
            {
                case "PICKUP": return PICKUP;
                case "COURIER": return COURIER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryType[] VALUES
        {
            get
            {
                return new []
                {
                    PICKUP, 
                    COURIER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DiscountSums")]
    public partial class DiscountSums
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DiscountType, decimal> sums = new Dictionary<DiscountType, decimal>();


        [NotNull]
        public Dictionary<DiscountType, decimal> Sums
        {
            get { return sums; }
        }

    }

    [DataClass("DishDeletionStatus")]
    [EnumClass]
    public partial class DishDeletionStatus : LocalizableName<DishDeletionStatus>
    {
        /// <summary> Блюдо удалено без списания. </summary>
        public static readonly DishDeletionStatus DELETED_WITHOUT_WRITEOFF = new DishDeletionStatus("DELETED_WITHOUT_WRITEOFF");
        /// <summary> Блюдо удалено со списанием. </summary>
        public static readonly DishDeletionStatus DELETED_WITH_WRITEOFF = new DishDeletionStatus("DELETED_WITH_WRITEOFF");
        /// <summary> Блюдо не удалено. </summary>
        public static readonly DishDeletionStatus NOT_DELETED = new DishDeletionStatus("NOT_DELETED");

        private readonly string __value;
        private readonly string __nameResId;

        private DishDeletionStatus(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DISHDELETIONSTATUS_NAME_" + __value;
        }

        public static DishDeletionStatus Parse(string value)
        {
            switch(value)
            {
                case "DELETED_WITHOUT_WRITEOFF": return DELETED_WITHOUT_WRITEOFF;
                case "DELETED_WITH_WRITEOFF": return DELETED_WITH_WRITEOFF;
                case "NOT_DELETED": return NOT_DELETED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DishDeletionStatus[] VALUES
        {
            get
            {
                return new []
                {
                    DELETED_WITHOUT_WRITEOFF, 
                    DELETED_WITH_WRITEOFF, 
                    NOT_DELETED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ItemSaleEvent")]
    public partial class ItemSaleEvent : RestoEvent, WithSplitVat
    {
        private SalesVersionCompatibility versionCompatibility;
        private Account paymentSystemAccount;
        private Guid orderId;
        private OrderPaymentEvent order;
        [NotNull, NotNullField]
        private CafeSessionProperties session;
        private CookingPlaceType cookingPlaceType;
        private RestaurantSection cookingPlace;
        private RestaurantSection restaurantSection;
        private Store store;
        private Store storeTo;
        private PaymentType writeoffPaymentType;
        private Guid? paymentTransactionId;
        private DateTime? openTime;
        private DateTime? printTime;
        private DateTime? deliverTime;
        private int orderNum;
        [HasDefaultValue]
        private bool? orderBanquet = false;
        private string tableNum;
        private string comment;
        private string deletionComment;
        [NotNull, NotNullField]
        private Product dishInfo;
        private ProductSize dishSize;
        private decimal? dishPrice;
        private decimal? dishAmount;
        private decimal? dishPlanAmount;
        private decimal? dishSum;
        private decimal? discount;
        private decimal? discountSum;
        private decimal? increase;
        private decimal? increaseSum;
        private DiscountSums discountSums;
        private decimal? dishDiscountSum;
        [HasDefaultValue]
        private decimal? nds = 0;
        [HasDefaultValue]
        private decimal? ndsSum = 0;
        [HasDefaultValue]
        private decimal? ndsSumFiscal = 0;
        private TaxCategory taxCategory;
        [HasDefaultValue]
        private bool splitVat = false;
        private User waiter;
        private User incomeSupplier;
        private int prechequeGuestNum;
        private string deletionMethodId;
        private int? removalTypeId;
        private RemovalType removalType;
        private DishDeletionStatus deletedWithWriteoff;
        private Product soldWithDish;
        [HasDefaultValue]
        private bool? ndsEnabled = false;
        private Guid? soldWithItem;
        private bool? processed;
        private bool boughtFromCashdesk;
        private Conception conception;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ItemSaleEvent() {}

        public ItemSaleEvent(Guid id, DepartmentEntity department, DateTime date, SalesVersionCompatibility versionCompatibility, Guid orderId, CafeSessionProperties session, CookingPlaceType cookingPlaceType, RestaurantSection cookingPlace, RestaurantSection restaurantSection, Store store, PaymentType writeoffPaymentType, DateTime? openTime, DateTime? printTime, DateTime? deliverTime, int orderNum, string tableNum, Product dishInfo, decimal? dishPrice, decimal? dishAmount, decimal? dishPlanAmount, decimal? dishSum, decimal? discount, decimal? discountSum, decimal? increase, decimal? increaseSum, decimal? dishDiscountSum, User waiter, int prechequeGuestNum, string deletionMethodId, int? removalTypeId, RemovalType removalType, DishDeletionStatus deletedWithWriteoff, bool boughtFromCashdesk)
            : base(id, department, date)
        {
            this.versionCompatibility = versionCompatibility;
            this.orderId = orderId;
            this.session = session;
            this.cookingPlaceType = cookingPlaceType;
            this.cookingPlace = cookingPlace;
            this.restaurantSection = restaurantSection;
            this.store = store;
            this.writeoffPaymentType = writeoffPaymentType;
            this.openTime = openTime;
            this.printTime = printTime;
            this.deliverTime = deliverTime;
            this.orderNum = orderNum;
            this.tableNum = tableNum;
            this.dishInfo = dishInfo;
            this.dishPrice = dishPrice;
            this.dishAmount = dishAmount;
            this.dishPlanAmount = dishPlanAmount;
            this.dishSum = dishSum;
            this.discount = discount;
            this.discountSum = discountSum;
            this.increase = increase;
            this.increaseSum = increaseSum;
            this.dishDiscountSum = dishDiscountSum;
            this.waiter = waiter;
            this.prechequeGuestNum = prechequeGuestNum;
            this.deletionMethodId = deletionMethodId;
            this.removalTypeId = removalTypeId;
            this.removalType = removalType;
            this.deletedWithWriteoff = deletedWithWriteoff;
            this.boughtFromCashdesk = boughtFromCashdesk;
        }

        public ItemSaleEvent(Guid id, DateTime date, SalesVersionCompatibility versionCompatibility, Guid orderId, CafeSessionProperties session, Product dishInfo, bool boughtFromCashdesk)
            : base(id, date)
        {
            this.versionCompatibility = versionCompatibility;
            this.orderId = orderId;
            this.session = session;
            this.dishInfo = dishInfo;
            this.boughtFromCashdesk = boughtFromCashdesk;
        }

        public SalesVersionCompatibility VersionCompatibility
        {
            get { return versionCompatibility; }
            set { versionCompatibility = value; }
        }

        [CanBeNull]
        public Account PaymentSystemAccount
        {
            get { return paymentSystemAccount; }
            set { paymentSystemAccount = value; }
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        [CanBeNull]
        public OrderPaymentEvent Order
        {
            get { return order; }
            set { order = value; }
        }

        [NotNull]
        public CafeSessionProperties Session
        {
            get { return session; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  session = value;
            }
        }

        public CookingPlaceType CookingPlaceType
        {
            get { return cookingPlaceType; }
            set { cookingPlaceType = value; }
        }

        public RestaurantSection CookingPlace
        {
            get { return cookingPlace; }
            set { cookingPlace = value; }
        }

        public RestaurantSection RestaurantSection
        {
            get { return restaurantSection; }
            set { restaurantSection = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        [CanBeNull]
        public Store StoreTo
        {
            get { return storeTo; }
            set { storeTo = value; }
        }

        public PaymentType WriteoffPaymentType
        {
            get { return writeoffPaymentType; }
            set { writeoffPaymentType = value; }
        }

        public Guid? PaymentTransactionId
        {
            get { return paymentTransactionId; }
            set { paymentTransactionId = value; }
        }

        public DateTime? OpenTime
        {
            get { return openTime; }
            set { openTime = value; }
        }

        public DateTime? PrintTime
        {
            get { return printTime; }
            set { printTime = value; }
        }

        public DateTime? DeliverTime
        {
            get { return deliverTime; }
            set { deliverTime = value; }
        }

        public int OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

        public bool? OrderBanquet
        {
            get { return orderBanquet; }
            set { orderBanquet = value; }
        }

        public string TableNum
        {
            get { return tableNum; }
            set { tableNum = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public string DeletionComment
        {
            get { return deletionComment; }
            set { deletionComment = value; }
        }

        [NotNull]
        public Product DishInfo
        {
            get { return dishInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  dishInfo = value;
            }
        }

        [CanBeNull]
        public ProductSize DishSize
        {
            get { return dishSize; }
            set { dishSize = value; }
        }

        public decimal? DishPrice
        {
            get { return dishPrice; }
            set { dishPrice = value; }
        }

        public decimal? DishAmount
        {
            get { return dishAmount; }
            set { dishAmount = value; }
        }

        public decimal? DishPlanAmount
        {
            get { return dishPlanAmount; }
            set { dishPlanAmount = value; }
        }

        public decimal? DishSum
        {
            get { return dishSum; }
            set { dishSum = value; }
        }

        public decimal? Discount
        {
            get { return discount; }
            set { discount = value; }
        }

        public decimal? DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public decimal? Increase
        {
            get { return increase; }
            set { increase = value; }
        }

        public decimal? IncreaseSum
        {
            get { return increaseSum; }
            set { increaseSum = value; }
        }

        [CanBeNull]
        public DiscountSums DiscountSums
        {
            get { return discountSums; }
            set { discountSums = value; }
        }

        public decimal? DishDiscountSum
        {
            get { return dishDiscountSum; }
            set { dishDiscountSum = value; }
        }

        public decimal? Nds
        {
            get { return nds; }
            set { nds = value; }
        }

        public decimal? NdsSum
        {
            get { return ndsSum; }
            set { ndsSum = value; }
        }

        public decimal? NdsSumFiscal
        {
            get { return ndsSumFiscal; }
            set { ndsSumFiscal = value; }
        }

        [CanBeNull]
        public TaxCategory TaxCategory
        {
            get { return taxCategory; }
            set { taxCategory = value; }
        }

        public bool SplitVat
        {
            get { return splitVat; }
            set { splitVat = value; }
        }

        public User Waiter
        {
            get { return waiter; }
            set { waiter = value; }
        }

        [CanBeNull]
        public User IncomeSupplier
        {
            get { return incomeSupplier; }
            set { incomeSupplier = value; }
        }

        public int PrechequeGuestNum
        {
            get { return prechequeGuestNum; }
            set { prechequeGuestNum = value; }
        }

        public string DeletionMethodId
        {
            get { return deletionMethodId; }
            set { deletionMethodId = value; }
        }

        public int? RemovalTypeId
        {
            get { return removalTypeId; }
            set { removalTypeId = value; }
        }

        public RemovalType RemovalType
        {
            get { return removalType; }
            set { removalType = value; }
        }

        public DishDeletionStatus DeletedWithWriteoff
        {
            get { return deletedWithWriteoff; }
            set { deletedWithWriteoff = value; }
        }

        [CanBeNull]
        public Product SoldWithDish
        {
            get { return soldWithDish; }
            set { soldWithDish = value; }
        }

        public bool? NdsEnabled
        {
            get { return ndsEnabled; }
            set { ndsEnabled = value; }
        }

        public Guid? SoldWithItem
        {
            get { return soldWithItem; }
            set { soldWithItem = value; }
        }

        public bool? Processed
        {
            get { return processed; }
            set { processed = value; }
        }

        public bool BoughtFromCashdesk
        {
            get { return boughtFromCashdesk; }
            set { boughtFromCashdesk = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

    }

    [DataClass("OrderCloseInfo")]
    public partial class OrderCloseInfo
    {
        private Guid? orderId;
        private Group group;
        private decimal? changeSum;
        private bool atEmployeeExpense;
        private WriteoffPaymentItem writeoffItem;
        private User cashier;

        protected OrderCloseInfo() {}

        public OrderCloseInfo(Guid? orderId, Group group, decimal? changeSum, bool atEmployeeExpense, WriteoffPaymentItem writeoffItem, User cashier)
        {
            this.orderId = orderId;
            this.group = group;
            this.changeSum = changeSum;
            this.atEmployeeExpense = atEmployeeExpense;
            this.writeoffItem = writeoffItem;
            this.cashier = cashier;
        }
        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

        public decimal? ChangeSum
        {
            get { return changeSum; }
            set { changeSum = value; }
        }

        public bool AtEmployeeExpense
        {
            get { return atEmployeeExpense; }
            set { atEmployeeExpense = value; }
        }

        public WriteoffPaymentItem WriteoffItem
        {
            get { return writeoffItem; }
            set { writeoffItem = value; }
        }

        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

    }

    [DataClass("OrderCustomer")]
    public partial class OrderCustomer
    {
        private DateTime date;
        private Guid orderPaymentEventId;
        private Guid orderId;
        private Guid customerId;

        protected OrderCustomer() {}

        public OrderCustomer(DateTime date, Guid orderPaymentEventId, Guid orderId, Guid customerId)
        {
            this.date = date;
            this.orderPaymentEventId = orderPaymentEventId;
            this.orderId = orderId;
            this.customerId = customerId;
        }
        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public Guid OrderPaymentEventId
        {
            get { return orderPaymentEventId; }
            set { orderPaymentEventId = value; }
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public Guid CustomerId
        {
            get { return customerId; }
            set { customerId = value; }
        }

    }

    [DataClass("OrderCustomerKey")]
    public partial class OrderCustomerKey
    {
        private Guid orderId;
        private Guid customerId;

        protected OrderCustomerKey() {}

        public OrderCustomerKey(Guid orderId, Guid customerId)
        {
            this.orderId = orderId;
            this.customerId = customerId;
        }
        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public Guid CustomerId
        {
            get { return customerId; }
            set { customerId = value; }
        }

    }

    [DataClass("OrderPaymentEvent")]
    public partial class OrderPaymentEvent : RestoEvent
    {
        private SalesVersionCompatibility versionCompatibility;
        private User cashier;
        private CashRegister cashRegister;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<int> fiscalChequeNumbers = new List<int>();
        private decimal? sumCash;
        private decimal? sumCard;
        [Obsolete("Deprecated in Java code")]
        private decimal? sumPlanned;
        [Obsolete("Deprecated in Java code")]
        private bool? unmodifiable;
        private NonCashPaymentType nonCashPaymentType;
        private PaymentType writeoffPaymentType;
        private decimal? sumCredit;
        private decimal? sumPrepay;
        [HasDefaultValue]
        private decimal? changeSum = 0;
        private string writeoffReason;
        private User writeoffUser;
        [HasDefaultValue]
        private int? writeoffRatio = 1;
        private bool? detailedCheque;
        [HasDefaultValue]
        private bool? orderDeleted = false;
        private PriceCategoryInfo priceCategoryInfo;
        private OrderType orderType;
        private string originName;
        private string comment;
        private string externalNumber;
        [HasDefaultValue]
        private bool isDelivery = false;
        [HasDefaultValue]
        private int divisions = 1;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<OrderCustomer> customers = new List<OrderCustomer>();
        private User counteragent;
        private Guid orderId;
        private int orderNum;
        private OrderGroupInfo groupOrder;
        private OrderSourceInfo sourceOrder;
        private string tableNum;
        private decimal? orderSum;
        private decimal? receiptsSum;
        private decimal? orderSumAfterDiscount;
        private bool isBanquet;
        private DateTime? openTime;
        private DateTime? closeTime;
        private DateTime? prechequeTime;
        private int numGuests;
        private string problemOpName;
        private int problemPriority;
        private bool? storned;
        private ProblemOpType problemType;
        [NotNull, NotNullField]
        private CafeSessionProperties session;
        private AuthData auth;
        private User user;
        private User waiter;
        private WaiterTeam waiterTeam;
        private RestaurantSection restaurantSection;
        private OrderSumCorrection discount;
        private OrderCouponInfo couponInfo;
        private OrderSumCorrection increase;
        private ClientPriceCategory priceCategory;
        private Guid? vatInvoiceId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> publicExternalData = new Dictionary<string, string>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public OrderPaymentEvent() {}

        public OrderPaymentEvent(Guid id, DepartmentEntity department, DateTime date, SalesVersionCompatibility versionCompatibility, User cashier, CashRegister cashRegister, decimal? sumCash, decimal? sumCard, decimal? sumPlanned, bool? unmodifiable, NonCashPaymentType nonCashPaymentType, PaymentType writeoffPaymentType, decimal? sumCredit, decimal? sumPrepay, bool? detailedCheque, Guid orderId, int orderNum, string tableNum, decimal? orderSum, decimal? receiptsSum, decimal? orderSumAfterDiscount, bool isBanquet, DateTime? openTime, DateTime? closeTime, DateTime? prechequeTime, int numGuests, string problemOpName, int problemPriority, bool? storned, ProblemOpType problemType, CafeSessionProperties session, AuthData auth, User user, User waiter, RestaurantSection restaurantSection, OrderSumCorrection discount, OrderSumCorrection increase)
            : base(id, department, date)
        {
            this.versionCompatibility = versionCompatibility;
            this.cashier = cashier;
            this.cashRegister = cashRegister;
            this.sumCash = sumCash;
            this.sumCard = sumCard;
            this.sumPlanned = sumPlanned;
            this.unmodifiable = unmodifiable;
            this.nonCashPaymentType = nonCashPaymentType;
            this.writeoffPaymentType = writeoffPaymentType;
            this.sumCredit = sumCredit;
            this.sumPrepay = sumPrepay;
            this.detailedCheque = detailedCheque;
            this.orderId = orderId;
            this.orderNum = orderNum;
            this.tableNum = tableNum;
            this.orderSum = orderSum;
            this.receiptsSum = receiptsSum;
            this.orderSumAfterDiscount = orderSumAfterDiscount;
            this.isBanquet = isBanquet;
            this.openTime = openTime;
            this.closeTime = closeTime;
            this.prechequeTime = prechequeTime;
            this.numGuests = numGuests;
            this.problemOpName = problemOpName;
            this.problemPriority = problemPriority;
            this.storned = storned;
            this.problemType = problemType;
            this.session = session;
            this.auth = auth;
            this.user = user;
            this.waiter = waiter;
            this.restaurantSection = restaurantSection;
            this.discount = discount;
            this.increase = increase;
        }

        public OrderPaymentEvent(Guid id, DateTime date, SalesVersionCompatibility versionCompatibility, Guid orderId, CafeSessionProperties session)
            : base(id, date)
        {
            this.versionCompatibility = versionCompatibility;
            this.orderId = orderId;
            this.session = session;
        }

        public SalesVersionCompatibility VersionCompatibility
        {
            get { return versionCompatibility; }
            set { versionCompatibility = value; }
        }

        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

        public CashRegister CashRegister
        {
            get { return cashRegister; }
            set { cashRegister = value; }
        }

        [NotNull]
        public List<int> FiscalChequeNumbers
        {
            get { return fiscalChequeNumbers; }
        }

        public decimal? SumCash
        {
            get { return sumCash; }
            set { sumCash = value; }
        }

        public decimal? SumCard
        {
            get { return sumCard; }
            set { sumCard = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public decimal? SumPlanned
        {
            get { return sumPlanned; }
            set { sumPlanned = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public bool? Unmodifiable
        {
            get { return unmodifiable; }
            set { unmodifiable = value; }
        }

        public NonCashPaymentType NonCashPaymentType
        {
            get { return nonCashPaymentType; }
            set { nonCashPaymentType = value; }
        }

        public PaymentType WriteoffPaymentType
        {
            get { return writeoffPaymentType; }
            set { writeoffPaymentType = value; }
        }

        public decimal? SumCredit
        {
            get { return sumCredit; }
            set { sumCredit = value; }
        }

        public decimal? SumPrepay
        {
            get { return sumPrepay; }
            set { sumPrepay = value; }
        }

        public decimal? ChangeSum
        {
            get { return changeSum; }
            set { changeSum = value; }
        }

        [CanBeNull]
        public string WriteoffReason
        {
            get { return writeoffReason; }
            set { writeoffReason = value; }
        }

        [CanBeNull]
        public User WriteoffUser
        {
            get { return writeoffUser; }
            set { writeoffUser = value; }
        }

        public int? WriteoffRatio
        {
            get { return writeoffRatio; }
            set { writeoffRatio = value; }
        }

        public bool? DetailedCheque
        {
            get { return detailedCheque; }
            set { detailedCheque = value; }
        }

        public bool? OrderDeleted
        {
            get { return orderDeleted; }
            set { orderDeleted = value; }
        }

        [CanBeNull]
        public PriceCategoryInfo PriceCategoryInfo
        {
            get { return priceCategoryInfo; }
            set { priceCategoryInfo = value; }
        }

        [CanBeNull]
        public OrderType OrderType
        {
            get { return orderType; }
            set { orderType = value; }
        }

        [CanBeNull]
        public string OriginName
        {
            get { return originName; }
            set { originName = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public string ExternalNumber
        {
            get { return externalNumber; }
            set { externalNumber = value; }
        }

        public bool IsDelivery
        {
            get { return isDelivery; }
            set { isDelivery = value; }
        }

        public int Divisions
        {
            get { return divisions; }
            set { divisions = value; }
        }

        [NotNull]
        public List<OrderCustomer> Customers
        {
            get { return customers; }
        }

        [CanBeNull]
        public User Counteragent
        {
            get { return counteragent; }
            set { counteragent = value; }
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

        [CanBeNull]
        public OrderGroupInfo GroupOrder
        {
            get { return groupOrder; }
            set { groupOrder = value; }
        }

        [CanBeNull]
        public OrderSourceInfo SourceOrder
        {
            get { return sourceOrder; }
            set { sourceOrder = value; }
        }

        public string TableNum
        {
            get { return tableNum; }
            set { tableNum = value; }
        }

        public decimal? OrderSum
        {
            get { return orderSum; }
            set { orderSum = value; }
        }

        public decimal? ReceiptsSum
        {
            get { return receiptsSum; }
            set { receiptsSum = value; }
        }

        public decimal? OrderSumAfterDiscount
        {
            get { return orderSumAfterDiscount; }
            set { orderSumAfterDiscount = value; }
        }

        public bool IsBanquet
        {
            get { return isBanquet; }
            set { isBanquet = value; }
        }

        public DateTime? OpenTime
        {
            get { return openTime; }
            set { openTime = value; }
        }

        public DateTime? CloseTime
        {
            get { return closeTime; }
            set { closeTime = value; }
        }

        public DateTime? PrechequeTime
        {
            get { return prechequeTime; }
            set { prechequeTime = value; }
        }

        public int NumGuests
        {
            get { return numGuests; }
            set { numGuests = value; }
        }

        public string ProblemOpName
        {
            get { return problemOpName; }
            set { problemOpName = value; }
        }

        public int ProblemPriority
        {
            get { return problemPriority; }
            set { problemPriority = value; }
        }

        public bool? Storned
        {
            get { return storned; }
            set { storned = value; }
        }

        public ProblemOpType ProblemType
        {
            get { return problemType; }
            set { problemType = value; }
        }

        [NotNull]
        public CafeSessionProperties Session
        {
            get { return session; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  session = value;
            }
        }

        public AuthData Auth
        {
            get { return auth; }
            set { auth = value; }
        }

        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public User Waiter
        {
            get { return waiter; }
            set { waiter = value; }
        }

        [CanBeNull]
        public WaiterTeam WaiterTeam
        {
            get { return waiterTeam; }
            set { waiterTeam = value; }
        }

        public RestaurantSection RestaurantSection
        {
            get { return restaurantSection; }
            set { restaurantSection = value; }
        }

        public OrderSumCorrection Discount
        {
            get { return discount; }
            set { discount = value; }
        }

        [CanBeNull]
        public OrderCouponInfo CouponInfo
        {
            get { return couponInfo; }
            set { couponInfo = value; }
        }

        public OrderSumCorrection Increase
        {
            get { return increase; }
            set { increase = value; }
        }

        [CanBeNull]
        public ClientPriceCategory PriceCategory
        {
            get { return priceCategory; }
            set { priceCategory = value; }
        }

        public Guid? VatInvoiceId
        {
            get { return vatInvoiceId; }
            set { vatInvoiceId = value; }
        }

        [NotNull]
        public Dictionary<string, string> PublicExternalData
        {
            get { return publicExternalData; }
        }

    }

    [DataClass("OrderServiceType")]
    [EnumClass]
    public partial class OrderServiceType : LocalizableName<OrderServiceType>
    {
        /// <summary> Обычный заказ. </summary>
        public static readonly OrderServiceType COMMON = new OrderServiceType("COMMON");
        /// <summary> Доставка курьером. </summary>
        public static readonly OrderServiceType DELIVERY_BY_COURIER = new OrderServiceType("DELIVERY_BY_COURIER");
        /// <summary> Доставка самовывоз. </summary>
        public static readonly OrderServiceType DELIVERY_PICKUP = new OrderServiceType("DELIVERY_PICKUP");

        private readonly string __value;
        private readonly string __nameResId;

        private OrderServiceType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ORDERSERVICETYPE_NAME_" + __value;
        }

        public static OrderServiceType Parse(string value)
        {
            switch(value)
            {
                case "COMMON": return COMMON;
                case "DELIVERY_BY_COURIER": return DELIVERY_BY_COURIER;
                case "DELIVERY_PICKUP": return DELIVERY_PICKUP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OrderServiceType[] VALUES
        {
            get
            {
                return new []
                {
                    COMMON, 
                    DELIVERY_BY_COURIER, 
                    DELIVERY_PICKUP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("OrderType")]
    public partial class OrderType : LocalizableNamePersistedEntity
    {
        private OrderServiceType orderServiceType;
        [HasDefaultValue]
        private bool? defaultForServiceType = false;

        protected OrderType() {}

        public OrderType(Guid id, LocalizableValue name, OrderServiceType orderServiceType)
            : base(id, name)
        {
            this.orderServiceType = orderServiceType;
        }

        public OrderType(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public OrderServiceType OrderServiceType
        {
            get { return orderServiceType; }
            set { orderServiceType = value; }
        }

        public bool? DefaultForServiceType
        {
            get { return defaultForServiceType; }
            set { defaultForServiceType = value; }
        }

    }

    [DataClass("SaleItem")]
    public abstract partial class SaleItem : Entity
    {
        private Guid? orderId;
        private int orderNum;
        private Product dishInfo;
        private decimal? dishPrice;
        private decimal? dishAmount;
        private decimal? dishSum;
        private decimal? dishDiscountSum;
        private Store store;
        private string comment;
        private Guid? parentId;

        protected SaleItem() {}

        protected SaleItem(Guid id, Guid? orderId, int orderNum, Product dishInfo, decimal? dishPrice, decimal? dishAmount, decimal? dishSum, decimal? dishDiscountSum, Store store)
            : base(id)
        {
            this.orderId = orderId;
            this.orderNum = orderNum;
            this.dishInfo = dishInfo;
            this.dishPrice = dishPrice;
            this.dishAmount = dishAmount;
            this.dishSum = dishSum;
            this.dishDiscountSum = dishDiscountSum;
            this.store = store;
        }

        protected SaleItem(Guid id)
            : base(id)
        {

        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

        public Product DishInfo
        {
            get { return dishInfo; }
            set { dishInfo = value; }
        }

        public decimal? DishPrice
        {
            get { return dishPrice; }
            set { dishPrice = value; }
        }

        public decimal? DishAmount
        {
            get { return dishAmount; }
            set { dishAmount = value; }
        }

        public decimal? DishSum
        {
            get { return dishSum; }
            set { dishSum = value; }
        }

        public decimal? DishDiscountSum
        {
            get { return dishDiscountSum; }
            set { dishDiscountSum = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public Guid? ParentId
        {
            get { return parentId; }
            set { parentId = value; }
        }

    }

    [DataClass("SalesVersionCompatibility")]
    public enum SalesVersionCompatibility
    {
        V_8_6,
        V_8_7
    }

    [DataClass("AnalysisFactorType")]
    [EnumClass]
    public partial class AnalysisFactorType : LocalizableName<AnalysisFactorType>
    {
        /// <summary> Средняя цена. </summary>
        public static readonly AnalysisFactorType AVERAGE_PRICE = new AnalysisFactorType("AVERAGE_PRICE", true);
        /// <summary> Выручка. </summary>
        public static readonly AnalysisFactorType SUM = new AnalysisFactorType("SUM", false);
        /// <summary> Количество продаж. </summary>
        public static readonly AnalysisFactorType AMOUNT = new AnalysisFactorType("AMOUNT", false);
        /// <summary> Количество чеков. </summary>
        public static readonly AnalysisFactorType CHEQUE_AMOUNT = new AnalysisFactorType("CHEQUE_AMOUNT", false);
        /// <summary> Себестоимость. </summary>
        public static readonly AnalysisFactorType COST = new AnalysisFactorType("COST", false);
        /// <summary> Себестоимость за ед.. </summary>
        public static readonly AnalysisFactorType COST_PER_ONE = new AnalysisFactorType("COST_PER_ONE", false);
        /// <summary> Изменение количества продаж. </summary>
        public static readonly AnalysisFactorType DELTA_AMOUNT = new AnalysisFactorType("DELTA_AMOUNT", false);
        /// <summary> Изменение средней цены. </summary>
        public static readonly AnalysisFactorType DELTA_AVERAGE_PRICE = new AnalysisFactorType("DELTA_AVERAGE_PRICE", false);
        /// <summary> Изменение себестоимости за ед.. </summary>
        public static readonly AnalysisFactorType DELTA_COST_PER_ONE = new AnalysisFactorType("DELTA_COST_PER_ONE", false);
        /// <summary> Изменение прибыли. </summary>
        public static readonly AnalysisFactorType DELTA_PROFIT = new AnalysisFactorType("DELTA_PROFIT", false);
        /// <summary> Изменение выручки. </summary>
        public static readonly AnalysisFactorType DELTA_SUM = new AnalysisFactorType("DELTA_SUM", false);
        /// <summary> Прибыль от основных блюд. </summary>
        public static readonly AnalysisFactorType MAIN_DISHES_PROFIT = new AnalysisFactorType("MAIN_DISHES_PROFIT", false);
        /// <summary> Наценка. </summary>
        public static readonly AnalysisFactorType MARKUP = new AnalysisFactorType("MARKUP", false);
        /// <summary> Прибыль. </summary>
        public static readonly AnalysisFactorType PROFIT = new AnalysisFactorType("PROFIT", false);
        /// <summary> Количество вхождений товара в блюдо. </summary>
        public static readonly AnalysisFactorType REENTRANCE = new AnalysisFactorType("REENTRANCE", false);
        /// <summary> Себестоимость продаж. </summary>
        public static readonly AnalysisFactorType SALES_COST = new AnalysisFactorType("SALES_COST", false);
        /// <summary> Значимость. </summary>
        public static readonly AnalysisFactorType SIGNIFICANCE = new AnalysisFactorType("SIGNIFICANCE", false);
        /// <summary> Себестоимость, %. </summary>
        public static readonly AnalysisFactorType COST_PERCENT = new AnalysisFactorType("COST_PERCENT", false);
        /// <summary> Изменение количества продаж, %. </summary>
        public static readonly AnalysisFactorType DELTA_AMOUNT_PERCENT = new AnalysisFactorType("DELTA_AMOUNT_PERCENT", false);
        /// <summary> Изменение средней цены, %. </summary>
        public static readonly AnalysisFactorType DELTA_AVERAGE_PRICE_PERCENT = new AnalysisFactorType("DELTA_AVERAGE_PRICE_PERCENT", false);
        /// <summary> Изменение себестоимости за ед., %. </summary>
        public static readonly AnalysisFactorType DELTA_COST_PER_ONE_PERCENT = new AnalysisFactorType("DELTA_COST_PER_ONE_PERCENT", false);
        /// <summary> Изменение фудкоста, %. </summary>
        public static readonly AnalysisFactorType DELTA_FOODCOST_PERCENT = new AnalysisFactorType("DELTA_FOODCOST_PERCENT", false);
        /// <summary> Изменение прибыли, %. </summary>
        public static readonly AnalysisFactorType DELTA_PROFIT_PERCENT = new AnalysisFactorType("DELTA_PROFIT_PERCENT", false);
        /// <summary> Изменение выручки, %. </summary>
        public static readonly AnalysisFactorType DELTA_SUM_PERCENT = new AnalysisFactorType("DELTA_SUM_PERCENT", false);
        /// <summary> Фудкост, %. </summary>
        public static readonly AnalysisFactorType FOODCOST_PERCENT = new AnalysisFactorType("FOODCOST_PERCENT", false);
        /// <summary> Прибыль, %. </summary>
        public static readonly AnalysisFactorType PROFIT_PERCENT = new AnalysisFactorType("PROFIT_PERCENT", false);
        /// <summary> Себестоимость продаж, %. </summary>
        public static readonly AnalysisFactorType SALES_COST_PERCENT = new AnalysisFactorType("SALES_COST_PERCENT", false);
        /// <summary> Выручка, %. </summary>
        public static readonly AnalysisFactorType SUM_PERCENT = new AnalysisFactorType("SUM_PERCENT", false);
        /// <summary> Коэффициент вариации количества продаж, %. </summary>
        public static readonly AnalysisFactorType AMOUNT_DEVIATION = new AnalysisFactorType("AMOUNT_DEVIATION", false);

        private readonly bool averageAggregation;
        private readonly string __value;
        private readonly string __nameResId;

        private AnalysisFactorType(string __value, bool averageAggregation)
        {
            this.__value = __value;
            this.__nameResId = "ANALYSISFACTORTYPE_NAME_" + __value;
            this.averageAggregation = averageAggregation;
        }

        public static AnalysisFactorType Parse(string value)
        {
            switch(value)
            {
                case "AVERAGE_PRICE": return AVERAGE_PRICE;
                case "SUM": return SUM;
                case "AMOUNT": return AMOUNT;
                case "CHEQUE_AMOUNT": return CHEQUE_AMOUNT;
                case "COST": return COST;
                case "COST_PER_ONE": return COST_PER_ONE;
                case "DELTA_AMOUNT": return DELTA_AMOUNT;
                case "DELTA_AVERAGE_PRICE": return DELTA_AVERAGE_PRICE;
                case "DELTA_COST_PER_ONE": return DELTA_COST_PER_ONE;
                case "DELTA_PROFIT": return DELTA_PROFIT;
                case "DELTA_SUM": return DELTA_SUM;
                case "MAIN_DISHES_PROFIT": return MAIN_DISHES_PROFIT;
                case "MARKUP": return MARKUP;
                case "PROFIT": return PROFIT;
                case "REENTRANCE": return REENTRANCE;
                case "SALES_COST": return SALES_COST;
                case "SIGNIFICANCE": return SIGNIFICANCE;
                case "COST_PERCENT": return COST_PERCENT;
                case "DELTA_AMOUNT_PERCENT": return DELTA_AMOUNT_PERCENT;
                case "DELTA_AVERAGE_PRICE_PERCENT": return DELTA_AVERAGE_PRICE_PERCENT;
                case "DELTA_COST_PER_ONE_PERCENT": return DELTA_COST_PER_ONE_PERCENT;
                case "DELTA_FOODCOST_PERCENT": return DELTA_FOODCOST_PERCENT;
                case "DELTA_PROFIT_PERCENT": return DELTA_PROFIT_PERCENT;
                case "DELTA_SUM_PERCENT": return DELTA_SUM_PERCENT;
                case "FOODCOST_PERCENT": return FOODCOST_PERCENT;
                case "PROFIT_PERCENT": return PROFIT_PERCENT;
                case "SALES_COST_PERCENT": return SALES_COST_PERCENT;
                case "SUM_PERCENT": return SUM_PERCENT;
                case "AMOUNT_DEVIATION": return AMOUNT_DEVIATION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AnalysisFactorType[] VALUES
        {
            get
            {
                return new []
                {
                    AVERAGE_PRICE, 
                    SUM, 
                    AMOUNT, 
                    CHEQUE_AMOUNT, 
                    COST, 
                    COST_PER_ONE, 
                    DELTA_AMOUNT, 
                    DELTA_AVERAGE_PRICE, 
                    DELTA_COST_PER_ONE, 
                    DELTA_PROFIT, 
                    DELTA_SUM, 
                    MAIN_DISHES_PROFIT, 
                    MARKUP, 
                    PROFIT, 
                    REENTRANCE, 
                    SALES_COST, 
                    SIGNIFICANCE, 
                    COST_PERCENT, 
                    DELTA_AMOUNT_PERCENT, 
                    DELTA_AVERAGE_PRICE_PERCENT, 
                    DELTA_COST_PER_ONE_PERCENT, 
                    DELTA_FOODCOST_PERCENT, 
                    DELTA_PROFIT_PERCENT, 
                    DELTA_SUM_PERCENT, 
                    FOODCOST_PERCENT, 
                    PROFIT_PERCENT, 
                    SALES_COST_PERCENT, 
                    SUM_PERCENT, 
                    AMOUNT_DEVIATION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool AverageAggregation
        {
            get { return averageAggregation; }
        }

    }

    [DataClass("SalesAnalysisDto")]
    public partial class SalesAnalysisDto
    {
        private Guid? productId;
        private Dictionary<AnalysisFactorType, Dictionary<DateInterval, decimal>> values;

        protected SalesAnalysisDto() {}

        public SalesAnalysisDto(Guid? productId)
        {
            this.productId = productId;
        }
        public Guid? ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public Dictionary<AnalysisFactorType, Dictionary<DateInterval, decimal>> Values
        {
            get { return values; }
            set { values = value; }
        }

    }

    [DataClass("SalesAnalysisReport")]
    public partial class SalesAnalysisReport
    {
        private ICollection<SalesAnalysisDto> records;
        private ICollection<DateInterval> xyzIntervals;


        public ICollection<SalesAnalysisDto> Records
        {
            get { return records; }
            set { records = value; }
        }

        public ICollection<DateInterval> XyzIntervals
        {
            get { return xyzIntervals; }
            set { xyzIntervals = value; }
        }

    }

    [DataClass("XyzAnalysisInterval")]
    [EnumClass]
    public partial class XyzAnalysisInterval : LocalizableName<XyzAnalysisInterval>
    {
        /// <summary> День. </summary>
        public static readonly XyzAnalysisInterval DAY = new XyzAnalysisInterval("DAY");
        /// <summary> Неделя. </summary>
        public static readonly XyzAnalysisInterval WEEK = new XyzAnalysisInterval("WEEK");
        /// <summary> Месяц. </summary>
        public static readonly XyzAnalysisInterval MONTH = new XyzAnalysisInterval("MONTH");

        private readonly string __value;
        private readonly string __nameResId;

        private XyzAnalysisInterval(string __value)
        {
            this.__value = __value;
            this.__nameResId = "XYZANALYSISINTERVAL_NAME_" + __value;
        }

        public static XyzAnalysisInterval Parse(string value)
        {
            switch(value)
            {
                case "DAY": return DAY;
                case "WEEK": return WEEK;
                case "MONTH": return MONTH;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static XyzAnalysisInterval[] VALUES
        {
            get
            {
                return new []
                {
                    DAY, 
                    WEEK, 
                    MONTH
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ItemCookingEvent")]
    public partial class ItemCookingEvent : CachedEntity
    {
        private Guid? saleItemId;
        private Guid? orderId;
        private int serveNumber;
        private Product dish;
        private decimal? amount;
        private DateTime? startCooking1Time;
        private DateTime? startCooking2Time;
        private DateTime? startCooking3Time;
        private DateTime? startCooking4Time;
        private DateTime? readyEstimatedTime;
        private DateTime? readyTime;
        private DateTime? feedEstimatedTime;
        private DateTime? feedTime;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> publicExternalData = new Dictionary<string, string>();

        protected ItemCookingEvent() {}

        public ItemCookingEvent(Guid id, Guid? saleItemId, Guid? orderId, int serveNumber, Product dish, decimal? amount, DateTime? startCooking1Time, DateTime? startCooking2Time, DateTime? startCooking3Time, DateTime? startCooking4Time, DateTime? readyEstimatedTime, DateTime? readyTime, DateTime? feedEstimatedTime, DateTime? feedTime)
            : base(id)
        {
            this.saleItemId = saleItemId;
            this.orderId = orderId;
            this.serveNumber = serveNumber;
            this.dish = dish;
            this.amount = amount;
            this.startCooking1Time = startCooking1Time;
            this.startCooking2Time = startCooking2Time;
            this.startCooking3Time = startCooking3Time;
            this.startCooking4Time = startCooking4Time;
            this.readyEstimatedTime = readyEstimatedTime;
            this.readyTime = readyTime;
            this.feedEstimatedTime = feedEstimatedTime;
            this.feedTime = feedTime;
        }

        public ItemCookingEvent(Guid id)
            : base(id)
        {

        }

        public Guid? SaleItemId
        {
            get { return saleItemId; }
            set { saleItemId = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int ServeNumber
        {
            get { return serveNumber; }
            set { serveNumber = value; }
        }

        public Product Dish
        {
            get { return dish; }
            set { dish = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public DateTime? StartCooking1Time
        {
            get { return startCooking1Time; }
            set { startCooking1Time = value; }
        }

        public DateTime? StartCooking2Time
        {
            get { return startCooking2Time; }
            set { startCooking2Time = value; }
        }

        public DateTime? StartCooking3Time
        {
            get { return startCooking3Time; }
            set { startCooking3Time = value; }
        }

        public DateTime? StartCooking4Time
        {
            get { return startCooking4Time; }
            set { startCooking4Time = value; }
        }

        public DateTime? ReadyEstimatedTime
        {
            get { return readyEstimatedTime; }
            set { readyEstimatedTime = value; }
        }

        public DateTime? ReadyTime
        {
            get { return readyTime; }
            set { readyTime = value; }
        }

        public DateTime? FeedEstimatedTime
        {
            get { return feedEstimatedTime; }
            set { feedEstimatedTime = value; }
        }

        public DateTime? FeedTime
        {
            get { return feedTime; }
            set { feedTime = value; }
        }

        [NotNull]
        public Dictionary<string, string> PublicExternalData
        {
            get { return publicExternalData; }
        }

    }

    [DataClass("AuthResultDto")]
    public partial class AuthResultDto
    {
        private User user;
        private ServerFingerPrintsInfo fingerPrints;

        protected AuthResultDto() {}

        public AuthResultDto(User user, ServerFingerPrintsInfo fingerPrints)
        {
            this.user = user;
            this.fingerPrints = fingerPrints;
        }
        public User User
        {
            get { return user; }
        }

        public ServerFingerPrintsInfo FingerPrints
        {
            get { return fingerPrints; }
        }

    }

    [DataClass("ConnectionResult")]
    public enum ConnectionResult
    {
        SUCCESS,
        AUTH_FAILED,
        TERMINAL_NOT_REGISTERED,
        INCORRECT_BACK_VERSION,
        INCORRECT_SERVER_VERSION,
        CONNECTION_ERROR,
        LICENSE_EXPIRED,
        WAITING_LICENSE,
        INTERNAL_ERROR,
        WRONG_EDITION,
        SERVER_STARTING_UP,
        DB_UPGRADING
    }

    [DataClass("ProductStockCookingEvent")]
    public partial class ProductStockCookingEvent : ProductStockEvent
    {
        private User cookingUser;

        protected ProductStockCookingEvent() {}

        public ProductStockCookingEvent(Guid id, DepartmentEntity department, DateTime date, Group restoGroup, DateTime? dateCreated, Product product, decimal? amount, User cookingUser)
            : base(id, department, date, restoGroup, dateCreated, product, amount)
        {
            this.cookingUser = cookingUser;
        }

        public ProductStockCookingEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public User CookingUser
        {
            get { return cookingUser; }
            set { cookingUser = value; }
        }

    }

    [DataClass("ProductStockEvent")]
    public abstract partial class ProductStockEvent : RestoEvent
    {
        private Group restoGroup;
        private DateTime? dateCreated;
        private Product product;
        private decimal? amount;

        protected ProductStockEvent() {}

        protected ProductStockEvent(Guid id, DepartmentEntity department, DateTime date, Group restoGroup, DateTime? dateCreated, Product product, decimal? amount)
            : base(id, department, date)
        {
            this.restoGroup = restoGroup;
            this.dateCreated = dateCreated;
            this.product = product;
            this.amount = amount;
        }

        protected ProductStockEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public Group RestoGroup
        {
            get { return restoGroup; }
            set { restoGroup = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("ProductStockEventType")]
    [EnumClass]
    public partial class ProductStockEventType : LocalizableName<ProductStockEventType>
    {
        /// <summary> Приготовление. </summary>
        public static readonly ProductStockEventType COOK = new ProductStockEventType("COOK");
        /// <summary> Списание. </summary>
        public static readonly ProductStockEventType WROFF = new ProductStockEventType("WROFF");
        /// <summary> Продажа просроченных блюд. </summary>
        public static readonly ProductStockEventType EXPIRE = new ProductStockEventType("EXPIRE");

        private readonly string __value;
        private readonly string __nameResId;

        private ProductStockEventType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PRODUCTSTOCKEVENTTYPE_NAME_" + __value;
        }

        public static ProductStockEventType Parse(string value)
        {
            switch(value)
            {
                case "COOK": return COOK;
                case "WROFF": return WROFF;
                case "EXPIRE": return EXPIRE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductStockEventType[] VALUES
        {
            get
            {
                return new []
                {
                    COOK, 
                    WROFF, 
                    EXPIRE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ProductStockSoldExpiredEvent")]
    public partial class ProductStockSoldExpiredEvent : ProductStockEvent
    {
        private DateTime? cookingDate;
        private DateTime? expirationDate;

        protected ProductStockSoldExpiredEvent() {}

        public ProductStockSoldExpiredEvent(Guid id, DepartmentEntity department, DateTime date, Group restoGroup, DateTime? dateCreated, Product product, decimal? amount, DateTime? cookingDate, DateTime? expirationDate)
            : base(id, department, date, restoGroup, dateCreated, product, amount)
        {
            this.cookingDate = cookingDate;
            this.expirationDate = expirationDate;
        }

        public ProductStockSoldExpiredEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public DateTime? CookingDate
        {
            get { return cookingDate; }
            set { cookingDate = value; }
        }

        public DateTime? ExpirationDate
        {
            get { return expirationDate; }
            set { expirationDate = value; }
        }

    }

    [DataClass("ProductStockWriteoffEvent")]
    public partial class ProductStockWriteoffEvent : ProductStockEvent
    {
        private User writeoffUser;
        private Store storeFrom;
        private Account accountTo;

        protected ProductStockWriteoffEvent() {}

        public ProductStockWriteoffEvent(Guid id, DepartmentEntity department, DateTime date, Group restoGroup, DateTime? dateCreated, Product product, decimal? amount, User writeoffUser, Store storeFrom, Account accountTo)
            : base(id, department, date, restoGroup, dateCreated, product, amount)
        {
            this.writeoffUser = writeoffUser;
            this.storeFrom = storeFrom;
            this.accountTo = accountTo;
        }

        public ProductStockWriteoffEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public User WriteoffUser
        {
            get { return writeoffUser; }
            set { writeoffUser = value; }
        }

        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

    }

    [DataClass("DataItemDTO")]
    public partial class DataItemDTO
    {
        private Guid id;
        private string uri;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string data = "";
        private OperationInfo createdInfo;
        private OperationInfo modifiedInfo;

        protected DataItemDTO() {}

        public DataItemDTO(Guid id, string data)
        {
            this.id = id;
            this.data = data;
        }
        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        [CanBeNull]
        public string Uri
        {
            get { return uri; }
            set { uri = value; }
        }

        [NotNull]
        public string Data
        {
            get { return data; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  data = value;
            }
        }

        [CanBeNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("AbstractAssemblyWriteoffOutgoingDocument")]
    public abstract partial class AbstractAssemblyWriteoffOutgoingDocument : AbstractOutgoingDocument, PartiallyProcessableDocument
    {
        [HasDefaultValue]
        private bool? isCorrected = false;
        [Obsolete("Deprecated in Java code")]
        private Guid? operationalDayId;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        private Guid? sessionId;
        [HasDefaultValue]
        private bool? editable = true;
        [HasDefaultValue]
        private bool recalculateSumByCost = false;
        private PricingParameters pricingParameters;

        protected AbstractAssemblyWriteoffOutgoingDocument() {}

        protected AbstractAssemblyWriteoffOutgoingDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount)
            : base(id, dateIncoming, documentNumber, status, supplier, revenueAccount, revenueDebitAccount, accountTo, discountsAccount)
        {

        }

        protected AbstractAssemblyWriteoffOutgoingDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public bool? IsCorrected
        {
            get { return isCorrected; }
            set { isCorrected = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? OperationalDayId
        {
            get { return operationalDayId; }
            set { operationalDayId = value; }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        public bool RecalculateSumByCost
        {
            get { return recalculateSumByCost; }
            set { recalculateSumByCost = value; }
        }

        [CanBeNull]
        public PricingParameters PricingParameters
        {
            get { return pricingParameters; }
            set { pricingParameters = value; }
        }

    }

    [DataClass("AbstractAssemblyWriteoffOutgoingItem")]
    public abstract partial class AbstractAssemblyWriteoffOutgoingItem : AbstractInvoiceItem, ProductSizeDocumentItem, AssemblyWriteoffItem
    {
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal amountFactor = 0;
        private Dictionary<Product, decimal> correctedAssemblyChartItems;

        protected AbstractAssemblyWriteoffOutgoingItem() {}

        protected AbstractAssemblyWriteoffOutgoingItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, ProductSize productSize, decimal amountFactor)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum)
        {
            this.productSize = productSize;
            this.amountFactor = amountFactor;
        }

        protected AbstractAssemblyWriteoffOutgoingItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds, decimal amountFactor)
            : base(id, product, amount, invoice, priceWithoutNds)
        {
            this.amountFactor = amountFactor;
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal AmountFactor
        {
            get { return amountFactor; }
            set { amountFactor = value; }
        }

        [CanBeNull]
        public Dictionary<Product, decimal> CorrectedAssemblyChartItems
        {
            get { return correctedAssemblyChartItems; }
            set { correctedAssemblyChartItems = value; }
        }

    }

    [DataClass("AbstractIncomingDocument")]
    public abstract partial class AbstractIncomingDocument : AbstractInvoiceDocument
    {
        private User employeePassToAccount;
        private string incomingDocumentNumber;
        private DateTime? incomingDate;
        private bool? deliveryOnTime;
        private bool? matchesToTheOrder;

        protected AbstractIncomingDocument() {}

        protected AbstractIncomingDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {

        }

        protected AbstractIncomingDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        [CanBeNull]
        public User EmployeePassToAccount
        {
            get { return employeePassToAccount; }
            set { employeePassToAccount = value; }
        }

        [CanBeNull]
        public string IncomingDocumentNumber
        {
            get { return incomingDocumentNumber; }
            set { incomingDocumentNumber = value; }
        }

        public DateTime? IncomingDate
        {
            get { return incomingDate; }
            set { incomingDate = value; }
        }

        public bool? DeliveryOnTime
        {
            get { return deliveryOnTime; }
            set { deliveryOnTime = value; }
        }

        public bool? MatchesToTheOrder
        {
            get { return matchesToTheOrder; }
            set { matchesToTheOrder = value; }
        }

    }

    [DataClass("AbstractIncomingInventoryItem")]
    public partial class AbstractIncomingInventoryItem : AbstractProductDocumentItem, WithProducer
    {
        private int? recalculationNumber;
        private string containerName;
        private Guid? containerId;
        private MeasureUnit unit;
        private decimal? count;
        private decimal? countGross;
        private decimal? containerCount;
        private ProductSize productSize;
        private decimal? currentActualAmount;
        private decimal? turnover;
        private DateTime? recalculationDate;
        private User producer;
        private string comment;
        private InventoryItemStatus status;
        [HasDefaultValue]
        private bool isDisassembled = false;

        protected AbstractIncomingInventoryItem() {}

        public AbstractIncomingInventoryItem(Guid id, int num, Product product, decimal amount, int? recalculationNumber, MeasureUnit unit, decimal? count, decimal? countGross, decimal? containerCount, string comment, InventoryItemStatus status)
            : base(id, num, product, amount)
        {
            this.recalculationNumber = recalculationNumber;
            this.unit = unit;
            this.count = count;
            this.countGross = countGross;
            this.containerCount = containerCount;
            this.comment = comment;
            this.status = status;
        }

        public AbstractIncomingInventoryItem(Guid id, Product product, decimal amount)
            : base(id, product, amount)
        {

        }

        public int? RecalculationNumber
        {
            get { return recalculationNumber; }
            set { recalculationNumber = value; }
        }

        [CanBeNull]
        public string ContainerName
        {
            get { return containerName; }
            set { containerName = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public MeasureUnit Unit
        {
            get { return unit; }
            set { unit = value; }
        }

        public decimal? Count
        {
            get { return count; }
            set { count = value; }
        }

        public decimal? CountGross
        {
            get { return countGross; }
            set { countGross = value; }
        }

        public decimal? ContainerCount
        {
            get { return containerCount; }
            set { containerCount = value; }
        }

        [CanBeNull]
        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal? CurrentActualAmount
        {
            get { return currentActualAmount; }
            set { currentActualAmount = value; }
        }

        public decimal? Turnover
        {
            get { return turnover; }
            set { turnover = value; }
        }

        public DateTime? RecalculationDate
        {
            get { return recalculationDate; }
            set { recalculationDate = value; }
        }

        [CanBeNull]
        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public InventoryItemStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public bool IsDisassembled
        {
            get { return isDisassembled; }
            set { isDisassembled = value; }
        }

    }

    [DataClass("AbstractInvoiceDocument")]
    public abstract partial class AbstractInvoiceDocument : AbstractStoreDocument
    {
        private DateTime? dueDate;
        private DateTime? manualPaymentDate;
        private User supplier;
        private Store defaultStore;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AbstractInvoiceItem> items = new List<AbstractInvoiceItem>();
        private string invoice;

        protected AbstractInvoiceDocument() {}

        protected AbstractInvoiceDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.supplier = supplier;
        }

        protected AbstractInvoiceDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public DateTime? DueDate
        {
            get { return dueDate; }
            set { dueDate = value; }
        }

        public DateTime? ManualPaymentDate
        {
            get { return manualPaymentDate; }
            set { manualPaymentDate = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        [CanBeNull]
        public Store DefaultStore
        {
            get { return defaultStore; }
            set { defaultStore = value; }
        }

        [NotNull]
        public List<AbstractInvoiceItem> Items
        {
            get { return items; }
        }

        [CanBeNull]
        public string Invoice
        {
            get { return invoice; }
            set { invoice = value; }
        }

    }

    [DataClass("AbstractInvoiceItem")]
    public abstract partial class AbstractInvoiceItem : AbstractProductWithUnitDocumentItem
    {
        [NotNull, NotNullField]
        private AbstractInvoiceDocument invoice;
        private Store store;
        private string code;
        private decimal? price;
        [HasDefaultValue]
        private decimal priceWithoutNds = 0;
        private MeasureUnit priceUnit;
        private decimal? sum;
        private decimal? ndsPercent;
        private decimal? sumWithoutNds;
        private decimal? discountSum;
        private decimal? actualUnitWeight;
        private decimal? actualAmount;
        private Product supplierProduct;
        private string customsDeclarationNumber;
        private DateTime? expireDate;
        private string comment;

        protected AbstractInvoiceItem() {}

        protected AbstractInvoiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum)
            : base(id, num, product, amount, amountUnit)
        {
            this.invoice = invoice;
            this.store = store;
            this.code = code;
            this.price = price;
            this.priceWithoutNds = priceWithoutNds;
            this.priceUnit = priceUnit;
            this.sum = sum;
        }

        protected AbstractInvoiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds)
            : base(id, product, amount)
        {
            this.invoice = invoice;
            this.priceWithoutNds = priceWithoutNds;
        }

        [NotNull]
        public AbstractInvoiceDocument Invoice
        {
            get { return invoice; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  invoice = value;
            }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal PriceWithoutNds
        {
            get { return priceWithoutNds; }
            set { priceWithoutNds = value; }
        }

        public MeasureUnit PriceUnit
        {
            get { return priceUnit; }
            set { priceUnit = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? NdsPercent
        {
            get { return ndsPercent; }
            set { ndsPercent = value; }
        }

        public decimal? SumWithoutNds
        {
            get { return sumWithoutNds; }
            set { sumWithoutNds = value; }
        }

        public decimal? DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public decimal? ActualUnitWeight
        {
            get { return actualUnitWeight; }
            set { actualUnitWeight = value; }
        }

        public decimal? ActualAmount
        {
            get { return actualAmount; }
            set { actualAmount = value; }
        }

        [CanBeNull]
        public Product SupplierProduct
        {
            get { return supplierProduct; }
            set { supplierProduct = value; }
        }

        [CanBeNull]
        public string CustomsDeclarationNumber
        {
            get { return customsDeclarationNumber; }
            set { customsDeclarationNumber = value; }
        }

        public DateTime? ExpireDate
        {
            get { return expireDate; }
            set { expireDate = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("AbstractOutgoingDocument")]
    public abstract partial class AbstractOutgoingDocument : AbstractInvoiceDocument
    {
        private Account revenueAccount;
        private Account revenueDebitAccount;
        private Account accountTo;
        private Account discountsAccount;

        protected AbstractOutgoingDocument() {}

        protected AbstractOutgoingDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {
            this.revenueAccount = revenueAccount;
            this.revenueDebitAccount = revenueDebitAccount;
            this.accountTo = accountTo;
            this.discountsAccount = discountsAccount;
        }

        protected AbstractOutgoingDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        public Account RevenueDebitAccount
        {
            get { return revenueDebitAccount; }
            set { revenueDebitAccount = value; }
        }

        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

        public Account DiscountsAccount
        {
            get { return discountsAccount; }
            set { discountsAccount = value; }
        }

    }

    [DataClass("AbstractProductChart")]
    public abstract partial class AbstractProductChart : AbstractKeyedTimeTableItem
    {
        [NotNull, NotNullField]
        private Product product;

        protected AbstractProductChart() {}

        protected AbstractProductChart(Guid id, DateTime? dateFrom, DateTime? dateTo, Product product)
            : base(id, dateFrom, dateTo)
        {
            this.product = product;
        }

        protected AbstractProductChart(Guid id, Product product)
            : base(id)
        {
            this.product = product;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

    }

    [DataClass("AbstractProductChartItem")]
    public abstract partial class AbstractProductChartItem : OrderedHibernateEntity
    {
        [NotNull, NotNullField]
        private Product product;
        [HasDefaultValue]
        private decimal amountIn = 0;
        [HasDefaultValue]
        private decimal amountMiddle = 0;
        [HasDefaultValue]
        private decimal amountOut = 0;

        protected AbstractProductChartItem() {}

        protected AbstractProductChartItem(Guid id, double sortWeight, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut)
            : base(id, sortWeight)
        {
            this.product = product;
            this.amountIn = amountIn;
            this.amountMiddle = amountMiddle;
            this.amountOut = amountOut;
        }

        protected AbstractProductChartItem(Guid id, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut)
            : base(id)
        {
            this.product = product;
            this.amountIn = amountIn;
            this.amountMiddle = amountMiddle;
            this.amountOut = amountOut;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal AmountIn
        {
            get { return amountIn; }
            set { amountIn = value; }
        }

        public decimal AmountMiddle
        {
            get { return amountMiddle; }
            set { amountMiddle = value; }
        }

        public decimal AmountOut
        {
            get { return amountOut; }
            set { amountOut = value; }
        }

    }

    [DataClass("AbstractProductDocumentItem")]
    public abstract partial class AbstractProductDocumentItem : Entity
    {
        private int num;
        [NotNull, NotNullField]
        private Product product;
        [HasDefaultValue]
        private decimal amount = 0;

        protected AbstractProductDocumentItem() {}

        protected AbstractProductDocumentItem(Guid id, int num, Product product, decimal amount)
            : base(id)
        {
            this.num = num;
            this.product = product;
            this.amount = amount;
        }

        protected AbstractProductDocumentItem(Guid id, Product product, decimal amount)
            : base(id)
        {
            this.product = product;
            this.amount = amount;
        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("AbstractProductWithUnitDocumentItem")]
    public abstract partial class AbstractProductWithUnitDocumentItem : AbstractProductDocumentItem
    {
        private MeasureUnit amountUnit;
        private Guid? containerId;

        protected AbstractProductWithUnitDocumentItem() {}

        protected AbstractProductWithUnitDocumentItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit)
            : base(id, num, product, amount)
        {
            this.amountUnit = amountUnit;
        }

        protected AbstractProductWithUnitDocumentItem(Guid id, Product product, decimal amount)
            : base(id, product, amount)
        {

        }

        public MeasureUnit AmountUnit
        {
            get { return amountUnit; }
            set { amountUnit = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

    }

    [DataClass("AbstractProductsWriteoffDocument")]
    public abstract partial class AbstractProductsWriteoffDocument : AbstractStoreDocument, PartiallyProcessableDocument
    {
        [NotNull, NotNullField]
        private Store store;
        [NotNull, NotNullField]
        private Account accountTo;
        private User counteragentTo;
        [Obsolete("Deprecated in Java code")]
        private Guid? operationalDayId;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        private Guid? sessionId;
        [HasDefaultValue]
        private bool? isCorrected = false;
        [HasDefaultValue]
        private bool? editable = true;

        protected AbstractProductsWriteoffDocument() {}

        protected AbstractProductsWriteoffDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.store = store;
            this.accountTo = accountTo;
        }

        protected AbstractProductsWriteoffDocument(Guid id, DateTime dateIncoming, string documentNumber, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber)
        {
            this.store = store;
            this.accountTo = accountTo;
        }

        [NotNull]
        public Store Store
        {
            get { return store; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  store = value;
            }
        }

        [NotNull]
        public Account AccountTo
        {
            get { return accountTo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  accountTo = value;
            }
        }

        [CanBeNull]
        public User CounteragentTo
        {
            get { return counteragentTo; }
            set { counteragentTo = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? OperationalDayId
        {
            get { return operationalDayId; }
            set { operationalDayId = value; }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public bool? IsCorrected
        {
            get { return isCorrected; }
            set { isCorrected = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

    }

    [DataClass("AbstractProductsWriteoffDocumentItem")]
    public abstract partial class AbstractProductsWriteoffDocumentItem : AbstractProductWithUnitDocumentItem, ProductSizeDocumentItem, AssemblyWriteoffItem
    {
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal amountFactor = 0;
        private Dictionary<Product, decimal> correctedAssemblyChartItems;

        protected AbstractProductsWriteoffDocumentItem() {}

        protected AbstractProductsWriteoffDocumentItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, ProductSize productSize, decimal amountFactor)
            : base(id, num, product, amount, amountUnit)
        {
            this.productSize = productSize;
            this.amountFactor = amountFactor;
        }

        protected AbstractProductsWriteoffDocumentItem(Guid id, Product product, decimal amount, decimal amountFactor)
            : base(id, product, amount)
        {
            this.amountFactor = amountFactor;
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal AmountFactor
        {
            get { return amountFactor; }
            set { amountFactor = value; }
        }

        [CanBeNull]
        public Dictionary<Product, decimal> CorrectedAssemblyChartItems
        {
            get { return correctedAssemblyChartItems; }
            set { correctedAssemblyChartItems = value; }
        }

    }

    [DataClass("AbstractSalesDocument")]
    public abstract partial class AbstractSalesDocument : AbstractAssemblyWriteoffOutgoingDocument
    {

        protected AbstractSalesDocument() {}

        protected AbstractSalesDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount)
            : base(id, dateIncoming, documentNumber, status, supplier, revenueAccount, revenueDebitAccount, accountTo, discountsAccount)
        {

        }

        protected AbstractSalesDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("AbstractSingleProductProcessingDocument")]
    public abstract partial class AbstractSingleProductProcessingDocument : AbstractStorePairDocument
    {
        [NotNull, NotNullField]
        private Product product;
        private Guid? containerId;
        [HasDefaultValue]
        private decimal amount = 0;
        private MeasureUnit amountUnit;

        protected AbstractSingleProductProcessingDocument() {}

        protected AbstractSingleProductProcessingDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store storeFrom, Store storeTo, Product product, Guid? containerId, decimal amount, MeasureUnit amountUnit)
            : base(id, dateIncoming, documentNumber, status, storeFrom, storeTo)
        {
            this.product = product;
            this.containerId = containerId;
            this.amount = amount;
            this.amountUnit = amountUnit;
        }

        protected AbstractSingleProductProcessingDocument(Guid id, DateTime dateIncoming, string documentNumber, Product product, decimal amount)
            : base(id, dateIncoming, documentNumber)
        {
            this.product = product;
            this.amount = amount;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public MeasureUnit AmountUnit
        {
            get { return amountUnit; }
            set { amountUnit = value; }
        }

    }

    [DataClass("AbstractStoreDocument")]
    public abstract partial class AbstractStoreDocument : ProcessableDocument
    {

        protected AbstractStoreDocument() {}

        protected AbstractStoreDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        protected AbstractStoreDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("AbstractStorePairDocument")]
    public abstract partial class AbstractStorePairDocument : AbstractStoreDocument
    {
        private Store storeFrom;
        private Store storeTo;

        protected AbstractStorePairDocument() {}

        protected AbstractStorePairDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store storeFrom, Store storeTo)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.storeFrom = storeFrom;
            this.storeTo = storeTo;
        }

        protected AbstractStorePairDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        public Store StoreTo
        {
            get { return storeTo; }
            set { storeTo = value; }
        }

    }

    [DataClass("AbstractVatTransaction")]
    public abstract partial class AbstractVatTransaction : AccountingTransaction
    {
        private decimal? ndsPercent;

        protected AbstractVatTransaction() {}

        protected AbstractVatTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {

        }

        protected AbstractVatTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public decimal? NdsPercent
        {
            get { return ndsPercent; }
            set { ndsPercent = value; }
        }

    }

    [RootEntity]
    [DataClass("AccountingCategory")]
    public partial class AccountingCategory : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        private bool system;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AccountingCategory() {}

        public AccountingCategory(Guid id, LocalizableValue name, string code, bool system)
            : base(id, name)
        {
            this.code = code;
            this.system = system;
        }

        public AccountingCategory(Guid id, LocalizableValue name, string code)
            : base(id, name)
        {
            this.code = code;
        }

        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [RootEntity]
    [DataClass("AllergenGroup")]
    public partial class AllergenGroup : LocalizableNamePersistedEntity
    {
        private string code;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected AllergenGroup() {}

        public AllergenGroup(Guid id, LocalizableValue name, string code)
            : base(id, name)
        {
            this.code = code;
        }

        public AllergenGroup(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("AssemblyChart")]
    public partial class AssemblyChart : AbstractProductChart
    {
        [HasDefaultValue]
        private decimal assembledAmount = 1;
        private ProductWriteoffStrategy writeoffStrategy;
        private StoreSpecification directWriteoffStoreSpecification;
        private ProductSizeAssemblyStrategy productSizeAssemblyStrategy;
        private AssemblyChartVersionCompatibility versionCompatibility;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AssemblyChartItem> items = new List<AssemblyChartItem>();
        [HasDefaultValue]
        private string technologyDescription = "";
        [HasDefaultValue]
        private string description = "";
        [HasDefaultValue]
        private string appearance = "";
        [HasDefaultValue]
        private string organoleptic = "";
        [HasDefaultValue]
        private string outputComment = "";
        private SavedImageInfo picture;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AssemblyChart() {}

        public AssemblyChart(Guid id, DateTime? dateFrom, DateTime? dateTo, Product product, ProductWriteoffStrategy writeoffStrategy, ProductSizeAssemblyStrategy productSizeAssemblyStrategy, AssemblyChartVersionCompatibility versionCompatibility, SavedImageInfo picture)
            : base(id, dateFrom, dateTo, product)
        {
            this.writeoffStrategy = writeoffStrategy;
            this.productSizeAssemblyStrategy = productSizeAssemblyStrategy;
            this.versionCompatibility = versionCompatibility;
            this.picture = picture;
        }

        public AssemblyChart(Guid id, Product product, ProductSizeAssemblyStrategy productSizeAssemblyStrategy, AssemblyChartVersionCompatibility versionCompatibility)
            : base(id, product)
        {
            this.productSizeAssemblyStrategy = productSizeAssemblyStrategy;
            this.versionCompatibility = versionCompatibility;
        }

        public decimal AssembledAmount
        {
            get { return assembledAmount; }
            set { assembledAmount = value; }
        }

        public ProductWriteoffStrategy WriteoffStrategy
        {
            get { return writeoffStrategy; }
            set { writeoffStrategy = value; }
        }

        [CanBeNull]
        public StoreSpecification DirectWriteoffStoreSpecification
        {
            get { return directWriteoffStoreSpecification; }
            set { directWriteoffStoreSpecification = value; }
        }

        public ProductSizeAssemblyStrategy ProductSizeAssemblyStrategy
        {
            get { return productSizeAssemblyStrategy; }
            set { productSizeAssemblyStrategy = value; }
        }

        public AssemblyChartVersionCompatibility VersionCompatibility
        {
            get { return versionCompatibility; }
            set { versionCompatibility = value; }
        }

        [NotNull]
        public List<AssemblyChartItem> Items
        {
            get { return items; }
        }

        public string TechnologyDescription
        {
            get { return technologyDescription; }
            set { technologyDescription = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public string Appearance
        {
            get { return appearance; }
            set { appearance = value; }
        }

        public string Organoleptic
        {
            get { return organoleptic; }
            set { organoleptic = value; }
        }

        public string OutputComment
        {
            get { return outputComment; }
            set { outputComment = value; }
        }

        public SavedImageInfo Picture
        {
            get { return picture; }
            set { picture = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("AssemblyChartItem")]
    public partial class AssemblyChartItem : AbstractProductChartItem
    {
        [NotNull, NotNullField]
        private AssemblyChart assemblyChart;
        private StoreSpecification storeSpecification;
        private ProductSize productSizeSpecification;
        [HasDefaultValue]
        private decimal? amountIn1 = 0;
        [HasDefaultValue]
        private decimal? amountOut1 = 0;
        [HasDefaultValue]
        private decimal? amountIn2 = 0;
        [HasDefaultValue]
        private decimal? amountOut2 = 0;
        [HasDefaultValue]
        private decimal? amountIn3 = 0;
        [HasDefaultValue]
        private decimal? amountOut3 = 0;
        [HasDefaultValue]
        private decimal? packageCount = 0;
        private Guid? packageTypeId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AssemblyChartItem() {}

        public AssemblyChartItem(Guid id, double sortWeight, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut, AssemblyChart assemblyChart, ProductSize productSizeSpecification)
            : base(id, sortWeight, product, amountIn, amountMiddle, amountOut)
        {
            this.assemblyChart = assemblyChart;
            this.productSizeSpecification = productSizeSpecification;
        }

        public AssemblyChartItem(Guid id, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut, AssemblyChart assemblyChart)
            : base(id, product, amountIn, amountMiddle, amountOut)
        {
            this.assemblyChart = assemblyChart;
        }

        [NotNull]
        public AssemblyChart AssemblyChart
        {
            get { return assemblyChart; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  assemblyChart = value;
            }
        }

        [CanBeNull]
        public StoreSpecification StoreSpecification
        {
            get { return storeSpecification; }
            set { storeSpecification = value; }
        }

        public ProductSize ProductSizeSpecification
        {
            get { return productSizeSpecification; }
            set { productSizeSpecification = value; }
        }

        public decimal? AmountIn1
        {
            get { return amountIn1; }
            set { amountIn1 = value; }
        }

        public decimal? AmountOut1
        {
            get { return amountOut1; }
            set { amountOut1 = value; }
        }

        public decimal? AmountIn2
        {
            get { return amountIn2; }
            set { amountIn2 = value; }
        }

        public decimal? AmountOut2
        {
            get { return amountOut2; }
            set { amountOut2 = value; }
        }

        public decimal? AmountIn3
        {
            get { return amountIn3; }
            set { amountIn3 = value; }
        }

        public decimal? AmountOut3
        {
            get { return amountOut3; }
            set { amountOut3 = value; }
        }

        public decimal? PackageCount
        {
            get { return packageCount; }
            set { packageCount = value; }
        }

        public Guid? PackageTypeId
        {
            get { return packageTypeId; }
            set { packageTypeId = value; }
        }

    }

    [DataClass("AssemblyChartItemNode")]
    public partial class AssemblyChartItemNode : Entity
    {
        private Product nodeProduct;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AssemblyChartItem> nodeItems = new List<AssemblyChartItem>();
        private AssemblyChartItemNode parentNode;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AssemblyChartItemNode> nodes = new List<AssemblyChartItemNode>();

        protected AssemblyChartItemNode() {}

        public AssemblyChartItemNode(Guid id, Product nodeProduct)
            : base(id)
        {
            this.nodeProduct = nodeProduct;
        }

        public AssemblyChartItemNode(Guid id)
            : base(id)
        {

        }

        public Product NodeProduct
        {
            get { return nodeProduct; }
            set { nodeProduct = value; }
        }

        [NotNull]
        public List<AssemblyChartItem> NodeItems
        {
            get { return nodeItems; }
        }

        [CanBeNull]
        public AssemblyChartItemNode ParentNode
        {
            get { return parentNode; }
            set { parentNode = value; }
        }

        [NotNull]
        public List<AssemblyChartItemNode> Nodes
        {
            get { return nodes; }
        }

    }

    [DataClass("AssemblyChartItemTree")]
    public partial class AssemblyChartItemTree
    {
        private AssemblyChartItemNode root;

        protected AssemblyChartItemTree() {}

        public AssemblyChartItemTree(AssemblyChartItemNode root)
        {
            this.root = root;
        }
        public AssemblyChartItemNode Root
        {
            get { return root; }
            set { root = value; }
        }

    }

    [DataClass("AssemblyChartNode")]
    public partial class AssemblyChartNode
    {
        private AssemblyChart chart;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AssemblyChartNode> nodes = new List<AssemblyChartNode>();

        protected AssemblyChartNode() {}

        public AssemblyChartNode(AssemblyChart chart)
        {
            this.chart = chart;
        }
        public AssemblyChart Chart
        {
            get { return chart; }
            set { chart = value; }
        }

        [NotNull]
        public List<AssemblyChartNode> Nodes
        {
            get { return nodes; }
        }

    }

    [DataClass("AssemblyChartSaveResult")]
    public partial class AssemblyChartSaveResult
    {
        private AssemblyChartSaveStatus status;
        private List<Product> cycle;

        protected AssemblyChartSaveResult() {}

        public AssemblyChartSaveResult(AssemblyChartSaveStatus status)
        {
            this.status = status;
        }
        public AssemblyChartSaveStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public List<Product> Cycle
        {
            get { return cycle; }
            set { cycle = value; }
        }

    }

    [DataClass("AssemblyChartSaveStatus")]
    public enum AssemblyChartSaveStatus
    {
        OK,
        SELF_REFERENCE,
        CYCLIC_REFERENCE
    }

    [DataClass("AssemblyChartVersionCompatibility")]
    public enum AssemblyChartVersionCompatibility
    {
        V_5_0,
        V_7_0
    }

    [DataClass("AssemblyChartVersionWarning")]
    [EnumClass]
    public partial class AssemblyChartVersionWarning : ILocalizableDescription
    {
        /// <summary> Новая версия технологической карты. </summary>
        public static readonly AssemblyChartVersionWarning OK = new AssemblyChartVersionWarning("OK");
        /// <summary> Старая версия технологической карты. </summary>
        public static readonly AssemblyChartVersionWarning INFO = new AssemblyChartVersionWarning("INFO");
        /// <summary> Внимание! Старая версия технологической карты. Возможно неверное списание.. </summary>
        public static readonly AssemblyChartVersionWarning WARN = new AssemblyChartVersionWarning("WARN");

        private readonly string __value;
        private readonly string __descriptionResId;

        private AssemblyChartVersionWarning(string __value)
        {
            this.__value = __value;
            this.__descriptionResId = "ASSEMBLYCHARTVERSIONWARNING_DESCRIPTION_" + __value;
        }

        public static AssemblyChartVersionWarning Parse(string value)
        {
            switch(value)
            {
                case "OK": return OK;
                case "INFO": return INFO;
                case "WARN": return WARN;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AssemblyChartVersionWarning[] VALUES
        {
            get
            {
                return new []
                {
                    OK, 
                    INFO, 
                    WARN
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public string DescriptionResId
        {
            get { return __descriptionResId; }
        }

        public override string ToString()
        {
            return this.__value;
        }

    }

    [DataClass("AssemblyChartsTree")]
    public partial class AssemblyChartsTree
    {
        private AssemblyChartNode root;

        protected AssemblyChartsTree() {}

        public AssemblyChartsTree(AssemblyChartNode root)
        {
            this.root = root;
        }
        public AssemblyChartNode Root
        {
            get { return root; }
            set { root = value; }
        }

    }

    [DataClass("AssemblyWriteoffItem")]
    public partial interface AssemblyWriteoffItem : ProductSizeDocumentItem
    {

    }

    [DataClass("AssemblyWriteoffItemInfo")]
    public partial class AssemblyWriteoffItemInfo
    {
        private Guid? id;
        private Product product;
        private Store store;
        private decimal? amount;
        private DateTime? date;
        private Dictionary<Product, decimal> assemblyChart;

        public AssemblyWriteoffItemInfo() {}

        public AssemblyWriteoffItemInfo(Guid? id, Product product, Store store, decimal? amount, DateTime? date)
        {
            this.id = id;
            this.product = product;
            this.store = store;
            this.amount = amount;
            this.date = date;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Dictionary<Product, decimal> AssemblyChart
        {
            get { return assemblyChart; }
            set { assemblyChart = value; }
        }

    }

    [DataClass("BarcodeContainer")]
    public partial class BarcodeContainer
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string barcode = "";
        private Container container;

        protected BarcodeContainer() {}

        public BarcodeContainer(string barcode)
        {
            this.barcode = barcode;
        }
        [NotNull]
        public string Barcode
        {
            get { return barcode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  barcode = value;
            }
        }

        [CanBeNull]
        public Container Container
        {
            get { return container; }
            set { container = value; }
        }

    }

    [RootEntity]
    [DataClass("Certificate")]
    public partial class Certificate : LocalizableNamePersistedEntity
    {
        [HasDefaultValue]
        private bool type = false;
        private DateTime? date;
        private string number;
        private string vetName;

        protected Certificate() {}

        public Certificate(Guid id, LocalizableValue name, string number, string vetName)
            : base(id, name)
        {
            this.number = number;
            this.vetName = vetName;
        }

        public Certificate(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public bool Type
        {
            get { return type; }
            set { type = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public string VetName
        {
            get { return vetName; }
            set { vetName = value; }
        }

    }

    [DataClass("CertificateOfQuality")]
    public partial class CertificateOfQuality : ProductImage
    {
        private User supplier;
        private int period;
        private PeriodType periodType;
        private int mitT;
        private int maxT;
        private string document;
        private string issuer;
        private string number;

        protected CertificateOfQuality() {}

        public CertificateOfQuality(ProductImageType type, DateTime? dateStart, DateTime? dateEnd, SavedImageInfo image, User supplier, int period, PeriodType periodType, int mitT, int maxT, string document, string issuer, string number)
            : base(type, dateStart, dateEnd, image)
        {
            this.supplier = supplier;
            this.period = period;
            this.periodType = periodType;
            this.mitT = mitT;
            this.maxT = maxT;
            this.document = document;
            this.issuer = issuer;
            this.number = number;
        }
        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public int Period
        {
            get { return period; }
            set { period = value; }
        }

        public PeriodType PeriodType
        {
            get { return periodType; }
            set { periodType = value; }
        }

        public int MitT
        {
            get { return mitT; }
            set { mitT = value; }
        }

        public int MaxT
        {
            get { return maxT; }
            set { maxT = value; }
        }

        public string Document
        {
            get { return document; }
            set { document = value; }
        }

        public string Issuer
        {
            get { return issuer; }
            set { issuer = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

    }

    [DataClass("Container")]
    public partial class Container : Entity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string num = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [HasDefaultValue]
        private decimal count = 0;
        [HasDefaultValue]
        private decimal minContainerWeight = 0;
        [HasDefaultValue]
        private decimal maxContainerWeight = 0;
        [HasDefaultValue]
        private decimal containerWeight = 0;
        [HasDefaultValue]
        private decimal fullContainerWeight = 0;
        [HasDefaultValue]
        private bool deleted = false;
        [HasDefaultValue]
        private bool useInFront = true;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Container() {}

        public Container(Guid id, string name, decimal count, decimal containerWeight, decimal fullContainerWeight)
            : base(id)
        {
            this.name = name;
            this.count = count;
            this.containerWeight = containerWeight;
            this.fullContainerWeight = fullContainerWeight;
        }
        [NotNull]
        public string Num
        {
            get { return num; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  num = value;
            }
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public decimal Count
        {
            get { return count; }
            set { count = value; }
        }

        public decimal MinContainerWeight
        {
            get { return minContainerWeight; }
            set { minContainerWeight = value; }
        }

        public decimal MaxContainerWeight
        {
            get { return maxContainerWeight; }
            set { maxContainerWeight = value; }
        }

        public decimal ContainerWeight
        {
            get { return containerWeight; }
            set { containerWeight = value; }
        }

        public decimal FullContainerWeight
        {
            get { return fullContainerWeight; }
            set { fullContainerWeight = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public bool UseInFront
        {
            get { return useInFront; }
            set { useInFront = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [RootEntity]
    [DataClass("CookingType")]
    public partial class CookingType : LocalizableNamePersistedEntity
    {
        private bool def;

        protected CookingType() {}

        public CookingType(Guid id, LocalizableValue name, bool def)
            : base(id, name)
        {
            this.def = def;
        }

        public CookingType(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public bool Def
        {
            get { return def; }
            set { def = value; }
        }

    }

    [DataClass("CostPriceChangeItem")]
    public partial class CostPriceChangeItem
    {
        private Product product;
        private DateTime? dateOne;
        private DateTime? dateTwo;
        private EvaluableDecimalValue costPriceOnDateOne;
        private EvaluableDecimalValue costPriceOnDateTwo;
        private decimal? salePriceOnDateOne;
        private decimal? salePriceOnDateTwo;
        private DepartmentEntity department;

        public CostPriceChangeItem() {}

        public CostPriceChangeItem(Product product, DateTime? dateOne, DateTime? dateTwo, EvaluableDecimalValue costPriceOnDateOne, EvaluableDecimalValue costPriceOnDateTwo, decimal? salePriceOnDateOne, decimal? salePriceOnDateTwo, DepartmentEntity department)
        {
            this.product = product;
            this.dateOne = dateOne;
            this.dateTwo = dateTwo;
            this.costPriceOnDateOne = costPriceOnDateOne;
            this.costPriceOnDateTwo = costPriceOnDateTwo;
            this.salePriceOnDateOne = salePriceOnDateOne;
            this.salePriceOnDateTwo = salePriceOnDateTwo;
            this.department = department;
        }
        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public DateTime? DateOne
        {
            get { return dateOne; }
            set { dateOne = value; }
        }

        public DateTime? DateTwo
        {
            get { return dateTwo; }
            set { dateTwo = value; }
        }

        public EvaluableDecimalValue CostPriceOnDateOne
        {
            get { return costPriceOnDateOne; }
            set { costPriceOnDateOne = value; }
        }

        public EvaluableDecimalValue CostPriceOnDateTwo
        {
            get { return costPriceOnDateTwo; }
            set { costPriceOnDateTwo = value; }
        }

        public decimal? SalePriceOnDateOne
        {
            get { return salePriceOnDateOne; }
            set { salePriceOnDateOne = value; }
        }

        public decimal? SalePriceOnDateTwo
        {
            get { return salePriceOnDateTwo; }
            set { salePriceOnDateTwo = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [RootEntity]
    [DataClass("CustomCategoryList")]
    public partial class CustomCategoryList : LocalizableNamePersistedEntity
    {

        protected CustomCategoryList() {}

        public CustomCategoryList(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
    }

    [RootEntity]
    [DataClass("CustomCategoryValue")]
    public partial class CustomCategoryValue : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private CustomCategoryList categoryList;

        protected CustomCategoryValue() {}

        public CustomCategoryValue(Guid id, LocalizableValue name, CustomCategoryList categoryList)
            : base(id, name)
        {
            this.categoryList = categoryList;
        }
        [NotNull]
        public CustomCategoryList CategoryList
        {
            get { return categoryList; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  categoryList = value;
            }
        }

    }

    [DataClass("DefaultDocumentTime")]
    public partial class DefaultDocumentTime
    {
        private DayTime documentTime;
        [NotNull, NotNullField]
        private DocumentTimeType timeType;

        protected DefaultDocumentTime() {}

        public DefaultDocumentTime(DayTime documentTime, DocumentTimeType timeType)
        {
            this.documentTime = documentTime;
            this.timeType = timeType;
        }

        public DefaultDocumentTime(DocumentTimeType timeType)
        {
            this.timeType = timeType;
        }

        public DayTime DocumentTime
        {
            get { return documentTime; }
            set { documentTime = value; }
        }

        [NotNull]
        public DocumentTimeType TimeType
        {
            get { return timeType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  timeType = value;
            }
        }

    }

    [DataClass("DisassembleDocument")]
    public partial class DisassembleDocument : AbstractSingleProductProcessingDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<DisassembleDocumentItem> items = new List<DisassembleDocumentItem>();

        protected DisassembleDocument() {}

        public DisassembleDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store storeFrom, Store storeTo, Product product, Guid? containerId, decimal amount, MeasureUnit amountUnit)
            : base(id, dateIncoming, documentNumber, status, storeFrom, storeTo, product, containerId, amount, amountUnit)
        {

        }

        public DisassembleDocument(Guid id, DateTime dateIncoming, string documentNumber, Product product, decimal amount)
            : base(id, dateIncoming, documentNumber, product, amount)
        {

        }

        [NotNull]
        public List<DisassembleDocumentItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("DisassembleDocumentItem")]
    public partial class DisassembleDocumentItem : AbstractProductWithUnitDocumentItem
    {
        [NotNull, NotNullField]
        private DisassembleDocument document;
        [HasDefaultValue]
        private decimal mainProductAmountPercent = 0;

        protected DisassembleDocumentItem() {}

        public DisassembleDocumentItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, DisassembleDocument document, decimal mainProductAmountPercent)
            : base(id, num, product, amount, amountUnit)
        {
            this.document = document;
            this.mainProductAmountPercent = mainProductAmountPercent;
        }

        public DisassembleDocumentItem(Guid id, Product product, decimal amount, DisassembleDocument document, decimal mainProductAmountPercent)
            : base(id, product, amount)
        {
            this.document = document;
            this.mainProductAmountPercent = mainProductAmountPercent;
        }

        [NotNull]
        public DisassembleDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

        public decimal MainProductAmountPercent
        {
            get { return mainProductAmountPercent; }
            set { mainProductAmountPercent = value; }
        }

    }

    [DataClass("DocumentSettings")]
    public partial class DocumentSettings
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DocumentType, DefaultDocumentTime> defaultDocumentTimes = new Dictionary<DocumentType, DefaultDocumentTime>();
        private bool useBarcodesInDocuments;
        private bool skipFirstInventoryStep;

        public DocumentSettings() {}

        public DocumentSettings(bool useBarcodesInDocuments, bool skipFirstInventoryStep)
        {
            this.useBarcodesInDocuments = useBarcodesInDocuments;
            this.skipFirstInventoryStep = skipFirstInventoryStep;
        }
        [NotNull]
        public Dictionary<DocumentType, DefaultDocumentTime> DefaultDocumentTimes
        {
            get { return defaultDocumentTimes; }
        }

        public bool UseBarcodesInDocuments
        {
            get { return useBarcodesInDocuments; }
            set { useBarcodesInDocuments = value; }
        }

        public bool SkipFirstInventoryStep
        {
            get { return skipFirstInventoryStep; }
            set { skipFirstInventoryStep = value; }
        }

    }

    [DataClass("DocumentTimeType")]
    [EnumClass]
    public partial class DocumentTimeType : LocalizableName<DocumentTimeType>
    {
        /// <summary> Заданное время. </summary>
        public static readonly DocumentTimeType SPECIFIC_TIME = new DocumentTimeType("SPECIFIC_TIME");
        /// <summary> Текущее время. </summary>
        public static readonly DocumentTimeType CURRENT_TIME = new DocumentTimeType("CURRENT_TIME");
        /// <summary> Время закрытия смены. </summary>
        public static readonly DocumentTimeType SESSION_END_TIME = new DocumentTimeType("SESSION_END_TIME");

        private readonly string __value;
        private readonly string __nameResId;

        private DocumentTimeType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DOCUMENTTIMETYPE_NAME_" + __value;
        }

        public static DocumentTimeType Parse(string value)
        {
            switch(value)
            {
                case "SPECIFIC_TIME": return SPECIFIC_TIME;
                case "CURRENT_TIME": return CURRENT_TIME;
                case "SESSION_END_TIME": return SESSION_END_TIME;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DocumentTimeType[] VALUES
        {
            get
            {
                return new []
                {
                    SPECIFIC_TIME, 
                    CURRENT_TIME, 
                    SESSION_END_TIME
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("GoodRecordBase")]
    public partial class GoodRecordBase
    {
        private StationChart chart;
        private StationChartItem item;
        private decimal? amount;
        private decimal? remainder;

        protected GoodRecordBase() {}

        public GoodRecordBase(StationChart chart, StationChartItem item, decimal? amount, decimal? remainder)
        {
            this.chart = chart;
            this.item = item;
            this.amount = amount;
            this.remainder = remainder;
        }
        public StationChart Chart
        {
            get { return chart; }
            set { chart = value; }
        }

        public StationChartItem Item
        {
            get { return item; }
            set { item = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Remainder
        {
            get { return remainder; }
            set { remainder = value; }
        }

    }

    [DataClass("InOutGoodsMove")]
    public partial class InOutGoodsMove
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, InOutItem> inOutProducts = new Dictionary<Product, InOutItem>();


        [NotNull]
        public Dictionary<Product, InOutItem> InOutProducts
        {
            get { return inOutProducts; }
        }

    }

    [DataClass("InOutItem")]
    public partial class InOutItem
    {
        private decimal? inAmount;
        private decimal? outAmount;
        private decimal? inventoryAmount;

        public InOutItem() {}

        public InOutItem(decimal? inAmount, decimal? outAmount, decimal? inventoryAmount)
        {
            this.inAmount = inAmount;
            this.outAmount = outAmount;
            this.inventoryAmount = inventoryAmount;
        }
        public decimal? InAmount
        {
            get { return inAmount; }
            set { inAmount = value; }
        }

        public decimal? OutAmount
        {
            get { return outAmount; }
            set { outAmount = value; }
        }

        public decimal? InventoryAmount
        {
            get { return inventoryAmount; }
            set { inventoryAmount = value; }
        }

    }

    [DataClass("IncomingInventory")]
    public partial class IncomingInventory : AbstractStoreDocument, PartiallyProcessableDocument, ProducerDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<IncomingInventoryItem> items = new List<IncomingInventoryItem>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<IncomingInventoryFirstStepItem> itemsFirstStep = new List<IncomingInventoryFirstStepItem>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, decimal> disassembledProducts = new Dictionary<Product, decimal>();
        private Store store;
        private Account accountSurplus;
        private Account accountShortage;
        private int currentStep;
        private Guid? sessionId;
        [Obsolete("Deprecated in Java code")]
        private Guid? operationalDayId;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        [HasDefaultValue]
        private bool registerTurnover = false;
        [HasDefaultValue]
        private bool? editable = true;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IncomingInventory() {}

        public IncomingInventory(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store store, Account accountSurplus, Account accountShortage, int currentStep)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.store = store;
            this.accountSurplus = accountSurplus;
            this.accountShortage = accountShortage;
            this.currentStep = currentStep;
        }

        public IncomingInventory(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        [NotNull]
        public List<IncomingInventoryItem> Items
        {
            get { return items; }
        }

        [NotNull]
        public List<IncomingInventoryFirstStepItem> ItemsFirstStep
        {
            get { return itemsFirstStep; }
        }

        [NotNull]
        public Dictionary<Product, decimal> DisassembledProducts
        {
            get { return disassembledProducts; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Account AccountSurplus
        {
            get { return accountSurplus; }
            set { accountSurplus = value; }
        }

        public Account AccountShortage
        {
            get { return accountShortage; }
            set { accountShortage = value; }
        }

        public int CurrentStep
        {
            get { return currentStep; }
            set { currentStep = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? OperationalDayId
        {
            get { return operationalDayId; }
            set { operationalDayId = value; }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool RegisterTurnover
        {
            get { return registerTurnover; }
            set { registerTurnover = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

    }

    [DataClass("IncomingInventoryFirstStepItem")]
    public partial class IncomingInventoryFirstStepItem : AbstractIncomingInventoryItem
    {
        private IncomingInventory inventory;

        protected IncomingInventoryFirstStepItem() {}

        public IncomingInventoryFirstStepItem(Guid id, int num, Product product, decimal amount, int? recalculationNumber, MeasureUnit unit, decimal? count, decimal? countGross, decimal? containerCount, string comment, InventoryItemStatus status, IncomingInventory inventory)
            : base(id, num, product, amount, recalculationNumber, unit, count, countGross, containerCount, comment, status)
        {
            this.inventory = inventory;
        }

        public IncomingInventoryFirstStepItem(Guid id, Product product, decimal amount)
            : base(id, product, amount)
        {

        }

        public IncomingInventory Inventory
        {
            get { return inventory; }
            set { inventory = value; }
        }

    }

    [DataClass("IncomingInventoryItem")]
    public partial class IncomingInventoryItem : AbstractIncomingInventoryItem
    {
        private IncomingInventory inventory;

        protected IncomingInventoryItem() {}

        public IncomingInventoryItem(Guid id, int num, Product product, decimal amount, int? recalculationNumber, MeasureUnit unit, decimal? count, decimal? countGross, decimal? containerCount, string comment, InventoryItemStatus status, IncomingInventory inventory)
            : base(id, num, product, amount, recalculationNumber, unit, count, countGross, containerCount, comment, status)
        {
            this.inventory = inventory;
        }

        public IncomingInventoryItem(Guid id, Product product, decimal amount)
            : base(id, product, amount)
        {

        }

        public IncomingInventory Inventory
        {
            get { return inventory; }
            set { inventory = value; }
        }

    }

    [DataClass("IncomingInventoryStep")]
    [EnumClass]
    public partial class IncomingInventoryStep
    {
        public static readonly IncomingInventoryStep INVALID = new IncomingInventoryStep("INVALID", 0);
        public static readonly IncomingInventoryStep FIRST = new IncomingInventoryStep("FIRST", 1);
        public static readonly IncomingInventoryStep SECOND = new IncomingInventoryStep("SECOND", 2);
        public static readonly IncomingInventoryStep THIRD = new IncomingInventoryStep("THIRD", 3);

        private readonly int step;
        private readonly string __value;

        private IncomingInventoryStep(string __value, int step)
        {
            this.__value = __value;
            this.step = step;
        }

        public static IncomingInventoryStep Parse(string value)
        {
            switch(value)
            {
                case "INVALID": return INVALID;
                case "FIRST": return FIRST;
                case "SECOND": return SECOND;
                case "THIRD": return THIRD;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static IncomingInventoryStep[] VALUES
        {
            get
            {
                return new []
                {
                    INVALID, 
                    FIRST, 
                    SECOND, 
                    THIRD
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Step
        {
            get { return step; }
        }

    }

    [DataClass("IncomingInvoice")]
    public partial class IncomingInvoice : AbstractIncomingDocument, PartiallyProcessableDocument, ProducerDocument
    {
        [HasDefaultValue]
        private bool manualDueDate = false;
        private string transportInvoiceNumber;
        [Obsolete("Deprecated in Java code")]
        private Guid? internalOutgoingInvoiceId;
        [HasDefaultValue]
        private bool editable = true;
        [HasDefaultValue]
        private bool automatic = false;
        private Guid? sessionId;
        [HasDefaultValue]
        private bool boughtAtFront = false;
        [HasDefaultValue]
        private bool isAdditionalExpensesBySum = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IncomingInvoice() {}

        public IncomingInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {

        }

        public IncomingInvoice(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public bool ManualDueDate
        {
            get { return manualDueDate; }
            set { manualDueDate = value; }
        }

        [CanBeNull]
        public string TransportInvoiceNumber
        {
            get { return transportInvoiceNumber; }
            set { transportInvoiceNumber = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? InternalOutgoingInvoiceId
        {
            get { return internalOutgoingInvoiceId; }
            set { internalOutgoingInvoiceId = value; }
        }

        public bool Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        public bool Automatic
        {
            get { return automatic; }
            set { automatic = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public bool BoughtAtFront
        {
            get { return boughtAtFront; }
            set { boughtAtFront = value; }
        }

        public bool IsAdditionalExpensesBySum
        {
            get { return isAdditionalExpensesBySum; }
            set { isAdditionalExpensesBySum = value; }
        }

    }

    [DataClass("IncomingInvoiceItem")]
    public partial class IncomingInvoiceItem : AbstractInvoiceItem, WithProducer
    {
        private decimal? additionalExpenses;
        private decimal? additionalExpensesNds;
        [HasDefaultValue]
        private bool isAdditionalExpense = false;
        private int? orderNum;
        private User producer;
        [Obsolete("Deprecated in Java code")]
        private string supCode;
        [Obsolete("Deprecated in Java code")]
        private string supProductName;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IncomingInvoiceItem() {}

        public IncomingInvoiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, string supCode, string supProductName)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum)
        {
            this.supCode = supCode;
            this.supProductName = supProductName;
        }

        public IncomingInvoiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds)
            : base(id, product, amount, invoice, priceWithoutNds)
        {

        }

        public decimal? AdditionalExpenses
        {
            get { return additionalExpenses; }
            set { additionalExpenses = value; }
        }

        public decimal? AdditionalExpensesNds
        {
            get { return additionalExpensesNds; }
            set { additionalExpensesNds = value; }
        }

        public bool IsAdditionalExpense
        {
            get { return isAdditionalExpense; }
            set { isAdditionalExpense = value; }
        }

        public int? OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

        [CanBeNull]
        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public string SupCode
        {
            get { return supCode; }
            set { supCode = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public string SupProductName
        {
            get { return supProductName; }
            set { supProductName = value; }
        }

    }

    [DataClass("IncomingReturnedInvoice")]
    public partial class IncomingReturnedInvoice : AbstractOutgoingDocument, ProducerDocument, PartiallyProcessableDocument
    {
        private Guid? outgoingInvoiceId;
        private Guid? sessionId;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        [HasDefaultValue]
        private bool? editable = true;
        [NotNull, NotNullField]
        private IncomingReturnedInvoiceProcessingMode processingMode;

        protected IncomingReturnedInvoice() {}

        public IncomingReturnedInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount, Guid? outgoingInvoiceId, IncomingReturnedInvoiceProcessingMode processingMode)
            : base(id, dateIncoming, documentNumber, status, supplier, revenueAccount, revenueDebitAccount, accountTo, discountsAccount)
        {
            this.outgoingInvoiceId = outgoingInvoiceId;
            this.processingMode = processingMode;
        }

        public IncomingReturnedInvoice(Guid id, DateTime dateIncoming, string documentNumber, IncomingReturnedInvoiceProcessingMode processingMode)
            : base(id, dateIncoming, documentNumber)
        {
            this.processingMode = processingMode;
        }

        public Guid? OutgoingInvoiceId
        {
            get { return outgoingInvoiceId; }
            set { outgoingInvoiceId = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        [NotNull]
        public IncomingReturnedInvoiceProcessingMode ProcessingMode
        {
            get { return processingMode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  processingMode = value;
            }
        }

    }

    [DataClass("IncomingReturnedInvoiceItem")]
    public partial class IncomingReturnedInvoiceItem : AbstractInvoiceItem, WithProducer, AssemblyWriteoffItem, WithSplitVat
    {
        private User producer;
        [HasDefaultValue]
        private decimal incomePrice = 0;
        [HasDefaultValue]
        private decimal incomeSum = 0;
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal amountFactor = 0;
        [HasDefaultValue]
        private bool splitVat = false;

        protected IncomingReturnedInvoiceItem() {}

        public IncomingReturnedInvoiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, decimal incomePrice, decimal incomeSum, ProductSize productSize, decimal amountFactor)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum)
        {
            this.incomePrice = incomePrice;
            this.incomeSum = incomeSum;
            this.productSize = productSize;
            this.amountFactor = amountFactor;
        }

        public IncomingReturnedInvoiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds, decimal incomePrice, decimal incomeSum, decimal amountFactor)
            : base(id, product, amount, invoice, priceWithoutNds)
        {
            this.incomePrice = incomePrice;
            this.incomeSum = incomeSum;
            this.amountFactor = amountFactor;
        }

        [CanBeNull]
        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public decimal IncomePrice
        {
            get { return incomePrice; }
            set { incomePrice = value; }
        }

        public decimal IncomeSum
        {
            get { return incomeSum; }
            set { incomeSum = value; }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal AmountFactor
        {
            get { return amountFactor; }
            set { amountFactor = value; }
        }

        public bool SplitVat
        {
            get { return splitVat; }
            set { splitVat = value; }
        }

    }

    [DataClass("IncomingReturnedInvoiceProcessingMode")]
    [EnumClass]
    public partial class IncomingReturnedInvoiceProcessingMode : LocalizableName<IncomingReturnedInvoiceProcessingMode>
    {
        /// <summary> Возврат блюд. </summary>
        public static readonly IncomingReturnedInvoiceProcessingMode RETURN_DISH = new IncomingReturnedInvoiceProcessingMode("RETURN_DISH");
        /// <summary> Возврат ингредиентов. </summary>
        public static readonly IncomingReturnedInvoiceProcessingMode RETURN_GOOD = new IncomingReturnedInvoiceProcessingMode("RETURN_GOOD");
        /// <summary> Без склада. </summary>
        public static readonly IncomingReturnedInvoiceProcessingMode DO_NOT_RETURN = new IncomingReturnedInvoiceProcessingMode("DO_NOT_RETURN");

        private readonly string __value;
        private readonly string __nameResId;

        private IncomingReturnedInvoiceProcessingMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "INCOMINGRETURNEDINVOICEPROCESSINGMODE_NAME_" + __value;
        }

        public static IncomingReturnedInvoiceProcessingMode Parse(string value)
        {
            switch(value)
            {
                case "RETURN_DISH": return RETURN_DISH;
                case "RETURN_GOOD": return RETURN_GOOD;
                case "DO_NOT_RETURN": return DO_NOT_RETURN;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static IncomingReturnedInvoiceProcessingMode[] VALUES
        {
            get
            {
                return new []
                {
                    RETURN_DISH, 
                    RETURN_GOOD, 
                    DO_NOT_RETURN
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("InternalTransfer")]
    public partial class InternalTransfer : AbstractStorePairDocument, PartiallyProcessableDocument
    {
        private Guid? idProductionOrder;
        private Guid? idPreparedRegisterDocument;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<InternalTransferItem> items = new List<InternalTransferItem>();
        private Guid? sessionId;
        [Obsolete("Deprecated in Java code")]
        private Guid? operationalDayId;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        [HasDefaultValue]
        private bool? editable = true;

        protected InternalTransfer() {}

        public InternalTransfer(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store storeFrom, Store storeTo)
            : base(id, dateIncoming, documentNumber, status, storeFrom, storeTo)
        {

        }

        public InternalTransfer(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public Guid? IdProductionOrder
        {
            get { return idProductionOrder; }
            set { idProductionOrder = value; }
        }

        public Guid? IdPreparedRegisterDocument
        {
            get { return idPreparedRegisterDocument; }
            set { idPreparedRegisterDocument = value; }
        }

        [NotNull]
        public List<InternalTransferItem> Items
        {
            get { return items; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? OperationalDayId
        {
            get { return operationalDayId; }
            set { operationalDayId = value; }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

    }

    [DataClass("InternalTransferItem")]
    public partial class InternalTransferItem : AbstractProductWithUnitDocumentItem
    {
        [NotNull, NotNullField]
        private InternalTransfer transfer;

        protected InternalTransferItem() {}

        public InternalTransferItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, InternalTransfer transfer)
            : base(id, num, product, amount, amountUnit)
        {
            this.transfer = transfer;
        }

        public InternalTransferItem(Guid id, Product product, decimal amount, InternalTransfer transfer)
            : base(id, product, amount)
        {
            this.transfer = transfer;
        }

        [NotNull]
        public InternalTransfer Transfer
        {
            get { return transfer; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  transfer = value;
            }
        }

    }

    [DataClass("InventoryItemStatus")]
    public enum InventoryItemStatus
    {
        NEW,
        SAVE,
        RECALC,
        NEW_FOR_RECALC,
        NEW_CLEAR
    }

    [DataClass("InvoicePaymentItem")]
    public partial class InvoicePaymentItem : AbstractDocumentPaymentItem
    {

        protected InvoicePaymentItem() {}

        public InvoicePaymentItem(AbstractInvoiceDocument document, decimal? sum, DateTime? date, Account accountFrom, CashFlowCategory cashFlowCategory)
            : base(document, sum, date, accountFrom, cashFlowCategory)
        {

        }
    }

    [DataClass("InvoiceReportItem")]
    public partial class InvoiceReportItem
    {
        private Product product;
        private decimal? amount;
        private decimal? price;
        private decimal? amountWO;

        public InvoiceReportItem() {}

        public InvoiceReportItem(Product product, decimal? amount, decimal? price, decimal? amountWO)
        {
            this.product = product;
            this.amount = amount;
            this.price = price;
            this.amountWO = amountWO;
        }
        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal? AmountWO
        {
            get { return amountWO; }
            set { amountWO = value; }
        }

    }

    [DataClass("ManualOrAutomaticDocument")]
    public partial interface ManualOrAutomaticDocument
    {

    }

    [RootEntity]
    [DataClass("MeasureUnit")]
    public partial class MeasureUnit : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private LocalizableValue fullName;
        private bool mainUnit;
        [HasDefaultValue]
        private string code = "";
        private bool system;
        private string systemName;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public MeasureUnit() {}

        public MeasureUnit(Guid id, LocalizableValue name, LocalizableValue fullName, bool mainUnit, bool system)
            : base(id, name)
        {
            this.fullName = fullName;
            this.mainUnit = mainUnit;
            this.system = system;
        }

        public MeasureUnit(Guid id, LocalizableValue name, LocalizableValue fullName, bool mainUnit)
            : base(id, name)
        {
            this.fullName = fullName;
            this.mainUnit = mainUnit;
        }

        [NotNull]
        public LocalizableValue FullName
        {
            get { return fullName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  fullName = value;
            }
        }

        public bool MainUnit
        {
            get { return mainUnit; }
            set { mainUnit = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        [CanBeNull]
        public string SystemName
        {
            get { return systemName; }
            set { systemName = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [RootEntity]
    [DataClass("ModifierSchema")]
    public partial class ModifierSchema : LocalizableNamePersistedEntity
    {
        private ProductScale productScale;
        private List<ChoiceBinding> modifiers;
        private bool splittableProduct;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected ModifierSchema() {}

        public ModifierSchema(Guid id, LocalizableValue name, bool splittableProduct)
            : base(id, name)
        {
            this.splittableProduct = splittableProduct;
        }

        public ModifierSchema(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        [CanBeNull]
        public ProductScale ProductScale
        {
            get { return productScale; }
            set { productScale = value; }
        }

        public List<ChoiceBinding> Modifiers
        {
            get { return modifiers; }
            set { modifiers = value; }
        }

        public bool SplittableProduct
        {
            get { return splittableProduct; }
            set { splittableProduct = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("NegativeStoreBalanceItem")]
    public partial class NegativeStoreBalanceItem
    {
        private DateTime? date;
        private Store store;
        private Product product;
        private Product secondaryProduct;
        private string documentNumber;
        private TransactionType transactionType;
        private decimal? amountBefore;
        private decimal? amount;

        protected NegativeStoreBalanceItem() {}

        public NegativeStoreBalanceItem(DateTime? date, Store store, Product product, Product secondaryProduct, string documentNumber, TransactionType transactionType, decimal? amountBefore, decimal? amount)
        {
            this.date = date;
            this.store = store;
            this.product = product;
            this.secondaryProduct = secondaryProduct;
            this.documentNumber = documentNumber;
            this.transactionType = transactionType;
            this.amountBefore = amountBefore;
            this.amount = amount;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Product SecondaryProduct
        {
            get { return secondaryProduct; }
            set { secondaryProduct = value; }
        }

        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        public TransactionType TransactionType
        {
            get { return transactionType; }
            set { transactionType = value; }
        }

        public decimal? AmountBefore
        {
            get { return amountBefore; }
            set { amountBefore = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("NutritionValue")]
    public partial class NutritionValue
    {
        private HashSet<DepartmentEntity> departments;
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal? energyAmount = 0;
        [HasDefaultValue]
        private decimal? fiberAmount = 0;
        [HasDefaultValue]
        private decimal? fatAmount = 0;
        [HasDefaultValue]
        private decimal? carbohydrateAmount = 0;

        public NutritionValue() {}

        public NutritionValue(ProductSize productSize)
        {
            this.productSize = productSize;
        }
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal? EnergyAmount
        {
            get { return energyAmount; }
            set { energyAmount = value; }
        }

        public decimal? FiberAmount
        {
            get { return fiberAmount; }
            set { fiberAmount = value; }
        }

        public decimal? FatAmount
        {
            get { return fatAmount; }
            set { fatAmount = value; }
        }

        public decimal? CarbohydrateAmount
        {
            get { return carbohydrateAmount; }
            set { carbohydrateAmount = value; }
        }

    }

    [DataClass("OutgoingDocumentPaymentItem")]
    public partial class OutgoingDocumentPaymentItem : AbstractDocumentPaymentItem
    {

        protected OutgoingDocumentPaymentItem() {}

        public OutgoingDocumentPaymentItem(AbstractInvoiceDocument document, decimal? sum, DateTime? date, Account accountFrom, CashFlowCategory cashFlowCategory)
            : base(document, sum, date, accountFrom, cashFlowCategory)
        {

        }
    }

    [DataClass("OutgoingInvoice")]
    public partial class OutgoingInvoice : AbstractAssemblyWriteoffOutgoingDocument
    {
        [HasDefaultValue]
        private bool manualDueDate = false;
        private Guid? internalIncomingInvoiceId;
        private Guid? deliveryOrderId;

        protected OutgoingInvoice() {}

        public OutgoingInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount)
            : base(id, dateIncoming, documentNumber, status, supplier, revenueAccount, revenueDebitAccount, accountTo, discountsAccount)
        {

        }

        public OutgoingInvoice(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public bool ManualDueDate
        {
            get { return manualDueDate; }
            set { manualDueDate = value; }
        }

        public Guid? InternalIncomingInvoiceId
        {
            get { return internalIncomingInvoiceId; }
            set { internalIncomingInvoiceId = value; }
        }

        public Guid? DeliveryOrderId
        {
            get { return deliveryOrderId; }
            set { deliveryOrderId = value; }
        }

    }

    [DataClass("OutgoingInvoiceItem")]
    public partial class OutgoingInvoiceItem : AbstractAssemblyWriteoffOutgoingItem
    {

        protected OutgoingInvoiceItem() {}

        public OutgoingInvoiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, ProductSize productSize, decimal amountFactor)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum, productSize, amountFactor)
        {

        }

        public OutgoingInvoiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds, decimal amountFactor)
            : base(id, product, amount, invoice, priceWithoutNds, amountFactor)
        {

        }

    }

    [DataClass("PeriodType")]
    [EnumClass]
    public partial class PeriodType : LocalizableName<PeriodType>
    {
        /// <summary> Час. </summary>
        public static readonly PeriodType HOUR = new PeriodType("HOUR");
        /// <summary> День. </summary>
        public static readonly PeriodType DAY = new PeriodType("DAY");
        /// <summary> Неделя. </summary>
        public static readonly PeriodType WEEK = new PeriodType("WEEK");
        /// <summary> Месяц. </summary>
        public static readonly PeriodType MOUNTH = new PeriodType("MOUNTH");

        private readonly string __value;
        private readonly string __nameResId;

        private PeriodType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PERIODTYPE_NAME_" + __value;
        }

        public static PeriodType Parse(string value)
        {
            switch(value)
            {
                case "HOUR": return HOUR;
                case "DAY": return DAY;
                case "WEEK": return WEEK;
                case "MOUNTH": return MOUNTH;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PeriodType[] VALUES
        {
            get
            {
                return new []
                {
                    HOUR, 
                    DAY, 
                    WEEK, 
                    MOUNTH
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("Product")]
    public partial class Product : ProductTreeEntity
    {
        private string gtin;
        private string fullName;
        private MeasureUnit mainUnit;
        private Dictionary<MeasureUnit, decimal> additionalUnits;
        private HashSet<RestaurantSection> excludedSections;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Container> containers = new List<Container>();
        private Guid? defaultContainerId;
        private ProductScale productScale;
        private ProductSizeFactors productSizeFactors;
        private HashSet<Guid> disabledProductSizes;
        private decimal? defaultSalePrice;
        private decimal? receiptsSum;
        [HasDefaultValue]
        private decimal? estimatedPurchasePrice = 0;
        private CookingPlaceType placeType;
        private int inventoryPeriodDays;
        private string nameEnglish;
        private string fullNameEnglish;
        private string descriptionEnglish;
        [HasDefaultValue]
        private bool defaultIncludedInMenu = false;
        [NotNull, NotNullField]
        private ProductType type;
        [HasDefaultValue]
        private decimal unitWeight = 1;
        [HasDefaultValue]
        private decimal unitCapacity = 0;
        [HasDefaultValue]
        private bool isCalculateUnitWeight = true;
        [Obsolete("Deprecated in Java code")]
        private bool notLoadAsemblyChartsToBackupDB;
        private ProductTypeForCooking productTypeForCooking;
        private CookingType cookingType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<NutritionValue> nutritionValues = new List<NutritionValue>();
        [HasDefaultValue]
        private bool isNutritionValueAutoCalculated = false;
        private List<ProductImage> images;
        [HasDefaultValue]
        private bool isDishOfDay = false;
        [HasDefaultValue]
        private bool isFlyerProgram = false;
        [HasDefaultValue]
        private bool canBuyFromCashdesk = false;
        [HasDefaultValue]
        private bool isNotInStoreMovement = false;
        private User invoiceSupplier;
        [HasDefaultValue]
        private bool prechequePrintable = true;
        [HasDefaultValue]
        private bool chequePrintable = true;
        [HasDefaultValue]
        private bool useBalanceForInventory = false;
        [HasDefaultValue]
        private bool useBalanceForSell = false;
        [HasDefaultValue]
        private bool useRangeForInvoices = false;
        [HasDefaultValue]
        private bool isTimePayProduct = false;
        private Dictionary<string, BarcodeContainer> barcodes;
        private long? expirationDate;
        private DateTime? assemblyChartModified;
        [HasDefaultValue]
        private bool cookWithMainDish = true;
        private SourceNature sourceNature;
        private RateSchedule rateSchedule;
        [HasDefaultValue]
        private bool relativeRateSchedule = false;
        private int? minimumTimePayProductDurationMinutes;
        [HasDefaultValue]
        private int timePayProductDurationStepMinutes = 1;
        [HasDefaultValue]
        private bool printOnAdd = false;
        [HasDefaultValue]
        private decimal coldLossPercent = 0;
        [HasDefaultValue]
        private decimal hotLossPercent = 0;
        [HasDefaultValue]
        private bool amountIndependentOfParentAmount = false;
        private string nameKitchen;
        private long? cookingTimeNormal;
        private long? cookingTimePeak;
        [HasDefaultValue]
        private bool useDefaultCookingTime = true;
        [HasDefaultValue]
        private bool canSetOpenPrice = false;
        [HasDefaultValue]
        private bool canChangeAmountCookedDish = false;
        private HashSet<AllergenGroup> allergenGroups;
        private HashSet<ProductTag> productTags;
        private ProductItemCategory itemCategory;
        private ProductTransferType transferType;
        [HasDefaultValue]
        private decimal percentageOfAlcohol = 0;
        [HasDefaultValue]
        private bool isPercentageOfAlcoholApplicable = false;
        private HashSet<ProductDisabledField> disabledFields;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Product() {}

        public Product(Guid id, LocalizableValue name, string description, string num, ProductGroup parent, string code, string fullName, MeasureUnit mainUnit, decimal? defaultSalePrice, CookingPlaceType placeType, int inventoryPeriodDays, string nameEnglish, string fullNameEnglish, string descriptionEnglish, ProductType type, bool notLoadAsemblyChartsToBackupDB, ProductTypeForCooking productTypeForCooking, CookingType cookingType, ProductItemCategory itemCategory, ProductTransferType transferType)
            : base(id, name, description, num, parent, code)
        {
            this.fullName = fullName;
            this.mainUnit = mainUnit;
            this.defaultSalePrice = defaultSalePrice;
            this.placeType = placeType;
            this.inventoryPeriodDays = inventoryPeriodDays;
            this.nameEnglish = nameEnglish;
            this.fullNameEnglish = fullNameEnglish;
            this.descriptionEnglish = descriptionEnglish;
            this.type = type;
            this.notLoadAsemblyChartsToBackupDB = notLoadAsemblyChartsToBackupDB;
            this.productTypeForCooking = productTypeForCooking;
            this.cookingType = cookingType;
            this.itemCategory = itemCategory;
            this.transferType = transferType;
        }

        public Product(Guid id, LocalizableValue name, string code, ProductType type)
            : base(id, name, code)
        {
            this.type = type;
        }

        [CanBeNull]
        public string Gtin
        {
            get { return gtin; }
            set { gtin = value; }
        }

        public string FullName
        {
            get { return fullName; }
            set { fullName = value; }
        }

        public MeasureUnit MainUnit
        {
            get { return mainUnit; }
            set { mainUnit = value; }
        }

        public Dictionary<MeasureUnit, decimal> AdditionalUnits
        {
            get { return additionalUnits; }
            set { additionalUnits = value; }
        }

        public HashSet<RestaurantSection> ExcludedSections
        {
            get { return excludedSections; }
            set { excludedSections = value; }
        }

        [NotNull]
        public List<Container> Containers
        {
            get { return containers; }
        }

        public Guid? DefaultContainerId
        {
            get { return defaultContainerId; }
            set { defaultContainerId = value; }
        }

        [CanBeNull]
        public ProductScale ProductScale
        {
            get { return productScale; }
            set { productScale = value; }
        }

        [CanBeNull]
        public ProductSizeFactors ProductSizeFactors
        {
            get { return productSizeFactors; }
            set { productSizeFactors = value; }
        }

        [CanBeNull]
        public HashSet<Guid> DisabledProductSizes
        {
            get { return disabledProductSizes; }
            set { disabledProductSizes = value; }
        }

        public decimal? DefaultSalePrice
        {
            get { return defaultSalePrice; }
            set { defaultSalePrice = value; }
        }

        public decimal? ReceiptsSum
        {
            get { return receiptsSum; }
            set { receiptsSum = value; }
        }

        public decimal? EstimatedPurchasePrice
        {
            get { return estimatedPurchasePrice; }
            set { estimatedPurchasePrice = value; }
        }

        public CookingPlaceType PlaceType
        {
            get { return placeType; }
            set { placeType = value; }
        }

        public int InventoryPeriodDays
        {
            get { return inventoryPeriodDays; }
            set { inventoryPeriodDays = value; }
        }

        public string NameEnglish
        {
            get { return nameEnglish; }
            set { nameEnglish = value; }
        }

        public string FullNameEnglish
        {
            get { return fullNameEnglish; }
            set { fullNameEnglish = value; }
        }

        public string DescriptionEnglish
        {
            get { return descriptionEnglish; }
            set { descriptionEnglish = value; }
        }

        public bool DefaultIncludedInMenu
        {
            get { return defaultIncludedInMenu; }
            set { defaultIncludedInMenu = value; }
        }

        [NotNull]
        public ProductType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        public decimal UnitWeight
        {
            get { return unitWeight; }
            set { unitWeight = value; }
        }

        public decimal UnitCapacity
        {
            get { return unitCapacity; }
            set { unitCapacity = value; }
        }

        public bool IsCalculateUnitWeight
        {
            get { return isCalculateUnitWeight; }
            set { isCalculateUnitWeight = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public bool NotLoadAsemblyChartsToBackupDB
        {
            get { return notLoadAsemblyChartsToBackupDB; }
            set { notLoadAsemblyChartsToBackupDB = value; }
        }

        public ProductTypeForCooking ProductTypeForCooking
        {
            get { return productTypeForCooking; }
            set { productTypeForCooking = value; }
        }

        public CookingType CookingType
        {
            get { return cookingType; }
            set { cookingType = value; }
        }

        [NotNull]
        public List<NutritionValue> NutritionValues
        {
            get { return nutritionValues; }
        }

        public bool IsNutritionValueAutoCalculated
        {
            get { return isNutritionValueAutoCalculated; }
            set { isNutritionValueAutoCalculated = value; }
        }

        public List<ProductImage> Images
        {
            get { return images; }
            set { images = value; }
        }

        public bool IsDishOfDay
        {
            get { return isDishOfDay; }
            set { isDishOfDay = value; }
        }

        public bool IsFlyerProgram
        {
            get { return isFlyerProgram; }
            set { isFlyerProgram = value; }
        }

        public bool CanBuyFromCashdesk
        {
            get { return canBuyFromCashdesk; }
            set { canBuyFromCashdesk = value; }
        }

        [CanBeNull]
        public User InvoiceSupplier
        {
            get { return invoiceSupplier; }
            set { invoiceSupplier = value; }
        }

        public bool PrechequePrintable
        {
            get { return prechequePrintable; }
            set { prechequePrintable = value; }
        }

        public bool ChequePrintable
        {
            get { return chequePrintable; }
            set { chequePrintable = value; }
        }

        public bool UseBalanceForInventory
        {
            get { return useBalanceForInventory; }
            set { useBalanceForInventory = value; }
        }

        public bool UseBalanceForSell
        {
            get { return useBalanceForSell; }
            set { useBalanceForSell = value; }
        }

        public bool UseRangeForInvoices
        {
            get { return useRangeForInvoices; }
            set { useRangeForInvoices = value; }
        }

        public bool IsTimePayProduct
        {
            get { return isTimePayProduct; }
            set { isTimePayProduct = value; }
        }

        [CanBeNull]
        public Dictionary<string, BarcodeContainer> Barcodes
        {
            get { return barcodes; }
            set { barcodes = value; }
        }

        public long? ExpirationDate
        {
            get { return expirationDate; }
            set { expirationDate = value; }
        }

        public DateTime? AssemblyChartModified
        {
            get { return assemblyChartModified; }
            set { assemblyChartModified = value; }
        }

        public bool CookWithMainDish
        {
            get { return cookWithMainDish; }
            set { cookWithMainDish = value; }
        }

        [CanBeNull]
        public SourceNature SourceNature
        {
            get { return sourceNature; }
            set { sourceNature = value; }
        }

        [CanBeNull]
        public RateSchedule RateSchedule
        {
            get { return rateSchedule; }
            set { rateSchedule = value; }
        }

        public bool RelativeRateSchedule
        {
            get { return relativeRateSchedule; }
            set { relativeRateSchedule = value; }
        }

        public int? MinimumTimePayProductDurationMinutes
        {
            get { return minimumTimePayProductDurationMinutes; }
            set { minimumTimePayProductDurationMinutes = value; }
        }

        public int TimePayProductDurationStepMinutes
        {
            get { return timePayProductDurationStepMinutes; }
            set { timePayProductDurationStepMinutes = value; }
        }

        public bool PrintOnAdd
        {
            get { return printOnAdd; }
            set { printOnAdd = value; }
        }

        public decimal ColdLossPercent
        {
            get { return coldLossPercent; }
            set { coldLossPercent = value; }
        }

        public decimal HotLossPercent
        {
            get { return hotLossPercent; }
            set { hotLossPercent = value; }
        }

        public bool AmountIndependentOfParentAmount
        {
            get { return amountIndependentOfParentAmount; }
            set { amountIndependentOfParentAmount = value; }
        }

        [CanBeNull]
        public string NameKitchen
        {
            get { return nameKitchen; }
            set { nameKitchen = value; }
        }

        public long? CookingTimeNormal
        {
            get { return cookingTimeNormal; }
            set { cookingTimeNormal = value; }
        }

        public long? CookingTimePeak
        {
            get { return cookingTimePeak; }
            set { cookingTimePeak = value; }
        }

        public bool UseDefaultCookingTime
        {
            get { return useDefaultCookingTime; }
            set { useDefaultCookingTime = value; }
        }

        public bool CanSetOpenPrice
        {
            get { return canSetOpenPrice; }
            set { canSetOpenPrice = value; }
        }

        public bool CanChangeAmountCookedDish
        {
            get { return canChangeAmountCookedDish; }
            set { canChangeAmountCookedDish = value; }
        }

        public HashSet<AllergenGroup> AllergenGroups
        {
            get { return allergenGroups; }
            set { allergenGroups = value; }
        }

        [CanBeNull]
        public HashSet<ProductTag> ProductTags
        {
            get { return productTags; }
            set { productTags = value; }
        }

        public ProductItemCategory ItemCategory
        {
            get { return itemCategory; }
            set { itemCategory = value; }
        }

        public ProductTransferType TransferType
        {
            get { return transferType; }
            set { transferType = value; }
        }

        public decimal PercentageOfAlcohol
        {
            get { return percentageOfAlcohol; }
            set { percentageOfAlcohol = value; }
        }

        public bool IsPercentageOfAlcoholApplicable
        {
            get { return isPercentageOfAlcoholApplicable; }
            set { isPercentageOfAlcoholApplicable = value; }
        }

        [CanBeNull]
        public HashSet<ProductDisabledField> DisabledFields
        {
            get { return disabledFields; }
            set { disabledFields = value; }
        }

    }

    [DataClass("ProductAwareKey")]
    public partial interface ProductAwareKey
    {

    }

    [RootEntity]
    [DataClass("ProductCategory")]
    public partial class ProductCategory : LocalizableNamePersistedEntity
    {
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductCategory() {}

        public ProductCategory(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [RootEntity]
    [DataClass("ProductCookingExpenses")]
    public partial class ProductCookingExpenses : PersistedEntity
    {
        private ProductTypeForCooking productType;
        private CookingType cookingType;
        private decimal? fat;
        private decimal? carbohydrate;
        private decimal? fiber;
        private decimal? energy;

        protected ProductCookingExpenses() {}

        public ProductCookingExpenses(Guid id, ProductTypeForCooking productType, CookingType cookingType, decimal? fat, decimal? carbohydrate, decimal? fiber, decimal? energy)
            : base(id)
        {
            this.productType = productType;
            this.cookingType = cookingType;
            this.fat = fat;
            this.carbohydrate = carbohydrate;
            this.fiber = fiber;
            this.energy = energy;
        }

        public ProductCookingExpenses(Guid id)
            : base(id)
        {

        }

        public ProductTypeForCooking ProductType
        {
            get { return productType; }
            set { productType = value; }
        }

        public CookingType CookingType
        {
            get { return cookingType; }
            set { cookingType = value; }
        }

        public decimal? Fat
        {
            get { return fat; }
            set { fat = value; }
        }

        public decimal? Carbohydrate
        {
            get { return carbohydrate; }
            set { carbohydrate = value; }
        }

        public decimal? Fiber
        {
            get { return fiber; }
            set { fiber = value; }
        }

        public decimal? Energy
        {
            get { return energy; }
            set { energy = value; }
        }

    }

    [DataClass("ProductCostAndOutput")]
    public partial class ProductCostAndOutput
    {
        private DateTime? date;
        private Product product;
        private EvaluableDecimalValue slidingAverageCost;
        private decimal? lastCost;
        private EvaluableDecimalValue ingredientWiseSlidingCost;
        private EvaluableDecimalValue ingredientWiseLastCost;
        private EvaluableDecimalValue operatingCost;
        private string outputComment;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductCostAndOutput() {}

        public ProductCostAndOutput(DateTime? date, Product product, EvaluableDecimalValue slidingAverageCost, decimal? lastCost, EvaluableDecimalValue ingredientWiseSlidingCost, EvaluableDecimalValue ingredientWiseLastCost, EvaluableDecimalValue operatingCost, string outputComment)
        {
            this.date = date;
            this.product = product;
            this.slidingAverageCost = slidingAverageCost;
            this.lastCost = lastCost;
            this.ingredientWiseSlidingCost = ingredientWiseSlidingCost;
            this.ingredientWiseLastCost = ingredientWiseLastCost;
            this.operatingCost = operatingCost;
            this.outputComment = outputComment;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public EvaluableDecimalValue SlidingAverageCost
        {
            get { return slidingAverageCost; }
            set { slidingAverageCost = value; }
        }

        public decimal? LastCost
        {
            get { return lastCost; }
            set { lastCost = value; }
        }

        public EvaluableDecimalValue IngredientWiseSlidingCost
        {
            get { return ingredientWiseSlidingCost; }
            set { ingredientWiseSlidingCost = value; }
        }

        public EvaluableDecimalValue IngredientWiseLastCost
        {
            get { return ingredientWiseLastCost; }
            set { ingredientWiseLastCost = value; }
        }

        public EvaluableDecimalValue OperatingCost
        {
            get { return operatingCost; }
            set { operatingCost = value; }
        }

        public string OutputComment
        {
            get { return outputComment; }
            set { outputComment = value; }
        }

    }

    [DataClass("ProductEntryReport")]
    public partial class ProductEntryReport
    {
        private Product product;
        private DateTime? date;
        private AssemblyChartItemTree tree;
        private Dictionary<Product, EvaluableDecimalValue> costPrices;
        private Dictionary<Product, PriceListItem> priceListItems;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductEntryReport() {}

        public ProductEntryReport(Product product, DateTime? date, AssemblyChartItemTree tree)
        {
            this.product = product;
            this.date = date;
            this.tree = tree;
        }
        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public AssemblyChartItemTree Tree
        {
            get { return tree; }
            set { tree = value; }
        }

        public Dictionary<Product, EvaluableDecimalValue> CostPrices
        {
            get { return costPrices; }
            set { costPrices = value; }
        }

        public Dictionary<Product, PriceListItem> PriceListItems
        {
            get { return priceListItems; }
            set { priceListItems = value; }
        }

    }

    [RootEntity]
    [DataClass("ProductGroup")]
    public partial class ProductGroup : ProductTreeEntity
    {
        private ProductGroupType type;
        [HasDefaultValue]
        private bool includeInReport = true;
        [HasDefaultValue]
        private bool isChainRoot = false;
        private DepartmentFilter visibilityFilter;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductGroup() {}

        public ProductGroup(Guid id, LocalizableValue name, string description, string num, ProductGroup parent, string code, ProductGroupType type)
            : base(id, name, description, num, parent, code)
        {
            this.type = type;
        }

        public ProductGroup(Guid id, LocalizableValue name, string code, ProductGroupType type)
            : base(id, name, code)
        {
            this.type = type;
        }

        public ProductGroupType Type
        {
            get { return type; }
            set { type = value; }
        }

        public bool IncludeInReport
        {
            get { return includeInReport; }
            set { includeInReport = value; }
        }

        public bool IsChainRoot
        {
            get { return isChainRoot; }
            set { isChainRoot = value; }
        }

        [CanBeNull]
        public DepartmentFilter VisibilityFilter
        {
            get { return visibilityFilter; }
            set { visibilityFilter = value; }
        }

    }

    [DataClass("ProductGroupChildrenFillInfo")]
    public partial class ProductGroupChildrenFillInfo
    {
        private string fieldName;
        private string getterName;
        private string setterName;

        protected ProductGroupChildrenFillInfo() {}

        public ProductGroupChildrenFillInfo(string fieldName, string getterName, string setterName)
        {
            this.fieldName = fieldName;
            this.getterName = getterName;
            this.setterName = setterName;
        }
        public string FieldName
        {
            get { return fieldName; }
        }

        public string GetterName
        {
            get { return getterName; }
        }

        public string SetterName
        {
            get { return setterName; }
        }

    }

    [DataClass("ProductGroupType")]
    public enum ProductGroupType
    {
        PRODUCTS,
        MODIFIERS
    }

    [DataClass("ProductImage")]
    public partial class ProductImage
    {
        private ProductImageType type;
        private DateTime? dateStart;
        private DateTime? dateEnd;
        private SavedImageInfo image;

        public ProductImage() {}

        public ProductImage(ProductImageType type, DateTime? dateStart, DateTime? dateEnd, SavedImageInfo image)
        {
            this.type = type;
            this.dateStart = dateStart;
            this.dateEnd = dateEnd;
            this.image = image;
        }
        public ProductImageType Type
        {
            get { return type; }
            set { type = value; }
        }

        public DateTime? DateStart
        {
            get { return dateStart; }
            set { dateStart = value; }
        }

        public DateTime? DateEnd
        {
            get { return dateEnd; }
            set { dateEnd = value; }
        }

        public SavedImageInfo Image
        {
            get { return image; }
            set { image = value; }
        }

    }

    [DataClass("ProductImageType")]
    [EnumClass]
    public partial class ProductImageType : LocalizableName<ProductImageType>
    {
        /// <summary> Сертификат соответствия. </summary>
        public static readonly ProductImageType CERTIFICATE_OF_COMPLIANCE = new ProductImageType("CERTIFICATE_OF_COMPLIANCE");
        /// <summary> Сертификат качества. </summary>
        public static readonly ProductImageType CERTIFICATE_OF_QUALITY = new ProductImageType("CERTIFICATE_OF_QUALITY");

        private readonly string __value;
        private readonly string __nameResId;

        private ProductImageType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PRODUCTIMAGETYPE_NAME_" + __value;
        }

        public static ProductImageType Parse(string value)
        {
            switch(value)
            {
                case "CERTIFICATE_OF_COMPLIANCE": return CERTIFICATE_OF_COMPLIANCE;
                case "CERTIFICATE_OF_QUALITY": return CERTIFICATE_OF_QUALITY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductImageType[] VALUES
        {
            get
            {
                return new []
                {
                    CERTIFICATE_OF_COMPLIANCE, 
                    CERTIFICATE_OF_QUALITY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ProductIncomeTransaction")]
    public partial class ProductIncomeTransaction : AbstractVatTransaction
    {

        protected ProductIncomeTransaction() {}

        public ProductIncomeTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {

        }

        public ProductIncomeTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

    }

    [DataClass("ProductInventoryCorrection")]
    public partial class ProductInventoryCorrection : AccountingTransaction
    {
        private ProductInventoryEvent inventoryEvent;

        protected ProductInventoryCorrection() {}

        public ProductInventoryCorrection(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, ProductInventoryEvent inventoryEvent)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {
            this.inventoryEvent = inventoryEvent;
        }

        public ProductInventoryCorrection(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public ProductInventoryEvent InventoryEvent
        {
            get { return inventoryEvent; }
            set { inventoryEvent = value; }
        }

    }

    [DataClass("ProductInventoryEvent")]
    public partial class ProductInventoryEvent : RestoEvent
    {
        private Guid? inventoryId;
        private Guid? inventoryItemId;
        private string inventoryNumber;
        private Store store;
        private Product product;
        private decimal? amountRequired;
        private Account accountSurplus;
        private Account accountShortage;
        private Conception conception;
        private Guid? sessionId;

        protected ProductInventoryEvent() {}

        public ProductInventoryEvent(Guid id, DepartmentEntity department, DateTime date, Guid? inventoryId, Guid? inventoryItemId, string inventoryNumber, Store store, Product product, decimal? amountRequired, Account accountSurplus, Account accountShortage)
            : base(id, department, date)
        {
            this.inventoryId = inventoryId;
            this.inventoryItemId = inventoryItemId;
            this.inventoryNumber = inventoryNumber;
            this.store = store;
            this.product = product;
            this.amountRequired = amountRequired;
            this.accountSurplus = accountSurplus;
            this.accountShortage = accountShortage;
        }

        public ProductInventoryEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public Guid? InventoryId
        {
            get { return inventoryId; }
            set { inventoryId = value; }
        }

        public Guid? InventoryItemId
        {
            get { return inventoryItemId; }
            set { inventoryItemId = value; }
        }

        public string InventoryNumber
        {
            get { return inventoryNumber; }
            set { inventoryNumber = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? AmountRequired
        {
            get { return amountRequired; }
            set { amountRequired = value; }
        }

        public Account AccountSurplus
        {
            get { return accountSurplus; }
            set { accountSurplus = value; }
        }

        public Account AccountShortage
        {
            get { return accountShortage; }
            set { accountShortage = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

    }

    [RootEntity]
    [DataClass("ProductItemCategory")]
    public partial class ProductItemCategory : PersistedEntity
    {
        private string code;
        private string name;
        private string shortName;
        private bool system;

        protected ProductItemCategory() {}

        public ProductItemCategory(Guid id, string code, string name, string shortName, bool system)
            : base(id)
        {
            this.code = code;
            this.name = name;
            this.shortName = shortName;
            this.system = system;
        }

        public ProductItemCategory(Guid id)
            : base(id)
        {

        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

    }

    [DataClass("ProductMarkupSettings")]
    public partial class ProductMarkupSettings
    {
        [HasDefaultValue]
        private decimal markupPercent = 0;

        protected ProductMarkupSettings() {}

        public ProductMarkupSettings(decimal markupPercent)
        {
            this.markupPercent = markupPercent;
        }
        public decimal MarkupPercent
        {
            get { return markupPercent; }
            set { markupPercent = value; }
        }

    }

    [DataClass("ProductPriceMarkupOptions")]
    public partial class ProductPriceMarkupOptions
    {
        private ProductPriceMarkupPriceSourceKind priceSourceKind;
        private decimal? thresholdPercent;
        private decimal? markupPercent;
        private decimal? markupValue;
        private bool isNdsIncludedInMarkup;
        private decimal? ndsPercent;
        private RoundRule roundRule;

        protected ProductPriceMarkupOptions() {}

        public ProductPriceMarkupOptions(ProductPriceMarkupPriceSourceKind priceSourceKind, decimal? thresholdPercent, decimal? markupPercent, decimal? markupValue, bool isNdsIncludedInMarkup, decimal? ndsPercent, RoundRule roundRule)
        {
            this.priceSourceKind = priceSourceKind;
            this.thresholdPercent = thresholdPercent;
            this.markupPercent = markupPercent;
            this.markupValue = markupValue;
            this.isNdsIncludedInMarkup = isNdsIncludedInMarkup;
            this.ndsPercent = ndsPercent;
            this.roundRule = roundRule;
        }
        public ProductPriceMarkupPriceSourceKind PriceSourceKind
        {
            get { return priceSourceKind; }
            set { priceSourceKind = value; }
        }

        public decimal? ThresholdPercent
        {
            get { return thresholdPercent; }
            set { thresholdPercent = value; }
        }

        public decimal? MarkupPercent
        {
            get { return markupPercent; }
            set { markupPercent = value; }
        }

        public decimal? MarkupValue
        {
            get { return markupValue; }
            set { markupValue = value; }
        }

        public bool IsNdsIncludedInMarkup
        {
            get { return isNdsIncludedInMarkup; }
            set { isNdsIncludedInMarkup = value; }
        }

        public decimal? NdsPercent
        {
            get { return ndsPercent; }
            set { ndsPercent = value; }
        }

        public RoundRule RoundRule
        {
            get { return roundRule; }
            set { roundRule = value; }
        }

    }

    [DataClass("ProductPriceMarkupPriceSourceKind")]
    public enum ProductPriceMarkupPriceSourceKind
    {
        COST_PRICE,
        PREVIOUS_PRICE
    }

    [DataClass("ProductReplacementDocument")]
    public partial class ProductReplacementDocument : AbstractDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DepartmentEntity> departments = new HashSet<DepartmentEntity>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductReplacementItem> items = new List<ProductReplacementItem>();

        protected ProductReplacementDocument() {}

        public ProductReplacementDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public ProductReplacementDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        [NotNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
        }

        [NotNull]
        public List<ProductReplacementItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("ProductReplacementItem")]
    public partial class ProductReplacementItem : AbstractProductDocumentItem
    {
        private ProductReplacementDocument document;

        protected ProductReplacementItem() {}

        public ProductReplacementItem(Guid id, int num, Product product, decimal amount, ProductReplacementDocument document)
            : base(id, num, product, amount)
        {
            this.document = document;
        }

        public ProductReplacementItem(Guid id, Product product, decimal amount)
            : base(id, product, amount)
        {

        }

        public ProductReplacementDocument Document
        {
            get { return document; }
            set { document = value; }
        }

    }

    [RootEntity]
    [DataClass("ProductScale")]
    public partial class ProductScale : LocalizableNamePersistedEntity
    {
        private ProductSize defaultProductSize;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductScale() {}

        public ProductScale(Guid id, LocalizableValue name, ProductSize defaultProductSize)
            : base(id, name)
        {
            this.defaultProductSize = defaultProductSize;
        }

        public ProductScale(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public ProductSize DefaultProductSize
        {
            get { return defaultProductSize; }
            set { defaultProductSize = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [RootEntity]
    [DataClass("ProductSize")]
    public partial class ProductSize : LocalizableNamePersistedEntity
    {
        private ProductScale productScale;
        private int priority;
        private LocalizableValue shortName;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductSize() {}

        public ProductSize(Guid id, LocalizableValue name, ProductScale productScale, int priority, LocalizableValue shortName)
            : base(id, name)
        {
            this.productScale = productScale;
            this.priority = priority;
            this.shortName = shortName;
        }

        public ProductSize(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public ProductScale ProductScale
        {
            get { return productScale; }
            set { productScale = value; }
        }

        public int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        public LocalizableValue ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("ProductSizeDocumentItem")]
    public partial interface ProductSizeDocumentItem : WithProductSize
    {

    }

    [DataClass("ProductSizeFactors")]
    public partial class ProductSizeFactors
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ProductSize, Dictionary<decimal, decimal>> factors = new Dictionary<ProductSize, Dictionary<decimal, decimal>>();


        [NotNull]
        public Dictionary<ProductSize, Dictionary<decimal, decimal>> Factors
        {
            get { return factors; }
        }

    }

    [DataClass("ProductSizeKey")]
    public partial class ProductSizeKey : ProductAwareKey, WithProductSize
    {
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProductSizeKey() {}

        public ProductSizeKey(Product product, ProductSize productSize)
        {
            this.product = product;
            this.productSize = productSize;
        }

        public ProductSizeKey(Product product)
        {
            this.product = product;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

    }

    [DataClass("ProductSizeServerConstants")]
    [EnumClass]
    public partial class ProductSizeServerConstants
    {
        public static readonly ProductSizeServerConstants INSTANCE = new ProductSizeServerConstants("INSTANCE", "Константы для обычных строк документов --- в которых не поддерживается указание размера блюда", null, null, 1);

        private readonly string comment;
        private readonly ProductScale defaultProductScale;
        private readonly ProductSize defaultProductSize;
        [HasDefaultValue]
        private readonly decimal defaultAmountFactor = 0;
        private readonly string __value;

        private ProductSizeServerConstants(string __value, string comment, ProductScale defaultProductScale, ProductSize defaultProductSize, decimal defaultAmountFactor)
        {
            this.__value = __value;
            this.comment = comment;
            this.defaultProductScale = defaultProductScale;
            this.defaultProductSize = defaultProductSize;
            this.defaultAmountFactor = defaultAmountFactor;
        }

        public static ProductSizeServerConstants Parse(string value)
        {
            switch(value)
            {
                case "INSTANCE": return INSTANCE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductSizeServerConstants[] VALUES
        {
            get
            {
                return new []
                {
                    INSTANCE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Comment
        {
            get { return comment; }
        }

        public ProductScale DefaultProductScale
        {
            get { return defaultProductScale; }
        }

        public ProductSize DefaultProductSize
        {
            get { return defaultProductSize; }
        }

        public decimal DefaultAmountFactor
        {
            get { return defaultAmountFactor; }
        }

    }

    [DataClass("ProductSizeStoreKey")]
    public partial class ProductSizeStoreKey : ProductAwareKey
    {
        private Store store;
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal amountFactor = 0;

        protected ProductSizeStoreKey() {}

        public ProductSizeStoreKey(Store store, Product product, ProductSize productSize, decimal amountFactor)
        {
            this.store = store;
            this.product = product;
            this.productSize = productSize;
            this.amountFactor = amountFactor;
        }

        public ProductSizeStoreKey(Product product, decimal amountFactor)
        {
            this.product = product;
            this.amountFactor = amountFactor;
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal AmountFactor
        {
            get { return amountFactor; }
            set { amountFactor = value; }
        }

    }

    [DataClass("ProductStockWriteoffDocument")]
    public partial class ProductStockWriteoffDocument : WriteoffDocument
    {

        protected ProductStockWriteoffDocument() {}

        public ProductStockWriteoffDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, status, store, accountTo)
        {

        }

        public ProductStockWriteoffDocument(Guid id, DateTime dateIncoming, string documentNumber, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, store, accountTo)
        {

        }

    }

    [RootEntity]
    [DataClass("ProductTag")]
    public partial class ProductTag : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private ProductTagGroup productTagGroup;

        protected ProductTag() {}

        public ProductTag(Guid id, LocalizableValue name, ProductTagGroup productTagGroup)
            : base(id, name)
        {
            this.productTagGroup = productTagGroup;
        }
        [NotNull]
        public ProductTagGroup ProductTagGroup
        {
            get { return productTagGroup; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  productTagGroup = value;
            }
        }

    }

    [RootEntity]
    [DataClass("ProductTagGroup")]
    public partial class ProductTagGroup : LocalizableNamePersistedEntity
    {
        private bool canSelectMultipleTags;

        protected ProductTagGroup() {}

        public ProductTagGroup(Guid id, LocalizableValue name, bool canSelectMultipleTags)
            : base(id, name)
        {
            this.canSelectMultipleTags = canSelectMultipleTags;
        }

        public ProductTagGroup(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public bool CanSelectMultipleTags
        {
            get { return canSelectMultipleTags; }
            set { canSelectMultipleTags = value; }
        }

    }

    [DataClass("ProductTransferType")]
    [EnumClass]
    public partial class ProductTransferType : LocalizableName<ProductTransferType>
    {
        /// <summary> Аванс. </summary>
        public static readonly ProductTransferType ADVANCE = new ProductTransferType("ADVANCE");
        /// <summary> Оплата кредита. </summary>
        public static readonly ProductTransferType CREDITPAY = new ProductTransferType("CREDITPAY");

        private readonly string __value;
        private readonly string __nameResId;

        private ProductTransferType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PRODUCTTRANSFERTYPE_NAME_" + __value;
        }

        public static ProductTransferType Parse(string value)
        {
            switch(value)
            {
                case "ADVANCE": return ADVANCE;
                case "CREDITPAY": return CREDITPAY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductTransferType[] VALUES
        {
            get
            {
                return new []
                {
                    ADVANCE, 
                    CREDITPAY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ProductTreeEntity")]
    public abstract partial class ProductTreeEntity : LocalizableNamePersistedEntity
    {
        [HasDefaultValue]
        private bool system = false;
        private string description;
        private string num;
        private ProductGroup parent;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        private User userCreated;
        private User userModified;
        private List<ChoiceBinding> modifiers;
        private ModifierSchema modifierSchema;
        private List<ChoiceBindingRedefinition> modifierSchemaRedefinitions;
        private decimal? priceMarkupPercent;
        private RGBColor color;
        private RGBColor fontColor;
        private SavedImageInfo frontImage;
        private int? position;
        private TaxCategory taxCategory;
        private ProductCategory category;
        private AccountingCategory accountingCategory;
        private int? defaultCourse;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DepartmentEntity, ProductMarkupSettings> markupSettings = new Dictionary<DepartmentEntity, ProductMarkupSettings>();
        [HasDefaultValue]
        private bool isFixedPrice = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CustomCategoryList, CustomCategoryValue> customCategories = new Dictionary<CustomCategoryList, CustomCategoryValue>();
        [Obsolete("Deprecated in Java code")]
        private User producer;
        private HashSet<User> producers;
        private AlcoholClass alcoholClass;
        private string egaisAlcCode;
        private OuterEconomicActivityNomenclatureCode outerEconomicActivityNomenclatureCode;
        private string uzFiscalCode;
        private Dictionary<Store, StoreLevelValue> minimalStoreBalanceLevels;
        private decimal? defaultMinimumStoreBalanceLevel;
        private Dictionary<Store, StoreLevelValue> maximumStoreBalanceLevels;
        private decimal? defaultMaximumStoreBalanceLevel;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected ProductTreeEntity() {}

        protected ProductTreeEntity(Guid id, LocalizableValue name, string description, string num, ProductGroup parent, string code)
            : base(id, name)
        {
            this.description = description;
            this.num = num;
            this.parent = parent;
            this.code = code;
        }

        protected ProductTreeEntity(Guid id, LocalizableValue name, string code)
            : base(id, name)
        {
            this.code = code;
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public string Num
        {
            get { return num; }
            set { num = value; }
        }

        public ProductGroup Parent
        {
            get { return parent; }
            set { parent = value; }
        }

        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        [CanBeNull]
        public User UserCreated
        {
            get { return userCreated; }
            set { userCreated = value; }
        }

        [CanBeNull]
        public User UserModified
        {
            get { return userModified; }
            set { userModified = value; }
        }

        public List<ChoiceBinding> Modifiers
        {
            get { return modifiers; }
            set { modifiers = value; }
        }

        [CanBeNull]
        public ModifierSchema ModifierSchema
        {
            get { return modifierSchema; }
            set { modifierSchema = value; }
        }

        [CanBeNull]
        public List<ChoiceBindingRedefinition> ModifierSchemaRedefinitions
        {
            get { return modifierSchemaRedefinitions; }
            set { modifierSchemaRedefinitions = value; }
        }

        public decimal? PriceMarkupPercent
        {
            get { return priceMarkupPercent; }
            set { priceMarkupPercent = value; }
        }

        [CanBeNull]
        public RGBColor Color
        {
            get { return color; }
            set { color = value; }
        }

        [CanBeNull]
        public RGBColor FontColor
        {
            get { return fontColor; }
            set { fontColor = value; }
        }

        [CanBeNull]
        public SavedImageInfo FrontImage
        {
            get { return frontImage; }
            set { frontImage = value; }
        }

        public int? Position
        {
            get { return position; }
            set { position = value; }
        }

        [CanBeNull]
        public TaxCategory TaxCategory
        {
            get { return taxCategory; }
            set { taxCategory = value; }
        }

        [CanBeNull]
        public ProductCategory Category
        {
            get { return category; }
            set { category = value; }
        }

        [CanBeNull]
        public AccountingCategory AccountingCategory
        {
            get { return accountingCategory; }
            set { accountingCategory = value; }
        }

        public int? DefaultCourse
        {
            get { return defaultCourse; }
            set { defaultCourse = value; }
        }

        [NotNull]
        public Dictionary<DepartmentEntity, ProductMarkupSettings> MarkupSettings
        {
            get { return markupSettings; }
        }

        public bool IsFixedPrice
        {
            get { return isFixedPrice; }
            set { isFixedPrice = value; }
        }

        [NotNull]
        public Dictionary<CustomCategoryList, CustomCategoryValue> CustomCategories
        {
            get { return customCategories; }
        }

        [Obsolete("Deprecated in Java code")]
        [CanBeNull]
        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        [CanBeNull]
        public HashSet<User> Producers
        {
            get { return producers; }
            set { producers = value; }
        }

        [CanBeNull]
        public AlcoholClass AlcoholClass
        {
            get { return alcoholClass; }
            set { alcoholClass = value; }
        }

        [CanBeNull]
        public string EgaisAlcCode
        {
            get { return egaisAlcCode; }
            set { egaisAlcCode = value; }
        }

        [CanBeNull]
        public OuterEconomicActivityNomenclatureCode OuterEconomicActivityNomenclatureCode
        {
            get { return outerEconomicActivityNomenclatureCode; }
            set { outerEconomicActivityNomenclatureCode = value; }
        }

        [CanBeNull]
        public string UzFiscalCode
        {
            get { return uzFiscalCode; }
            set { uzFiscalCode = value; }
        }

        [CanBeNull]
        public Dictionary<Store, StoreLevelValue> MinimalStoreBalanceLevels
        {
            get { return minimalStoreBalanceLevels; }
            set { minimalStoreBalanceLevels = value; }
        }

        public decimal? DefaultMinimumStoreBalanceLevel
        {
            get { return defaultMinimumStoreBalanceLevel; }
            set { defaultMinimumStoreBalanceLevel = value; }
        }

        [CanBeNull]
        public Dictionary<Store, StoreLevelValue> MaximumStoreBalanceLevels
        {
            get { return maximumStoreBalanceLevels; }
            set { maximumStoreBalanceLevels = value; }
        }

        public decimal? DefaultMaximumStoreBalanceLevel
        {
            get { return defaultMaximumStoreBalanceLevel; }
            set { defaultMaximumStoreBalanceLevel = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("ProductTreeEntityFieldName")]
    [EnumClass]
    public partial class ProductTreeEntityFieldName
    {
        public static readonly ProductTreeEntityFieldName TAX_CATEGORY = new ProductTreeEntityFieldName("TAX_CATEGORY", "taxCategory");
        public static readonly ProductTreeEntityFieldName PRICE_MARKUP_PERCENT = new ProductTreeEntityFieldName("PRICE_MARKUP_PERCENT", "priceMarkupPercent");
        public static readonly ProductTreeEntityFieldName IS_FIXED_PRICE = new ProductTreeEntityFieldName("IS_FIXED_PRICE", "isFixedPrice");
        public static readonly ProductTreeEntityFieldName MARKUP_SETTINGS = new ProductTreeEntityFieldName("MARKUP_SETTINGS", "markupSettings");
        public static readonly ProductTreeEntityFieldName CATEGORY = new ProductTreeEntityFieldName("CATEGORY", "category");
        public static readonly ProductTreeEntityFieldName ACCOUNTING_CATEGORY = new ProductTreeEntityFieldName("ACCOUNTING_CATEGORY", "accountingCategory");
        public static readonly ProductTreeEntityFieldName ALCOHOL_CLASS = new ProductTreeEntityFieldName("ALCOHOL_CLASS", "alcoholClass");
        public static readonly ProductTreeEntityFieldName MINIMAL_STORE_BALANCE_LEVELS = new ProductTreeEntityFieldName("MINIMAL_STORE_BALANCE_LEVELS", "minimalStoreBalanceLevels");
        public static readonly ProductTreeEntityFieldName MAXIMUM_STORE_BALANCE_LEVELS = new ProductTreeEntityFieldName("MAXIMUM_STORE_BALANCE_LEVELS", "maximumStoreBalanceLevels");
        public static readonly ProductTreeEntityFieldName DEFAULT_MAXIMUM_STORE_BALANCE_LEVEL = new ProductTreeEntityFieldName("DEFAULT_MAXIMUM_STORE_BALANCE_LEVEL", "defaultMaximumStoreBalanceLevel");
        public static readonly ProductTreeEntityFieldName DEFAULT_MINIMUM_STORE_BALANCE_LEVEL = new ProductTreeEntityFieldName("DEFAULT_MINIMUM_STORE_BALANCE_LEVEL", "defaultMinimumStoreBalanceLevel");

        private readonly string fieldName;
        private readonly string __value;

        private ProductTreeEntityFieldName(string __value, string fieldName)
        {
            this.__value = __value;
            this.fieldName = fieldName;
        }

        public static ProductTreeEntityFieldName Parse(string value)
        {
            switch(value)
            {
                case "TAX_CATEGORY": return TAX_CATEGORY;
                case "PRICE_MARKUP_PERCENT": return PRICE_MARKUP_PERCENT;
                case "IS_FIXED_PRICE": return IS_FIXED_PRICE;
                case "MARKUP_SETTINGS": return MARKUP_SETTINGS;
                case "CATEGORY": return CATEGORY;
                case "ACCOUNTING_CATEGORY": return ACCOUNTING_CATEGORY;
                case "ALCOHOL_CLASS": return ALCOHOL_CLASS;
                case "MINIMAL_STORE_BALANCE_LEVELS": return MINIMAL_STORE_BALANCE_LEVELS;
                case "MAXIMUM_STORE_BALANCE_LEVELS": return MAXIMUM_STORE_BALANCE_LEVELS;
                case "DEFAULT_MAXIMUM_STORE_BALANCE_LEVEL": return DEFAULT_MAXIMUM_STORE_BALANCE_LEVEL;
                case "DEFAULT_MINIMUM_STORE_BALANCE_LEVEL": return DEFAULT_MINIMUM_STORE_BALANCE_LEVEL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductTreeEntityFieldName[] VALUES
        {
            get
            {
                return new []
                {
                    TAX_CATEGORY, 
                    PRICE_MARKUP_PERCENT, 
                    IS_FIXED_PRICE, 
                    MARKUP_SETTINGS, 
                    CATEGORY, 
                    ACCOUNTING_CATEGORY, 
                    ALCOHOL_CLASS, 
                    MINIMAL_STORE_BALANCE_LEVELS, 
                    MAXIMUM_STORE_BALANCE_LEVELS, 
                    DEFAULT_MAXIMUM_STORE_BALANCE_LEVEL, 
                    DEFAULT_MINIMUM_STORE_BALANCE_LEVEL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string FieldName
        {
            get { return fieldName; }
        }

    }

    [DataClass("ProductTreeWarning")]
    public enum ProductTreeWarning
    {
        EMPTY_ASSEMBLY_CHART,
        ASSEMBLY_CHART_CONTAINS_DELETED_ITEMS,
        GROUP_HAS_WARNINGS,
        MISSED_ASSEMBLY_CHART,
        WRONG_WRITEOFF_STRATEGY
    }

    [DataClass("ProductType")]
    [EnumClass]
    public partial class ProductType : LocalizableName<ProductType>
    {
        /// <summary> Товар. </summary>
        public static readonly ProductType GOODS = new ProductType("GOODS", true, false, 1);
        /// <summary> Блюдо. </summary>
        public static readonly ProductType DISH = new ProductType("DISH", false, true, 2);
        /// <summary> Заготовка. </summary>
        public static readonly ProductType PREPARED = new ProductType("PREPARED", false, true, 3);
        /// <summary> Услуга. </summary>
        public static readonly ProductType SERVICE = new ProductType("SERVICE", false, false, 4);
        /// <summary> Модификатор. </summary>
        public static readonly ProductType MODIFIER = new ProductType("MODIFIER", false, true, 5);
        /// <summary> Внешние товары. </summary>
        public static readonly ProductType OUTER = new ProductType("OUTER", false, false, 6);
        /// <summary> Топливо. </summary>
        public static readonly ProductType PETROL = new ProductType("PETROL", true, false, 7);
        /// <summary> Тариф. </summary>
        public static readonly ProductType RATE = new ProductType("RATE", false, false, 8);

        private readonly bool accountable;
        private readonly bool mayHaveAssemblyCharts;
        private readonly int code;
        private readonly string __value;
        private readonly string __nameResId;

        private ProductType(string __value, bool accountable, bool mayHaveAssemblyCharts, int code)
        {
            this.__value = __value;
            this.__nameResId = "PRODUCTTYPE_NAME_" + __value;
            this.accountable = accountable;
            this.mayHaveAssemblyCharts = mayHaveAssemblyCharts;
            this.code = code;
        }

        public static ProductType Parse(string value)
        {
            switch(value)
            {
                case "GOODS": return GOODS;
                case "DISH": return DISH;
                case "PREPARED": return PREPARED;
                case "SERVICE": return SERVICE;
                case "MODIFIER": return MODIFIER;
                case "OUTER": return OUTER;
                case "PETROL": return PETROL;
                case "RATE": return RATE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductType[] VALUES
        {
            get
            {
                return new []
                {
                    GOODS, 
                    DISH, 
                    PREPARED, 
                    SERVICE, 
                    MODIFIER, 
                    OUTER, 
                    PETROL, 
                    RATE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Accountable
        {
            get { return accountable; }
        }

        public bool MayHaveAssemblyCharts
        {
            get { return mayHaveAssemblyCharts; }
        }

        public int Code
        {
            get { return code; }
        }

    }

    [RootEntity]
    [DataClass("ProductTypeForCooking")]
    public partial class ProductTypeForCooking : LocalizableNamePersistedEntity
    {
        private bool def;

        protected ProductTypeForCooking() {}

        public ProductTypeForCooking(Guid id, LocalizableValue name, bool def)
            : base(id, name)
        {
            this.def = def;
        }

        public ProductTypeForCooking(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public bool Def
        {
            get { return def; }
            set { def = value; }
        }

    }

    [DataClass("ProductWriteoffEvent")]
    public partial class ProductWriteoffEvent : RestoEvent, WithProductSize
    {
        private TransactionType type;
        private Product product;
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal amountFactor = 0;
        private Product incomingOverrideProduct;
        private decimal? amount;
        private Store storeFrom;
        private Account accountTo;
        private User counteragentTo;
        private RestaurantSection cookingPlace;
        private Guid? sessionId;
        private Guid? writeoffDocumentId;
        private Guid? documentItemId;
        private string writeoffDocumentNumber;
        private Conception conception;

        protected ProductWriteoffEvent() {}

        public ProductWriteoffEvent(Guid id, DepartmentEntity department, DateTime date, TransactionType type, Product product, decimal amountFactor, decimal? amount, Store storeFrom, Account accountTo, User counteragentTo, RestaurantSection cookingPlace, Guid? sessionId, Guid? writeoffDocumentId, Guid? documentItemId, string writeoffDocumentNumber)
            : base(id, department, date)
        {
            this.type = type;
            this.product = product;
            this.amountFactor = amountFactor;
            this.amount = amount;
            this.storeFrom = storeFrom;
            this.accountTo = accountTo;
            this.counteragentTo = counteragentTo;
            this.cookingPlace = cookingPlace;
            this.sessionId = sessionId;
            this.writeoffDocumentId = writeoffDocumentId;
            this.documentItemId = documentItemId;
            this.writeoffDocumentNumber = writeoffDocumentNumber;
        }

        public ProductWriteoffEvent(Guid id, DateTime date, decimal amountFactor)
            : base(id, date)
        {
            this.amountFactor = amountFactor;
        }

        public TransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        [CanBeNull]
        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal AmountFactor
        {
            get { return amountFactor; }
            set { amountFactor = value; }
        }

        [CanBeNull]
        public Product IncomingOverrideProduct
        {
            get { return incomingOverrideProduct; }
            set { incomingOverrideProduct = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

        public User CounteragentTo
        {
            get { return counteragentTo; }
            set { counteragentTo = value; }
        }

        public RestaurantSection CookingPlace
        {
            get { return cookingPlace; }
            set { cookingPlace = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public Guid? WriteoffDocumentId
        {
            get { return writeoffDocumentId; }
            set { writeoffDocumentId = value; }
        }

        public Guid? DocumentItemId
        {
            get { return documentItemId; }
            set { documentItemId = value; }
        }

        public string WriteoffDocumentNumber
        {
            get { return writeoffDocumentNumber; }
            set { writeoffDocumentNumber = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

    }

    [DataClass("ProductWriteoffStrategy")]
    public enum ProductWriteoffStrategy
    {
        DIRECT,
        ASSEMBLE
    }

    [DataClass("ProductWriteoffTransaction")]
    public partial class ProductWriteoffTransaction : AbstractVatTransaction
    {
        private ProductWriteoffEvent writeoff;
        private ProductSize productSize;

        protected ProductWriteoffTransaction() {}

        public ProductWriteoffTransaction(Guid id, DepartmentEntity department, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to, decimal? sum, string num, Guid? documentId, Guid? documentItemId, string comment, Guid? sessionId, ProductWriteoffEvent writeoff, ProductSize productSize)
            : base(id, department, date, type, from, to, sum, num, documentId, documentItemId, comment, sessionId)
        {
            this.writeoff = writeoff;
            this.productSize = productSize;
        }

        public ProductWriteoffTransaction(Guid id, DateTime date, TransactionType type, AccountingTransactionPart from, AccountingTransactionPart to)
            : base(id, date, type, from, to)
        {

        }

        public ProductWriteoffEvent Writeoff
        {
            get { return writeoff; }
            set { writeoff = value; }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

    }

    [DataClass("ProductionDocument")]
    public partial class ProductionDocument : AbstractProductsWriteoffDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductionDocumentItem> items = new List<ProductionDocumentItem>();

        protected ProductionDocument() {}

        public ProductionDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, status, store, accountTo)
        {

        }

        public ProductionDocument(Guid id, DateTime dateIncoming, string documentNumber, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, store, accountTo)
        {

        }

        [NotNull]
        public List<ProductionDocumentItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("ProductionDocumentItem")]
    public partial class ProductionDocumentItem : AbstractProductsWriteoffDocumentItem
    {
        [NotNull, NotNullField]
        private ProductionDocument document;

        protected ProductionDocumentItem() {}

        public ProductionDocumentItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, ProductSize productSize, decimal amountFactor, ProductionDocument document)
            : base(id, num, product, amount, amountUnit, productSize, amountFactor)
        {
            this.document = document;
        }

        public ProductionDocumentItem(Guid id, Product product, decimal amount, decimal amountFactor, ProductionDocument document)
            : base(id, product, amount, amountFactor)
        {
            this.document = document;
        }

        [NotNull]
        public ProductionDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

    }

    [DataClass("Rate")]
    public partial class Rate
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<RateInterval> intervals = new HashSet<RateInterval>();
        [NotNull, NotNullField]
        private Product serviceRate;

        protected Rate() {}

        public Rate(Product serviceRate)
        {
            this.serviceRate = serviceRate;
        }
        [NotNull]
        public HashSet<RateInterval> Intervals
        {
            get { return intervals; }
        }

        [NotNull]
        public Product ServiceRate
        {
            get { return serviceRate; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  serviceRate = value;
            }
        }

    }

    [DataClass("RateInterval")]
    public partial class RateInterval
    {
        private WeekDays dayOfWeek;
        private DayTime begin;
        private DayTime end;

        public RateInterval() {}

        public RateInterval(WeekDays dayOfWeek, DayTime begin, DayTime end)
        {
            this.dayOfWeek = dayOfWeek;
            this.begin = begin;
            this.end = end;
        }
        public WeekDays DayOfWeek
        {
            get { return dayOfWeek; }
            set { dayOfWeek = value; }
        }

        public DayTime Begin
        {
            get { return begin; }
            set { begin = value; }
        }

        public DayTime End
        {
            get { return end; }
            set { end = value; }
        }

    }

    [DataClass("RateSchedule")]
    public partial class RateSchedule
    {
        private HashSet<Rate> rates;


        public HashSet<Rate> Rates
        {
            get { return rates; }
            set { rates = value; }
        }

    }

    [DataClass("ReportOfQualitySettings")]
    public partial class ReportOfQualitySettings
    {
        private int certificateOfQualityReportNumber;
        private string certificateOfQualityReportNumberStr;
        private string sez;
        private string certificateOfQuality;

        public ReportOfQualitySettings() {}

        public ReportOfQualitySettings(int certificateOfQualityReportNumber, string certificateOfQualityReportNumberStr, string sez, string certificateOfQuality)
        {
            this.certificateOfQualityReportNumber = certificateOfQualityReportNumber;
            this.certificateOfQualityReportNumberStr = certificateOfQualityReportNumberStr;
            this.sez = sez;
            this.certificateOfQuality = certificateOfQuality;
        }
        public int CertificateOfQualityReportNumber
        {
            get { return certificateOfQualityReportNumber; }
            set { certificateOfQualityReportNumber = value; }
        }

        public string CertificateOfQualityReportNumberStr
        {
            get { return certificateOfQualityReportNumberStr; }
            set { certificateOfQualityReportNumberStr = value; }
        }

        public string Sez
        {
            get { return sez; }
            set { sez = value; }
        }

        public string CertificateOfQuality
        {
            get { return certificateOfQuality; }
            set { certificateOfQuality = value; }
        }

    }

    [DataClass("ReturnedInvoice")]
    public partial class ReturnedInvoice : AbstractOutgoingDocument, ProducerDocument
    {
        private Guid? incomingInvoiceId;
        [HasDefaultValue]
        private bool storeCostAffected = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ReturnedInvoice() {}

        public ReturnedInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount, Guid? incomingInvoiceId)
            : base(id, dateIncoming, documentNumber, status, supplier, revenueAccount, revenueDebitAccount, accountTo, discountsAccount)
        {
            this.incomingInvoiceId = incomingInvoiceId;
        }

        public ReturnedInvoice(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public Guid? IncomingInvoiceId
        {
            get { return incomingInvoiceId; }
            set { incomingInvoiceId = value; }
        }

        public bool StoreCostAffected
        {
            get { return storeCostAffected; }
            set { storeCostAffected = value; }
        }

    }

    [DataClass("ReturnedInvoiceItem")]
    public partial class ReturnedInvoiceItem : AbstractInvoiceItem, WithProducer
    {
        private User producer;
        private decimal? incomePrice;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ReturnedInvoiceItem() {}

        public ReturnedInvoiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum)
        {

        }

        public ReturnedInvoiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds)
            : base(id, product, amount, invoice, priceWithoutNds)
        {

        }

        [CanBeNull]
        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public decimal? IncomePrice
        {
            get { return incomePrice; }
            set { incomePrice = value; }
        }

    }

    [DataClass("SalesDocument")]
    public partial class SalesDocument : AbstractSalesDocument
    {
        private Guid? externalOutgoingInvoiceId;
        private Guid? externalProductionDocumentId;
        [HasDefaultValue]
        private bool? banquet = false;

        protected SalesDocument() {}

        public SalesDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueAccount, Account revenueDebitAccount, Account accountTo, Account discountsAccount)
            : base(id, dateIncoming, documentNumber, status, supplier, revenueAccount, revenueDebitAccount, accountTo, discountsAccount)
        {

        }

        public SalesDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public Guid? ExternalOutgoingInvoiceId
        {
            get { return externalOutgoingInvoiceId; }
            set { externalOutgoingInvoiceId = value; }
        }

        public Guid? ExternalProductionDocumentId
        {
            get { return externalProductionDocumentId; }
            set { externalProductionDocumentId = value; }
        }

        public bool? Banquet
        {
            get { return banquet; }
            set { banquet = value; }
        }

    }

    [DataClass("SalesDocumentItem")]
    public partial class SalesDocumentItem : AbstractAssemblyWriteoffOutgoingItem, WithSplitVat
    {
        [HasDefaultValue]
        private bool splitVat = false;

        protected SalesDocumentItem() {}

        public SalesDocumentItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, ProductSize productSize, decimal amountFactor)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum, productSize, amountFactor)
        {

        }

        public SalesDocumentItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds, decimal amountFactor)
            : base(id, product, amount, invoice, priceWithoutNds, amountFactor)
        {

        }

        public bool SplitVat
        {
            get { return splitVat; }
            set { splitVat = value; }
        }

    }

    [RootEntity]
    [DataClass("SourceNature")]
    public partial class SourceNature : PersistedEntity
    {
        [HasDefaultValue]
        private string code = "";
        [HasDefaultValue]
        private string twoLettersCode = "";
        [HasDefaultValue]
        private string threeLettersCode = "";
        [HasDefaultValue]
        private string name = "";

        protected SourceNature() {}

        public SourceNature(Guid id)
            : base(id)
        {

        }
        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public string TwoLettersCode
        {
            get { return twoLettersCode; }
            set { twoLettersCode = value; }
        }

        public string ThreeLettersCode
        {
            get { return threeLettersCode; }
            set { threeLettersCode = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }

    [DataClass("StationChart")]
    public partial class StationChart : AbstractProductChart
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<StationChartItem> items = new List<StationChartItem>();
        [HasDefaultValue]
        private decimal amount = 0;

        protected StationChart() {}

        public StationChart(Guid id, DateTime? dateFrom, DateTime? dateTo, Product product, decimal amount)
            : base(id, dateFrom, dateTo, product)
        {
            this.amount = amount;
        }

        public StationChart(Guid id, Product product, decimal amount)
            : base(id, product)
        {
            this.amount = amount;
        }

        [NotNull]
        public List<StationChartItem> Items
        {
            get { return items; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("StationChartExtended")]
    public partial class StationChartExtended : AbstractProductChart
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<StationChartItemExtended> items = new List<StationChartItemExtended>();
        [HasDefaultValue]
        private decimal amount = 0;
        [HasDefaultValue]
        private decimal producYield = 0;

        protected StationChartExtended() {}

        public StationChartExtended(Guid id, DateTime? dateFrom, DateTime? dateTo, Product product, decimal amount, decimal producYield)
            : base(id, dateFrom, dateTo, product)
        {
            this.amount = amount;
            this.producYield = producYield;
        }

        public StationChartExtended(Guid id, Product product, decimal amount, decimal producYield)
            : base(id, product)
        {
            this.amount = amount;
            this.producYield = producYield;
        }

        [NotNull]
        public List<StationChartItemExtended> Items
        {
            get { return items; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal ProducYield
        {
            get { return producYield; }
            set { producYield = value; }
        }

    }

    [DataClass("StationChartItem")]
    public partial class StationChartItem : AbstractProductChartItem
    {
        [NotNull, NotNullField]
        private StationChart assemblyChart;

        protected StationChartItem() {}

        public StationChartItem(Guid id, double sortWeight, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut, StationChart assemblyChart)
            : base(id, sortWeight, product, amountIn, amountMiddle, amountOut)
        {
            this.assemblyChart = assemblyChart;
        }

        public StationChartItem(Guid id, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut, StationChart assemblyChart)
            : base(id, product, amountIn, amountMiddle, amountOut)
        {
            this.assemblyChart = assemblyChart;
        }

        [NotNull]
        public StationChart AssemblyChart
        {
            get { return assemblyChart; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  assemblyChart = value;
            }
        }

    }

    [DataClass("StationChartItemExtended")]
    public partial class StationChartItemExtended : AbstractProductChartItem
    {
        [NotNull, NotNullField]
        private StationChartExtended assemblyChartExtended;
        private StationChartExtended chart;
        private decimal? amountInFull;
        private decimal? amountMiddleFull;
        private decimal? amountOutFull;

        protected StationChartItemExtended() {}

        public StationChartItemExtended(Guid id, double sortWeight, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut, StationChartExtended assemblyChartExtended, StationChartExtended chart, decimal? amountInFull, decimal? amountMiddleFull, decimal? amountOutFull)
            : base(id, sortWeight, product, amountIn, amountMiddle, amountOut)
        {
            this.assemblyChartExtended = assemblyChartExtended;
            this.chart = chart;
            this.amountInFull = amountInFull;
            this.amountMiddleFull = amountMiddleFull;
            this.amountOutFull = amountOutFull;
        }

        public StationChartItemExtended(Guid id, Product product, decimal amountIn, decimal amountMiddle, decimal amountOut, StationChartExtended assemblyChartExtended)
            : base(id, product, amountIn, amountMiddle, amountOut)
        {
            this.assemblyChartExtended = assemblyChartExtended;
        }

        [NotNull]
        public StationChartExtended AssemblyChartExtended
        {
            get { return assemblyChartExtended; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  assemblyChartExtended = value;
            }
        }

        public StationChartExtended Chart
        {
            get { return chart; }
            set { chart = value; }
        }

        public decimal? AmountInFull
        {
            get { return amountInFull; }
            set { amountInFull = value; }
        }

        public decimal? AmountMiddleFull
        {
            get { return amountMiddleFull; }
            set { amountMiddleFull = value; }
        }

        public decimal? AmountOutFull
        {
            get { return amountOutFull; }
            set { amountOutFull = value; }
        }

    }

    [DataClass("Store")]
    public partial class Store : Account
    {
        [NotNull, NotNullField]
        private CorporatedEntity npeParent;
        private User representativeSupplier;
        private string gln;
        private Guid? externalStoreGuid;
        private string address;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Store() {}

        public Store(Guid id, LocalizableValue name, AccountType type, string description, CorporatedEntity npeParent)
            : base(id, name, type, description)
        {
            this.npeParent = npeParent;
        }

        public Store(Guid id, LocalizableValue name, AccountType type, CorporatedEntity npeParent)
            : base(id, name, type)
        {
            this.npeParent = npeParent;
        }

        [NotNull]
        public CorporatedEntity NpeParent
        {
            get { return npeParent; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  npeParent = value;
            }
        }

        [CanBeNull]
        public User RepresentativeSupplier
        {
            get { return representativeSupplier; }
        }

        [CanBeNull]
        public string Gln
        {
            get { return gln; }
            set { gln = value; }
        }

        public Guid? ExternalStoreGuid
        {
            get { return externalStoreGuid; }
            set { externalStoreGuid = value; }
        }

        [CanBeNull]
        public string Address
        {
            get { return address; }
            set { address = value; }
        }

    }

    [DataClass("StoreBalance")]
    public partial class StoreBalance
    {
        [NotNull, NotNullField]
        private Store store;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, decimal> amounts = new Dictionary<Product, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, decimal> sums = new Dictionary<Product, decimal>();

        protected StoreBalance() {}

        public StoreBalance(Store store)
        {
            this.store = store;
        }
        [NotNull]
        public Store Store
        {
            get { return store; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  store = value;
            }
        }

        [NotNull]
        public Dictionary<Product, decimal> Amounts
        {
            get { return amounts; }
        }

        [NotNull]
        public Dictionary<Product, decimal> Sums
        {
            get { return sums; }
        }

    }

    [DataClass("StoreInfo")]
    public partial class StoreInfo
    {
        private ByValue<Store> store;
        private bool useForInternalTransfers;
        private string gln;

        protected StoreInfo() {}

        public StoreInfo(ByValue<Store> store, bool useForInternalTransfers)
        {
            this.store = store;
            this.useForInternalTransfers = useForInternalTransfers;
        }
        public ByValue<Store> Store
        {
            get { return store; }
            set { store = value; }
        }

        public bool UseForInternalTransfers
        {
            get { return useForInternalTransfers; }
            set { useForInternalTransfers = value; }
        }

        [CanBeNull]
        public string Gln
        {
            get { return gln; }
            set { gln = value; }
        }

    }

    [DataClass("StoreLevelValue")]
    public partial class StoreLevelValue
    {
        private decimal? value;
        private bool valueAssigned;

        public StoreLevelValue() {}

        public StoreLevelValue(decimal? value, bool valueAssigned)
        {
            this.value = value;
            this.valueAssigned = valueAssigned;
        }
        public decimal? Value
        {
            get { return value; }
            set { this.value = value; }
        }

        public bool ValueAssigned
        {
            get { return valueAssigned; }
            set { valueAssigned = value; }
        }

    }

    [DataClass("StoreReportManagerSetup")]
    public partial class StoreReportManagerSetup
    {
        private string name;
        private string layoutXML;
        private User userCreator;
        private bool isShared;

        protected StoreReportManagerSetup() {}

        public StoreReportManagerSetup(string name, string layoutXML, User userCreator, bool isShared)
        {
            this.name = name;
            this.layoutXML = layoutXML;
            this.userCreator = userCreator;
            this.isShared = isShared;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string LayoutXML
        {
            get { return layoutXML; }
            set { layoutXML = value; }
        }

        public User UserCreator
        {
            get { return userCreator; }
            set { userCreator = value; }
        }

        public bool IsShared
        {
            get { return isShared; }
            set { isShared = value; }
        }

    }

    [RootEntity]
    [DataClass("StoreReportManagerSetupList")]
    public partial class StoreReportManagerSetupList : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<StoreReportManagerSetupType, Dictionary<string, StoreReportManagerSetup>> list = new Dictionary<StoreReportManagerSetupType, Dictionary<string, StoreReportManagerSetup>>();

        protected StoreReportManagerSetupList() {}

        public StoreReportManagerSetupList(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<StoreReportManagerSetupType, Dictionary<string, StoreReportManagerSetup>> List
        {
            get { return list; }
        }

    }

    [DataClass("StoreReportManagerSetupType")]
    public enum StoreReportManagerSetupType
    {
        DISHESREPORT,
        COMMONREPORT,
        TRANSACTIONREPORT
    }

    [DataClass("StoreSpecification")]
    public partial class StoreSpecification
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DepartmentEntity> departments = new HashSet<DepartmentEntity>();
        private bool inverse;

        protected StoreSpecification() {}

        public StoreSpecification(bool inverse)
        {
            this.inverse = inverse;
        }
        [NotNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
        }

        public bool Inverse
        {
            get { return inverse; }
            set { inverse = value; }
        }

    }

    [DataClass("StoreSpecificationEntity")]
    public partial class StoreSpecificationEntity : CachedEntity
    {
        private StoreSpecification storeSpecification;
        private DateTime dateTo;

        protected StoreSpecificationEntity() {}

        public StoreSpecificationEntity(Guid id, StoreSpecification storeSpecification, DateTime dateTo)
            : base(id)
        {
            this.storeSpecification = storeSpecification;
            this.dateTo = dateTo;
        }

        public StoreSpecificationEntity(Guid id, DateTime dateTo)
            : base(id)
        {
            this.dateTo = dateTo;
        }

        public StoreSpecification StoreSpecification
        {
            get { return storeSpecification; }
            set { storeSpecification = value; }
        }

        public DateTime DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [RootEntity]
    [DataClass("StoreSummaryReportSettings")]
    public partial class StoreSummaryReportSettings : LocalizableNamePersistedEntity
    {
        [HasDefaultValue]
        private bool defaultReport = false;
        private User lastUpdateUser;
        private string systemName;
        [NotNull, NotNullField]
        private LocalizableValue comment;
        [NotNull, NotNullField]
        private StoreOperationsReportGrouping grouping;
        [NotNull, NotNullField]
        private StoreOperationsReportFilter filter;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<StoreOperationsColumnNames, string> columnCaptions = new Dictionary<StoreOperationsColumnNames, string>();

        protected StoreSummaryReportSettings() {}

        public StoreSummaryReportSettings(Guid id, LocalizableValue name, LocalizableValue comment, StoreOperationsReportGrouping grouping, StoreOperationsReportFilter filter)
            : base(id, name)
        {
            this.comment = comment;
            this.grouping = grouping;
            this.filter = filter;
        }
        public bool DefaultReport
        {
            get { return defaultReport; }
            set { defaultReport = value; }
        }

        [CanBeNull]
        public User LastUpdateUser
        {
            get { return lastUpdateUser; }
            set { lastUpdateUser = value; }
        }

        [CanBeNull]
        public string SystemName
        {
            get { return systemName; }
            set { systemName = value; }
        }

        [NotNull]
        public LocalizableValue Comment
        {
            get { return comment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  comment = value;
            }
        }

        [NotNull]
        public StoreOperationsReportGrouping Grouping
        {
            get { return grouping; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  grouping = value;
            }
        }

        [NotNull]
        public StoreOperationsReportFilter Filter
        {
            get { return filter; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  filter = value;
            }
        }

        [NotNull]
        public Dictionary<StoreOperationsColumnNames, string> ColumnCaptions
        {
            get { return columnCaptions; }
        }

    }

    [DataClass("StoreTransactionInfo")]
    public partial class StoreTransactionInfo
    {
        private Store store;
        private Product product;
        private decimal? amount;
        private decimal? sum;
        private decimal? totalAmountBefore;

        protected StoreTransactionInfo() {}

        public StoreTransactionInfo(Store store, Product product, decimal? amount, decimal? sum, decimal? totalAmountBefore)
        {
            this.store = store;
            this.product = product;
            this.amount = amount;
            this.sum = sum;
            this.totalAmountBefore = totalAmountBefore;
        }
        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? TotalAmountBefore
        {
            get { return totalAmountBefore; }
            set { totalAmountBefore = value; }
        }

    }

    [RootEntity]
    [DataClass("SupplierInfo")]
    public partial class SupplierInfo : PersistedEntity
    {
        [NotNull, NotNullField]
        private User supplier;
        [NotNull, NotNullField]
        private Product nativeProduct;
        private Guid containerId;
        [HasDefaultValue]
        private decimal? costPrice = 0;
        [HasDefaultValue]
        private decimal? allowablePriceDeviation = 10;

        protected SupplierInfo() {}

        public SupplierInfo(Guid id, User supplier, Product nativeProduct, Guid containerId)
            : base(id)
        {
            this.supplier = supplier;
            this.nativeProduct = nativeProduct;
            this.containerId = containerId;
        }
        [NotNull]
        public User Supplier
        {
            get { return supplier; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  supplier = value;
            }
        }

        [NotNull]
        public Product NativeProduct
        {
            get { return nativeProduct; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  nativeProduct = value;
            }
        }

        public Guid ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public decimal? CostPrice
        {
            get { return costPrice; }
            set { costPrice = value; }
        }

        public decimal? AllowablePriceDeviation
        {
            get { return allowablePriceDeviation; }
            set { allowablePriceDeviation = value; }
        }

    }

    [DataClass("SystemMeasureUnit")]
    public enum SystemMeasureUnit
    {
        KG,
        LT,
        PIECES,
        PORTION
    }

    [RootEntity]
    [DataClass("TaxCategory")]
    public partial class TaxCategory : LocalizableNamePersistedEntity
    {
        [HasDefaultValue]
        private decimal vatPercent = 0;
        [HasDefaultValue]
        private bool isCalculated = false;
        private DateTime? nextDateTimeFrom;
        private LocalizableValue nextName;
        private decimal? nextVatPercent;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected TaxCategory() {}

        public TaxCategory(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        public decimal VatPercent
        {
            get { return vatPercent; }
            set { vatPercent = value; }
        }

        public bool IsCalculated
        {
            get { return isCalculated; }
            set { isCalculated = value; }
        }

        public DateTime? NextDateTimeFrom
        {
            get { return nextDateTimeFrom; }
            set { nextDateTimeFrom = value; }
        }

        [CanBeNull]
        public LocalizableValue NextName
        {
            get { return nextName; }
            set { nextName = value; }
        }

        public decimal? NextVatPercent
        {
            get { return nextVatPercent; }
            set { nextVatPercent = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("TimePeakInterval")]
    public partial class TimePeakInterval
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<WeekDays> daysOfWeek = new List<WeekDays>();
        private DayTime begin;
        private DayTime end;

        public TimePeakInterval() {}

        public TimePeakInterval(DayTime begin, DayTime end)
        {
            this.begin = begin;
            this.end = end;
        }
        [NotNull]
        public List<WeekDays> DaysOfWeek
        {
            get { return daysOfWeek; }
        }

        public DayTime Begin
        {
            get { return begin; }
            set { begin = value; }
        }

        public DayTime End
        {
            get { return end; }
            set { end = value; }
        }

    }

    [DataClass("TopIngredientDto")]
    public partial class TopIngredientDto
    {
        private string productGroupName;
        private Guid? productId;
        private string productName;
        private string productNum;
        private string storeName;
        private decimal? currentLevel;
        private decimal? minimumLevel;

        protected TopIngredientDto() {}

        public TopIngredientDto(string productGroupName, Guid? productId, string productName, string productNum, string storeName, decimal? currentLevel, decimal? minimumLevel)
        {
            this.productGroupName = productGroupName;
            this.productId = productId;
            this.productName = productName;
            this.productNum = productNum;
            this.storeName = storeName;
            this.currentLevel = currentLevel;
            this.minimumLevel = minimumLevel;
        }
        public string ProductGroupName
        {
            get { return productGroupName; }
            set { productGroupName = value; }
        }

        public Guid? ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public string ProductName
        {
            get { return productName; }
            set { productName = value; }
        }

        public string ProductNum
        {
            get { return productNum; }
            set { productNum = value; }
        }

        public string StoreName
        {
            get { return storeName; }
            set { storeName = value; }
        }

        public decimal? CurrentLevel
        {
            get { return currentLevel; }
            set { currentLevel = value; }
        }

        public decimal? MinimumLevel
        {
            get { return minimumLevel; }
            set { minimumLevel = value; }
        }

    }

    [DataClass("TransformationDocument")]
    public partial class TransformationDocument : AbstractSingleProductProcessingDocument, PartiallyProcessableDocument, ProducerDocument, WithProducer
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<TransformationDocumentItem> items = new List<TransformationDocumentItem>();
        private Guid? sessionId;
        [HasDefaultValue]
        private bool isAutomatic = false;
        [HasDefaultValue]
        private bool editable = true;
        private User producer;
        [HasDefaultValue]
        private bool assemblyChartWriteoff = false;

        protected TransformationDocument() {}

        public TransformationDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store storeFrom, Store storeTo, Product product, Guid? containerId, decimal amount, MeasureUnit amountUnit)
            : base(id, dateIncoming, documentNumber, status, storeFrom, storeTo, product, containerId, amount, amountUnit)
        {

        }

        public TransformationDocument(Guid id, DateTime dateIncoming, string documentNumber, Product product, decimal amount)
            : base(id, dateIncoming, documentNumber, product, amount)
        {

        }

        [NotNull]
        public List<TransformationDocumentItem> Items
        {
            get { return items; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public bool IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        [CanBeNull]
        public User Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public bool AssemblyChartWriteoff
        {
            get { return assemblyChartWriteoff; }
            set { assemblyChartWriteoff = value; }
        }

    }

    [DataClass("TransformationDocumentItem")]
    public partial class TransformationDocumentItem : AbstractProductDocumentItem, AssemblyWriteoffItem
    {
        [NotNull, NotNullField]
        private TransformationDocument document;
        private ProductSize productSize;
        [HasDefaultValue]
        private decimal amountFactor = 0;
        private Guid? containerFromId;
        private MeasureUnit amountUnitFrom;
        private Product productTo;
        private Guid? containerToId;

        protected TransformationDocumentItem() {}

        public TransformationDocumentItem(Guid id, int num, Product product, decimal amount, TransformationDocument document, ProductSize productSize, decimal amountFactor, Guid? containerFromId, MeasureUnit amountUnitFrom, Product productTo, Guid? containerToId)
            : base(id, num, product, amount)
        {
            this.document = document;
            this.productSize = productSize;
            this.amountFactor = amountFactor;
            this.containerFromId = containerFromId;
            this.amountUnitFrom = amountUnitFrom;
            this.productTo = productTo;
            this.containerToId = containerToId;
        }

        public TransformationDocumentItem(Guid id, Product product, decimal amount, TransformationDocument document, decimal amountFactor)
            : base(id, product, amount)
        {
            this.document = document;
            this.amountFactor = amountFactor;
        }

        [NotNull]
        public TransformationDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal AmountFactor
        {
            get { return amountFactor; }
            set { amountFactor = value; }
        }

        public Guid? ContainerFromId
        {
            get { return containerFromId; }
            set { containerFromId = value; }
        }

        public MeasureUnit AmountUnitFrom
        {
            get { return amountUnitFrom; }
            set { amountUnitFrom = value; }
        }

        public Product ProductTo
        {
            get { return productTo; }
            set { productTo = value; }
        }

        public Guid? ContainerToId
        {
            get { return containerToId; }
            set { containerToId = value; }
        }

    }

    [DataClass("VerificationActAccountsFilter")]
    public partial class VerificationActAccountsFilter
    {
        private List<Account> accountList;
        private bool useAllLiabilitiesAccounts;

        public VerificationActAccountsFilter() {}

        public VerificationActAccountsFilter(bool useAllLiabilitiesAccounts)
        {
            this.useAllLiabilitiesAccounts = useAllLiabilitiesAccounts;
        }
        public List<Account> AccountList
        {
            get { return accountList; }
            set { accountList = value; }
        }

        public bool UseAllLiabilitiesAccounts
        {
            get { return useAllLiabilitiesAccounts; }
            set { useAllLiabilitiesAccounts = value; }
        }

    }

    [DataClass("WithProductSize")]
    public partial interface WithProductSize
    {

    }

    [DataClass("WithSplitVat")]
    public partial interface WithSplitVat
    {

    }

    [DataClass("WriteoffDocument")]
    public partial class WriteoffDocument : AbstractProductsWriteoffDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<WriteoffDocumentItem> items = new List<WriteoffDocumentItem>();
        private Guid? externalOutgoingInvoiceId;
        private Guid? externalProductionDocumentId;

        protected WriteoffDocument() {}

        public WriteoffDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, status, store, accountTo)
        {

        }

        public WriteoffDocument(Guid id, DateTime dateIncoming, string documentNumber, Store store, Account accountTo)
            : base(id, dateIncoming, documentNumber, store, accountTo)
        {

        }

        [NotNull]
        public List<WriteoffDocumentItem> Items
        {
            get { return items; }
        }

        public Guid? ExternalOutgoingInvoiceId
        {
            get { return externalOutgoingInvoiceId; }
            set { externalOutgoingInvoiceId = value; }
        }

        public Guid? ExternalProductionDocumentId
        {
            get { return externalProductionDocumentId; }
            set { externalProductionDocumentId = value; }
        }

    }

    [DataClass("WriteoffDocumentItem")]
    public partial class WriteoffDocumentItem : AbstractProductsWriteoffDocumentItem
    {
        [NotNull, NotNullField]
        private WriteoffDocument writeoffDocument;

        protected WriteoffDocumentItem() {}

        public WriteoffDocumentItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, ProductSize productSize, decimal amountFactor, WriteoffDocument writeoffDocument)
            : base(id, num, product, amount, amountUnit, productSize, amountFactor)
        {
            this.writeoffDocument = writeoffDocument;
        }

        public WriteoffDocumentItem(Guid id, Product product, decimal amount, decimal amountFactor, WriteoffDocument writeoffDocument)
            : base(id, product, amount, amountFactor)
        {
            this.writeoffDocument = writeoffDocument;
        }

        [NotNull]
        public WriteoffDocument WriteoffDocument
        {
            get { return writeoffDocument; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  writeoffDocument = value;
            }
        }

    }

    [RootEntity]
    [DataClass("AlcoholClass")]
    public partial class AlcoholClass : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        private string description;
        private AlcoholClassGroup alcoholClassGroup;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected AlcoholClass() {}

        public AlcoholClass(Guid id, LocalizableValue name, string code, AlcoholClassGroup alcoholClassGroup)
            : base(id, name)
        {
            this.code = code;
            this.alcoholClassGroup = alcoholClassGroup;
        }

        public AlcoholClass(Guid id, LocalizableValue name, string code)
            : base(id, name)
        {
            this.code = code;
        }

        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        [CanBeNull]
        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public AlcoholClassGroup AlcoholClassGroup
        {
            get { return alcoholClassGroup; }
            set { alcoholClassGroup = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [RootEntity]
    [DataClass("AlcoholClassGroup")]
    public partial class AlcoholClassGroup : LocalizableNamePersistedEntity
    {
        private AlcoholType type;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected AlcoholClassGroup() {}

        public AlcoholClassGroup(Guid id, LocalizableValue name, AlcoholType type)
            : base(id, name)
        {
            this.type = type;
        }

        public AlcoholClassGroup(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public AlcoholType Type
        {
            get { return type; }
            set { type = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("AlcoholType")]
    [EnumClass]
    public partial class AlcoholType : LocalizableName<AlcoholType>
    {
        /// <summary> Алкогольные напитки. </summary>
        public static readonly AlcoholType STRONG = new AlcoholType("STRONG");
        /// <summary> Пиво. </summary>
        public static readonly AlcoholType BEER = new AlcoholType("BEER");

        private readonly string __value;
        private readonly string __nameResId;

        private AlcoholType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ALCOHOLTYPE_NAME_" + __value;
        }

        public static AlcoholType Parse(string value)
        {
            switch(value)
            {
                case "STRONG": return STRONG;
                case "BEER": return BEER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AlcoholType[] VALUES
        {
            get
            {
                return new []
                {
                    STRONG, 
                    BEER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CustomerImporterResult")]
    public partial class CustomerImporterResult
    {
        private int totalCustomersCount;
        private int exchangedCustomersCount;
        private Dictionary<string, ICollection<string>> notExchangedCustomers;
        private ICollection<string> invalidPhonesInIikoCard;
        private ICollection<string> invalidBirthdaysInIikoCard;
        private int filteredOutByIikoCardCustomersQuantity;
        private string errorMessage;

        protected CustomerImporterResult() {}

        public CustomerImporterResult(int totalCustomersCount, int exchangedCustomersCount, int filteredOutByIikoCardCustomersQuantity, string errorMessage)
        {
            this.totalCustomersCount = totalCustomersCount;
            this.exchangedCustomersCount = exchangedCustomersCount;
            this.filteredOutByIikoCardCustomersQuantity = filteredOutByIikoCardCustomersQuantity;
            this.errorMessage = errorMessage;
        }
        public int TotalCustomersCount
        {
            get { return totalCustomersCount; }
            set { totalCustomersCount = value; }
        }

        public int ExchangedCustomersCount
        {
            get { return exchangedCustomersCount; }
            set { exchangedCustomersCount = value; }
        }

        public Dictionary<string, ICollection<string>> NotExchangedCustomers
        {
            get { return notExchangedCustomers; }
            set { notExchangedCustomers = value; }
        }

        public ICollection<string> InvalidPhonesInIikoCard
        {
            get { return invalidPhonesInIikoCard; }
            set { invalidPhonesInIikoCard = value; }
        }

        public ICollection<string> InvalidBirthdaysInIikoCard
        {
            get { return invalidBirthdaysInIikoCard; }
            set { invalidBirthdaysInIikoCard = value; }
        }

        public int FilteredOutByIikoCardCustomersQuantity
        {
            get { return filteredOutByIikoCardCustomersQuantity; }
            set { filteredOutByIikoCardCustomersQuantity = value; }
        }

        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

    }

    [RootEntity]
    [DataClass("ExternalHierarchy")]
    public partial class ExternalHierarchy : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ExternalHierarchyTreeEntity> hierarchy = new List<ExternalHierarchyTreeEntity>();

        protected ExternalHierarchy() {}

        public ExternalHierarchy(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public List<ExternalHierarchyTreeEntity> Hierarchy
        {
            get { return hierarchy; }
        }

    }

    [DataClass("ExternalHierarchyGroup")]
    public partial class ExternalHierarchyGroup : ExternalHierarchyTreeEntity
    {

        protected ExternalHierarchyGroup() {}

        public ExternalHierarchyGroup(Guid id, int order, Guid? parentId, string additionalInfo)
            : base(id, order, parentId, additionalInfo)
        {

        }

        public ExternalHierarchyGroup(Guid id, int order)
            : base(id, order)
        {

        }

    }

    [DataClass("ExternalHierarchyProduct")]
    public partial class ExternalHierarchyProduct : ExternalHierarchyTreeEntity
    {
        [NotNull, NotNullField]
        private Product product;
        [HasDefaultValue]
        private bool needUpdateByNomenclature = false;

        protected ExternalHierarchyProduct() {}

        public ExternalHierarchyProduct(Guid id, int order, Guid? parentId, string additionalInfo, Product product)
            : base(id, order, parentId, additionalInfo)
        {
            this.product = product;
        }

        public ExternalHierarchyProduct(Guid id, int order, Product product)
            : base(id, order)
        {
            this.product = product;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public bool NeedUpdateByNomenclature
        {
            get { return needUpdateByNomenclature; }
            set { needUpdateByNomenclature = value; }
        }

    }

    [DataClass("ExternalHierarchyTreeEntity")]
    public abstract partial class ExternalHierarchyTreeEntity
    {
        private Guid id;
        private int order;
        private Guid? parentId;
        private string additionalInfo;
        private string seoDescription;
        private string seoText;
        private string seoKeywords;
        private string seoTitle;
        private string name;
        private string description;
        private string tags;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ExternalHierarchyTreeEntityImage> images = new List<ExternalHierarchyTreeEntityImage>();

        protected ExternalHierarchyTreeEntity() {}

        protected ExternalHierarchyTreeEntity(Guid id, int order, Guid? parentId, string additionalInfo)
        {
            this.id = id;
            this.order = order;
            this.parentId = parentId;
            this.additionalInfo = additionalInfo;
        }

        protected ExternalHierarchyTreeEntity(Guid id, int order)
        {
            this.id = id;
            this.order = order;
        }

        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        public int Order
        {
            get { return order; }
            set { order = value; }
        }

        public Guid? ParentId
        {
            get { return parentId; }
            set { parentId = value; }
        }

        public string AdditionalInfo
        {
            get { return additionalInfo; }
            set { additionalInfo = value; }
        }

        [CanBeNull]
        public string SeoDescription
        {
            get { return seoDescription; }
            set { seoDescription = value; }
        }

        [CanBeNull]
        public string SeoText
        {
            get { return seoText; }
            set { seoText = value; }
        }

        [CanBeNull]
        public string SeoKeywords
        {
            get { return seoKeywords; }
            set { seoKeywords = value; }
        }

        [CanBeNull]
        public string SeoTitle
        {
            get { return seoTitle; }
            set { seoTitle = value; }
        }

        [CanBeNull]
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [CanBeNull]
        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        [CanBeNull]
        public string Tags
        {
            get { return tags; }
            set { tags = value; }
        }

        [NotNull]
        public List<ExternalHierarchyTreeEntityImage> Images
        {
            get { return images; }
        }

    }

    [DataClass("ExternalHierarchyTreeEntityImage")]
    public partial class ExternalHierarchyTreeEntityImage
    {
        [NotNull, NotNullField]
        private SavedImageInfo image;

        protected ExternalHierarchyTreeEntityImage() {}

        public ExternalHierarchyTreeEntityImage(SavedImageInfo image)
        {
            this.image = image;
        }
        [NotNull]
        public SavedImageInfo Image
        {
            get { return image; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  image = value;
            }
        }

    }

    [DataClass("StoresProductsBalance")]
    public partial class StoresProductsBalance
    {
        private DateTime? timestamp;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Store, StoreBalance> balances = new Dictionary<Store, StoreBalance>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public StoresProductsBalance() {}

        public StoresProductsBalance(DateTime? timestamp)
        {
            this.timestamp = timestamp;
        }
        public DateTime? Timestamp
        {
            get { return timestamp; }
            set { timestamp = value; }
        }

        [NotNull]
        public Dictionary<Store, StoreBalance> Balances
        {
            get { return balances; }
        }

    }

    [DataClass("AbstractIncomingPriceList")]
    public abstract partial class AbstractIncomingPriceList<TKey, TItem> : AbstractKeyedTimeTableItem
        where TItem : AbstractIncomingPriceListItem
    {
        [ForceTypeAttributeInXml]
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<TItem> items = new List<TItem>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AbstractIncomingPriceList() {}

        protected AbstractIncomingPriceList(Guid id, DateTime? dateFrom, DateTime? dateTo)
            : base(id, dateFrom, dateTo)
        {

        }

        protected AbstractIncomingPriceList(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("AbstractIncomingPriceListItem")]
    public abstract partial class AbstractIncomingPriceListItem : Entity
    {
        [HasDefaultValue]
        private bool deleted = false;
        [NotNull, NotNullField]
        private Product nativeProduct;
        private Guid containerId;
        [HasDefaultValue]
        private decimal costPrice = 0;
        [HasDefaultValue]
        private decimal? allowablePriceDeviation = 10;

        protected AbstractIncomingPriceListItem() {}

        protected AbstractIncomingPriceListItem(Guid id, Product nativeProduct, Guid containerId)
            : base(id)
        {
            this.nativeProduct = nativeProduct;
            this.containerId = containerId;
        }
        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [NotNull]
        public Product NativeProduct
        {
            get { return nativeProduct; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  nativeProduct = value;
            }
        }

        public Guid ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public decimal CostPrice
        {
            get { return costPrice; }
            set { costPrice = value; }
        }

        public decimal? AllowablePriceDeviation
        {
            get { return allowablePriceDeviation; }
            set { allowablePriceDeviation = value; }
        }

    }

    [DataClass("IndependentPriceList")]
    public partial class IndependentPriceList : AbstractIncomingPriceList<IndependentPriceListKey, IndependentPriceListItem>
    {
        [NotNull, NotNullField]
        private IndependentPriceListKey key;

        protected IndependentPriceList() {}

        public IndependentPriceList(Guid id, DateTime? dateFrom, DateTime? dateTo, IndependentPriceListKey key)
            : base(id, dateFrom, dateTo)
        {
            this.key = key;
        }

        public IndependentPriceList(Guid id, IndependentPriceListKey key)
            : base(id)
        {
            this.key = key;
        }

        [NotNull]
        public IndependentPriceListKey Key
        {
            get { return key; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  key = value;
            }
        }

    }

    [DataClass("IndependentPriceListItem")]
    public partial class IndependentPriceListItem : AbstractIncomingPriceListItem
    {

        protected IndependentPriceListItem() {}

        public IndependentPriceListItem(Guid id, Product nativeProduct, Guid containerId)
            : base(id, nativeProduct, containerId)
        {

        }
    }

    [DataClass("IndependentPriceListKey")]
    public partial class IndependentPriceListKey
    {
        private Guid? empty;

        protected IndependentPriceListKey() {}

        public IndependentPriceListKey(Guid? empty)
        {
            this.empty = empty;
        }
        public Guid? Empty
        {
            get { return empty; }
            set { empty = value; }
        }

    }

    [DataClass("PriceListSaveResult")]
    public partial class PriceListSaveResult
    {
        private List<string> messages;


        public List<string> Messages
        {
            get { return messages; }
            set { messages = value; }
        }

    }

    [DataClass("SupplierPriceList")]
    public partial class SupplierPriceList : AbstractIncomingPriceList<User, SupplierPriceListItem>
    {
        [NotNull, NotNullField]
        private User supplier;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public SupplierPriceList() {}

        public SupplierPriceList(Guid id, DateTime? dateFrom, DateTime? dateTo, User supplier)
            : base(id, dateFrom, dateTo)
        {
            this.supplier = supplier;
        }

        public SupplierPriceList(Guid id, User supplier)
            : base(id)
        {
            this.supplier = supplier;
        }

        [NotNull]
        public User Supplier
        {
            get { return supplier; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  supplier = value;
            }
        }

    }

    [DataClass("SupplierPriceListItem")]
    public partial class SupplierPriceListItem : AbstractIncomingPriceListItem
    {
        [NotNull, NotNullField]
        private Product supplierProduct;

        protected SupplierPriceListItem() {}

        public SupplierPriceListItem(Guid id, Product nativeProduct, Guid containerId, Product supplierProduct)
            : base(id, nativeProduct, containerId)
        {
            this.supplierProduct = supplierProduct;
        }
        [NotNull]
        public Product SupplierProduct
        {
            get { return supplierProduct; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  supplierProduct = value;
            }
        }

    }

    [DataClass("ProducerDocument")]
    public partial interface ProducerDocument
    {

    }

    [DataClass("WithProducer")]
    public partial interface WithProducer
    {

    }

    [DataClass("AbstractPriceTableItem")]
    public abstract partial class AbstractPriceTableItem : AbstractKeyedTimeTableItem
    {
        [NotNull, NotNullField]
        private StoreProductPair storeProduct;
        private ProductValue value;

        protected AbstractPriceTableItem() {}

        protected AbstractPriceTableItem(Guid id, DateTime? dateFrom, DateTime? dateTo, StoreProductPair storeProduct, ProductValue value)
            : base(id, dateFrom, dateTo)
        {
            this.storeProduct = storeProduct;
            this.value = value;
        }

        protected AbstractPriceTableItem(Guid id, StoreProductPair storeProduct)
            : base(id)
        {
            this.storeProduct = storeProduct;
        }

        [NotNull]
        public StoreProductPair StoreProduct
        {
            get { return storeProduct; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  storeProduct = value;
            }
        }

        public ProductValue Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("AccountingMethod")]
    [EnumClass]
    public partial class AccountingMethod : LocalizableName<AccountingMethod>
    {
        /// <summary> Средневзвешенное скользящее. </summary>
        public static readonly AccountingMethod SLIDING_AVERAGE = new AccountingMethod("SLIDING_AVERAGE");
        /// <summary> FIFO. </summary>
        public static readonly AccountingMethod FIFO = new AccountingMethod("FIFO");

        private readonly string __value;
        private readonly string __nameResId;

        private AccountingMethod(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACCOUNTINGMETHOD_NAME_" + __value;
        }

        public static AccountingMethod Parse(string value)
        {
            switch(value)
            {
                case "SLIDING_AVERAGE": return SLIDING_AVERAGE;
                case "FIFO": return FIFO;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AccountingMethod[] VALUES
        {
            get
            {
                return new []
                {
                    SLIDING_AVERAGE, 
                    FIFO
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PreparedAssemblyChart")]
    public partial class PreparedAssemblyChart : AbstractKeyedTimeTableItem
    {
        [NotNull, NotNullField]
        private Product product;
        private ProductWriteoffStrategy writeoffStrategy;
        private StoreSpecification directWriteoffStoreSpecification;
        private ProductSizeAssemblyStrategy productSizeAssemblyStrategy;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PreparedAssemblyChartItem> items = new List<PreparedAssemblyChartItem>();

        protected PreparedAssemblyChart() {}

        public PreparedAssemblyChart(Guid id, DateTime? dateFrom, DateTime? dateTo, Product product, StoreSpecification directWriteoffStoreSpecification, ProductSizeAssemblyStrategy productSizeAssemblyStrategy)
            : base(id, dateFrom, dateTo)
        {
            this.product = product;
            this.directWriteoffStoreSpecification = directWriteoffStoreSpecification;
            this.productSizeAssemblyStrategy = productSizeAssemblyStrategy;
        }

        public PreparedAssemblyChart(Guid id, Product product, ProductSizeAssemblyStrategy productSizeAssemblyStrategy)
            : base(id)
        {
            this.product = product;
            this.productSizeAssemblyStrategy = productSizeAssemblyStrategy;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductWriteoffStrategy WriteoffStrategy
        {
            get { return writeoffStrategy; }
            set { writeoffStrategy = value; }
        }

        public StoreSpecification DirectWriteoffStoreSpecification
        {
            get { return directWriteoffStoreSpecification; }
            set { directWriteoffStoreSpecification = value; }
        }

        public ProductSizeAssemblyStrategy ProductSizeAssemblyStrategy
        {
            get { return productSizeAssemblyStrategy; }
            set { productSizeAssemblyStrategy = value; }
        }

        [NotNull]
        public List<PreparedAssemblyChartItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("PreparedAssemblyChartItem")]
    public partial class PreparedAssemblyChartItem : OrderedHibernateEntity
    {
        private PreparedAssemblyChart assemblyChart;
        [NotNull, NotNullField]
        private Product product;
        private StoreSpecificationEntity storeSpecificationEntity;
        private ProductSize productSizeSpecification;
        [HasDefaultValue]
        private decimal amount = 0;

        protected PreparedAssemblyChartItem() {}

        public PreparedAssemblyChartItem(Guid id, double sortWeight, PreparedAssemblyChart assemblyChart, Product product, ProductSize productSizeSpecification, decimal amount)
            : base(id, sortWeight)
        {
            this.assemblyChart = assemblyChart;
            this.product = product;
            this.productSizeSpecification = productSizeSpecification;
            this.amount = amount;
        }

        public PreparedAssemblyChartItem(Guid id, Product product, decimal amount)
            : base(id)
        {
            this.product = product;
            this.amount = amount;
        }

        public PreparedAssemblyChart AssemblyChart
        {
            get { return assemblyChart; }
            set { assemblyChart = value; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        [CanBeNull]
        public StoreSpecificationEntity StoreSpecificationEntity
        {
            get { return storeSpecificationEntity; }
            set { storeSpecificationEntity = value; }
        }

        public ProductSize ProductSizeSpecification
        {
            get { return productSizeSpecification; }
            set { productSizeSpecification = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("PriceTableAllIncomeItem")]
    public partial class PriceTableAllIncomeItem : AbstractPriceTableItem
    {

        protected PriceTableAllIncomeItem() {}

        public PriceTableAllIncomeItem(Guid id, DateTime? dateFrom, DateTime? dateTo, StoreProductPair storeProduct, ProductValue value)
            : base(id, dateFrom, dateTo, storeProduct, value)
        {

        }

        public PriceTableAllIncomeItem(Guid id, StoreProductPair storeProduct)
            : base(id, storeProduct)
        {

        }

    }

    [DataClass("PriceTableInvoiceIncomeItem")]
    public partial class PriceTableInvoiceIncomeItem : AbstractPriceTableItem
    {

        protected PriceTableInvoiceIncomeItem() {}

        public PriceTableInvoiceIncomeItem(Guid id, DateTime? dateFrom, DateTime? dateTo, StoreProductPair storeProduct, ProductValue value)
            : base(id, dateFrom, dateTo, storeProduct, value)
        {

        }

        public PriceTableInvoiceIncomeItem(Guid id, StoreProductPair storeProduct)
            : base(id, storeProduct)
        {

        }

    }

    [DataClass("PriceTableItem")]
    public partial class PriceTableItem : AbstractPriceTableItem
    {

        protected PriceTableItem() {}

        public PriceTableItem(Guid id, DateTime? dateFrom, DateTime? dateTo, StoreProductPair storeProduct, ProductValue value)
            : base(id, dateFrom, dateTo, storeProduct, value)
        {

        }

        public PriceTableItem(Guid id, StoreProductPair storeProduct)
            : base(id, storeProduct)
        {

        }

    }

    [DataClass("ProductSizeAssemblyStrategy")]
    public enum ProductSizeAssemblyStrategy
    {
        COMMON,
        SPECIFIC
    }

    [DataClass("ProductValue")]
    public partial class ProductValue
    {
        private decimal? amount;
        private decimal? sum;

        protected ProductValue() {}

        public ProductValue(decimal? amount, decimal? sum)
        {
            this.amount = amount;
            this.sum = sum;
        }
        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("VatAccounting")]
    [EnumClass]
    public partial class VatAccounting : LocalizableName<VatAccounting>
    {
        /// <summary> НДС включен. </summary>
        public static readonly VatAccounting VAT_INCLUDED_IN_PRICE = new VatAccounting("VAT_INCLUDED_IN_PRICE");
        /// <summary> НДС не включен. </summary>
        public static readonly VatAccounting VAT_NOT_INCLUDED_IN_PRICE = new VatAccounting("VAT_NOT_INCLUDED_IN_PRICE");

        private readonly string __value;
        private readonly string __nameResId;

        private VatAccounting(string __value)
        {
            this.__value = __value;
            this.__nameResId = "VATACCOUNTING_NAME_" + __value;
        }

        public static VatAccounting Parse(string value)
        {
            switch(value)
            {
                case "VAT_INCLUDED_IN_PRICE": return VAT_INCLUDED_IN_PRICE;
                case "VAT_NOT_INCLUDED_IN_PRICE": return VAT_NOT_INCLUDED_IN_PRICE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static VatAccounting[] VALUES
        {
            get
            {
                return new []
                {
                    VAT_INCLUDED_IN_PRICE, 
                    VAT_NOT_INCLUDED_IN_PRICE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("CostCorrectionSettings")]
    public partial class CostCorrectionSettings : PersistedEntity
    {
        [HasDefaultValue]
        private bool distributeCostCorrections = true;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string costCorrectionCron = "";

        protected CostCorrectionSettings() {}

        public CostCorrectionSettings(Guid id)
            : base(id)
        {

        }
        public bool DistributeCostCorrections
        {
            get { return distributeCostCorrections; }
            set { distributeCostCorrections = value; }
        }

        [NotNull]
        public string CostCorrectionCron
        {
            get { return costCorrectionCron; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  costCorrectionCron = value;
            }
        }

    }

    [DataClass("CostCorrectionType")]
    public enum CostCorrectionType
    {
        OFF,
        AUTO,
        SCHEDULE
    }

    [DataClass("AverageAlgorithmParameters")]
    public partial class AverageAlgorithmParameters
    {
        private DateTime? calculationPeriodFrom;
        private DateTime? calculationPeriodTo;
        private int deliveryDays;
        private int estimatedDays;
        private bool includeBanquetOrders;

        public AverageAlgorithmParameters() {}

        public AverageAlgorithmParameters(DateTime? calculationPeriodFrom, DateTime? calculationPeriodTo, int deliveryDays, int estimatedDays, bool includeBanquetOrders)
        {
            this.calculationPeriodFrom = calculationPeriodFrom;
            this.calculationPeriodTo = calculationPeriodTo;
            this.deliveryDays = deliveryDays;
            this.estimatedDays = estimatedDays;
            this.includeBanquetOrders = includeBanquetOrders;
        }
        public DateTime? CalculationPeriodFrom
        {
            get { return calculationPeriodFrom; }
            set { calculationPeriodFrom = value; }
        }

        public DateTime? CalculationPeriodTo
        {
            get { return calculationPeriodTo; }
            set { calculationPeriodTo = value; }
        }

        public int DeliveryDays
        {
            get { return deliveryDays; }
            set { deliveryDays = value; }
        }

        public int EstimatedDays
        {
            get { return estimatedDays; }
            set { estimatedDays = value; }
        }

        public bool IncludeBanquetOrders
        {
            get { return includeBanquetOrders; }
            set { includeBanquetOrders = value; }
        }

    }

    [DataClass("StoreReplenishmentAlgorithmType")]
    [EnumClass]
    public partial class StoreReplenishmentAlgorithmType : LocalizableName<StoreReplenishmentAlgorithmType>
    {
        /// <summary> До максимального уровня. </summary>
        public static readonly StoreReplenishmentAlgorithmType MAX = new StoreReplenishmentAlgorithmType("MAX");
        /// <summary> По последнему поступлению. </summary>
        public static readonly StoreReplenishmentAlgorithmType PREV = new StoreReplenishmentAlgorithmType("PREV");
        /// <summary> По средним продажам. </summary>
        public static readonly StoreReplenishmentAlgorithmType AVERAGE = new StoreReplenishmentAlgorithmType("AVERAGE");

        private readonly string __value;
        private readonly string __nameResId;

        private StoreReplenishmentAlgorithmType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "STOREREPLENISHMENTALGORITHMTYPE_NAME_" + __value;
        }

        public static StoreReplenishmentAlgorithmType Parse(string value)
        {
            switch(value)
            {
                case "MAX": return MAX;
                case "PREV": return PREV;
                case "AVERAGE": return AVERAGE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static StoreReplenishmentAlgorithmType[] VALUES
        {
            get
            {
                return new []
                {
                    MAX, 
                    PREV, 
                    AVERAGE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("BaseService")]
    public abstract partial class BaseService : AbstractIncomingDocument
    {
        private DepartmentEntity department;
        private Account revenueAccount;
        private string docNumber;
        private DateTime? contractDate;

        protected BaseService() {}

        protected BaseService(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {

        }

        protected BaseService(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [CanBeNull]
        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        [CanBeNull]
        public string DocNumber
        {
            get { return docNumber; }
            set { docNumber = value; }
        }

        public DateTime? ContractDate
        {
            get { return contractDate; }
            set { contractDate = value; }
        }

    }

    [DataClass("DistributionAlgorithmType")]
    [EnumClass]
    public partial class DistributionAlgorithmType : LocalizableName<DistributionAlgorithmType>
    {
        /// <summary> Распределение по сумме. </summary>
        public static readonly DistributionAlgorithmType DISTRIBUTION_BY_SUM = new DistributionAlgorithmType("DISTRIBUTION_BY_SUM");
        /// <summary> Распределение по количеству. </summary>
        public static readonly DistributionAlgorithmType DISTRIBUTION_BY_AMOUNT = new DistributionAlgorithmType("DISTRIBUTION_BY_AMOUNT");
        /// <summary> Не выбран. </summary>
        public static readonly DistributionAlgorithmType DISTRIBUTION_NOT_SPECIFIED = new DistributionAlgorithmType("DISTRIBUTION_NOT_SPECIFIED");

        private readonly string __value;
        private readonly string __nameResId;

        private DistributionAlgorithmType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DISTRIBUTIONALGORITHMTYPE_NAME_" + __value;
        }

        public static DistributionAlgorithmType Parse(string value)
        {
            switch(value)
            {
                case "DISTRIBUTION_BY_SUM": return DISTRIBUTION_BY_SUM;
                case "DISTRIBUTION_BY_AMOUNT": return DISTRIBUTION_BY_AMOUNT;
                case "DISTRIBUTION_NOT_SPECIFIED": return DISTRIBUTION_NOT_SPECIFIED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DistributionAlgorithmType[] VALUES
        {
            get
            {
                return new []
                {
                    DISTRIBUTION_BY_SUM, 
                    DISTRIBUTION_BY_AMOUNT, 
                    DISTRIBUTION_NOT_SPECIFIED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("IncomingService")]
    public partial class IncomingService : BaseService, PartiallyProcessableDocument
    {
        [NotNull, NotNullField]
        private Account revenueCreditAccount;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        [HasDefaultValue]
        private bool? editable = true;
        private Guid? sessionId;

        protected IncomingService() {}

        public IncomingService(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, Account revenueCreditAccount)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {
            this.revenueCreditAccount = revenueCreditAccount;
        }

        public IncomingService(Guid id, DateTime dateIncoming, string documentNumber, Account revenueCreditAccount)
            : base(id, dateIncoming, documentNumber)
        {
            this.revenueCreditAccount = revenueCreditAccount;
        }

        [NotNull]
        public Account RevenueCreditAccount
        {
            get { return revenueCreditAccount; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  revenueCreditAccount = value;
            }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

    }

    [DataClass("IncomingServiceItem")]
    public partial class IncomingServiceItem : ServiceItem
    {

        protected IncomingServiceItem() {}

        public IncomingServiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, Account account)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum, account)
        {

        }

        public IncomingServiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds)
            : base(id, product, amount, invoice, priceWithoutNds)
        {

        }

    }

    [DataClass("OutgoingService")]
    public partial class OutgoingService : BaseService, PartiallyProcessableDocument
    {
        private Account revenueDebitAccount;
        private Guid? sessionId;
        [HasDefaultValue]
        private bool? isAutomatic = false;
        [HasDefaultValue]
        private bool? editable = true;
        private string registerNumber;
        private Guid? orderId;

        protected OutgoingService() {}

        public OutgoingService(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {

        }

        public OutgoingService(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        [CanBeNull]
        public Account RevenueDebitAccount
        {
            get { return revenueDebitAccount; }
            set { revenueDebitAccount = value; }
        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public bool? IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool? Editable
        {
            get { return editable; }
            set { editable = value; }
        }

        [CanBeNull]
        public string RegisterNumber
        {
            get { return registerNumber; }
            set { registerNumber = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

    }

    [DataClass("OutgoingServiceItem")]
    public partial class OutgoingServiceItem : ServiceItem
    {

        protected OutgoingServiceItem() {}

        public OutgoingServiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, Account account)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum, account)
        {

        }

        public OutgoingServiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds)
            : base(id, product, amount, invoice, priceWithoutNds)
        {

        }

    }

    [DataClass("ServiceItem")]
    public abstract partial class ServiceItem : AbstractInvoiceItem, WithSplitVat
    {
        private Account account;
        [HasDefaultValue]
        private bool splitVat = false;

        protected ServiceItem() {}

        protected ServiceItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, AbstractInvoiceDocument invoice, Store store, string code, decimal? price, decimal priceWithoutNds, MeasureUnit priceUnit, decimal? sum, Account account)
            : base(id, num, product, amount, amountUnit, invoice, store, code, price, priceWithoutNds, priceUnit, sum)
        {
            this.account = account;
        }

        protected ServiceItem(Guid id, Product product, decimal amount, AbstractInvoiceDocument invoice, decimal priceWithoutNds)
            : base(id, product, amount, invoice, priceWithoutNds)
        {

        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public bool SplitVat
        {
            get { return splitVat; }
            set { splitVat = value; }
        }

    }

    [RootEntity]
    [DataClass("TemplateReportItem")]
    public partial class TemplateReportItem : LocalizableNamePersistedEntity
    {
        private string data;
        private int version;
        private User userModify;
        private ICollection<TemplateReportModelType> modelTypes;

        protected TemplateReportItem() {}

        public TemplateReportItem(Guid id, LocalizableValue name, string data, int version)
            : base(id, name)
        {
            this.data = data;
            this.version = version;
        }

        public TemplateReportItem(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string Data
        {
            get { return data; }
            set { data = value; }
        }

        public int Version
        {
            get { return version; }
            set { version = value; }
        }

        [CanBeNull]
        public User UserModify
        {
            get { return userModify; }
            set { userModify = value; }
        }

        public ICollection<TemplateReportModelType> ModelTypes
        {
            get { return modelTypes; }
            set { modelTypes = value; }
        }

    }

    [DataClass("TemplateReportModelType")]
    public partial class TemplateReportModelType
    {
        private Guid? id;
        private string name;
        private int version;

        protected TemplateReportModelType() {}

        public TemplateReportModelType(Guid? id, string name, int version)
        {
            this.id = id;
            this.name = name;
            this.version = version;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public int Version
        {
            get { return version; }
            set { version = value; }
        }

    }

    [DataClass("AbstractKeyedTimeTableItem")]
    public abstract partial class AbstractKeyedTimeTableItem : CachedEntity
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private OperationInfo createdInfo;
        private OperationInfo modifiedInfo;

        protected AbstractKeyedTimeTableItem() {}

        protected AbstractKeyedTimeTableItem(Guid id, DateTime? dateFrom, DateTime? dateTo)
            : base(id)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }

        protected AbstractKeyedTimeTableItem(Guid id)
            : base(id)
        {

        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        [CanBeNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("DetailedVatInvoiceReportItem")]
    public partial class DetailedVatInvoiceReportItem
    {
        private DetailedVatInvoice invoice;
        private Customer customer;
        private bool storned;

        protected DetailedVatInvoiceReportItem() {}

        public DetailedVatInvoiceReportItem(DetailedVatInvoice invoice, Customer customer, bool storned)
        {
            this.invoice = invoice;
            this.customer = customer;
            this.storned = storned;
        }
        public DetailedVatInvoice Invoice
        {
            get { return invoice; }
            set { invoice = value; }
        }

        public Customer Customer
        {
            get { return customer; }
            set { customer = value; }
        }

        public bool Storned
        {
            get { return storned; }
            set { storned = value; }
        }

    }

    [DataClass("OrderVatInvoiceCustomerDto")]
    public partial class OrderVatInvoiceCustomerDto
    {
        private string documentNumber;
        private Guid? customerId;

        protected OrderVatInvoiceCustomerDto() {}

        public OrderVatInvoiceCustomerDto(string documentNumber, Guid? customerId)
        {
            this.documentNumber = documentNumber;
            this.customerId = customerId;
        }
        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        public Guid? CustomerId
        {
            get { return customerId; }
            set { customerId = value; }
        }

    }

    [DataClass("OrderVatInvoiceData")]
    public partial class OrderVatInvoiceData
    {
        private Guid? orderPaymentEventId;
        private Guid? orderId;
        private DateTime? date;
        private int? sessionNumber;
        private int orderNum;
        private HashSet<Guid> orderCustomerIds;
        private Guid? vatInvoiceId;
        private string vatInvoiceNumber;
        private Guid? vatInvoiceCustomerId;
        [HasDefaultValue]
        private decimal? sum = 0;
        [HasDefaultValue]
        private decimal? sumWithVat = 0;

        protected OrderVatInvoiceData() {}

        public OrderVatInvoiceData(Guid? orderPaymentEventId, Guid? orderId, DateTime? date, int? sessionNumber, int orderNum, Guid? vatInvoiceId, string vatInvoiceNumber, Guid? vatInvoiceCustomerId)
        {
            this.orderPaymentEventId = orderPaymentEventId;
            this.orderId = orderId;
            this.date = date;
            this.sessionNumber = sessionNumber;
            this.orderNum = orderNum;
            this.vatInvoiceId = vatInvoiceId;
            this.vatInvoiceNumber = vatInvoiceNumber;
            this.vatInvoiceCustomerId = vatInvoiceCustomerId;
        }
        public Guid? OrderPaymentEventId
        {
            get { return orderPaymentEventId; }
            set { orderPaymentEventId = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public int? SessionNumber
        {
            get { return sessionNumber; }
            set { sessionNumber = value; }
        }

        public int OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

        public HashSet<Guid> OrderCustomerIds
        {
            get { return orderCustomerIds; }
            set { orderCustomerIds = value; }
        }

        public Guid? VatInvoiceId
        {
            get { return vatInvoiceId; }
            set { vatInvoiceId = value; }
        }

        public string VatInvoiceNumber
        {
            get { return vatInvoiceNumber; }
            set { vatInvoiceNumber = value; }
        }

        public Guid? VatInvoiceCustomerId
        {
            get { return vatInvoiceCustomerId; }
            set { vatInvoiceCustomerId = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumWithVat
        {
            get { return sumWithVat; }
            set { sumWithVat = value; }
        }

    }

    [DataClass("VatInvoiceData")]
    public partial class VatInvoiceData
    {
        private VatInvoice invoice;
        private ICollection<PaymentType> paymentTypes;
        private ICollection<DateTime> closeDates;

        protected VatInvoiceData() {}

        public VatInvoiceData(VatInvoice invoice)
        {
            this.invoice = invoice;
        }
        public VatInvoice Invoice
        {
            get { return invoice; }
            set { invoice = value; }
        }

        public ICollection<PaymentType> PaymentTypes
        {
            get { return paymentTypes; }
            set { paymentTypes = value; }
        }

        public ICollection<DateTime> CloseDates
        {
            get { return closeDates; }
            set { closeDates = value; }
        }

    }

    [DataClass("VatInvoicePrintData")]
    public partial class VatInvoicePrintData
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<VatInvoiceData> originalInvoices = new List<VatInvoiceData>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<VatInvoiceData> duplicatedInvoices = new List<VatInvoiceData>();


        [NotNull]
        public ICollection<VatInvoiceData> OriginalInvoices
        {
            get { return originalInvoices; }
        }

        [NotNull]
        public ICollection<VatInvoiceData> DuplicatedInvoices
        {
            get { return duplicatedInvoices; }
        }

    }

    [DataClass("VatInvoiceReportData")]
    public partial class VatInvoiceReportData
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<VatInvoiceReportItem> items = new List<VatInvoiceReportItem>();
        private List<DetailedVatInvoiceReportItem> detailedItems;


        [NotNull]
        public List<VatInvoiceReportItem> Items
        {
            get { return items; }
        }

        public List<DetailedVatInvoiceReportItem> DetailedItems
        {
            get { return detailedItems; }
            set { detailedItems = value; }
        }

    }

    [DataClass("VatInvoiceReportItem")]
    public partial class VatInvoiceReportItem
    {
        private DateTime? date;
        private Customer customer;
        private DepartmentEntity department;
        private string documentNumber;
        private decimal? vatSum;
        private decimal? sumWithVat;
        private Guid? invoiceId;
        private string vatPercentages;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Guid> orderIds = new List<Guid>();

        protected VatInvoiceReportItem() {}

        public VatInvoiceReportItem(DateTime? date, Customer customer, DepartmentEntity department, string documentNumber, decimal? vatSum, decimal? sumWithVat, Guid? invoiceId, string vatPercentages)
        {
            this.date = date;
            this.customer = customer;
            this.department = department;
            this.documentNumber = documentNumber;
            this.vatSum = vatSum;
            this.sumWithVat = sumWithVat;
            this.invoiceId = invoiceId;
            this.vatPercentages = vatPercentages;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Customer Customer
        {
            get { return customer; }
            set { customer = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        public decimal? VatSum
        {
            get { return vatSum; }
            set { vatSum = value; }
        }

        public decimal? SumWithVat
        {
            get { return sumWithVat; }
            set { sumWithVat = value; }
        }

        public Guid? InvoiceId
        {
            get { return invoiceId; }
            set { invoiceId = value; }
        }

        public string VatPercentages
        {
            get { return vatPercentages; }
            set { vatPercentages = value; }
        }

        [NotNull]
        public ICollection<Guid> OrderIds
        {
            get { return orderIds; }
        }

    }

    [DataClass("AbstractVatInvoice")]
    public abstract partial class AbstractVatInvoice : AbstractDocument
    {
        private Guid customerId;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        private int? cashRegisterNumber;
        private int? sessionNumber;
        private int? orderNumber;
        private string fiscalChequeNumber;
        private string fiscalRegisterNumber;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AbstractVatInvoiceItem> items = new List<AbstractVatInvoiceItem>();

        protected AbstractVatInvoice() {}

        protected AbstractVatInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Guid customerId, DepartmentEntity department)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.customerId = customerId;
            this.department = department;
        }

        protected AbstractVatInvoice(Guid id, DateTime dateIncoming, string documentNumber, Guid customerId, DepartmentEntity department)
            : base(id, dateIncoming, documentNumber)
        {
            this.customerId = customerId;
            this.department = department;
        }

        public Guid CustomerId
        {
            get { return customerId; }
            set { customerId = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        public int? CashRegisterNumber
        {
            get { return cashRegisterNumber; }
            set { cashRegisterNumber = value; }
        }

        public int? SessionNumber
        {
            get { return sessionNumber; }
            set { sessionNumber = value; }
        }

        public int? OrderNumber
        {
            get { return orderNumber; }
            set { orderNumber = value; }
        }

        [CanBeNull]
        public string FiscalChequeNumber
        {
            get { return fiscalChequeNumber; }
            set { fiscalChequeNumber = value; }
        }

        [CanBeNull]
        public string FiscalRegisterNumber
        {
            get { return fiscalRegisterNumber; }
            set { fiscalRegisterNumber = value; }
        }

        [NotNull]
        public List<AbstractVatInvoiceItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("AbstractVatInvoiceItem")]
    public abstract partial class AbstractVatInvoiceItem : Entity
    {
        [HasDefaultValue]
        private int num = 0;
        private string description;
        [HasDefaultValue]
        private decimal sum = 0;
        [HasDefaultValue]
        private decimal vatPercent = 0;
        private TaxCategory taxCategory;
        [HasDefaultValue]
        private decimal sumWithVat = 0;

        protected AbstractVatInvoiceItem() {}

        protected AbstractVatInvoiceItem(Guid id, TaxCategory taxCategory)
            : base(id)
        {
            this.taxCategory = taxCategory;
        }

        protected AbstractVatInvoiceItem(Guid id)
            : base(id)
        {

        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        [CanBeNull]
        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal VatPercent
        {
            get { return vatPercent; }
            set { vatPercent = value; }
        }

        public TaxCategory TaxCategory
        {
            get { return taxCategory; }
            set { taxCategory = value; }
        }

        public decimal SumWithVat
        {
            get { return sumWithVat; }
            set { sumWithVat = value; }
        }

    }

    [DataClass("ConsolidatedVatInvoiceItem")]
    public partial class ConsolidatedVatInvoiceItem : AbstractVatInvoiceItem
    {

        protected ConsolidatedVatInvoiceItem() {}

        public ConsolidatedVatInvoiceItem(Guid id, TaxCategory taxCategory)
            : base(id, taxCategory)
        {

        }

        public ConsolidatedVatInvoiceItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("DetailedVatInvoice")]
    public partial class DetailedVatInvoice : AbstractVatInvoice, WithSplitVat
    {
        private Guid orderId;
        private DateTime closeTime;
        private bool fpm;
        [HasDefaultValue]
        private bool storned = false;
        [HasDefaultValue]
        private bool splitVat = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, decimal> payments = new Dictionary<Guid, decimal>();
        private PaCompanyDocumentType paDocumentType;
        private string paDocumentNumber;
        private string cupCode;
        private string cigCode;

        protected DetailedVatInvoice() {}

        public DetailedVatInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Guid customerId, DepartmentEntity department, Guid orderId, DateTime closeTime, bool fpm)
            : base(id, dateIncoming, documentNumber, status, customerId, department)
        {
            this.orderId = orderId;
            this.closeTime = closeTime;
            this.fpm = fpm;
        }

        public DetailedVatInvoice(Guid id, DateTime dateIncoming, string documentNumber, Guid customerId, DepartmentEntity department, Guid orderId, DateTime closeTime)
            : base(id, dateIncoming, documentNumber, customerId, department)
        {
            this.orderId = orderId;
            this.closeTime = closeTime;
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public DateTime CloseTime
        {
            get { return closeTime; }
            set { closeTime = value; }
        }

        public bool Fpm
        {
            get { return fpm; }
            set { fpm = value; }
        }

        public bool Storned
        {
            get { return storned; }
            set { storned = value; }
        }

        public bool SplitVat
        {
            get { return splitVat; }
            set { splitVat = value; }
        }

        [NotNull]
        public Dictionary<Guid, decimal> Payments
        {
            get { return payments; }
        }

        [CanBeNull]
        public PaCompanyDocumentType PaDocumentType
        {
            get { return paDocumentType; }
            set { paDocumentType = value; }
        }

        [CanBeNull]
        public string PaDocumentNumber
        {
            get { return paDocumentNumber; }
            set { paDocumentNumber = value; }
        }

        [CanBeNull]
        public string CupCode
        {
            get { return cupCode; }
            set { cupCode = value; }
        }

        [CanBeNull]
        public string CigCode
        {
            get { return cigCode; }
            set { cigCode = value; }
        }

    }

    [DataClass("DetailedVatInvoiceItem")]
    public partial class DetailedVatInvoiceItem : AbstractVatInvoiceItem
    {
        [HasDefaultValue]
        private decimal discountSum = 0;
        [HasDefaultValue]
        private decimal increaseSum = 0;
        [HasDefaultValue]
        private decimal dishSum = 0;
        [HasDefaultValue]
        private decimal dishAmount = 0;
        private string positionCode;

        protected DetailedVatInvoiceItem() {}

        public DetailedVatInvoiceItem(Guid id, TaxCategory taxCategory, decimal discountSum, decimal increaseSum, decimal dishSum, decimal dishAmount)
            : base(id, taxCategory)
        {
            this.discountSum = discountSum;
            this.increaseSum = increaseSum;
            this.dishSum = dishSum;
            this.dishAmount = dishAmount;
        }

        public DetailedVatInvoiceItem(Guid id, decimal discountSum, decimal increaseSum, decimal dishSum, decimal dishAmount)
            : base(id)
        {
            this.discountSum = discountSum;
            this.increaseSum = increaseSum;
            this.dishSum = dishSum;
            this.dishAmount = dishAmount;
        }

        public decimal DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public decimal IncreaseSum
        {
            get { return increaseSum; }
            set { increaseSum = value; }
        }

        public decimal DishSum
        {
            get { return dishSum; }
            set { dishSum = value; }
        }

        public decimal DishAmount
        {
            get { return dishAmount; }
            set { dishAmount = value; }
        }

        [CanBeNull]
        public string PositionCode
        {
            get { return positionCode; }
            set { positionCode = value; }
        }

    }

    [DataClass("PaCompanyDocumentType")]
    [EnumClass]
    public partial class PaCompanyDocumentType : LocalizableName<PaCompanyDocumentType>
    {
        /// <summary> Данные о заказе на покупку. </summary>
        public static readonly PaCompanyDocumentType DATA_ORDER_PURCHASE = new PaCompanyDocumentType("DATA_ORDER_PURCHASE");
        /// <summary> Данные о договоре. </summary>
        public static readonly PaCompanyDocumentType DATA_CONTRACT = new PaCompanyDocumentType("DATA_CONTRACT");
        /// <summary> Данные о соглашении. </summary>
        public static readonly PaCompanyDocumentType DATA_CONVENTION = new PaCompanyDocumentType("DATA_CONVENTION");

        private readonly string __value;
        private readonly string __nameResId;

        private PaCompanyDocumentType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PACOMPANYDOCUMENTTYPE_NAME_" + __value;
        }

        public static PaCompanyDocumentType Parse(string value)
        {
            switch(value)
            {
                case "DATA_ORDER_PURCHASE": return DATA_ORDER_PURCHASE;
                case "DATA_CONTRACT": return DATA_CONTRACT;
                case "DATA_CONVENTION": return DATA_CONVENTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PaCompanyDocumentType[] VALUES
        {
            get
            {
                return new []
                {
                    DATA_ORDER_PURCHASE, 
                    DATA_CONTRACT, 
                    DATA_CONVENTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("VatInvoice")]
    public partial class VatInvoice : AbstractVatInvoice
    {

        protected VatInvoice() {}

        public VatInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Guid customerId, DepartmentEntity department)
            : base(id, dateIncoming, documentNumber, status, customerId, department)
        {

        }

        public VatInvoice(Guid id, DateTime dateIncoming, string documentNumber, Guid customerId, DepartmentEntity department)
            : base(id, dateIncoming, documentNumber, customerId, department)
        {

        }

    }

    [DataClass("OperationInfo")]
    public partial class OperationInfo
    {
        private DateTime? date;
        private User user;


        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        [CanBeNull]
        public User User
        {
            get { return user; }
            set { user = value; }
        }

    }

    [DataClass("AddressShowType")]
    [EnumClass]
    public partial class AddressShowType : LocalizableName<AddressShowType>
    {
        /// <summary> Поля «Куда везти», «квартира», «этаж», «подъезд», «домофон». </summary>
        public static readonly AddressShowType CITY = new AddressShowType("CITY");
        /// <summary> Поля «Индекс», «Куда везти», «Детали адреса». </summary>
        public static readonly AddressShowType INTERNATIONAL = new AddressShowType("INTERNATIONAL");
        /// <summary> Поля «Куда везти», «Детали адреса». </summary>
        public static readonly AddressShowType NOPOSTCODE = new AddressShowType("NOPOSTCODE");
        /// <summary> Использовать справочник городов и улиц. </summary>
        public static readonly AddressShowType LEGACY = new AddressShowType("LEGACY");

        private readonly string __value;
        private readonly string __nameResId;

        private AddressShowType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ADDRESSSHOWTYPE_NAME_" + __value;
        }

        public static AddressShowType Parse(string value)
        {
            switch(value)
            {
                case "CITY": return CITY;
                case "INTERNATIONAL": return INTERNATIONAL;
                case "NOPOSTCODE": return NOPOSTCODE;
                case "LEGACY": return LEGACY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AddressShowType[] VALUES
        {
            get
            {
                return new []
                {
                    CITY, 
                    INTERNATIONAL, 
                    NOPOSTCODE, 
                    LEGACY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("AddressShowTypeSettings")]
    public partial class AddressShowTypeSettings
    {
        private bool useNewFormat;
        [NotNull, NotNullField]
        private AddressShowType addressShowType;
        private bool useLiveSearch;

        protected AddressShowTypeSettings() {}

        public AddressShowTypeSettings(bool useNewFormat, AddressShowType addressShowType, bool useLiveSearch)
        {
            this.useNewFormat = useNewFormat;
            this.addressShowType = addressShowType;
            this.useLiveSearch = useLiveSearch;
        }
        public bool UseNewFormat
        {
            get { return useNewFormat; }
            set { useNewFormat = value; }
        }

        [NotNull]
        public AddressShowType AddressShowType
        {
            get { return addressShowType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  addressShowType = value;
            }
        }

        public bool UseLiveSearch
        {
            get { return useLiveSearch; }
            set { useLiveSearch = value; }
        }

    }

    [DataClass("CashSystem")]
    [EnumClass]
    public partial class CashSystem : LocalizableName<CashSystem>
    {
        /// <summary> Office. </summary>
        public static readonly CashSystem IIKORMS = new CashSystem("IIKORMS", "iiko RMS");
        /// <summary> R-Keeper. </summary>
        public static readonly CashSystem RKEEPER = new CashSystem("RKEEPER", "R-Keeper");

        private readonly string name;
        private readonly string __value;
        private readonly string __nameResId;

        private CashSystem(string __value, string name)
        {
            this.__value = __value;
            this.__nameResId = "CASHSYSTEM_NAME_" + __value;
            this.name = name;
        }

        public static CashSystem Parse(string value)
        {
            switch(value)
            {
                case "IIKORMS": return IIKORMS;
                case "RKEEPER": return RKEEPER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CashSystem[] VALUES
        {
            get
            {
                return new []
                {
                    IIKORMS, 
                    RKEEPER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Name
        {
            get { return name; }
        }

    }

    [DataClass("CentralOffice")]
    public partial class CentralOffice : DepartmentEntity
    {

        protected CentralOffice() {}

        public CentralOffice(Guid id, string description, string name, CorporatedEntity parent, string shortName, string departmentId, string address, string category1, string category2, string category3, string category4, string category5, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod, BusinessDateSettings businessDateSettings, OperationalDaySettings operationalDaySettings)
            : base(id, description, name, parent, shortName, departmentId, address, category1, category2, category3, category4, category5, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod, businessDateSettings, operationalDaySettings)
        {

        }

        public CentralOffice(Guid id, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod)
            : base(id, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod)
        {

        }

    }

    [DataClass("CentralStore")]
    public partial class CentralStore : DepartmentEntity
    {

        protected CentralStore() {}

        public CentralStore(Guid id, string description, string name, CorporatedEntity parent, string shortName, string departmentId, string address, string category1, string category2, string category3, string category4, string category5, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod, BusinessDateSettings businessDateSettings, OperationalDaySettings operationalDaySettings)
            : base(id, description, name, parent, shortName, departmentId, address, category1, category2, category3, category4, category5, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod, businessDateSettings, operationalDaySettings)
        {

        }

        public CentralStore(Guid id, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod)
            : base(id, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod)
        {

        }

    }

    [RootEntity]
    [DataClass("CorporatedEntity")]
    public abstract partial class CorporatedEntity : PersistedEntity
    {
        private string description;
        private string name;
        private string gln;
        private CorporatedEntity parent;

        protected CorporatedEntity() {}

        protected CorporatedEntity(Guid id, string description, string name, CorporatedEntity parent)
            : base(id)
        {
            this.description = description;
            this.name = name;
            this.parent = parent;
        }

        protected CorporatedEntity(Guid id)
            : base(id)
        {

        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [CanBeNull]
        public string Gln
        {
            get { return gln; }
            set { gln = value; }
        }

        public CorporatedEntity Parent
        {
            get { return parent; }
            set { parent = value; }
        }

    }

    [DataClass("CorporatedEntityType")]
    [EnumClass]
    public partial class CorporatedEntityType : LocalizableName<CorporatedEntityType>
    {
        /// <summary> Корпорация. </summary>
        public static readonly CorporatedEntityType CORPORATION = new CorporatedEntityType("CORPORATION");
        /// <summary> Юридическое лицо. </summary>
        public static readonly CorporatedEntityType JURPERSON = new CorporatedEntityType("JURPERSON");
        /// <summary> Структурное подразделение. </summary>
        public static readonly CorporatedEntityType ORGDEVELOPMENT = new CorporatedEntityType("ORGDEVELOPMENT");
        /// <summary> Торговое предприятие. </summary>
        public static readonly CorporatedEntityType DEPARTMENT = new CorporatedEntityType("DEPARTMENT");
        /// <summary> Производство. </summary>
        public static readonly CorporatedEntityType MANUFACTURE = new CorporatedEntityType("MANUFACTURE");
        /// <summary> Центральный склад. </summary>
        public static readonly CorporatedEntityType CENTRALSTORE = new CorporatedEntityType("CENTRALSTORE");
        /// <summary> Центральный офис. </summary>
        public static readonly CorporatedEntityType CENTRALOFFICE = new CorporatedEntityType("CENTRALOFFICE");
        /// <summary> Точка продаж. </summary>
        public static readonly CorporatedEntityType SALEPOINT = new CorporatedEntityType("SALEPOINT");
        /// <summary> Склад. </summary>
        public static readonly CorporatedEntityType STORE = new CorporatedEntityType("STORE");
        /// <summary> Группа. </summary>
        public static readonly CorporatedEntityType GROUP = new CorporatedEntityType("GROUP");
        /// <summary> Отделение. </summary>
        public static readonly CorporatedEntityType RESTAURANTSECTION = new CorporatedEntityType("RESTAURANTSECTION");

        private readonly string __value;
        private readonly string __nameResId;

        private CorporatedEntityType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CORPORATEDENTITYTYPE_NAME_" + __value;
        }

        public static CorporatedEntityType Parse(string value)
        {
            switch(value)
            {
                case "CORPORATION": return CORPORATION;
                case "JURPERSON": return JURPERSON;
                case "ORGDEVELOPMENT": return ORGDEVELOPMENT;
                case "DEPARTMENT": return DEPARTMENT;
                case "MANUFACTURE": return MANUFACTURE;
                case "CENTRALSTORE": return CENTRALSTORE;
                case "CENTRALOFFICE": return CENTRALOFFICE;
                case "SALEPOINT": return SALEPOINT;
                case "STORE": return STORE;
                case "GROUP": return GROUP;
                case "RESTAURANTSECTION": return RESTAURANTSECTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CorporatedEntityType[] VALUES
        {
            get
            {
                return new []
                {
                    CORPORATION, 
                    JURPERSON, 
                    ORGDEVELOPMENT, 
                    DEPARTMENT, 
                    MANUFACTURE, 
                    CENTRALSTORE, 
                    CENTRALOFFICE, 
                    SALEPOINT, 
                    STORE, 
                    GROUP, 
                    RESTAURANTSECTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CorporatedHierarchy")]
    public partial class CorporatedHierarchy
    {
        private Corporation corporation;
        private JurPerson jurPerson;
        private DepartmentEntity department;


        [CanBeNull]
        public Corporation Corporation
        {
            get { return corporation; }
            set { corporation = value; }
        }

        [CanBeNull]
        public JurPerson JurPerson
        {
            get { return jurPerson; }
            set { jurPerson = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("Corporation")]
    public partial class Corporation : CorporatedEntity
    {
        [Obsolete("Deprecated in Java code")]
        private string icon;
        [Obsolete("Deprecated in Java code")]
        private string background;
        private SavedImageInfo iconImage;
        private SavedImageInfo backgroundImage;
        [NotNull, NotNullField]
        private Currency currency;
        private DocumentSettings documentSettings;
        private string crmId;
        [HasDefaultValue]
        private int moneyPrecision = 2;
        [HasDefaultValue]
        private bool roundCostForGuests = false;
        [HasDefaultValue]
        private bool roundPricePerUnitForGuests = false;
        [NotNull, NotNullField]
        private DistributionAlgorithmType defaultDistributionAlgorithm;
        [NotNull, NotNullField]
        private VatAccounting vatAccounting;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<int, string> courseCustomNames = new Dictionary<int, string>();
        [NotNull, NotNullField]
        private PersonalDataProcessingSettings personalDataProcessingSettings;
        [NotNull, NotNullField]
        private AddressShowTypeSettings addressShowTypeSettings;
        [NotNull, NotNullField]
        private DateFormatSettings dateFormatSettings;
        [HasDefaultValue]
        private bool deleteZeroProductionOrderItems = false;
        [NotNull, NotNullField]
        private AllowableDeviationAction defaultDeviationAction;
        [NotNull, NotNullField]
        private StoreAccountingSettings storeAccountingSettings;

        protected Corporation() {}

        public Corporation(Guid id, string description, string name, CorporatedEntity parent, string icon, string background, Currency currency, DistributionAlgorithmType defaultDistributionAlgorithm, VatAccounting vatAccounting, PersonalDataProcessingSettings personalDataProcessingSettings, AddressShowTypeSettings addressShowTypeSettings, DateFormatSettings dateFormatSettings, AllowableDeviationAction defaultDeviationAction, StoreAccountingSettings storeAccountingSettings)
            : base(id, description, name, parent)
        {
            this.icon = icon;
            this.background = background;
            this.currency = currency;
            this.defaultDistributionAlgorithm = defaultDistributionAlgorithm;
            this.vatAccounting = vatAccounting;
            this.personalDataProcessingSettings = personalDataProcessingSettings;
            this.addressShowTypeSettings = addressShowTypeSettings;
            this.dateFormatSettings = dateFormatSettings;
            this.defaultDeviationAction = defaultDeviationAction;
            this.storeAccountingSettings = storeAccountingSettings;
        }

        public Corporation(Guid id, Currency currency, DistributionAlgorithmType defaultDistributionAlgorithm, VatAccounting vatAccounting, PersonalDataProcessingSettings personalDataProcessingSettings, AddressShowTypeSettings addressShowTypeSettings, DateFormatSettings dateFormatSettings, AllowableDeviationAction defaultDeviationAction, StoreAccountingSettings storeAccountingSettings)
            : base(id)
        {
            this.currency = currency;
            this.defaultDistributionAlgorithm = defaultDistributionAlgorithm;
            this.vatAccounting = vatAccounting;
            this.personalDataProcessingSettings = personalDataProcessingSettings;
            this.addressShowTypeSettings = addressShowTypeSettings;
            this.dateFormatSettings = dateFormatSettings;
            this.defaultDeviationAction = defaultDeviationAction;
            this.storeAccountingSettings = storeAccountingSettings;
        }

        [Obsolete("Deprecated in Java code")]
        public string Icon
        {
            get { return icon; }
            set { icon = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public string Background
        {
            get { return background; }
            set { background = value; }
        }

        [CanBeNull]
        public SavedImageInfo IconImage
        {
            get { return iconImage; }
            set { iconImage = value; }
        }

        [CanBeNull]
        public SavedImageInfo BackgroundImage
        {
            get { return backgroundImage; }
            set { backgroundImage = value; }
        }

        [NotNull]
        public Currency Currency
        {
            get { return currency; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  currency = value;
            }
        }

        [CanBeNull]
        public DocumentSettings DocumentSettings
        {
            get { return documentSettings; }
            set { documentSettings = value; }
        }

        [CanBeNull]
        public string CrmId
        {
            get { return crmId; }
            set { crmId = value; }
        }

        public int MoneyPrecision
        {
            get { return moneyPrecision; }
            set { moneyPrecision = value; }
        }

        public bool RoundCostForGuests
        {
            get { return roundCostForGuests; }
            set { roundCostForGuests = value; }
        }

        public bool RoundPricePerUnitForGuests
        {
            get { return roundPricePerUnitForGuests; }
            set { roundPricePerUnitForGuests = value; }
        }

        [NotNull]
        public DistributionAlgorithmType DefaultDistributionAlgorithm
        {
            get { return defaultDistributionAlgorithm; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  defaultDistributionAlgorithm = value;
            }
        }

        [NotNull]
        public VatAccounting VatAccounting
        {
            get { return vatAccounting; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  vatAccounting = value;
            }
        }

        [NotNull]
        public Dictionary<int, string> CourseCustomNames
        {
            get { return courseCustomNames; }
        }

        [NotNull]
        public PersonalDataProcessingSettings PersonalDataProcessingSettings
        {
            get { return personalDataProcessingSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  personalDataProcessingSettings = value;
            }
        }

        [NotNull]
        public AddressShowTypeSettings AddressShowTypeSettings
        {
            get { return addressShowTypeSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  addressShowTypeSettings = value;
            }
        }

        [NotNull]
        public DateFormatSettings DateFormatSettings
        {
            get { return dateFormatSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  dateFormatSettings = value;
            }
        }

        public bool DeleteZeroProductionOrderItems
        {
            get { return deleteZeroProductionOrderItems; }
            set { deleteZeroProductionOrderItems = value; }
        }

        [NotNull]
        public AllowableDeviationAction DefaultDeviationAction
        {
            get { return defaultDeviationAction; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  defaultDeviationAction = value;
            }
        }

        [NotNull]
        public StoreAccountingSettings StoreAccountingSettings
        {
            get { return storeAccountingSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  storeAccountingSettings = value;
            }
        }

    }

    [DataClass("CustomerDataTransferType")]
    [EnumClass]
    public partial class CustomerDataTransferType : LocalizableName<CustomerDataTransferType>
    {
        /// <summary> Передавать. </summary>
        public static readonly CustomerDataTransferType SEND = new CustomerDataTransferType("SEND");
        /// <summary> Не передавать. </summary>
        public static readonly CustomerDataTransferType NOT_SEND = new CustomerDataTransferType("NOT_SEND");
        /// <summary> Передавать и запрашивать новое согласие. </summary>
        public static readonly CustomerDataTransferType SEND_N_REQUEST = new CustomerDataTransferType("SEND_N_REQUEST");

        private readonly string __value;
        private readonly string __nameResId;

        private CustomerDataTransferType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CUSTOMERDATATRANSFERTYPE_NAME_" + __value;
        }

        public static CustomerDataTransferType Parse(string value)
        {
            switch(value)
            {
                case "SEND": return SEND;
                case "NOT_SEND": return NOT_SEND;
                case "SEND_N_REQUEST": return SEND_N_REQUEST;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CustomerDataTransferType[] VALUES
        {
            get
            {
                return new []
                {
                    SEND, 
                    NOT_SEND, 
                    SEND_N_REQUEST
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DateFormatSettings")]
    public partial class DateFormatSettings
    {
        private WeekDays firstDayOfWeek;
        private int minimalDaysInFirstWeek;
        private int firstDayOfMonth;
        private int firstMonthOfYear;
        private int middleDayOfMonth;

        protected DateFormatSettings() {}

        public DateFormatSettings(WeekDays firstDayOfWeek, int minimalDaysInFirstWeek, int firstDayOfMonth, int firstMonthOfYear, int middleDayOfMonth)
        {
            this.firstDayOfWeek = firstDayOfWeek;
            this.minimalDaysInFirstWeek = minimalDaysInFirstWeek;
            this.firstDayOfMonth = firstDayOfMonth;
            this.firstMonthOfYear = firstMonthOfYear;
            this.middleDayOfMonth = middleDayOfMonth;
        }
        public WeekDays FirstDayOfWeek
        {
            get { return firstDayOfWeek; }
            set { firstDayOfWeek = value; }
        }

        public int MinimalDaysInFirstWeek
        {
            get { return minimalDaysInFirstWeek; }
            set { minimalDaysInFirstWeek = value; }
        }

        public int FirstDayOfMonth
        {
            get { return firstDayOfMonth; }
            set { firstDayOfMonth = value; }
        }

        public int FirstMonthOfYear
        {
            get { return firstMonthOfYear; }
            set { firstMonthOfYear = value; }
        }

        public int MiddleDayOfMonth
        {
            get { return middleDayOfMonth; }
            set { middleDayOfMonth = value; }
        }

    }

    [DataClass("Department")]
    public partial class Department : DepartmentEntity
    {
        private string exchangeDirPath;
        private CashSystem cashSystem;
        private DateTime? unloadTime;
        private DateTime? loadTime;
        [HasDefaultValue]
        private bool? unloadNow = false;
        private RestaurantSection section;
        private Dictionary<Role, DateInterval> timeCorrectionMap;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Department() {}

        public Department(Guid id, string description, string name, CorporatedEntity parent, string shortName, string departmentId, string address, string category1, string category2, string category3, string category4, string category5, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod, BusinessDateSettings businessDateSettings, OperationalDaySettings operationalDaySettings, string exchangeDirPath, CashSystem cashSystem, DateTime? unloadTime, DateTime? loadTime)
            : base(id, description, name, parent, shortName, departmentId, address, category1, category2, category3, category4, category5, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod, businessDateSettings, operationalDaySettings)
        {
            this.exchangeDirPath = exchangeDirPath;
            this.cashSystem = cashSystem;
            this.unloadTime = unloadTime;
            this.loadTime = loadTime;
        }

        public Department(Guid id, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod)
            : base(id, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod)
        {

        }

        public string ExchangeDirPath
        {
            get { return exchangeDirPath; }
            set { exchangeDirPath = value; }
        }

        public CashSystem CashSystem
        {
            get { return cashSystem; }
            set { cashSystem = value; }
        }

        public DateTime? UnloadTime
        {
            get { return unloadTime; }
            set { unloadTime = value; }
        }

        public DateTime? LoadTime
        {
            get { return loadTime; }
            set { loadTime = value; }
        }

        public bool? UnloadNow
        {
            get { return unloadNow; }
            set { unloadNow = value; }
        }

        [CanBeNull]
        public RestaurantSection Section
        {
            get { return section; }
            set { section = value; }
        }

        [CanBeNull]
        public Dictionary<Role, DateInterval> TimeCorrectionMap
        {
            get { return timeCorrectionMap; }
            set { timeCorrectionMap = value; }
        }

    }

    [RootEntity]
    [DataClass("DepartmentCategory")]
    public partial class DepartmentCategory : LocalizableNamePersistedEntity
    {
        private int number;

        protected DepartmentCategory() {}

        public DepartmentCategory(Guid id, LocalizableValue name, int number)
            : base(id, name)
        {
            this.number = number;
        }

        public DepartmentCategory(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

    }

    [DataClass("DepartmentEntity")]
    public abstract partial class DepartmentEntity : CorporatedEntity
    {
        private string shortName;
        private string departmentId;
        private string address;
        private string accountingReasonCode;
        private string registrationNumber;
        private string category1;
        private string category2;
        private string category3;
        private string category4;
        private string category5;
        [HasDefaultValue]
        private bool registered = false;
        [NotNull, NotNullField]
        private DistributionAlgorithmType defaultDistributionAlgorithm;
        private Account vatAccumulator;
        [NotNull, NotNullField]
        private VerificationActAccountsFilter verificationActAccountsFilter;
        [NotNull, NotNullField]
        private AccountingMethod accountingMethod;
        private SavedImageInfo background;
        private DateTime? periodCloseDate;
        private DateTime? periodClosingDate;
        private BusinessDateSettings businessDateSettings;
        private OperationalDaySettings operationalDaySettings;
        [HasDefaultValue]
        private bool usePeriodClosingDate = false;
        private int? periodLength;
        private string version;
        [HasDefaultValue]
        private bool isCallCenter = false;
        private string crmId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Conception> conceptions = new List<Conception>();
        private CustomSchedule scheduleInternal;
        private EgaisConnectionsSettings egaisConnectionsSettings;

        protected DepartmentEntity() {}

        protected DepartmentEntity(Guid id, string description, string name, CorporatedEntity parent, string shortName, string departmentId, string address, string category1, string category2, string category3, string category4, string category5, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod, BusinessDateSettings businessDateSettings, OperationalDaySettings operationalDaySettings)
            : base(id, description, name, parent)
        {
            this.shortName = shortName;
            this.departmentId = departmentId;
            this.address = address;
            this.category1 = category1;
            this.category2 = category2;
            this.category3 = category3;
            this.category4 = category4;
            this.category5 = category5;
            this.defaultDistributionAlgorithm = defaultDistributionAlgorithm;
            this.verificationActAccountsFilter = verificationActAccountsFilter;
            this.accountingMethod = accountingMethod;
            this.businessDateSettings = businessDateSettings;
            this.operationalDaySettings = operationalDaySettings;
        }

        protected DepartmentEntity(Guid id, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod)
            : base(id)
        {
            this.defaultDistributionAlgorithm = defaultDistributionAlgorithm;
            this.verificationActAccountsFilter = verificationActAccountsFilter;
            this.accountingMethod = accountingMethod;
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public string DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        [CanBeNull]
        public string AccountingReasonCode
        {
            get { return accountingReasonCode; }
            set { accountingReasonCode = value; }
        }

        [CanBeNull]
        public string RegistrationNumber
        {
            get { return registrationNumber; }
            set { registrationNumber = value; }
        }

        public string Category1
        {
            get { return category1; }
            set { category1 = value; }
        }

        public string Category2
        {
            get { return category2; }
            set { category2 = value; }
        }

        public string Category3
        {
            get { return category3; }
            set { category3 = value; }
        }

        public string Category4
        {
            get { return category4; }
            set { category4 = value; }
        }

        public string Category5
        {
            get { return category5; }
            set { category5 = value; }
        }

        public bool Registered
        {
            get { return registered; }
            set { registered = value; }
        }

        [NotNull]
        public DistributionAlgorithmType DefaultDistributionAlgorithm
        {
            get { return defaultDistributionAlgorithm; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  defaultDistributionAlgorithm = value;
            }
        }

        [CanBeNull]
        public Account VatAccumulator
        {
            get { return vatAccumulator; }
            set { vatAccumulator = value; }
        }

        [NotNull]
        public VerificationActAccountsFilter VerificationActAccountsFilter
        {
            get { return verificationActAccountsFilter; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  verificationActAccountsFilter = value;
            }
        }

        [NotNull]
        public AccountingMethod AccountingMethod
        {
            get { return accountingMethod; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  accountingMethod = value;
            }
        }

        [CanBeNull]
        public SavedImageInfo Background
        {
            get { return background; }
            set { background = value; }
        }

        public DateTime? PeriodCloseDate
        {
            get { return periodCloseDate; }
            set { periodCloseDate = value; }
        }

        public DateTime? PeriodClosingDate
        {
            get { return periodClosingDate; }
            set { periodClosingDate = value; }
        }

        public BusinessDateSettings BusinessDateSettings
        {
            get { return businessDateSettings; }
            set { businessDateSettings = value; }
        }

        public OperationalDaySettings OperationalDaySettings
        {
            get { return operationalDaySettings; }
            set { operationalDaySettings = value; }
        }

        public bool UsePeriodClosingDate
        {
            get { return usePeriodClosingDate; }
            set { usePeriodClosingDate = value; }
        }

        public int? PeriodLength
        {
            get { return periodLength; }
            set { periodLength = value; }
        }

        [CanBeNull]
        public string Version
        {
            get { return version; }
            set { version = value; }
        }

        public bool IsCallCenter
        {
            get { return isCallCenter; }
            set { isCallCenter = value; }
        }

        [CanBeNull]
        public string CrmId
        {
            get { return crmId; }
            set { crmId = value; }
        }

        [NotNull]
        public List<Conception> Conceptions
        {
            get { return conceptions; }
        }

        [CanBeNull]
        public CustomSchedule ScheduleInternal
        {
            get { return scheduleInternal; }
            set { scheduleInternal = value; }
        }

        [CanBeNull]
        public EgaisConnectionsSettings EgaisConnectionsSettings
        {
            get { return egaisConnectionsSettings; }
            set { egaisConnectionsSettings = value; }
        }

    }

    [DataClass("DepartmentFilter")]
    public partial class DepartmentFilter
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DepartmentEntity> departments = new HashSet<DepartmentEntity>();
        private bool excluding;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DepartmentFilter() {}

        public DepartmentFilter(bool excluding)
        {
            this.excluding = excluding;
        }
        [NotNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
        }

        public bool Excluding
        {
            get { return excluding; }
            set { excluding = value; }
        }

    }

    [DataClass("FrontCorporatedProperties")]
    public partial class FrontCorporatedProperties
    {
        private Guid? corporationId;
        private string corporationName;
        private Currency currency;
        private int moneyPrecision;
        private Dictionary<int, string> courseCustomNames;
        private PersonalDataProcessingSettings personalDataProcessingSettings;
        private AddressShowTypeSettings addressShowTypeSettings;
        private string jurPersonName;
        private string jurPersonAddress;
        private LegalAddress jurPersonDetailedAddress;
        private string jurPersonInn;
        private string jurPersonLeader;
        private string jurPersonAccountant;
        private string jurPersonTechnologist;
        private string jurPersonAccountingReasonCode;
        private string jurPersonBusinessClassificationCode;
        private string jurPersonEconomicActivityClassificationCode;
        private string jurPersonBank;
        private string jurPersonSettlementAccount;
        private string jurPersonBik;
        private string jurPersonCorrespondentAccount;
        private string jurPersonPhone;
        private string jurPersonIban;
        private string jurPersonSwiftBic;
        private string jurPersonRegistrationNumber;
        private string departmentName;
        private string departmentAddress;
        private Guid? departmentId;
        private Guid? departmentVatAccumulator;
        private string departmentCode;
        private bool roundCostForGuests;
        private bool roundPricePerUnitForGuests;

        public FrontCorporatedProperties() {}

        public FrontCorporatedProperties(Guid? corporationId, string corporationName, Currency currency, int moneyPrecision, PersonalDataProcessingSettings personalDataProcessingSettings, AddressShowTypeSettings addressShowTypeSettings, string jurPersonName, string jurPersonAddress, LegalAddress jurPersonDetailedAddress, string jurPersonInn, string jurPersonLeader, string jurPersonAccountant, string jurPersonTechnologist, string jurPersonAccountingReasonCode, string jurPersonBusinessClassificationCode, string jurPersonEconomicActivityClassificationCode, string jurPersonBank, string jurPersonSettlementAccount, string jurPersonBik, string jurPersonCorrespondentAccount, string jurPersonPhone, string jurPersonIban, string jurPersonSwiftBic, string jurPersonRegistrationNumber, string departmentName, string departmentAddress, Guid? departmentId, Guid? departmentVatAccumulator, string departmentCode, bool roundCostForGuests, bool roundPricePerUnitForGuests)
        {
            this.corporationId = corporationId;
            this.corporationName = corporationName;
            this.currency = currency;
            this.moneyPrecision = moneyPrecision;
            this.personalDataProcessingSettings = personalDataProcessingSettings;
            this.addressShowTypeSettings = addressShowTypeSettings;
            this.jurPersonName = jurPersonName;
            this.jurPersonAddress = jurPersonAddress;
            this.jurPersonDetailedAddress = jurPersonDetailedAddress;
            this.jurPersonInn = jurPersonInn;
            this.jurPersonLeader = jurPersonLeader;
            this.jurPersonAccountant = jurPersonAccountant;
            this.jurPersonTechnologist = jurPersonTechnologist;
            this.jurPersonAccountingReasonCode = jurPersonAccountingReasonCode;
            this.jurPersonBusinessClassificationCode = jurPersonBusinessClassificationCode;
            this.jurPersonEconomicActivityClassificationCode = jurPersonEconomicActivityClassificationCode;
            this.jurPersonBank = jurPersonBank;
            this.jurPersonSettlementAccount = jurPersonSettlementAccount;
            this.jurPersonBik = jurPersonBik;
            this.jurPersonCorrespondentAccount = jurPersonCorrespondentAccount;
            this.jurPersonPhone = jurPersonPhone;
            this.jurPersonIban = jurPersonIban;
            this.jurPersonSwiftBic = jurPersonSwiftBic;
            this.jurPersonRegistrationNumber = jurPersonRegistrationNumber;
            this.departmentName = departmentName;
            this.departmentAddress = departmentAddress;
            this.departmentId = departmentId;
            this.departmentVatAccumulator = departmentVatAccumulator;
            this.departmentCode = departmentCode;
            this.roundCostForGuests = roundCostForGuests;
            this.roundPricePerUnitForGuests = roundPricePerUnitForGuests;
        }
        public Guid? CorporationId
        {
            get { return corporationId; }
            set { corporationId = value; }
        }

        public string CorporationName
        {
            get { return corporationName; }
            set { corporationName = value; }
        }

        public Currency Currency
        {
            get { return currency; }
            set { currency = value; }
        }

        public int MoneyPrecision
        {
            get { return moneyPrecision; }
            set { moneyPrecision = value; }
        }

        public Dictionary<int, string> CourseCustomNames
        {
            get { return courseCustomNames; }
            set { courseCustomNames = value; }
        }

        public PersonalDataProcessingSettings PersonalDataProcessingSettings
        {
            get { return personalDataProcessingSettings; }
            set { personalDataProcessingSettings = value; }
        }

        public AddressShowTypeSettings AddressShowTypeSettings
        {
            get { return addressShowTypeSettings; }
            set { addressShowTypeSettings = value; }
        }

        public string JurPersonName
        {
            get { return jurPersonName; }
            set { jurPersonName = value; }
        }

        public string JurPersonAddress
        {
            get { return jurPersonAddress; }
            set { jurPersonAddress = value; }
        }

        public LegalAddress JurPersonDetailedAddress
        {
            get { return jurPersonDetailedAddress; }
            set { jurPersonDetailedAddress = value; }
        }

        public string JurPersonInn
        {
            get { return jurPersonInn; }
            set { jurPersonInn = value; }
        }

        public string JurPersonLeader
        {
            get { return jurPersonLeader; }
            set { jurPersonLeader = value; }
        }

        public string JurPersonAccountant
        {
            get { return jurPersonAccountant; }
            set { jurPersonAccountant = value; }
        }

        public string JurPersonTechnologist
        {
            get { return jurPersonTechnologist; }
            set { jurPersonTechnologist = value; }
        }

        public string JurPersonAccountingReasonCode
        {
            get { return jurPersonAccountingReasonCode; }
            set { jurPersonAccountingReasonCode = value; }
        }

        public string JurPersonBusinessClassificationCode
        {
            get { return jurPersonBusinessClassificationCode; }
            set { jurPersonBusinessClassificationCode = value; }
        }

        public string JurPersonEconomicActivityClassificationCode
        {
            get { return jurPersonEconomicActivityClassificationCode; }
            set { jurPersonEconomicActivityClassificationCode = value; }
        }

        public string JurPersonBank
        {
            get { return jurPersonBank; }
            set { jurPersonBank = value; }
        }

        public string JurPersonSettlementAccount
        {
            get { return jurPersonSettlementAccount; }
            set { jurPersonSettlementAccount = value; }
        }

        public string JurPersonBik
        {
            get { return jurPersonBik; }
            set { jurPersonBik = value; }
        }

        public string JurPersonCorrespondentAccount
        {
            get { return jurPersonCorrespondentAccount; }
            set { jurPersonCorrespondentAccount = value; }
        }

        public string JurPersonPhone
        {
            get { return jurPersonPhone; }
            set { jurPersonPhone = value; }
        }

        public string JurPersonIban
        {
            get { return jurPersonIban; }
            set { jurPersonIban = value; }
        }

        public string JurPersonSwiftBic
        {
            get { return jurPersonSwiftBic; }
            set { jurPersonSwiftBic = value; }
        }

        public string JurPersonRegistrationNumber
        {
            get { return jurPersonRegistrationNumber; }
            set { jurPersonRegistrationNumber = value; }
        }

        public string DepartmentName
        {
            get { return departmentName; }
            set { departmentName = value; }
        }

        public string DepartmentAddress
        {
            get { return departmentAddress; }
            set { departmentAddress = value; }
        }

        public Guid? DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        public Guid? DepartmentVatAccumulator
        {
            get { return departmentVatAccumulator; }
            set { departmentVatAccumulator = value; }
        }

        public string DepartmentCode
        {
            get { return departmentCode; }
            set { departmentCode = value; }
        }

        public bool RoundCostForGuests
        {
            get { return roundCostForGuests; }
            set { roundCostForGuests = value; }
        }

        public bool RoundPricePerUnitForGuests
        {
            get { return roundPricePerUnitForGuests; }
            set { roundPricePerUnitForGuests = value; }
        }

    }

    [DataClass("JurPerson")]
    public partial class JurPerson : CorporatedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string inn = "";
        private string accountingReasonCode;
        private string businessClassificationCode;
        private string economicActivityClassificationCode;
        private string iban;
        private string swiftBic;
        private string registrationNumber;
        private string address;
        private LegalAddress detailedAddress;
        private string settlementAccount;
        private string bik;
        private string bank;
        private string bankCity;
        private string correspondentAccount;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Conception> conceptions = new List<Conception>();
        private Account bankStatementAccountIn;
        private Account bankStatementAccountOut;
        private string fsrarId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<OfficialEmployeeRole, OfficialEmployee> officialEmployees = new Dictionary<OfficialEmployeeRole, OfficialEmployee>();
        private string phone;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public JurPerson() {}

        public JurPerson(Guid id, string description, string name, CorporatedEntity parent, string inn, string address, string settlementAccount, string bik, string bank, string correspondentAccount)
            : base(id, description, name, parent)
        {
            this.inn = inn;
            this.address = address;
            this.settlementAccount = settlementAccount;
            this.bik = bik;
            this.bank = bank;
            this.correspondentAccount = correspondentAccount;
        }

        public JurPerson(Guid id, string inn)
            : base(id)
        {
            this.inn = inn;
        }

        [NotNull]
        public string Inn
        {
            get { return inn; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  inn = value;
            }
        }

        [CanBeNull]
        public string AccountingReasonCode
        {
            get { return accountingReasonCode; }
            set { accountingReasonCode = value; }
        }

        [CanBeNull]
        public string BusinessClassificationCode
        {
            get { return businessClassificationCode; }
            set { businessClassificationCode = value; }
        }

        [CanBeNull]
        public string EconomicActivityClassificationCode
        {
            get { return economicActivityClassificationCode; }
            set { economicActivityClassificationCode = value; }
        }

        [CanBeNull]
        public string Iban
        {
            get { return iban; }
            set { iban = value; }
        }

        [CanBeNull]
        public string SwiftBic
        {
            get { return swiftBic; }
            set { swiftBic = value; }
        }

        [CanBeNull]
        public string RegistrationNumber
        {
            get { return registrationNumber; }
            set { registrationNumber = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        [CanBeNull]
        public LegalAddress DetailedAddress
        {
            get { return detailedAddress; }
            set { detailedAddress = value; }
        }

        public string SettlementAccount
        {
            get { return settlementAccount; }
            set { settlementAccount = value; }
        }

        public string Bik
        {
            get { return bik; }
            set { bik = value; }
        }

        public string Bank
        {
            get { return bank; }
            set { bank = value; }
        }

        [CanBeNull]
        public string BankCity
        {
            get { return bankCity; }
            set { bankCity = value; }
        }

        public string CorrespondentAccount
        {
            get { return correspondentAccount; }
            set { correspondentAccount = value; }
        }

        [NotNull]
        public List<Conception> Conceptions
        {
            get { return conceptions; }
        }

        [CanBeNull]
        public Account BankStatementAccountIn
        {
            get { return bankStatementAccountIn; }
            set { bankStatementAccountIn = value; }
        }

        [CanBeNull]
        public Account BankStatementAccountOut
        {
            get { return bankStatementAccountOut; }
            set { bankStatementAccountOut = value; }
        }

        [CanBeNull]
        public string FsrarId
        {
            get { return fsrarId; }
            set { fsrarId = value; }
        }

        [NotNull]
        public Dictionary<OfficialEmployeeRole, OfficialEmployee> OfficialEmployees
        {
            get { return officialEmployees; }
        }

        [CanBeNull]
        public string Phone
        {
            get { return phone; }
            set { phone = value; }
        }

    }

    [DataClass("LegalAddress")]
    public partial class LegalAddress
    {
        private string zipCode;
        private string country;
        private string region;
        private string district;
        private string city;
        private string community;
        private string street;
        private string house;
        private string building;
        private string office;

        protected LegalAddress() {}

        public LegalAddress(string zipCode, string country, string region, string district, string city, string community, string street, string house, string building, string office)
        {
            this.zipCode = zipCode;
            this.country = country;
            this.region = region;
            this.district = district;
            this.city = city;
            this.community = community;
            this.street = street;
            this.house = house;
            this.building = building;
            this.office = office;
        }
        public string ZipCode
        {
            get { return zipCode; }
            set { zipCode = value; }
        }

        public string Country
        {
            get { return country; }
            set { country = value; }
        }

        public string Region
        {
            get { return region; }
            set { region = value; }
        }

        public string District
        {
            get { return district; }
            set { district = value; }
        }

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        public string Community
        {
            get { return community; }
            set { community = value; }
        }

        public string Street
        {
            get { return street; }
            set { street = value; }
        }

        public string House
        {
            get { return house; }
            set { house = value; }
        }

        public string Building
        {
            get { return building; }
            set { building = value; }
        }

        public string Office
        {
            get { return office; }
            set { office = value; }
        }

    }

    [DataClass("Manufacture")]
    public partial class Manufacture : DepartmentEntity
    {

        protected Manufacture() {}

        public Manufacture(Guid id, string description, string name, CorporatedEntity parent, string shortName, string departmentId, string address, string category1, string category2, string category3, string category4, string category5, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod, BusinessDateSettings businessDateSettings, OperationalDaySettings operationalDaySettings)
            : base(id, description, name, parent, shortName, departmentId, address, category1, category2, category3, category4, category5, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod, businessDateSettings, operationalDaySettings)
        {

        }

        public Manufacture(Guid id, DistributionAlgorithmType defaultDistributionAlgorithm, VerificationActAccountsFilter verificationActAccountsFilter, AccountingMethod accountingMethod)
            : base(id, defaultDistributionAlgorithm, verificationActAccountsFilter, accountingMethod)
        {

        }

    }

    [DataClass("OfficialEmployee")]
    public partial class OfficialEmployee
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private SavedImageInfo signatureImage;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public OfficialEmployee() {}

        public OfficialEmployee(string name)
        {
            this.name = name;
        }
        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        [CanBeNull]
        public SavedImageInfo SignatureImage
        {
            get { return signatureImage; }
            set { signatureImage = value; }
        }

    }

    [DataClass("OfficialEmployeeRole")]
    public enum OfficialEmployeeRole
    {
        ACCOUNTANT,
        LEADER,
        TECHNOLOGIST,
        WORKS_MANAGER
    }

    [DataClass("OrgDevelopment")]
    public partial class OrgDevelopment : CorporatedEntity
    {

        protected OrgDevelopment() {}

        public OrgDevelopment(Guid id, string description, string name, CorporatedEntity parent)
            : base(id, description, name, parent)
        {

        }

        public OrgDevelopment(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("PersonalDataProcessingSettings")]
    public partial class PersonalDataProcessingSettings
    {
        private bool isPdpConsentRequired;
        private bool newCustomersConsentToAllByDefault;
        [NotNull, NotNullField]
        private CustomerDataTransferType customerDataTransferType;
        private int consentPeriodDays;
        private int processingPeriodDays;
        private int anonymizePeriodDays;
        private int customerUpdateBatchSize;

        protected PersonalDataProcessingSettings() {}

        public PersonalDataProcessingSettings(bool isPdpConsentRequired, bool newCustomersConsentToAllByDefault, CustomerDataTransferType customerDataTransferType, int consentPeriodDays, int processingPeriodDays, int anonymizePeriodDays, int customerUpdateBatchSize)
        {
            this.isPdpConsentRequired = isPdpConsentRequired;
            this.newCustomersConsentToAllByDefault = newCustomersConsentToAllByDefault;
            this.customerDataTransferType = customerDataTransferType;
            this.consentPeriodDays = consentPeriodDays;
            this.processingPeriodDays = processingPeriodDays;
            this.anonymizePeriodDays = anonymizePeriodDays;
            this.customerUpdateBatchSize = customerUpdateBatchSize;
        }

        public PersonalDataProcessingSettings(bool isPdpConsentRequired, bool newCustomersConsentToAllByDefault, CustomerDataTransferType customerDataTransferType)
        {
            this.isPdpConsentRequired = isPdpConsentRequired;
            this.newCustomersConsentToAllByDefault = newCustomersConsentToAllByDefault;
            this.customerDataTransferType = customerDataTransferType;
        }

        public bool IsPdpConsentRequired
        {
            get { return isPdpConsentRequired; }
            set { isPdpConsentRequired = value; }
        }

        public bool NewCustomersConsentToAllByDefault
        {
            get { return newCustomersConsentToAllByDefault; }
            set { newCustomersConsentToAllByDefault = value; }
        }

        [NotNull]
        public CustomerDataTransferType CustomerDataTransferType
        {
            get { return customerDataTransferType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  customerDataTransferType = value;
            }
        }

        public int ConsentPeriodDays
        {
            get { return consentPeriodDays; }
            set { consentPeriodDays = value; }
        }

        public int ProcessingPeriodDays
        {
            get { return processingPeriodDays; }
            set { processingPeriodDays = value; }
        }

        public int AnonymizePeriodDays
        {
            get { return anonymizePeriodDays; }
            set { anonymizePeriodDays = value; }
        }

        public int CustomerUpdateBatchSize
        {
            get { return customerUpdateBatchSize; }
            set { customerUpdateBatchSize = value; }
        }

    }

    [DataClass("SalePoint")]
    public partial class SalePoint : CorporatedEntity
    {
        private string salePointId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<CookingPlaceType> cookingPlaceTypes = new List<CookingPlaceType>();

        protected SalePoint() {}

        public SalePoint(Guid id, string description, string name, CorporatedEntity parent, string salePointId)
            : base(id, description, name, parent)
        {
            this.salePointId = salePointId;
        }

        public SalePoint(Guid id)
            : base(id)
        {

        }

        public string SalePointId
        {
            get { return salePointId; }
            set { salePointId = value; }
        }

        [NotNull]
        public List<CookingPlaceType> CookingPlaceTypes
        {
            get { return cookingPlaceTypes; }
        }

    }

    [DataClass("SimpleDepartmentableEntity")]
    public abstract partial class SimpleDepartmentableEntity : CachedEntity
    {

        protected SimpleDepartmentableEntity() {}

        protected SimpleDepartmentableEntity(Guid id)
            : base(id)
        {

        }
    }

    [DataClass("StoreAccountingSettings")]
    public partial class StoreAccountingSettings
    {
        private TaxCategory defaultTaxCategory;


        [CanBeNull]
        public TaxCategory DefaultTaxCategory
        {
            get { return defaultTaxCategory; }
            set { defaultTaxCategory = value; }
        }

    }

    [DataClass("CorporationSettingsRequest")]
    public partial class CorporationSettingsRequest
    {
        private Dictionary<Guid, Dictionary<OfficialEmployeeRole, ImageChangeRequest>> jurPersonsImageChanges;
        private ImageChangeRequest corporationIcon;
        private ImageChangeRequest corporationBackgroundImage;
        private List<ByValue<CorporatedEntity>> entities;
        private List<StoreInfo> stores;
        private Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap;
        private List<ByValue<CookingPlaceType>> cookingPlaceTypes;
        private List<ByValue<ReplicationConfig>> replicationsConfigs;
        private ICollection<DepartmentPeriodCloseTask> periodCloseTasksToSchedule;
        private ICollection<Guid> periodCloseTasksToRemove;
        private ICollection<ByValue<DocumentNumberingSettings>> documentNumberingSettings;
        private ICollection<DocumentNumberingAutoincrementValues> documentNumberingAutoincrementValues;
        private ByValue<NotificationConfiguration> notificationConfiguration;
        private List<Guid> budgetAccountsToDisableId;
        private ByValue<SalarySettings> salarySettings;
        private bool? incomingInvoiceIsInvoiceRequired;
        private Account defaultInvoiceRevenueAccount;
        private Account defaultInvoiceAccountTo;
        private DistributionAlgorithmType defaultDistributionAlgorithm;
        private VatAccounting vatAccounting;

        protected CorporationSettingsRequest() {}

        public CorporationSettingsRequest(ImageChangeRequest corporationIcon, ImageChangeRequest corporationBackgroundImage, ByValue<NotificationConfiguration> notificationConfiguration, ByValue<SalarySettings> salarySettings, bool? incomingInvoiceIsInvoiceRequired, Account defaultInvoiceRevenueAccount, Account defaultInvoiceAccountTo, DistributionAlgorithmType defaultDistributionAlgorithm, VatAccounting vatAccounting)
        {
            this.corporationIcon = corporationIcon;
            this.corporationBackgroundImage = corporationBackgroundImage;
            this.notificationConfiguration = notificationConfiguration;
            this.salarySettings = salarySettings;
            this.incomingInvoiceIsInvoiceRequired = incomingInvoiceIsInvoiceRequired;
            this.defaultInvoiceRevenueAccount = defaultInvoiceRevenueAccount;
            this.defaultInvoiceAccountTo = defaultInvoiceAccountTo;
            this.defaultDistributionAlgorithm = defaultDistributionAlgorithm;
            this.vatAccounting = vatAccounting;
        }
        public Dictionary<Guid, Dictionary<OfficialEmployeeRole, ImageChangeRequest>> JurPersonsImageChanges
        {
            get { return jurPersonsImageChanges; }
            set { jurPersonsImageChanges = value; }
        }

        public ImageChangeRequest CorporationIcon
        {
            get { return corporationIcon; }
            set { corporationIcon = value; }
        }

        public ImageChangeRequest CorporationBackgroundImage
        {
            get { return corporationBackgroundImage; }
            set { corporationBackgroundImage = value; }
        }

        public List<ByValue<CorporatedEntity>> Entities
        {
            get { return entities; }
            set { entities = value; }
        }

        public List<StoreInfo> Stores
        {
            get { return stores; }
            set { stores = value; }
        }

        public Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> CookingMap
        {
            get { return cookingMap; }
            set { cookingMap = value; }
        }

        public List<ByValue<CookingPlaceType>> CookingPlaceTypes
        {
            get { return cookingPlaceTypes; }
            set { cookingPlaceTypes = value; }
        }

        public List<ByValue<ReplicationConfig>> ReplicationsConfigs
        {
            get { return replicationsConfigs; }
            set { replicationsConfigs = value; }
        }

        public ICollection<DepartmentPeriodCloseTask> PeriodCloseTasksToSchedule
        {
            get { return periodCloseTasksToSchedule; }
            set { periodCloseTasksToSchedule = value; }
        }

        public ICollection<Guid> PeriodCloseTasksToRemove
        {
            get { return periodCloseTasksToRemove; }
            set { periodCloseTasksToRemove = value; }
        }

        public ICollection<ByValue<DocumentNumberingSettings>> DocumentNumberingSettings
        {
            get { return documentNumberingSettings; }
            set { documentNumberingSettings = value; }
        }

        public ICollection<DocumentNumberingAutoincrementValues> DocumentNumberingAutoincrementValues
        {
            get { return documentNumberingAutoincrementValues; }
            set { documentNumberingAutoincrementValues = value; }
        }

        public ByValue<NotificationConfiguration> NotificationConfiguration
        {
            get { return notificationConfiguration; }
            set { notificationConfiguration = value; }
        }

        public List<Guid> BudgetAccountsToDisableId
        {
            get { return budgetAccountsToDisableId; }
            set { budgetAccountsToDisableId = value; }
        }

        public ByValue<SalarySettings> SalarySettings
        {
            get { return salarySettings; }
            set { salarySettings = value; }
        }

        public bool? IncomingInvoiceIsInvoiceRequired
        {
            get { return incomingInvoiceIsInvoiceRequired; }
            set { incomingInvoiceIsInvoiceRequired = value; }
        }

        public Account DefaultInvoiceRevenueAccount
        {
            get { return defaultInvoiceRevenueAccount; }
            set { defaultInvoiceRevenueAccount = value; }
        }

        public Account DefaultInvoiceAccountTo
        {
            get { return defaultInvoiceAccountTo; }
            set { defaultInvoiceAccountTo = value; }
        }

        public DistributionAlgorithmType DefaultDistributionAlgorithm
        {
            get { return defaultDistributionAlgorithm; }
            set { defaultDistributionAlgorithm = value; }
        }

        public VatAccounting VatAccounting
        {
            get { return vatAccounting; }
            set { vatAccounting = value; }
        }

    }

    [DataClass("ImageChangeRequest")]
    public partial class ImageChangeRequest
    {
        private bool isDeleted;
        private string newImage;

        protected ImageChangeRequest() {}

        public ImageChangeRequest(bool isDeleted, string newImage)
        {
            this.isDeleted = isDeleted;
            this.newImage = newImage;
        }
        public bool IsDeleted
        {
            get { return isDeleted; }
            set { isDeleted = value; }
        }

        public string NewImage
        {
            get { return newImage; }
            set { newImage = value; }
        }

    }

    [DataClass("MenuChangeDocumentListRecord")]
    public partial class MenuChangeDocumentListRecord : AbstractDocumentListRecord
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DepartmentEntity> departments = new HashSet<DepartmentEntity>();
        private DateTime? dateTo;
        private string scheduleName;

        protected MenuChangeDocumentListRecord() {}

        public MenuChangeDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, DateTime? dateTo, string scheduleName)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary)
        {
            this.dateTo = dateTo;
            this.scheduleName = scheduleName;
        }
        [NotNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public string ScheduleName
        {
            get { return scheduleName; }
            set { scheduleName = value; }
        }

    }

    [DataClass("MenuChangeField")]
    public partial class MenuChangeField
    {
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        private bool included;
        private decimal? price;

        protected MenuChangeField() {}

        public MenuChangeField(Product product, ProductSize productSize, DepartmentEntity department, bool included, decimal? price)
        {
            this.product = product;
            this.productSize = productSize;
            this.department = department;
            this.included = included;
            this.price = price;
        }

        public MenuChangeField(Product product, DepartmentEntity department)
        {
            this.product = product;
            this.department = department;
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        public bool Included
        {
            get { return included; }
            set { included = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

    }

    [DataClass("MenuOrder")]
    public partial class MenuOrder
    {
        private MenuOrderType type;
        private DepartmentEntity department;

        protected MenuOrder() {}

        public MenuOrder(MenuOrderType type, DepartmentEntity department)
        {
            this.type = type;
            this.department = department;
        }
        public MenuOrderType Type
        {
            get { return type; }
            set { type = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("MenuOrderItem")]
    public partial class MenuOrderItem
    {
        private Product product;
        private ProductSize productSize;
        private decimal? price;

        protected MenuOrderItem() {}

        public MenuOrderItem(Product product, ProductSize productSize, decimal? price)
        {
            this.product = product;
            this.productSize = productSize;
            this.price = price;
        }
        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

    }

    [DataClass("MenuOrderType")]
    [EnumClass]
    public partial class MenuOrderType : LocalizableName<MenuOrderType>
    {
        /// <summary> Измененные. </summary>
        public static readonly MenuOrderType CHANGED = new MenuOrderType("CHANGED");
        /// <summary> Добавленные. </summary>
        public static readonly MenuOrderType ADDED = new MenuOrderType("ADDED");
        /// <summary> Удаленные. </summary>
        public static readonly MenuOrderType DELETED = new MenuOrderType("DELETED");

        private readonly string __value;
        private readonly string __nameResId;

        private MenuOrderType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "MENUORDERTYPE_NAME_" + __value;
        }

        public static MenuOrderType Parse(string value)
        {
            switch(value)
            {
                case "CHANGED": return CHANGED;
                case "ADDED": return ADDED;
                case "DELETED": return DELETED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static MenuOrderType[] VALUES
        {
            get
            {
                return new []
                {
                    CHANGED, 
                    ADDED, 
                    DELETED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("MenuTemplate")]
    public partial class MenuTemplate : PersistedEntity
    {
        private string name;
        private string comment;
        private DiscountPeriod periodSchedule;
        private List<MenuTemplateItem> priceTable;
        private User userCreated;
        private User userModified;
        private Guid? franchiseUniqueId;
        private Guid? franchiseMasterId;

        protected MenuTemplate() {}

        public MenuTemplate(Guid id, string name, string comment)
            : base(id)
        {
            this.name = name;
            this.comment = comment;
        }

        public MenuTemplate(Guid id)
            : base(id)
        {

        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public DiscountPeriod PeriodSchedule
        {
            get { return periodSchedule; }
            set { periodSchedule = value; }
        }

        public List<MenuTemplateItem> PriceTable
        {
            get { return priceTable; }
            set { priceTable = value; }
        }

        [CanBeNull]
        public User UserCreated
        {
            get { return userCreated; }
            set { userCreated = value; }
        }

        [CanBeNull]
        public User UserModified
        {
            get { return userModified; }
            set { userModified = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("MenuTemplateItem")]
    public partial class MenuTemplateItem
    {
        private int num;
        private Product product;
        private ProductSize productSize;
        private decimal? priceForBaseCategory;
        private Dictionary<ClientPriceCategory, decimal> pricesForCategories;

        public MenuTemplateItem() {}

        public MenuTemplateItem(int num, Product product, ProductSize productSize, decimal? priceForBaseCategory)
        {
            this.num = num;
            this.product = product;
            this.productSize = productSize;
            this.priceForBaseCategory = priceForBaseCategory;
        }
        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public decimal? PriceForBaseCategory
        {
            get { return priceForBaseCategory; }
            set { priceForBaseCategory = value; }
        }

        public Dictionary<ClientPriceCategory, decimal> PricesForCategories
        {
            get { return pricesForCategories; }
            set { pricesForCategories = value; }
        }

    }

    [DataClass("PriceListItem")]
    public partial class PriceListItem : DocumentBasedTimeTableItem, WithProductSize
    {
        private DateTime dateToLimit;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;
        private Guid? scheduledDocument;
        private PeriodScheduleInfo schedule;
        private decimal? price;
        private bool included;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ClientPriceCategory, decimal> pricesForCategories = new Dictionary<ClientPriceCategory, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ClientPriceCategory, bool> includeForCategories = new Dictionary<ClientPriceCategory, bool>();
        [NotNull, NotNullField]
        private CachedSwitchable<TaxCategory> taxCategory;
        [HasDefaultValue]
        private bool? isDishOfDay = false;
        [HasDefaultValue]
        private bool? isFlyerProgram = false;

        protected PriceListItem() {}

        public PriceListItem(Guid id, DateTime? dateFrom, DateTime? dateTo, Guid documentId, string documentNumber, DateTime dateToLimit, DepartmentEntity department, Product product, ProductSize productSize, decimal? price, bool included, CachedSwitchable<TaxCategory> taxCategory)
            : base(id, dateFrom, dateTo, documentId, documentNumber)
        {
            this.dateToLimit = dateToLimit;
            this.department = department;
            this.product = product;
            this.productSize = productSize;
            this.price = price;
            this.included = included;
            this.taxCategory = taxCategory;
        }

        public PriceListItem(Guid id, Guid documentId, string documentNumber, DateTime dateToLimit, DepartmentEntity department, Product product, CachedSwitchable<TaxCategory> taxCategory)
            : base(id, documentId, documentNumber)
        {
            this.dateToLimit = dateToLimit;
            this.department = department;
            this.product = product;
            this.taxCategory = taxCategory;
        }

        public DateTime DateToLimit
        {
            get { return dateToLimit; }
            set { dateToLimit = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public Guid? ScheduledDocument
        {
            get { return scheduledDocument; }
            set { scheduledDocument = value; }
        }

        [CanBeNull]
        public PeriodScheduleInfo Schedule
        {
            get { return schedule; }
            set { schedule = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public bool Included
        {
            get { return included; }
            set { included = value; }
        }

        [NotNull]
        public Dictionary<ClientPriceCategory, decimal> PricesForCategories
        {
            get { return pricesForCategories; }
        }

        [NotNull]
        public Dictionary<ClientPriceCategory, bool> IncludeForCategories
        {
            get { return includeForCategories; }
        }

        [NotNull]
        public CachedSwitchable<TaxCategory> TaxCategory
        {
            get { return taxCategory; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxCategory = value;
            }
        }

        public bool? IsDishOfDay
        {
            get { return isDishOfDay; }
            set { isDishOfDay = value; }
        }

        public bool? IsFlyerProgram
        {
            get { return isFlyerProgram; }
            set { isFlyerProgram = value; }
        }

    }

    [DataClass("PriceListItemKey")]
    public partial class PriceListItemKey : ProductAwareKey, WithProductSize
    {
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;
        private Guid? scheduledDocumentId;

        protected PriceListItemKey() {}

        public PriceListItemKey(DepartmentEntity department, Product product, ProductSize productSize, Guid? scheduledDocumentId)
        {
            this.department = department;
            this.product = product;
            this.productSize = productSize;
            this.scheduledDocumentId = scheduledDocumentId;
        }

        public PriceListItemKey(DepartmentEntity department, Product product)
        {
            this.department = department;
            this.product = product;
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
        }

        public Guid? ScheduledDocumentId
        {
            get { return scheduledDocumentId; }
        }

    }

    [DataClass("RoundMode")]
    [EnumClass]
    public partial class RoundMode : LocalizableName<RoundMode>
    {
        /// <summary> До большего целого. </summary>
        public static readonly RoundMode UP = new RoundMode("UP", 0);
        /// <summary> До меньшего целого. </summary>
        public static readonly RoundMode DOWN = new RoundMode("DOWN", 1);
        /// <summary> До ближайшего целого. </summary>
        public static readonly RoundMode MATH = new RoundMode("MATH", 4);

        private readonly int bigDecimalRoundMode;
        private readonly string __value;
        private readonly string __nameResId;

        private RoundMode(string __value, int bigDecimalRoundMode)
        {
            this.__value = __value;
            this.__nameResId = "ROUNDMODE_NAME_" + __value;
            this.bigDecimalRoundMode = bigDecimalRoundMode;
        }

        public static RoundMode Parse(string value)
        {
            switch(value)
            {
                case "UP": return UP;
                case "DOWN": return DOWN;
                case "MATH": return MATH;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RoundMode[] VALUES
        {
            get
            {
                return new []
                {
                    UP, 
                    DOWN, 
                    MATH
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int BigDecimalRoundMode
        {
            get { return bigDecimalRoundMode; }
        }

    }

    [DataClass("RoundRule")]
    public partial class RoundRule
    {
        [NotNull, NotNullField]
        private RoundMode roundMode;
        [HasDefaultValue]
        private decimal precision = 0;

        protected RoundRule() {}

        public RoundRule(RoundMode roundMode, decimal precision)
        {
            this.roundMode = roundMode;
            this.precision = precision;
        }
        [NotNull]
        public RoundMode RoundMode
        {
            get { return roundMode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  roundMode = value;
            }
        }

        public decimal Precision
        {
            get { return precision; }
            set { precision = value; }
        }

    }

    [DataClass("TreeMenuChangeDocument")]
    public partial class TreeMenuChangeDocument : ProcessableDocument
    {
        private string shortName;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<TreeMenuChangeDocumentItem> items = new List<TreeMenuChangeDocumentItem>();
        [HasDefaultValue]
        private bool? deletePreviousMenu = false;
        private PeriodScheduleInfo schedule;
        private DateTime dateTo;

        protected TreeMenuChangeDocument() {}

        public TreeMenuChangeDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, DateTime dateTo)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.dateTo = dateTo;
        }

        public TreeMenuChangeDocument(Guid id, DateTime dateIncoming, string documentNumber, DateTime dateTo)
            : base(id, dateIncoming, documentNumber)
        {
            this.dateTo = dateTo;
        }

        [CanBeNull]
        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        [NotNull]
        public List<TreeMenuChangeDocumentItem> Items
        {
            get { return items; }
        }

        public bool? DeletePreviousMenu
        {
            get { return deletePreviousMenu; }
            set { deletePreviousMenu = value; }
        }

        [CanBeNull]
        public PeriodScheduleInfo Schedule
        {
            get { return schedule; }
            set { schedule = value; }
        }

        public DateTime DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [DataClass("TreeMenuChangeDocumentItem")]
    public partial class TreeMenuChangeDocumentItem : Entity, WithProductSize
    {
        [NotNull, NotNullField]
        private TreeMenuChangeDocument document;
        private int num;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DepartmentEntity> departments = new HashSet<DepartmentEntity>();
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;
        private bool including;
        private decimal? newPrice;
        [NotNull, NotNullField]
        private CachedSwitchable<TaxCategory> taxCategory;
        private CookingPlaceType cookingPlaceType;
        [HasDefaultValue]
        private bool? isDishOfDay = false;
        [HasDefaultValue]
        private bool? isFlyerProgram = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ClientPriceCategory, decimal> pricesForCategories = new Dictionary<ClientPriceCategory, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ClientPriceCategory, bool> includeForCategories = new Dictionary<ClientPriceCategory, bool>();
        private Guid? containerId;

        protected TreeMenuChangeDocumentItem() {}

        public TreeMenuChangeDocumentItem(Guid id, TreeMenuChangeDocument document, int num, Product product, ProductSize productSize, bool including, decimal? newPrice, CachedSwitchable<TaxCategory> taxCategory, CookingPlaceType cookingPlaceType)
            : base(id)
        {
            this.document = document;
            this.num = num;
            this.product = product;
            this.productSize = productSize;
            this.including = including;
            this.newPrice = newPrice;
            this.taxCategory = taxCategory;
            this.cookingPlaceType = cookingPlaceType;
        }

        public TreeMenuChangeDocumentItem(Guid id, TreeMenuChangeDocument document, Product product, CachedSwitchable<TaxCategory> taxCategory)
            : base(id)
        {
            this.document = document;
            this.product = product;
            this.taxCategory = taxCategory;
        }

        [NotNull]
        public TreeMenuChangeDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        [NotNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public bool Including
        {
            get { return including; }
            set { including = value; }
        }

        public decimal? NewPrice
        {
            get { return newPrice; }
            set { newPrice = value; }
        }

        [NotNull]
        public CachedSwitchable<TaxCategory> TaxCategory
        {
            get { return taxCategory; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxCategory = value;
            }
        }

        public CookingPlaceType CookingPlaceType
        {
            get { return cookingPlaceType; }
            set { cookingPlaceType = value; }
        }

        public bool? IsDishOfDay
        {
            get { return isDishOfDay; }
            set { isDishOfDay = value; }
        }

        public bool? IsFlyerProgram
        {
            get { return isFlyerProgram; }
            set { isFlyerProgram = value; }
        }

        [NotNull]
        public Dictionary<ClientPriceCategory, decimal> PricesForCategories
        {
            get { return pricesForCategories; }
        }

        [NotNull]
        public Dictionary<ClientPriceCategory, bool> IncludeForCategories
        {
            get { return includeForCategories; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

    }

    [DataClass("DocumentBasedTimeTableItem")]
    public abstract partial class DocumentBasedTimeTableItem : AbstractKeyedTimeTableItem
    {
        private Guid documentId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";

        protected DocumentBasedTimeTableItem() {}

        protected DocumentBasedTimeTableItem(Guid id, DateTime? dateFrom, DateTime? dateTo, Guid documentId, string documentNumber)
            : base(id, dateFrom, dateTo)
        {
            this.documentId = documentId;
            this.documentNumber = documentNumber;
        }

        protected DocumentBasedTimeTableItem(Guid id, Guid documentId, string documentNumber)
            : base(id)
        {
            this.documentId = documentId;
            this.documentNumber = documentNumber;
        }

        public Guid DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

    }

    [DataClass("PriceListDto")]
    public partial class PriceListDto : TreeMenuChangeDocumentHeaderDto
    {
        private Dictionary<PriceListItemKeyDto, PriceListItemDto> items;

        protected PriceListDto() {}

        public PriceListDto(Guid? id, string documentNumber, string shortName)
            : base(id, documentNumber, shortName)
        {

        }
        public Dictionary<PriceListItemKeyDto, PriceListItemDto> Items
        {
            get { return items; }
            set { items = value; }
        }

    }

    [DataClass("PriceListItemDto")]
    public partial class PriceListItemDto
    {
        private Guid id;
        private Guid? documentId;
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private decimal? price;
        private bool included;
        private Dictionary<Guid, decimal> pricesForCategories;
        private Dictionary<Guid, bool> includedForCategories;
        private CachedSwitchable<TaxCategory> taxCategory;
        [HasDefaultValue]
        private bool isFlyerProgram = false;

        protected PriceListItemDto() {}

        public PriceListItemDto(Guid id, Guid? documentId, decimal? price, bool included, CachedSwitchable<TaxCategory> taxCategory)
        {
            this.id = id;
            this.documentId = documentId;
            this.price = price;
            this.included = included;
            this.taxCategory = taxCategory;
        }

        public PriceListItemDto(Guid id)
        {
            this.id = id;
        }

        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public bool Included
        {
            get { return included; }
            set { included = value; }
        }

        public Dictionary<Guid, decimal> PricesForCategories
        {
            get { return pricesForCategories; }
            set { pricesForCategories = value; }
        }

        public Dictionary<Guid, bool> IncludedForCategories
        {
            get { return includedForCategories; }
            set { includedForCategories = value; }
        }

        public CachedSwitchable<TaxCategory> TaxCategory
        {
            get { return taxCategory; }
            set { taxCategory = value; }
        }

        public bool IsFlyerProgram
        {
            get { return isFlyerProgram; }
            set { isFlyerProgram = value; }
        }

    }

    [DataClass("PriceListItemKeyDto")]
    public partial class PriceListItemKeyDto
    {
        private Guid departmentId;
        private Guid productId;
        private Guid? productSizeId;
        private Guid? scheduledDocumentId;

        protected PriceListItemKeyDto() {}

        public PriceListItemKeyDto(Guid departmentId, Guid productId, Guid? productSizeId, Guid? scheduledDocumentId)
        {
            this.departmentId = departmentId;
            this.productId = productId;
            this.productSizeId = productSizeId;
            this.scheduledDocumentId = scheduledDocumentId;
        }

        public PriceListItemKeyDto(Guid departmentId, Guid productId)
        {
            this.departmentId = departmentId;
            this.productId = productId;
        }

        public Guid DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        public Guid ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public Guid? ProductSizeId
        {
            get { return productSizeId; }
            set { productSizeId = value; }
        }

        public Guid? ScheduledDocumentId
        {
            get { return scheduledDocumentId; }
            set { scheduledDocumentId = value; }
        }

    }

    [DataClass("PriceListUpdateDto")]
    public partial class PriceListUpdateDto
    {
        private int revisionTo;
        private DateTime? targetDay;
        private PriceListUpdateType updateType;
        private Dictionary<PriceListItemKey, PriceListItemDto> currentPrices;
        private Dictionary<PriceListItemKey, PriceListItemDto> expiredPrices;
        private Dictionary<PriceListItemKey, PriceListItemDto> nextPrices;
        private HashSet<Guid> deletedItemIds;
        private Dictionary<Guid, TreeMenuChangeDocumentHeaderDto> documents;

        protected PriceListUpdateDto() {}

        public PriceListUpdateDto(int revisionTo, DateTime? targetDay, PriceListUpdateType updateType)
        {
            this.revisionTo = revisionTo;
            this.targetDay = targetDay;
            this.updateType = updateType;
        }
        public int RevisionTo
        {
            get { return revisionTo; }
            set { revisionTo = value; }
        }

        public DateTime? TargetDay
        {
            get { return targetDay; }
            set { targetDay = value; }
        }

        public PriceListUpdateType UpdateType
        {
            get { return updateType; }
            set { updateType = value; }
        }

        public Dictionary<PriceListItemKey, PriceListItemDto> CurrentPrices
        {
            get { return currentPrices; }
            set { currentPrices = value; }
        }

        public Dictionary<PriceListItemKey, PriceListItemDto> ExpiredPrices
        {
            get { return expiredPrices; }
            set { expiredPrices = value; }
        }

        public Dictionary<PriceListItemKey, PriceListItemDto> NextPrices
        {
            get { return nextPrices; }
            set { nextPrices = value; }
        }

        public HashSet<Guid> DeletedItemIds
        {
            get { return deletedItemIds; }
            set { deletedItemIds = value; }
        }

        public Dictionary<Guid, TreeMenuChangeDocumentHeaderDto> Documents
        {
            get { return documents; }
            set { documents = value; }
        }

    }

    [DataClass("PriceListUpdateType")]
    public enum PriceListUpdateType
    {
        FULL,
        DIFF
    }

    [DataClass("TreeMenuChangeDocumentHeaderDto")]
    public partial class TreeMenuChangeDocumentHeaderDto
    {
        private Guid? id;
        private string documentNumber;
        private string shortName;
        private PeriodScheduleInfo schedule;
        private DateTime? dateFrom;
        private DateTime? dateTo;

        protected TreeMenuChangeDocumentHeaderDto() {}

        public TreeMenuChangeDocumentHeaderDto(Guid? id, string documentNumber, string shortName)
        {
            this.id = id;
            this.documentNumber = documentNumber;
            this.shortName = shortName;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        [CanBeNull]
        public PeriodScheduleInfo Schedule
        {
            get { return schedule; }
            set { schedule = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [RootEntity]
    [DataClass("SynchroEntity")]
    public partial class SynchroEntity : PersistedEntity
    {
        [NotNull, NotNullField]
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private SynchroEntityStatus status;
        private DateTime? lastSendDate;
        private DateTime? lastReceiveDate;
        private string lastSendError;
        private string lastReceiveError;
        [HasDefaultValue]
        private int revisionFrom = 0;
        [HasDefaultValue]
        private int revisionTo = 0;
        [HasDefaultValue]
        private int entitiesCount = 0;

        protected SynchroEntity() {}

        public SynchroEntity(Guid id, DepartmentEntity department, SynchroEntityStatus status, DateTime? lastSendDate, DateTime? lastReceiveDate)
            : base(id)
        {
            this.department = department;
            this.status = status;
            this.lastSendDate = lastSendDate;
            this.lastReceiveDate = lastReceiveDate;
        }

        public SynchroEntity(Guid id, DepartmentEntity department, SynchroEntityStatus status)
            : base(id)
        {
            this.department = department;
            this.status = status;
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        [NotNull]
        public SynchroEntityStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        public DateTime? LastSendDate
        {
            get { return lastSendDate; }
            set { lastSendDate = value; }
        }

        public DateTime? LastReceiveDate
        {
            get { return lastReceiveDate; }
            set { lastReceiveDate = value; }
        }

        [CanBeNull]
        public string LastSendError
        {
            get { return lastSendError; }
            set { lastSendError = value; }
        }

        [CanBeNull]
        public string LastReceiveError
        {
            get { return lastReceiveError; }
            set { lastReceiveError = value; }
        }

        public int RevisionFrom
        {
            get { return revisionFrom; }
            set { revisionFrom = value; }
        }

        public int RevisionTo
        {
            get { return revisionTo; }
            set { revisionTo = value; }
        }

        public int EntitiesCount
        {
            get { return entitiesCount; }
            set { entitiesCount = value; }
        }

    }

    [DataClass("SynchroEntityStatus")]
    [EnumClass]
    public partial class SynchroEntityStatus : LocalizableName<SynchroEntityStatus>
    {
        /// <summary> Нормальная работа. </summary>
        public static readonly SynchroEntityStatus SUCCESS = new SynchroEntityStatus("SUCCESS", 0);
        /// <summary> Есть ошибки. </summary>
        public static readonly SynchroEntityStatus FAILED = new SynchroEntityStatus("FAILED", 1);
        /// <summary> Пропущен запланированный обмен. </summary>
        public static readonly SynchroEntityStatus MISSED = new SynchroEntityStatus("MISSED", 0);
        /// <summary> Расписание не задано. </summary>
        public static readonly SynchroEntityStatus SCHEDULE_MISSED = new SynchroEntityStatus("SCHEDULE_MISSED", 0);
        /// <summary> Сервер отключен. </summary>
        public static readonly SynchroEntityStatus DISCONNECTED = new SynchroEntityStatus("DISCONNECTED", 0);
        /// <summary> Нет данных для отправки. </summary>
        public static readonly SynchroEntityStatus NODATA = new SynchroEntityStatus("NODATA", 0);
        /// <summary> Обмен запрошен. </summary>
        public static readonly SynchroEntityStatus FORCED = new SynchroEntityStatus("FORCED", 1);

        private readonly int priority;
        private readonly string __value;
        private readonly string __nameResId;

        private SynchroEntityStatus(string __value, int priority)
        {
            this.__value = __value;
            this.__nameResId = "SYNCHROENTITYSTATUS_NAME_" + __value;
            this.priority = priority;
        }

        public static SynchroEntityStatus Parse(string value)
        {
            switch(value)
            {
                case "SUCCESS": return SUCCESS;
                case "FAILED": return FAILED;
                case "MISSED": return MISSED;
                case "SCHEDULE_MISSED": return SCHEDULE_MISSED;
                case "DISCONNECTED": return DISCONNECTED;
                case "NODATA": return NODATA;
                case "FORCED": return FORCED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SynchroEntityStatus[] VALUES
        {
            get
            {
                return new []
                {
                    SUCCESS, 
                    FAILED, 
                    MISSED, 
                    SCHEDULE_MISSED, 
                    DISCONNECTED, 
                    NODATA, 
                    FORCED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Priority
        {
            get { return priority; }
        }

    }

    [DataClass("ConsolidatedOrder")]
    public partial class ConsolidatedOrder
    {
        private Store storeFrom;
        private Store storeTo;
        private Product product;
        private decimal? amount;
        private Guid? containerId;

        protected ConsolidatedOrder() {}

        public ConsolidatedOrder(Store storeFrom, Store storeTo, Product product, decimal? amount, Guid? containerId)
        {
            this.storeFrom = storeFrom;
            this.storeTo = storeTo;
            this.product = product;
            this.amount = amount;
            this.containerId = containerId;
        }
        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        public Store StoreTo
        {
            get { return storeTo; }
            set { storeTo = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

    }

    [DataClass("ConsolidatedOrderDocument")]
    public partial class ConsolidatedOrderDocument : AbstractDocument
    {
        private DepartmentEntity departmentTo;
        private DateTime? dateChangedAmounts;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ConsolidatedOrderItem> items = new List<ConsolidatedOrderItem>();

        protected ConsolidatedOrderDocument() {}

        public ConsolidatedOrderDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, DepartmentEntity departmentTo)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.departmentTo = departmentTo;
        }

        public ConsolidatedOrderDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set { departmentTo = value; }
        }

        public DateTime? DateChangedAmounts
        {
            get { return dateChangedAmounts; }
            set { dateChangedAmounts = value; }
        }

        [NotNull]
        public List<ConsolidatedOrderItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("ConsolidatedOrderField")]
    public partial class ConsolidatedOrderField
    {
        private Guid? productionOrderDocumentID;
        private Store storeFrom;
        private User supplierFrom;
        private DepartmentEntity departmentTo;
        private Store storeTo;
        [NotNull, NotNullField]
        private Product product;
        private decimal? amount;
        private decimal? amountOriginal;
        private decimal? realAmount;
        private decimal? remainder;
        private Guid? containerId;
        private string tabName;
        private int tabNum;
        private Guid? containerGuid;
        private string comment;
        private int? position;

        protected ConsolidatedOrderField() {}

        public ConsolidatedOrderField(Guid? productionOrderDocumentID, Store storeFrom, User supplierFrom, DepartmentEntity departmentTo, Store storeTo, Product product, decimal? amount, decimal? amountOriginal, decimal? realAmount, decimal? remainder, Guid? containerId, string tabName, int tabNum, Guid? containerGuid, string comment, int? position)
        {
            this.productionOrderDocumentID = productionOrderDocumentID;
            this.storeFrom = storeFrom;
            this.supplierFrom = supplierFrom;
            this.departmentTo = departmentTo;
            this.storeTo = storeTo;
            this.product = product;
            this.amount = amount;
            this.amountOriginal = amountOriginal;
            this.realAmount = realAmount;
            this.remainder = remainder;
            this.containerId = containerId;
            this.tabName = tabName;
            this.tabNum = tabNum;
            this.containerGuid = containerGuid;
            this.comment = comment;
            this.position = position;
        }

        public ConsolidatedOrderField(Product product)
        {
            this.product = product;
        }

        public Guid? ProductionOrderDocumentID
        {
            get { return productionOrderDocumentID; }
            set { productionOrderDocumentID = value; }
        }

        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        public User SupplierFrom
        {
            get { return supplierFrom; }
            set { supplierFrom = value; }
        }

        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set { departmentTo = value; }
        }

        public Store StoreTo
        {
            get { return storeTo; }
            set { storeTo = value; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? AmountOriginal
        {
            get { return amountOriginal; }
            set { amountOriginal = value; }
        }

        public decimal? RealAmount
        {
            get { return realAmount; }
            set { realAmount = value; }
        }

        public decimal? Remainder
        {
            get { return remainder; }
            set { remainder = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public string TabName
        {
            get { return tabName; }
            set { tabName = value; }
        }

        public int TabNum
        {
            get { return tabNum; }
            set { tabNum = value; }
        }

        public Guid? ContainerGuid
        {
            get { return containerGuid; }
            set { containerGuid = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public int? Position
        {
            get { return position; }
            set { position = value; }
        }

    }

    [DataClass("ConsolidatedOrderItem")]
    public partial class ConsolidatedOrderItem : AbstractProductWithUnitDocumentItem
    {
        [NotNull, NotNullField]
        private ConsolidatedOrderDocument document;

        protected ConsolidatedOrderItem() {}

        public ConsolidatedOrderItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, ConsolidatedOrderDocument document)
            : base(id, num, product, amount, amountUnit)
        {
            this.document = document;
        }

        public ConsolidatedOrderItem(Guid id, Product product, decimal amount, ConsolidatedOrderDocument document)
            : base(id, product, amount)
        {
            this.document = document;
        }

        [NotNull]
        public ConsolidatedOrderDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

    }

    [DataClass("ConsolidatedOrderStatus")]
    public partial class ConsolidatedOrderStatus
    {
        private decimal? orderedPercent;
        private decimal? readyForShipmentPercent;
        private decimal? shippedPercent;
        private decimal? receivedPercent;

        protected ConsolidatedOrderStatus() {}

        public ConsolidatedOrderStatus(decimal? orderedPercent, decimal? readyForShipmentPercent, decimal? shippedPercent, decimal? receivedPercent)
        {
            this.orderedPercent = orderedPercent;
            this.readyForShipmentPercent = readyForShipmentPercent;
            this.shippedPercent = shippedPercent;
            this.receivedPercent = receivedPercent;
        }
        public decimal? OrderedPercent
        {
            get { return orderedPercent; }
            set { orderedPercent = value; }
        }

        public decimal? ReadyForShipmentPercent
        {
            get { return readyForShipmentPercent; }
            set { readyForShipmentPercent = value; }
        }

        public decimal? ShippedPercent
        {
            get { return shippedPercent; }
            set { shippedPercent = value; }
        }

        public decimal? ReceivedPercent
        {
            get { return receivedPercent; }
            set { receivedPercent = value; }
        }

    }

    [DataClass("GoodRecord")]
    public partial class GoodRecord
    {
        private int number;
        private Product product;
        private MeasureUnit unit;
        private decimal? amount;
        private decimal? remainder;

        protected GoodRecord() {}

        public GoodRecord(int number, Product product, MeasureUnit unit, decimal? amount, decimal? remainder)
        {
            this.number = number;
            this.product = product;
            this.unit = unit;
            this.amount = amount;
            this.remainder = remainder;
        }
        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public MeasureUnit Unit
        {
            get { return unit; }
            set { unit = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Remainder
        {
            get { return remainder; }
            set { remainder = value; }
        }

    }

    [DataClass("IntegratedProductionOrder")]
    public partial class IntegratedProductionOrder
    {
        private DateTime? date;
        private Guid? orderBlankId;
        private DepartmentEntity departmentTo;
        private ConsolidatedOrderStatus status;

        protected IntegratedProductionOrder() {}

        public IntegratedProductionOrder(DateTime? date, Guid? orderBlankId, DepartmentEntity departmentTo, ConsolidatedOrderStatus status)
        {
            this.date = date;
            this.orderBlankId = orderBlankId;
            this.departmentTo = departmentTo;
            this.status = status;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public Guid? OrderBlankId
        {
            get { return orderBlankId; }
            set { orderBlankId = value; }
        }

        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set { departmentTo = value; }
        }

        public ConsolidatedOrderStatus Status
        {
            get { return status; }
            set { status = value; }
        }

    }

    [DataClass("OrderTimeLimit")]
    public partial class OrderTimeLimit
    {
        private DateTime? time;
        private int? days;

        protected OrderTimeLimit() {}

        public OrderTimeLimit(DateTime? time, int? days)
        {
            this.time = time;
            this.days = days;
        }
        public DateTime? Time
        {
            get { return time; }
            set { time = value; }
        }

        public int? Days
        {
            get { return days; }
            set { days = value; }
        }

    }

    [DataClass("PeriodModeParams")]
    public partial class PeriodModeParams
    {
        private DateTime? dateStart;
        private int period;

        protected PeriodModeParams() {}

        public PeriodModeParams(DateTime? dateStart, int period)
        {
            this.dateStart = dateStart;
            this.period = period;
        }
        public DateTime? DateStart
        {
            get { return dateStart; }
            set { dateStart = value; }
        }

        public int Period
        {
            get { return period; }
            set { period = value; }
        }

    }

    [RootEntity]
    [DataClass("PreparedRegisterCache")]
    public partial class PreparedRegisterCache : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<StoreProductPair, PreparedRegisterCacheItem> workshopChangeMap = new Dictionary<StoreProductPair, PreparedRegisterCacheItem>();

        protected PreparedRegisterCache() {}

        public PreparedRegisterCache(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<StoreProductPair, PreparedRegisterCacheItem> WorkshopChangeMap
        {
            get { return workshopChangeMap; }
        }

    }

    [DataClass("PreparedRegisterCacheItem")]
    public partial class PreparedRegisterCacheItem
    {
        private string session;
        private string workshop;

        public PreparedRegisterCacheItem() {}

        public PreparedRegisterCacheItem(string session, string workshop)
        {
            this.session = session;
            this.workshop = workshop;
        }
        public string Session
        {
            get { return session; }
            set { session = value; }
        }

        public string Workshop
        {
            get { return workshop; }
            set { workshop = value; }
        }

    }

    [DataClass("PreparedRegisterDocument")]
    public partial class PreparedRegisterDocument : AbstractStoreDocument
    {
        private DepartmentEntity departmentTo;
        private Store ingredientsStoreFrom;
        private Store ingredientsStoreTo;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PreparedRegisterItem> items = new List<PreparedRegisterItem>();

        protected PreparedRegisterDocument() {}

        public PreparedRegisterDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, DepartmentEntity departmentTo, Store ingredientsStoreFrom, Store ingredientsStoreTo)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.departmentTo = departmentTo;
            this.ingredientsStoreFrom = ingredientsStoreFrom;
            this.ingredientsStoreTo = ingredientsStoreTo;
        }

        public PreparedRegisterDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set { departmentTo = value; }
        }

        public Store IngredientsStoreFrom
        {
            get { return ingredientsStoreFrom; }
            set { ingredientsStoreFrom = value; }
        }

        public Store IngredientsStoreTo
        {
            get { return ingredientsStoreTo; }
            set { ingredientsStoreTo = value; }
        }

        [NotNull]
        public List<PreparedRegisterItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("PreparedRegisterItem")]
    public partial class PreparedRegisterItem : Entity
    {
        [NotNull, NotNullField]
        private PreparedRegisterDocument document;
        private Product product;
        private decimal? amount;
        private decimal? amountOriginal;
        private MeasureUnit amountUnit;
        private string session;

        protected PreparedRegisterItem() {}

        public PreparedRegisterItem(Guid id, PreparedRegisterDocument document, Product product, decimal? amount, decimal? amountOriginal, MeasureUnit amountUnit)
            : base(id)
        {
            this.document = document;
            this.product = product;
            this.amount = amount;
            this.amountOriginal = amountOriginal;
            this.amountUnit = amountUnit;
        }

        public PreparedRegisterItem(Guid id, PreparedRegisterDocument document)
            : base(id)
        {
            this.document = document;
        }

        [NotNull]
        public PreparedRegisterDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? AmountOriginal
        {
            get { return amountOriginal; }
            set { amountOriginal = value; }
        }

        public MeasureUnit AmountUnit
        {
            get { return amountUnit; }
            set { amountUnit = value; }
        }

        [CanBeNull]
        public string Session
        {
            get { return session; }
            set { session = value; }
        }

    }

    [DataClass("ProductContainerKey")]
    public partial class ProductContainerKey
    {
        private Product product;
        private Guid? containerId;

        protected ProductContainerKey() {}

        public ProductContainerKey(Product product, Guid? containerId)
        {
            this.product = product;
            this.containerId = containerId;
        }
        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

    }

    [DataClass("ProductionListRecord")]
    public partial class ProductionListRecord : AccountingDocumentListRecord
    {
        private DepartmentEntity departmentTo;
        private User supplierTo;
        private User supplierFrom;
        private OrderTimeLimit orderEndTime;
        private string orderBlankName;
        private bool isReadyForShipment;
        private bool isShipped;
        private bool isReceived;

        protected ProductionListRecord() {}

        public ProductionListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, DepartmentEntity departmentTo, User supplierTo, User supplierFrom, OrderTimeLimit orderEndTime, string orderBlankName, bool isReadyForShipment, bool isShipped, bool isReceived)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum)
        {
            this.departmentTo = departmentTo;
            this.supplierTo = supplierTo;
            this.supplierFrom = supplierFrom;
            this.orderEndTime = orderEndTime;
            this.orderBlankName = orderBlankName;
            this.isReadyForShipment = isReadyForShipment;
            this.isShipped = isShipped;
            this.isReceived = isReceived;
        }
        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set { departmentTo = value; }
        }

        public User SupplierTo
        {
            get { return supplierTo; }
            set { supplierTo = value; }
        }

        public User SupplierFrom
        {
            get { return supplierFrom; }
            set { supplierFrom = value; }
        }

        public OrderTimeLimit OrderEndTime
        {
            get { return orderEndTime; }
            set { orderEndTime = value; }
        }

        public string OrderBlankName
        {
            get { return orderBlankName; }
            set { orderBlankName = value; }
        }

        public bool IsReadyForShipment
        {
            get { return isReadyForShipment; }
            set { isReadyForShipment = value; }
        }

        public bool IsShipped
        {
            get { return isShipped; }
            set { isShipped = value; }
        }

        public bool IsReceived
        {
            get { return isReceived; }
            set { isReceived = value; }
        }

    }

    [RootEntity]
    [DataClass("ProductionOrderBlank")]
    public partial class ProductionOrderBlank : PersistedEntity
    {
        private DateTime dateStart;
        private DateTime dateEnd;
        private DateTime? dateChanged;
        private string comment;
        private User userCreatedBlank;
        private User userChangedBlank;
        private string blankName;
        private DepartmentEntity department;
        private User supplier;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductionOrderBlankTab> blankTabs = new List<ProductionOrderBlankTab>();
        private OrderTimeLimit orderLimitTime;
        private OrderTimeLimit orderEndTime;
        private Guid? franchiseUniqueId;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseMasterId;

        protected ProductionOrderBlank() {}

        public ProductionOrderBlank(Guid id, DateTime dateStart, DateTime dateEnd)
            : base(id)
        {
            this.dateStart = dateStart;
            this.dateEnd = dateEnd;
        }
        public DateTime DateStart
        {
            get { return dateStart; }
            set { dateStart = value; }
        }

        public DateTime DateEnd
        {
            get { return dateEnd; }
            set { dateEnd = value; }
        }

        public DateTime? DateChanged
        {
            get { return dateChanged; }
            set { dateChanged = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public User UserCreatedBlank
        {
            get { return userCreatedBlank; }
            set { userCreatedBlank = value; }
        }

        [CanBeNull]
        public User UserChangedBlank
        {
            get { return userChangedBlank; }
            set { userChangedBlank = value; }
        }

        [CanBeNull]
        public string BlankName
        {
            get { return blankName; }
            set { blankName = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [CanBeNull]
        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        [NotNull]
        public List<ProductionOrderBlankTab> BlankTabs
        {
            get { return blankTabs; }
        }

        [CanBeNull]
        public OrderTimeLimit OrderLimitTime
        {
            get { return orderLimitTime; }
            set { orderLimitTime = value; }
        }

        [CanBeNull]
        public OrderTimeLimit OrderEndTime
        {
            get { return orderEndTime; }
            set { orderEndTime = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("ProductionOrderBlankItem")]
    public partial class ProductionOrderBlankItem
    {
        private Guid? id;
        [NotNull, NotNullField]
        private Product product;
        private int position;
        private string comment;
        private Guid? containerId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Store> excludedStores = new List<Store>();

        protected ProductionOrderBlankItem() {}

        public ProductionOrderBlankItem(Guid? id, Product product, int position, string comment)
        {
            this.id = id;
            this.product = product;
            this.position = position;
            this.comment = comment;
        }

        public ProductionOrderBlankItem(Product product)
        {
            this.product = product;
        }

        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public int Position
        {
            get { return position; }
            set { position = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
        }

        [NotNull]
        public List<Store> ExcludedStores
        {
            get { return excludedStores; }
        }

    }

    [DataClass("ProductionOrderBlankTab")]
    public partial class ProductionOrderBlankTab
    {
        private string name;
        private Store store;
        private Guid? franchiseStoreId;
        private int num;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductionOrderBlankItem> blankItems = new List<ProductionOrderBlankItem>();

        public ProductionOrderBlankTab() {}

        public ProductionOrderBlankTab(string name, Store store, int num)
        {
            this.name = name;
            this.store = store;
            this.num = num;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Guid? FranchiseStoreId
        {
            get { return franchiseStoreId; }
            set { franchiseStoreId = value; }
        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        [NotNull]
        public List<ProductionOrderBlankItem> BlankItems
        {
            get { return blankItems; }
        }

    }

    [DataClass("ProductionOrderDocument")]
    public partial class ProductionOrderDocument : ProcessableDocument
    {
        private Guid? orderBlankId;
        private Store storeFrom;
        private DepartmentEntity departmentFrom;
        private DepartmentEntity departmentTo;
        private User supplier;
        private DateTime? dateChangedAmounts;
        private OrderTimeLimit orderLimitTime;
        private OrderTimeLimit orderEndTime;
        private Guid? franchiseOriginalId;
        private HashSet<Guid> linkedInternalTransfers;
        private HashSet<Guid> linkedOutgoingInvoices;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductionOrderItem> items = new List<ProductionOrderItem>();

        protected ProductionOrderDocument() {}

        public ProductionOrderDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, Guid? orderBlankId, Store storeFrom, DepartmentEntity departmentTo, OrderTimeLimit orderLimitTime, OrderTimeLimit orderEndTime)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.orderBlankId = orderBlankId;
            this.storeFrom = storeFrom;
            this.departmentTo = departmentTo;
            this.orderLimitTime = orderLimitTime;
            this.orderEndTime = orderEndTime;
        }

        public ProductionOrderDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

        public Guid? OrderBlankId
        {
            get { return orderBlankId; }
            set { orderBlankId = value; }
        }

        public Store StoreFrom
        {
            get { return storeFrom; }
            set { storeFrom = value; }
        }

        [CanBeNull]
        public DepartmentEntity DepartmentFrom
        {
            get { return departmentFrom; }
            set { departmentFrom = value; }
        }

        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set { departmentTo = value; }
        }

        [CanBeNull]
        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public DateTime? DateChangedAmounts
        {
            get { return dateChangedAmounts; }
            set { dateChangedAmounts = value; }
        }

        public OrderTimeLimit OrderLimitTime
        {
            get { return orderLimitTime; }
            set { orderLimitTime = value; }
        }

        public OrderTimeLimit OrderEndTime
        {
            get { return orderEndTime; }
            set { orderEndTime = value; }
        }

        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        [CanBeNull]
        public HashSet<Guid> LinkedInternalTransfers
        {
            get { return linkedInternalTransfers; }
            set { linkedInternalTransfers = value; }
        }

        [CanBeNull]
        public HashSet<Guid> LinkedOutgoingInvoices
        {
            get { return linkedOutgoingInvoices; }
            set { linkedOutgoingInvoices = value; }
        }

        [NotNull]
        public List<ProductionOrderItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("ProductionOrderItem")]
    public partial class ProductionOrderItem : AbstractProductWithUnitDocumentItem
    {
        [NotNull, NotNullField]
        private ProductionOrderDocument document;
        private decimal? amountOriginal;
        private Store store;
        private Guid? franchiseStoreId;
        private string tabName;
        private int tabNum;
        private string comment;
        private int? position;

        protected ProductionOrderItem() {}

        public ProductionOrderItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, ProductionOrderDocument document, decimal? amountOriginal, Store store, string tabName, int tabNum, string comment, int? position)
            : base(id, num, product, amount, amountUnit)
        {
            this.document = document;
            this.amountOriginal = amountOriginal;
            this.store = store;
            this.tabName = tabName;
            this.tabNum = tabNum;
            this.comment = comment;
            this.position = position;
        }

        public ProductionOrderItem(Guid id, Product product, decimal amount, ProductionOrderDocument document)
            : base(id, product, amount)
        {
            this.document = document;
        }

        [NotNull]
        public ProductionOrderDocument Document
        {
            get { return document; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  document = value;
            }
        }

        public decimal? AmountOriginal
        {
            get { return amountOriginal; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public Guid? FranchiseStoreId
        {
            get { return franchiseStoreId; }
            set { franchiseStoreId = value; }
        }

        public string TabName
        {
            get { return tabName; }
            set { tabName = value; }
        }

        public int TabNum
        {
            get { return tabNum; }
            set { tabNum = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public int? Position
        {
            get { return position; }
            set { position = value; }
        }

    }

    [DataClass("AgentConfigTask")]
    public partial class AgentConfigTask : AgentTask
    {

        protected AgentConfigTask() {}

        public AgentConfigTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("AutoServicePrintTimeOption")]
    [EnumClass]
    public partial class AutoServicePrintTimeOption : LocalizableName<AutoServicePrintTimeOption>
    {
        /// <summary> Отключена. </summary>
        public static readonly AutoServicePrintTimeOption NEVER = new AutoServicePrintTimeOption("NEVER");
        /// <summary> При оплате. </summary>
        public static readonly AutoServicePrintTimeOption BEFORE_PAY = new AutoServicePrintTimeOption("BEFORE_PAY");
        /// <summary> После оплаты. </summary>
        public static readonly AutoServicePrintTimeOption AFTER_PAY = new AutoServicePrintTimeOption("AFTER_PAY");

        private readonly string __value;
        private readonly string __nameResId;

        private AutoServicePrintTimeOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "AUTOSERVICEPRINTTIMEOPTION_NAME_" + __value;
        }

        public static AutoServicePrintTimeOption Parse(string value)
        {
            switch(value)
            {
                case "NEVER": return NEVER;
                case "BEFORE_PAY": return BEFORE_PAY;
                case "AFTER_PAY": return AFTER_PAY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AutoServicePrintTimeOption[] VALUES
        {
            get
            {
                return new []
                {
                    NEVER, 
                    BEFORE_PAY, 
                    AFTER_PAY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ChequeReceiveType")]
    [EnumClass]
    public partial class ChequeReceiveType : LocalizableName<ChequeReceiveType>
    {
        /// <summary> Печать чека. </summary>
        public static readonly ChequeReceiveType PRINT = new ChequeReceiveType("PRINT");
        /// <summary> Запрос при оплате. </summary>
        public static readonly ChequeReceiveType REQUEST_ON_PAY = new ChequeReceiveType("REQUEST_ON_PAY");
        /// <summary> Отправка на email. </summary>
        public static readonly ChequeReceiveType EMAIL = new ChequeReceiveType("EMAIL");

        private readonly string __value;
        private readonly string __nameResId;

        private ChequeReceiveType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CHEQUERECEIVETYPE_NAME_" + __value;
        }

        public static ChequeReceiveType Parse(string value)
        {
            switch(value)
            {
                case "PRINT": return PRINT;
                case "REQUEST_ON_PAY": return REQUEST_ON_PAY;
                case "EMAIL": return EMAIL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ChequeReceiveType[] VALUES
        {
            get
            {
                return new []
                {
                    PRINT, 
                    REQUEST_ON_PAY, 
                    EMAIL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("Conception")]
    public partial class Conception : LocalizableNamePersistedEntity
    {
        private string code;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductGroup> productGroups = new List<ProductGroup>();

        protected Conception() {}

        public Conception(Guid id, LocalizableValue name, string code)
            : base(id, name)
        {
            this.code = code;
        }

        public Conception(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        [NotNull]
        public List<ProductGroup> ProductGroups
        {
            get { return productGroups; }
        }

    }

    [RootEntity]
    [DataClass("CookingPlaceType")]
    public partial class CookingPlaceType : LocalizableNamePersistedEntity
    {
        private int defaultCookingTimeMillis;
        [HasDefaultValue]
        private int defaultCookingTimePeakMillis = 0;
        [Obsolete("Deprecated in Java code")]
        private Guid? franchiseOriginalId;
        private Guid? franchiseUniqueId;
        private Guid? franchiseMasterId;
        private User committent;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CookingPlaceType() {}

        public CookingPlaceType(Guid id, LocalizableValue name, int defaultCookingTimeMillis)
            : base(id, name)
        {
            this.defaultCookingTimeMillis = defaultCookingTimeMillis;
        }

        public CookingPlaceType(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public int DefaultCookingTimeMillis
        {
            get { return defaultCookingTimeMillis; }
            set { defaultCookingTimeMillis = value; }
        }

        public int DefaultCookingTimePeakMillis
        {
            get { return defaultCookingTimePeakMillis; }
            set { defaultCookingTimePeakMillis = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? FranchiseOriginalId
        {
            get { return franchiseOriginalId; }
            set { franchiseOriginalId = value; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

        [CanBeNull]
        public User Committent
        {
            get { return committent; }
            set { committent = value; }
        }

    }

    [DataClass("CookingPlaceTypeSettings")]
    public partial class CookingPlaceTypeSettings
    {
        [NotNull, NotNullField]
        private RestaurantSection cookingPlace;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<RestaurantSection> additionalCookingPlaces = new HashSet<RestaurantSection>();

        protected CookingPlaceTypeSettings() {}

        public CookingPlaceTypeSettings(RestaurantSection cookingPlace)
        {
            this.cookingPlace = cookingPlace;
        }
        [NotNull]
        public RestaurantSection CookingPlace
        {
            get { return cookingPlace; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cookingPlace = value;
            }
        }

        [NotNull]
        public HashSet<RestaurantSection> AdditionalCookingPlaces
        {
            get { return additionalCookingPlaces; }
        }

    }

    [DataClass("CustomerSearchMode")]
    [EnumClass]
    public partial class CustomerSearchMode : LocalizableName<CustomerSearchMode>
    {
        /// <summary> Все поля. </summary>
        public static readonly CustomerSearchMode ALL = new CustomerSearchMode("ALL");
        /// <summary> Телефон, имя, фамилия, номер карты. </summary>
        public static readonly CustomerSearchMode IDENTITY = new CustomerSearchMode("IDENTITY");

        private readonly string __value;
        private readonly string __nameResId;

        private CustomerSearchMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CUSTOMERSEARCHMODE_NAME_" + __value;
        }

        public static CustomerSearchMode Parse(string value)
        {
            switch(value)
            {
                case "ALL": return ALL;
                case "IDENTITY": return IDENTITY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CustomerSearchMode[] VALUES
        {
            get
            {
                return new []
                {
                    ALL, 
                    IDENTITY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryBillPrintTimeOption")]
    [EnumClass]
    public partial class DeliveryBillPrintTimeOption : LocalizableName<DeliveryBillPrintTimeOption>
    {
        /// <summary> При оплате заказа. </summary>
        public static readonly DeliveryBillPrintTimeOption AT_ORDER_PAYMENT = new DeliveryBillPrintTimeOption("AT_ORDER_PAYMENT");
        /// <summary> При отправке заказа. </summary>
        public static readonly DeliveryBillPrintTimeOption AT_DELIVERY_SEND = new DeliveryBillPrintTimeOption("AT_DELIVERY_SEND");
        /// <summary> При окончании приготовления. </summary>
        public static readonly DeliveryBillPrintTimeOption AT_COOKING_COMPLETED = new DeliveryBillPrintTimeOption("AT_COOKING_COMPLETED");
        /// <summary> При начале приготовления. </summary>
        public static readonly DeliveryBillPrintTimeOption AT_COOKING_STARTED = new DeliveryBillPrintTimeOption("AT_COOKING_STARTED");
        /// <summary> Вручную. </summary>
        public static readonly DeliveryBillPrintTimeOption MANUALLY = new DeliveryBillPrintTimeOption("MANUALLY");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryBillPrintTimeOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYBILLPRINTTIMEOPTION_NAME_" + __value;
        }

        public static DeliveryBillPrintTimeOption Parse(string value)
        {
            switch(value)
            {
                case "AT_ORDER_PAYMENT": return AT_ORDER_PAYMENT;
                case "AT_DELIVERY_SEND": return AT_DELIVERY_SEND;
                case "AT_COOKING_COMPLETED": return AT_COOKING_COMPLETED;
                case "AT_COOKING_STARTED": return AT_COOKING_STARTED;
                case "MANUALLY": return MANUALLY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryBillPrintTimeOption[] VALUES
        {
            get
            {
                return new []
                {
                    AT_ORDER_PAYMENT, 
                    AT_DELIVERY_SEND, 
                    AT_COOKING_COMPLETED, 
                    AT_COOKING_STARTED, 
                    MANUALLY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryConfirmationAddressComparsionMode")]
    [EnumClass]
    public partial class DeliveryConfirmationAddressComparsionMode : LocalizableName<DeliveryConfirmationAddressComparsionMode>
    {
        /// <summary> На любой адрес. </summary>
        public static readonly DeliveryConfirmationAddressComparsionMode NO_COMPARSION = new DeliveryConfirmationAddressComparsionMode("NO_COMPARSION");
        /// <summary> На тот же адрес, с точностью до корпуса. </summary>
        public static readonly DeliveryConfirmationAddressComparsionMode COMPARE_BUILDING = new DeliveryConfirmationAddressComparsionMode("COMPARE_BUILDING");
        /// <summary> На тот же адрес с точностью до квартиры. </summary>
        public static readonly DeliveryConfirmationAddressComparsionMode COMPARE_FLAT = new DeliveryConfirmationAddressComparsionMode("COMPARE_FLAT");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryConfirmationAddressComparsionMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYCONFIRMATIONADDRESSCOMPARSIONMODE_NAME_" + __value;
        }

        public static DeliveryConfirmationAddressComparsionMode Parse(string value)
        {
            switch(value)
            {
                case "NO_COMPARSION": return NO_COMPARSION;
                case "COMPARE_BUILDING": return COMPARE_BUILDING;
                case "COMPARE_FLAT": return COMPARE_FLAT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryConfirmationAddressComparsionMode[] VALUES
        {
            get
            {
                return new []
                {
                    NO_COMPARSION, 
                    COMPARE_BUILDING, 
                    COMPARE_FLAT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryNumberGenerationOption")]
    [EnumClass]
    public partial class DeliveryNumberGenerationOption : LocalizableName<DeliveryNumberGenerationOption>
    {
        /// <summary> Случайно. </summary>
        public static readonly DeliveryNumberGenerationOption RANDOM = new DeliveryNumberGenerationOption("RANDOM");
        /// <summary> Последовательно. </summary>
        public static readonly DeliveryNumberGenerationOption SEQUENT = new DeliveryNumberGenerationOption("SEQUENT");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryNumberGenerationOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYNUMBERGENERATIONOPTION_NAME_" + __value;
        }

        public static DeliveryNumberGenerationOption Parse(string value)
        {
            switch(value)
            {
                case "RANDOM": return RANDOM;
                case "SEQUENT": return SEQUENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryNumberGenerationOption[] VALUES
        {
            get
            {
                return new []
                {
                    RANDOM, 
                    SEQUENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryServicePrintTimeOption")]
    [EnumClass]
    public partial class DeliveryServicePrintTimeOption : LocalizableName<DeliveryServicePrintTimeOption>
    {
        /// <summary> Автоматически. </summary>
        public static readonly DeliveryServicePrintTimeOption AUTOMATICALLY = new DeliveryServicePrintTimeOption("AUTOMATICALLY");
        /// <summary> Вручную по нажатию кнопки Готовить. </summary>
        public static readonly DeliveryServicePrintTimeOption AT_DELIVERY_SERVICE_PRINT = new DeliveryServicePrintTimeOption("AT_DELIVERY_SERVICE_PRINT");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryServicePrintTimeOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYSERVICEPRINTTIMEOPTION_NAME_" + __value;
        }

        public static DeliveryServicePrintTimeOption Parse(string value)
        {
            switch(value)
            {
                case "AUTOMATICALLY": return AUTOMATICALLY;
                case "AT_DELIVERY_SERVICE_PRINT": return AT_DELIVERY_SERVICE_PRINT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryServicePrintTimeOption[] VALUES
        {
            get
            {
                return new []
                {
                    AUTOMATICALLY, 
                    AT_DELIVERY_SERVICE_PRINT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryStickerPrintTimeOption")]
    [EnumClass]
    public partial class DeliveryStickerPrintTimeOption : LocalizableName<DeliveryStickerPrintTimeOption>
    {
        /// <summary> Не печатать. </summary>
        public static readonly DeliveryStickerPrintTimeOption NEVER = new DeliveryStickerPrintTimeOption("NEVER");
        /// <summary> При печати накладной. </summary>
        public static readonly DeliveryStickerPrintTimeOption AT_DELIVERY_BILL = new DeliveryStickerPrintTimeOption("AT_DELIVERY_BILL");
        /// <summary> При печати сервисного чека. </summary>
        public static readonly DeliveryStickerPrintTimeOption AT_DELIVERY_SERVICE_PRINT = new DeliveryStickerPrintTimeOption("AT_DELIVERY_SERVICE_PRINT");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryStickerPrintTimeOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYSTICKERPRINTTIMEOPTION_NAME_" + __value;
        }

        public static DeliveryStickerPrintTimeOption Parse(string value)
        {
            switch(value)
            {
                case "NEVER": return NEVER;
                case "AT_DELIVERY_BILL": return AT_DELIVERY_BILL;
                case "AT_DELIVERY_SERVICE_PRINT": return AT_DELIVERY_SERVICE_PRINT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryStickerPrintTimeOption[] VALUES
        {
            get
            {
                return new []
                {
                    NEVER, 
                    AT_DELIVERY_BILL, 
                    AT_DELIVERY_SERVICE_PRINT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("ExternalTerminalSettings")]
    public partial class ExternalTerminalSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        private PaymentType cashPaymentType;
        private PaymentType cardPaymentType;
        private CookingPlaceType cookingPlaceType;

        protected ExternalTerminalSettings() {}

        public ExternalTerminalSettings(Guid id, PaymentType cashPaymentType, PaymentType cardPaymentType, CookingPlaceType cookingPlaceType)
            : base(id)
        {
            this.cashPaymentType = cashPaymentType;
            this.cardPaymentType = cardPaymentType;
            this.cookingPlaceType = cookingPlaceType;
        }

        public ExternalTerminalSettings(Guid id, PaymentType cashPaymentType)
            : base(id)
        {
            this.cashPaymentType = cashPaymentType;
        }

        [NotNull]
        public PaymentType CashPaymentType
        {
            get { return cashPaymentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cashPaymentType = value;
            }
        }

        public PaymentType CardPaymentType
        {
            get { return cardPaymentType; }
            set { cardPaymentType = value; }
        }

        public CookingPlaceType CookingPlaceType
        {
            get { return cookingPlaceType; }
            set { cookingPlaceType = value; }
        }

    }

    [DataClass("FiscalGroupOverrideType")]
    [EnumClass]
    public partial class FiscalGroupOverrideType : LocalizableName<FiscalGroupOverrideType>
    {
        /// <summary> Не задано. </summary>
        public static readonly FiscalGroupOverrideType UNSPECIFIED = new FiscalGroupOverrideType("UNSPECIFIED", false, false);
        /// <summary> По типу заказа. </summary>
        public static readonly FiscalGroupOverrideType ORDER_TYPE = new FiscalGroupOverrideType("ORDER_TYPE", true, false);
        /// <summary> По типу места приготовления. </summary>
        public static readonly FiscalGroupOverrideType COOKING_PLACE_TYPE = new FiscalGroupOverrideType("COOKING_PLACE_TYPE", true, true);

        private readonly bool multiCashRegisterConfiguration;
        private readonly bool needSplitOrderBetweenCashRegisters;
        private readonly string __value;
        private readonly string __nameResId;

        private FiscalGroupOverrideType(string __value, bool multiCashRegisterConfiguration, bool needSplitOrderBetweenCashRegisters)
        {
            this.__value = __value;
            this.__nameResId = "FISCALGROUPOVERRIDETYPE_NAME_" + __value;
            this.multiCashRegisterConfiguration = multiCashRegisterConfiguration;
            this.needSplitOrderBetweenCashRegisters = needSplitOrderBetweenCashRegisters;
        }

        public static FiscalGroupOverrideType Parse(string value)
        {
            switch(value)
            {
                case "UNSPECIFIED": return UNSPECIFIED;
                case "ORDER_TYPE": return ORDER_TYPE;
                case "COOKING_PLACE_TYPE": return COOKING_PLACE_TYPE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static FiscalGroupOverrideType[] VALUES
        {
            get
            {
                return new []
                {
                    UNSPECIFIED, 
                    ORDER_TYPE, 
                    COOKING_PLACE_TYPE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool MultiCashRegisterConfiguration
        {
            get { return multiCashRegisterConfiguration; }
        }

        public bool NeedSplitOrderBetweenCashRegisters
        {
            get { return needSplitOrderBetweenCashRegisters; }
        }

    }

    [DataClass("GetDeviceListTask")]
    public partial class GetDeviceListTask : AgentConfigTask
    {

        protected GetDeviceListTask() {}

        public GetDeviceListTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("GetFontsListTask")]
    public partial class GetFontsListTask : AgentConfigTask
    {

        protected GetFontsListTask() {}

        public GetFontsListTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("GetOposDeviceListTask")]
    public partial class GetOposDeviceListTask : AgentConfigTask
    {
        private string type;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public GetOposDeviceListTask() {}

        public GetOposDeviceListTask(bool success, Guid? id, Guid? deviceId, string type)
            : base(success, id, deviceId)
        {
            this.type = type;
        }
        public string Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("GetPrinterListTask")]
    public partial class GetPrinterListTask : AgentConfigTask
    {

        protected GetPrinterListTask() {}

        public GetPrinterListTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("GetVideoDeviceListTask")]
    public partial class GetVideoDeviceListTask : AgentTask
    {

        protected GetVideoDeviceListTask() {}

        public GetVideoDeviceListTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [RootEntity]
    [DataClass("Group")]
    public partial class Group : LocalizableNamePersistedEntity
    {
        private DepartmentEntity department;
        private CashRegister cashRegister;
        private Terminal mainTerminal;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Terminal> standbyTerminals = new List<Terminal>();
        private GroupServiceMode serviceMode;
        private IPrinterDevice defaultPrinter;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<RestaurantSection> restaurantSections = new HashSet<RestaurantSection>();
        [HasDefaultValue]
        private bool askCashierForMultiCashRegisterPayment = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CookingPlaceType, CookingPlaceTypeSettings> defaultCookingPlaceMap = new Dictionary<CookingPlaceType, CookingPlaceTypeSettings>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, CookingPlaceTypeSettings> cookingPlaceOverride = new Dictionary<Product, CookingPlaceTypeSettings>();
        [NotNull, NotNullField]
        private FiscalGroupOverrideType allowOverrideFiscalGroup;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CookingPlaceType, List<PointOfSale>> fiscalGroupOverride = new Dictionary<CookingPlaceType, List<PointOfSale>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<OrderType, List<PointOfSale>> fiscalGroupOverrideByOrderType = new Dictionary<OrderType, List<PointOfSale>>();
        [NotNull, NotNullField]
        private TaxationSystemsSettings taxationSystemsSettings;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CookingPlaceType, int> fiscalSectionMap = new Dictionary<CookingPlaceType, int>();
        private Table defaultTable;
        [HasDefaultValue]
        private bool hidePrintedDeletedProducts = false;
        private PaymentType defaultPaymentType;
        private HashSet<PointOfSale> pointsOfSale;
        [HasDefaultValue]
        private string locationId = "0";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<PaymentType> excludedPaymentTypes = new HashSet<PaymentType>();
        private TableServiceSettings tableServiceSettings;
        [HasDefaultValue]
        private bool servicePrintOnOrderExit = false;
        [HasDefaultValue]
        private bool printArticleOnCheque = false;
        [HasDefaultValue]
        private bool useTerminalMenu = false;
        private PreliminaryCookedProductsSettings preliminaryCookedProductsSettings;
        private Group preliminaryCookedProductsMasterGroup;
        private CustomerSearchMode searchMode;
        [HasDefaultValue]
        private bool isTabMode = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Group() {}

        public Group(Guid id, LocalizableValue name, CashRegister cashRegister, IPrinterDevice defaultPrinter, FiscalGroupOverrideType allowOverrideFiscalGroup, TaxationSystemsSettings taxationSystemsSettings, Table defaultTable)
            : base(id, name)
        {
            this.cashRegister = cashRegister;
            this.defaultPrinter = defaultPrinter;
            this.allowOverrideFiscalGroup = allowOverrideFiscalGroup;
            this.taxationSystemsSettings = taxationSystemsSettings;
            this.defaultTable = defaultTable;
        }

        public Group(Guid id, LocalizableValue name, FiscalGroupOverrideType allowOverrideFiscalGroup, TaxationSystemsSettings taxationSystemsSettings)
            : base(id, name)
        {
            this.allowOverrideFiscalGroup = allowOverrideFiscalGroup;
            this.taxationSystemsSettings = taxationSystemsSettings;
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public CashRegister CashRegister
        {
            get { return cashRegister; }
            set { cashRegister = value; }
        }

        [CanBeNull]
        public Terminal MainTerminal
        {
            get { return mainTerminal; }
            set { mainTerminal = value; }
        }

        [NotNull]
        public List<Terminal> StandbyTerminals
        {
            get { return standbyTerminals; }
        }

        public GroupServiceMode ServiceMode
        {
            get { return serviceMode; }
            set { serviceMode = value; }
        }

        public IPrinterDevice DefaultPrinter
        {
            get { return defaultPrinter; }
            set { defaultPrinter = value; }
        }

        [NotNull]
        public HashSet<RestaurantSection> RestaurantSections
        {
            get { return restaurantSections; }
        }

        public bool AskCashierForMultiCashRegisterPayment
        {
            get { return askCashierForMultiCashRegisterPayment; }
            set { askCashierForMultiCashRegisterPayment = value; }
        }

        [NotNull]
        public Dictionary<CookingPlaceType, CookingPlaceTypeSettings> DefaultCookingPlaceMap
        {
            get { return defaultCookingPlaceMap; }
        }

        [NotNull]
        public Dictionary<Product, CookingPlaceTypeSettings> CookingPlaceOverride
        {
            get { return cookingPlaceOverride; }
        }

        [NotNull]
        public FiscalGroupOverrideType AllowOverrideFiscalGroup
        {
            get { return allowOverrideFiscalGroup; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  allowOverrideFiscalGroup = value;
            }
        }

        [NotNull]
        public Dictionary<CookingPlaceType, List<PointOfSale>> FiscalGroupOverride
        {
            get { return fiscalGroupOverride; }
        }

        [NotNull]
        public Dictionary<OrderType, List<PointOfSale>> FiscalGroupOverrideByOrderType
        {
            get { return fiscalGroupOverrideByOrderType; }
        }

        [NotNull]
        public TaxationSystemsSettings TaxationSystemsSettings
        {
            get { return taxationSystemsSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxationSystemsSettings = value;
            }
        }

        [NotNull]
        public Dictionary<CookingPlaceType, int> FiscalSectionMap
        {
            get { return fiscalSectionMap; }
        }

        public Table DefaultTable
        {
            get { return defaultTable; }
            set { defaultTable = value; }
        }

        public bool HidePrintedDeletedProducts
        {
            get { return hidePrintedDeletedProducts; }
            set { hidePrintedDeletedProducts = value; }
        }

        [CanBeNull]
        public PaymentType DefaultPaymentType
        {
            get { return defaultPaymentType; }
            set { defaultPaymentType = value; }
        }

        [CanBeNull]
        public HashSet<PointOfSale> PointsOfSale
        {
            get { return pointsOfSale; }
            set { pointsOfSale = value; }
        }

        public string LocationId
        {
            get { return locationId; }
            set { locationId = value; }
        }

        [NotNull]
        public HashSet<PaymentType> ExcludedPaymentTypes
        {
            get { return excludedPaymentTypes; }
        }

        [CanBeNull]
        public TableServiceSettings TableServiceSettings
        {
            get { return tableServiceSettings; }
            set { tableServiceSettings = value; }
        }

        public bool ServicePrintOnOrderExit
        {
            get { return servicePrintOnOrderExit; }
            set { servicePrintOnOrderExit = value; }
        }

        public bool PrintArticleOnCheque
        {
            get { return printArticleOnCheque; }
            set { printArticleOnCheque = value; }
        }

        public bool UseTerminalMenu
        {
            get { return useTerminalMenu; }
            set { useTerminalMenu = value; }
        }

        [CanBeNull]
        public PreliminaryCookedProductsSettings PreliminaryCookedProductsSettings
        {
            get { return preliminaryCookedProductsSettings; }
            set { preliminaryCookedProductsSettings = value; }
        }

        [CanBeNull]
        public Group PreliminaryCookedProductsMasterGroup
        {
            get { return preliminaryCookedProductsMasterGroup; }
            set { preliminaryCookedProductsMasterGroup = value; }
        }

        [CanBeNull]
        public CustomerSearchMode SearchMode
        {
            get { return searchMode; }
            set { searchMode = value; }
        }

        public bool IsTabMode
        {
            get { return isTabMode; }
            set { isTabMode = value; }
        }

    }

    [RootEntity]
    [DataClass("GroupLocation")]
    public partial class GroupLocation : LocalizableNamePersistedEntity
    {
        private string locationId;

        protected GroupLocation() {}

        public GroupLocation(Guid id, LocalizableValue name, string locationId)
            : base(id, name)
        {
            this.locationId = locationId;
        }

        public GroupLocation(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string LocationId
        {
            get { return locationId; }
            set { locationId = value; }
        }

    }

    [DataClass("GroupServiceMode")]
    public enum GroupServiceMode
    {
        FAST_FOOD,
        TABLE_SERVICE,
        PETROLEUM
    }

    [DataClass("IikoNetAutomationOption")]
    [EnumClass]
    public partial class IikoNetAutomationOption : LocalizableName<IikoNetAutomationOption>
    {
        /// <summary> Включать гостей доставки в бонусную программу, применять акции. </summary>
        public static readonly IikoNetAutomationOption REGISTER_GUEST_APPLY_CAMPAIGNS = new IikoNetAutomationOption("REGISTER_GUEST_APPLY_CAMPAIGNS");
        /// <summary> Включать гостей доставки в бонусную программу, не применять акции. </summary>
        public static readonly IikoNetAutomationOption REGISTER_GUEST_NO_CAMPAIGNS = new IikoNetAutomationOption("REGISTER_GUEST_NO_CAMPAIGNS");
        /// <summary> Не включать гостей доставки в бонусную программу, не применять акции. </summary>
        public static readonly IikoNetAutomationOption NO_REGISTER_NO_CAMPAIGNS = new IikoNetAutomationOption("NO_REGISTER_NO_CAMPAIGNS");

        private readonly string __value;
        private readonly string __nameResId;

        private IikoNetAutomationOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "IIKONETAUTOMATIONOPTION_NAME_" + __value;
        }

        public static IikoNetAutomationOption Parse(string value)
        {
            switch(value)
            {
                case "REGISTER_GUEST_APPLY_CAMPAIGNS": return REGISTER_GUEST_APPLY_CAMPAIGNS;
                case "REGISTER_GUEST_NO_CAMPAIGNS": return REGISTER_GUEST_NO_CAMPAIGNS;
                case "NO_REGISTER_NO_CAMPAIGNS": return NO_REGISTER_NO_CAMPAIGNS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static IikoNetAutomationOption[] VALUES
        {
            get
            {
                return new []
                {
                    REGISTER_GUEST_APPLY_CAMPAIGNS, 
                    REGISTER_GUEST_NO_CAMPAIGNS, 
                    NO_REGISTER_NO_CAMPAIGNS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("KitchenProductCookingScenario")]
    public partial class KitchenProductCookingScenario
    {
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings queuedSettings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings readyForCookingSettings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings cooking1Settings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings cooking2Settings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings cooking3Settings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings cooking4Settings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings completedSettings;
        [NotNull, NotNullField]
        private KitchenProductCookingStatusSettings servedSettings;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public KitchenProductCookingScenario() {}

        public KitchenProductCookingScenario(KitchenProductCookingStatusSettings queuedSettings, KitchenProductCookingStatusSettings readyForCookingSettings, KitchenProductCookingStatusSettings cooking1Settings, KitchenProductCookingStatusSettings cooking2Settings, KitchenProductCookingStatusSettings cooking3Settings, KitchenProductCookingStatusSettings cooking4Settings, KitchenProductCookingStatusSettings completedSettings, KitchenProductCookingStatusSettings servedSettings)
        {
            this.queuedSettings = queuedSettings;
            this.readyForCookingSettings = readyForCookingSettings;
            this.cooking1Settings = cooking1Settings;
            this.cooking2Settings = cooking2Settings;
            this.cooking3Settings = cooking3Settings;
            this.cooking4Settings = cooking4Settings;
            this.completedSettings = completedSettings;
            this.servedSettings = servedSettings;
        }
        [NotNull]
        public KitchenProductCookingStatusSettings QueuedSettings
        {
            get { return queuedSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  queuedSettings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings ReadyForCookingSettings
        {
            get { return readyForCookingSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  readyForCookingSettings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings Cooking1Settings
        {
            get { return cooking1Settings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cooking1Settings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings Cooking2Settings
        {
            get { return cooking2Settings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cooking2Settings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings Cooking3Settings
        {
            get { return cooking3Settings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cooking3Settings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings Cooking4Settings
        {
            get { return cooking4Settings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cooking4Settings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings CompletedSettings
        {
            get { return completedSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  completedSettings = value;
            }
        }

        [NotNull]
        public KitchenProductCookingStatusSettings ServedSettings
        {
            get { return servedSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  servedSettings = value;
            }
        }

    }

    [DataClass("KitchenProductCookingStatus")]
    [EnumClass]
    public partial class KitchenProductCookingStatus : LocalizableName<KitchenProductCookingStatus>
    {
        /// <summary> Ожидает. </summary>
        public static readonly KitchenProductCookingStatus QUEUED = new KitchenProductCookingStatus("QUEUED");
        /// <summary> Пора готовить. </summary>
        public static readonly KitchenProductCookingStatus READY_FOR_COOKING = new KitchenProductCookingStatus("READY_FOR_COOKING");
        /// <summary> Готовится-1. </summary>
        public static readonly KitchenProductCookingStatus COOKING_1 = new KitchenProductCookingStatus("COOKING_1");
        /// <summary> Готовится-2. </summary>
        public static readonly KitchenProductCookingStatus COOKING_2 = new KitchenProductCookingStatus("COOKING_2");
        /// <summary> Готовится-3. </summary>
        public static readonly KitchenProductCookingStatus COOKING_3 = new KitchenProductCookingStatus("COOKING_3");
        /// <summary> Готовится-4. </summary>
        public static readonly KitchenProductCookingStatus COOKING_4 = new KitchenProductCookingStatus("COOKING_4");
        /// <summary> Приготовлено. </summary>
        public static readonly KitchenProductCookingStatus COMPLETED = new KitchenProductCookingStatus("COMPLETED");
        /// <summary> Подано. </summary>
        public static readonly KitchenProductCookingStatus SERVED = new KitchenProductCookingStatus("SERVED");

        private readonly string __value;
        private readonly string __nameResId;

        private KitchenProductCookingStatus(string __value)
        {
            this.__value = __value;
            this.__nameResId = "KITCHENPRODUCTCOOKINGSTATUS_NAME_" + __value;
        }

        public static KitchenProductCookingStatus Parse(string value)
        {
            switch(value)
            {
                case "QUEUED": return QUEUED;
                case "READY_FOR_COOKING": return READY_FOR_COOKING;
                case "COOKING_1": return COOKING_1;
                case "COOKING_2": return COOKING_2;
                case "COOKING_3": return COOKING_3;
                case "COOKING_4": return COOKING_4;
                case "COMPLETED": return COMPLETED;
                case "SERVED": return SERVED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static KitchenProductCookingStatus[] VALUES
        {
            get
            {
                return new []
                {
                    QUEUED, 
                    READY_FOR_COOKING, 
                    COOKING_1, 
                    COOKING_2, 
                    COOKING_3, 
                    COOKING_4, 
                    COMPLETED, 
                    SERVED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("KitchenProductCookingStatusSettings")]
    public partial class KitchenProductCookingStatusSettings
    {
        [NotNull, NotNullField]
        private KitchenProductCookingStatus kitchenProductCookingStatus;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [HasDefaultValue]
        private bool isActive = false;
        [HasDefaultValue]
        private bool isAutoComplete = false;
        [HasDefaultValue]
        private int autoCompleteInterval = 60;
        [HasDefaultValue]
        private bool needPrintServiceCheque = false;
        [HasDefaultValue]
        private bool needPrintDeliverySticker = false;

        protected KitchenProductCookingStatusSettings() {}

        public KitchenProductCookingStatusSettings(KitchenProductCookingStatus kitchenProductCookingStatus, string name)
        {
            this.kitchenProductCookingStatus = kitchenProductCookingStatus;
            this.name = name;
        }
        [NotNull]
        public KitchenProductCookingStatus KitchenProductCookingStatus
        {
            get { return kitchenProductCookingStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  kitchenProductCookingStatus = value;
            }
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public bool IsActive
        {
            get { return isActive; }
            set { isActive = value; }
        }

        public bool IsAutoComplete
        {
            get { return isAutoComplete; }
            set { isAutoComplete = value; }
        }

        public int AutoCompleteInterval
        {
            get { return autoCompleteInterval; }
            set { autoCompleteInterval = value; }
        }

        public bool NeedPrintServiceCheque
        {
            get { return needPrintServiceCheque; }
            set { needPrintServiceCheque = value; }
        }

        public bool NeedPrintDeliverySticker
        {
            get { return needPrintDeliverySticker; }
            set { needPrintDeliverySticker = value; }
        }

    }

    [DataClass("OrderAlertSettings")]
    public partial class OrderAlertSettings
    {
        [HasDefaultValue]
        private bool timeSinceOpeningShow = false;
        [HasDefaultValue]
        private int timeSinceOpeningThresholdMinutes = 180;
        [HasDefaultValue]
        private bool largeTotalSumShow = false;
        [HasDefaultValue]
        private int largeTotalSumThreshold = 2000;
        [HasDefaultValue]
        private bool longPrechequeShow = false;
        [HasDefaultValue]
        private int longPrechequeThresholdMinutes = 20;
        [HasDefaultValue]
        private bool cookingDelayShow = false;
        [HasDefaultValue]
        private int cookingDelayThresholdMinutes = 10;
        [HasDefaultValue]
        private bool servingDelayShow = false;
        [HasDefaultValue]
        private int servingDelayThresholdMinutes = 10;
        [HasDefaultValue]
        private bool unattendedTimeShow = false;
        [HasDefaultValue]
        private int unattendedTimeThresholdMinutes = 30;


        public bool TimeSinceOpeningShow
        {
            get { return timeSinceOpeningShow; }
            set { timeSinceOpeningShow = value; }
        }

        public int TimeSinceOpeningThresholdMinutes
        {
            get { return timeSinceOpeningThresholdMinutes; }
            set { timeSinceOpeningThresholdMinutes = value; }
        }

        public bool LargeTotalSumShow
        {
            get { return largeTotalSumShow; }
            set { largeTotalSumShow = value; }
        }

        public int LargeTotalSumThreshold
        {
            get { return largeTotalSumThreshold; }
            set { largeTotalSumThreshold = value; }
        }

        public bool LongPrechequeShow
        {
            get { return longPrechequeShow; }
            set { longPrechequeShow = value; }
        }

        public int LongPrechequeThresholdMinutes
        {
            get { return longPrechequeThresholdMinutes; }
            set { longPrechequeThresholdMinutes = value; }
        }

        public bool CookingDelayShow
        {
            get { return cookingDelayShow; }
            set { cookingDelayShow = value; }
        }

        public int CookingDelayThresholdMinutes
        {
            get { return cookingDelayThresholdMinutes; }
            set { cookingDelayThresholdMinutes = value; }
        }

        public bool ServingDelayShow
        {
            get { return servingDelayShow; }
            set { servingDelayShow = value; }
        }

        public int ServingDelayThresholdMinutes
        {
            get { return servingDelayThresholdMinutes; }
            set { servingDelayThresholdMinutes = value; }
        }

        public bool UnattendedTimeShow
        {
            get { return unattendedTimeShow; }
            set { unattendedTimeShow = value; }
        }

        public int UnattendedTimeThresholdMinutes
        {
            get { return unattendedTimeThresholdMinutes; }
            set { unattendedTimeThresholdMinutes = value; }
        }

    }

    [DataClass("OrderItemsGroupingType")]
    [EnumClass]
    public partial class OrderItemsGroupingType : LocalizableName<OrderItemsGroupingType>
    {
        /// <summary> По гостям. </summary>
        public static readonly OrderItemsGroupingType GUESTS = new OrderItemsGroupingType("GUESTS");
        /// <summary> По курсам. </summary>
        public static readonly OrderItemsGroupingType COURSES = new OrderItemsGroupingType("COURSES");

        private readonly string __value;
        private readonly string __nameResId;

        private OrderItemsGroupingType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ORDERITEMSGROUPINGTYPE_NAME_" + __value;
        }

        public static OrderItemsGroupingType Parse(string value)
        {
            switch(value)
            {
                case "GUESTS": return GUESTS;
                case "COURSES": return COURSES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OrderItemsGroupingType[] VALUES
        {
            get
            {
                return new []
                {
                    GUESTS, 
                    COURSES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("PaymentTypeDiscountConstraint")]
    public partial class PaymentTypeDiscountConstraint : PersistedEntity
    {
        [NotNull, NotNullField]
        private PaymentType paymentType;
        [NotNull, NotNullField]
        private DiscountType discountType;
        private bool unbound;

        protected PaymentTypeDiscountConstraint() {}

        public PaymentTypeDiscountConstraint(Guid id, PaymentType paymentType, DiscountType discountType, bool unbound)
            : base(id)
        {
            this.paymentType = paymentType;
            this.discountType = discountType;
            this.unbound = unbound;
        }

        public PaymentTypeDiscountConstraint(Guid id, PaymentType paymentType, DiscountType discountType)
            : base(id)
        {
            this.paymentType = paymentType;
            this.discountType = discountType;
        }

        [NotNull]
        public PaymentType PaymentType
        {
            get { return paymentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  paymentType = value;
            }
        }

        [NotNull]
        public DiscountType DiscountType
        {
            get { return discountType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  discountType = value;
            }
        }

        public bool Unbound
        {
            get { return unbound; }
            set { unbound = value; }
        }

    }

    [RootEntity]
    [DataClass("PointOfSale")]
    public partial class PointOfSale : LocalizableNamePersistedEntity
    {
        private CashRegister cashRegister;
        private Conception conception;
        private IPrinterDevice receiptPrinter;
        [HasDefaultValue]
        private bool isDefault = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PointOfSale() {}

        public PointOfSale(Guid id, LocalizableValue name, CashRegister cashRegister)
            : base(id, name)
        {
            this.cashRegister = cashRegister;
        }

        public PointOfSale(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public CashRegister CashRegister
        {
            get { return cashRegister; }
            set { cashRegister = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        [CanBeNull]
        public IPrinterDevice ReceiptPrinter
        {
            get { return receiptPrinter; }
            set { receiptPrinter = value; }
        }

        public bool IsDefault
        {
            get { return isDefault; }
            set { isDefault = value; }
        }

    }

    [DataClass("PrintKitchenBarcodeType")]
    [EnumClass]
    public partial class PrintKitchenBarcodeType : LocalizableName<PrintKitchenBarcodeType>
    {
        /// <summary> Не печатать. </summary>
        public static readonly PrintKitchenBarcodeType NEVER = new PrintKitchenBarcodeType("NEVER");
        /// <summary> Печатать по блюдам. </summary>
        public static readonly PrintKitchenBarcodeType PER_DISH = new PrintKitchenBarcodeType("PER_DISH");
        /// <summary> Печатать на чек. </summary>
        public static readonly PrintKitchenBarcodeType PER_CHEQUE = new PrintKitchenBarcodeType("PER_CHEQUE");

        private readonly string __value;
        private readonly string __nameResId;

        private PrintKitchenBarcodeType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PRINTKITCHENBARCODETYPE_NAME_" + __value;
        }

        public static PrintKitchenBarcodeType Parse(string value)
        {
            switch(value)
            {
                case "NEVER": return NEVER;
                case "PER_DISH": return PER_DISH;
                case "PER_CHEQUE": return PER_CHEQUE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PrintKitchenBarcodeType[] VALUES
        {
            get
            {
                return new []
                {
                    NEVER, 
                    PER_DISH, 
                    PER_CHEQUE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("RestaurantSection")]
    public partial class RestaurantSection : LocalizableNamePersistedEntity
    {
        private Group group;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Table> tables = new HashSet<Table>();
        private Store defaultStore;
        private IPrinterDevice billPrinter;
        private IPrinterDevice dishPrinter;
        private IPrinterDevice secondDishPrinter;
        private IPrinterDevice reportPrinter;
        private IPrinterDevice reservePrinter;
        private IPrinterDevice barcodePrinter;
        private RGBColor kitchenColor;
        [HasDefaultValue]
        private bool isKitchen = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CookingPlaceType, CookingPlaceTypeSettings> cookingPlaceMap = new Dictionary<CookingPlaceType, CookingPlaceTypeSettings>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, CookingPlaceTypeSettings> cookingPlaceOverride = new Dictionary<Product, CookingPlaceTypeSettings>();
        private KitchenProductCookingScenario kitchenProductCookingScenario;
        [HasDefaultValue]
        private bool cookingAutoComplete = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Terminal> terminals = new HashSet<Terminal>();
        private int index;
        private RestaurantSectionSchema sectionSchema;
        [HasDefaultValue]
        private bool waiterCanOpenOthersOrders = false;
        [HasDefaultValue]
        private bool roundTablesInSectionSchema = false;
        [HasDefaultValue]
        private bool showOrdersForAllTerminals = true;
        [HasDefaultValue]
        private bool showCourses = true;
        [HasDefaultValue]
        private bool mixEnabled = true;
        [HasDefaultValue]
        private bool orderItemCommentEnabled = false;
        [HasDefaultValue]
        private bool orderItemCommentInCheque = false;
        [HasDefaultValue]
        private bool separateDishesWhenPrinting = false;
        [NotNull, NotNullField]
        private PrintKitchenBarcodeType printKitchenBarcodeType;
        [HasDefaultValue]
        private bool payWithoutPrechequeAllowed = true;
        [HasDefaultValue]
        private bool confirmPrechequePrint = false;
        [NotNull, NotNullField]
        private AutoServicePrintTimeOption autoServicePrintOnPay;
        [NotNull, NotNullField]
        private OrderItemsGroupingType orderItemsGrouping;
        [HasDefaultValue]
        private bool keepAdditionalOrder = false;
        private ClientPriceCategory defaultPriceCategory;
        [HasDefaultValue]
        private bool summaryServiceCheque = false;
        [HasDefaultValue]
        private bool includeInSummaryServiceCheque = false;
        private CookingPlaceSource cookingPlaceSource;
        [HasDefaultValue]
        private bool enterGuestCountInNewOrder = true;
        [HasDefaultValue]
        private bool showGuestsInOrder = true;
        private OrderType defaultOrderType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<RestaurantSection> adjacentSections = new HashSet<RestaurantSection>();
        private OrderAlertSettings orderAlertSettings;
        [NotNull, NotNullField]
        private ChequeReceiveType chequeReceiveType;
        private string chequeReceiveDefaultEmail;
        [HasDefaultValue]
        private bool showDeliveryCommentOnKds = false;
        [HasDefaultValue]
        private bool commodityMarkDelayedScan = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public RestaurantSection() {}

        public RestaurantSection(Guid id, LocalizableValue name, Group group, Store defaultStore, IPrinterDevice billPrinter, IPrinterDevice dishPrinter, IPrinterDevice reservePrinter, KitchenProductCookingScenario kitchenProductCookingScenario, int index, RestaurantSectionSchema sectionSchema, PrintKitchenBarcodeType printKitchenBarcodeType, AutoServicePrintTimeOption autoServicePrintOnPay, OrderItemsGroupingType orderItemsGrouping, ChequeReceiveType chequeReceiveType)
            : base(id, name)
        {
            this.group = group;
            this.defaultStore = defaultStore;
            this.billPrinter = billPrinter;
            this.dishPrinter = dishPrinter;
            this.reservePrinter = reservePrinter;
            this.kitchenProductCookingScenario = kitchenProductCookingScenario;
            this.index = index;
            this.sectionSchema = sectionSchema;
            this.printKitchenBarcodeType = printKitchenBarcodeType;
            this.autoServicePrintOnPay = autoServicePrintOnPay;
            this.orderItemsGrouping = orderItemsGrouping;
            this.chequeReceiveType = chequeReceiveType;
        }

        public RestaurantSection(Guid id, LocalizableValue name, PrintKitchenBarcodeType printKitchenBarcodeType, AutoServicePrintTimeOption autoServicePrintOnPay, OrderItemsGroupingType orderItemsGrouping, ChequeReceiveType chequeReceiveType)
            : base(id, name)
        {
            this.printKitchenBarcodeType = printKitchenBarcodeType;
            this.autoServicePrintOnPay = autoServicePrintOnPay;
            this.orderItemsGrouping = orderItemsGrouping;
            this.chequeReceiveType = chequeReceiveType;
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

        [NotNull]
        public HashSet<Table> Tables
        {
            get { return tables; }
        }

        public Store DefaultStore
        {
            get { return defaultStore; }
            set { defaultStore = value; }
        }

        public IPrinterDevice BillPrinter
        {
            get { return billPrinter; }
            set { billPrinter = value; }
        }

        public IPrinterDevice DishPrinter
        {
            get { return dishPrinter; }
            set { dishPrinter = value; }
        }

        [CanBeNull]
        public IPrinterDevice SecondDishPrinter
        {
            get { return secondDishPrinter; }
            set { secondDishPrinter = value; }
        }

        [CanBeNull]
        public IPrinterDevice ReportPrinter
        {
            get { return reportPrinter; }
            set { reportPrinter = value; }
        }

        public IPrinterDevice ReservePrinter
        {
            get { return reservePrinter; }
            set { reservePrinter = value; }
        }

        [CanBeNull]
        public IPrinterDevice BarcodePrinter
        {
            get { return barcodePrinter; }
            set { barcodePrinter = value; }
        }

        [CanBeNull]
        public RGBColor KitchenColor
        {
            get { return kitchenColor; }
            set { kitchenColor = value; }
        }

        public bool IsKitchen
        {
            get { return isKitchen; }
            set { isKitchen = value; }
        }

        [NotNull]
        public Dictionary<CookingPlaceType, CookingPlaceTypeSettings> CookingPlaceMap
        {
            get { return cookingPlaceMap; }
        }

        [NotNull]
        public Dictionary<Product, CookingPlaceTypeSettings> CookingPlaceOverride
        {
            get { return cookingPlaceOverride; }
        }

        public KitchenProductCookingScenario KitchenProductCookingScenario
        {
            get { return kitchenProductCookingScenario; }
            set { kitchenProductCookingScenario = value; }
        }

        public bool CookingAutoComplete
        {
            get { return cookingAutoComplete; }
            set { cookingAutoComplete = value; }
        }

        [NotNull]
        public HashSet<Terminal> Terminals
        {
            get { return terminals; }
        }

        public int Index
        {
            get { return index; }
            set { index = value; }
        }

        public RestaurantSectionSchema SectionSchema
        {
            get { return sectionSchema; }
            set { sectionSchema = value; }
        }

        public bool WaiterCanOpenOthersOrders
        {
            get { return waiterCanOpenOthersOrders; }
            set { waiterCanOpenOthersOrders = value; }
        }

        public bool RoundTablesInSectionSchema
        {
            get { return roundTablesInSectionSchema; }
            set { roundTablesInSectionSchema = value; }
        }

        public bool ShowOrdersForAllTerminals
        {
            get { return showOrdersForAllTerminals; }
            set { showOrdersForAllTerminals = value; }
        }

        public bool ShowCourses
        {
            get { return showCourses; }
            set { showCourses = value; }
        }

        public bool MixEnabled
        {
            get { return mixEnabled; }
            set { mixEnabled = value; }
        }

        public bool OrderItemCommentEnabled
        {
            get { return orderItemCommentEnabled; }
            set { orderItemCommentEnabled = value; }
        }

        public bool OrderItemCommentInCheque
        {
            get { return orderItemCommentInCheque; }
            set { orderItemCommentInCheque = value; }
        }

        public bool SeparateDishesWhenPrinting
        {
            get { return separateDishesWhenPrinting; }
            set { separateDishesWhenPrinting = value; }
        }

        [NotNull]
        public PrintKitchenBarcodeType PrintKitchenBarcodeType
        {
            get { return printKitchenBarcodeType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  printKitchenBarcodeType = value;
            }
        }

        public bool PayWithoutPrechequeAllowed
        {
            get { return payWithoutPrechequeAllowed; }
            set { payWithoutPrechequeAllowed = value; }
        }

        public bool ConfirmPrechequePrint
        {
            get { return confirmPrechequePrint; }
            set { confirmPrechequePrint = value; }
        }

        [NotNull]
        public AutoServicePrintTimeOption AutoServicePrintOnPay
        {
            get { return autoServicePrintOnPay; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  autoServicePrintOnPay = value;
            }
        }

        [NotNull]
        public OrderItemsGroupingType OrderItemsGrouping
        {
            get { return orderItemsGrouping; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  orderItemsGrouping = value;
            }
        }

        public bool KeepAdditionalOrder
        {
            get { return keepAdditionalOrder; }
            set { keepAdditionalOrder = value; }
        }

        [CanBeNull]
        public ClientPriceCategory DefaultPriceCategory
        {
            get { return defaultPriceCategory; }
            set { defaultPriceCategory = value; }
        }

        public bool SummaryServiceCheque
        {
            get { return summaryServiceCheque; }
            set { summaryServiceCheque = value; }
        }

        public bool IncludeInSummaryServiceCheque
        {
            get { return includeInSummaryServiceCheque; }
            set { includeInSummaryServiceCheque = value; }
        }

        [CanBeNull]
        public CookingPlaceSource CookingPlaceSource
        {
            get { return cookingPlaceSource; }
            set { cookingPlaceSource = value; }
        }

        public bool EnterGuestCountInNewOrder
        {
            get { return enterGuestCountInNewOrder; }
            set { enterGuestCountInNewOrder = value; }
        }

        public bool ShowGuestsInOrder
        {
            get { return showGuestsInOrder; }
            set { showGuestsInOrder = value; }
        }

        [CanBeNull]
        public OrderType DefaultOrderType
        {
            get { return defaultOrderType; }
            set { defaultOrderType = value; }
        }

        [NotNull]
        public HashSet<RestaurantSection> AdjacentSections
        {
            get { return adjacentSections; }
        }

        [CanBeNull]
        public OrderAlertSettings OrderAlertSettings
        {
            get { return orderAlertSettings; }
            set { orderAlertSettings = value; }
        }

        [NotNull]
        public ChequeReceiveType ChequeReceiveType
        {
            get { return chequeReceiveType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  chequeReceiveType = value;
            }
        }

        [CanBeNull]
        public string ChequeReceiveDefaultEmail
        {
            get { return chequeReceiveDefaultEmail; }
            set { chequeReceiveDefaultEmail = value; }
        }

        public bool ShowDeliveryCommentOnKds
        {
            get { return showDeliveryCommentOnKds; }
            set { showDeliveryCommentOnKds = value; }
        }

        public bool CommodityMarkDelayedScan
        {
            get { return commodityMarkDelayedScan; }
            set { commodityMarkDelayedScan = value; }
        }

    }

    [DataClass("ServerInfo")]
    public partial class ServerInfo
    {
        private string serverName;
        private string edition;
        private string version;
        private string computerName;
        private string serverState;
        private string protocol;
        private string serverAddr;
        private string serverSubUrl;
        [HasDefaultValue]
        private int port = 0;
        [HasDefaultValue]
        private bool isPresent = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ServerInfo() {}

        public ServerInfo(string serverName, string version, string computerName)
        {
            this.serverName = serverName;
            this.version = version;
            this.computerName = computerName;
        }
        public string ServerName
        {
            get { return serverName; }
            set { serverName = value; }
        }

        [CanBeNull]
        public string Edition
        {
            get { return edition; }
            set { edition = value; }
        }

        public string Version
        {
            get { return version; }
            set { version = value; }
        }

        public string ComputerName
        {
            get { return computerName; }
            set { computerName = value; }
        }

        [CanBeNull]
        public string ServerState
        {
            get { return serverState; }
            set { serverState = value; }
        }

        [CanBeNull]
        public string Protocol
        {
            get { return protocol; }
            set { protocol = value; }
        }

        [CanBeNull]
        public string ServerAddr
        {
            get { return serverAddr; }
            set { serverAddr = value; }
        }

        [CanBeNull]
        public string ServerSubUrl
        {
            get { return serverSubUrl; }
            set { serverSubUrl = value; }
        }

        public int Port
        {
            get { return port; }
            set { port = value; }
        }

        public bool IsPresent
        {
            get { return isPresent; }
            set { isPresent = value; }
        }

    }

    [RootEntity]
    [DataClass("Table")]
    public partial class Table : LocalizableNamePersistedEntity
    {
        private int num;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<int> places = new List<int>();
        private int placesNum;
        [HasDefaultValue]
        private bool isTimePayTable = false;
        [HasDefaultValue]
        private bool isPetrolTable = false;
        private Product defaultProduct;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Table() {}

        public Table(Guid id, LocalizableValue name, int num, int placesNum)
            : base(id, name)
        {
            this.num = num;
            this.placesNum = placesNum;
        }

        public Table(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        [NotNull]
        public List<int> Places
        {
            get { return places; }
        }

        public int PlacesNum
        {
            get { return placesNum; }
            set { placesNum = value; }
        }

        public bool IsTimePayTable
        {
            get { return isTimePayTable; }
            set { isTimePayTable = value; }
        }

        public bool IsPetrolTable
        {
            get { return isPetrolTable; }
            set { isPetrolTable = value; }
        }

        [CanBeNull]
        public Product DefaultProduct
        {
            get { return defaultProduct; }
            set { defaultProduct = value; }
        }

    }

    [DataClass("TableServiceSettings")]
    public partial class TableServiceSettings
    {
        [HasDefaultValue]
        private bool clientCardBindingMode = false;
        [HasDefaultValue]
        private bool servicePrintAdditionalCheque = false;
        [HasDefaultValue]
        private bool showReservesNotification = false;
        [HasDefaultValue]
        private int maxCourseNumber = 4;


        public bool ClientCardBindingMode
        {
            get { return clientCardBindingMode; }
            set { clientCardBindingMode = value; }
        }

        public bool ServicePrintAdditionalCheque
        {
            get { return servicePrintAdditionalCheque; }
            set { servicePrintAdditionalCheque = value; }
        }

        public bool ShowReservesNotification
        {
            get { return showReservesNotification; }
            set { showReservesNotification = value; }
        }

        public int MaxCourseNumber
        {
            get { return maxCourseNumber; }
            set { maxCourseNumber = value; }
        }

    }

    [DataClass("TaxationSystemsSettings")]
    public partial class TaxationSystemsSettings
    {
        [HasDefaultValue]
        private bool isTaxationSystemByOrderType = false;
        [HasDefaultValue]
        private bool isTaxationSystemByCookingPlaceType = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CookingPlaceType, Dictionary<OrderType, TaxationSystem>> taxSystemsByOrderTypeAndCookingPlaceType = new Dictionary<CookingPlaceType, Dictionary<OrderType, TaxationSystem>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<OrderType, TaxationSystem> taxSystemsByOrderType = new Dictionary<OrderType, TaxationSystem>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CookingPlaceType, TaxationSystem> taxSystemsByCookingPlaceType = new Dictionary<CookingPlaceType, TaxationSystem>();
        private TaxationSystem taxationSystem;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<OrderType, TaxationSystem> taxSystemsByOrderTypeForPrepay = new Dictionary<OrderType, TaxationSystem>();
        private TaxationSystem taxationSystemForPrepay;
        [HasDefaultValue]
        private bool isManuallySelectionTaxationSystemForPrepay = false;


        public bool IsTaxationSystemByOrderType
        {
            get { return isTaxationSystemByOrderType; }
            set { isTaxationSystemByOrderType = value; }
        }

        public bool IsTaxationSystemByCookingPlaceType
        {
            get { return isTaxationSystemByCookingPlaceType; }
            set { isTaxationSystemByCookingPlaceType = value; }
        }

        [NotNull]
        public Dictionary<CookingPlaceType, Dictionary<OrderType, TaxationSystem>> TaxSystemsByOrderTypeAndCookingPlaceType
        {
            get { return taxSystemsByOrderTypeAndCookingPlaceType; }
        }

        [NotNull]
        public Dictionary<OrderType, TaxationSystem> TaxSystemsByOrderType
        {
            get { return taxSystemsByOrderType; }
        }

        [NotNull]
        public Dictionary<CookingPlaceType, TaxationSystem> TaxSystemsByCookingPlaceType
        {
            get { return taxSystemsByCookingPlaceType; }
        }

        [CanBeNull]
        public TaxationSystem TaxationSystem
        {
            get { return taxationSystem; }
            set { taxationSystem = value; }
        }

        [NotNull]
        public Dictionary<OrderType, TaxationSystem> TaxSystemsByOrderTypeForPrepay
        {
            get { return taxSystemsByOrderTypeForPrepay; }
        }

        [CanBeNull]
        public TaxationSystem TaxationSystemForPrepay
        {
            get { return taxationSystemForPrepay; }
            set { taxationSystemForPrepay = value; }
        }

        public bool IsManuallySelectionTaxationSystemForPrepay
        {
            get { return isManuallySelectionTaxationSystemForPrepay; }
            set { isManuallySelectionTaxationSystemForPrepay = value; }
        }

    }

    [DataClass("TerminalsSettings")]
    public partial class TerminalsSettings
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Terminal, IPrinterDevice> billPrintersBindings = new Dictionary<Terminal, IPrinterDevice>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Terminal, IPrinterDevice> reservePrintersBindings = new Dictionary<Terminal, IPrinterDevice>();


        [NotNull]
        public Dictionary<Terminal, IPrinterDevice> BillPrintersBindings
        {
            get { return billPrintersBindings; }
        }

        [NotNull]
        public Dictionary<Terminal, IPrinterDevice> ReservePrintersBindings
        {
            get { return reservePrintersBindings; }
        }

    }

    [DataClass("ClosePeriodSchedulerPeriods")]
    [EnumClass]
    public partial class ClosePeriodSchedulerPeriods : LocalizableName<ClosePeriodSchedulerPeriods>
    {
        /// <summary> Единожды. </summary>
        public static readonly ClosePeriodSchedulerPeriods NONE = new ClosePeriodSchedulerPeriods("NONE", -1);
        /// <summary> Еженедельно. </summary>
        public static readonly ClosePeriodSchedulerPeriods WEEKLY = new ClosePeriodSchedulerPeriods("WEEKLY", 3);
        /// <summary> Ежемесячно. </summary>
        public static readonly ClosePeriodSchedulerPeriods MONTHLY = new ClosePeriodSchedulerPeriods("MONTHLY", 2);

        private readonly int field;
        private readonly string __value;
        private readonly string __nameResId;

        private ClosePeriodSchedulerPeriods(string __value, int field)
        {
            this.__value = __value;
            this.__nameResId = "CLOSEPERIODSCHEDULERPERIODS_NAME_" + __value;
            this.field = field;
        }

        public static ClosePeriodSchedulerPeriods Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "WEEKLY": return WEEKLY;
                case "MONTHLY": return MONTHLY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ClosePeriodSchedulerPeriods[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    WEEKLY, 
                    MONTHLY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Field
        {
            get { return field; }
        }

    }

    [DataClass("CronScheduledTask")]
    public abstract partial class CronScheduledTask : ScheduledTaskEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string cronExpression = "";

        protected CronScheduledTask() {}

        protected CronScheduledTask(Guid id, string cronExpression)
            : base(id)
        {
            this.cronExpression = cronExpression;
        }
        [NotNull]
        public string CronExpression
        {
            get { return cronExpression; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cronExpression = value;
            }
        }

    }

    [DataClass("DepartmentPeriodCloseTask")]
    public partial class DepartmentPeriodCloseTask : SimpleContinuousScheduledTask
    {
        private DateTime periodClosingDate;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DepartmentPeriodCloseTask() {}

        public DepartmentPeriodCloseTask(Guid id, DateTime plannedDate, ClosePeriodSchedulerPeriods period, DateTime periodClosingDate)
            : base(id, plannedDate, period)
        {
            this.periodClosingDate = periodClosingDate;
        }
        public DateTime PeriodClosingDate
        {
            get { return periodClosingDate; }
            set { periodClosingDate = value; }
        }

    }

    [DataClass("ReprocessDocumentsTask")]
    public partial class ReprocessDocumentsTask : SimpleContinuousScheduledTask
    {
        private List<Guid> documentIds;

        protected ReprocessDocumentsTask() {}

        public ReprocessDocumentsTask(Guid id, DateTime plannedDate, ClosePeriodSchedulerPeriods period)
            : base(id, plannedDate, period)
        {

        }
        [CanBeNull]
        public List<Guid> DocumentIds
        {
            get { return documentIds; }
            set { documentIds = value; }
        }

    }

    [DataClass("ReprocessIncomingServicesTask")]
    public partial class ReprocessIncomingServicesTask : SimpleContinuousScheduledTask
    {

        protected ReprocessIncomingServicesTask() {}

        public ReprocessIncomingServicesTask(Guid id, DateTime plannedDate, ClosePeriodSchedulerPeriods period)
            : base(id, plannedDate, period)
        {

        }
    }

    [DataClass("ScheduledTaskEntity")]
    public abstract partial class ScheduledTaskEntity : CachedEntity
    {
        private DepartmentEntity department;

        protected ScheduledTaskEntity() {}

        protected ScheduledTaskEntity(Guid id)
            : base(id)
        {

        }
        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("SimpleContinuousScheduledTask")]
    public abstract partial class SimpleContinuousScheduledTask : ScheduledTaskEntity
    {
        private DateTime plannedDate;
        [NotNull, NotNullField]
        private ClosePeriodSchedulerPeriods period;

        protected SimpleContinuousScheduledTask() {}

        protected SimpleContinuousScheduledTask(Guid id, DateTime plannedDate, ClosePeriodSchedulerPeriods period)
            : base(id)
        {
            this.plannedDate = plannedDate;
            this.period = period;
        }
        public DateTime PlannedDate
        {
            get { return plannedDate; }
            set { plannedDate = value; }
        }

        [NotNull]
        public ClosePeriodSchedulerPeriods Period
        {
            get { return period; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  period = value;
            }
        }

    }

    [DataClass("SqlStatementTask")]
    public partial class SqlStatementTask : CronScheduledTask
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sqlExpression = "";

        protected SqlStatementTask() {}

        public SqlStatementTask(Guid id, string cronExpression, string sqlExpression)
            : base(id, cronExpression)
        {
            this.sqlExpression = sqlExpression;
        }
        [NotNull]
        public string SqlExpression
        {
            get { return sqlExpression; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sqlExpression = value;
            }
        }

    }

    [DataClass("TaskEntity")]
    public abstract partial class TaskEntity
    {


    }

    [DataClass("TaxCategoryVatPercentUpdateTask")]
    public partial class TaxCategoryVatPercentUpdateTask : SimpleContinuousScheduledTask
    {
        private TaxCategory taxCategory;

        protected TaxCategoryVatPercentUpdateTask() {}

        public TaxCategoryVatPercentUpdateTask(Guid id, DateTime plannedDate, ClosePeriodSchedulerPeriods period, TaxCategory taxCategory)
            : base(id, plannedDate, period)
        {
            this.taxCategory = taxCategory;
        }

        public TaxCategoryVatPercentUpdateTask(Guid id, DateTime plannedDate, ClosePeriodSchedulerPeriods period)
            : base(id, plannedDate, period)
        {

        }

        public TaxCategory TaxCategory
        {
            get { return taxCategory; }
            set { taxCategory = value; }
        }

    }

    [DataClass("ItemType")]
    public enum ItemType
    {
        RECATNGLE,
        ROUND,
        OVAL
    }

    [DataClass("RestaurantSectionImage")]
    public partial class RestaurantSectionImage : RestaurantSectionObject
    {
        private SavedImageInfo image;

        protected RestaurantSectionImage() {}

        public RestaurantSectionImage(int x, int y, int z, double angle, int width, int height, SavedImageInfo image)
            : base(x, y, z, angle, width, height)
        {
            this.image = image;
        }
        public SavedImageInfo Image
        {
            get { return image; }
            set { image = value; }
        }

    }

    [DataClass("RestaurantSectionItem")]
    public partial class RestaurantSectionItem : RestaurantSectionResizableObject
    {
        private int color;
        private ItemType type;

        protected RestaurantSectionItem() {}

        public RestaurantSectionItem(int x, int y, int z, double angle, int width, int height, int color, ItemType type)
            : base(x, y, z, angle, width, height)
        {
            this.color = color;
            this.type = type;
        }
        public int Color
        {
            get { return color; }
            set { color = value; }
        }

        public ItemType Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("RestaurantSectionMark")]
    public partial class RestaurantSectionMark : RestaurantSectionResizableObject
    {
        private string text;
        private int color;
        private string font;

        protected RestaurantSectionMark() {}

        public RestaurantSectionMark(int x, int y, int z, double angle, int width, int height, string text, int color, string font)
            : base(x, y, z, angle, width, height)
        {
            this.text = text;
            this.color = color;
            this.font = font;
        }
        public string Text
        {
            get { return text; }
            set { text = value; }
        }

        public int Color
        {
            get { return color; }
            set { color = value; }
        }

        public string Font
        {
            get { return font; }
            set { font = value; }
        }

    }

    [DataClass("RestaurantSectionObject")]
    public partial class RestaurantSectionObject
    {
        private int x;
        private int y;
        private int z;
        private double angle;
        private int width;
        private int height;

        public RestaurantSectionObject() {}

        public RestaurantSectionObject(int x, int y, int z, double angle, int width, int height)
        {
            this.x = x;
            this.y = y;
            this.z = z;
            this.angle = angle;
            this.width = width;
            this.height = height;
        }
        public int X
        {
            get { return x; }
            set { x = value; }
        }

        public int Y
        {
            get { return y; }
            set { y = value; }
        }

        public int Z
        {
            get { return z; }
            set { z = value; }
        }

        public double Angle
        {
            get { return angle; }
            set { angle = value; }
        }

        public int Width
        {
            get { return width; }
            set { width = value; }
        }

        public int Height
        {
            get { return height; }
            set { height = value; }
        }

    }

    [DataClass("RestaurantSectionResizableObject")]
    public partial class RestaurantSectionResizableObject : RestaurantSectionObject
    {

        protected RestaurantSectionResizableObject() {}

        public RestaurantSectionResizableObject(int x, int y, int z, double angle, int width, int height)
            : base(x, y, z, angle, width, height)
        {

        }
    }

    [RootEntity]
    [DataClass("RestaurantSectionSchema")]
    public partial class RestaurantSectionSchema : LocalizableNamePersistedEntity
    {
        private RestaurantSection section;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<RestaurantSectionObject> objects = new HashSet<RestaurantSectionObject>();
        private int colorBack;
        private int colorUnoccupiedTable;
        private int colorOccupiedTable;
        private int colorTableNumber;
        private int colorPrechekedTable;
        private SavedImageInfo renderedImage;
        private int width;
        private int height;
        private User modifier;
        private DateTime? modificationDate;

        protected RestaurantSectionSchema() {}

        public RestaurantSectionSchema(Guid id, LocalizableValue name, RestaurantSection section, int colorBack, int colorUnoccupiedTable, int colorOccupiedTable, int colorTableNumber, int colorPrechekedTable, SavedImageInfo renderedImage, int width, int height, User modifier, DateTime? modificationDate)
            : base(id, name)
        {
            this.section = section;
            this.colorBack = colorBack;
            this.colorUnoccupiedTable = colorUnoccupiedTable;
            this.colorOccupiedTable = colorOccupiedTable;
            this.colorTableNumber = colorTableNumber;
            this.colorPrechekedTable = colorPrechekedTable;
            this.renderedImage = renderedImage;
            this.width = width;
            this.height = height;
            this.modifier = modifier;
            this.modificationDate = modificationDate;
        }

        public RestaurantSectionSchema(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public RestaurantSection Section
        {
            get { return section; }
            set { section = value; }
        }

        [NotNull]
        public HashSet<RestaurantSectionObject> Objects
        {
            get { return objects; }
        }

        public int ColorBack
        {
            get { return colorBack; }
            set { colorBack = value; }
        }

        public int ColorUnoccupiedTable
        {
            get { return colorUnoccupiedTable; }
            set { colorUnoccupiedTable = value; }
        }

        public int ColorOccupiedTable
        {
            get { return colorOccupiedTable; }
            set { colorOccupiedTable = value; }
        }

        public int ColorTableNumber
        {
            get { return colorTableNumber; }
            set { colorTableNumber = value; }
        }

        public int ColorPrechekedTable
        {
            get { return colorPrechekedTable; }
            set { colorPrechekedTable = value; }
        }

        public SavedImageInfo RenderedImage
        {
            get { return renderedImage; }
            set { renderedImage = value; }
        }

        public int Width
        {
            get { return width; }
            set { width = value; }
        }

        public int Height
        {
            get { return height; }
            set { height = value; }
        }

        public User Modifier
        {
            get { return modifier; }
            set { modifier = value; }
        }

        public DateTime? ModificationDate
        {
            get { return modificationDate; }
            set { modificationDate = value; }
        }

    }

    [DataClass("RestaurantSectionTable")]
    public partial class RestaurantSectionTable : RestaurantSectionResizableObject
    {
        private TableType type;
        private Table table;

        protected RestaurantSectionTable() {}

        public RestaurantSectionTable(int x, int y, int z, double angle, int width, int height, TableType type, Table table)
            : base(x, y, z, angle, width, height)
        {
            this.type = type;
            this.table = table;
        }
        public TableType Type
        {
            get { return type; }
            set { type = value; }
        }

        public Table Table
        {
            get { return table; }
            set { table = value; }
        }

    }

    [DataClass("TableType")]
    public enum TableType
    {
        RECTANGLE,
        ROUND
    }

    [DataClass("DateTimeServerConstants")]
    [EnumClass]
    public partial class DateTimeServerConstants
    {
        public static readonly DateTimeServerConstants EXAMPLE_DATE = new DateTimeServerConstants("EXAMPLE_DATE", Serializer.Deserialize<DateTime>("<r>2008-05-06T00:00:00.000+04:00</r>", false));
        public static readonly DateTimeServerConstants MAX_DATE = new DateTimeServerConstants("MAX_DATE", Serializer.Deserialize<DateTime>("<r>2500-01-01T00:00:00.000+03:00</r>", false));
        public static readonly DateTimeServerConstants MIN_DATE = new DateTimeServerConstants("MIN_DATE", Serializer.Deserialize<DateTime>("<r>1900-01-01T00:00:00.000+03:00</r>", false));

        private readonly DateTime dateTime;
        private readonly string __value;

        private DateTimeServerConstants(string __value, DateTime dateTime)
        {
            this.__value = __value;
            this.dateTime = dateTime;
        }

        public static DateTimeServerConstants Parse(string value)
        {
            switch(value)
            {
                case "EXAMPLE_DATE": return EXAMPLE_DATE;
                case "MAX_DATE": return MAX_DATE;
                case "MIN_DATE": return MIN_DATE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DateTimeServerConstants[] VALUES
        {
            get
            {
                return new []
                {
                    EXAMPLE_DATE, 
                    MAX_DATE, 
                    MIN_DATE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public DateTime DateTime
        {
            get { return dateTime; }
        }

    }

    [DataClass("CustomerOrganizationDetailsFullAddressDto")]
    public partial class CustomerOrganizationDetailsFullAddressDto
    {
        private string postCode;
        private string country;
        private string region;
        private string city;
        private string street;
        private string house;

        protected CustomerOrganizationDetailsFullAddressDto() {}

        public CustomerOrganizationDetailsFullAddressDto(string postCode, string country, string region, string city, string street, string house)
        {
            this.postCode = postCode;
            this.country = country;
            this.region = region;
            this.city = city;
            this.street = street;
            this.house = house;
        }
        public string PostCode
        {
            get { return postCode; }
            set { postCode = value; }
        }

        public string Country
        {
            get { return country; }
            set { country = value; }
        }

        public string Region
        {
            get { return region; }
            set { region = value; }
        }

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        public string Street
        {
            get { return street; }
            set { street = value; }
        }

        public string House
        {
            get { return house; }
            set { house = value; }
        }

    }

    [DataClass("CustomerOrganizationDetailsInfoDto")]
    public partial class CustomerOrganizationDetailsInfoDto
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private string code;
        private string accountingReasonCode;
        private string recipientCode;
        private string address;
        private CustomerOrganizationDetailsFullAddressDto fullAddress;
        private CustomerPublicOrganizationDetailsInfoDto publicAuthorityInfo;

        protected CustomerOrganizationDetailsInfoDto() {}

        public CustomerOrganizationDetailsInfoDto(string name, string code, string accountingReasonCode, string recipientCode, string address, CustomerOrganizationDetailsFullAddressDto fullAddress, CustomerPublicOrganizationDetailsInfoDto publicAuthorityInfo)
        {
            this.name = name;
            this.code = code;
            this.accountingReasonCode = accountingReasonCode;
            this.recipientCode = recipientCode;
            this.address = address;
            this.fullAddress = fullAddress;
            this.publicAuthorityInfo = publicAuthorityInfo;
        }

        public CustomerOrganizationDetailsInfoDto(string name)
        {
            this.name = name;
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public string AccountingReasonCode
        {
            get { return accountingReasonCode; }
            set { accountingReasonCode = value; }
        }

        public string RecipientCode
        {
            get { return recipientCode; }
            set { recipientCode = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        public CustomerOrganizationDetailsFullAddressDto FullAddress
        {
            get { return fullAddress; }
            set { fullAddress = value; }
        }

        public CustomerPublicOrganizationDetailsInfoDto PublicAuthorityInfo
        {
            get { return publicAuthorityInfo; }
            set { publicAuthorityInfo = value; }
        }

    }

    [DataClass("CustomerPublicOrganizationDetailsInfoDto")]
    public partial class CustomerPublicOrganizationDetailsInfoDto
    {
        private string projectCode;
        private string tenderCode;

        protected CustomerPublicOrganizationDetailsInfoDto() {}

        public CustomerPublicOrganizationDetailsInfoDto(string projectCode, string tenderCode)
        {
            this.projectCode = projectCode;
            this.tenderCode = tenderCode;
        }
        public string ProjectCode
        {
            get { return projectCode; }
            set { projectCode = value; }
        }

        public string TenderCode
        {
            get { return tenderCode; }
            set { tenderCode = value; }
        }

    }

    [DataClass("CustomerSearchRequest")]
    public partial class CustomerSearchRequest
    {
        private string name;
        private string surname;
        private List<string> additionalPhones;
        private Guid? id;
        private Guid? externalId;
        private string phone;
        private bool anonymized;

        protected CustomerSearchRequest() {}

        public CustomerSearchRequest(string name, string surname, Guid? id, Guid? externalId, string phone, bool anonymized)
        {
            this.name = name;
            this.surname = surname;
            this.id = id;
            this.externalId = externalId;
            this.phone = phone;
            this.anonymized = anonymized;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Surname
        {
            get { return surname; }
            set { surname = value; }
        }

        public List<string> AdditionalPhones
        {
            get { return additionalPhones; }
            set { additionalPhones = value; }
        }

        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public Guid? ExternalId
        {
            get { return externalId; }
            set { externalId = value; }
        }

        public string Phone
        {
            get { return phone; }
            set { phone = value; }
        }

        public bool Anonymized
        {
            get { return anonymized; }
            set { anonymized = value; }
        }

    }

    [DataClass("DBVersion")]
    public partial class DBVersion
    {
        private int? revision;
        private int? maxRevisionWithoutDeletedEntities;
        private string serverVersion;
        private string userLanguage;
        private string userCountry;
        private string dbVendor;
        private Guid? serverId;

        public DBVersion() {}

        public DBVersion(int? revision, int? maxRevisionWithoutDeletedEntities, string serverVersion, string userLanguage, string userCountry, string dbVendor, Guid? serverId)
        {
            this.revision = revision;
            this.maxRevisionWithoutDeletedEntities = maxRevisionWithoutDeletedEntities;
            this.serverVersion = serverVersion;
            this.userLanguage = userLanguage;
            this.userCountry = userCountry;
            this.dbVendor = dbVendor;
            this.serverId = serverId;
        }
        public int? Revision
        {
            get { return revision; }
            set { revision = value; }
        }

        public int? MaxRevisionWithoutDeletedEntities
        {
            get { return maxRevisionWithoutDeletedEntities; }
            set { maxRevisionWithoutDeletedEntities = value; }
        }

        public string ServerVersion
        {
            get { return serverVersion; }
            set { serverVersion = value; }
        }

        public string UserLanguage
        {
            get { return userLanguage; }
            set { userLanguage = value; }
        }

        public string UserCountry
        {
            get { return userCountry; }
            set { userCountry = value; }
        }

        public string DbVendor
        {
            get { return dbVendor; }
            set { dbVendor = value; }
        }

        public Guid? ServerId
        {
            get { return serverId; }
            set { serverId = value; }
        }

    }

    [DataClass("IsolatedEntitiesContext")]
    public partial class IsolatedEntitiesContext
    {
        private List<ByValue<CachedEntity>> entities;


        public List<ByValue<CachedEntity>> Entities
        {
            get { return entities; }
            set { entities = value; }
        }

    }

    [DataClass("LocalizableNamePersistedEntity")]
    public abstract partial class LocalizableNamePersistedEntity : PersistedEntity
    {

        protected LocalizableNamePersistedEntity() {}

        protected LocalizableNamePersistedEntity(Guid id, LocalizableValue name)
            : base(id)
        {
            this.name = name;
        }
    }

    [DataClass("LocalizableValue")]
    public partial class LocalizableValue
    {
        private string defaultResourceId;
        private string currentResourceId;
        private string customValue;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public LocalizableValue() {}

        public LocalizableValue(string defaultResourceId, string currentResourceId, string customValue)
        {
            this.defaultResourceId = defaultResourceId;
            this.currentResourceId = currentResourceId;
            this.customValue = customValue;
        }
        public string DefaultResourceId
        {
            get { return defaultResourceId; }
            set { defaultResourceId = value; }
        }

        public string CurrentResourceId
        {
            get { return currentResourceId; }
            set { currentResourceId = value; }
        }

        public string CustomValue
        {
            get { return customValue; }
            set { customValue = value; }
        }

    }

    [DataClass("OrderedHibernateEntity")]
    public abstract partial class OrderedHibernateEntity : Entity
    {
        private double sortWeight;

        protected OrderedHibernateEntity() {}

        protected OrderedHibernateEntity(Guid id, double sortWeight)
            : base(id)
        {
            this.sortWeight = sortWeight;
        }

        protected OrderedHibernateEntity(Guid id)
            : base(id)
        {

        }

        public double SortWeight
        {
            get { return sortWeight; }
            set { sortWeight = value; }
        }

    }

    [DataClass("PredefinedGuids")]
    [EnumClass]
    public partial class PredefinedGuids
    {
        public static readonly PredefinedGuids DB_LOCK_GLOBAL = new PredefinedGuids("DB_LOCK_GLOBAL", "DBLock", "global", Guid.Parse("d83eef23-612d-7c57-9c1f-da7f6fa5eed4"));
        public static readonly PredefinedGuids ORDER_CUSTOMER_PERSISTENT_BUFFER = new PredefinedGuids("ORDER_CUSTOMER_PERSISTENT_BUFFER", "OrderCustomerPersistentBuffer", "", Guid.Parse("2c49ce12-0a94-3174-91fd-fb41519bf8fc"));
        public static readonly PredefinedGuids SERVER_UPGRADE_STATE = new PredefinedGuids("SERVER_UPGRADE_STATE", "ServerUpgradeState", "", Guid.Parse("4e97be1d-09bf-21ab-6ae2-36cafd99f836"));
        public static readonly PredefinedGuids SERVER_UPGRADE_SETTINGS = new PredefinedGuids("SERVER_UPGRADE_SETTINGS", "ServerUpgradeSettings", "", Guid.Parse("f7f8f72b-19e6-5e06-75ad-9034dc181e49"));
        public static readonly PredefinedGuids PROFIT_AND_LOSS_BUDGET_NODE = new PredefinedGuids("PROFIT_AND_LOSS_BUDGET_NODE", "BudgetPlanItemAccount", "ProfitAndLossReport_income", Guid.Parse("62fb5f22-22f3-00bf-10ef-2d271114794e"));
        public static readonly PredefinedGuids PROFIT_AND_LOSS_NET_INCOME_NODE = new PredefinedGuids("PROFIT_AND_LOSS_NET_INCOME_NODE", "BudgetPlanItemAccount", "ProfitAndLossReport_net_income", Guid.Parse("b5ae200a-18e1-9771-9b87-93f73c831eb2"));
        public static readonly PredefinedGuids PROFIT_AND_LOSS_SELF_COST_NODE = new PredefinedGuids("PROFIT_AND_LOSS_SELF_COST_NODE", "BudgetPlanItemAccount", "ProfitAndLossReport_cost_of_goods_sold", Guid.Parse("43ca4fe3-df03-5edb-653f-52198be3e93f"));
        public static readonly PredefinedGuids NO_CONCEPTION = new PredefinedGuids("NO_CONCEPTION", "Conception", "NO_CONCEPTION", Guid.Parse("2609b25f-2180-bf98-5c1c-967664eea837"));
        public static readonly PredefinedGuids ROLE_ADMIN = new PredefinedGuids("ROLE_ADMIN", "Role", "ADM", Guid.Parse("96e9fd57-67e7-7beb-b97a-9537d1c2afe7"));
        public static readonly PredefinedGuids USER_SYSTEM = new PredefinedGuids("USER_SYSTEM", "User", "system", Guid.Parse("6207ef94-1a40-bf65-d3f5-3d241defd583"));
        public static readonly PredefinedGuids USER_ADMIN = new PredefinedGuids("USER_ADMIN", "User", "admin", Guid.Parse("c831367e-778f-e80f-18f7-bd0843cd10c6"));
        public static readonly PredefinedGuids USER_SYSTEM_INTEGRATION = new PredefinedGuids("USER_SYSTEM_INTEGRATION", "User", "SystemIntegrationUser", Guid.Parse("6a907425-6c36-f4ef-b366-4129cb168e44"));
        public static readonly PredefinedGuids USER_DELIVERY = new PredefinedGuids("USER_DELIVERY", "User", "DeliveryUser", Guid.Parse("670e1523-5299-0a85-aabc-58f125481a20"));
        public static readonly PredefinedGuids USER_TRANSPORT = new PredefinedGuids("USER_TRANSPORT", "User", "TransportUser", Guid.Parse("36bb22cc-eb45-8f9b-8f13-e6f45197a320"));
        public static readonly PredefinedGuids USER_API_IMPORT = new PredefinedGuids("USER_API_IMPORT", "User", "ApiImportUser", Guid.Parse("3baccc6f-1abb-299f-99ba-405bc2b3a442"));
        public static readonly PredefinedGuids USER_IIKO = new PredefinedGuids("USER_IIKO", "User", "iikoUser", Guid.Parse("96f84b3b-1aa8-b77b-7f89-144dfaeb2c22"));
        public static readonly PredefinedGuids USER_IIKOMINI = new PredefinedGuids("USER_IIKOMINI", "User", "iikoMiniUser", Guid.Parse("a20c03bf-1c8e-0613-fa17-e73acaf4252a"));
        public static readonly PredefinedGuids USER_PLUGIN_DEFAULT = new PredefinedGuids("USER_PLUGIN_DEFAULT", "User", "PluginUser_Default", Guid.Parse("628b6634-d2b4-2d6d-8020-bd793f27156f"));
        public static readonly PredefinedGuids USER_SUPPLIER_SHOP = new PredefinedGuids("USER_SUPPLIER_SHOP", "User", "", Guid.Parse("6533fab0-506f-8a3e-d931-17a1ba877193"));
        public static readonly PredefinedGuids PAYMENT_METHOD_CASH = new PredefinedGuids("PAYMENT_METHOD_CASH", "PaymentMethod", "cash", Guid.Parse("63888ee5-7a5d-9a70-2192-59090aeda023"));
        public static readonly PredefinedGuids PAYMENT_METHOD_NONCASH = new PredefinedGuids("PAYMENT_METHOD_NONCASH", "PaymentMethod", "nonCash", Guid.Parse("4f5cdcb4-3492-d4b8-3e24-9d9bc4538d55"));
        public static readonly PredefinedGuids PAYMENT_METHOD_PREPAY = new PredefinedGuids("PAYMENT_METHOD_PREPAY", "PaymentMethod", "prePay", Guid.Parse("07044177-c761-fa72-f410-1ea45c2280e1"));
        public static readonly PredefinedGuids PAYMENT_METHOD_POSTPAY = new PredefinedGuids("PAYMENT_METHOD_POSTPAY", "PaymentMethod", "postPay", Guid.Parse("21c31192-d412-bde1-29b6-2e7eddb8edbd"));
        public static readonly PredefinedGuids PAYMENT_METHOD_CONSIDERATION = new PredefinedGuids("PAYMENT_METHOD_CONSIDERATION", "PaymentMethod", "consideration", Guid.Parse("ff76309c-084d-255e-c49c-90f3211931c3"));
        public static readonly PredefinedGuids PAYMENT_TYPE_CASH = new PredefinedGuids("PAYMENT_TYPE_CASH", "PaymentType", "iiko", Guid.Parse("09322f46-578a-d210-add7-eec222a08871"));
        public static readonly PredefinedGuids PAYMENT_TYPE_INCOMING_RETURNED_INVOICE = new PredefinedGuids("PAYMENT_TYPE_INCOMING_RETURNED_INVOICE", "PaymentType", "iiko", Guid.Parse("e281560e-ec92-45f5-b803-94605a4e1475"));
        public static readonly PredefinedGuids PAYMENT_TYPE_PLAZIUS_BONUS = new PredefinedGuids("PAYMENT_TYPE_PLAZIUS_BONUS", "PaymentType", "iikoNet", Guid.Parse("4f8081dd-1f85-68a5-6a55-8e6e67dc99d0"));
        public static readonly PredefinedGuids PAYMENT_TYPE_PLAZIUS_MOBILE = new PredefinedGuids("PAYMENT_TYPE_PLAZIUS_MOBILE", "PaymentType", "iikoNet", Guid.Parse("d6630d7c-85be-a369-0ae1-5b461833b19b"));
        public static readonly PredefinedGuids PRODUCT_GROUP_PLAZIUS = new PredefinedGuids("PRODUCT_GROUP_PLAZIUS", "ProductGroup", "iikoNet", Guid.Parse("ee26313d-bf36-3337-4940-c87636946bf1"));
        public static readonly PredefinedGuids PRODUCT_PLAZIUS_ACTIVATION = new PredefinedGuids("PRODUCT_PLAZIUS_ACTIVATION", "Product", "iikoNet", Guid.Parse("89da306e-7fd4-ce58-279d-8ea758a52412"));
        public static readonly PredefinedGuids PRODUCT_PLAZIUS_REPLENISH = new PredefinedGuids("PRODUCT_PLAZIUS_REPLENISH", "PaymentType", "iikoNet", Guid.Parse("009ca35c-9c83-4548-6f70-7e028306225a"));
        public static readonly PredefinedGuids DISCOUNT_CARD_TYPE_IIKO_NET = new PredefinedGuids("DISCOUNT_CARD_TYPE_IIKO_NET", "DiscountCardType", "iiko.NET", Guid.Parse("08a93062-2d86-1dbc-5c04-14194da9c903"));
        public static readonly PredefinedGuids DISCOUNT_CARD_TYPE_IIKO_CARD5 = new PredefinedGuids("DISCOUNT_CARD_TYPE_IIKO_CARD5", "DiscountCardType", "iikoCard5", Guid.Parse("30ee9e91-36d4-a868-e087-15892defe17c"));
        public static readonly PredefinedGuids PAYMENT_SYSTEM_IIKO_NET = new PredefinedGuids("PAYMENT_SYSTEM_IIKO_NET", "PaymentSystem", "iikoNet", Guid.Parse("94d7ef7b-c363-3b6b-05c9-1fee506f1416"));
        public static readonly PredefinedGuids IIKO_NET_SETTINGS = new PredefinedGuids("IIKO_NET_SETTINGS", "IikoNetSettings", "iikoNet", Guid.Parse("7a52eade-7523-5637-0e0a-4695b58ff936"));
        public static readonly PredefinedGuids PAYMENT_SYSTEM_IIKO_CARD_51 = new PredefinedGuids("PAYMENT_SYSTEM_IIKO_CARD_51", "PaymentSystem", "iikoCard51", Guid.Parse("f027e3d8-01ba-3cd0-3269-4b518b96e388"));
        public static readonly PredefinedGuids IIKOCARD51_SETTINGS = new PredefinedGuids("IIKOCARD51_SETTINGS", "IikoCard51Settings", "iikoCard51Settings", Guid.Parse("d52d0f15-176f-622a-da9f-154045ce29c3"));
        public static readonly PredefinedGuids CHAIN_CONNECTION_SETTINGS = new PredefinedGuids("CHAIN_CONNECTION_SETTINGS", "ChainConnectionSettings", "chain", Guid.Parse("48121ee1-e6bb-92b8-0675-0579caaa2f9a"));
        public static readonly PredefinedGuids UOC_REPLICATION_STATE = new PredefinedGuids("UOC_REPLICATION_STATE", "UocReplicationState", "uocReplicationState", Guid.Parse("81c3a59a-409a-d2e8-8b50-103b19a6b61f"));
        public static readonly PredefinedGuids EDI_SYSTEM_INTERNAL_GUID = new PredefinedGuids("EDI_SYSTEM_INTERNAL_GUID", "EdiSystem", "InternalEdiSystem", Guid.Parse("b478869a-2c10-c398-5600-cd9202db4cd7"));
        public static readonly PredefinedGuids EDI_SYSTEM_KONTUR_GUID = new PredefinedGuids("EDI_SYSTEM_KONTUR_GUID", "EdiSystem", "KonturEdiSystem", Guid.Parse("947385b3-1f5f-1074-249a-ba09b8eb1d64"));
        public static readonly PredefinedGuids EDI_SYSTEM_EXTERNAL_API_GUID = new PredefinedGuids("EDI_SYSTEM_EXTERNAL_API_GUID", "EdiSystem", "ExternalEdiSystem", Guid.Parse("709f5a71-47b6-f2fc-b5a8-d10176a851d7"));
        public static readonly PredefinedGuids EDI_SYSTEM_UNSPECIFIED_API_GUID = new PredefinedGuids("EDI_SYSTEM_UNSPECIFIED_API_GUID", "EdiSystem", "UnspecifiedEdiSystem", Guid.Parse("8f97d707-b20e-32d9-c2b8-b93cbff8c593"));
        public static readonly PredefinedGuids ACCOUNTING_CATEGORY_GOODS = new PredefinedGuids("ACCOUNTING_CATEGORY_GOODS", "AccountingCategory", "", Guid.Parse("8bc08505-c81d-075d-8572-af7b636d049b"));
        public static readonly PredefinedGuids ACCOUNTING_CATEGORY_FOOD = new PredefinedGuids("ACCOUNTING_CATEGORY_FOOD", "AccountingCategory", "", Guid.Parse("8bc08505-c81d-075d-8572-af7b636d049b"));
        public static readonly PredefinedGuids ACCOUNTING_CATEGORY_DRINKS = new PredefinedGuids("ACCOUNTING_CATEGORY_DRINKS", "AccountingCategory", "", Guid.Parse("b96b69fa-9019-998f-bf75-5120e876a2bd"));
        public static readonly PredefinedGuids ACCOUNTING_CATEGORY_HOUSEHOLD_GOODS = new PredefinedGuids("ACCOUNTING_CATEGORY_HOUSEHOLD_GOODS", "AccountingCategory", "", Guid.Parse("ad97d191-076a-b5ad-9639-43a22fa73c5c"));
        public static readonly PredefinedGuids ACCOUNTING_CATEGORY_SERVICES = new PredefinedGuids("ACCOUNTING_CATEGORY_SERVICES", "AccountingCategory", "", Guid.Parse("3282ff71-5d15-7e27-8e3e-59511e1cd7ce"));
        public static readonly PredefinedGuids ACCOUNTING_CATEGORY_OTHER = new PredefinedGuids("ACCOUNTING_CATEGORY_OTHER", "AccountingCategory", "", Guid.Parse("2421dab7-13d3-1f76-d0c1-ffec295b005a"));
        public static readonly PredefinedGuids DISCOUNT_SERVICE_GROUP_GUID = new PredefinedGuids("DISCOUNT_SERVICE_GROUP_GUID", "ProductGroup", "serviceFee", Guid.Parse("7bce50f2-c5d0-1bb7-5194-8d2e55752764"));
        public static readonly PredefinedGuids SERVICE_FEE_ROUNDING_DOWN_GUID = new PredefinedGuids("SERVICE_FEE_ROUNDING_DOWN_GUID", "ServiceFee", "roundingDown", Guid.Parse("e922593a-6049-1362-d4f6-fadff35b6e64"));
        public static readonly PredefinedGuids SERVICE_FEE_ROUNDING_PRICE_PER_UNIT_GUID = new PredefinedGuids("SERVICE_FEE_ROUNDING_PRICE_PER_UNIT_GUID", "ServiceFee", "roundingPricePerUnit", Guid.Parse("b83d980f-f666-6db5-0720-22c9699b24f9"));
        public static readonly PredefinedGuids PRODUCT_ROUNDING_DOWN_GUID = new PredefinedGuids("PRODUCT_ROUNDING_DOWN_GUID", "Product", "roundingDown", Guid.Parse("5b08a4c4-2453-a7f6-4275-4db8016a2e1f"));
        public static readonly PredefinedGuids PRODUCT_ROUNDING_PRICE_PER_UNIT_GUID = new PredefinedGuids("PRODUCT_ROUNDING_PRICE_PER_UNIT_GUID", "Product", "roundingPricePerUnit", Guid.Parse("57cf4be9-739b-f21e-7d7d-31f595445ccf"));
        public static readonly PredefinedGuids DISCOUNT_TYPE_ROUNDING_DOWN_GUID = new PredefinedGuids("DISCOUNT_TYPE_ROUNDING_DOWN_GUID", "ServiceFeeDiscountType", "roundingDown", Guid.Parse("61a1e0f6-8765-97d7-a2e8-d10acbdabc81"));
        public static readonly PredefinedGuids DISCOUNT_TYPE_ROUNDING_PRICE_PER_UNIT_GUID = new PredefinedGuids("DISCOUNT_TYPE_ROUNDING_PRICE_PER_UNIT_GUID", "ServiceFeeDiscountType", "roundingPricePerUnit", Guid.Parse("ab0a2776-dfc8-c4db-83d4-edb8d210fd8a"));
        public static readonly PredefinedGuids DISCOUNT_TYPE_CORRECTION_DOWN_GUID = new PredefinedGuids("DISCOUNT_TYPE_CORRECTION_DOWN_GUID", "ServiceFeeDiscountType", "discountTypeCorrectionDown", Guid.Parse("3dc7085d-4866-5795-9bf8-ef2b1347f848"));
        public static readonly PredefinedGuids DISCOUNT_TYPE_CORRECTION_UP_GUID = new PredefinedGuids("DISCOUNT_TYPE_CORRECTION_UP_GUID", "ServiceFeeDiscountType", "discountTypeCorrectionUp", Guid.Parse("eaf85d7c-5eef-8409-e316-ff97dac75f20"));
        public static readonly PredefinedGuids CASHFLOW_CATEGORY_PREPAY_GUID = new PredefinedGuids("CASHFLOW_CATEGORY_PREPAY_GUID", "CashFlowCategory", "", Guid.Parse("c625495d-2748-0f12-a9f3-4ea4342602e2"));
        public static readonly PredefinedGuids CASHFLOW_CATEGORY_GAIN_GUID = new PredefinedGuids("CASHFLOW_CATEGORY_GAIN_GUID", "CashFlowCategory", "", Guid.Parse("14c0fe4b-76ec-2681-846e-81d1ec32db08"));
        public static readonly PredefinedGuids NOTICES_STATE = new PredefinedGuids("NOTICES_STATE", "NoticesState", "NOTICES_STATE", Guid.Parse("af8f57fe-7c77-5b25-6e23-db7dbed4335b"));
        public static readonly PredefinedGuids FRONT_BALANCES = new PredefinedGuids("FRONT_BALANCES", "FrontBalances", "FRONT_BALANCES", Guid.Parse("3bfa7ee0-17f7-4331-9e71-febd4b8d1574"));
        public static readonly PredefinedGuids PRODUCT_GROUP_EVOTOR = new PredefinedGuids("PRODUCT_GROUP_EVOTOR", "ProductGroup", "Evotor", Guid.Parse("642cf29b-d112-7393-d0c3-fd798e69b77e"));
        public static readonly PredefinedGuids PRODUCT_OPEN_PRICE = new PredefinedGuids("PRODUCT_OPEN_PRICE", "Product", "Evotor", Guid.Parse("a4cd0f29-9a22-a4bc-ec10-0f1cf34c1c1a"));
        public static readonly PredefinedGuids COOKING_PLACE_TYPE_BAR = new PredefinedGuids("COOKING_PLACE_TYPE_BAR", "CookingPlaceType", "iiko", Guid.Parse("22c1becd-2b32-30c5-22a7-2b48f1de3e3f"));
        public static readonly PredefinedGuids PRODUCT_CATEGORY_FOOD = new PredefinedGuids("PRODUCT_CATEGORY_FOOD", "ProductCategory", "", Guid.Parse("7d15fca6-4674-282b-d7e2-0512a0395a35"));
        public static readonly PredefinedGuids PRODUCT_CATEGORY_DRINKS = new PredefinedGuids("PRODUCT_CATEGORY_DRINKS", "ProductCategory", "", Guid.Parse("cc040f57-9339-1df8-bb4f-6e787338425e"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_GOODS = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_GOODS", "ProductItemCategory", "1", Guid.Parse("60881fbc-afd6-6aae-bdb6-8dbe17394bc0"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_EXCISE_GOODS = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_EXCISE_GOODS", "ProductItemCategory", "2", Guid.Parse("ba100a80-d114-81ac-8355-2f88155ab7f2"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_WORK = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_WORK", "ProductItemCategory", "3", Guid.Parse("44540635-dfb7-c2e7-78c5-df8684b2fc6e"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_SERVICE = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_SERVICE", "ProductItemCategory", "4", Guid.Parse("c0813b5e-5dc8-bcda-e6fb-10eb4ab9a0bc"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_GAMBLING_BET = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_GAMBLING_BET", "ProductItemCategory", "5", Guid.Parse("1ec7c17e-6ecd-251c-4bda-811f70a322de"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_GAMBLE_WIN = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_GAMBLE_WIN", "ProductItemCategory", "6", Guid.Parse("439283e8-76ed-ea96-1a92-9ec134add5a3"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_LOTTERY_BET = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_LOTTERY_BET", "ProductItemCategory", "7", Guid.Parse("034f3387-6fe9-7e5a-5cad-15714015f8c0"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_LOTTERY_WIN = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_LOTTERY_WIN", "ProductItemCategory", "8", Guid.Parse("936a520a-1117-3afb-fbcc-e7296383ba8e"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_RID = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_RID", "ProductItemCategory", "9", Guid.Parse("912c900d-9310-eb6e-bc04-e0bca552fdc2"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_PAYMENT = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_PAYMENT", "ProductItemCategory", "10", Guid.Parse("61a2deb1-e4e1-48cb-f75b-377212cc1bb7"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_AGENT_FEE = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_AGENT_FEE", "ProductItemCategory", "11", Guid.Parse("d615e3b4-b150-40ed-1084-058a57fcd559"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_COMBINED = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_COMBINED", "ProductItemCategory", "12", Guid.Parse("e641decc-f3ff-c560-8f85-7b1bdbe8af88"));
        public static readonly PredefinedGuids PRODUCT_ITEM_CATEGORY_OTHER = new PredefinedGuids("PRODUCT_ITEM_CATEGORY_OTHER", "ProductItemCategory", "13", Guid.Parse("353ca66c-fddf-0f34-ddc9-181e9882e434"));
        public static readonly PredefinedGuids PRODUCT_SCALE_STANDARD = new PredefinedGuids("PRODUCT_SCALE_STANDARD", "ProductScale", "", Guid.Parse("17000f57-9cd8-5c64-5916-e062a01bad4f"));
        public static readonly PredefinedGuids PRODUCT_SIZE_BIG = new PredefinedGuids("PRODUCT_SIZE_BIG", "ProductSize", "", Guid.Parse("bdc24f8c-7646-cf3b-501f-8b47217c4f40"));
        public static readonly PredefinedGuids PRODUCT_SIZE_SMALL = new PredefinedGuids("PRODUCT_SIZE_SMALL", "ProductSize", "", Guid.Parse("56a083b2-07cc-780f-c5cc-696cb65e7fa4"));
        public static readonly PredefinedGuids OUTER_ECONOMIC_ACTIVITY_CODE_2402_10_000_0 = new PredefinedGuids("OUTER_ECONOMIC_ACTIVITY_CODE_2402_10_000_0", "OuterEconomicActivityNomenclatureCode", "2402 10 000 0", Guid.Parse("0fc4376e-135a-c47d-e83d-6db5fbe607b4"));
        public static readonly PredefinedGuids OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_100_0 = new PredefinedGuids("OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_100_0", "OuterEconomicActivityNomenclatureCode", "2402 20 100 0", Guid.Parse("f64a3f41-a628-da6a-becc-489a46e3c9ee"));
        public static readonly PredefinedGuids OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_900_0 = new PredefinedGuids("OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_900_0", "OuterEconomicActivityNomenclatureCode", "2402 20 900 0", Guid.Parse("4aa199a7-23b0-9617-b1dc-8f8afd5d106e"));
        public static readonly PredefinedGuids OUTER_ECONOMIC_ACTIVITY_CODE_2402_90_000_0 = new PredefinedGuids("OUTER_ECONOMIC_ACTIVITY_CODE_2402_90_000_0", "OuterEconomicActivityNomenclatureCode", "2402 90 000 0", Guid.Parse("ed4fb432-d8fa-46fa-4908-b5943afc5000"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_1_CELERY = new PredefinedGuids("ALLERGEN_GROUP_1_CELERY", "AllergenGroup", "1", Guid.Parse("a9794be4-88d8-9387-6696-2222ea3b2e85"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_2_CEREALS = new PredefinedGuids("ALLERGEN_GROUP_2_CEREALS", "AllergenGroup", "2", Guid.Parse("9504ca68-0a25-69bb-1782-3f46dd10456e"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_3_CRUSTACEANS = new PredefinedGuids("ALLERGEN_GROUP_3_CRUSTACEANS", "AllergenGroup", "3", Guid.Parse("e8cec001-131e-fe75-85eb-1e04f88a1632"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_4_EGGS = new PredefinedGuids("ALLERGEN_GROUP_4_EGGS", "AllergenGroup", "4", Guid.Parse("327802ea-c3fb-5014-a99e-7aec62dd25cd"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_5_FISH = new PredefinedGuids("ALLERGEN_GROUP_5_FISH", "AllergenGroup", "5", Guid.Parse("5e27fa38-1ce2-3ba3-850e-0541d3246188"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_6_LUPIN = new PredefinedGuids("ALLERGEN_GROUP_6_LUPIN", "AllergenGroup", "6", Guid.Parse("cf5295a0-b0ce-3cfc-ac32-00a27506117d"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_7_MILK = new PredefinedGuids("ALLERGEN_GROUP_7_MILK", "AllergenGroup", "7", Guid.Parse("d15c3f77-8dcd-3cb9-27b8-99363c7fba6a"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_8_MOLLUSCS = new PredefinedGuids("ALLERGEN_GROUP_8_MOLLUSCS", "AllergenGroup", "8", Guid.Parse("4d27ddaa-1c35-1a70-fd3a-63c4faaff711"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_9_MUSTARD = new PredefinedGuids("ALLERGEN_GROUP_9_MUSTARD", "AllergenGroup", "9", Guid.Parse("1037bb63-afe4-cdf8-f9e8-577ddcfe2777"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_10_TREENUTS = new PredefinedGuids("ALLERGEN_GROUP_10_TREENUTS", "AllergenGroup", "10", Guid.Parse("6ddcf737-7ee8-4d90-cabd-87df4d3bceb8"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_11_PEANUTS = new PredefinedGuids("ALLERGEN_GROUP_11_PEANUTS", "AllergenGroup", "11", Guid.Parse("a6e62638-5428-ab8a-427d-038b55a1375d"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_12_SESAMESEEDS = new PredefinedGuids("ALLERGEN_GROUP_12_SESAMESEEDS", "AllergenGroup", "12", Guid.Parse("36197570-ea4f-caf8-1ec9-9bc8705abdc3"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_13_SOYBEANS = new PredefinedGuids("ALLERGEN_GROUP_13_SOYBEANS", "AllergenGroup", "13", Guid.Parse("9ad5d62e-2afc-b9fb-d6be-d604d797a722"));
        public static readonly PredefinedGuids ALLERGEN_GROUP_14_SULPHURDIOXIDEANDSULPHITES = new PredefinedGuids("ALLERGEN_GROUP_14_SULPHURDIOXIDEANDSULPHITES", "AllergenGroup", "14", Guid.Parse("7cd0f109-4e19-d6b8-9303-36d5dc5f5f99"));
        public static readonly PredefinedGuids DELIVERY_APPEARANCE_SETTINGS = new PredefinedGuids("DELIVERY_APPEARANCE_SETTINGS", "DeliveryAppearanceSettings", "", Guid.Parse("531ea5ab-e28e-d30d-ee61-4b764cb90081"));
        public static readonly PredefinedGuids DELIVERY_CANCEL_CAUSE_DEFAULT = new PredefinedGuids("DELIVERY_CANCEL_CAUSE_DEFAULT", "DeliveryCancelCause", "default", Guid.Parse("26028369-d381-32c2-8039-4de8ac137457"));
        public static readonly PredefinedGuids DELIVERY_CANCEL_CAUSE_MOVE = new PredefinedGuids("DELIVERY_CANCEL_CAUSE_MOVE", "DeliveryCancelCause", "moveDelivery", Guid.Parse("510a6ede-41a9-a8d4-c009-2cef53563983"));
        public static readonly PredefinedGuids DELIVERY_CANCEL_CAUSE_ES_DELETED = new PredefinedGuids("DELIVERY_CANCEL_CAUSE_ES_DELETED", "DeliveryCancelCause", "eSDeletedDelivery", Guid.Parse("8a4ea983-55f8-b5fd-3114-d2d9d72fc4e1"));
        public static readonly PredefinedGuids EMPTY_STREET_ID = new PredefinedGuids("EMPTY_STREET_ID", "Address", "EmptyStreetId", Guid.Parse("f8aaf1ec-8f46-907f-9357-e4c27bab5f78"));

        private readonly string dataClassName;
        private readonly string systemName;
        private readonly Guid id;
        private readonly string __value;

        private PredefinedGuids(string __value, string dataClassName, string systemName, Guid id)
        {
            this.__value = __value;
            this.dataClassName = dataClassName;
            this.systemName = systemName;
            this.id = id;
        }

        public static PredefinedGuids Parse(string value)
        {
            switch(value)
            {
                case "DB_LOCK_GLOBAL": return DB_LOCK_GLOBAL;
                case "ORDER_CUSTOMER_PERSISTENT_BUFFER": return ORDER_CUSTOMER_PERSISTENT_BUFFER;
                case "SERVER_UPGRADE_STATE": return SERVER_UPGRADE_STATE;
                case "SERVER_UPGRADE_SETTINGS": return SERVER_UPGRADE_SETTINGS;
                case "PROFIT_AND_LOSS_BUDGET_NODE": return PROFIT_AND_LOSS_BUDGET_NODE;
                case "PROFIT_AND_LOSS_NET_INCOME_NODE": return PROFIT_AND_LOSS_NET_INCOME_NODE;
                case "PROFIT_AND_LOSS_SELF_COST_NODE": return PROFIT_AND_LOSS_SELF_COST_NODE;
                case "NO_CONCEPTION": return NO_CONCEPTION;
                case "ROLE_ADMIN": return ROLE_ADMIN;
                case "USER_SYSTEM": return USER_SYSTEM;
                case "USER_ADMIN": return USER_ADMIN;
                case "USER_SYSTEM_INTEGRATION": return USER_SYSTEM_INTEGRATION;
                case "USER_DELIVERY": return USER_DELIVERY;
                case "USER_TRANSPORT": return USER_TRANSPORT;
                case "USER_API_IMPORT": return USER_API_IMPORT;
                case "USER_IIKO": return USER_IIKO;
                case "USER_IIKOMINI": return USER_IIKOMINI;
                case "USER_PLUGIN_DEFAULT": return USER_PLUGIN_DEFAULT;
                case "USER_SUPPLIER_SHOP": return USER_SUPPLIER_SHOP;
                case "PAYMENT_METHOD_CASH": return PAYMENT_METHOD_CASH;
                case "PAYMENT_METHOD_NONCASH": return PAYMENT_METHOD_NONCASH;
                case "PAYMENT_METHOD_PREPAY": return PAYMENT_METHOD_PREPAY;
                case "PAYMENT_METHOD_POSTPAY": return PAYMENT_METHOD_POSTPAY;
                case "PAYMENT_METHOD_CONSIDERATION": return PAYMENT_METHOD_CONSIDERATION;
                case "PAYMENT_TYPE_CASH": return PAYMENT_TYPE_CASH;
                case "PAYMENT_TYPE_INCOMING_RETURNED_INVOICE": return PAYMENT_TYPE_INCOMING_RETURNED_INVOICE;
                case "PAYMENT_TYPE_PLAZIUS_BONUS": return PAYMENT_TYPE_PLAZIUS_BONUS;
                case "PAYMENT_TYPE_PLAZIUS_MOBILE": return PAYMENT_TYPE_PLAZIUS_MOBILE;
                case "PRODUCT_GROUP_PLAZIUS": return PRODUCT_GROUP_PLAZIUS;
                case "PRODUCT_PLAZIUS_ACTIVATION": return PRODUCT_PLAZIUS_ACTIVATION;
                case "PRODUCT_PLAZIUS_REPLENISH": return PRODUCT_PLAZIUS_REPLENISH;
                case "DISCOUNT_CARD_TYPE_IIKO_NET": return DISCOUNT_CARD_TYPE_IIKO_NET;
                case "DISCOUNT_CARD_TYPE_IIKO_CARD5": return DISCOUNT_CARD_TYPE_IIKO_CARD5;
                case "PAYMENT_SYSTEM_IIKO_NET": return PAYMENT_SYSTEM_IIKO_NET;
                case "IIKO_NET_SETTINGS": return IIKO_NET_SETTINGS;
                case "PAYMENT_SYSTEM_IIKO_CARD_51": return PAYMENT_SYSTEM_IIKO_CARD_51;
                case "IIKOCARD51_SETTINGS": return IIKOCARD51_SETTINGS;
                case "CHAIN_CONNECTION_SETTINGS": return CHAIN_CONNECTION_SETTINGS;
                case "UOC_REPLICATION_STATE": return UOC_REPLICATION_STATE;
                case "EDI_SYSTEM_INTERNAL_GUID": return EDI_SYSTEM_INTERNAL_GUID;
                case "EDI_SYSTEM_KONTUR_GUID": return EDI_SYSTEM_KONTUR_GUID;
                case "EDI_SYSTEM_EXTERNAL_API_GUID": return EDI_SYSTEM_EXTERNAL_API_GUID;
                case "EDI_SYSTEM_UNSPECIFIED_API_GUID": return EDI_SYSTEM_UNSPECIFIED_API_GUID;
                case "ACCOUNTING_CATEGORY_GOODS": return ACCOUNTING_CATEGORY_GOODS;
                case "ACCOUNTING_CATEGORY_FOOD": return ACCOUNTING_CATEGORY_FOOD;
                case "ACCOUNTING_CATEGORY_DRINKS": return ACCOUNTING_CATEGORY_DRINKS;
                case "ACCOUNTING_CATEGORY_HOUSEHOLD_GOODS": return ACCOUNTING_CATEGORY_HOUSEHOLD_GOODS;
                case "ACCOUNTING_CATEGORY_SERVICES": return ACCOUNTING_CATEGORY_SERVICES;
                case "ACCOUNTING_CATEGORY_OTHER": return ACCOUNTING_CATEGORY_OTHER;
                case "DISCOUNT_SERVICE_GROUP_GUID": return DISCOUNT_SERVICE_GROUP_GUID;
                case "SERVICE_FEE_ROUNDING_DOWN_GUID": return SERVICE_FEE_ROUNDING_DOWN_GUID;
                case "SERVICE_FEE_ROUNDING_PRICE_PER_UNIT_GUID": return SERVICE_FEE_ROUNDING_PRICE_PER_UNIT_GUID;
                case "PRODUCT_ROUNDING_DOWN_GUID": return PRODUCT_ROUNDING_DOWN_GUID;
                case "PRODUCT_ROUNDING_PRICE_PER_UNIT_GUID": return PRODUCT_ROUNDING_PRICE_PER_UNIT_GUID;
                case "DISCOUNT_TYPE_ROUNDING_DOWN_GUID": return DISCOUNT_TYPE_ROUNDING_DOWN_GUID;
                case "DISCOUNT_TYPE_ROUNDING_PRICE_PER_UNIT_GUID": return DISCOUNT_TYPE_ROUNDING_PRICE_PER_UNIT_GUID;
                case "DISCOUNT_TYPE_CORRECTION_DOWN_GUID": return DISCOUNT_TYPE_CORRECTION_DOWN_GUID;
                case "DISCOUNT_TYPE_CORRECTION_UP_GUID": return DISCOUNT_TYPE_CORRECTION_UP_GUID;
                case "CASHFLOW_CATEGORY_PREPAY_GUID": return CASHFLOW_CATEGORY_PREPAY_GUID;
                case "CASHFLOW_CATEGORY_GAIN_GUID": return CASHFLOW_CATEGORY_GAIN_GUID;
                case "NOTICES_STATE": return NOTICES_STATE;
                case "FRONT_BALANCES": return FRONT_BALANCES;
                case "PRODUCT_GROUP_EVOTOR": return PRODUCT_GROUP_EVOTOR;
                case "PRODUCT_OPEN_PRICE": return PRODUCT_OPEN_PRICE;
                case "COOKING_PLACE_TYPE_BAR": return COOKING_PLACE_TYPE_BAR;
                case "PRODUCT_CATEGORY_FOOD": return PRODUCT_CATEGORY_FOOD;
                case "PRODUCT_CATEGORY_DRINKS": return PRODUCT_CATEGORY_DRINKS;
                case "PRODUCT_ITEM_CATEGORY_GOODS": return PRODUCT_ITEM_CATEGORY_GOODS;
                case "PRODUCT_ITEM_CATEGORY_EXCISE_GOODS": return PRODUCT_ITEM_CATEGORY_EXCISE_GOODS;
                case "PRODUCT_ITEM_CATEGORY_WORK": return PRODUCT_ITEM_CATEGORY_WORK;
                case "PRODUCT_ITEM_CATEGORY_SERVICE": return PRODUCT_ITEM_CATEGORY_SERVICE;
                case "PRODUCT_ITEM_CATEGORY_GAMBLING_BET": return PRODUCT_ITEM_CATEGORY_GAMBLING_BET;
                case "PRODUCT_ITEM_CATEGORY_GAMBLE_WIN": return PRODUCT_ITEM_CATEGORY_GAMBLE_WIN;
                case "PRODUCT_ITEM_CATEGORY_LOTTERY_BET": return PRODUCT_ITEM_CATEGORY_LOTTERY_BET;
                case "PRODUCT_ITEM_CATEGORY_LOTTERY_WIN": return PRODUCT_ITEM_CATEGORY_LOTTERY_WIN;
                case "PRODUCT_ITEM_CATEGORY_RID": return PRODUCT_ITEM_CATEGORY_RID;
                case "PRODUCT_ITEM_CATEGORY_PAYMENT": return PRODUCT_ITEM_CATEGORY_PAYMENT;
                case "PRODUCT_ITEM_CATEGORY_AGENT_FEE": return PRODUCT_ITEM_CATEGORY_AGENT_FEE;
                case "PRODUCT_ITEM_CATEGORY_COMBINED": return PRODUCT_ITEM_CATEGORY_COMBINED;
                case "PRODUCT_ITEM_CATEGORY_OTHER": return PRODUCT_ITEM_CATEGORY_OTHER;
                case "PRODUCT_SCALE_STANDARD": return PRODUCT_SCALE_STANDARD;
                case "PRODUCT_SIZE_BIG": return PRODUCT_SIZE_BIG;
                case "PRODUCT_SIZE_SMALL": return PRODUCT_SIZE_SMALL;
                case "OUTER_ECONOMIC_ACTIVITY_CODE_2402_10_000_0": return OUTER_ECONOMIC_ACTIVITY_CODE_2402_10_000_0;
                case "OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_100_0": return OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_100_0;
                case "OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_900_0": return OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_900_0;
                case "OUTER_ECONOMIC_ACTIVITY_CODE_2402_90_000_0": return OUTER_ECONOMIC_ACTIVITY_CODE_2402_90_000_0;
                case "ALLERGEN_GROUP_1_CELERY": return ALLERGEN_GROUP_1_CELERY;
                case "ALLERGEN_GROUP_2_CEREALS": return ALLERGEN_GROUP_2_CEREALS;
                case "ALLERGEN_GROUP_3_CRUSTACEANS": return ALLERGEN_GROUP_3_CRUSTACEANS;
                case "ALLERGEN_GROUP_4_EGGS": return ALLERGEN_GROUP_4_EGGS;
                case "ALLERGEN_GROUP_5_FISH": return ALLERGEN_GROUP_5_FISH;
                case "ALLERGEN_GROUP_6_LUPIN": return ALLERGEN_GROUP_6_LUPIN;
                case "ALLERGEN_GROUP_7_MILK": return ALLERGEN_GROUP_7_MILK;
                case "ALLERGEN_GROUP_8_MOLLUSCS": return ALLERGEN_GROUP_8_MOLLUSCS;
                case "ALLERGEN_GROUP_9_MUSTARD": return ALLERGEN_GROUP_9_MUSTARD;
                case "ALLERGEN_GROUP_10_TREENUTS": return ALLERGEN_GROUP_10_TREENUTS;
                case "ALLERGEN_GROUP_11_PEANUTS": return ALLERGEN_GROUP_11_PEANUTS;
                case "ALLERGEN_GROUP_12_SESAMESEEDS": return ALLERGEN_GROUP_12_SESAMESEEDS;
                case "ALLERGEN_GROUP_13_SOYBEANS": return ALLERGEN_GROUP_13_SOYBEANS;
                case "ALLERGEN_GROUP_14_SULPHURDIOXIDEANDSULPHITES": return ALLERGEN_GROUP_14_SULPHURDIOXIDEANDSULPHITES;
                case "DELIVERY_APPEARANCE_SETTINGS": return DELIVERY_APPEARANCE_SETTINGS;
                case "DELIVERY_CANCEL_CAUSE_DEFAULT": return DELIVERY_CANCEL_CAUSE_DEFAULT;
                case "DELIVERY_CANCEL_CAUSE_MOVE": return DELIVERY_CANCEL_CAUSE_MOVE;
                case "DELIVERY_CANCEL_CAUSE_ES_DELETED": return DELIVERY_CANCEL_CAUSE_ES_DELETED;
                case "EMPTY_STREET_ID": return EMPTY_STREET_ID;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PredefinedGuids[] VALUES
        {
            get
            {
                return new []
                {
                    DB_LOCK_GLOBAL, 
                    ORDER_CUSTOMER_PERSISTENT_BUFFER, 
                    SERVER_UPGRADE_STATE, 
                    SERVER_UPGRADE_SETTINGS, 
                    PROFIT_AND_LOSS_BUDGET_NODE, 
                    PROFIT_AND_LOSS_NET_INCOME_NODE, 
                    PROFIT_AND_LOSS_SELF_COST_NODE, 
                    NO_CONCEPTION, 
                    ROLE_ADMIN, 
                    USER_SYSTEM, 
                    USER_ADMIN, 
                    USER_SYSTEM_INTEGRATION, 
                    USER_DELIVERY, 
                    USER_TRANSPORT, 
                    USER_API_IMPORT, 
                    USER_IIKO, 
                    USER_IIKOMINI, 
                    USER_PLUGIN_DEFAULT, 
                    USER_SUPPLIER_SHOP, 
                    PAYMENT_METHOD_CASH, 
                    PAYMENT_METHOD_NONCASH, 
                    PAYMENT_METHOD_PREPAY, 
                    PAYMENT_METHOD_POSTPAY, 
                    PAYMENT_METHOD_CONSIDERATION, 
                    PAYMENT_TYPE_CASH, 
                    PAYMENT_TYPE_INCOMING_RETURNED_INVOICE, 
                    PAYMENT_TYPE_PLAZIUS_BONUS, 
                    PAYMENT_TYPE_PLAZIUS_MOBILE, 
                    PRODUCT_GROUP_PLAZIUS, 
                    PRODUCT_PLAZIUS_ACTIVATION, 
                    PRODUCT_PLAZIUS_REPLENISH, 
                    DISCOUNT_CARD_TYPE_IIKO_NET, 
                    DISCOUNT_CARD_TYPE_IIKO_CARD5, 
                    PAYMENT_SYSTEM_IIKO_NET, 
                    IIKO_NET_SETTINGS, 
                    PAYMENT_SYSTEM_IIKO_CARD_51, 
                    IIKOCARD51_SETTINGS, 
                    CHAIN_CONNECTION_SETTINGS, 
                    UOC_REPLICATION_STATE, 
                    EDI_SYSTEM_INTERNAL_GUID, 
                    EDI_SYSTEM_KONTUR_GUID, 
                    EDI_SYSTEM_EXTERNAL_API_GUID, 
                    EDI_SYSTEM_UNSPECIFIED_API_GUID, 
                    ACCOUNTING_CATEGORY_GOODS, 
                    ACCOUNTING_CATEGORY_FOOD, 
                    ACCOUNTING_CATEGORY_DRINKS, 
                    ACCOUNTING_CATEGORY_HOUSEHOLD_GOODS, 
                    ACCOUNTING_CATEGORY_SERVICES, 
                    ACCOUNTING_CATEGORY_OTHER, 
                    DISCOUNT_SERVICE_GROUP_GUID, 
                    SERVICE_FEE_ROUNDING_DOWN_GUID, 
                    SERVICE_FEE_ROUNDING_PRICE_PER_UNIT_GUID, 
                    PRODUCT_ROUNDING_DOWN_GUID, 
                    PRODUCT_ROUNDING_PRICE_PER_UNIT_GUID, 
                    DISCOUNT_TYPE_ROUNDING_DOWN_GUID, 
                    DISCOUNT_TYPE_ROUNDING_PRICE_PER_UNIT_GUID, 
                    DISCOUNT_TYPE_CORRECTION_DOWN_GUID, 
                    DISCOUNT_TYPE_CORRECTION_UP_GUID, 
                    CASHFLOW_CATEGORY_PREPAY_GUID, 
                    CASHFLOW_CATEGORY_GAIN_GUID, 
                    NOTICES_STATE, 
                    FRONT_BALANCES, 
                    PRODUCT_GROUP_EVOTOR, 
                    PRODUCT_OPEN_PRICE, 
                    COOKING_PLACE_TYPE_BAR, 
                    PRODUCT_CATEGORY_FOOD, 
                    PRODUCT_CATEGORY_DRINKS, 
                    PRODUCT_ITEM_CATEGORY_GOODS, 
                    PRODUCT_ITEM_CATEGORY_EXCISE_GOODS, 
                    PRODUCT_ITEM_CATEGORY_WORK, 
                    PRODUCT_ITEM_CATEGORY_SERVICE, 
                    PRODUCT_ITEM_CATEGORY_GAMBLING_BET, 
                    PRODUCT_ITEM_CATEGORY_GAMBLE_WIN, 
                    PRODUCT_ITEM_CATEGORY_LOTTERY_BET, 
                    PRODUCT_ITEM_CATEGORY_LOTTERY_WIN, 
                    PRODUCT_ITEM_CATEGORY_RID, 
                    PRODUCT_ITEM_CATEGORY_PAYMENT, 
                    PRODUCT_ITEM_CATEGORY_AGENT_FEE, 
                    PRODUCT_ITEM_CATEGORY_COMBINED, 
                    PRODUCT_ITEM_CATEGORY_OTHER, 
                    PRODUCT_SCALE_STANDARD, 
                    PRODUCT_SIZE_BIG, 
                    PRODUCT_SIZE_SMALL, 
                    OUTER_ECONOMIC_ACTIVITY_CODE_2402_10_000_0, 
                    OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_100_0, 
                    OUTER_ECONOMIC_ACTIVITY_CODE_2402_20_900_0, 
                    OUTER_ECONOMIC_ACTIVITY_CODE_2402_90_000_0, 
                    ALLERGEN_GROUP_1_CELERY, 
                    ALLERGEN_GROUP_2_CEREALS, 
                    ALLERGEN_GROUP_3_CRUSTACEANS, 
                    ALLERGEN_GROUP_4_EGGS, 
                    ALLERGEN_GROUP_5_FISH, 
                    ALLERGEN_GROUP_6_LUPIN, 
                    ALLERGEN_GROUP_7_MILK, 
                    ALLERGEN_GROUP_8_MOLLUSCS, 
                    ALLERGEN_GROUP_9_MUSTARD, 
                    ALLERGEN_GROUP_10_TREENUTS, 
                    ALLERGEN_GROUP_11_PEANUTS, 
                    ALLERGEN_GROUP_12_SESAMESEEDS, 
                    ALLERGEN_GROUP_13_SOYBEANS, 
                    ALLERGEN_GROUP_14_SULPHURDIOXIDEANDSULPHITES, 
                    DELIVERY_APPEARANCE_SETTINGS, 
                    DELIVERY_CANCEL_CAUSE_DEFAULT, 
                    DELIVERY_CANCEL_CAUSE_MOVE, 
                    DELIVERY_CANCEL_CAUSE_ES_DELETED, 
                    EMPTY_STREET_ID
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string DataClassName
        {
            get { return dataClassName; }
        }

        public string SystemName
        {
            get { return systemName; }
        }

        public Guid Id
        {
            get { return id; }
        }

    }

    [DataClass("RestoTemp")]
    public partial class RestoTemp
    {
        private Guid requestId;
        private Guid valueId;

        protected RestoTemp() {}

        public RestoTemp(Guid requestId, Guid valueId)
        {
            this.requestId = requestId;
            this.valueId = valueId;
        }
        public Guid RequestId
        {
            get { return requestId; }
            set { requestId = value; }
        }

        public Guid ValueId
        {
            get { return valueId; }
            set { valueId = value; }
        }

    }

    [DataClass("CleanEventsDefaults")]
    [EnumClass]
    public partial class CleanEventsDefaults
    {
        public static readonly CleanEventsDefaults DEFAULT_SETTINGS = new CleanEventsDefaults("DEFAULT_SETTINGS", 60, 7);

        private readonly int eventsDaysToStore;
        private readonly int maxEventDaysToClean;
        private readonly string __value;

        private CleanEventsDefaults(string __value, int eventsDaysToStore, int maxEventDaysToClean)
        {
            this.__value = __value;
            this.eventsDaysToStore = eventsDaysToStore;
            this.maxEventDaysToClean = maxEventDaysToClean;
        }

        public static CleanEventsDefaults Parse(string value)
        {
            switch(value)
            {
                case "DEFAULT_SETTINGS": return DEFAULT_SETTINGS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CleanEventsDefaults[] VALUES
        {
            get
            {
                return new []
                {
                    DEFAULT_SETTINGS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int EventsDaysToStore
        {
            get { return eventsDaysToStore; }
        }

        public int MaxEventDaysToClean
        {
            get { return maxEventDaysToClean; }
        }

    }

    [DataClass("CleanEventsSettings")]
    public partial class CleanEventsSettings
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<WeekDays> daysOfWeek = new HashSet<WeekDays>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<TimeSpan> timesOfDay = new HashSet<TimeSpan>();
        [HasDefaultValue]
        private bool isScheduleActive = false;
        [HasDefaultValue]
        private int eventsDaysToStore = 60;
        [HasDefaultValue]
        private int maxEventDaysToClean = 7;


        [NotNull]
        public HashSet<WeekDays> DaysOfWeek
        {
            get { return daysOfWeek; }
        }

        [NotNull]
        public HashSet<TimeSpan> TimesOfDay
        {
            get { return timesOfDay; }
        }

        public bool IsScheduleActive
        {
            get { return isScheduleActive; }
            set { isScheduleActive = value; }
        }

        public int EventsDaysToStore
        {
            get { return eventsDaysToStore; }
            set { eventsDaysToStore = value; }
        }

        public int MaxEventDaysToClean
        {
            get { return maxEventDaysToClean; }
            set { maxEventDaysToClean = value; }
        }

    }

    [DataClass("DeletedEntity")]
    public partial class DeletedEntity : CachedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string entityType = "";
        private Guid? deletedEntityId;
        private Guid? departmentId;
        private DateTime created;

        protected DeletedEntity() {}

        public DeletedEntity(Guid id, string entityType, Guid? deletedEntityId, Guid? departmentId, DateTime created)
            : base(id)
        {
            this.entityType = entityType;
            this.deletedEntityId = deletedEntityId;
            this.departmentId = departmentId;
            this.created = created;
        }

        public DeletedEntity(Guid id, string entityType, DateTime created)
            : base(id)
        {
            this.entityType = entityType;
            this.created = created;
        }

        [NotNull]
        public string EntityType
        {
            get { return entityType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  entityType = value;
            }
        }

        public Guid? DeletedEntityId
        {
            get { return deletedEntityId; }
            set { deletedEntityId = value; }
        }

        public Guid? DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        public DateTime Created
        {
            get { return created; }
            set { created = value; }
        }

    }

    [DataClass("QueryRewriteRule")]
    public partial class QueryRewriteRule : Entity
    {
        private bool deleted;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string comment = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string pattern = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string replacement = "";

        protected QueryRewriteRule() {}

        public QueryRewriteRule(Guid id, bool deleted, string comment, string pattern, string replacement)
            : base(id)
        {
            this.deleted = deleted;
            this.comment = comment;
            this.pattern = pattern;
            this.replacement = replacement;
        }

        public QueryRewriteRule(Guid id, string comment, string pattern, string replacement)
            : base(id)
        {
            this.comment = comment;
            this.pattern = pattern;
            this.replacement = replacement;
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [NotNull]
        public string Comment
        {
            get { return comment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  comment = value;
            }
        }

        [NotNull]
        public string Pattern
        {
            get { return pattern; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  pattern = value;
            }
        }

        [NotNull]
        public string Replacement
        {
            get { return replacement; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  replacement = value;
            }
        }

    }

    [DataClass("ServerFingerPrintsInfo")]
    public partial class ServerFingerPrintsInfo
    {
        private string crmId;
        private string hwId;
        private Guid? dbId;
        private string installationPath;

        protected ServerFingerPrintsInfo() {}

        public ServerFingerPrintsInfo(string crmId, string hwId, Guid? dbId, string installationPath)
        {
            this.crmId = crmId;
            this.hwId = hwId;
            this.dbId = dbId;
            this.installationPath = installationPath;
        }
        public string CrmId
        {
            get { return crmId; }
            set { crmId = value; }
        }

        public string HwId
        {
            get { return hwId; }
            set { hwId = value; }
        }

        public Guid? DbId
        {
            get { return dbId; }
            set { dbId = value; }
        }

        public string InstallationPath
        {
            get { return installationPath; }
            set { installationPath = value; }
        }

    }

    [DataClass("ServerVolatileInfo")]
    public partial class ServerVolatileInfo
    {
        private string clientIpAddress;
        private string hostname;
        private int? httpPort;
        private string serverVersion;
        private DateTime? startupDate;

        protected ServerVolatileInfo() {}

        public ServerVolatileInfo(string clientIpAddress, string hostname, int? httpPort, string serverVersion, DateTime? startupDate)
        {
            this.clientIpAddress = clientIpAddress;
            this.hostname = hostname;
            this.httpPort = httpPort;
            this.serverVersion = serverVersion;
            this.startupDate = startupDate;
        }
        public string ClientIpAddress
        {
            get { return clientIpAddress; }
            set { clientIpAddress = value; }
        }

        public string Hostname
        {
            get { return hostname; }
            set { hostname = value; }
        }

        public int? HttpPort
        {
            get { return httpPort; }
            set { httpPort = value; }
        }

        public string ServerVersion
        {
            get { return serverVersion; }
            set { serverVersion = value; }
        }

        public DateTime? StartupDate
        {
            get { return startupDate; }
            set { startupDate = value; }
        }

    }

    [DataClass("BackupMode")]
    public enum BackupMode
    {
        MANUAL,
        AUTOMATIC
    }

    [DataClass("BackupSettings")]
    public partial class BackupSettings
    {
        private IncrementalBackupSchedule backupSchedule;
        private IncrementalBackupState backupState;
        private DateTime? lastEventsPurge;
        [Obsolete("Deprecated in Java code")]
        private BackupTimerSchedule schedule;
        [Obsolete("Deprecated in Java code")]
        private DayTime backupTime;
        [Obsolete("Deprecated in Java code")]
        private int dayOfWeek;
        private int numberOfBackups;
        private bool rebuildIndexes;
        [HasDefaultValue]
        private bool clearLogs = false;

        public BackupSettings() {}

        public BackupSettings(BackupTimerSchedule schedule, DayTime backupTime, int dayOfWeek, int numberOfBackups, bool rebuildIndexes)
        {
            this.schedule = schedule;
            this.backupTime = backupTime;
            this.dayOfWeek = dayOfWeek;
            this.numberOfBackups = numberOfBackups;
            this.rebuildIndexes = rebuildIndexes;
        }
        [CanBeNull]
        public IncrementalBackupSchedule BackupSchedule
        {
            get { return backupSchedule; }
            set { backupSchedule = value; }
        }

        [CanBeNull]
        public IncrementalBackupState BackupState
        {
            get { return backupState; }
            set { backupState = value; }
        }

        public DateTime? LastEventsPurge
        {
            get { return lastEventsPurge; }
            set { lastEventsPurge = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public BackupTimerSchedule Schedule
        {
            get { return schedule; }
            set { schedule = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public DayTime BackupTime
        {
            get { return backupTime; }
            set { backupTime = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public int DayOfWeek
        {
            get { return dayOfWeek; }
            set { dayOfWeek = value; }
        }

        public int NumberOfBackups
        {
            get { return numberOfBackups; }
            set { numberOfBackups = value; }
        }

        public bool RebuildIndexes
        {
            get { return rebuildIndexes; }
            set { rebuildIndexes = value; }
        }

        public bool ClearLogs
        {
            get { return clearLogs; }
            set { clearLogs = value; }
        }

    }

    [DataClass("BackupTimerSchedule")]
    public enum BackupTimerSchedule
    {
        ONE_PER_DAY,
        ONE_PER_WEEK,
        NEVER
    }

    [DataClass("DBBackupInfo")]
    public partial class DBBackupInfo
    {
        private string fileName;
        private DateTime? date;
        private BackupMode mode;
        private long fullSize;
        private User user;
        private string systemVersion;

        protected DBBackupInfo() {}

        public DBBackupInfo(string fileName, DateTime? date, long fullSize, User user)
        {
            this.fileName = fileName;
            this.date = date;
            this.fullSize = fullSize;
            this.user = user;
        }
        public string FileName
        {
            get { return fileName; }
            set { fileName = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public BackupMode Mode
        {
            get { return mode; }
            set { mode = value; }
        }

        public long FullSize
        {
            get { return fullSize; }
            set { fullSize = value; }
        }

        public User User
        {
            get { return user; }
            set { user = value; }
        }

        [CanBeNull]
        public string SystemVersion
        {
            get { return systemVersion; }
            set { systemVersion = value; }
        }

    }

    [DataClass("DBInfoParameter")]
    [EnumClass]
    public partial class DBInfoParameter : LocalizableName<DBInfoParameter>
    {
        /// <summary> Размер файлов базы данных. </summary>
        public static readonly DBInfoParameter DBFILE_SIZE = new DBInfoParameter("DBFILE_SIZE");
        /// <summary> Размер данных. </summary>
        public static readonly DBInfoParameter DATA_SIZE = new DBInfoParameter("DATA_SIZE");
        /// <summary> Размер индексов. </summary>
        public static readonly DBInfoParameter INDEXES_SIZE = new DBInfoParameter("INDEXES_SIZE");
        /// <summary> Размер лог-файла. </summary>
        public static readonly DBInfoParameter LOG_SIZE = new DBInfoParameter("LOG_SIZE");
        /// <summary> Файл базы данных. </summary>
        public static readonly DBInfoParameter DB_FILE_NAME = new DBInfoParameter("DB_FILE_NAME");
        /// <summary> Обьем свободного места на диске БД. </summary>
        public static readonly DBInfoParameter DB_DISC_FREE_SPACE = new DBInfoParameter("DB_DISC_FREE_SPACE");
        /// <summary> Количество транзакций. </summary>
        public static readonly DBInfoParameter TRANSACTION_COUNT = new DBInfoParameter("TRANSACTION_COUNT");
        /// <summary> Количество событий. </summary>
        public static readonly DBInfoParameter EVENTS_COUNT = new DBInfoParameter("EVENTS_COUNT");
        /// <summary> Путь до каталога бэкапов. </summary>
        public static readonly DBInfoParameter BACKUP_PATH = new DBInfoParameter("BACKUP_PATH");
        /// <summary> Обьем свободного места на диске бэкапов. </summary>
        public static readonly DBInfoParameter BACKUP_DISC_FREE_SPACE = new DBInfoParameter("BACKUP_DISC_FREE_SPACE");

        private readonly string __value;
        private readonly string __nameResId;

        private DBInfoParameter(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DBINFOPARAMETER_NAME_" + __value;
        }

        public static DBInfoParameter Parse(string value)
        {
            switch(value)
            {
                case "DBFILE_SIZE": return DBFILE_SIZE;
                case "DATA_SIZE": return DATA_SIZE;
                case "INDEXES_SIZE": return INDEXES_SIZE;
                case "LOG_SIZE": return LOG_SIZE;
                case "DB_FILE_NAME": return DB_FILE_NAME;
                case "DB_DISC_FREE_SPACE": return DB_DISC_FREE_SPACE;
                case "TRANSACTION_COUNT": return TRANSACTION_COUNT;
                case "EVENTS_COUNT": return EVENTS_COUNT;
                case "BACKUP_PATH": return BACKUP_PATH;
                case "BACKUP_DISC_FREE_SPACE": return BACKUP_DISC_FREE_SPACE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DBInfoParameter[] VALUES
        {
            get
            {
                return new []
                {
                    DBFILE_SIZE, 
                    DATA_SIZE, 
                    INDEXES_SIZE, 
                    LOG_SIZE, 
                    DB_FILE_NAME, 
                    DB_DISC_FREE_SPACE, 
                    TRANSACTION_COUNT, 
                    EVENTS_COUNT, 
                    BACKUP_PATH, 
                    BACKUP_DISC_FREE_SPACE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DBMaintenanceTaskType")]
    public enum DBMaintenanceTaskType
    {
        BACKUP,
        REBUILDINDEX,
        RESTART,
        CLEARLOG,
        CLEARDB,
        CLEAREVENTS,
        CLEARSAVEDIMAGE,
        SHRINKDATABASE,
        NOTHING
    }

    [DataClass("DbLastBackupStatus")]
    public partial class DbLastBackupStatus
    {
        private bool autobackupsEnabled;
        private bool lastFullBackupOK;
        private bool lastPartLogBackupOK;

        protected DbLastBackupStatus() {}

        public DbLastBackupStatus(bool autobackupsEnabled, bool lastFullBackupOK, bool lastPartLogBackupOK)
        {
            this.autobackupsEnabled = autobackupsEnabled;
            this.lastFullBackupOK = lastFullBackupOK;
            this.lastPartLogBackupOK = lastPartLogBackupOK;
        }
        public bool AutobackupsEnabled
        {
            get { return autobackupsEnabled; }
            set { autobackupsEnabled = value; }
        }

        public bool LastFullBackupOK
        {
            get { return lastFullBackupOK; }
            set { lastFullBackupOK = value; }
        }

        public bool LastPartLogBackupOK
        {
            get { return lastPartLogBackupOK; }
            set { lastPartLogBackupOK = value; }
        }

    }

    [DataClass("DatabaseBackupType")]
    [EnumClass]
    public partial class DatabaseBackupType
    {
        public static readonly DatabaseBackupType DATABASE = new DatabaseBackupType("DATABASE", "DATABASE", null, null);
        public static readonly DatabaseBackupType DATABASE_DIFFERENTIAL = new DatabaseBackupType("DATABASE_DIFFERENTIAL", "DATABASE", "DIFFERENTIAL", "DIFFERENTIAL");
        public static readonly DatabaseBackupType LOG = new DatabaseBackupType("LOG", "LOG", null, null);
        public static readonly DatabaseBackupType LOG_TAIL = new DatabaseBackupType("LOG_TAIL", "LOG", "NORECOVERY", "RECOVERY");
        public static readonly DatabaseBackupType UNSUPPORTED = new DatabaseBackupType("UNSUPPORTED", null, null, null);

        private readonly string type;
        private readonly string backupOptions;
        private readonly string restoreOptions;
        private readonly string __value;

        private DatabaseBackupType(string __value, string type, string backupOptions, string restoreOptions)
        {
            this.__value = __value;
            this.type = type;
            this.backupOptions = backupOptions;
            this.restoreOptions = restoreOptions;
        }

        public static DatabaseBackupType Parse(string value)
        {
            switch(value)
            {
                case "DATABASE": return DATABASE;
                case "DATABASE_DIFFERENTIAL": return DATABASE_DIFFERENTIAL;
                case "LOG": return LOG;
                case "LOG_TAIL": return LOG_TAIL;
                case "UNSUPPORTED": return UNSUPPORTED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DatabaseBackupType[] VALUES
        {
            get
            {
                return new []
                {
                    DATABASE, 
                    DATABASE_DIFFERENTIAL, 
                    LOG, 
                    LOG_TAIL, 
                    UNSUPPORTED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Type
        {
            get { return type; }
        }

        public string BackupOptions
        {
            get { return backupOptions; }
        }

        public string RestoreOptions
        {
            get { return restoreOptions; }
        }

    }

    [DataClass("IncrementalBackupSchedule")]
    public partial class IncrementalBackupSchedule
    {
        private DateTime? baseDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DatabaseBackupType, long> intervals = new Dictionary<DatabaseBackupType, long>();

        public IncrementalBackupSchedule() {}

        public IncrementalBackupSchedule(DateTime? baseDate)
        {
            this.baseDate = baseDate;
        }
        public DateTime? BaseDate
        {
            get { return baseDate; }
            set { baseDate = value; }
        }

        [NotNull]
        public Dictionary<DatabaseBackupType, long> Intervals
        {
            get { return intervals; }
        }

    }

    [DataClass("IncrementalBackupState")]
    public partial class IncrementalBackupState
    {
        private string backupDirectoryPath;
        private DateTime? fullBackupDate;
        private DateTime? lastDiffBackupDate;
        private DateTime? lastLogBackupDate;

        public IncrementalBackupState() {}

        public IncrementalBackupState(string backupDirectoryPath, DateTime? fullBackupDate, DateTime? lastDiffBackupDate, DateTime? lastLogBackupDate)
        {
            this.backupDirectoryPath = backupDirectoryPath;
            this.fullBackupDate = fullBackupDate;
            this.lastDiffBackupDate = lastDiffBackupDate;
            this.lastLogBackupDate = lastLogBackupDate;
        }
        public string BackupDirectoryPath
        {
            get { return backupDirectoryPath; }
            set { backupDirectoryPath = value; }
        }

        public DateTime? FullBackupDate
        {
            get { return fullBackupDate; }
            set { fullBackupDate = value; }
        }

        public DateTime? LastDiffBackupDate
        {
            get { return lastDiffBackupDate; }
            set { lastDiffBackupDate = value; }
        }

        public DateTime? LastLogBackupDate
        {
            get { return lastLogBackupDate; }
            set { lastLogBackupDate = value; }
        }

    }

    [DataClass("MetricType")]
    public enum MetricType
    {
        AVERAGE,
        TARGET,
        MINIMUM,
        MAXIMUM
    }

    [DataClass("DeliveryRegionReport")]
    public partial class DeliveryRegionReport
    {
        private List<DeliveryRegionReportRow> rows;


        public List<DeliveryRegionReportRow> Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("DeliveryRegionReportRow")]
    public partial class DeliveryRegionReportRow
    {
        private string region;
        private decimal? orderCount;
        private decimal? averageDeliveryTime;
        private decimal? maxOrderCountDay;
        private decimal? deliveredOrdersPercent;

        protected DeliveryRegionReportRow() {}

        public DeliveryRegionReportRow(string region, decimal? orderCount, decimal? averageDeliveryTime, decimal? maxOrderCountDay, decimal? deliveredOrdersPercent)
        {
            this.region = region;
            this.orderCount = orderCount;
            this.averageDeliveryTime = averageDeliveryTime;
            this.maxOrderCountDay = maxOrderCountDay;
            this.deliveredOrdersPercent = deliveredOrdersPercent;
        }
        public string Region
        {
            get { return region; }
            set { region = value; }
        }

        public decimal? OrderCount
        {
            get { return orderCount; }
            set { orderCount = value; }
        }

        public decimal? AverageDeliveryTime
        {
            get { return averageDeliveryTime; }
            set { averageDeliveryTime = value; }
        }

        public decimal? MaxOrderCountDay
        {
            get { return maxOrderCountDay; }
            set { maxOrderCountDay = value; }
        }

        public decimal? DeliveredOrdersPercent
        {
            get { return deliveredOrdersPercent; }
            set { deliveredOrdersPercent = value; }
        }

    }

    [DataClass("ConsolidatedReportRow")]
    public partial class ConsolidatedReportRow
    {
        private DateTime? date;
        private decimal? orderCount;
        private decimal? avgReceipt;
        private decimal? orderCountCourier;
        private decimal? orderCountPickup;
        private decimal? revenue;
        private decimal? ratioCostWriteoff;
        private decimal? planExecutionPercent;
        private decimal? dishAmount;
        private decimal? dishAmountPerOrder;

        public ConsolidatedReportRow() {}

        public ConsolidatedReportRow(DateTime? date, decimal? orderCount, decimal? avgReceipt, decimal? orderCountCourier, decimal? orderCountPickup, decimal? revenue, decimal? ratioCostWriteoff, decimal? planExecutionPercent, decimal? dishAmount, decimal? dishAmountPerOrder)
        {
            this.date = date;
            this.orderCount = orderCount;
            this.avgReceipt = avgReceipt;
            this.orderCountCourier = orderCountCourier;
            this.orderCountPickup = orderCountPickup;
            this.revenue = revenue;
            this.ratioCostWriteoff = ratioCostWriteoff;
            this.planExecutionPercent = planExecutionPercent;
            this.dishAmount = dishAmount;
            this.dishAmountPerOrder = dishAmountPerOrder;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public decimal? OrderCount
        {
            get { return orderCount; }
            set { orderCount = value; }
        }

        public decimal? AvgReceipt
        {
            get { return avgReceipt; }
            set { avgReceipt = value; }
        }

        public decimal? OrderCountCourier
        {
            get { return orderCountCourier; }
            set { orderCountCourier = value; }
        }

        public decimal? OrderCountPickup
        {
            get { return orderCountPickup; }
            set { orderCountPickup = value; }
        }

        public decimal? Revenue
        {
            get { return revenue; }
            set { revenue = value; }
        }

        public decimal? RatioCostWriteoff
        {
            get { return ratioCostWriteoff; }
            set { ratioCostWriteoff = value; }
        }

        public decimal? PlanExecutionPercent
        {
            get { return planExecutionPercent; }
            set { planExecutionPercent = value; }
        }

        public decimal? DishAmount
        {
            get { return dishAmount; }
            set { dishAmount = value; }
        }

        public decimal? DishAmountPerOrder
        {
            get { return dishAmountPerOrder; }
            set { dishAmountPerOrder = value; }
        }

    }

    [DataClass("DeliveryConsolidatedReport")]
    public partial class DeliveryConsolidatedReport
    {
        private List<ConsolidatedReportRow> rows;


        public List<ConsolidatedReportRow> Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("DeliveryCourierMetricRow")]
    public partial class DeliveryCourierMetricRow
    {
        private MetricType metricType;
        private decimal? totalTime;
        private decimal? onTheWayTime;
        private decimal? doubleOrders;
        private decimal? tripleOrders;
        private decimal? orderCount;

        public DeliveryCourierMetricRow() {}

        public DeliveryCourierMetricRow(MetricType metricType, decimal? totalTime, decimal? onTheWayTime, decimal? doubleOrders, decimal? tripleOrders, decimal? orderCount)
        {
            this.metricType = metricType;
            this.totalTime = totalTime;
            this.onTheWayTime = onTheWayTime;
            this.doubleOrders = doubleOrders;
            this.tripleOrders = tripleOrders;
            this.orderCount = orderCount;
        }
        public MetricType MetricType
        {
            get { return metricType; }
            set { metricType = value; }
        }

        public decimal? TotalTime
        {
            get { return totalTime; }
            set { totalTime = value; }
        }

        public decimal? OnTheWayTime
        {
            get { return onTheWayTime; }
            set { onTheWayTime = value; }
        }

        public decimal? DoubleOrders
        {
            get { return doubleOrders; }
            set { doubleOrders = value; }
        }

        public decimal? TripleOrders
        {
            get { return tripleOrders; }
            set { tripleOrders = value; }
        }

        public decimal? OrderCount
        {
            get { return orderCount; }
            set { orderCount = value; }
        }

    }

    [DataClass("DeliveryCourierReport")]
    public partial class DeliveryCourierReport
    {
        private List<DeliveryCourierReportRow> rows;


        public List<DeliveryCourierReportRow> Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("DeliveryCourierReportRow")]
    public partial class DeliveryCourierReportRow
    {
        private string courier;
        private List<DeliveryCourierMetricRow> metrics;

        public DeliveryCourierReportRow() {}

        public DeliveryCourierReportRow(string courier)
        {
            this.courier = courier;
        }
        public string Courier
        {
            get { return courier; }
            set { courier = value; }
        }

        public List<DeliveryCourierMetricRow> Metrics
        {
            get { return metrics; }
            set { metrics = value; }
        }

    }

    [DataClass("HalfHourMetricRow")]
    public partial class HalfHourMetricRow
    {
        private DeliveryType deliveryType;
        private decimal? dishAmount;
        private decimal? orderCount;
        private decimal? avgReceipt;
        private decimal? avgDishAmountPerReceipt;

        protected HalfHourMetricRow() {}

        public HalfHourMetricRow(DeliveryType deliveryType, decimal? dishAmount, decimal? orderCount, decimal? avgReceipt, decimal? avgDishAmountPerReceipt)
        {
            this.deliveryType = deliveryType;
            this.dishAmount = dishAmount;
            this.orderCount = orderCount;
            this.avgReceipt = avgReceipt;
            this.avgDishAmountPerReceipt = avgDishAmountPerReceipt;
        }
        public DeliveryType DeliveryType
        {
            get { return deliveryType; }
            set { deliveryType = value; }
        }

        public decimal? DishAmount
        {
            get { return dishAmount; }
            set { dishAmount = value; }
        }

        public decimal? OrderCount
        {
            get { return orderCount; }
            set { orderCount = value; }
        }

        public decimal? AvgReceipt
        {
            get { return avgReceipt; }
            set { avgReceipt = value; }
        }

        public decimal? AvgDishAmountPerReceipt
        {
            get { return avgDishAmountPerReceipt; }
            set { avgDishAmountPerReceipt = value; }
        }

    }

    [DataClass("HalfHourReport")]
    public partial class HalfHourReport
    {
        private List<HalfHourReportRow> rows;


        public List<HalfHourReportRow> Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("HalfHourReportRow")]
    public partial class HalfHourReportRow
    {
        private DateTime? halfHourDate;
        private List<HalfHourMetricRow> metrics;

        protected HalfHourReportRow() {}

        public HalfHourReportRow(DateTime? halfHourDate)
        {
            this.halfHourDate = halfHourDate;
        }
        public DateTime? HalfHourDate
        {
            get { return halfHourDate; }
            set { halfHourDate = value; }
        }

        public List<HalfHourMetricRow> Metrics
        {
            get { return metrics; }
            set { metrics = value; }
        }

    }

    [DataClass("DeliveryLoyaltyRegionRow")]
    public partial class DeliveryLoyaltyRegionRow
    {
        private string region;
        private decimal? orderCount;

        public DeliveryLoyaltyRegionRow() {}

        public DeliveryLoyaltyRegionRow(string region, decimal? orderCount)
        {
            this.region = region;
            this.orderCount = orderCount;
        }
        public string Region
        {
            get { return region; }
            set { region = value; }
        }

        public decimal? OrderCount
        {
            get { return orderCount; }
            set { orderCount = value; }
        }

    }

    [DataClass("DeliveryLoyaltyReport")]
    public partial class DeliveryLoyaltyReport
    {
        private List<DeliveryLoyaltyReportRow> rows;


        public List<DeliveryLoyaltyReportRow> Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("DeliveryLoyaltyReportRow")]
    public partial class DeliveryLoyaltyReportRow
    {
        private DateTime? date;
        private MetricType metricType;
        private decimal? totalOrderCount;
        private decimal? orderCountPerGuest;
        private decimal? newGuestCount;
        private List<DeliveryLoyaltyRegionRow> regionRows;

        protected DeliveryLoyaltyReportRow() {}

        public DeliveryLoyaltyReportRow(DateTime? date, MetricType metricType, decimal? totalOrderCount, decimal? orderCountPerGuest, decimal? newGuestCount)
        {
            this.date = date;
            this.metricType = metricType;
            this.totalOrderCount = totalOrderCount;
            this.orderCountPerGuest = orderCountPerGuest;
            this.newGuestCount = newGuestCount;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public MetricType MetricType
        {
            get { return metricType; }
            set { metricType = value; }
        }

        public decimal? TotalOrderCount
        {
            get { return totalOrderCount; }
            set { totalOrderCount = value; }
        }

        public decimal? OrderCountPerGuest
        {
            get { return orderCountPerGuest; }
            set { orderCountPerGuest = value; }
        }

        public decimal? NewGuestCount
        {
            get { return newGuestCount; }
            set { newGuestCount = value; }
        }

        public List<DeliveryLoyaltyRegionRow> RegionRows
        {
            get { return regionRows; }
            set { regionRows = value; }
        }

    }

    [DataClass("DeliveryOrderCycleMetricRow")]
    public partial class DeliveryOrderCycleMetricRow
    {
        private MetricType metricType;
        private decimal? pizzaTime;
        private decimal? cuttingTime;
        private decimal? onShelfTime;
        private decimal? inRestaurantTime;
        private decimal? onTheWayTime;
        private decimal? totalTime;

        protected DeliveryOrderCycleMetricRow() {}

        public DeliveryOrderCycleMetricRow(MetricType metricType, decimal? pizzaTime, decimal? cuttingTime, decimal? onShelfTime, decimal? inRestaurantTime, decimal? onTheWayTime, decimal? totalTime)
        {
            this.metricType = metricType;
            this.pizzaTime = pizzaTime;
            this.cuttingTime = cuttingTime;
            this.onShelfTime = onShelfTime;
            this.inRestaurantTime = inRestaurantTime;
            this.onTheWayTime = onTheWayTime;
            this.totalTime = totalTime;
        }
        public MetricType MetricType
        {
            get { return metricType; }
            set { metricType = value; }
        }

        public decimal? PizzaTime
        {
            get { return pizzaTime; }
            set { pizzaTime = value; }
        }

        public decimal? CuttingTime
        {
            get { return cuttingTime; }
            set { cuttingTime = value; }
        }

        public decimal? OnShelfTime
        {
            get { return onShelfTime; }
            set { onShelfTime = value; }
        }

        public decimal? InRestaurantTime
        {
            get { return inRestaurantTime; }
            set { inRestaurantTime = value; }
        }

        public decimal? OnTheWayTime
        {
            get { return onTheWayTime; }
            set { onTheWayTime = value; }
        }

        public decimal? TotalTime
        {
            get { return totalTime; }
            set { totalTime = value; }
        }

    }

    [DataClass("DeliveryOrderCycleReport")]
    public partial class DeliveryOrderCycleReport
    {
        private List<DeliveryOrderCycleMetricRow> rows;


        public List<DeliveryOrderCycleMetricRow> Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("DeliveryPluginProtocol")]
    [EnumClass]
    public partial class DeliveryPluginProtocol
    {
        public static readonly DeliveryPluginProtocol ZERO_VERSION = new DeliveryPluginProtocol("ZERO_VERSION", 0, "Protocol of old plugin version");
        public static readonly DeliveryPluginProtocol BASIC = new DeliveryPluginProtocol("BASIC", 1, "Basic protocol");
        public static readonly DeliveryPluginProtocol SELF_SERVICE = new DeliveryPluginProtocol("SELF_SERVICE", 2, "Self-service");
        public static readonly DeliveryPluginProtocol DELIVERY_ORDER_GUESTS = new DeliveryPluginProtocol("DELIVERY_ORDER_GUESTS", 3, "Delivery order guests");
        public static readonly DeliveryPluginProtocol STATUSES_CONFIRMATION_AND_DELIVERED_WITH_CLOSED_SPLIT = new DeliveryPluginProtocol("STATUSES_CONFIRMATION_AND_DELIVERED_WITH_CLOSED_SPLIT", 4, "Statuses split: Confirmation and Delivered/Closed");
        public static readonly DeliveryPluginProtocol DELIVERY_DURATION_TIME = new DeliveryPluginProtocol("DELIVERY_DURATION_TIME", 5, "Add delivery duration field which calculated by cartography");
        public static readonly DeliveryPluginProtocol DELIVERY_NUMBER_SEQUENT = new DeliveryPluginProtocol("DELIVERY_NUMBER_SEQUENT", 6, "Delivery number sequent generation");
        public static readonly DeliveryPluginProtocol MARKETING_SOURCE = new DeliveryPluginProtocol("MARKETING_SOURCE", 7, "Adding marketing source");
        public static readonly DeliveryPluginProtocol ORDER_LOCATION = new DeliveryPluginProtocol("ORDER_LOCATION", 8, "Order location");
        public static readonly DeliveryPluginProtocol DELIVERY_FRONT_EVENTS_GENERATION = new DeliveryPluginProtocol("DELIVERY_FRONT_EVENTS_GENERATION", 9, "Delivery events generation on iikoFront");
        public static readonly DeliveryPluginProtocol ORDER_TYPE = new DeliveryPluginProtocol("ORDER_TYPE", 10, "Order type");
        public static readonly DeliveryPluginProtocol MULTIPLE_CASH_REGISTERS = new DeliveryPluginProtocol("MULTIPLE_CASH_REGISTERS", 11, "Multiple cash registers support for delivery");
        public static readonly DeliveryPluginProtocol IIKONET_SIMPLE_AUTHORIZATION_AND_MARKETING_CAMPAIGNS = new DeliveryPluginProtocol("IIKONET_SIMPLE_AUTHORIZATION_AND_MARKETING_CAMPAIGNS", 12, "Call-center integration with Plazius");
        public static readonly DeliveryPluginProtocol CUSTOMER_OPINION = new DeliveryPluginProtocol("CUSTOMER_OPINION", 13, "Customer opinion");
        public static readonly DeliveryPluginProtocol EXTERNAL_PAYMENT_SYSTEMS_WRITEOFF_AND_VOUCHER_SUPPORT = new DeliveryPluginProtocol("EXTERNAL_PAYMENT_SYSTEMS_WRITEOFF_AND_VOUCHER_SUPPORT", 14, "Extended payment types support");
        public static readonly DeliveryPluginProtocol DELAY_PREDICTION = new DeliveryPluginProtocol("DELAY_PREDICTION", 15, "Delivery delay prediction");
        public static readonly DeliveryPluginProtocol CORPIT_SERVICE = new DeliveryPluginProtocol("CORPIT_SERVICE", 16, "Integration with corpit service moved from iiko.net to iiko.biz");
        public static readonly DeliveryPluginProtocol IIKO_CARD_5 = new DeliveryPluginProtocol("IIKO_CARD_5", 17, "Integration with iikoCard5 in iikoCallCenter and iikoDelivery");
        public static readonly DeliveryPluginProtocol IIKO_CARD_51 = new DeliveryPluginProtocol("IIKO_CARD_51", 18, "Integration with iikoCard51");
        public static readonly DeliveryPluginProtocol MULTI_DISCOUNTS = new DeliveryPluginProtocol("MULTI_DISCOUNTS", 19, "Multi discount support in CallCenter");
        public static readonly DeliveryPluginProtocol COURIER_ASSIGNATION = new DeliveryPluginProtocol("COURIER_ASSIGNATION", 20, "Courier assignation support in CallCenter");
        public static readonly DeliveryPluginProtocol EXCHANGE_BY_DTOS = new DeliveryPluginProtocol("EXCHANGE_BY_DTOS", 21, "Exchange uses DTOs for transfer data, breaking change for serialization");
        public static readonly DeliveryPluginProtocol SERVICE_FEE_ROUNDINGS = new DeliveryPluginProtocol("SERVICE_FEE_ROUNDINGS", 22, "Service fee roundings support in CallCenter");
        public static readonly DeliveryPluginProtocol CUSTOMER_CARD_NUMBER_ANY_SYMBOLS = new DeliveryPluginProtocol("CUSTOMER_CARD_NUMBER_ANY_SYMBOLS", 23, "Customer card number with letters and digits support in CallCenter");
        public static readonly DeliveryPluginProtocol ORDER_TYPE_CHANGE = new DeliveryPluginProtocol("ORDER_TYPE_CHANGE", 24, "Delivery order type change");
        public static readonly DeliveryPluginProtocol UAE_ADDRESSING_SYSTEM = new DeliveryPluginProtocol("UAE_ADDRESSING_SYSTEM", 25, "UAE addressing system support");
        public static readonly DeliveryPluginProtocol PDP_NEW_CONSENTS = new DeliveryPluginProtocol("PDP_NEW_CONSENTS", 26, "Personal data processing consents");
        public static readonly DeliveryPluginProtocol NULLABLE_CUSTOMER = new DeliveryPluginProtocol("NULLABLE_CUSTOMER", 27, "Customer can be null");
        public static readonly DeliveryPluginProtocol UAE_ADDRESSING_SYSTEM_INCREASE_DETAILS_LENGTH = new DeliveryPluginProtocol("UAE_ADDRESSING_SYSTEM_INCREASE_DETAILS_LENGTH", 28, "UAE addressing system: increase length of address details");
        public static readonly DeliveryPluginProtocol ADDRESSLINE1LINE2 = new DeliveryPluginProtocol("ADDRESSLINE1LINE2", 29, "Support format address with line 1, line 2.");
        public static readonly DeliveryPluginProtocol LAST_ELEMENT = new DeliveryPluginProtocol("LAST_ELEMENT", 29, "Dummy version for internal purpose");

        private readonly int version;
        private readonly string description;
        private readonly string __value;

        private DeliveryPluginProtocol(string __value, int version, string description)
        {
            this.__value = __value;
            this.version = version;
            this.description = description;
        }

        public static DeliveryPluginProtocol Parse(string value)
        {
            switch(value)
            {
                case "ZERO_VERSION": return ZERO_VERSION;
                case "BASIC": return BASIC;
                case "SELF_SERVICE": return SELF_SERVICE;
                case "DELIVERY_ORDER_GUESTS": return DELIVERY_ORDER_GUESTS;
                case "STATUSES_CONFIRMATION_AND_DELIVERED_WITH_CLOSED_SPLIT": return STATUSES_CONFIRMATION_AND_DELIVERED_WITH_CLOSED_SPLIT;
                case "DELIVERY_DURATION_TIME": return DELIVERY_DURATION_TIME;
                case "DELIVERY_NUMBER_SEQUENT": return DELIVERY_NUMBER_SEQUENT;
                case "MARKETING_SOURCE": return MARKETING_SOURCE;
                case "ORDER_LOCATION": return ORDER_LOCATION;
                case "DELIVERY_FRONT_EVENTS_GENERATION": return DELIVERY_FRONT_EVENTS_GENERATION;
                case "ORDER_TYPE": return ORDER_TYPE;
                case "MULTIPLE_CASH_REGISTERS": return MULTIPLE_CASH_REGISTERS;
                case "IIKONET_SIMPLE_AUTHORIZATION_AND_MARKETING_CAMPAIGNS": return IIKONET_SIMPLE_AUTHORIZATION_AND_MARKETING_CAMPAIGNS;
                case "CUSTOMER_OPINION": return CUSTOMER_OPINION;
                case "EXTERNAL_PAYMENT_SYSTEMS_WRITEOFF_AND_VOUCHER_SUPPORT": return EXTERNAL_PAYMENT_SYSTEMS_WRITEOFF_AND_VOUCHER_SUPPORT;
                case "DELAY_PREDICTION": return DELAY_PREDICTION;
                case "CORPIT_SERVICE": return CORPIT_SERVICE;
                case "IIKO_CARD_5": return IIKO_CARD_5;
                case "IIKO_CARD_51": return IIKO_CARD_51;
                case "MULTI_DISCOUNTS": return MULTI_DISCOUNTS;
                case "COURIER_ASSIGNATION": return COURIER_ASSIGNATION;
                case "EXCHANGE_BY_DTOS": return EXCHANGE_BY_DTOS;
                case "SERVICE_FEE_ROUNDINGS": return SERVICE_FEE_ROUNDINGS;
                case "CUSTOMER_CARD_NUMBER_ANY_SYMBOLS": return CUSTOMER_CARD_NUMBER_ANY_SYMBOLS;
                case "ORDER_TYPE_CHANGE": return ORDER_TYPE_CHANGE;
                case "UAE_ADDRESSING_SYSTEM": return UAE_ADDRESSING_SYSTEM;
                case "PDP_NEW_CONSENTS": return PDP_NEW_CONSENTS;
                case "NULLABLE_CUSTOMER": return NULLABLE_CUSTOMER;
                case "UAE_ADDRESSING_SYSTEM_INCREASE_DETAILS_LENGTH": return UAE_ADDRESSING_SYSTEM_INCREASE_DETAILS_LENGTH;
                case "ADDRESSLINE1LINE2": return ADDRESSLINE1LINE2;
                case "LAST_ELEMENT": return LAST_ELEMENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryPluginProtocol[] VALUES
        {
            get
            {
                return new []
                {
                    ZERO_VERSION, 
                    BASIC, 
                    SELF_SERVICE, 
                    DELIVERY_ORDER_GUESTS, 
                    STATUSES_CONFIRMATION_AND_DELIVERED_WITH_CLOSED_SPLIT, 
                    DELIVERY_DURATION_TIME, 
                    DELIVERY_NUMBER_SEQUENT, 
                    MARKETING_SOURCE, 
                    ORDER_LOCATION, 
                    DELIVERY_FRONT_EVENTS_GENERATION, 
                    ORDER_TYPE, 
                    MULTIPLE_CASH_REGISTERS, 
                    IIKONET_SIMPLE_AUTHORIZATION_AND_MARKETING_CAMPAIGNS, 
                    CUSTOMER_OPINION, 
                    EXTERNAL_PAYMENT_SYSTEMS_WRITEOFF_AND_VOUCHER_SUPPORT, 
                    DELAY_PREDICTION, 
                    CORPIT_SERVICE, 
                    IIKO_CARD_5, 
                    IIKO_CARD_51, 
                    MULTI_DISCOUNTS, 
                    COURIER_ASSIGNATION, 
                    EXCHANGE_BY_DTOS, 
                    SERVICE_FEE_ROUNDINGS, 
                    CUSTOMER_CARD_NUMBER_ANY_SYMBOLS, 
                    ORDER_TYPE_CHANGE, 
                    UAE_ADDRESSING_SYSTEM, 
                    PDP_NEW_CONSENTS, 
                    NULLABLE_CUSTOMER, 
                    UAE_ADDRESSING_SYSTEM_INCREASE_DETAILS_LENGTH, 
                    ADDRESSLINE1LINE2, 
                    LAST_ELEMENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Version
        {
            get { return version; }
        }

        public string Description
        {
            get { return description; }
        }

    }

    [DataClass("DeliveryTerminal")]
    public partial class DeliveryTerminal : CachedEntity
    {
        private Terminal terminal;
        private Conception conception;
        private bool registered;
        private bool deleted;
        private string name;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string customName = "";
        private Guid? departmentEntityId;
        private Guid? groupId;
        private DeliveryTerminalSettings terminalSettings;
        private string fullRMSVersion;
        private int? protocolVersion;
        private ClientPriceCategory clientPriceCategory;
        private string address;
        private string technicalInformation;
        private DeliveryTerminalTimeZoneInfo timeZoneInfo;

        protected DeliveryTerminal() {}

        public DeliveryTerminal(Guid id, bool registered, bool deleted, string name, string fullRMSVersion)
            : base(id)
        {
            this.registered = registered;
            this.deleted = deleted;
            this.name = name;
            this.fullRMSVersion = fullRMSVersion;
        }

        public DeliveryTerminal(Guid id)
            : base(id)
        {

        }

        [CanBeNull]
        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        public bool Registered
        {
            get { return registered; }
            set { registered = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [NotNull]
        public string CustomName
        {
            get { return customName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  customName = value;
            }
        }

        public Guid? DepartmentEntityId
        {
            get { return departmentEntityId; }
            set { departmentEntityId = value; }
        }

        public Guid? GroupId
        {
            get { return groupId; }
            set { groupId = value; }
        }

        [CanBeNull]
        public DeliveryTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

        public string FullRMSVersion
        {
            get { return fullRMSVersion; }
            set { fullRMSVersion = value; }
        }

        public int? ProtocolVersion
        {
            get { return protocolVersion; }
            set { protocolVersion = value; }
        }

        [CanBeNull]
        public ClientPriceCategory ClientPriceCategory
        {
            get { return clientPriceCategory; }
            set { clientPriceCategory = value; }
        }

        [CanBeNull]
        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        [CanBeNull]
        public string TechnicalInformation
        {
            get { return technicalInformation; }
            set { technicalInformation = value; }
        }

        [CanBeNull]
        public DeliveryTerminalTimeZoneInfo TimeZoneInfo
        {
            get { return timeZoneInfo; }
            set { timeZoneInfo = value; }
        }

    }

    [DataClass("DeliveryTerminalExchangeState")]
    public partial class DeliveryTerminalExchangeState : CachedEntity
    {
        private Guid? terminalId;
        [NotNull, NotNullField]
        private DeliveryTerminal deliveryTerminal;
        private int knownRevision;
        private DateTime? lastExchangeDate;

        protected DeliveryTerminalExchangeState() {}

        public DeliveryTerminalExchangeState(Guid id, DeliveryTerminal deliveryTerminal, int knownRevision)
            : base(id)
        {
            this.deliveryTerminal = deliveryTerminal;
            this.knownRevision = knownRevision;
        }

        public DeliveryTerminalExchangeState(Guid id, DeliveryTerminal deliveryTerminal)
            : base(id)
        {
            this.deliveryTerminal = deliveryTerminal;
        }

        public Guid? TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

        [NotNull]
        public DeliveryTerminal DeliveryTerminal
        {
            get { return deliveryTerminal; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  deliveryTerminal = value;
            }
        }

        public int KnownRevision
        {
            get { return knownRevision; }
            set { knownRevision = value; }
        }

        public DateTime? LastExchangeDate
        {
            get { return lastExchangeDate; }
            set { lastExchangeDate = value; }
        }

    }

    [DataClass("DeliveryTerminalSettings")]
    public partial class DeliveryTerminalSettings
    {
        [Obsolete("Deprecated in Java code")]
        private int averageDeliveryProcessingTimeInMinutes;
        private int? averageDeliverySelfServiceProcessingTimeInMinutes;

        protected DeliveryTerminalSettings() {}

        public DeliveryTerminalSettings(int averageDeliveryProcessingTimeInMinutes, int? averageDeliverySelfServiceProcessingTimeInMinutes)
        {
            this.averageDeliveryProcessingTimeInMinutes = averageDeliveryProcessingTimeInMinutes;
            this.averageDeliverySelfServiceProcessingTimeInMinutes = averageDeliverySelfServiceProcessingTimeInMinutes;
        }
        [Obsolete("Deprecated in Java code")]
        public int AverageDeliveryProcessingTimeInMinutes
        {
            get { return averageDeliveryProcessingTimeInMinutes; }
            set { averageDeliveryProcessingTimeInMinutes = value; }
        }

        public int? AverageDeliverySelfServiceProcessingTimeInMinutes
        {
            get { return averageDeliverySelfServiceProcessingTimeInMinutes; }
            set { averageDeliverySelfServiceProcessingTimeInMinutes = value; }
        }

    }

    [DataClass("DeliveryTerminalTimeZoneCheckInfo")]
    public partial class DeliveryTerminalTimeZoneCheckInfo
    {
        private long? utc;
        private string local;


        public long? Utc
        {
            get { return utc; }
            set { utc = value; }
        }

        [CanBeNull]
        public string Local
        {
            get { return local; }
            set { local = value; }
        }

    }

    [DataClass("DeliveryTerminalTimeZoneInfo")]
    public partial class DeliveryTerminalTimeZoneInfo
    {
        private string tzId;
        private string windowsId;
        private DeliveryTerminalTimeZoneCheckInfo current;
        private DeliveryTerminalTimeZoneCheckInfo future;


        [CanBeNull]
        public string TzId
        {
            get { return tzId; }
            set { tzId = value; }
        }

        [CanBeNull]
        public string WindowsId
        {
            get { return windowsId; }
            set { windowsId = value; }
        }

        [CanBeNull]
        public DeliveryTerminalTimeZoneCheckInfo Current
        {
            get { return current; }
            set { current = value; }
        }

        [CanBeNull]
        public DeliveryTerminalTimeZoneCheckInfo Future
        {
            get { return future; }
            set { future = value; }
        }

    }

    [DataClass("AgentDevice")]
    public abstract partial class AgentDevice : LocalizableNamePersistedEntity
    {
        private Guid? agentId;
        private AgentDriver driver;
        private DeviceSettings settings;

        protected AgentDevice() {}

        protected AgentDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name)
        {
            this.agentId = agentId;
            this.driver = driver;
        }

        protected AgentDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public Guid? AgentId
        {
            get { return agentId; }
            set { agentId = value; }
        }

        public AgentDriver Driver
        {
            get { return driver; }
            set { driver = value; }
        }

        [CanBeNull]
        public DeviceSettings Settings
        {
            get { return settings; }
            set { settings = value; }
        }

    }

    [DataClass("AgentDocument")]
    public partial class AgentDocument
    {
        private List<string> lines;


        public List<string> Lines
        {
            get { return lines; }
            set { lines = value; }
        }

    }

    [DataClass("AgentDriver")]
    public partial interface AgentDriver
    {

    }

    [RootEntity]
    [DataClass("Camera")]
    public partial class Camera : AgentDevice
    {
        private DateTime? createTime;
        private DateTime? deleteTime;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<AgentDevice> spyDevices = new HashSet<AgentDevice>();

        protected Camera() {}

        public Camera(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name, agentId, driver)
        {

        }

        public Camera(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public DateTime? CreateTime
        {
            get { return createTime; }
            set { createTime = value; }
        }

        public DateTime? DeleteTime
        {
            get { return deleteTime; }
            set { deleteTime = value; }
        }

        [NotNull]
        public HashSet<AgentDevice> SpyDevices
        {
            get { return spyDevices; }
        }

    }

    [DataClass("CameraDriver")]
    public partial class CameraDriver : AgentDriver
    {


    }

    [RootEntity]
    [DataClass("CashRegister")]
    public partial class CashRegister : AgentDevice, IPrinterDevice, ICashDrawerCommonTask
    {
        private int number;
        private int charCount;
        private string serialNumber;
        private CashRegisterConnectingStatus status;
        private string externalDeviceDescription;
        [HasDefaultValue]
        private bool fullCheque = true;
        [HasDefaultValue]
        private string ofdProtocolVersion = "";
        [HasDefaultValue]
        private bool printNds = false;
        [HasDefaultValue]
        private bool checkCashDrawer = false;
        [HasDefaultValue]
        private bool printChange = true;
        [NotNull, NotNullField]
        private CashRegisterCloseEncashmentSetup closeEncashmentSetup;
        private decimal? bookCash;
        [HasDefaultValue]
        private bool printOrderNumber = true;
        [HasDefaultValue]
        private bool useCustomerDisplay = false;
        private InternalCustomerDisplaySettings customerDisplaySettings;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<CashDrawerHolder> cashDrawers = new List<CashDrawerHolder>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PaymentTypeToRegisterIdMapping> paymentTypeToRegisterIdMappings = new List<PaymentTypeToRegisterIdMapping>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<FiscalRegisterPaymentTypeInfo> fiscalRegisterPaymentTypeInfo = new List<FiscalRegisterPaymentTypeInfo>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<TaxCategoryToTaxItemMapping> taxCategoryToTaxItemMapping = new List<TaxCategoryToTaxItemMapping>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<FiscalRegisterTaxItem> taxItems = new List<FiscalRegisterTaxItem>();
        private SettlementPlace commonSettlementPlace;
        private SettlementPlace deliveryByCourierSettlementPlace;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashRegister() {}

        public CashRegister(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver, int number, int charCount, CashRegisterConnectingStatus status, CashRegisterCloseEncashmentSetup closeEncashmentSetup, decimal? bookCash)
            : base(id, name, agentId, driver)
        {
            this.number = number;
            this.charCount = charCount;
            this.status = status;
            this.closeEncashmentSetup = closeEncashmentSetup;
            this.bookCash = bookCash;
        }

        public CashRegister(Guid id, LocalizableValue name, CashRegisterConnectingStatus status, CashRegisterCloseEncashmentSetup closeEncashmentSetup)
            : base(id, name)
        {
            this.status = status;
            this.closeEncashmentSetup = closeEncashmentSetup;
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public int CharCount
        {
            get { return charCount; }
            set { charCount = value; }
        }

        [CanBeNull]
        public string SerialNumber
        {
            get { return serialNumber; }
            set { serialNumber = value; }
        }

        public CashRegisterConnectingStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        [CanBeNull]
        public string ExternalDeviceDescription
        {
            get { return externalDeviceDescription; }
            set { externalDeviceDescription = value; }
        }

        public bool FullCheque
        {
            get { return fullCheque; }
            set { fullCheque = value; }
        }

        public string OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

        public bool PrintNds
        {
            get { return printNds; }
            set { printNds = value; }
        }

        public bool CheckCashDrawer
        {
            get { return checkCashDrawer; }
            set { checkCashDrawer = value; }
        }

        public bool PrintChange
        {
            get { return printChange; }
            set { printChange = value; }
        }

        [NotNull]
        public CashRegisterCloseEncashmentSetup CloseEncashmentSetup
        {
            get { return closeEncashmentSetup; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  closeEncashmentSetup = value;
            }
        }

        public decimal? BookCash
        {
            get { return bookCash; }
            set { bookCash = value; }
        }

        public bool PrintOrderNumber
        {
            get { return printOrderNumber; }
            set { printOrderNumber = value; }
        }

        public bool UseCustomerDisplay
        {
            get { return useCustomerDisplay; }
            set { useCustomerDisplay = value; }
        }

        [CanBeNull]
        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

        [NotNull]
        public List<CashDrawerHolder> CashDrawers
        {
            get { return cashDrawers; }
        }

        [NotNull]
        public List<PaymentTypeToRegisterIdMapping> PaymentTypeToRegisterIdMappings
        {
            get { return paymentTypeToRegisterIdMappings; }
        }

        [NotNull]
        public List<FiscalRegisterPaymentTypeInfo> FiscalRegisterPaymentTypeInfo
        {
            get { return fiscalRegisterPaymentTypeInfo; }
        }

        [NotNull]
        public List<TaxCategoryToTaxItemMapping> TaxCategoryToTaxItemMapping
        {
            get { return taxCategoryToTaxItemMapping; }
        }

        [NotNull]
        public List<FiscalRegisterTaxItem> TaxItems
        {
            get { return taxItems; }
        }

        [CanBeNull]
        public SettlementPlace CommonSettlementPlace
        {
            get { return commonSettlementPlace; }
            set { commonSettlementPlace = value; }
        }

        [CanBeNull]
        public SettlementPlace DeliveryByCourierSettlementPlace
        {
            get { return deliveryByCourierSettlementPlace; }
            set { deliveryByCourierSettlementPlace = value; }
        }

    }

    [DataClass("CashRegisterConnectingStatus")]
    public enum CashRegisterConnectingStatus
    {
        CONNECTED,
        WAIT_CONNECTING,
        DISCONNECTED,
        WAIT_DISCONNECTION
    }

    [DataClass("FiscalRegisterPaymentItem")]
    public partial class FiscalRegisterPaymentItem
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string paymentId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string paymentName = "";


        [NotNull]
        public string PaymentId
        {
            get { return paymentId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  paymentId = value;
            }
        }

        [NotNull]
        public string PaymentName
        {
            get { return paymentName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  paymentName = value;
            }
        }

    }

    [DataClass("FiscalRegisterPaymentTypeInfo")]
    public partial class FiscalRegisterPaymentTypeInfo
    {
        [HasDefaultValue]
        private string registerId = "";
        [HasDefaultValue]
        private string registerName = "";
        [HasDefaultValue]
        private bool canConfigureDescription = false;


        public string RegisterId
        {
            get { return registerId; }
            set { registerId = value; }
        }

        public string RegisterName
        {
            get { return registerName; }
            set { registerName = value; }
        }

        public bool CanConfigureDescription
        {
            get { return canConfigureDescription; }
            set { canConfigureDescription = value; }
        }

    }

    [DataClass("FiscalRegisterTaxItem")]
    public partial class FiscalRegisterTaxItem
    {
        [HasDefaultValue]
        private bool isTaxable = true;
        [HasDefaultValue]
        private bool isCalculated = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string taxId = "";
        [HasDefaultValue]
        private decimal taxPercent = 0;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string taxName = "";


        public bool IsTaxable
        {
            get { return isTaxable; }
            set { isTaxable = value; }
        }

        public bool IsCalculated
        {
            get { return isCalculated; }
            set { isCalculated = value; }
        }

        [NotNull]
        public string TaxId
        {
            get { return taxId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxId = value;
            }
        }

        public decimal TaxPercent
        {
            get { return taxPercent; }
            set { taxPercent = value; }
        }

        [NotNull]
        public string TaxName
        {
            get { return taxName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxName = value;
            }
        }

    }

    [DataClass("IPCameraDriver")]
    public partial class IPCameraDriver : CameraDriver
    {


    }

    [DataClass("IPrinterDevice")]
    public partial interface IPrinterDevice
    {

    }

    [DataClass("PaymentTypeToRegisterIdMapping")]
    public partial class PaymentTypeToRegisterIdMapping
    {
        private PaymentType paymentType;
        [HasDefaultValue]
        private string registerId = "";
        [HasDefaultValue]
        private bool isDefaultNonCash = true;
        [HasDefaultValue]
        private string registerName = "";

        public PaymentTypeToRegisterIdMapping() {}

        public PaymentTypeToRegisterIdMapping(PaymentType paymentType)
        {
            this.paymentType = paymentType;
        }
        public PaymentType PaymentType
        {
            get { return paymentType; }
            set { paymentType = value; }
        }

        public string RegisterId
        {
            get { return registerId; }
            set { registerId = value; }
        }

        public bool IsDefaultNonCash
        {
            get { return isDefaultNonCash; }
            set { isDefaultNonCash = value; }
        }

        public string RegisterName
        {
            get { return registerName; }
            set { registerName = value; }
        }

    }

    [RootEntity]
    [DataClass("PowerDevice")]
    public partial class PowerDevice : AgentDevice
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Table, int> tableChannelMap = new Dictionary<Table, int>();

        protected PowerDevice() {}

        public PowerDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name, agentId, driver)
        {

        }

        public PowerDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        [NotNull]
        public Dictionary<Table, int> TableChannelMap
        {
            get { return tableChannelMap; }
        }

    }

    [DataClass("PowerDeviceDriver")]
    public partial class PowerDeviceDriver : AgentDriver
    {


    }

    [RootEntity]
    [DataClass("PrinterDevice")]
    public partial class PrinterDevice : AgentDevice, IPrinterDevice
    {

        protected PrinterDevice() {}

        public PrinterDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name, agentId, driver)
        {

        }

        public PrinterDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

    }

    [DataClass("RestaurantSectionSet")]
    public partial class RestaurantSectionSet
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<RestaurantSection> restaurantSections = new HashSet<RestaurantSection>();
        private Group group;
        private Terminal terminal;

        protected RestaurantSectionSet() {}

        public RestaurantSectionSet(Group group, Terminal terminal)
        {
            this.group = group;
            this.terminal = terminal;
        }
        [NotNull]
        public HashSet<RestaurantSection> RestaurantSections
        {
            get { return restaurantSections; }
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

    }

    [DataClass("SettlementPlace")]
    public partial class SettlementPlace
    {
        private string address;
        private string place;


        [CanBeNull]
        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        [CanBeNull]
        public string Place
        {
            get { return place; }
            set { place = value; }
        }

    }

    [DataClass("TaxCategoryToTaxItemMapping")]
    public partial class TaxCategoryToTaxItemMapping
    {
        private Guid? taxCategoryId;
        [HasDefaultValue]
        private decimal taxPercent = 0;
        [NotNull, NotNullField]
        private FiscalRegisterTaxItem taxItem;

        protected TaxCategoryToTaxItemMapping() {}

        public TaxCategoryToTaxItemMapping(Guid? taxCategoryId, decimal taxPercent, FiscalRegisterTaxItem taxItem)
        {
            this.taxCategoryId = taxCategoryId;
            this.taxPercent = taxPercent;
            this.taxItem = taxItem;
        }

        public TaxCategoryToTaxItemMapping(decimal taxPercent, FiscalRegisterTaxItem taxItem)
        {
            this.taxPercent = taxPercent;
            this.taxItem = taxItem;
        }

        public Guid? TaxCategoryId
        {
            get { return taxCategoryId; }
            set { taxCategoryId = value; }
        }

        public decimal TaxPercent
        {
            get { return taxPercent; }
            set { taxPercent = value; }
        }

        [NotNull]
        public FiscalRegisterTaxItem TaxItem
        {
            get { return taxItem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxItem = value;
            }
        }

    }

    [RootEntity]
    [DataClass("Terminal")]
    public partial class Terminal : AgentDevice
    {
        private string launcherId;
        private bool allowAccess;
        private bool anonymous;
        private string computerName;
        [HasDefaultValue]
        private bool mobile = false;
        private Camera showsCamera;
        private RestaurantSectionSet restaurantSections;
        private CashRegister cashRegister;
        private PrinterDevice billPrinter;
        [HasDefaultValue]
        private bool pbxEnabled = false;
        private PbxAuthorizationSettings pbxAuthorizationSettings;
        private string tapiLines;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Terminal() {}

        public Terminal(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver, string launcherId, bool allowAccess, bool anonymous, string computerName, Camera showsCamera, RestaurantSectionSet restaurantSections, CashRegister cashRegister, PrinterDevice billPrinter)
            : base(id, name, agentId, driver)
        {
            this.launcherId = launcherId;
            this.allowAccess = allowAccess;
            this.anonymous = anonymous;
            this.computerName = computerName;
            this.showsCamera = showsCamera;
            this.restaurantSections = restaurantSections;
            this.cashRegister = cashRegister;
            this.billPrinter = billPrinter;
        }

        public Terminal(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string LauncherId
        {
            get { return launcherId; }
            set { launcherId = value; }
        }

        public bool AllowAccess
        {
            get { return allowAccess; }
            set { allowAccess = value; }
        }

        public bool Anonymous
        {
            get { return anonymous; }
            set { anonymous = value; }
        }

        public string ComputerName
        {
            get { return computerName; }
            set { computerName = value; }
        }

        public bool Mobile
        {
            get { return mobile; }
            set { mobile = value; }
        }

        public Camera ShowsCamera
        {
            get { return showsCamera; }
            set { showsCamera = value; }
        }

        public RestaurantSectionSet RestaurantSections
        {
            get { return restaurantSections; }
            set { restaurantSections = value; }
        }

        public CashRegister CashRegister
        {
            get { return cashRegister; }
            set { cashRegister = value; }
        }

        public PrinterDevice BillPrinter
        {
            get { return billPrinter; }
            set { billPrinter = value; }
        }

        public bool PbxEnabled
        {
            get { return pbxEnabled; }
            set { pbxEnabled = value; }
        }

        [CanBeNull]
        public PbxAuthorizationSettings PbxAuthorizationSettings
        {
            get { return pbxAuthorizationSettings; }
            set { pbxAuthorizationSettings = value; }
        }

        [CanBeNull]
        public string TapiLines
        {
            get { return tapiLines; }
            set { tapiLines = value; }
        }

    }

    [DataClass("TerminalDriver")]
    public partial class TerminalDriver : AgentDriver
    {


    }

    [RootEntity]
    [DataClass("Agent")]
    public partial class Agent : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<string> addresses = new List<string>();

        protected Agent() {}

        public Agent(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        [NotNull]
        public ICollection<string> Addresses
        {
            get { return addresses; }
        }

    }

    [DataClass("AgentDeviceInfo")]
    public partial class AgentDeviceInfo
    {
        private Guid? id;
        private string model;
        private string status;
        private string state;
        private int stateCode;
        private DeviceSettings settings;

        public AgentDeviceInfo() {}

        public AgentDeviceInfo(Guid? id, string model, string status, string state, int stateCode, DeviceSettings settings)
        {
            this.id = id;
            this.model = model;
            this.status = status;
            this.state = state;
            this.stateCode = stateCode;
            this.settings = settings;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Model
        {
            get { return model; }
            set { model = value; }
        }

        public string Status
        {
            get { return status; }
            set { status = value; }
        }

        public string State
        {
            get { return state; }
            set { state = value; }
        }

        public int StateCode
        {
            get { return stateCode; }
            set { stateCode = value; }
        }

        public DeviceSettings Settings
        {
            get { return settings; }
            set { settings = value; }
        }

    }

    [DataClass("AgentDeviceMessage")]
    public partial class AgentDeviceMessage : AgentPostResult
    {
        private Guid? deviceId;

        protected AgentDeviceMessage() {}

        public AgentDeviceMessage(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, Guid? deviceId)
            : base(agentId, localTime, name, taskId, success, message)
        {
            this.deviceId = deviceId;
        }
        public Guid? DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

    }

    [DataClass("AgentErrorDeviceResult")]
    public partial class AgentErrorDeviceResult : AgentErrorResult
    {
        private Guid? deviceId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentErrorDeviceResult() {}

        public AgentErrorDeviceResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, long hrCode, int nCode, string details, Guid? deviceId)
            : base(agentId, localTime, name, taskId, success, message, hrCode, nCode, details)
        {
            this.deviceId = deviceId;
        }
        public Guid? DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

    }

    [DataClass("AgentErrorResult")]
    public partial class AgentErrorResult : AgentPostResult
    {
        private long hrCode;
        private int nCode;
        private string details;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentErrorResult() {}

        public AgentErrorResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, long hrCode, int nCode, string details)
            : base(agentId, localTime, name, taskId, success, message)
        {
            this.hrCode = hrCode;
            this.nCode = nCode;
            this.details = details;
        }
        public long HrCode
        {
            get { return hrCode; }
            set { hrCode = value; }
        }

        public int NCode
        {
            get { return nCode; }
            set { nCode = value; }
        }

        public string Details
        {
            get { return details; }
            set { details = value; }
        }

    }

    [DataClass("AgentGetTask")]
    public partial class AgentGetTask : AgentRequest
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentGetTask() {}

        public AgentGetTask(Guid? agentId, long localTime, string name)
            : base(agentId, localTime, name)
        {

        }
    }

    [DataClass("AgentInfo")]
    public partial class AgentInfo : AgentOkResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AgentDeviceInfo> agentDevices = new List<AgentDeviceInfo>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentInfo() {}

        public AgentInfo(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {

        }
        [NotNull]
        public List<AgentDeviceInfo> AgentDevices
        {
            get { return agentDevices; }
        }

    }

    [DataClass("AgentMessage")]
    public partial class AgentMessage : ServerResponse
    {
        private Guid? id;
        private Guid? deviceId;

        protected AgentMessage() {}

        public AgentMessage(bool success, Guid? id, Guid? deviceId)
            : base(success)
        {
            this.id = id;
            this.deviceId = deviceId;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public Guid? DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

    }

    [DataClass("AgentMsgPause")]
    public partial class AgentMsgPause : AgentMessage
    {

        protected AgentMsgPause() {}

        public AgentMsgPause(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("AgentMsgResume")]
    public partial class AgentMsgResume : AgentMessage
    {

        protected AgentMsgResume() {}

        public AgentMsgResume(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("AgentMsgStart")]
    public partial class AgentMsgStart : AgentMessage
    {

        protected AgentMsgStart() {}

        public AgentMsgStart(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("AgentMsgStop")]
    public partial class AgentMsgStop : AgentMessage
    {

        protected AgentMsgStop() {}

        public AgentMsgStop(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("AgentOkDeviceResult")]
    public partial class AgentOkDeviceResult : AgentOkResult
    {
        private Guid? deviceId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentOkDeviceResult() {}

        public AgentOkDeviceResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {
            this.deviceId = deviceId;
        }
        public Guid? DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

    }

    [DataClass("AgentOkNeedStartDeviceResult")]
    public partial class AgentOkNeedStartDeviceResult : AgentOkDeviceResult
    {
        private bool startRequested;

        protected AgentOkNeedStartDeviceResult() {}

        public AgentOkNeedStartDeviceResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, bool startRequested)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.startRequested = startRequested;
        }
        public bool StartRequested
        {
            get { return startRequested; }
            set { startRequested = value; }
        }

    }

    [DataClass("AgentOkResult")]
    public partial class AgentOkResult : AgentPostResult
    {
        private bool warnings;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentOkResult() {}

        public AgentOkResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings)
            : base(agentId, localTime, name, taskId, success, message)
        {
            this.warnings = warnings;
        }
        public bool Warnings
        {
            get { return warnings; }
            set { warnings = value; }
        }

    }

    [DataClass("AgentPostResult")]
    public abstract partial class AgentPostResult : AgentRequest
    {
        private Guid? taskId;
        private bool success;
        private string message;

        protected AgentPostResult() {}

        protected AgentPostResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message)
            : base(agentId, localTime, name)
        {
            this.taskId = taskId;
            this.success = success;
            this.message = message;
        }
        public Guid? TaskId
        {
            get { return taskId; }
            set { taskId = value; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

    }

    [DataClass("AgentPrintErrorResult")]
    public partial class AgentPrintErrorResult : AgentErrorResult
    {
        private string printerName;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentPrintErrorResult() {}

        public AgentPrintErrorResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, long hrCode, int nCode, string details, string printerName)
            : base(agentId, localTime, name, taskId, success, message, hrCode, nCode, details)
        {
            this.printerName = printerName;
        }
        public string PrinterName
        {
            get { return printerName; }
            set { printerName = value; }
        }

    }

    [DataClass("AgentPrintOkResult")]
    public partial class AgentPrintOkResult : AgentOkResult
    {
        private string printerName;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AgentPrintOkResult() {}

        public AgentPrintOkResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, string printerName)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {
            this.printerName = printerName;
        }
        public string PrinterName
        {
            get { return printerName; }
            set { printerName = value; }
        }

    }

    [DataClass("AgentRequest")]
    public abstract partial class AgentRequest
    {
        private Guid? agentId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<string> addresses = new List<string>();
        private long localTime;
        private string name;

        protected AgentRequest() {}

        protected AgentRequest(Guid? agentId, long localTime, string name)
        {
            this.agentId = agentId;
            this.localTime = localTime;
            this.name = name;
        }
        public Guid? AgentId
        {
            get { return agentId; }
            set { agentId = value; }
        }

        [NotNull]
        public ICollection<string> Addresses
        {
            get { return addresses; }
        }

        public long LocalTime
        {
            get { return localTime; }
            set { localTime = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }

    [DataClass("AgentTask")]
    public partial class AgentTask : AgentMessage
    {

        protected AgentTask() {}

        public AgentTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("AlposAf01DriverSettings")]
    public partial class AlposAf01DriverSettings : DeviceSettings
    {
        [HasDefaultValue]
        private int font0Width = 42;
        private InternalCustomerDisplaySettings customerDisplaySettings;

        protected AlposAf01DriverSettings() {}

        public AlposAf01DriverSettings(string javaDevice, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice)
        {
            this.customerDisplaySettings = customerDisplaySettings;
        }
        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

    }

    [DataClass("ArtSoftFiscalRegisterDriverSettings")]
    public partial class ArtSoftFiscalRegisterDriverSettings : DeviceSettings
    {
        private ConnectionInterface connectionInterface;
        private int portNumber;
        private int baudRate;
        private string hostAddress;
        private int hostPort;
        private int protocolType;
        private InternalCustomerDisplaySettings customerDisplaySettings;

        protected ArtSoftFiscalRegisterDriverSettings() {}

        public ArtSoftFiscalRegisterDriverSettings(string javaDevice, ConnectionInterface connectionInterface, int portNumber, int baudRate, string hostAddress, int hostPort, int protocolType, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice)
        {
            this.connectionInterface = connectionInterface;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.hostAddress = hostAddress;
            this.hostPort = hostPort;
            this.protocolType = protocolType;
            this.customerDisplaySettings = customerDisplaySettings;
        }
        public ConnectionInterface ConnectionInterface
        {
            get { return connectionInterface; }
            set { connectionInterface = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int HostPort
        {
            get { return hostPort; }
            set { hostPort = value; }
        }

        public int ProtocolType
        {
            get { return protocolType; }
            set { protocolType = value; }
        }

        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

    }

    [DataClass("AtolDriverSettings")]
    public partial class AtolDriverSettings : DeviceSettings
    {
        private ConnectionInterface connectionInterface;
        private int portNumber;
        private int baudRate;
        private string hostAddress;
        private int hostPort;
        [HasDefaultValue]
        private int uModel = 52;
        private string ofdProtocolVersion;
        [HasDefaultValue]
        private string accessKey = "0";
        [HasDefaultValue]
        private bool useAccessKey = true;
        [HasDefaultValue]
        private bool printFooter = false;
        [HasDefaultValue]
        private bool cutNonFiscal = false;

        protected AtolDriverSettings() {}

        public AtolDriverSettings(string javaDevice, ConnectionInterface connectionInterface, int portNumber, int baudRate, string hostAddress, int hostPort, string ofdProtocolVersion)
            : base(javaDevice)
        {
            this.connectionInterface = connectionInterface;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.hostAddress = hostAddress;
            this.hostPort = hostPort;
            this.ofdProtocolVersion = ofdProtocolVersion;
        }
        public ConnectionInterface ConnectionInterface
        {
            get { return connectionInterface; }
            set { connectionInterface = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int HostPort
        {
            get { return hostPort; }
            set { hostPort = value; }
        }

        public int UModel
        {
            get { return uModel; }
            set { uModel = value; }
        }

        public string OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

        public bool UseAccessKey
        {
            get { return useAccessKey; }
            set { useAccessKey = value; }
        }

        public bool PrintFooter
        {
            get { return printFooter; }
            set { printFooter = value; }
        }

        public bool CutNonFiscal
        {
            get { return cutNonFiscal; }
            set { cutNonFiscal = value; }
        }

    }

    [DataClass("AzimuthFnPrimDriverSettings")]
    public partial class AzimuthFnPrimDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        [NotNull, NotNullField]
        private TaxationSystem taxationSystem;
        [HasDefaultValue]
        private int font0Width = 40;
        private string ofdProtocolVersion;

        protected AzimuthFnPrimDriverSettings() {}

        public AzimuthFnPrimDriverSettings(string javaDevice, int portNumber, int baudRate, TaxationSystem taxationSystem, string ofdProtocolVersion)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.taxationSystem = taxationSystem;
            this.ofdProtocolVersion = ofdProtocolVersion;
        }

        public AzimuthFnPrimDriverSettings(TaxationSystem taxationSystem)
        {
            this.taxationSystem = taxationSystem;
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        [NotNull]
        public TaxationSystem TaxationSystem
        {
            get { return taxationSystem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxationSystem = value;
            }
        }

        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public string OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

    }

    [DataClass("AzimuthPrimDriverSettings")]
    public partial class AzimuthPrimDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected AzimuthPrimDriverSettings() {}

        public AzimuthPrimDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("BrioFisFm32DriverSettings")]
    public partial class BrioFisFm32DriverSettings : DeviceSettings
    {
        private int font0Width;
        [HasDefaultValue]
        private int font0Attribute = 65;
        private InternalCustomerDisplaySettings customerDisplaySettings;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public BrioFisFm32DriverSettings() {}

        public BrioFisFm32DriverSettings(string javaDevice, int font0Width, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice)
        {
            this.font0Width = font0Width;
            this.customerDisplaySettings = customerDisplaySettings;
        }
        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public int Font0Attribute
        {
            get { return font0Attribute; }
            set { font0Attribute = value; }
        }

        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

    }

    [DataClass("CashDrawerDriverSettings")]
    public partial class CashDrawerDriverSettings : DeviceSettings
    {
        private string portType;
        private string name;
        private int portNumber;
        private int portTimeout;
        [HasDefaultValue]
        private bool outOfProc = false;

        protected CashDrawerDriverSettings() {}

        public CashDrawerDriverSettings(string javaDevice, string portType, string name, int portNumber, int portTimeout)
            : base(javaDevice)
        {
            this.portType = portType;
            this.name = name;
            this.portNumber = portNumber;
            this.portTimeout = portTimeout;
        }
        public string PortType
        {
            get { return portType; }
            set { portType = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int PortTimeout
        {
            get { return portTimeout; }
            set { portTimeout = value; }
        }

        public bool OutOfProc
        {
            get { return outOfProc; }
            set { outOfProc = value; }
        }

    }

    [DataClass("CashServerDriverSettings")]
    public partial class CashServerDriverSettings : DeviceSettings
    {

        protected CashServerDriverSettings() {}

        public CashServerDriverSettings(string javaDevice)
            : base(javaDevice)
        {

        }
    }

    [DataClass("CheckboxDriverSettings")]
    public partial class CheckboxDriverSettings : ArtSoftFiscalRegisterDriverSettings
    {

        protected CheckboxDriverSettings() {}

        public CheckboxDriverSettings(string javaDevice, ConnectionInterface connectionInterface, int portNumber, int baudRate, string hostAddress, int hostPort, int protocolType, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice, connectionInterface, portNumber, baudRate, hostAddress, hostPort, protocolType, customerDisplaySettings)
        {

        }
    }

    [DataClass("DatecsDriverSettings")]
    public partial class DatecsDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected DatecsDriverSettings() {}

        public DatecsDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("DeviceSettings")]
    public abstract partial class DeviceSettings
    {
        private string javaDriver;
        private string javaDevice;
        private string friendlyName;
        [HasDefaultValue]
        private bool autorun = true;

        protected DeviceSettings() {}

        protected DeviceSettings(string javaDevice)
        {
            this.javaDevice = javaDevice;
        }
        [CanBeNull]
        public string JavaDriver
        {
            get { return javaDriver; }
            set { javaDriver = value; }
        }

        public string JavaDevice
        {
            get { return javaDevice; }
            set { javaDevice = value; }
        }

        [CanBeNull]
        public string FriendlyName
        {
            get { return friendlyName; }
            set { friendlyName = value; }
        }

        public bool Autorun
        {
            get { return autorun; }
            set { autorun = value; }
        }

    }

    [DataClass("EmpirijaDriverSettings")]
    public partial class EmpirijaDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected EmpirijaDriverSettings() {}

        public EmpirijaDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("ErrorResponse")]
    public partial class ErrorResponse : ServerResponse
    {
        private string message;

        protected ErrorResponse() {}

        public ErrorResponse(bool success, string message)
            : base(success)
        {
            this.message = message;
        }
        public string Message
        {
            get { return message; }
            set { message = value; }
        }

    }

    [DataClass("EscPosPrinterDriverSettings")]
    public partial class EscPosPrinterDriverSettings : PortWriterDriverSettings
    {
        private int marginHorInDots;
        [HasDefaultValue]
        private int pulsePort = 0;
        [HasDefaultValue]
        private string pulseCommand = "";
        [HasDefaultValue]
        private string printTextCommand = "";
        [HasDefaultValue]
        private string logoCommand = "";
        [HasDefaultValue]
        private string qrCodeCommand = "";
        [HasDefaultValue]
        private string barcodeCommand = "";
        [HasDefaultValue]
        private bool autoWidth = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EscPosPrinterDriverSettings() {}

        public EscPosPrinterDriverSettings(string javaDevice, string portType, int portNumber, int baudRate, SerialPortFlowControl flowControl, PrintOrientation printOrientation, string addr, string printerName, int waitPriorSend, int waitWhileSend, int marginHorInDots)
            : base(javaDevice, portType, portNumber, baudRate, flowControl, printOrientation, addr, printerName, waitPriorSend, waitWhileSend)
        {
            this.marginHorInDots = marginHorInDots;
        }
        public int MarginHorInDots
        {
            get { return marginHorInDots; }
            set { marginHorInDots = value; }
        }

        public int PulsePort
        {
            get { return pulsePort; }
            set { pulsePort = value; }
        }

        public string PulseCommand
        {
            get { return pulseCommand; }
            set { pulseCommand = value; }
        }

        public string PrintTextCommand
        {
            get { return printTextCommand; }
            set { printTextCommand = value; }
        }

        public string LogoCommand
        {
            get { return logoCommand; }
            set { logoCommand = value; }
        }

        public string QrCodeCommand
        {
            get { return qrCodeCommand; }
            set { qrCodeCommand = value; }
        }

        public string BarcodeCommand
        {
            get { return barcodeCommand; }
            set { barcodeCommand = value; }
        }

        public bool AutoWidth
        {
            get { return autoWidth; }
            set { autoWidth = value; }
        }

    }

    [DataClass("ExternalCashRegisterSettings")]
    public partial class ExternalCashRegisterSettings : ExternalDeviceSettings
    {
        private ExternalDeviceNumberSetting font0Width;
        private ExternalDeviceCustomEnumSetting ofdProtocolVersion;
        private List<FiscalRegisterTaxItem> fiscalRegisterTaxItems;
        private List<FiscalRegisterPaymentItem> fiscalRegisterPaymentItems;

        protected ExternalCashRegisterSettings() {}

        public ExternalCashRegisterSettings(string javaDevice)
            : base(javaDevice)
        {

        }
        [CanBeNull]
        public ExternalDeviceNumberSetting Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        [CanBeNull]
        public ExternalDeviceCustomEnumSetting OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

        public List<FiscalRegisterTaxItem> FiscalRegisterTaxItems
        {
            get { return fiscalRegisterTaxItems; }
            set { fiscalRegisterTaxItems = value; }
        }

        public List<FiscalRegisterPaymentItem> FiscalRegisterPaymentItems
        {
            get { return fiscalRegisterPaymentItems; }
            set { fiscalRegisterPaymentItems = value; }
        }

    }

    [DataClass("ExternalDeviceBooleanSetting")]
    public partial class ExternalDeviceBooleanSetting : ExternalDeviceSetting
    {
        [HasDefaultValue]
        private bool value = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ExternalDeviceBooleanSetting() {}

        public ExternalDeviceBooleanSetting(string name, string label)
            : base(name, label)
        {

        }
        public bool Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("ExternalDeviceCustomEnumSetting")]
    public partial class ExternalDeviceCustomEnumSetting : ExternalDeviceSetting
    {
        private bool isList;
        private List<ExternalDeviceCustomEnumSettingValue> values;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ExternalDeviceCustomEnumSetting() {}

        public ExternalDeviceCustomEnumSetting(string name, string label, bool isList)
            : base(name, label)
        {
            this.isList = isList;
        }
        public bool IsList
        {
            get { return isList; }
            set { isList = value; }
        }

        public List<ExternalDeviceCustomEnumSettingValue> Values
        {
            get { return values; }
            set { values = value; }
        }

    }

    [DataClass("ExternalDeviceCustomEnumSettingValue")]
    public partial class ExternalDeviceCustomEnumSettingValue
    {
        private string name;
        private string label;
        [HasDefaultValue]
        private bool isDefault = false;

        public ExternalDeviceCustomEnumSettingValue() {}

        public ExternalDeviceCustomEnumSettingValue(string name, string label)
        {
            this.name = name;
            this.label = label;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Label
        {
            get { return label; }
            set { label = value; }
        }

        public bool IsDefault
        {
            get { return isDefault; }
            set { isDefault = value; }
        }

    }

    [DataClass("ExternalDeviceNumberSetting")]
    public partial class ExternalDeviceNumberSetting : ExternalDeviceSetting
    {
        [NotNull, NotNullField]
        private ExternalDeviceNumberSettingKind settingKind;
        [HasDefaultValue]
        private decimal? value = 0;
        private decimal? minValue;
        private decimal? maxValue;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ExternalDeviceNumberSetting() {}

        public ExternalDeviceNumberSetting(string name, string label, ExternalDeviceNumberSettingKind settingKind, decimal? minValue, decimal? maxValue)
            : base(name, label)
        {
            this.settingKind = settingKind;
            this.minValue = minValue;
            this.maxValue = maxValue;
        }

        public ExternalDeviceNumberSetting(ExternalDeviceNumberSettingKind settingKind)
        {
            this.settingKind = settingKind;
        }

        [NotNull]
        public ExternalDeviceNumberSettingKind SettingKind
        {
            get { return settingKind; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  settingKind = value;
            }
        }

        public decimal? Value
        {
            get { return value; }
            set { this.value = value; }
        }

        public decimal? MinValue
        {
            get { return minValue; }
            set { minValue = value; }
        }

        public decimal? MaxValue
        {
            get { return maxValue; }
            set { maxValue = value; }
        }

    }

    [DataClass("ExternalDeviceNumberSettingKind")]
    [EnumClass]
    public partial class ExternalDeviceNumberSettingKind : LocalizableName<ExternalDeviceNumberSettingKind>
    {
        /// <summary> Целое. </summary>
        public static readonly ExternalDeviceNumberSettingKind INTEGER = new ExternalDeviceNumberSettingKind("INTEGER");
        /// <summary> Дробное. </summary>
        public static readonly ExternalDeviceNumberSettingKind DECIMAL = new ExternalDeviceNumberSettingKind("DECIMAL");
        /// <summary> Количество. </summary>
        public static readonly ExternalDeviceNumberSettingKind AMOUNT = new ExternalDeviceNumberSettingKind("AMOUNT");

        private readonly string __value;
        private readonly string __nameResId;

        private ExternalDeviceNumberSettingKind(string __value)
        {
            this.__value = __value;
            this.__nameResId = "EXTERNALDEVICENUMBERSETTINGKIND_NAME_" + __value;
        }

        public static ExternalDeviceNumberSettingKind Parse(string value)
        {
            switch(value)
            {
                case "INTEGER": return INTEGER;
                case "DECIMAL": return DECIMAL;
                case "AMOUNT": return AMOUNT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ExternalDeviceNumberSettingKind[] VALUES
        {
            get
            {
                return new []
                {
                    INTEGER, 
                    DECIMAL, 
                    AMOUNT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ExternalDeviceSetting")]
    public abstract partial class ExternalDeviceSetting
    {
        private string name;
        private string label;

        public ExternalDeviceSetting() {}

        protected ExternalDeviceSetting(string name, string label)
        {
            this.name = name;
            this.label = label;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Label
        {
            get { return label; }
            set { label = value; }
        }

    }

    [DataClass("ExternalDeviceSettings")]
    public partial class ExternalDeviceSettings : DeviceSettings
    {
        private string factoryCode;
        private string description;
        private List<ExternalDeviceSetting> settings;

        protected ExternalDeviceSettings() {}

        public ExternalDeviceSettings(string javaDevice)
            : base(javaDevice)
        {

        }
        [CanBeNull]
        public string FactoryCode
        {
            get { return factoryCode; }
            set { factoryCode = value; }
        }

        [CanBeNull]
        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        [CanBeNull]
        public List<ExternalDeviceSetting> Settings
        {
            get { return settings; }
            set { settings = value; }
        }

    }

    [DataClass("ExternalDeviceStringSetting")]
    public partial class ExternalDeviceStringSetting : ExternalDeviceSetting
    {
        private string value;
        [HasDefaultValue]
        private int maxLength = 255;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ExternalDeviceStringSetting() {}

        public ExternalDeviceStringSetting(string name, string label, string value)
            : base(name, label)
        {
            this.value = value;
        }
        public string Value
        {
            get { return value; }
            set { this.value = value; }
        }

        public int MaxLength
        {
            get { return maxLength; }
            set { maxLength = value; }
        }

    }

    [DataClass("FontsList")]
    public partial class FontsList : AgentOkResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> fonts = new List<string>();

        protected FontsList() {}

        public FontsList(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {

        }
        [NotNull]
        public List<string> Fonts
        {
            get { return fonts; }
        }

    }

    [DataClass("HrsDriverSettings")]
    public partial class HrsDriverSettings : DeviceSettings
    {
        private int font0Width;
        private string hostAddress;
        private int hostPort;
        [HasDefaultValue]
        private string codePage = "";
        private InternalCustomerDisplaySettings customerDisplaySettings;

        protected HrsDriverSettings() {}

        public HrsDriverSettings(string javaDevice, int font0Width, string hostAddress, int hostPort, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice)
        {
            this.font0Width = font0Width;
            this.hostAddress = hostAddress;
            this.hostPort = hostPort;
            this.customerDisplaySettings = customerDisplaySettings;
        }
        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int HostPort
        {
            get { return hostPort; }
            set { hostPort = value; }
        }

        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

    }

    [DataClass("IPCameraSettings")]
    public partial class IPCameraSettings : DeviceSettings
    {
        [HasDefaultValue]
        private int width = 0;
        [HasDefaultValue]
        private int height = 0;
        [HasDefaultValue]
        private int cameraNo = 0;
        [HasDefaultValue]
        private int fps = 10;
        [HasDefaultValue]
        private int compression = 70;
        [HasDefaultValue]
        private bool bShowInfo = true;
        [HasDefaultValue]
        private int streamType = 0;
        private string cameraIP;
        private string driverName;
        private string modelName;
        private string xmlExtraSettings;
        private string login;
        private string password;
        private bool? bWriteAudio;
        private string externalCameraURL;
        private string xmlExtraSettingsType;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IPCameraSettings() {}

        public IPCameraSettings(string javaDevice, string cameraIP, string driverName, string modelName, string xmlExtraSettings, string login, string password, bool? bWriteAudio)
            : base(javaDevice)
        {
            this.cameraIP = cameraIP;
            this.driverName = driverName;
            this.modelName = modelName;
            this.xmlExtraSettings = xmlExtraSettings;
            this.login = login;
            this.password = password;
            this.bWriteAudio = bWriteAudio;
        }
        public int Width
        {
            get { return width; }
            set { width = value; }
        }

        public int Height
        {
            get { return height; }
            set { height = value; }
        }

        public int CameraNo
        {
            get { return cameraNo; }
            set { cameraNo = value; }
        }

        public int Fps
        {
            get { return fps; }
            set { fps = value; }
        }

        public int Compression
        {
            get { return compression; }
            set { compression = value; }
        }

        public bool BShowInfo
        {
            get { return bShowInfo; }
            set { bShowInfo = value; }
        }

        public int StreamType
        {
            get { return streamType; }
            set { streamType = value; }
        }

        public string CameraIP
        {
            get { return cameraIP; }
            set { cameraIP = value; }
        }

        public string DriverName
        {
            get { return driverName; }
            set { driverName = value; }
        }

        public string ModelName
        {
            get { return modelName; }
            set { modelName = value; }
        }

        public string XmlExtraSettings
        {
            get { return xmlExtraSettings; }
            set { xmlExtraSettings = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public bool? BWriteAudio
        {
            get { return bWriteAudio; }
            set { bWriteAudio = value; }
        }

        [CanBeNull]
        public string ExternalCameraURL
        {
            get { return externalCameraURL; }
            set { externalCameraURL = value; }
        }

        [CanBeNull]
        public string XmlExtraSettingsType
        {
            get { return xmlExtraSettingsType; }
            set { xmlExtraSettingsType = value; }
        }

    }

    [DataClass("IcsDriverSettings")]
    public partial class IcsDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected IcsDriverSettings() {}

        public IcsDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("IksSpsDriverSettings")]
    public partial class IksSpsDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        private int cashierPin;
        private InternalCustomerDisplaySettings customerDisplaySettings;

        protected IksSpsDriverSettings() {}

        public IksSpsDriverSettings(string javaDevice, int portNumber, int baudRate, int cashierPin, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.cashierPin = cashierPin;
            this.customerDisplaySettings = customerDisplaySettings;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public int CashierPin
        {
            get { return cashierPin; }
            set { cashierPin = value; }
        }

        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

    }

    [DataClass("InternalCustomerDisplaySettings")]
    public partial class InternalCustomerDisplaySettings
    {
        [HasDefaultValue]
        private bool isEnabled = false;
        [HasDefaultValue]
        private string idleText = "";
        [HasDefaultValue]
        private int chars = 20;
        [HasDefaultValue]
        private int rows = 2;


        public bool IsEnabled
        {
            get { return isEnabled; }
            set { isEnabled = value; }
        }

        public string IdleText
        {
            get { return idleText; }
            set { idleText = value; }
        }

        public int Chars
        {
            get { return chars; }
            set { chars = value; }
        }

        public int Rows
        {
            get { return rows; }
            set { rows = value; }
        }

    }

    [DataClass("Maria301DriverSettings")]
    public partial class Maria301DriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        private string accessKey;

        protected Maria301DriverSettings() {}

        public Maria301DriverSettings(string javaDevice, int portNumber, int baudRate, string accessKey)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.accessKey = accessKey;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

    }

    [DataClass("Mercury130DriverSettings")]
    public partial class Mercury130DriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        private int timeOut;
        private string accessKey;
        private int cashNumber;
        private int cashDrawerCRPort;
        private int cashDrawerCOMPort;

        protected Mercury130DriverSettings() {}

        public Mercury130DriverSettings(string javaDevice, int portNumber, int baudRate, int timeOut, string accessKey, int cashNumber, int cashDrawerCRPort, int cashDrawerCOMPort)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.timeOut = timeOut;
            this.accessKey = accessKey;
            this.cashNumber = cashNumber;
            this.cashDrawerCRPort = cashDrawerCRPort;
            this.cashDrawerCOMPort = cashDrawerCOMPort;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public int TimeOut
        {
            get { return timeOut; }
            set { timeOut = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public int CashDrawerCRPort
        {
            get { return cashDrawerCRPort; }
            set { cashDrawerCRPort = value; }
        }

        public int CashDrawerCOMPort
        {
            get { return cashDrawerCOMPort; }
            set { cashDrawerCOMPort = value; }
        }

    }

    [DataClass("MercuryDriverSettings")]
    public partial class MercuryDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        private int cashNumber;
        private string accessKey;
        private int drawerOptions;

        protected MercuryDriverSettings() {}

        public MercuryDriverSettings(string javaDevice, int portNumber, int baudRate, int cashNumber, string accessKey, int drawerOptions)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.cashNumber = cashNumber;
            this.accessKey = accessKey;
            this.drawerOptions = drawerOptions;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

        public int DrawerOptions
        {
            get { return drawerOptions; }
            set { drawerOptions = value; }
        }

    }

    [DataClass("OPOSPrinterDriverSettings")]
    public partial class OPOSPrinterDriverSettings : DeviceSettings
    {
        private string printerName;
        private int font0Width;
        private int font1Width;
        private int font2Width;

        protected OPOSPrinterDriverSettings() {}

        public OPOSPrinterDriverSettings(string javaDevice, string printerName, int font0Width, int font1Width, int font2Width)
            : base(javaDevice)
        {
            this.printerName = printerName;
            this.font0Width = font0Width;
            this.font1Width = font1Width;
            this.font2Width = font2Width;
        }
        public string PrinterName
        {
            get { return printerName; }
            set { printerName = value; }
        }

        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public int Font1Width
        {
            get { return font1Width; }
            set { font1Width = value; }
        }

        public int Font2Width
        {
            get { return font2Width; }
            set { font2Width = value; }
        }

    }

    [DataClass("OPOSRegisterDriverSettings")]
    public partial class OPOSRegisterDriverSettings : DeviceSettings
    {
        private string registerName;
        private string cashPaymentId;
        private string cardPaymentId;

        protected OPOSRegisterDriverSettings() {}

        public OPOSRegisterDriverSettings(string javaDevice, string registerName, string cashPaymentId, string cardPaymentId)
            : base(javaDevice)
        {
            this.registerName = registerName;
            this.cashPaymentId = cashPaymentId;
            this.cardPaymentId = cardPaymentId;
        }
        public string RegisterName
        {
            get { return registerName; }
            set { registerName = value; }
        }

        public string CashPaymentId
        {
            get { return cashPaymentId; }
            set { cashPaymentId = value; }
        }

        public string CardPaymentId
        {
            get { return cardPaymentId; }
            set { cardPaymentId = value; }
        }

    }

    [DataClass("OposDeviceList")]
    public partial class OposDeviceList : AgentOkResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> oposDevices = new List<string>();

        protected OposDeviceList() {}

        public OposDeviceList(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {

        }
        [NotNull]
        public List<string> OposDevices
        {
            get { return oposDevices; }
        }

    }

    [DataClass("PilotFP410KDriverSettings")]
    public partial class PilotFP410KDriverSettings : DeviceSettings
    {
        private int portNumber;

        protected PilotFP410KDriverSettings() {}

        public PilotFP410KDriverSettings(string javaDevice, int portNumber)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

    }

    [DataClass("PiritDriverSettings")]
    public partial class PiritDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected PiritDriverSettings() {}

        public PiritDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("PiritFnDriverSettings")]
    public partial class PiritFnDriverSettings : DeviceSettings
    {
        private ConnectionInterface connectionInterface;
        private int portNumber;
        private int baudRate;
        [HasDefaultValue]
        private string hostAddress = "";
        [HasDefaultValue]
        private int hostPort = 0;
        [NotNull, NotNullField]
        private TaxationSystem taxationSystem;
        private string ofdProtocolVersion;
        [HasDefaultValue]
        private int font0Width = 44;
        [HasDefaultValue]
        private int font0Attribute = 0;
        [HasDefaultValue]
        private string codePage = "866";

        protected PiritFnDriverSettings() {}

        public PiritFnDriverSettings(string javaDevice, ConnectionInterface connectionInterface, int portNumber, int baudRate, TaxationSystem taxationSystem, string ofdProtocolVersion)
            : base(javaDevice)
        {
            this.connectionInterface = connectionInterface;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.taxationSystem = taxationSystem;
            this.ofdProtocolVersion = ofdProtocolVersion;
        }

        public PiritFnDriverSettings(TaxationSystem taxationSystem)
        {
            this.taxationSystem = taxationSystem;
        }

        public ConnectionInterface ConnectionInterface
        {
            get { return connectionInterface; }
            set { connectionInterface = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int HostPort
        {
            get { return hostPort; }
            set { hostPort = value; }
        }

        [NotNull]
        public TaxationSystem TaxationSystem
        {
            get { return taxationSystem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  taxationSystem = value;
            }
        }

        public string OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public int Font0Attribute
        {
            get { return font0Attribute; }
            set { font0Attribute = value; }
        }

        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

    }

    [DataClass("PortWriterDriverSettings")]
    public partial class PortWriterDriverSettings : DeviceSettings
    {
        private string portType;
        private int portNumber;
        private int baudRate;
        private SerialPortFlowControl flowControl;
        private PrintOrientation printOrientation;
        private string addr;
        private string printerName;
        private int waitPriorSend;
        private int waitWhileSend;
        [HasDefaultValue]
        private string fontFamily = "";
        [HasDefaultValue]
        private int fontSize = 12;
        [HasDefaultValue]
        private bool fontBold = false;
        [HasDefaultValue]
        private bool spoolerEnabled = false;
        [HasDefaultValue]
        private int spoolerPingInterval = 10;
        [HasDefaultValue]
        private int spoolerTaskExpiryDuration = 600;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PortWriterDriverSettings() {}

        public PortWriterDriverSettings(string javaDevice, string portType, int portNumber, int baudRate, SerialPortFlowControl flowControl, PrintOrientation printOrientation, string addr, string printerName, int waitPriorSend, int waitWhileSend)
            : base(javaDevice)
        {
            this.portType = portType;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.flowControl = flowControl;
            this.printOrientation = printOrientation;
            this.addr = addr;
            this.printerName = printerName;
            this.waitPriorSend = waitPriorSend;
            this.waitWhileSend = waitWhileSend;
        }
        public string PortType
        {
            get { return portType; }
            set { portType = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public SerialPortFlowControl FlowControl
        {
            get { return flowControl; }
            set { flowControl = value; }
        }

        public PrintOrientation PrintOrientation
        {
            get { return printOrientation; }
            set { printOrientation = value; }
        }

        public string Addr
        {
            get { return addr; }
            set { addr = value; }
        }

        public string PrinterName
        {
            get { return printerName; }
            set { printerName = value; }
        }

        public int WaitPriorSend
        {
            get { return waitPriorSend; }
            set { waitPriorSend = value; }
        }

        public int WaitWhileSend
        {
            get { return waitWhileSend; }
            set { waitWhileSend = value; }
        }

        public string FontFamily
        {
            get { return fontFamily; }
            set { fontFamily = value; }
        }

        public int FontSize
        {
            get { return fontSize; }
            set { fontSize = value; }
        }

        public bool FontBold
        {
            get { return fontBold; }
            set { fontBold = value; }
        }

        public bool SpoolerEnabled
        {
            get { return spoolerEnabled; }
            set { spoolerEnabled = value; }
        }

        public int SpoolerPingInterval
        {
            get { return spoolerPingInterval; }
            set { spoolerPingInterval = value; }
        }

        public int SpoolerTaskExpiryDuration
        {
            get { return spoolerTaskExpiryDuration; }
            set { spoolerTaskExpiryDuration = value; }
        }

    }

    [DataClass("PosnetDriverSettings")]
    public partial class PosnetDriverSettings : DeviceSettings
    {
        private int cashNumber;
        private ConnectionInterface connectionInterface;
        private int portNumber;
        private int baudRate;
        private string hostAddress;
        private int hostPort;
        [HasDefaultValue]
        private string codePage = "";
        private InternalCustomerDisplaySettings customerDisplaySettings;

        protected PosnetDriverSettings() {}

        public PosnetDriverSettings(string javaDevice, int cashNumber, ConnectionInterface connectionInterface, int portNumber, int baudRate, string hostAddress, int hostPort, InternalCustomerDisplaySettings customerDisplaySettings)
            : base(javaDevice)
        {
            this.cashNumber = cashNumber;
            this.connectionInterface = connectionInterface;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.hostAddress = hostAddress;
            this.hostPort = hostPort;
            this.customerDisplaySettings = customerDisplaySettings;
        }
        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public ConnectionInterface ConnectionInterface
        {
            get { return connectionInterface; }
            set { connectionInterface = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int HostPort
        {
            get { return hostPort; }
            set { hostPort = value; }
        }

        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public InternalCustomerDisplaySettings CustomerDisplaySettings
        {
            get { return customerDisplaySettings; }
            set { customerDisplaySettings = value; }
        }

    }

    [DataClass("PosnetThermalDriverSettings")]
    public partial class PosnetThermalDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected PosnetThermalDriverSettings() {}

        public PosnetThermalDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("PowerDeviceDriverSettings")]
    public partial class PowerDeviceDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        private int parity;

        protected PowerDeviceDriverSettings() {}

        public PowerDeviceDriverSettings(string javaDevice, int portNumber, int baudRate, int parity)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.parity = parity;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public int Parity
        {
            get { return parity; }
            set { parity = value; }
        }

    }

    [DataClass("PrimFRDriverSettings")]
    public partial class PrimFRDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;

        protected PrimFRDriverSettings() {}

        public PrimFRDriverSettings(string javaDevice, int portNumber, int baudRate)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("PrinterInfo")]
    public partial class PrinterInfo
    {
        private string name;
        private string ports;

        public PrinterInfo() {}

        public PrinterInfo(string name, string ports)
        {
            this.name = name;
            this.ports = ports;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Ports
        {
            get { return ports; }
            set { ports = value; }
        }

    }

    [DataClass("PrinterList")]
    public partial class PrinterList : AgentOkResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PrinterInfo> printers = new List<PrinterInfo>();

        protected PrinterList() {}

        public PrinterList(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {

        }
        [NotNull]
        public List<PrinterInfo> Printers
        {
            get { return printers; }
        }

    }

    [DataClass("QueryInfoResult")]
    public partial class QueryInfoResult : AgentOkDeviceResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<FiscalRegisterPaymentTypeInfo> paymentTypesInfo = new List<FiscalRegisterPaymentTypeInfo>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<FiscalRegisterTaxItem> taxesInfo = new List<FiscalRegisterTaxItem>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<SupportedCommand> supportedCommands = new List<SupportedCommand>();
        [HasDefaultValue]
        private bool capQueryElectronicJournalByLastSession = false;

        protected QueryInfoResult() {}

        public QueryInfoResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {

        }
        [NotNull]
        public List<FiscalRegisterPaymentTypeInfo> PaymentTypesInfo
        {
            get { return paymentTypesInfo; }
        }

        [NotNull]
        public List<FiscalRegisterTaxItem> TaxesInfo
        {
            get { return taxesInfo; }
        }

        [NotNull]
        public List<SupportedCommand> SupportedCommands
        {
            get { return supportedCommands; }
        }

        public bool CapQueryElectronicJournalByLastSession
        {
            get { return capQueryElectronicJournalByLastSession; }
            set { capQueryElectronicJournalByLastSession = value; }
        }

    }

    [DataClass("QueryInfoTask")]
    public partial class QueryInfoTask : AgentTask
    {

        protected QueryInfoTask() {}

        public QueryInfoTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("RequiredParameter")]
    public partial class RequiredParameter
    {
        private string name;
        private string resourceName;
        private string resourceTip;
        private string type;

        public RequiredParameter() {}

        public RequiredParameter(string name, string resourceName, string resourceTip, string type)
        {
            this.name = name;
            this.resourceName = resourceName;
            this.resourceTip = resourceTip;
            this.type = type;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string ResourceName
        {
            get { return resourceName; }
            set { resourceName = value; }
        }

        public string ResourceTip
        {
            get { return resourceTip; }
            set { resourceTip = value; }
        }

        public string Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("ScaleDriverSettings")]
    public partial class ScaleDriverSettings : DeviceSettings
    {
        private string portType;
        private string scaleName;
        private int portNumber;
        private int baudRate;
        private string codePage;
        private string address;
        private int remoteTcpPort;
        private int localUdpPort;
        private int remoteUdpPort;
        private string password;
        private int portTimeoutInMs;
        private int timeStableInMs;
        private int labelDescriptionWidth;
        private string priceFormat;
        private int driver;

        protected ScaleDriverSettings() {}

        public ScaleDriverSettings(string javaDevice, string portType, string scaleName, int portNumber, int baudRate, string codePage, string address, int remoteTcpPort, int localUdpPort, int remoteUdpPort, string password, int portTimeoutInMs, int timeStableInMs, int labelDescriptionWidth, string priceFormat, int driver)
            : base(javaDevice)
        {
            this.portType = portType;
            this.scaleName = scaleName;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.codePage = codePage;
            this.address = address;
            this.remoteTcpPort = remoteTcpPort;
            this.localUdpPort = localUdpPort;
            this.remoteUdpPort = remoteUdpPort;
            this.password = password;
            this.portTimeoutInMs = portTimeoutInMs;
            this.timeStableInMs = timeStableInMs;
            this.labelDescriptionWidth = labelDescriptionWidth;
            this.priceFormat = priceFormat;
            this.driver = driver;
        }
        public string PortType
        {
            get { return portType; }
            set { portType = value; }
        }

        public string ScaleName
        {
            get { return scaleName; }
            set { scaleName = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        public int RemoteTcpPort
        {
            get { return remoteTcpPort; }
            set { remoteTcpPort = value; }
        }

        public int LocalUdpPort
        {
            get { return localUdpPort; }
            set { localUdpPort = value; }
        }

        public int RemoteUdpPort
        {
            get { return remoteUdpPort; }
            set { remoteUdpPort = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public int PortTimeoutInMs
        {
            get { return portTimeoutInMs; }
            set { portTimeoutInMs = value; }
        }

        public int TimeStableInMs
        {
            get { return timeStableInMs; }
            set { timeStableInMs = value; }
        }

        public int LabelDescriptionWidth
        {
            get { return labelDescriptionWidth; }
            set { labelDescriptionWidth = value; }
        }

        public string PriceFormat
        {
            get { return priceFormat; }
            set { priceFormat = value; }
        }

        public int Driver
        {
            get { return driver; }
            set { driver = value; }
        }

    }

    [DataClass("ServerResponse")]
    public partial class ServerResponse
    {
        private bool success;

        public ServerResponse() {}

        public ServerResponse(bool success)
        {
            this.success = success;
        }
        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

    }

    [DataClass("ShtrihDriverSettings")]
    public partial class ShtrihDriverSettings : DeviceSettings
    {
        private ConnectionInterface connectionInterface;
        private int portNumber;
        private int baudRate;
        [HasDefaultValue]
        private string hostAddress = "";
        private int hostPort;
        [HasDefaultValue]
        private int password = 30;
        [HasDefaultValue]
        private int drawerOptions = 0;
        [HasDefaultValue]
        private int useSlipDoc = 0;
        private string ofdProtocolVersion;
        [HasDefaultValue]
        private int font0Width = 36;

        protected ShtrihDriverSettings() {}

        public ShtrihDriverSettings(string javaDevice, ConnectionInterface connectionInterface, int portNumber, int baudRate, int hostPort, string ofdProtocolVersion)
            : base(javaDevice)
        {
            this.connectionInterface = connectionInterface;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.hostPort = hostPort;
            this.ofdProtocolVersion = ofdProtocolVersion;
        }
        public ConnectionInterface ConnectionInterface
        {
            get { return connectionInterface; }
            set { connectionInterface = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int HostPort
        {
            get { return hostPort; }
            set { hostPort = value; }
        }

        public int Password
        {
            get { return password; }
            set { password = value; }
        }

        public int DrawerOptions
        {
            get { return drawerOptions; }
            set { drawerOptions = value; }
        }

        public int UseSlipDoc
        {
            get { return useSlipDoc; }
            set { useSlipDoc = value; }
        }

        public string OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

    }

    [DataClass("SparkDriverSettings")]
    public partial class SparkDriverSettings : DeviceSettings
    {
        private int portNumber;
        private int baudRate;
        private int cashNumber;
        private string accessKey;
        [HasDefaultValue]
        private int font0Width = 35;
        private RestaurantPrintOption restaurantPrintOption;
        private string prepayRegisterId;

        protected SparkDriverSettings() {}

        public SparkDriverSettings(string javaDevice, int portNumber, int baudRate, int cashNumber, string accessKey, RestaurantPrintOption restaurantPrintOption, string prepayRegisterId)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.cashNumber = cashNumber;
            this.accessKey = accessKey;
            this.restaurantPrintOption = restaurantPrintOption;
            this.prepayRegisterId = prepayRegisterId;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public RestaurantPrintOption RestaurantPrintOption
        {
            get { return restaurantPrintOption; }
            set { restaurantPrintOption = value; }
        }

        public string PrepayRegisterId
        {
            get { return prepayRegisterId; }
            set { prepayRegisterId = value; }
        }

    }

    [DataClass("SparkFnDriverSettings")]
    public partial class SparkFnDriverSettings : DeviceSettings
    {
        private int cashNumber;
        private string accessKey;
        [HasDefaultValue]
        private int font0Width = 42;
        private string ofdProtocolVersion;

        protected SparkFnDriverSettings() {}

        public SparkFnDriverSettings(string javaDevice, int cashNumber, string accessKey, string ofdProtocolVersion)
            : base(javaDevice)
        {
            this.cashNumber = cashNumber;
            this.accessKey = accessKey;
            this.ofdProtocolVersion = ofdProtocolVersion;
        }
        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

        public int Font0Width
        {
            get { return font0Width; }
            set { font0Width = value; }
        }

        public string OfdProtocolVersion
        {
            get { return ofdProtocolVersion; }
            set { ofdProtocolVersion = value; }
        }

    }

    [DataClass("SupportedCommand")]
    public partial class SupportedCommand
    {
        private string name;
        private string resourceName;
        private List<RequiredParameter> parameters;

        public SupportedCommand() {}

        public SupportedCommand(string name, string resourceName)
        {
            this.name = name;
            this.resourceName = resourceName;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string ResourceName
        {
            get { return resourceName; }
            set { resourceName = value; }
        }

        public List<RequiredParameter> Parameters
        {
            get { return parameters; }
            set { parameters = value; }
        }

    }

    [DataClass("TimeoutResponse")]
    public partial class TimeoutResponse : ServerResponse
    {

        protected TimeoutResponse() {}

        public TimeoutResponse(bool success)
            : base(success)
        {

        }
    }

    [DataClass("UnisystemDriverSettings")]
    public partial class UnisystemDriverSettings : DeviceSettings
    {
        private int portNumber;
        private string accessKey;

        protected UnisystemDriverSettings() {}

        public UnisystemDriverSettings(string javaDevice, int portNumber, string accessKey)
            : base(javaDevice)
        {
            this.portNumber = portNumber;
            this.accessKey = accessKey;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public string AccessKey
        {
            get { return accessKey; }
            set { accessKey = value; }
        }

    }

    [DataClass("VideoDeviceInfo")]
    public partial class VideoDeviceInfo
    {
        private string friendlyName;
        private string devicePath;

        protected VideoDeviceInfo() {}

        public VideoDeviceInfo(string friendlyName, string devicePath)
        {
            this.friendlyName = friendlyName;
            this.devicePath = devicePath;
        }
        public string FriendlyName
        {
            get { return friendlyName; }
            set { friendlyName = value; }
        }

        public string DevicePath
        {
            get { return devicePath; }
            set { devicePath = value; }
        }

    }

    [DataClass("VideoDeviceList")]
    public partial class VideoDeviceList : AgentOkResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<VideoDeviceInfo> videoDevices = new List<VideoDeviceInfo>();

        protected VideoDeviceList() {}

        public VideoDeviceList(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings)
            : base(agentId, localTime, name, taskId, success, message, warnings)
        {

        }
        [NotNull]
        public List<VideoDeviceInfo> VideoDevices
        {
            get { return videoDevices; }
        }

    }

    [DataClass("VideoDriverSettings")]
    public partial class VideoDriverSettings : DeviceSettings
    {
        [HasDefaultValue]
        private int portNumber = 8082;
        [HasDefaultValue]
        private int bitrate = 131072;
        [HasDefaultValue]
        private int fps = 15;
        [HasDefaultValue]
        private int sharpness = 100;
        [HasDefaultValue]
        private int width = 0;
        [HasDefaultValue]
        private int height = 0;
        [HasDefaultValue]
        private string standard = "None";
        [HasDefaultValue]
        private int brightness = 0;
        [HasDefaultValue]
        private bool brightnessAuto = true;
        [HasDefaultValue]
        private int contrast = 5000;
        [HasDefaultValue]
        private bool contrastAuto = true;
        [HasDefaultValue]
        private int gamma = 300;
        [HasDefaultValue]
        private bool gammaAuto = true;
        private int hue;
        [HasDefaultValue]
        private bool hueAuto = true;
        [HasDefaultValue]
        private int saturation = 5000;
        [HasDefaultValue]
        private bool saturationAuto = true;
        [HasDefaultValue]
        private int colorEnable = 0;
        [HasDefaultValue]
        private bool colorEnableAuto = true;
        private string devicePath;
        [HasDefaultValue]
        private string crossbar = "composite";
        private string ipCameraURL;
        private string ipCameraName;
        [HasDefaultValue]
        private bool useDirectShowToCapture = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public VideoDriverSettings() {}

        public VideoDriverSettings(string javaDevice, int hue, string devicePath, string ipCameraURL, string ipCameraName)
            : base(javaDevice)
        {
            this.hue = hue;
            this.devicePath = devicePath;
            this.ipCameraURL = ipCameraURL;
            this.ipCameraName = ipCameraName;
        }
        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int Bitrate
        {
            get { return bitrate; }
            set { bitrate = value; }
        }

        public int Fps
        {
            get { return fps; }
            set { fps = value; }
        }

        public int Sharpness
        {
            get { return sharpness; }
            set { sharpness = value; }
        }

        public int Width
        {
            get { return width; }
            set { width = value; }
        }

        public int Height
        {
            get { return height; }
            set { height = value; }
        }

        public string Standard
        {
            get { return standard; }
            set { standard = value; }
        }

        public int Brightness
        {
            get { return brightness; }
            set { brightness = value; }
        }

        public bool BrightnessAuto
        {
            get { return brightnessAuto; }
            set { brightnessAuto = value; }
        }

        public int Contrast
        {
            get { return contrast; }
            set { contrast = value; }
        }

        public bool ContrastAuto
        {
            get { return contrastAuto; }
            set { contrastAuto = value; }
        }

        public int Gamma
        {
            get { return gamma; }
            set { gamma = value; }
        }

        public bool GammaAuto
        {
            get { return gammaAuto; }
            set { gammaAuto = value; }
        }

        public int Hue
        {
            get { return hue; }
            set { hue = value; }
        }

        public bool HueAuto
        {
            get { return hueAuto; }
            set { hueAuto = value; }
        }

        public int Saturation
        {
            get { return saturation; }
            set { saturation = value; }
        }

        public bool SaturationAuto
        {
            get { return saturationAuto; }
            set { saturationAuto = value; }
        }

        public int ColorEnable
        {
            get { return colorEnable; }
            set { colorEnable = value; }
        }

        public bool ColorEnableAuto
        {
            get { return colorEnableAuto; }
            set { colorEnableAuto = value; }
        }

        public string DevicePath
        {
            get { return devicePath; }
            set { devicePath = value; }
        }

        public string Crossbar
        {
            get { return crossbar; }
            set { crossbar = value; }
        }

        public string IpCameraURL
        {
            get { return ipCameraURL; }
            set { ipCameraURL = value; }
        }

        public string IpCameraName
        {
            get { return ipCameraName; }
            set { ipCameraName = value; }
        }

        public bool UseDirectShowToCapture
        {
            get { return useDirectShowToCapture; }
            set { useDirectShowToCapture = value; }
        }

    }

    [DataClass("UpgradeDeviceSettingsContainer")]
    public partial class UpgradeDeviceSettingsContainer : CachedEntity
    {
        private Guid? deviceId;
        private DeviceSettings settings;
        private bool isOverwriteExisting;

        protected UpgradeDeviceSettingsContainer() {}

        public UpgradeDeviceSettingsContainer(Guid id, Guid? deviceId, DeviceSettings settings, bool isOverwriteExisting)
            : base(id)
        {
            this.deviceId = deviceId;
            this.settings = settings;
            this.isOverwriteExisting = isOverwriteExisting;
        }

        public UpgradeDeviceSettingsContainer(Guid id)
            : base(id)
        {

        }

        public Guid? DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

        public DeviceSettings Settings
        {
            get { return settings; }
            set { settings = value; }
        }

        public bool IsOverwriteExisting
        {
            get { return isOverwriteExisting; }
            set { isOverwriteExisting = value; }
        }

    }

    [DataClass("OrderDeviationType")]
    public enum OrderDeviationType
    {
        DATE,
        AMOUNT,
        PRICE,
        NO_DEVIATIONS,
        NO_RECEIVES
    }

    [DataClass("PurchasesDeviationsReportInternalItem")]
    public partial class PurchasesDeviationsReportInternalItem
    {
        private Guid orderId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string orderNum = "";
        private DateTime orderDate;
        private Store store;
        private User supplier;
        [NotNull, NotNullField]
        private DepartmentEntity departmentTo;
        [NotNull, NotNullField]
        private Product product;
        [HasDefaultValue]
        private decimal orderAmount = 0;
        private Guid? containerId;
        private Guid? internalTransferId;
        private string internalTransferNum;
        private decimal? internalTransferAmount;
        private Guid? outgoingInvoiceId;
        private string outgoingInvoiceNum;
        private decimal? outgoingAmount;
        private Guid? incomingInvoiceId;
        private string incomingInvoiceNum;
        private decimal? incomingAmount;
        private decimal? deviationAmount;
        private decimal? deviationPercent;

        protected PurchasesDeviationsReportInternalItem() {}

        public PurchasesDeviationsReportInternalItem(Guid orderId, string orderNum, DateTime orderDate, Store store, User supplier, DepartmentEntity departmentTo, Product product, decimal orderAmount, Guid? containerId, Guid? internalTransferId, string internalTransferNum, decimal? internalTransferAmount, Guid? outgoingInvoiceId, string outgoingInvoiceNum, decimal? outgoingAmount, Guid? incomingInvoiceId, string incomingInvoiceNum, decimal? incomingAmount, decimal? deviationAmount, decimal? deviationPercent)
        {
            this.orderId = orderId;
            this.orderNum = orderNum;
            this.orderDate = orderDate;
            this.store = store;
            this.supplier = supplier;
            this.departmentTo = departmentTo;
            this.product = product;
            this.orderAmount = orderAmount;
            this.containerId = containerId;
            this.internalTransferId = internalTransferId;
            this.internalTransferNum = internalTransferNum;
            this.internalTransferAmount = internalTransferAmount;
            this.outgoingInvoiceId = outgoingInvoiceId;
            this.outgoingInvoiceNum = outgoingInvoiceNum;
            this.outgoingAmount = outgoingAmount;
            this.incomingInvoiceId = incomingInvoiceId;
            this.incomingInvoiceNum = incomingInvoiceNum;
            this.incomingAmount = incomingAmount;
            this.deviationAmount = deviationAmount;
            this.deviationPercent = deviationPercent;
        }

        public PurchasesDeviationsReportInternalItem(Guid orderId, string orderNum, DateTime orderDate, DepartmentEntity departmentTo, Product product, decimal orderAmount)
        {
            this.orderId = orderId;
            this.orderNum = orderNum;
            this.orderDate = orderDate;
            this.departmentTo = departmentTo;
            this.product = product;
            this.orderAmount = orderAmount;
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        [NotNull]
        public string OrderNum
        {
            get { return orderNum; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  orderNum = value;
            }
        }

        public DateTime OrderDate
        {
            get { return orderDate; }
            set { orderDate = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        [NotNull]
        public DepartmentEntity DepartmentTo
        {
            get { return departmentTo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  departmentTo = value;
            }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal OrderAmount
        {
            get { return orderAmount; }
            set { orderAmount = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public Guid? InternalTransferId
        {
            get { return internalTransferId; }
            set { internalTransferId = value; }
        }

        public string InternalTransferNum
        {
            get { return internalTransferNum; }
            set { internalTransferNum = value; }
        }

        public decimal? InternalTransferAmount
        {
            get { return internalTransferAmount; }
            set { internalTransferAmount = value; }
        }

        public Guid? OutgoingInvoiceId
        {
            get { return outgoingInvoiceId; }
            set { outgoingInvoiceId = value; }
        }

        public string OutgoingInvoiceNum
        {
            get { return outgoingInvoiceNum; }
            set { outgoingInvoiceNum = value; }
        }

        public decimal? OutgoingAmount
        {
            get { return outgoingAmount; }
            set { outgoingAmount = value; }
        }

        public Guid? IncomingInvoiceId
        {
            get { return incomingInvoiceId; }
            set { incomingInvoiceId = value; }
        }

        public string IncomingInvoiceNum
        {
            get { return incomingInvoiceNum; }
            set { incomingInvoiceNum = value; }
        }

        public decimal? IncomingAmount
        {
            get { return incomingAmount; }
            set { incomingAmount = value; }
        }

        public decimal? DeviationAmount
        {
            get { return deviationAmount; }
            set { deviationAmount = value; }
        }

        public decimal? DeviationPercent
        {
            get { return deviationPercent; }
            set { deviationPercent = value; }
        }

    }

    [DataClass("PurchasesDeviationsReportItem")]
    public partial class PurchasesDeviationsReportItem
    {
        private ProductContainerKey productContainerKey;
        private EdiOrderDocument order;
        private DateTime? orderDate;
        [HasDefaultValue]
        private decimal orderPrice = 0;
        [HasDefaultValue]
        private decimal orderPriceWithVat = 0;
        [HasDefaultValue]
        private decimal orderAmount = 0;
        private List<PurchasesDeviationsReportReceivedItem> receivedPurchases;

        protected PurchasesDeviationsReportItem() {}

        public PurchasesDeviationsReportItem(ProductContainerKey productContainerKey, EdiOrderDocument order, DateTime? orderDate, decimal orderPrice, decimal orderPriceWithVat, decimal orderAmount)
        {
            this.productContainerKey = productContainerKey;
            this.order = order;
            this.orderDate = orderDate;
            this.orderPrice = orderPrice;
            this.orderPriceWithVat = orderPriceWithVat;
            this.orderAmount = orderAmount;
        }

        public PurchasesDeviationsReportItem(decimal orderPrice, decimal orderPriceWithVat, decimal orderAmount)
        {
            this.orderPrice = orderPrice;
            this.orderPriceWithVat = orderPriceWithVat;
            this.orderAmount = orderAmount;
        }

        public ProductContainerKey ProductContainerKey
        {
            get { return productContainerKey; }
            set { productContainerKey = value; }
        }

        public EdiOrderDocument Order
        {
            get { return order; }
            set { order = value; }
        }

        public DateTime? OrderDate
        {
            get { return orderDate; }
            set { orderDate = value; }
        }

        public decimal OrderPrice
        {
            get { return orderPrice; }
            set { orderPrice = value; }
        }

        public decimal OrderPriceWithVat
        {
            get { return orderPriceWithVat; }
            set { orderPriceWithVat = value; }
        }

        public decimal OrderAmount
        {
            get { return orderAmount; }
            set { orderAmount = value; }
        }

        public List<PurchasesDeviationsReportReceivedItem> ReceivedPurchases
        {
            get { return receivedPurchases; }
            set { receivedPurchases = value; }
        }

    }

    [DataClass("PurchasesDeviationsReportReceivedItem")]
    public partial class PurchasesDeviationsReportReceivedItem
    {
        [HasDefaultValue]
        private decimal price = 0;
        [HasDefaultValue]
        private decimal priceWithVat = 0;
        [HasDefaultValue]
        private decimal amount = 0;
        private DateTime? date;
        private HashSet<Guid> invoiceIds;
        private HashSet<string> invoiceNums;

        protected PurchasesDeviationsReportReceivedItem() {}

        public PurchasesDeviationsReportReceivedItem(decimal price, decimal priceWithVat, decimal amount, DateTime? date)
        {
            this.price = price;
            this.priceWithVat = priceWithVat;
            this.amount = amount;
            this.date = date;
        }

        public PurchasesDeviationsReportReceivedItem(decimal price, decimal priceWithVat, decimal amount)
        {
            this.price = price;
            this.priceWithVat = priceWithVat;
            this.amount = amount;
        }

        public decimal Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal PriceWithVat
        {
            get { return priceWithVat; }
            set { priceWithVat = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public HashSet<Guid> InvoiceIds
        {
            get { return invoiceIds; }
            set { invoiceIds = value; }
        }

        public HashSet<string> InvoiceNums
        {
            get { return invoiceNums; }
            set { invoiceNums = value; }
        }

    }

    [DataClass("DocumentReplenishmentDto")]
    public partial class DocumentReplenishmentDto
    {
        private List<ProductReplenishmentDto> items;
        private Store store;
        private User supplier;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DocumentReplenishmentDto() {}

        public DocumentReplenishmentDto(Store store, User supplier)
        {
            this.store = store;
            this.supplier = supplier;
        }
        public List<ProductReplenishmentDto> Items
        {
            get { return items; }
            set { items = value; }
        }

        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

    }

    [DataClass("EdiAdditionalItem")]
    public partial class EdiAdditionalItem
    {
        private string gtin;
        private int num;
        private string internalCode;
        private string supplierCode;
        private string description;
        private MeasureUnit ediAmountUnit;
        private decimal? amount;
        private decimal? amountInEdiAmountUnits;
        private decimal? onePlaceAmount;
        private decimal? price;
        private decimal? priceVAT;
        private decimal? sum;
        private decimal? sumWithVAT;
        private string comment;

        public EdiAdditionalItem() {}

        public EdiAdditionalItem(string gtin, int num, string internalCode, string supplierCode, string description, MeasureUnit ediAmountUnit, decimal? amount, decimal? amountInEdiAmountUnits, decimal? onePlaceAmount, decimal? price, decimal? priceVAT, decimal? sum, decimal? sumWithVAT, string comment)
        {
            this.gtin = gtin;
            this.num = num;
            this.internalCode = internalCode;
            this.supplierCode = supplierCode;
            this.description = description;
            this.ediAmountUnit = ediAmountUnit;
            this.amount = amount;
            this.amountInEdiAmountUnits = amountInEdiAmountUnits;
            this.onePlaceAmount = onePlaceAmount;
            this.price = price;
            this.priceVAT = priceVAT;
            this.sum = sum;
            this.sumWithVAT = sumWithVAT;
            this.comment = comment;
        }
        public string Gtin
        {
            get { return gtin; }
            set { gtin = value; }
        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        public string InternalCode
        {
            get { return internalCode; }
            set { internalCode = value; }
        }

        public string SupplierCode
        {
            get { return supplierCode; }
            set { supplierCode = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public MeasureUnit EdiAmountUnit
        {
            get { return ediAmountUnit; }
            set { ediAmountUnit = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? AmountInEdiAmountUnits
        {
            get { return amountInEdiAmountUnits; }
            set { amountInEdiAmountUnits = value; }
        }

        public decimal? OnePlaceAmount
        {
            get { return onePlaceAmount; }
            set { onePlaceAmount = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal? PriceVAT
        {
            get { return priceVAT; }
            set { priceVAT = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumWithVAT
        {
            get { return sumWithVAT; }
            set { sumWithVAT = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("EdiDocumentIdentifier")]
    public partial class EdiDocumentIdentifier
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string number = "";
        private DateTime date;

        protected EdiDocumentIdentifier() {}

        public EdiDocumentIdentifier(string number, DateTime date)
        {
            this.number = number;
            this.date = date;
        }
        [NotNull]
        public string Number
        {
            get { return number; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  number = value;
            }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

    }

    [DataClass("EdiIncomingInvoice")]
    public partial class EdiIncomingInvoice : IncomingInvoice
    {
        [NotNull, NotNullField]
        private EdiSystem ediSystem;
        private EdiDocumentIdentifier ediId;
        private EdiInvoiceStatus processingStatus;
        private EdiOrderDocument ediOrder;
        private InvoiceDeliveryInfo deliveryInfo;
        private string currency;

        protected EdiIncomingInvoice() {}

        public EdiIncomingInvoice(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, User supplier, EdiSystem ediSystem, EdiDocumentIdentifier ediId, EdiInvoiceStatus processingStatus, EdiOrderDocument ediOrder, InvoiceDeliveryInfo deliveryInfo, string currency)
            : base(id, dateIncoming, documentNumber, status, supplier)
        {
            this.ediSystem = ediSystem;
            this.ediId = ediId;
            this.processingStatus = processingStatus;
            this.ediOrder = ediOrder;
            this.deliveryInfo = deliveryInfo;
            this.currency = currency;
        }

        public EdiIncomingInvoice(Guid id, DateTime dateIncoming, string documentNumber, EdiSystem ediSystem, EdiInvoiceStatus processingStatus)
            : base(id, dateIncoming, documentNumber)
        {
            this.ediSystem = ediSystem;
            this.processingStatus = processingStatus;
        }

        [NotNull]
        public EdiSystem EdiSystem
        {
            get { return ediSystem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  ediSystem = value;
            }
        }

        public EdiDocumentIdentifier EdiId
        {
            get { return ediId; }
            set { ediId = value; }
        }

        public EdiInvoiceStatus ProcessingStatus
        {
            get { return processingStatus; }
            set { processingStatus = value; }
        }

        public EdiOrderDocument EdiOrder
        {
            get { return ediOrder; }
            set { ediOrder = value; }
        }

        public InvoiceDeliveryInfo DeliveryInfo
        {
            get { return deliveryInfo; }
            set { deliveryInfo = value; }
        }

        public string Currency
        {
            get { return currency; }
            set { currency = value; }
        }

    }

    [DataClass("EdiIncomingInvoiceListRecord")]
    public partial class EdiIncomingInvoiceListRecord : IncomingInvoiceListRecord
    {
        private Guid? ediOrderId;
        private bool isLocallyCreated;

        protected EdiIncomingInvoiceListRecord() {}

        public EdiIncomingInvoiceListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, bool isAutomatic, bool disableUserSaving, string invoiceIncomingNumber, bool hasDifference, Guid? ediOrderId, bool isLocallyCreated)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum, isAutomatic, disableUserSaving, invoiceIncomingNumber, hasDifference)
        {
            this.ediOrderId = ediOrderId;
            this.isLocallyCreated = isLocallyCreated;
        }
        public Guid? EdiOrderId
        {
            get { return ediOrderId; }
            set { ediOrderId = value; }
        }

        public bool IsLocallyCreated
        {
            get { return isLocallyCreated; }
        }

    }

    [DataClass("EdiInvoiceStatus")]
    public enum EdiInvoiceStatus
    {
        CREATED,
        PROCESSED,
        TO_SEND,
        SENT,
        PAID
    }

    [DataClass("EdiOrderDocument")]
    public partial class EdiOrderDocument : AbstractStoreDocument
    {
        [NotNull, NotNullField]
        private EdiSystem ediSystem;
        private EdiDocumentIdentifier ediId;
        private bool isEdiDocument;
        private EdiOrderStatus ediStatus;
        private DateTime? sentDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Guid> invoiceIds = new HashSet<Guid>();
        private string promoAction;
        [NotNull, NotNullField]
        private User seller;
        [NotNull, NotNullField]
        private Store store;
        private DateTime? deliveryDate;
        private DateTime? confirmedDeliveryDate;
        private string currency;
        private JurPerson payer;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EdiOrderItem> items = new List<EdiOrderItem>();
        private List<EdiAdditionalItem> additionalItems;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EdiOrderDocument() {}

        public EdiOrderDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status, EdiSystem ediSystem, EdiDocumentIdentifier ediId, bool isEdiDocument, EdiOrderStatus ediStatus, DateTime? sentDate, string promoAction, User seller, Store store, DateTime? deliveryDate, DateTime? confirmedDeliveryDate, string currency, JurPerson payer)
            : base(id, dateIncoming, documentNumber, status)
        {
            this.ediSystem = ediSystem;
            this.ediId = ediId;
            this.isEdiDocument = isEdiDocument;
            this.ediStatus = ediStatus;
            this.sentDate = sentDate;
            this.promoAction = promoAction;
            this.seller = seller;
            this.store = store;
            this.deliveryDate = deliveryDate;
            this.confirmedDeliveryDate = confirmedDeliveryDate;
            this.currency = currency;
            this.payer = payer;
        }

        public EdiOrderDocument(Guid id, DateTime dateIncoming, string documentNumber, EdiSystem ediSystem, bool isEdiDocument, EdiOrderStatus ediStatus, User seller, Store store)
            : base(id, dateIncoming, documentNumber)
        {
            this.ediSystem = ediSystem;
            this.isEdiDocument = isEdiDocument;
            this.ediStatus = ediStatus;
            this.seller = seller;
            this.store = store;
        }

        [NotNull]
        public EdiSystem EdiSystem
        {
            get { return ediSystem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  ediSystem = value;
            }
        }

        public EdiDocumentIdentifier EdiId
        {
            get { return ediId; }
            set { ediId = value; }
        }

        public bool IsEdiDocument
        {
            get { return isEdiDocument; }
            set { isEdiDocument = value; }
        }

        public EdiOrderStatus EdiStatus
        {
            get { return ediStatus; }
        }

        public DateTime? SentDate
        {
            get { return sentDate; }
            set { sentDate = value; }
        }

        [NotNull]
        public HashSet<Guid> InvoiceIds
        {
            get { return invoiceIds; }
        }

        public string PromoAction
        {
            get { return promoAction; }
            set { promoAction = value; }
        }

        [NotNull]
        public User Seller
        {
            get { return seller; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  seller = value;
            }
        }

        [NotNull]
        public Store Store
        {
            get { return store; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  store = value;
            }
        }

        public DateTime? DeliveryDate
        {
            get { return deliveryDate; }
            set { deliveryDate = value; }
        }

        public DateTime? ConfirmedDeliveryDate
        {
            get { return confirmedDeliveryDate; }
            set { confirmedDeliveryDate = value; }
        }

        public string Currency
        {
            get { return currency; }
            set { currency = value; }
        }

        public JurPerson Payer
        {
            get { return payer; }
            set { payer = value; }
        }

        [NotNull]
        public List<EdiOrderItem> Items
        {
            get { return items; }
        }

        public List<EdiAdditionalItem> AdditionalItems
        {
            get { return additionalItems; }
            set { additionalItems = value; }
        }

    }

    [DataClass("EdiOrderDocumentListRecord")]
    public partial class EdiOrderDocumentListRecord : AccountingDocumentListRecord
    {
        private EdiSystem ediSystem;
        private bool ediDocument;
        private EdiOrderStatus status;
        private ICollection<EdiIncomingInvoice> invoiceIds;
        private User seller;
        private JurPerson payer;
        private DateTime? deliveryDate;

        protected EdiOrderDocumentListRecord() {}

        public EdiOrderDocumentListRecord(Guid? documentID, DateTime? date, string number, DocumentType type, bool processed, bool deleted, DateTime? dateCreated, DateTime? dateModified, User userCreated, User userModified, string comment, string documentSummary, User counteragent, Store storeFrom, Store storeTo, decimal? amount, decimal? sumWithoutNds, decimal? sum, EdiSystem ediSystem, bool ediDocument, EdiOrderStatus status, User seller, JurPerson payer, DateTime? deliveryDate)
            : base(documentID, date, number, type, processed, deleted, dateCreated, dateModified, userCreated, userModified, comment, documentSummary, counteragent, storeFrom, storeTo, amount, sumWithoutNds, sum)
        {
            this.ediSystem = ediSystem;
            this.ediDocument = ediDocument;
            this.status = status;
            this.seller = seller;
            this.payer = payer;
            this.deliveryDate = deliveryDate;
        }
        public EdiSystem EdiSystem
        {
            get { return ediSystem; }
            set { ediSystem = value; }
        }

        public bool EdiDocument
        {
            get { return ediDocument; }
            set { ediDocument = value; }
        }

        public EdiOrderStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public ICollection<EdiIncomingInvoice> InvoiceIds
        {
            get { return invoiceIds; }
            set { invoiceIds = value; }
        }

        public User Seller
        {
            get { return seller; }
            set { seller = value; }
        }

        public JurPerson Payer
        {
            get { return payer; }
            set { payer = value; }
        }

        public DateTime? DeliveryDate
        {
            get { return deliveryDate; }
            set { deliveryDate = value; }
        }

    }

    [DataClass("EdiOrderItem")]
    public partial class EdiOrderItem : AbstractProductWithUnitDocumentItem
    {
        [NotNull, NotNullField]
        private EdiOrderDocument ediOrder;
        private EdiOrderItemStatus status;
        private MeasureUnit ediAmountUnit;
        private decimal? onePlaceAmount;
        private decimal? amountInPrimaryUnits;
        private decimal? price;
        private decimal? priceWithVAT;
        private decimal? sum;
        private decimal? sumWithVAT;
        private string comment;
        private Product supplierProduct;
        private string savedInternalProductCode;
        private string savedExternalProductCode;
        private MeasureUnit confirmedEdiAmountUnit;
        private decimal? confirmedAmount;
        private decimal? confirmedAmountInPrimaryUnits;
        private decimal? confirmedOnePlaceAmount;
        private decimal? confirmedPrice;
        private decimal? confirmedPriceVAT;
        private decimal? confirmedSum;
        private decimal? confirmedSumVAT;
        private string confirmedComment;

        protected EdiOrderItem() {}

        public EdiOrderItem(Guid id, int num, Product product, decimal amount, MeasureUnit amountUnit, EdiOrderDocument ediOrder, EdiOrderItemStatus status, MeasureUnit ediAmountUnit, decimal? onePlaceAmount, decimal? amountInPrimaryUnits, decimal? price, decimal? priceWithVAT, decimal? sum, decimal? sumWithVAT, string comment, MeasureUnit confirmedEdiAmountUnit, decimal? confirmedAmount, decimal? confirmedAmountInPrimaryUnits, decimal? confirmedOnePlaceAmount, decimal? confirmedPrice, decimal? confirmedPriceVAT, decimal? confirmedSum, decimal? confirmedSumVAT, string confirmedComment)
            : base(id, num, product, amount, amountUnit)
        {
            this.ediOrder = ediOrder;
            this.status = status;
            this.ediAmountUnit = ediAmountUnit;
            this.onePlaceAmount = onePlaceAmount;
            this.amountInPrimaryUnits = amountInPrimaryUnits;
            this.price = price;
            this.priceWithVAT = priceWithVAT;
            this.sum = sum;
            this.sumWithVAT = sumWithVAT;
            this.comment = comment;
            this.confirmedEdiAmountUnit = confirmedEdiAmountUnit;
            this.confirmedAmount = confirmedAmount;
            this.confirmedAmountInPrimaryUnits = confirmedAmountInPrimaryUnits;
            this.confirmedOnePlaceAmount = confirmedOnePlaceAmount;
            this.confirmedPrice = confirmedPrice;
            this.confirmedPriceVAT = confirmedPriceVAT;
            this.confirmedSum = confirmedSum;
            this.confirmedSumVAT = confirmedSumVAT;
            this.confirmedComment = confirmedComment;
        }

        public EdiOrderItem(Guid id, Product product, decimal amount, EdiOrderDocument ediOrder, EdiOrderItemStatus status)
            : base(id, product, amount)
        {
            this.ediOrder = ediOrder;
            this.status = status;
        }

        [NotNull]
        public EdiOrderDocument EdiOrder
        {
            get { return ediOrder; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  ediOrder = value;
            }
        }

        public EdiOrderItemStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public MeasureUnit EdiAmountUnit
        {
            get { return ediAmountUnit; }
            set { ediAmountUnit = value; }
        }

        public decimal? OnePlaceAmount
        {
            get { return onePlaceAmount; }
            set { onePlaceAmount = value; }
        }

        public decimal? AmountInPrimaryUnits
        {
            get { return amountInPrimaryUnits; }
            set { amountInPrimaryUnits = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal? PriceWithVAT
        {
            get { return priceWithVAT; }
            set { priceWithVAT = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumWithVAT
        {
            get { return sumWithVAT; }
            set { sumWithVAT = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public Product SupplierProduct
        {
            get { return supplierProduct; }
            set { supplierProduct = value; }
        }

        [CanBeNull]
        public string SavedInternalProductCode
        {
            get { return savedInternalProductCode; }
            set { savedInternalProductCode = value; }
        }

        [CanBeNull]
        public string SavedExternalProductCode
        {
            get { return savedExternalProductCode; }
            set { savedExternalProductCode = value; }
        }

        public MeasureUnit ConfirmedEdiAmountUnit
        {
            get { return confirmedEdiAmountUnit; }
            set { confirmedEdiAmountUnit = value; }
        }

        public decimal? ConfirmedAmount
        {
            get { return confirmedAmount; }
            set { confirmedAmount = value; }
        }

        public decimal? ConfirmedAmountInPrimaryUnits
        {
            get { return confirmedAmountInPrimaryUnits; }
            set { confirmedAmountInPrimaryUnits = value; }
        }

        public decimal? ConfirmedOnePlaceAmount
        {
            get { return confirmedOnePlaceAmount; }
            set { confirmedOnePlaceAmount = value; }
        }

        public decimal? ConfirmedPrice
        {
            get { return confirmedPrice; }
            set { confirmedPrice = value; }
        }

        public decimal? ConfirmedPriceVAT
        {
            get { return confirmedPriceVAT; }
            set { confirmedPriceVAT = value; }
        }

        public decimal? ConfirmedSum
        {
            get { return confirmedSum; }
            set { confirmedSum = value; }
        }

        public decimal? ConfirmedSumVAT
        {
            get { return confirmedSumVAT; }
            set { confirmedSumVAT = value; }
        }

        public string ConfirmedComment
        {
            get { return confirmedComment; }
            set { confirmedComment = value; }
        }

    }

    [DataClass("EdiOrderItemStatus")]
    public enum EdiOrderItemStatus
    {
        NOT_CONFIRMED,
        CHANGED,
        ACCEPTED,
        REJECTED
    }

    [DataClass("EdiOrderStatus")]
    public enum EdiOrderStatus
    {
        CREATED,
        PROCESSED,
        TO_SEND_REQ,
        TO_SEND,
        SENT,
        CONFIRMED,
        CONFIRMED_WITH_CHANGES,
        DESPATCHED,
        EXECUTED,
        DISCARDED,
        CANCELED_REQ,
        CANCELED
    }

    [DataClass("InvoiceDeliveryInfo")]
    public partial class InvoiceDeliveryInfo
    {
        private DateTime? estimatedDeliveryDate;
        private DateTime? shippingDate;
        private string shipFrom;
        private string shipTo;
        private string transportInfo;

        public InvoiceDeliveryInfo() {}

        public InvoiceDeliveryInfo(DateTime? estimatedDeliveryDate, DateTime? shippingDate, string shipFrom, string shipTo, string transportInfo)
        {
            this.estimatedDeliveryDate = estimatedDeliveryDate;
            this.shippingDate = shippingDate;
            this.shipFrom = shipFrom;
            this.shipTo = shipTo;
            this.transportInfo = transportInfo;
        }
        public DateTime? EstimatedDeliveryDate
        {
            get { return estimatedDeliveryDate; }
            set { estimatedDeliveryDate = value; }
        }

        public DateTime? ShippingDate
        {
            get { return shippingDate; }
            set { shippingDate = value; }
        }

        public string ShipFrom
        {
            get { return shipFrom; }
            set { shipFrom = value; }
        }

        public string ShipTo
        {
            get { return shipTo; }
            set { shipTo = value; }
        }

        public string TransportInfo
        {
            get { return transportInfo; }
            set { transportInfo = value; }
        }

    }

    [DataClass("ProductReplenishmentDto")]
    public partial class ProductReplenishmentDto
    {
        private Store store;
        private User supplier;
        private Product product;
        private decimal? amount;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, decimal> containerCosts = new Dictionary<Guid, decimal>();

        protected ProductReplenishmentDto() {}

        public ProductReplenishmentDto(Store store, User supplier, Product product, decimal? amount)
        {
            this.store = store;
            this.supplier = supplier;
            this.product = product;
            this.amount = amount;
        }
        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        [NotNull]
        public Dictionary<Guid, decimal> ContainerCosts
        {
            get { return containerCosts; }
        }

    }

    [RootEntity]
    [DataClass("EdiSystem")]
    public partial class EdiSystem : LocalizableNamePersistedEntity
    {
        private EdiSystemType systemType;

        protected EdiSystem() {}

        public EdiSystem(Guid id, LocalizableValue name, EdiSystemType systemType)
            : base(id, name)
        {
            this.systemType = systemType;
        }

        public EdiSystem(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public EdiSystemType SystemType
        {
            get { return systemType; }
            set { systemType = value; }
        }

    }

    [DataClass("EdiSystemType")]
    public enum EdiSystemType
    {
        INTERNAL_EDI_SYSTEM,
        KONTUR_EDI_SYSTEM,
        EXTERNAL_EDI_SYSTEM,
        UNSPECIFIED_EDI_SYSTEM
    }

    [DataClass("EventAttributeMetadata")]
    public partial class EventAttributeMetadata : EventMetadata
    {
        private string type;
        private string format;
        private string summaryType;
        private string summaryFormat;
        private bool optional;
        private EventValueType valueType;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EventAttributeMetadata() {}

        public EventAttributeMetadata(string id, string name, string type, string format, string summaryType, string summaryFormat, bool optional, EventValueType valueType)
            : base(id, name)
        {
            this.type = type;
            this.format = format;
            this.summaryType = summaryType;
            this.summaryFormat = summaryFormat;
            this.optional = optional;
            this.valueType = valueType;
        }
        public string Type
        {
            get { return type; }
            set { type = value; }
        }

        public string Format
        {
            get { return format; }
            set { format = value; }
        }

        public string SummaryType
        {
            get { return summaryType; }
            set { summaryType = value; }
        }

        public string SummaryFormat
        {
            get { return summaryFormat; }
            set { summaryFormat = value; }
        }

        public bool Optional
        {
            get { return optional; }
            set { optional = value; }
        }

        public EventValueType ValueType
        {
            get { return valueType; }
            set { valueType = value; }
        }

    }

    [DataClass("EventValueType")]
    public enum EventValueType
    {
        COMMON,
        CURRENCY
    }

    [DataClass("EventGroupMetadata")]
    public partial class EventGroupMetadata : EventMetadata
    {
        private EventGroupMetadata parent;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EventTypeMetadata> eventTypes = new List<EventTypeMetadata>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EventAttributeMetadata> commonAttributes = new List<EventAttributeMetadata>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EventGroupMetadata() {}

        public EventGroupMetadata(string id, string name, EventGroupMetadata parent)
            : base(id, name)
        {
            this.parent = parent;
        }
        public EventGroupMetadata Parent
        {
            get { return parent; }
            set { parent = value; }
        }

        [NotNull]
        public List<EventTypeMetadata> EventTypes
        {
            get { return eventTypes; }
        }

        [NotNull]
        public List<EventAttributeMetadata> CommonAttributes
        {
            get { return commonAttributes; }
        }

    }

    [DataClass("EventMetadata")]
    public abstract partial class EventMetadata
    {
        private string id;
        private string name;

        public EventMetadata() {}

        protected EventMetadata(string id, string name)
        {
            this.id = id;
            this.name = name;
        }
        public string Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }

    [DataClass("EventTypeMetadata")]
    public partial class EventTypeMetadata : EventMetadata
    {
        private int severity;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EventAttributeMetadata> mandatoryAttributes = new List<EventAttributeMetadata>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EventAttributeMetadata> optionalAttributes = new List<EventAttributeMetadata>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EventTypeMetadata() {}

        public EventTypeMetadata(string id, string name, int severity)
            : base(id, name)
        {
            this.severity = severity;
        }
        public int Severity
        {
            get { return severity; }
            set { severity = value; }
        }

        [NotNull]
        public List<EventAttributeMetadata> MandatoryAttributes
        {
            get { return mandatoryAttributes; }
        }

        [NotNull]
        public List<EventAttributeMetadata> OptionalAttributes
        {
            get { return optionalAttributes; }
        }

    }

    [RootEntity]
    [DataClass("EventsJournalPreset")]
    public partial class EventsJournalPreset : LocalizableNamePersistedEntity
    {
        private bool system;
        private OperationInfo modifiedInfo;
        private List<string> events;
        private UserEventSeverity eventSeverity;
        private Dictionary<string, string> filters;
        private EventsJournalPresetTimeFilter periodFilter;
        private int? periodFilterOffset;
        private HashSet<DepartmentEntity> departments;

        protected EventsJournalPreset() {}

        public EventsJournalPreset(Guid id, LocalizableValue name, bool system)
            : base(id, name)
        {
            this.system = system;
        }
        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

        [CanBeNull]
        public List<string> Events
        {
            get { return events; }
            set { events = value; }
        }

        [CanBeNull]
        public UserEventSeverity EventSeverity
        {
            get { return eventSeverity; }
            set { eventSeverity = value; }
        }

        [CanBeNull]
        public Dictionary<string, string> Filters
        {
            get { return filters; }
            set { filters = value; }
        }

        [CanBeNull]
        public EventsJournalPresetTimeFilter PeriodFilter
        {
            get { return periodFilter; }
            set { periodFilter = value; }
        }

        public int? PeriodFilterOffset
        {
            get { return periodFilterOffset; }
            set { periodFilterOffset = value; }
        }

    }

    [DataClass("EventsJournalPresetTimeFilter")]
    [EnumClass]
    public partial class EventsJournalPresetTimeFilter
    {
        public static readonly EventsJournalPresetTimeFilter CURRENT_DAY = new EventsJournalPresetTimeFilter("CURRENT_DAY", false);
        public static readonly EventsJournalPresetTimeFilter CURRENT_WEEK = new EventsJournalPresetTimeFilter("CURRENT_WEEK", false);
        public static readonly EventsJournalPresetTimeFilter CURRENT_MONTH = new EventsJournalPresetTimeFilter("CURRENT_MONTH", false);
        public static readonly EventsJournalPresetTimeFilter CURRENT_YEAR = new EventsJournalPresetTimeFilter("CURRENT_YEAR", false);
        public static readonly EventsJournalPresetTimeFilter LAST_DAY = new EventsJournalPresetTimeFilter("LAST_DAY", false);
        public static readonly EventsJournalPresetTimeFilter LAST_WEEK = new EventsJournalPresetTimeFilter("LAST_WEEK", false);
        public static readonly EventsJournalPresetTimeFilter LAST_MONTH = new EventsJournalPresetTimeFilter("LAST_MONTH", false);
        public static readonly EventsJournalPresetTimeFilter OFFSET_MINUTES = new EventsJournalPresetTimeFilter("OFFSET_MINUTES", true);

        private readonly bool offest;
        private readonly string __value;

        private EventsJournalPresetTimeFilter(string __value, bool offest)
        {
            this.__value = __value;
            this.offest = offest;
        }

        public static EventsJournalPresetTimeFilter Parse(string value)
        {
            switch(value)
            {
                case "CURRENT_DAY": return CURRENT_DAY;
                case "CURRENT_WEEK": return CURRENT_WEEK;
                case "CURRENT_MONTH": return CURRENT_MONTH;
                case "CURRENT_YEAR": return CURRENT_YEAR;
                case "LAST_DAY": return LAST_DAY;
                case "LAST_WEEK": return LAST_WEEK;
                case "LAST_MONTH": return LAST_MONTH;
                case "OFFSET_MINUTES": return OFFSET_MINUTES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EventsJournalPresetTimeFilter[] VALUES
        {
            get
            {
                return new []
                {
                    CURRENT_DAY, 
                    CURRENT_WEEK, 
                    CURRENT_MONTH, 
                    CURRENT_YEAR, 
                    LAST_DAY, 
                    LAST_WEEK, 
                    LAST_MONTH, 
                    OFFSET_MINUTES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public bool Offest
        {
            get { return offest; }
        }

    }

    [DataClass("RestoEvent")]
    public abstract partial class RestoEvent : SimpleDepartmentableEntity
    {
        private DepartmentEntity department;
        private DateTime date;

        protected RestoEvent() {}

        protected RestoEvent(Guid id, DepartmentEntity department, DateTime date)
            : base(id)
        {
            this.department = department;
            this.date = date;
        }

        protected RestoEvent(Guid id, DateTime date)
            : base(id)
        {
            this.date = date;
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

    }

    [DataClass("UserActionEvent")]
    public partial class UserActionEvent : RestoEvent
    {
        private UserActionEventType eventType;
        private User user;
        private Terminal terminal;
        private CafeSessionProperties session;
        private AuthData auth;
        private string comment;

        protected UserActionEvent() {}

        public UserActionEvent(Guid id, DepartmentEntity department, DateTime date, UserActionEventType eventType, User user, Terminal terminal, CafeSessionProperties session, AuthData auth, string comment)
            : base(id, department, date)
        {
            this.eventType = eventType;
            this.user = user;
            this.terminal = terminal;
            this.session = session;
            this.auth = auth;
            this.comment = comment;
        }

        public UserActionEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public UserActionEventType EventType
        {
            get { return eventType; }
            set { eventType = value; }
        }

        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

        public CafeSessionProperties Session
        {
            get { return session; }
            set { session = value; }
        }

        public AuthData Auth
        {
            get { return auth; }
            set { auth = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("UserActionEventType")]
    [EnumClass]
    public partial class UserActionEventType : LocalizableName<UserActionEventType>, ILocalizableShortName
    {
        /// <summary> Аванс по зарплате. Ав.. </summary>
        public static readonly UserActionEventType ADVANCE = new UserActionEventType("ADVANCE", "ADV", true);
        /// <summary> Премия. Бон.. </summary>
        public static readonly UserActionEventType BONUS = new UserActionEventType("BONUS", "BONUS", true);
        /// <summary> Авторизация картой. Авт.к.. </summary>
        public static readonly UserActionEventType CARD_AUTHORIZATION = new UserActionEventType("CARD_AUTHORIZATION", "CrAE", true);
        /// <summary> Открытие кассовой смены. Откр.к.с.. </summary>
        public static readonly UserActionEventType CASHIER_SESSION_OPEN = new UserActionEventType("CASHIER_SESSION_OPEN", "CSOE", false);
        /// <summary> Закрытие кассовой смены. Закр.к.с.. </summary>
        public static readonly UserActionEventType CASHIER_SESSION_CLOSE = new UserActionEventType("CASHIER_SESSION_CLOSE", "CSCE", false);
        /// <summary> Удаление заказа. Уд.з.. </summary>
        public static readonly UserActionEventType ORDER_DELETE = new UserActionEventType("ORDER_DELETE", "ODlE", true);
        /// <summary> Добавление скидки. Доб.ск.. </summary>
        public static readonly UserActionEventType ORDER_DISCOUNT = new UserActionEventType("ORDER_DISCOUNT", "ODsE", false);
        /// <summary> Открытие нового стола. Откр.ст.. </summary>
        public static readonly UserActionEventType ORDER_OPEN = new UserActionEventType("ORDER_OPEN", "OOpE", true);
        /// <summary> Оплата заказа. Опл.. </summary>
        public static readonly UserActionEventType ORDER_PAYMENT = new UserActionEventType("ORDER_PAYMENT", "OPyE", false);
        /// <summary> Распечатка пречека. Расп.преч.. </summary>
        public static readonly UserActionEventType ORDER_PRECHEQUE = new UserActionEventType("ORDER_PRECHEQUE", "OPcE", true);
        /// <summary> Внесение предоплаты. Вн.пр.. </summary>
        public static readonly UserActionEventType ORDER_PREPAY = new UserActionEventType("ORDER_PREPAY", "OPpE", false);
        /// <summary> Печать блюд. П.бл.. </summary>
        public static readonly UserActionEventType ORDER_PRINT = new UserActionEventType("ORDER_PRINT", "OPnE", true);
        /// <summary> Инкассация. Инк.. </summary>
        public static readonly UserActionEventType PAY_COLLECTION = new UserActionEventType("PAY_COLLECTION", "PAYCOL", false);
        /// <summary> Внесение наличных. Вн.нал.. </summary>
        public static readonly UserActionEventType PAY_IN = new UserActionEventType("PAY_IN", "PAYIN", false);
        /// <summary> Изъятие наличных. Из.нал.. </summary>
        public static readonly UserActionEventType PAY_OUT = new UserActionEventType("PAY_OUT", "PAYOUT", false);
        /// <summary> Штраф. Штр.. </summary>
        public static readonly UserActionEventType PENALTY = new UserActionEventType("PENALTY", "PENAL", true);
        /// <summary> Открытие личной смены. Откр.л.с.. </summary>
        public static readonly UserActionEventType PERSONAL_SESSION_OPEN = new UserActionEventType("PERSONAL_SESSION_OPEN", "PSOE", false);
        /// <summary> Закрытие личной смены. Закр.л.с.. </summary>
        public static readonly UserActionEventType PERSONAL_SESSION_CLOSE = new UserActionEventType("PERSONAL_SESSION_CLOSE", "PSCE", false);
        /// <summary> Авторизация PIN-кодом. Авт.PIN. </summary>
        public static readonly UserActionEventType PIN_AUTHORIZATION = new UserActionEventType("PIN_AUTHORIZATION", "PiAE", true);
        /// <summary> Сторнирование чека. Сторн.. </summary>
        public static readonly UserActionEventType ORDER_STORNO = new UserActionEventType("ORDER_STORNO", "Storn", true);
        /// <summary> Закрытие смены. Закр.с.. </summary>
        public static readonly UserActionEventType SESSION_CLOSE = new UserActionEventType("SESSION_CLOSE", "CSE", false);
        /// <summary> Открытие смены. Откр.с.. </summary>
        public static readonly UserActionEventType SESSION_OPEN = new UserActionEventType("SESSION_OPEN", "OSE", false);
        /// <summary> Отмена штрафа. Отм. шт.. </summary>
        public static readonly UserActionEventType PENALTY_CANCEL = new UserActionEventType("PENALTY_CANCEL", "PCANC", false);
        /// <summary> Отмена премии. Отм. прем.. </summary>
        public static readonly UserActionEventType BONUS_CANCEL = new UserActionEventType("BONUS_CANCEL", "BCANC", false);
        /// <summary> Авторизация в Office. АвтOffice. </summary>
        public static readonly UserActionEventType BACK_LOGIN = new UserActionEventType("BACK_LOGIN", "BALOG", true);
        /// <summary> Выход из Office. ВыхOffice. </summary>
        public static readonly UserActionEventType BACK_LOGOUT = new UserActionEventType("BACK_LOGOUT", "BLOUT", true);
        /// <summary> Создание документа. ДокСозд. </summary>
        public static readonly UserActionEventType DOCUMENT_CREATION = new UserActionEventType("DOCUMENT_CREATION", "DOCCR", true);
        /// <summary> Модификация документа. ДокМод. </summary>
        public static readonly UserActionEventType DOCUMENT_MODIFICATION = new UserActionEventType("DOCUMENT_MODIFICATION", "DOCMD", true);
        /// <summary> Удаление документа. ДокУд. </summary>
        public static readonly UserActionEventType DOCUMENT_DELETION = new UserActionEventType("DOCUMENT_DELETION", "DOCDL", true);
        /// <summary> Отмена удаления документа. ДокОтмУд. </summary>
        public static readonly UserActionEventType DOCUMENT_UNDELETION = new UserActionEventType("DOCUMENT_UNDELETION", "DOCUD", true);
        /// <summary> Проведение документа. ДокПров. </summary>
        public static readonly UserActionEventType DOCUMENT_PROCESSING = new UserActionEventType("DOCUMENT_PROCESSING", "DOCPRC", true);
        /// <summary> Распроведение документа. ДокРаспров. </summary>
        public static readonly UserActionEventType DOCUMENT_UNPROCESSING = new UserActionEventType("DOCUMENT_UNPROCESSING", "DOCUNP", true);
        /// <summary> Создание резерва. РезСозд.. </summary>
        public static readonly UserActionEventType RESERVE_CREATION = new UserActionEventType("RESERVE_CREATION", "RESCR", true);
        /// <summary> Модификация резерва. РезМод. </summary>
        public static readonly UserActionEventType RESERVE_MODIFICATION = new UserActionEventType("RESERVE_MODIFICATION", "RESMD", true);
        /// <summary> Удаление резерва. РезУд. </summary>
        public static readonly UserActionEventType RESERVE_CLOSE = new UserActionEventType("RESERVE_CLOSE", "RESDL", true);

        private readonly string id;
        private readonly bool purgeable;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __shortNameResId;

        private UserActionEventType(string __value, string id, bool purgeable)
        {
            this.__value = __value;
            this.__nameResId = "USERACTIONEVENTTYPE_NAME_" + __value;
            this.__shortNameResId = "USERACTIONEVENTTYPE_SHORTNAME_" + __value;
            this.id = id;
            this.purgeable = purgeable;
        }

        public static UserActionEventType Parse(string value)
        {
            switch(value)
            {
                case "ADVANCE": return ADVANCE;
                case "BONUS": return BONUS;
                case "CARD_AUTHORIZATION": return CARD_AUTHORIZATION;
                case "CASHIER_SESSION_OPEN": return CASHIER_SESSION_OPEN;
                case "CASHIER_SESSION_CLOSE": return CASHIER_SESSION_CLOSE;
                case "ORDER_DELETE": return ORDER_DELETE;
                case "ORDER_DISCOUNT": return ORDER_DISCOUNT;
                case "ORDER_OPEN": return ORDER_OPEN;
                case "ORDER_PAYMENT": return ORDER_PAYMENT;
                case "ORDER_PRECHEQUE": return ORDER_PRECHEQUE;
                case "ORDER_PREPAY": return ORDER_PREPAY;
                case "ORDER_PRINT": return ORDER_PRINT;
                case "PAY_COLLECTION": return PAY_COLLECTION;
                case "PAY_IN": return PAY_IN;
                case "PAY_OUT": return PAY_OUT;
                case "PENALTY": return PENALTY;
                case "PERSONAL_SESSION_OPEN": return PERSONAL_SESSION_OPEN;
                case "PERSONAL_SESSION_CLOSE": return PERSONAL_SESSION_CLOSE;
                case "PIN_AUTHORIZATION": return PIN_AUTHORIZATION;
                case "ORDER_STORNO": return ORDER_STORNO;
                case "SESSION_CLOSE": return SESSION_CLOSE;
                case "SESSION_OPEN": return SESSION_OPEN;
                case "PENALTY_CANCEL": return PENALTY_CANCEL;
                case "BONUS_CANCEL": return BONUS_CANCEL;
                case "BACK_LOGIN": return BACK_LOGIN;
                case "BACK_LOGOUT": return BACK_LOGOUT;
                case "DOCUMENT_CREATION": return DOCUMENT_CREATION;
                case "DOCUMENT_MODIFICATION": return DOCUMENT_MODIFICATION;
                case "DOCUMENT_DELETION": return DOCUMENT_DELETION;
                case "DOCUMENT_UNDELETION": return DOCUMENT_UNDELETION;
                case "DOCUMENT_PROCESSING": return DOCUMENT_PROCESSING;
                case "DOCUMENT_UNPROCESSING": return DOCUMENT_UNPROCESSING;
                case "RESERVE_CREATION": return RESERVE_CREATION;
                case "RESERVE_MODIFICATION": return RESERVE_MODIFICATION;
                case "RESERVE_CLOSE": return RESERVE_CLOSE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static UserActionEventType[] VALUES
        {
            get
            {
                return new []
                {
                    ADVANCE, 
                    BONUS, 
                    CARD_AUTHORIZATION, 
                    CASHIER_SESSION_OPEN, 
                    CASHIER_SESSION_CLOSE, 
                    ORDER_DELETE, 
                    ORDER_DISCOUNT, 
                    ORDER_OPEN, 
                    ORDER_PAYMENT, 
                    ORDER_PRECHEQUE, 
                    ORDER_PREPAY, 
                    ORDER_PRINT, 
                    PAY_COLLECTION, 
                    PAY_IN, 
                    PAY_OUT, 
                    PENALTY, 
                    PERSONAL_SESSION_OPEN, 
                    PERSONAL_SESSION_CLOSE, 
                    PIN_AUTHORIZATION, 
                    ORDER_STORNO, 
                    SESSION_CLOSE, 
                    SESSION_OPEN, 
                    PENALTY_CANCEL, 
                    BONUS_CANCEL, 
                    BACK_LOGIN, 
                    BACK_LOGOUT, 
                    DOCUMENT_CREATION, 
                    DOCUMENT_MODIFICATION, 
                    DOCUMENT_DELETION, 
                    DOCUMENT_UNDELETION, 
                    DOCUMENT_PROCESSING, 
                    DOCUMENT_UNPROCESSING, 
                    RESERVE_CREATION, 
                    RESERVE_MODIFICATION, 
                    RESERVE_CLOSE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string ShortNameResId
        {
            get { return __shortNameResId; }
        }

        public string Id
        {
            get { return id; }
        }

        public bool Purgeable
        {
            get { return purgeable; }
        }

    }

    [DataClass("UserEvent")]
    public partial class UserEvent : RestoEvent
    {
        private string eventType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<UserEventAttribute> attributes = new HashSet<UserEventAttribute>();

        protected UserEvent() {}

        public UserEvent(Guid id, DepartmentEntity department, DateTime date, string eventType)
            : base(id, department, date)
        {
            this.eventType = eventType;
        }

        public UserEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public string EventType
        {
            get { return eventType; }
            set { eventType = value; }
        }

        [NotNull]
        public HashSet<UserEventAttribute> Attributes
        {
            get { return attributes; }
        }

    }

    [DataClass("UserEventAttribute")]
    public partial class UserEventAttribute
    {
        private UserEventAttributeId id;
        private string type;
        private decimal? valueNumber;
        private string valueString;
        private DateTime? valueDate;
        private Guid? valueGuid;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public UserEventAttribute() {}

        public UserEventAttribute(UserEventAttributeId id, string type, decimal? valueNumber, string valueString, DateTime? valueDate, Guid? valueGuid)
        {
            this.id = id;
            this.type = type;
            this.valueNumber = valueNumber;
            this.valueString = valueString;
            this.valueDate = valueDate;
            this.valueGuid = valueGuid;
        }
        public UserEventAttributeId Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Type
        {
            get { return type; }
            set { type = value; }
        }

        public decimal? ValueNumber
        {
            get { return valueNumber; }
            set { valueNumber = value; }
        }

        public string ValueString
        {
            get { return valueString; }
            set { valueString = value; }
        }

        public DateTime? ValueDate
        {
            get { return valueDate; }
            set { valueDate = value; }
        }

        public Guid? ValueGuid
        {
            get { return valueGuid; }
            set { valueGuid = value; }
        }

    }

    [DataClass("UserEventAttributeId")]
    public partial class UserEventAttributeId
    {
        private DateTime date;
        private Guid? userEvent;
        private string name;

        protected UserEventAttributeId() {}

        public UserEventAttributeId(DateTime date, Guid? userEvent, string name)
        {
            this.date = date;
            this.userEvent = userEvent;
            this.name = name;
        }

        public UserEventAttributeId(DateTime date)
        {
            this.date = date;
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public Guid? UserEvent
        {
            get { return userEvent; }
            set { userEvent = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }

    [DataClass("UserEventSeverity")]
    [EnumClass]
    public partial class UserEventSeverity : LocalizableName<UserEventSeverity>
    {
        /// <summary> Высокая. </summary>
        public static readonly UserEventSeverity HIGH = new UserEventSeverity("HIGH", 2);
        /// <summary> Средняя. </summary>
        public static readonly UserEventSeverity MIDDLE = new UserEventSeverity("MIDDLE", 1);
        /// <summary> Низкая. </summary>
        public static readonly UserEventSeverity LOW = new UserEventSeverity("LOW", 0);

        private readonly int value;
        private readonly string __value;
        private readonly string __nameResId;

        private UserEventSeverity(string __value, int value)
        {
            this.__value = __value;
            this.__nameResId = "USEREVENTSEVERITY_NAME_" + __value;
            this.value = value;
        }

        public static UserEventSeverity Parse(string value)
        {
            switch(value)
            {
                case "HIGH": return HIGH;
                case "MIDDLE": return MIDDLE;
                case "LOW": return LOW;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static UserEventSeverity[] VALUES
        {
            get
            {
                return new []
                {
                    HIGH, 
                    MIDDLE, 
                    LOW
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Value
        {
            get { return value; }
        }

    }

    [DataClass("AbstractExternalDocument")]
    public abstract partial class AbstractExternalDocument : CachedEntity
    {
        private DateTime? dateIncoming;
        private string documentNumber;
        private OperationInfo modifiedInfo;
        private OperationInfo createdInfo;
        [HasDefaultValue]
        private bool deleted = false;
        private Store store;
        private User supplier;
        private string confirmedComment;
        private string comment;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AbstractExternalDocumentItem> items = new List<AbstractExternalDocumentItem>();

        protected AbstractExternalDocument() {}

        protected AbstractExternalDocument(Guid id)
            : base(id)
        {

        }
        public DateTime? DateIncoming
        {
            get { return dateIncoming; }
            set { dateIncoming = value; }
        }

        [CanBeNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

        [CanBeNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [CanBeNull]
        public Store Store
        {
            get { return store; }
            set { store = value; }
        }

        [CanBeNull]
        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        [CanBeNull]
        public string ConfirmedComment
        {
            get { return confirmedComment; }
            set { confirmedComment = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [NotNull]
        public List<AbstractExternalDocumentItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("AbstractExternalDocumentItem")]
    public abstract partial class AbstractExternalDocumentItem : Entity
    {
        private int num;
        private Product product;
        private Product supplierProduct;
        private MeasureUnit amountUnit;
        private Guid? containerId;
        private decimal? incomingAmount;
        private decimal? amount;
        private decimal? actualAmount;
        private decimal? amountInPrimaryUnit;
        private decimal? price;
        private string comment;

        protected AbstractExternalDocumentItem() {}

        protected AbstractExternalDocumentItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId)
            : base(id)
        {
            this.num = num;
            this.supplierProduct = supplierProduct;
            this.amountUnit = amountUnit;
            this.containerId = containerId;
        }

        protected AbstractExternalDocumentItem(Guid id)
            : base(id)
        {

        }

        public int Num
        {
            get { return num; }
            set { num = value; }
        }

        [CanBeNull]
        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public Product SupplierProduct
        {
            get { return supplierProduct; }
            set { supplierProduct = value; }
        }

        public MeasureUnit AmountUnit
        {
            get { return amountUnit; }
            set { amountUnit = value; }
        }

        public Guid? ContainerId
        {
            get { return containerId; }
            set { containerId = value; }
        }

        public decimal? IncomingAmount
        {
            get { return incomingAmount; }
            set { incomingAmount = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? ActualAmount
        {
            get { return actualAmount; }
            set { actualAmount = value; }
        }

        public decimal? AmountInPrimaryUnit
        {
            get { return amountInPrimaryUnit; }
            set { amountInPrimaryUnit = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("ExternalDocumentTypeInfo")]
    public partial interface ExternalDocumentTypeInfo
    {

    }

    [DataClass("ExternalDocumentTypes")]
    [EnumClass]
    public partial class ExternalDocumentTypes : ExternalDocumentTypeInfo
    {
        public static readonly ExternalDocumentTypes EGAIS_INCOMING_INVOICE = new ExternalDocumentTypes("EGAIS_INCOMING_INVOICE", EgaisDocumentTypes.EGAIS_INCOMING_INVOICE);
        public static readonly ExternalDocumentTypes EGAIS_OUTGOING_INVOICE = new ExternalDocumentTypes("EGAIS_OUTGOING_INVOICE", EgaisDocumentTypes.EGAIS_OUTGOING_INVOICE);
        public static readonly ExternalDocumentTypes EGAIS_BALANCE = new ExternalDocumentTypes("EGAIS_BALANCE", EgaisDocumentTypes.EGAIS_BALANCE);
        public static readonly ExternalDocumentTypes EGAIS_SHOP_INCOMING = new ExternalDocumentTypes("EGAIS_SHOP_INCOMING", EgaisDocumentTypes.EGAIS_SHOP_INCOMING);
        public static readonly ExternalDocumentTypes EGAIS_SHOP_TRANSFER = new ExternalDocumentTypes("EGAIS_SHOP_TRANSFER", EgaisDocumentTypes.EGAIS_SHOP_TRANSFER);
        public static readonly ExternalDocumentTypes EGAIS_SHOP_WRITEOFF = new ExternalDocumentTypes("EGAIS_SHOP_WRITEOFF", EgaisDocumentTypes.EGAIS_SHOP_WRITEOFF);
        public static readonly ExternalDocumentTypes EGAIS_REQUEST_REPEAL = new ExternalDocumentTypes("EGAIS_REQUEST_REPEAL", EgaisDocumentTypes.EGAIS_REQUEST_REPEAL);
        public static readonly ExternalDocumentTypes EGAIS_QUERY_ORGANIZATION = new ExternalDocumentTypes("EGAIS_QUERY_ORGANIZATION", EgaisDocumentTypes.EGAIS_QUERY_ORGANIZATION);
        public static readonly ExternalDocumentTypes EGAIS_QUERY_PRODUCT = new ExternalDocumentTypes("EGAIS_QUERY_PRODUCT", EgaisDocumentTypes.EGAIS_QUERY_PRODUCT);
        public static readonly ExternalDocumentTypes EGAIS_QUERY_FORM_A = new ExternalDocumentTypes("EGAIS_QUERY_FORM_A", EgaisDocumentTypes.EGAIS_QUERY_FORM_A);
        public static readonly ExternalDocumentTypes EGAIS_MARK_FIX = new ExternalDocumentTypes("EGAIS_MARK_FIX", EgaisDocumentTypes.EGAIS_MARK_FIX);
        public static readonly ExternalDocumentTypes EGAIS_MARK_UNFIX = new ExternalDocumentTypes("EGAIS_MARK_UNFIX", EgaisDocumentTypes.EGAIS_MARK_UNFIX);

        private readonly ExternalDocumentTypeInfo wrappedExternalDocumentType;
        private readonly string __value;

        private ExternalDocumentTypes(string __value, ExternalDocumentTypeInfo wrappedExternalDocumentType)
        {
            this.__value = __value;
            this.wrappedExternalDocumentType = wrappedExternalDocumentType;
        }

        public static ExternalDocumentTypes Parse(string value)
        {
            switch(value)
            {
                case "EGAIS_INCOMING_INVOICE": return EGAIS_INCOMING_INVOICE;
                case "EGAIS_OUTGOING_INVOICE": return EGAIS_OUTGOING_INVOICE;
                case "EGAIS_BALANCE": return EGAIS_BALANCE;
                case "EGAIS_SHOP_INCOMING": return EGAIS_SHOP_INCOMING;
                case "EGAIS_SHOP_TRANSFER": return EGAIS_SHOP_TRANSFER;
                case "EGAIS_SHOP_WRITEOFF": return EGAIS_SHOP_WRITEOFF;
                case "EGAIS_REQUEST_REPEAL": return EGAIS_REQUEST_REPEAL;
                case "EGAIS_QUERY_ORGANIZATION": return EGAIS_QUERY_ORGANIZATION;
                case "EGAIS_QUERY_PRODUCT": return EGAIS_QUERY_PRODUCT;
                case "EGAIS_QUERY_FORM_A": return EGAIS_QUERY_FORM_A;
                case "EGAIS_MARK_FIX": return EGAIS_MARK_FIX;
                case "EGAIS_MARK_UNFIX": return EGAIS_MARK_UNFIX;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ExternalDocumentTypes[] VALUES
        {
            get
            {
                return new []
                {
                    EGAIS_INCOMING_INVOICE, 
                    EGAIS_OUTGOING_INVOICE, 
                    EGAIS_BALANCE, 
                    EGAIS_SHOP_INCOMING, 
                    EGAIS_SHOP_TRANSFER, 
                    EGAIS_SHOP_WRITEOFF, 
                    EGAIS_REQUEST_REPEAL, 
                    EGAIS_QUERY_ORGANIZATION, 
                    EGAIS_QUERY_PRODUCT, 
                    EGAIS_QUERY_FORM_A, 
                    EGAIS_MARK_FIX, 
                    EGAIS_MARK_UNFIX
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public ExternalDocumentTypeInfo WrappedExternalDocumentType
        {
            get { return wrappedExternalDocumentType; }
        }

    }

    [DataClass("EgaisDocumentTypes")]
    [EnumClass]
    public partial class EgaisDocumentTypes : ExternalDocumentTypeInfo
    {
        public static readonly EgaisDocumentTypes EGAIS_INCOMING_INVOICE = new EgaisDocumentTypes("EGAIS_INCOMING_INVOICE", "Приходная накладная от поставщика");
        public static readonly EgaisDocumentTypes EGAIS_OUTGOING_INVOICE = new EgaisDocumentTypes("EGAIS_OUTGOING_INVOICE", "Возврат поставщику");
        public static readonly EgaisDocumentTypes EGAIS_BALANCE = new EgaisDocumentTypes("EGAIS_BALANCE", "Получение остатков на любом из регистров");
        public static readonly EgaisDocumentTypes EGAIS_SHOP_INCOMING = new EgaisDocumentTypes("EGAIS_SHOP_INCOMING", "Акт постановки на баланс торгового зала напрямую");
        public static readonly EgaisDocumentTypes EGAIS_SHOP_TRANSFER = new EgaisDocumentTypes("EGAIS_SHOP_TRANSFER", "Передача в торговый зал или из торгового зала");
        public static readonly EgaisDocumentTypes EGAIS_SHOP_WRITEOFF = new EgaisDocumentTypes("EGAIS_SHOP_WRITEOFF", "Акт списания из торгового зала");
        public static readonly EgaisDocumentTypes EGAIS_REQUEST_REPEAL = new EgaisDocumentTypes("EGAIS_REQUEST_REPEAL", "Запрос на отмену документа");
        public static readonly EgaisDocumentTypes EGAIS_QUERY_ORGANIZATION = new EgaisDocumentTypes("EGAIS_QUERY_ORGANIZATION", "Запрос к справочнику организаций ЕГАИС");
        public static readonly EgaisDocumentTypes EGAIS_QUERY_PRODUCT = new EgaisDocumentTypes("EGAIS_QUERY_PRODUCT", "Запрос к справочнику продуктов ЕГАИС");
        public static readonly EgaisDocumentTypes EGAIS_QUERY_FORM_A = new EgaisDocumentTypes("EGAIS_QUERY_FORM_A", "Запрос справки 1 ЕГАИС");
        public static readonly EgaisDocumentTypes EGAIS_QUERY_NOT_ANSWERED_INVOICES = new EgaisDocumentTypes("EGAIS_QUERY_NOT_ANSWERED_INVOICES", "Запрос необработанных накладных ЕГАИС");
        public static readonly EgaisDocumentTypes EGAIS_QUERY_RESEND_INVOICE = new EgaisDocumentTypes("EGAIS_QUERY_RESEND_INVOICE", "Повторный запрос накладной ЕГАИС");
        public static readonly EgaisDocumentTypes EGAIS_MARK_BALANCE_QUERY = new EgaisDocumentTypes("EGAIS_MARK_BALANCE_QUERY", "Запрос остатков на регистре 3");
        public static readonly EgaisDocumentTypes EGAIS_MARK_CONFIRM = new EgaisDocumentTypes("EGAIS_MARK_CONFIRM", "Подтверждение марок на фронте");
        public static readonly EgaisDocumentTypes EGAIS_MARK_FIX = new EgaisDocumentTypes("EGAIS_MARK_FIX", "Акт фиксации имеющихся на складе штрихкодов в разрезе форм 2");
        public static readonly EgaisDocumentTypes EGAIS_MARK_UNFIX = new EgaisDocumentTypes("EGAIS_MARK_UNFIX", "Акт отмены фиксации имеющихся на складе штрихкодов в разрезе форм 2");

        private readonly string description;
        private readonly string __value;

        private EgaisDocumentTypes(string __value, string description)
        {
            this.__value = __value;
            this.description = description;
        }

        public static EgaisDocumentTypes Parse(string value)
        {
            switch(value)
            {
                case "EGAIS_INCOMING_INVOICE": return EGAIS_INCOMING_INVOICE;
                case "EGAIS_OUTGOING_INVOICE": return EGAIS_OUTGOING_INVOICE;
                case "EGAIS_BALANCE": return EGAIS_BALANCE;
                case "EGAIS_SHOP_INCOMING": return EGAIS_SHOP_INCOMING;
                case "EGAIS_SHOP_TRANSFER": return EGAIS_SHOP_TRANSFER;
                case "EGAIS_SHOP_WRITEOFF": return EGAIS_SHOP_WRITEOFF;
                case "EGAIS_REQUEST_REPEAL": return EGAIS_REQUEST_REPEAL;
                case "EGAIS_QUERY_ORGANIZATION": return EGAIS_QUERY_ORGANIZATION;
                case "EGAIS_QUERY_PRODUCT": return EGAIS_QUERY_PRODUCT;
                case "EGAIS_QUERY_FORM_A": return EGAIS_QUERY_FORM_A;
                case "EGAIS_QUERY_NOT_ANSWERED_INVOICES": return EGAIS_QUERY_NOT_ANSWERED_INVOICES;
                case "EGAIS_QUERY_RESEND_INVOICE": return EGAIS_QUERY_RESEND_INVOICE;
                case "EGAIS_MARK_BALANCE_QUERY": return EGAIS_MARK_BALANCE_QUERY;
                case "EGAIS_MARK_CONFIRM": return EGAIS_MARK_CONFIRM;
                case "EGAIS_MARK_FIX": return EGAIS_MARK_FIX;
                case "EGAIS_MARK_UNFIX": return EGAIS_MARK_UNFIX;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisDocumentTypes[] VALUES
        {
            get
            {
                return new []
                {
                    EGAIS_INCOMING_INVOICE, 
                    EGAIS_OUTGOING_INVOICE, 
                    EGAIS_BALANCE, 
                    EGAIS_SHOP_INCOMING, 
                    EGAIS_SHOP_TRANSFER, 
                    EGAIS_SHOP_WRITEOFF, 
                    EGAIS_REQUEST_REPEAL, 
                    EGAIS_QUERY_ORGANIZATION, 
                    EGAIS_QUERY_PRODUCT, 
                    EGAIS_QUERY_FORM_A, 
                    EGAIS_QUERY_NOT_ANSWERED_INVOICES, 
                    EGAIS_QUERY_RESEND_INVOICE, 
                    EGAIS_MARK_BALANCE_QUERY, 
                    EGAIS_MARK_CONFIRM, 
                    EGAIS_MARK_FIX, 
                    EGAIS_MARK_UNFIX
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Description
        {
            get { return description; }
        }

    }

    [DataClass("EgaisIntConstants")]
    [EnumClass]
    public partial class EgaisIntConstants
    {
        public static readonly EgaisIntConstants DEFAULT_MARK_KEEP_DAYS = new EgaisIntConstants("DEFAULT_MARK_KEEP_DAYS", 14);
        public static readonly EgaisIntConstants MAX_MARK_KEEP_DAYS = new EgaisIntConstants("MAX_MARK_KEEP_DAYS", 100);

        private readonly int value;
        private readonly string __value;

        private EgaisIntConstants(string __value, int value)
        {
            this.__value = __value;
            this.value = value;
        }

        public static EgaisIntConstants Parse(string value)
        {
            switch(value)
            {
                case "DEFAULT_MARK_KEEP_DAYS": return DEFAULT_MARK_KEEP_DAYS;
                case "MAX_MARK_KEEP_DAYS": return MAX_MARK_KEEP_DAYS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisIntConstants[] VALUES
        {
            get
            {
                return new []
                {
                    DEFAULT_MARK_KEEP_DAYS, 
                    MAX_MARK_KEEP_DAYS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Value
        {
            get { return value; }
        }

    }

    [DataClass("EgaisTimeConstants")]
    [EnumClass]
    public partial class EgaisTimeConstants
    {
        public static readonly EgaisTimeConstants DEFAULT_STOP_UPDATING_TIME = new EgaisTimeConstants("DEFAULT_STOP_UPDATING_TIME", Serializer.Deserialize<TimeSpan>("<r>08:00</r>", false));

        private readonly TimeSpan time;
        private readonly string __value;

        private EgaisTimeConstants(string __value, TimeSpan time)
        {
            this.__value = __value;
            this.time = time;
        }

        public static EgaisTimeConstants Parse(string value)
        {
            switch(value)
            {
                case "DEFAULT_STOP_UPDATING_TIME": return DEFAULT_STOP_UPDATING_TIME;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisTimeConstants[] VALUES
        {
            get
            {
                return new []
                {
                    DEFAULT_STOP_UPDATING_TIME
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public TimeSpan Time
        {
            get { return time; }
        }

    }

    [DataClass("EgaisMarkState")]
    public partial class EgaisMarkState : CachedEntity
    {
        [NotNull, NotNullField]
        private EgaisMarkTableItemKey key;
        private string egaisMarkFields;
        private DateTime dateTo;
        private int markCount;
        private string alcCode;

        protected EgaisMarkState() {}

        public EgaisMarkState(Guid id, EgaisMarkTableItemKey key, DateTime dateTo, int markCount)
            : base(id)
        {
            this.key = key;
            this.dateTo = dateTo;
            this.markCount = markCount;
        }

        public EgaisMarkState(Guid id, EgaisMarkTableItemKey key, DateTime dateTo)
            : base(id)
        {
            this.key = key;
            this.dateTo = dateTo;
        }

        [NotNull]
        public EgaisMarkTableItemKey Key
        {
            get { return key; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  key = value;
            }
        }

        [CanBeNull]
        public string EgaisMarkFields
        {
            get { return egaisMarkFields; }
            set { egaisMarkFields = value; }
        }

        public DateTime DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public int MarkCount
        {
            get { return markCount; }
            set { markCount = value; }
        }

        [CanBeNull]
        public string AlcCode
        {
            get { return alcCode; }
            set { alcCode = value; }
        }

    }

    [DataClass("EgaisMarkStateUpdate")]
    public partial class EgaisMarkStateUpdate
    {
        private bool fullUpdate;
        private int revisionTo;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EgaisMarkState> markStates = new List<EgaisMarkState>();

        protected EgaisMarkStateUpdate() {}

        public EgaisMarkStateUpdate(bool fullUpdate, int revisionTo)
        {
            this.fullUpdate = fullUpdate;
            this.revisionTo = revisionTo;
        }
        public bool FullUpdate
        {
            get { return fullUpdate; }
            set { fullUpdate = value; }
        }

        public int RevisionTo
        {
            get { return revisionTo; }
            set { revisionTo = value; }
        }

        [NotNull]
        public List<EgaisMarkState> MarkStates
        {
            get { return markStates; }
        }

    }

    [DataClass("EgaisMarkTableItem")]
    public partial class EgaisMarkTableItem : AbstractKeyedTimeTableItem
    {
        [NotNull, NotNullField]
        private EgaisMarkTableItemKey key;
        private string egaisMarkFields;
        private DateTime dateToLimit;
        private int markCount;
        [NotNull, NotNullField]
        private EgaisDocumentTypes documentType;
        private Guid documentId;
        private Guid documentItemId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";
        [HasDefaultValue]
        private int documentItemNumber = 1;
        private string documentRegId;

        protected EgaisMarkTableItem() {}

        public EgaisMarkTableItem(Guid id, DateTime? dateFrom, DateTime? dateTo, EgaisMarkTableItemKey key, DateTime dateToLimit, int markCount, EgaisDocumentTypes documentType, Guid documentId, Guid documentItemId, string documentRegId)
            : base(id, dateFrom, dateTo)
        {
            this.key = key;
            this.dateToLimit = dateToLimit;
            this.markCount = markCount;
            this.documentType = documentType;
            this.documentId = documentId;
            this.documentItemId = documentItemId;
            this.documentRegId = documentRegId;
        }

        public EgaisMarkTableItem(Guid id, EgaisMarkTableItemKey key, DateTime dateToLimit, EgaisDocumentTypes documentType, Guid documentId, Guid documentItemId)
            : base(id)
        {
            this.key = key;
            this.dateToLimit = dateToLimit;
            this.documentType = documentType;
            this.documentId = documentId;
            this.documentItemId = documentItemId;
        }

        [NotNull]
        public EgaisMarkTableItemKey Key
        {
            get { return key; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  key = value;
            }
        }

        [CanBeNull]
        public string EgaisMarkFields
        {
            get { return egaisMarkFields; }
            set { egaisMarkFields = value; }
        }

        public DateTime DateToLimit
        {
            get { return dateToLimit; }
            set { dateToLimit = value; }
        }

        public int MarkCount
        {
            get { return markCount; }
            set { markCount = value; }
        }

        [NotNull]
        public EgaisDocumentTypes DocumentType
        {
            get { return documentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentType = value;
            }
        }

        public Guid DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public Guid DocumentItemId
        {
            get { return documentItemId; }
            set { documentItemId = value; }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

        public int DocumentItemNumber
        {
            get { return documentItemNumber; }
            set { documentItemNumber = value; }
        }

        public string DocumentRegId
        {
            get { return documentRegId; }
            set { documentRegId = value; }
        }

    }

    [DataClass("EgaisMarkTableItemKey")]
    public partial class EgaisMarkTableItemKey
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sourceRarId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string bRegId = "";
        private EgaisMark egaisMark;

        protected EgaisMarkTableItemKey() {}

        public EgaisMarkTableItemKey(string sourceRarId, string bRegId, EgaisMark egaisMark)
        {
            this.sourceRarId = sourceRarId;
            this.bRegId = bRegId;
            this.egaisMark = egaisMark;
        }

        public EgaisMarkTableItemKey(string sourceRarId, string bRegId)
        {
            this.sourceRarId = sourceRarId;
            this.bRegId = bRegId;
        }

        [NotNull]
        public string SourceRarId
        {
            get { return sourceRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceRarId = value;
            }
        }

        [NotNull]
        public string BRegId
        {
            get { return bRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  bRegId = value;
            }
        }

        public EgaisMark EgaisMark
        {
            get { return egaisMark; }
            set { egaisMark = value; }
        }

    }

    [DataClass("EgaisAbstractDocument")]
    public abstract partial class EgaisAbstractDocument : AbstractExternalDocument
    {
        [HasDefaultValue]
        private bool isAutomatic = false;
        private Guid? departmentId;
        private string replyId;
        private string sentFileName;
        private string sentErrorMessage;
        private DateTime? dateProcessedByEgais;

        protected EgaisAbstractDocument() {}

        protected EgaisAbstractDocument(Guid id, Guid? departmentId)
            : base(id)
        {
            this.departmentId = departmentId;
        }

        protected EgaisAbstractDocument(Guid id)
            : base(id)
        {

        }

        public bool IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public Guid? DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        [CanBeNull]
        public string ReplyId
        {
            get { return replyId; }
            set { replyId = value; }
        }

        [CanBeNull]
        public string SentFileName
        {
            get { return sentFileName; }
            set { sentFileName = value; }
        }

        [CanBeNull]
        public string SentErrorMessage
        {
            get { return sentErrorMessage; }
            set { sentErrorMessage = value; }
        }

        public DateTime? DateProcessedByEgais
        {
            get { return dateProcessedByEgais; }
            set { dateProcessedByEgais = value; }
        }

    }

    [DataClass("EgaisAbstractDocumentItem")]
    public abstract partial class EgaisAbstractDocumentItem : AbstractExternalDocumentItem
    {
        [NotNull, NotNullField]
        private EgaisProductInfo productInfo;

        protected EgaisAbstractDocumentItem() {}

        protected EgaisAbstractDocumentItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo)
            : base(id, num, supplierProduct, amountUnit, containerId)
        {
            this.productInfo = productInfo;
        }

        protected EgaisAbstractDocumentItem(Guid id, EgaisProductInfo productInfo)
            : base(id)
        {
            this.productInfo = productInfo;
        }

        [NotNull]
        public EgaisProductInfo ProductInfo
        {
            get { return productInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  productInfo = value;
            }
        }

    }

    [DataClass("EgaisAbstractInternalDocument")]
    public abstract partial class EgaisAbstractInternalDocument : EgaisAbstractDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sourceRarId = "";
        [NotNull, NotNullField]
        private EgaisInternalDocumentStatus status;
        private EgaisResultData ticketReceiveData;
        private EgaisResultData ticketProcessData;
        private string documentRegId;

        protected EgaisAbstractInternalDocument() {}

        protected EgaisAbstractInternalDocument(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, departmentId)
        {
            this.sourceRarId = sourceRarId;
            this.status = status;
        }

        protected EgaisAbstractInternalDocument(Guid id, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id)
        {
            this.sourceRarId = sourceRarId;
            this.status = status;
        }

        [NotNull]
        public string SourceRarId
        {
            get { return sourceRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceRarId = value;
            }
        }

        [NotNull]
        public EgaisInternalDocumentStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        [CanBeNull]
        public EgaisResultData TicketReceiveData
        {
            get { return ticketReceiveData; }
            set { ticketReceiveData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketProcessData
        {
            get { return ticketProcessData; }
            set { ticketProcessData = value; }
        }

        [CanBeNull]
        public string DocumentRegId
        {
            get { return documentRegId; }
            set { documentRegId = value; }
        }

    }

    [DataClass("EgaisAbstractInvoice")]
    public abstract partial class EgaisAbstractInvoice : EgaisAbstractDocument
    {
        [NotNull, NotNullField]
        private EgaisApiVersion versionInvoice;
        private string identityId;
        private bool? packed;
        private string wbRegId;
        private string wbNumber;
        private DateTime? wbDate;
        private DateTime? shippingDate;
        private EgaisTransportInfo transportInfo;
        [NotNull, NotNullField]
        private EgaisOrganizationInfo shipperInfo;
        private User shipper;
        [NotNull, NotNullField]
        private EgaisOrganizationInfo recipientInfo;
        private EgaisOrganizationInfo supplierInfo;
        private string invoiceBase;

        protected EgaisAbstractInvoice() {}

        protected EgaisAbstractInvoice(Guid id, Guid? departmentId, EgaisApiVersion versionInvoice, string identityId, bool? packed, string wbRegId, string wbNumber, DateTime? wbDate, DateTime? shippingDate, EgaisTransportInfo transportInfo, EgaisOrganizationInfo shipperInfo, User shipper, EgaisOrganizationInfo recipientInfo, EgaisOrganizationInfo supplierInfo, string invoiceBase)
            : base(id, departmentId)
        {
            this.versionInvoice = versionInvoice;
            this.identityId = identityId;
            this.packed = packed;
            this.wbRegId = wbRegId;
            this.wbNumber = wbNumber;
            this.wbDate = wbDate;
            this.shippingDate = shippingDate;
            this.transportInfo = transportInfo;
            this.shipperInfo = shipperInfo;
            this.shipper = shipper;
            this.recipientInfo = recipientInfo;
            this.supplierInfo = supplierInfo;
            this.invoiceBase = invoiceBase;
        }

        protected EgaisAbstractInvoice(Guid id, EgaisApiVersion versionInvoice, EgaisOrganizationInfo shipperInfo, EgaisOrganizationInfo recipientInfo)
            : base(id)
        {
            this.versionInvoice = versionInvoice;
            this.shipperInfo = shipperInfo;
            this.recipientInfo = recipientInfo;
        }

        [NotNull]
        public EgaisApiVersion VersionInvoice
        {
            get { return versionInvoice; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  versionInvoice = value;
            }
        }

        public string IdentityId
        {
            get { return identityId; }
            set { identityId = value; }
        }

        public bool? Packed
        {
            get { return packed; }
            set { packed = value; }
        }

        public string WbRegId
        {
            get { return wbRegId; }
            set { wbRegId = value; }
        }

        public string WbNumber
        {
            get { return wbNumber; }
            set { wbNumber = value; }
        }

        public DateTime? WbDate
        {
            get { return wbDate; }
            set { wbDate = value; }
        }

        public DateTime? ShippingDate
        {
            get { return shippingDate; }
            set { shippingDate = value; }
        }

        public EgaisTransportInfo TransportInfo
        {
            get { return transportInfo; }
            set { transportInfo = value; }
        }

        [NotNull]
        public EgaisOrganizationInfo ShipperInfo
        {
            get { return shipperInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  shipperInfo = value;
            }
        }

        public User Shipper
        {
            get { return shipper; }
            set { shipper = value; }
        }

        [NotNull]
        public EgaisOrganizationInfo RecipientInfo
        {
            get { return recipientInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  recipientInfo = value;
            }
        }

        public EgaisOrganizationInfo SupplierInfo
        {
            get { return supplierInfo; }
            set { supplierInfo = value; }
        }

        public string InvoiceBase
        {
            get { return invoiceBase; }
            set { invoiceBase = value; }
        }

    }

    [DataClass("EgaisAbstractInvoiceItem")]
    public abstract partial class EgaisAbstractInvoiceItem : EgaisAbstractDocumentItem
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string identityId = "";
        private string packId;
        private string party;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string aRegId = "";
        private string bRegId;
        private List<EgaisMarkBox> marksByBox;
        private List<EgaisMark> marksNotConfirmed;
        private string exciseNumber;
        private DateTime? exciseDate;
        private decimal? exciseSum;
        private decimal? exciseBs;
        private EgaisOrganizationInfo originalClient;

        protected EgaisAbstractInvoiceItem() {}

        protected EgaisAbstractInvoiceItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string identityId, string packId, string party, string aRegId, string bRegId, string exciseNumber, DateTime? exciseDate, decimal? exciseSum, decimal? exciseBs, EgaisOrganizationInfo originalClient)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.identityId = identityId;
            this.packId = packId;
            this.party = party;
            this.aRegId = aRegId;
            this.bRegId = bRegId;
            this.exciseNumber = exciseNumber;
            this.exciseDate = exciseDate;
            this.exciseSum = exciseSum;
            this.exciseBs = exciseBs;
            this.originalClient = originalClient;
        }

        protected EgaisAbstractInvoiceItem(Guid id, EgaisProductInfo productInfo, string identityId, string aRegId)
            : base(id, productInfo)
        {
            this.identityId = identityId;
            this.aRegId = aRegId;
        }

        [NotNull]
        public string IdentityId
        {
            get { return identityId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  identityId = value;
            }
        }

        public string PackId
        {
            get { return packId; }
            set { packId = value; }
        }

        public string Party
        {
            get { return party; }
            set { party = value; }
        }

        [NotNull]
        public string ARegId
        {
            get { return aRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  aRegId = value;
            }
        }

        public string BRegId
        {
            get { return bRegId; }
            set { bRegId = value; }
        }

        public List<EgaisMarkBox> MarksByBox
        {
            get { return marksByBox; }
            set { marksByBox = value; }
        }

        public List<EgaisMark> MarksNotConfirmed
        {
            get { return marksNotConfirmed; }
            set { marksNotConfirmed = value; }
        }

        public string ExciseNumber
        {
            get { return exciseNumber; }
            set { exciseNumber = value; }
        }

        public DateTime? ExciseDate
        {
            get { return exciseDate; }
            set { exciseDate = value; }
        }

        public decimal? ExciseSum
        {
            get { return exciseSum; }
            set { exciseSum = value; }
        }

        public decimal? ExciseBs
        {
            get { return exciseBs; }
            set { exciseBs = value; }
        }

        public EgaisOrganizationInfo OriginalClient
        {
            get { return originalClient; }
            set { originalClient = value; }
        }

    }

    [DataClass("EgaisAddress")]
    public partial class EgaisAddress
    {
        private string country;
        private string index;
        private string regionCode;
        private string area;
        private string city;
        private string place;
        private string street;
        private string house;
        private string building;
        private string liter;
        private string description;

        public EgaisAddress() {}

        public EgaisAddress(string country, string index, string regionCode, string area, string city, string place, string street, string house, string building, string liter, string description)
        {
            this.country = country;
            this.index = index;
            this.regionCode = regionCode;
            this.area = area;
            this.city = city;
            this.place = place;
            this.street = street;
            this.house = house;
            this.building = building;
            this.liter = liter;
            this.description = description;
        }
        public string Country
        {
            get { return country; }
            set { country = value; }
        }

        public string Index
        {
            get { return index; }
            set { index = value; }
        }

        public string RegionCode
        {
            get { return regionCode; }
            set { regionCode = value; }
        }

        public string Area
        {
            get { return area; }
            set { area = value; }
        }

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        public string Place
        {
            get { return place; }
            set { place = value; }
        }

        public string Street
        {
            get { return street; }
            set { street = value; }
        }

        public string House
        {
            get { return house; }
            set { house = value; }
        }

        public string Building
        {
            get { return building; }
            set { building = value; }
        }

        public string Liter
        {
            get { return liter; }
            set { liter = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

    }

    [DataClass("EgaisApiVersion")]
    [EnumClass]
    public partial class EgaisApiVersion
    {
        public static readonly EgaisApiVersion V1 = new EgaisApiVersion("V1", "WayBill");
        public static readonly EgaisApiVersion V2 = new EgaisApiVersion("V2", "WayBill_v2");
        public static readonly EgaisApiVersion V3 = new EgaisApiVersion("V3", "WayBill_v3");
        public static readonly EgaisApiVersion V4 = new EgaisApiVersion("V4", "WayBill_v4");

        private readonly string egaisCode;
        private readonly string __value;

        private EgaisApiVersion(string __value, string egaisCode)
        {
            this.__value = __value;
            this.egaisCode = egaisCode;
        }

        public static EgaisApiVersion Parse(string value)
        {
            switch(value)
            {
                case "V1": return V1;
                case "V2": return V2;
                case "V3": return V3;
                case "V4": return V4;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisApiVersion[] VALUES
        {
            get
            {
                return new []
                {
                    V1, 
                    V2, 
                    V3, 
                    V4
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string EgaisCode
        {
            get { return egaisCode; }
        }

    }

    [DataClass("EgaisBTicket")]
    public partial class EgaisBTicket : CachedEntity
    {
        private string sourceRarId;
        private string senderRarId;
        private string identity;
        private string egaisFixNumber;
        private DateTime? egaisFixDate;
        private string wbRegId;
        private string wbNumber;
        private DateTime? wbDate;
        private EgaisOrganizationInfo shipperInfo;
        private EgaisOrganizationInfo recipientInfo;
        private EgaisOrganizationInfo supplierInfo;
        private List<EgaisBTicketItem> items;

        protected EgaisBTicket() {}

        public EgaisBTicket(Guid id, string sourceRarId, string senderRarId, string identity, string egaisFixNumber, DateTime? egaisFixDate, string wbRegId, string wbNumber, DateTime? wbDate, EgaisOrganizationInfo shipperInfo, EgaisOrganizationInfo recipientInfo, EgaisOrganizationInfo supplierInfo)
            : base(id)
        {
            this.sourceRarId = sourceRarId;
            this.senderRarId = senderRarId;
            this.identity = identity;
            this.egaisFixNumber = egaisFixNumber;
            this.egaisFixDate = egaisFixDate;
            this.wbRegId = wbRegId;
            this.wbNumber = wbNumber;
            this.wbDate = wbDate;
            this.shipperInfo = shipperInfo;
            this.recipientInfo = recipientInfo;
            this.supplierInfo = supplierInfo;
        }

        public EgaisBTicket(Guid id)
            : base(id)
        {

        }

        public string SourceRarId
        {
            get { return sourceRarId; }
            set { sourceRarId = value; }
        }

        public string SenderRarId
        {
            get { return senderRarId; }
            set { senderRarId = value; }
        }

        public string Identity
        {
            get { return identity; }
            set { identity = value; }
        }

        public string EgaisFixNumber
        {
            get { return egaisFixNumber; }
            set { egaisFixNumber = value; }
        }

        public DateTime? EgaisFixDate
        {
            get { return egaisFixDate; }
            set { egaisFixDate = value; }
        }

        public string WbRegId
        {
            get { return wbRegId; }
            set { wbRegId = value; }
        }

        public string WbNumber
        {
            get { return wbNumber; }
            set { wbNumber = value; }
        }

        public DateTime? WbDate
        {
            get { return wbDate; }
            set { wbDate = value; }
        }

        public EgaisOrganizationInfo ShipperInfo
        {
            get { return shipperInfo; }
            set { shipperInfo = value; }
        }

        public EgaisOrganizationInfo RecipientInfo
        {
            get { return recipientInfo; }
            set { recipientInfo = value; }
        }

        public EgaisOrganizationInfo SupplierInfo
        {
            get { return supplierInfo; }
            set { supplierInfo = value; }
        }

        public List<EgaisBTicketItem> Items
        {
            get { return items; }
            set { items = value; }
        }

    }

    [DataClass("EgaisBTicketItem")]
    public partial class EgaisBTicketItem
    {
        private string identityId;
        private string bRegId;

        protected EgaisBTicketItem() {}

        public EgaisBTicketItem(string identityId, string bRegId)
        {
            this.identityId = identityId;
            this.bRegId = bRegId;
        }
        public string IdentityId
        {
            get { return identityId; }
            set { identityId = value; }
        }

        public string BRegId
        {
            get { return bRegId; }
            set { bRegId = value; }
        }

    }

    [DataClass("EgaisConstraints")]
    [EnumClass]
    public partial class EgaisConstraints
    {
        public static readonly EgaisConstraints ANY_STRING_2000 = new EgaisConstraints("ANY_STRING_2000", 0, 2000, ".*");
        public static readonly EgaisConstraints ANY_STRING_255 = new EgaisConstraints("ANY_STRING_255", 0, 255, ".*");
        public static readonly EgaisConstraints ANY_STRING_64 = new EgaisConstraints("ANY_STRING_64", 0, 64, ".*");
        public static readonly EgaisConstraints ANY_STRING_50 = new EgaisConstraints("ANY_STRING_50", 0, 50, ".*");
        public static readonly EgaisConstraints ANY_STRING_UNLIMITED = new EgaisConstraints("ANY_STRING_UNLIMITED", 0, 2147483647, ".*");
        public static readonly EgaisConstraints COUNTRY = new EgaisConstraints("COUNTRY", 3, 3, "[0-9][0-9][0-9]");
        public static readonly EgaisConstraints FSRAR_ID = new EgaisConstraints("FSRAR_ID", 0, 50, "[0-9]+");
        public static readonly EgaisConstraints INN = new EgaisConstraints("INN", 10, 12, "(\\d{10}|\\d{12})");
        public static readonly EgaisConstraints INN10 = new EgaisConstraints("INN10", 10, 10, "[0-9]{10}");
        public static readonly EgaisConstraints INN12 = new EgaisConstraints("INN12", 12, 12, "[0-9]{12}");
        public static readonly EgaisConstraints KPP = new EgaisConstraints("KPP", 9, 9, "[0-9]{9}");
        public static readonly EgaisConstraints NOT_EMPTY_STRING_5 = new EgaisConstraints("NOT_EMPTY_STRING_5", 1, 5, "\\S+(.*\\S+)*");
        public static readonly EgaisConstraints NOT_EMPTY_STRING_50 = new EgaisConstraints("NOT_EMPTY_STRING_50", 1, 50, "\\S+(.*\\S+)*");
        public static readonly EgaisConstraints NOT_EMPTY_STRING_64 = new EgaisConstraints("NOT_EMPTY_STRING_64", 1, 64, "\\S+(.*\\S+)*");
        public static readonly EgaisConstraints NOT_EMPTY_STRING_UNLIMITED = new EgaisConstraints("NOT_EMPTY_STRING_UNLIMITED", 1, 2147483647, "\\S+(.*\\S+)*");
        public static readonly EgaisConstraints PDF417_STRING = new EgaisConstraints("PDF417_STRING", 0, 255, "[A-Za-z0-9]+");
        public static readonly EgaisConstraints REGION_CODE = new EgaisConstraints("REGION_CODE", 2, 2, "[0-9][0-9]");

        private readonly int minLength;
        private readonly int maxLength;
        private readonly string pattern;
        private readonly string __value;

        private EgaisConstraints(string __value, int minLength, int maxLength, string pattern)
        {
            this.__value = __value;
            this.minLength = minLength;
            this.maxLength = maxLength;
            this.pattern = pattern;
        }

        public static EgaisConstraints Parse(string value)
        {
            switch(value)
            {
                case "ANY_STRING_2000": return ANY_STRING_2000;
                case "ANY_STRING_255": return ANY_STRING_255;
                case "ANY_STRING_64": return ANY_STRING_64;
                case "ANY_STRING_50": return ANY_STRING_50;
                case "ANY_STRING_UNLIMITED": return ANY_STRING_UNLIMITED;
                case "COUNTRY": return COUNTRY;
                case "FSRAR_ID": return FSRAR_ID;
                case "INN": return INN;
                case "INN10": return INN10;
                case "INN12": return INN12;
                case "KPP": return KPP;
                case "NOT_EMPTY_STRING_5": return NOT_EMPTY_STRING_5;
                case "NOT_EMPTY_STRING_50": return NOT_EMPTY_STRING_50;
                case "NOT_EMPTY_STRING_64": return NOT_EMPTY_STRING_64;
                case "NOT_EMPTY_STRING_UNLIMITED": return NOT_EMPTY_STRING_UNLIMITED;
                case "PDF417_STRING": return PDF417_STRING;
                case "REGION_CODE": return REGION_CODE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisConstraints[] VALUES
        {
            get
            {
                return new []
                {
                    ANY_STRING_2000, 
                    ANY_STRING_255, 
                    ANY_STRING_64, 
                    ANY_STRING_50, 
                    ANY_STRING_UNLIMITED, 
                    COUNTRY, 
                    FSRAR_ID, 
                    INN, 
                    INN10, 
                    INN12, 
                    KPP, 
                    NOT_EMPTY_STRING_5, 
                    NOT_EMPTY_STRING_50, 
                    NOT_EMPTY_STRING_64, 
                    NOT_EMPTY_STRING_UNLIMITED, 
                    PDF417_STRING, 
                    REGION_CODE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int MinLength
        {
            get { return minLength; }
        }

        public int MaxLength
        {
            get { return maxLength; }
        }

        public string Pattern
        {
            get { return pattern; }
        }

    }

    [DataClass("EgaisEditableStatus")]
    public partial interface EgaisEditableStatus
    {

    }

    [DataClass("EgaisEntitiesUpdate")]
    public partial class EgaisEntitiesUpdate
    {
        private int revisionFrom;
        private int revisionTo;
        private DateTime? dateTo;
        private ICollection<EgaisOrganizationEntity> organizations;
        private ICollection<EgaisProductEntity> products;
        private ICollection<EgaisReplyFormA> replyFormAs;
        private Dictionary<Guid, HashSet<string>> alcCodeByProduct;
        private Dictionary<string, HashSet<Guid>> productByAlcCode;

        protected EgaisEntitiesUpdate() {}

        public EgaisEntitiesUpdate(int revisionFrom, int revisionTo, DateTime? dateTo)
        {
            this.revisionFrom = revisionFrom;
            this.revisionTo = revisionTo;
            this.dateTo = dateTo;
        }
        public int RevisionFrom
        {
            get { return revisionFrom; }
            set { revisionFrom = value; }
        }

        public int RevisionTo
        {
            get { return revisionTo; }
            set { revisionTo = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public ICollection<EgaisOrganizationEntity> Organizations
        {
            get { return organizations; }
            set { organizations = value; }
        }

        public ICollection<EgaisProductEntity> Products
        {
            get { return products; }
            set { products = value; }
        }

        public ICollection<EgaisReplyFormA> ReplyFormAs
        {
            get { return replyFormAs; }
            set { replyFormAs = value; }
        }

        public Dictionary<Guid, HashSet<string>> AlcCodeByProduct
        {
            get { return alcCodeByProduct; }
            set { alcCodeByProduct = value; }
        }

        public Dictionary<string, HashSet<Guid>> ProductByAlcCode
        {
            get { return productByAlcCode; }
            set { productByAlcCode = value; }
        }

    }

    [DataClass("EgaisInternalDocumentStatus")]
    [EnumClass]
    public partial class EgaisInternalDocumentStatus : LocalizableName<EgaisInternalDocumentStatus>, EgaisEditableStatus
    {
        /// <summary> Формируется. </summary>
        public static readonly EgaisInternalDocumentStatus UPDATING = new EgaisInternalDocumentStatus("UPDATING", false, true, false);
        /// <summary> Новый. </summary>
        public static readonly EgaisInternalDocumentStatus NO_ACK = new EgaisInternalDocumentStatus("NO_ACK", true, false, false);
        /// <summary> Отправляется. </summary>
        public static readonly EgaisInternalDocumentStatus TO_SEND = new EgaisInternalDocumentStatus("TO_SEND", false, true, false);
        /// <summary> Отправлен. </summary>
        public static readonly EgaisInternalDocumentStatus SENT = new EgaisInternalDocumentStatus("SENT", false, true, false);
        /// <summary> Ошибка отправки. </summary>
        public static readonly EgaisInternalDocumentStatus ERROR_TO_SEND = new EgaisInternalDocumentStatus("ERROR_TO_SEND", true, false, false);
        /// <summary> Отклонен ЕГАИС. </summary>
        public static readonly EgaisInternalDocumentStatus REJECTED_BY_EGAIS = new EgaisInternalDocumentStatus("REJECTED_BY_EGAIS", true, false, false);
        /// <summary> Принят ЕГАИС. </summary>
        public static readonly EgaisInternalDocumentStatus RECEIVED_BY_EGAIS = new EgaisInternalDocumentStatus("RECEIVED_BY_EGAIS", false, true, false);
        /// <summary> Подтвержден ЕГАИС. </summary>
        public static readonly EgaisInternalDocumentStatus PROCESSED_BY_EGAIS = new EgaisInternalDocumentStatus("PROCESSED_BY_EGAIS", false, true, false);
        /// <summary> Отменен. </summary>
        public static readonly EgaisInternalDocumentStatus REPEALED_LATER = new EgaisInternalDocumentStatus("REPEALED_LATER", false, true, true);

        private readonly bool editable;
        private readonly bool accountable;
        private readonly bool repealed;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisInternalDocumentStatus(string __value, bool editable, bool accountable, bool repealed)
        {
            this.__value = __value;
            this.__nameResId = "EGAISINTERNALDOCUMENTSTATUS_NAME_" + __value;
            this.editable = editable;
            this.accountable = accountable;
            this.repealed = repealed;
        }

        public static EgaisInternalDocumentStatus Parse(string value)
        {
            switch(value)
            {
                case "UPDATING": return UPDATING;
                case "NO_ACK": return NO_ACK;
                case "TO_SEND": return TO_SEND;
                case "SENT": return SENT;
                case "ERROR_TO_SEND": return ERROR_TO_SEND;
                case "REJECTED_BY_EGAIS": return REJECTED_BY_EGAIS;
                case "RECEIVED_BY_EGAIS": return RECEIVED_BY_EGAIS;
                case "PROCESSED_BY_EGAIS": return PROCESSED_BY_EGAIS;
                case "REPEALED_LATER": return REPEALED_LATER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisInternalDocumentStatus[] VALUES
        {
            get
            {
                return new []
                {
                    UPDATING, 
                    NO_ACK, 
                    TO_SEND, 
                    SENT, 
                    ERROR_TO_SEND, 
                    REJECTED_BY_EGAIS, 
                    RECEIVED_BY_EGAIS, 
                    PROCESSED_BY_EGAIS, 
                    REPEALED_LATER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Editable
        {
            get { return editable; }
        }

        public bool Accountable
        {
            get { return accountable; }
        }

        public bool Repealed
        {
            get { return repealed; }
        }

    }

    [DataClass("EgaisOrganizationInfo")]
    public partial class EgaisOrganizationInfo
    {
        private bool? isRetail;
        private string identityId;
        private EgaisOrganizationType egaisOrganizationType;
        private string clientRegId;
        private string fullName;
        private string shortName;
        private string inn;
        private string kpp;
        private string tsnum;
        private string unp;
        private string rnn;
        private EgaisAddress address;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisOrganizationInfo() {}

        public EgaisOrganizationInfo(bool? isRetail, string identityId, EgaisOrganizationType egaisOrganizationType, string clientRegId, string fullName, string shortName, string inn, string kpp, string tsnum, string unp, string rnn, EgaisAddress address)
        {
            this.isRetail = isRetail;
            this.identityId = identityId;
            this.egaisOrganizationType = egaisOrganizationType;
            this.clientRegId = clientRegId;
            this.fullName = fullName;
            this.shortName = shortName;
            this.inn = inn;
            this.kpp = kpp;
            this.tsnum = tsnum;
            this.unp = unp;
            this.rnn = rnn;
            this.address = address;
        }
        public bool? IsRetail
        {
            get { return isRetail; }
            set { isRetail = value; }
        }

        public string IdentityId
        {
            get { return identityId; }
            set { identityId = value; }
        }

        public EgaisOrganizationType EgaisOrganizationType
        {
            get { return egaisOrganizationType; }
            set { egaisOrganizationType = value; }
        }

        public string ClientRegId
        {
            get { return clientRegId; }
            set { clientRegId = value; }
        }

        public string FullName
        {
            get { return fullName; }
            set { fullName = value; }
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public string Inn
        {
            get { return inn; }
            set { inn = value; }
        }

        public string Kpp
        {
            get { return kpp; }
            set { kpp = value; }
        }

        public string Tsnum
        {
            get { return tsnum; }
            set { tsnum = value; }
        }

        public string Unp
        {
            get { return unp; }
            set { unp = value; }
        }

        public string Rnn
        {
            get { return rnn; }
            set { rnn = value; }
        }

        public EgaisAddress Address
        {
            get { return address; }
            set { address = value; }
        }

    }

    [DataClass("EgaisOrganizationType")]
    [EnumClass]
    public partial class EgaisOrganizationType : LocalizableName<EgaisOrganizationType>
    {
        /// <summary> Юридическое лицо. </summary>
        public static readonly EgaisOrganizationType UL = new EgaisOrganizationType("UL");
        /// <summary> Индивидуальный предприниматель. </summary>
        public static readonly EgaisOrganizationType FL = new EgaisOrganizationType("FL");
        /// <summary> Иностранец (исключая таможенный союз). </summary>
        public static readonly EgaisOrganizationType FO = new EgaisOrganizationType("FO");
        /// <summary> Таможенный союз. </summary>
        public static readonly EgaisOrganizationType TS = new EgaisOrganizationType("TS");

        private readonly string __value;
        private readonly string __nameResId;

        private EgaisOrganizationType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "EGAISORGANIZATIONTYPE_NAME_" + __value;
        }

        public static EgaisOrganizationType Parse(string value)
        {
            switch(value)
            {
                case "UL": return UL;
                case "FL": return FL;
                case "FO": return FO;
                case "TS": return TS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisOrganizationType[] VALUES
        {
            get
            {
                return new []
                {
                    UL, 
                    FL, 
                    FO, 
                    TS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EgaisProductInfo")]
    public partial class EgaisProductInfo
    {
        private string identityId;
        private bool? packed;
        private EgaisProductType type;
        private string fullName;
        private string shortName;
        private string alcCode;
        private decimal? capacity;
        private decimal? alcVolume;
        private EgaisOrganizationInfo producer;
        private EgaisOrganizationInfo importer;
        private string productVCode;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisProductInfo() {}

        public EgaisProductInfo(string identityId, bool? packed, EgaisProductType type, string fullName, string shortName, string alcCode, decimal? capacity, decimal? alcVolume, EgaisOrganizationInfo producer, EgaisOrganizationInfo importer, string productVCode)
        {
            this.identityId = identityId;
            this.packed = packed;
            this.type = type;
            this.fullName = fullName;
            this.shortName = shortName;
            this.alcCode = alcCode;
            this.capacity = capacity;
            this.alcVolume = alcVolume;
            this.producer = producer;
            this.importer = importer;
            this.productVCode = productVCode;
        }
        public string IdentityId
        {
            get { return identityId; }
            set { identityId = value; }
        }

        public bool? Packed
        {
            get { return packed; }
            set { packed = value; }
        }

        public EgaisProductType Type
        {
            get { return type; }
            set { type = value; }
        }

        public string FullName
        {
            get { return fullName; }
            set { fullName = value; }
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public string AlcCode
        {
            get { return alcCode; }
            set { alcCode = value; }
        }

        public decimal? Capacity
        {
            get { return capacity; }
            set { capacity = value; }
        }

        public decimal? AlcVolume
        {
            get { return alcVolume; }
            set { alcVolume = value; }
        }

        public EgaisOrganizationInfo Producer
        {
            get { return producer; }
            set { producer = value; }
        }

        public EgaisOrganizationInfo Importer
        {
            get { return importer; }
            set { importer = value; }
        }

        public string ProductVCode
        {
            get { return productVCode; }
            set { productVCode = value; }
        }

    }

    [DataClass("EgaisProductType")]
    public enum EgaisProductType
    {
        AP,
        SSP,
        SSNP,
        SPIRIT,
        UBP
    }

    [DataClass("EgaisRegister")]
    [EnumClass]
    public partial class EgaisRegister : LocalizableName<EgaisRegister>
    {
        /// <summary> Склад (регистр 1). </summary>
        public static readonly EgaisRegister STORE = new EgaisRegister("STORE");
        /// <summary> Торговый зал (регистр 2). </summary>
        public static readonly EgaisRegister SHOP = new EgaisRegister("SHOP");

        private readonly string __value;
        private readonly string __nameResId;

        private EgaisRegister(string __value)
        {
            this.__value = __value;
            this.__nameResId = "EGAISREGISTER_NAME_" + __value;
        }

        public static EgaisRegister Parse(string value)
        {
            switch(value)
            {
                case "STORE": return STORE;
                case "SHOP": return SHOP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisRegister[] VALUES
        {
            get
            {
                return new []
                {
                    STORE, 
                    SHOP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EgaisTransportInfo")]
    public partial class EgaisTransportInfo
    {
        private string changeOwnership;
        private string type;
        private string company;
        private string car;
        private string transportType;
        private string transportRegNumber;
        private string trailer;
        private string customer;
        private string driver;
        private string loadPoint;
        private string unloadPoint;
        private string redirect;
        private string forwarder;

        public EgaisTransportInfo() {}

        public EgaisTransportInfo(string changeOwnership, string type, string company, string car, string transportType, string transportRegNumber, string trailer, string customer, string driver, string loadPoint, string unloadPoint, string redirect, string forwarder)
        {
            this.changeOwnership = changeOwnership;
            this.type = type;
            this.company = company;
            this.car = car;
            this.transportType = transportType;
            this.transportRegNumber = transportRegNumber;
            this.trailer = trailer;
            this.customer = customer;
            this.driver = driver;
            this.loadPoint = loadPoint;
            this.unloadPoint = unloadPoint;
            this.redirect = redirect;
            this.forwarder = forwarder;
        }
        public string ChangeOwnership
        {
            get { return changeOwnership; }
            set { changeOwnership = value; }
        }

        public string Type
        {
            get { return type; }
            set { type = value; }
        }

        public string Company
        {
            get { return company; }
            set { company = value; }
        }

        public string Car
        {
            get { return car; }
            set { car = value; }
        }

        public string TransportType
        {
            get { return transportType; }
            set { transportType = value; }
        }

        public string TransportRegNumber
        {
            get { return transportRegNumber; }
            set { transportRegNumber = value; }
        }

        public string Trailer
        {
            get { return trailer; }
            set { trailer = value; }
        }

        public string Customer
        {
            get { return customer; }
            set { customer = value; }
        }

        public string Driver
        {
            get { return driver; }
            set { driver = value; }
        }

        public string LoadPoint
        {
            get { return loadPoint; }
            set { loadPoint = value; }
        }

        public string UnloadPoint
        {
            get { return unloadPoint; }
            set { unloadPoint = value; }
        }

        public string Redirect
        {
            get { return redirect; }
            set { redirect = value; }
        }

        public string Forwarder
        {
            get { return forwarder; }
            set { forwarder = value; }
        }

    }

    [DataClass("EgaisTransportOwnership")]
    [EnumClass]
    public partial class EgaisTransportOwnership : LocalizableName<EgaisTransportOwnership>
    {
        /// <summary> Перешло. </summary>
        public static readonly EgaisTransportOwnership IS_CHANGE = new EgaisTransportOwnership("IS_CHANGE", "IsChange");
        /// <summary> Не перешло. </summary>
        public static readonly EgaisTransportOwnership NOT_CHANGE = new EgaisTransportOwnership("NOT_CHANGE", "NotChange");

        private readonly string egaisCode;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisTransportOwnership(string __value, string egaisCode)
        {
            this.__value = __value;
            this.__nameResId = "EGAISTRANSPORTOWNERSHIP_NAME_" + __value;
            this.egaisCode = egaisCode;
        }

        public static EgaisTransportOwnership Parse(string value)
        {
            switch(value)
            {
                case "IS_CHANGE": return IS_CHANGE;
                case "NOT_CHANGE": return NOT_CHANGE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisTransportOwnership[] VALUES
        {
            get
            {
                return new []
                {
                    IS_CHANGE, 
                    NOT_CHANGE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string EgaisCode
        {
            get { return egaisCode; }
        }

    }

    [DataClass("EgaisTransportType")]
    [EnumClass]
    public partial class EgaisTransportType : LocalizableName<EgaisTransportType>
    {
        /// <summary> Воздушный транспорт. </summary>
        public static readonly EgaisTransportType T410 = new EgaisTransportType("T410", "410", "aircraft");
        /// <summary> Водный транспорт. </summary>
        public static readonly EgaisTransportType T411 = new EgaisTransportType("T411", "411", "ship");
        /// <summary> Железнодорожный транспорт. </summary>
        public static readonly EgaisTransportType T412 = new EgaisTransportType("T412", "412", "railway");
        /// <summary> Автомобильный транспорт. </summary>
        public static readonly EgaisTransportType T413 = new EgaisTransportType("T413", "413", "car");
        /// <summary> Иные транспортные средства. </summary>
        public static readonly EgaisTransportType T419 = new EgaisTransportType("T419", "419", "other");

        private readonly string code;
        private readonly string egaisCode;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisTransportType(string __value, string code, string egaisCode)
        {
            this.__value = __value;
            this.__nameResId = "EGAISTRANSPORTTYPE_NAME_" + __value;
            this.code = code;
            this.egaisCode = egaisCode;
        }

        public static EgaisTransportType Parse(string value)
        {
            switch(value)
            {
                case "T410": return T410;
                case "T411": return T411;
                case "T412": return T412;
                case "T413": return T413;
                case "T419": return T419;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisTransportType[] VALUES
        {
            get
            {
                return new []
                {
                    T410, 
                    T411, 
                    T412, 
                    T413, 
                    T419
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Code
        {
            get { return code; }
        }

        public string EgaisCode
        {
            get { return egaisCode; }
        }

    }

    [DataClass("EgaisBalanceDocument")]
    public partial class EgaisBalanceDocument : EgaisAbstractDocument
    {
        [NotNull, NotNullField]
        private EgaisBalanceDocumentType balanceType;
        [NotNull, NotNullField]
        private EgaisBalanceDocumentStatus balanceStatus;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sourceRarId = "";
        private EgaisResultData ticketRejectData;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisBalanceDocument() {}

        public EgaisBalanceDocument(Guid id, Guid? departmentId, EgaisBalanceDocumentType balanceType, EgaisBalanceDocumentStatus balanceStatus, string sourceRarId)
            : base(id, departmentId)
        {
            this.balanceType = balanceType;
            this.balanceStatus = balanceStatus;
            this.sourceRarId = sourceRarId;
        }

        public EgaisBalanceDocument(Guid id, EgaisBalanceDocumentType balanceType, EgaisBalanceDocumentStatus balanceStatus, string sourceRarId)
            : base(id)
        {
            this.balanceType = balanceType;
            this.balanceStatus = balanceStatus;
            this.sourceRarId = sourceRarId;
        }

        [NotNull]
        public EgaisBalanceDocumentType BalanceType
        {
            get { return balanceType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  balanceType = value;
            }
        }

        [NotNull]
        public EgaisBalanceDocumentStatus BalanceStatus
        {
            get { return balanceStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  balanceStatus = value;
            }
        }

        [NotNull]
        public string SourceRarId
        {
            get { return sourceRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceRarId = value;
            }
        }

        [CanBeNull]
        public EgaisResultData TicketRejectData
        {
            get { return ticketRejectData; }
            set { ticketRejectData = value; }
        }

    }

    [DataClass("EgaisBalanceDocumentItem")]
    public partial class EgaisBalanceDocumentItem : EgaisAbstractDocumentItem
    {
        private string aRegId;
        private string bRegId;

        protected EgaisBalanceDocumentItem() {}

        public EgaisBalanceDocumentItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string aRegId, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.aRegId = aRegId;
            this.bRegId = bRegId;
        }

        public EgaisBalanceDocumentItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

        public string ARegId
        {
            get { return aRegId; }
            set { aRegId = value; }
        }

        public string BRegId
        {
            get { return bRegId; }
            set { bRegId = value; }
        }

    }

    [DataClass("EgaisBalanceDocumentStatus")]
    [EnumClass]
    public partial class EgaisBalanceDocumentStatus : LocalizableName<EgaisBalanceDocumentStatus>, EgaisEditableStatus
    {
        /// <summary> Новый. </summary>
        public static readonly EgaisBalanceDocumentStatus NO_ACK = new EgaisBalanceDocumentStatus("NO_ACK", true);
        /// <summary> Отправляется. </summary>
        public static readonly EgaisBalanceDocumentStatus TO_SEND = new EgaisBalanceDocumentStatus("TO_SEND", false);
        /// <summary> Отправлен. </summary>
        public static readonly EgaisBalanceDocumentStatus SENT = new EgaisBalanceDocumentStatus("SENT", false);
        /// <summary> Ошибка отправки. </summary>
        public static readonly EgaisBalanceDocumentStatus ERROR_TO_SEND = new EgaisBalanceDocumentStatus("ERROR_TO_SEND", true);
        /// <summary> Ответ получен. </summary>
        public static readonly EgaisBalanceDocumentStatus REPLY_RECEIVED = new EgaisBalanceDocumentStatus("REPLY_RECEIVED", false);

        private readonly bool editable;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisBalanceDocumentStatus(string __value, bool editable)
        {
            this.__value = __value;
            this.__nameResId = "EGAISBALANCEDOCUMENTSTATUS_NAME_" + __value;
            this.editable = editable;
        }

        public static EgaisBalanceDocumentStatus Parse(string value)
        {
            switch(value)
            {
                case "NO_ACK": return NO_ACK;
                case "TO_SEND": return TO_SEND;
                case "SENT": return SENT;
                case "ERROR_TO_SEND": return ERROR_TO_SEND;
                case "REPLY_RECEIVED": return REPLY_RECEIVED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisBalanceDocumentStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NO_ACK, 
                    TO_SEND, 
                    SENT, 
                    ERROR_TO_SEND, 
                    REPLY_RECEIVED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Editable
        {
            get { return editable; }
        }

    }

    [DataClass("EgaisBalanceDocumentType")]
    [EnumClass]
    public partial class EgaisBalanceDocumentType : LocalizableName<EgaisBalanceDocumentType>
    {
        /// <summary> Запрос остатков на складе (регистр 1). </summary>
        public static readonly EgaisBalanceDocumentType STORE = new EgaisBalanceDocumentType("STORE");
        /// <summary> Запрос остатков в торговом зале (регистр 2). </summary>
        public static readonly EgaisBalanceDocumentType SHOP = new EgaisBalanceDocumentType("SHOP");

        private readonly string __value;
        private readonly string __nameResId;

        private EgaisBalanceDocumentType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "EGAISBALANCEDOCUMENTTYPE_NAME_" + __value;
        }

        public static EgaisBalanceDocumentType Parse(string value)
        {
            switch(value)
            {
                case "STORE": return STORE;
                case "SHOP": return SHOP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisBalanceDocumentType[] VALUES
        {
            get
            {
                return new []
                {
                    STORE, 
                    SHOP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EgaisBalanceStubDocument")]
    public partial class EgaisBalanceStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisBalanceStubDocument() {}

        public EgaisBalanceStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisBalanceStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisAbstractQuery")]
    public abstract partial class EgaisAbstractQuery : EgaisAbstractInternalDocument
    {
        [NotNull, NotNullField]
        private EgaisApiVersion versionQuery;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> parameters = new Dictionary<string, string>();

        protected EgaisAbstractQuery() {}

        protected EgaisAbstractQuery(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery)
            : base(id, departmentId, sourceRarId, status)
        {
            this.versionQuery = versionQuery;
        }

        protected EgaisAbstractQuery(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery)
            : base(id, sourceRarId, status)
        {
            this.versionQuery = versionQuery;
        }

        [NotNull]
        public EgaisApiVersion VersionQuery
        {
            get { return versionQuery; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  versionQuery = value;
            }
        }

        [NotNull]
        public Dictionary<string, string> Parameters
        {
            get { return parameters; }
        }

    }

    [DataClass("EgaisOrganizationEntity")]
    public partial class EgaisOrganizationEntity : CachedEntity
    {
        private bool deleted;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string clientRegId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string fullName = "";
        private string orgState;
        private DateTime? dateUpdatedVersionWb;
        private string versionWb;
        private DateTime? dateUpdatedOrgInfoV1;
        private EgaisOrganizationInfo orgInfoV1;
        private DateTime? dateUpdatedOrgInfoV2;
        private EgaisOrganizationInfo orgInfoV2;
        private List<EgaisAddress> flAddressList;
        private string licenseNumberPrintText;
        private OperationInfo modified;

        protected EgaisOrganizationEntity() {}

        public EgaisOrganizationEntity(Guid id, bool deleted, string clientRegId, string fullName)
            : base(id)
        {
            this.deleted = deleted;
            this.clientRegId = clientRegId;
            this.fullName = fullName;
        }
        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [NotNull]
        public string ClientRegId
        {
            get { return clientRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  clientRegId = value;
            }
        }

        [NotNull]
        public string FullName
        {
            get { return fullName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  fullName = value;
            }
        }

        [CanBeNull]
        public string OrgState
        {
            get { return orgState; }
            set { orgState = value; }
        }

        public DateTime? DateUpdatedVersionWb
        {
            get { return dateUpdatedVersionWb; }
            set { dateUpdatedVersionWb = value; }
        }

        [CanBeNull]
        public string VersionWb
        {
            get { return versionWb; }
            set { versionWb = value; }
        }

        public DateTime? DateUpdatedOrgInfoV1
        {
            get { return dateUpdatedOrgInfoV1; }
            set { dateUpdatedOrgInfoV1 = value; }
        }

        [CanBeNull]
        public EgaisOrganizationInfo OrgInfoV1
        {
            get { return orgInfoV1; }
            set { orgInfoV1 = value; }
        }

        public DateTime? DateUpdatedOrgInfoV2
        {
            get { return dateUpdatedOrgInfoV2; }
            set { dateUpdatedOrgInfoV2 = value; }
        }

        [CanBeNull]
        public EgaisOrganizationInfo OrgInfoV2
        {
            get { return orgInfoV2; }
            set { orgInfoV2 = value; }
        }

        [CanBeNull]
        public List<EgaisAddress> FlAddressList
        {
            get { return flAddressList; }
            set { flAddressList = value; }
        }

        [CanBeNull]
        public string LicenseNumberPrintText
        {
            get { return licenseNumberPrintText; }
            set { licenseNumberPrintText = value; }
        }

        [CanBeNull]
        public OperationInfo Modified
        {
            get { return modified; }
            set { modified = value; }
        }

    }

    [DataClass("EgaisProductEntity")]
    public partial class EgaisProductEntity : CachedEntity
    {
        private bool deleted;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string alcCode = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string fullName = "";
        private DateTime? dateUpdatedProductInfoV1;
        private EgaisProductInfo productInfoV1;
        private DateTime? dateUpdatedProductInfoV2;
        private EgaisProductInfo productInfoV2;
        private decimal? minimumRetailPrice;
        private OperationInfo modified;

        protected EgaisProductEntity() {}

        public EgaisProductEntity(Guid id, bool deleted, string alcCode, string fullName)
            : base(id)
        {
            this.deleted = deleted;
            this.alcCode = alcCode;
            this.fullName = fullName;
        }
        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [NotNull]
        public string AlcCode
        {
            get { return alcCode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  alcCode = value;
            }
        }

        [NotNull]
        public string FullName
        {
            get { return fullName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  fullName = value;
            }
        }

        public DateTime? DateUpdatedProductInfoV1
        {
            get { return dateUpdatedProductInfoV1; }
            set { dateUpdatedProductInfoV1 = value; }
        }

        [CanBeNull]
        public EgaisProductInfo ProductInfoV1
        {
            get { return productInfoV1; }
            set { productInfoV1 = value; }
        }

        public DateTime? DateUpdatedProductInfoV2
        {
            get { return dateUpdatedProductInfoV2; }
            set { dateUpdatedProductInfoV2 = value; }
        }

        [CanBeNull]
        public EgaisProductInfo ProductInfoV2
        {
            get { return productInfoV2; }
            set { productInfoV2 = value; }
        }

        public decimal? MinimumRetailPrice
        {
            get { return minimumRetailPrice; }
            set { minimumRetailPrice = value; }
        }

        [CanBeNull]
        public OperationInfo Modified
        {
            get { return modified; }
            set { modified = value; }
        }

    }

    [DataClass("EgaisQueryFormA")]
    public partial class EgaisQueryFormA : EgaisAbstractQuery
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string aRegId = "";

        protected EgaisQueryFormA() {}

        public EgaisQueryFormA(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery, string aRegId)
            : base(id, departmentId, sourceRarId, status, versionQuery)
        {
            this.aRegId = aRegId;
        }

        public EgaisQueryFormA(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery, string aRegId)
            : base(id, sourceRarId, status, versionQuery)
        {
            this.aRegId = aRegId;
        }

        [NotNull]
        public string ARegId
        {
            get { return aRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  aRegId = value;
            }
        }

    }

    [DataClass("EgaisQueryFormAItem")]
    public partial class EgaisQueryFormAItem : EgaisAbstractDocumentItem
    {

        protected EgaisQueryFormAItem() {}

        public EgaisQueryFormAItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {

        }

        public EgaisQueryFormAItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

    }

    [DataClass("EgaisQueryFormAStubDocument")]
    public partial class EgaisQueryFormAStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisQueryFormAStubDocument() {}

        public EgaisQueryFormAStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisQueryFormAStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisQueryNotAnsweredInvoices")]
    public partial class EgaisQueryNotAnsweredInvoices : EgaisAbstractInternalDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string consignee = "";

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisQueryNotAnsweredInvoices() {}

        public EgaisQueryNotAnsweredInvoices(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, string consignee)
            : base(id, departmentId, sourceRarId, status)
        {
            this.consignee = consignee;
        }

        public EgaisQueryNotAnsweredInvoices(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, string consignee)
            : base(id, sourceRarId, status)
        {
            this.consignee = consignee;
        }

        [NotNull]
        public string Consignee
        {
            get { return consignee; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  consignee = value;
            }
        }

    }

    [DataClass("EgaisQueryNotAnsweredInvoicesItem")]
    public partial class EgaisQueryNotAnsweredInvoicesItem : EgaisAbstractDocumentItem
    {
        private DateTime wbDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string wbNumber = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string wbRegId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string senderRarId = "";

        protected EgaisQueryNotAnsweredInvoicesItem() {}

        public EgaisQueryNotAnsweredInvoicesItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, DateTime wbDate, string wbNumber, string wbRegId, string senderRarId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.wbDate = wbDate;
            this.wbNumber = wbNumber;
            this.wbRegId = wbRegId;
            this.senderRarId = senderRarId;
        }

        public EgaisQueryNotAnsweredInvoicesItem(Guid id, EgaisProductInfo productInfo, DateTime wbDate, string wbNumber, string wbRegId, string senderRarId)
            : base(id, productInfo)
        {
            this.wbDate = wbDate;
            this.wbNumber = wbNumber;
            this.wbRegId = wbRegId;
            this.senderRarId = senderRarId;
        }

        public DateTime WbDate
        {
            get { return wbDate; }
            set { wbDate = value; }
        }

        [NotNull]
        public string WbNumber
        {
            get { return wbNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  wbNumber = value;
            }
        }

        [NotNull]
        public string WbRegId
        {
            get { return wbRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  wbRegId = value;
            }
        }

        [NotNull]
        public string SenderRarId
        {
            get { return senderRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  senderRarId = value;
            }
        }

    }

    [DataClass("EgaisQueryOrganization")]
    public partial class EgaisQueryOrganization : EgaisAbstractQuery
    {
        private EgaisQueryOrganizationType queryOrganizationType;

        protected EgaisQueryOrganization() {}

        public EgaisQueryOrganization(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery, EgaisQueryOrganizationType queryOrganizationType)
            : base(id, departmentId, sourceRarId, status, versionQuery)
        {
            this.queryOrganizationType = queryOrganizationType;
        }

        public EgaisQueryOrganization(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery, EgaisQueryOrganizationType queryOrganizationType)
            : base(id, sourceRarId, status, versionQuery)
        {
            this.queryOrganizationType = queryOrganizationType;
        }

        public EgaisQueryOrganizationType QueryOrganizationType
        {
            get { return queryOrganizationType; }
            set { queryOrganizationType = value; }
        }

    }

    [DataClass("EgaisQueryOrganizationItem")]
    public partial class EgaisQueryOrganizationItem : EgaisAbstractDocumentItem
    {
        [NotNull, NotNullField]
        private EgaisOrganizationInfo orgInfo;
        private string orgState;
        private string versionWb;
        private List<EgaisAddress> flAddressList;

        protected EgaisQueryOrganizationItem() {}

        public EgaisQueryOrganizationItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, EgaisOrganizationInfo orgInfo)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.orgInfo = orgInfo;
        }

        public EgaisQueryOrganizationItem(Guid id, EgaisProductInfo productInfo, EgaisOrganizationInfo orgInfo)
            : base(id, productInfo)
        {
            this.orgInfo = orgInfo;
        }

        [NotNull]
        public EgaisOrganizationInfo OrgInfo
        {
            get { return orgInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  orgInfo = value;
            }
        }

        [CanBeNull]
        public string OrgState
        {
            get { return orgState; }
            set { orgState = value; }
        }

        [CanBeNull]
        public string VersionWb
        {
            get { return versionWb; }
            set { versionWb = value; }
        }

        [CanBeNull]
        public List<EgaisAddress> FlAddressList
        {
            get { return flAddressList; }
            set { flAddressList = value; }
        }

    }

    [DataClass("EgaisQueryOrganizationStubDocument")]
    public partial class EgaisQueryOrganizationStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisQueryOrganizationStubDocument() {}

        public EgaisQueryOrganizationStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisQueryOrganizationStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisQueryOrganizationType")]
    public enum EgaisQueryOrganizationType
    {
        QUERY_CLIENT,
        SET_TTN_VERSION
    }

    [DataClass("EgaisQueryParameter")]
    [EnumClass]
    public partial class EgaisQueryParameter : LocalizableName<EgaisQueryParameter>
    {
        /// <summary> КОД. </summary>
        public static readonly EgaisQueryParameter BY_CODE = new EgaisQueryParameter("BY_CODE", "КОД");
        /// <summary> СИО. </summary>
        public static readonly EgaisQueryParameter BY_FSRAR_ID = new EgaisQueryParameter("BY_FSRAR_ID", "СИО");
        /// <summary> ИНН. </summary>
        public static readonly EgaisQueryParameter BY_INN = new EgaisQueryParameter("BY_INN", "ИНН");
        /// <summary> ФОРМА2. </summary>
        public static readonly EgaisQueryParameter BY_FORM2 = new EgaisQueryParameter("BY_FORM2", "ФОРМА2");
        /// <summary> Регистрационный номер ЕГАИС. </summary>
        public static readonly EgaisQueryParameter BY_WB_REG_ID = new EgaisQueryParameter("BY_WB_REG_ID", "WBREGID");

        private readonly string code;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisQueryParameter(string __value, string code)
        {
            this.__value = __value;
            this.__nameResId = "EGAISQUERYPARAMETER_NAME_" + __value;
            this.code = code;
        }

        public static EgaisQueryParameter Parse(string value)
        {
            switch(value)
            {
                case "BY_CODE": return BY_CODE;
                case "BY_FSRAR_ID": return BY_FSRAR_ID;
                case "BY_INN": return BY_INN;
                case "BY_FORM2": return BY_FORM2;
                case "BY_WB_REG_ID": return BY_WB_REG_ID;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisQueryParameter[] VALUES
        {
            get
            {
                return new []
                {
                    BY_CODE, 
                    BY_FSRAR_ID, 
                    BY_INN, 
                    BY_FORM2, 
                    BY_WB_REG_ID
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Code
        {
            get { return code; }
        }

    }

    [DataClass("EgaisQueryProduct")]
    public partial class EgaisQueryProduct : EgaisAbstractQuery
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisQueryProduct() {}

        public EgaisQueryProduct(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery)
            : base(id, departmentId, sourceRarId, status, versionQuery)
        {

        }

        public EgaisQueryProduct(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisApiVersion versionQuery)
            : base(id, sourceRarId, status, versionQuery)
        {

        }

    }

    [DataClass("EgaisQueryProductItem")]
    public partial class EgaisQueryProductItem : EgaisAbstractDocumentItem
    {

        protected EgaisQueryProductItem() {}

        public EgaisQueryProductItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {

        }

        public EgaisQueryProductItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

    }

    [DataClass("EgaisQueryProductStubDocument")]
    public partial class EgaisQueryProductStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisQueryProductStubDocument() {}

        public EgaisQueryProductStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisQueryProductStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisQueryResendInvoice")]
    public partial class EgaisQueryResendInvoice : EgaisAbstractInternalDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string wbRegId = "";

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisQueryResendInvoice() {}

        public EgaisQueryResendInvoice(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, string wbRegId)
            : base(id, departmentId, sourceRarId, status)
        {
            this.wbRegId = wbRegId;
        }

        public EgaisQueryResendInvoice(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, string wbRegId)
            : base(id, sourceRarId, status)
        {
            this.wbRegId = wbRegId;
        }

        [NotNull]
        public string WbRegId
        {
            get { return wbRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  wbRegId = value;
            }
        }

    }

    [DataClass("EgaisQueryResendInvoiceItem")]
    public partial class EgaisQueryResendInvoiceItem : EgaisAbstractDocumentItem
    {

        protected EgaisQueryResendInvoiceItem() {}

        public EgaisQueryResendInvoiceItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {

        }

        public EgaisQueryResendInvoiceItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

    }

    [DataClass("EgaisReplyFormA")]
    public partial class EgaisReplyFormA : CachedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string aRegId = "";
        private EgaisOrganizationInfo originalClient;
        private string originalDocNumber;
        private DateTime? originalDocDate;
        [NotNull, NotNullField]
        private EgaisProductInfo productInfo;
        private DateTime? bottlingDate;
        private decimal? quantity;
        private string egaisNumber;
        private DateTime? egaisDate;
        private string gtdNumber;
        private DateTime? gtdDate;
        private DateTime? dateUpdated;

        protected EgaisReplyFormA() {}

        public EgaisReplyFormA(Guid id, string aRegId, EgaisOrganizationInfo originalClient, string originalDocNumber, DateTime? originalDocDate, EgaisProductInfo productInfo, DateTime? bottlingDate, decimal? quantity, string egaisNumber, DateTime? egaisDate, string gtdNumber, DateTime? gtdDate)
            : base(id)
        {
            this.aRegId = aRegId;
            this.originalClient = originalClient;
            this.originalDocNumber = originalDocNumber;
            this.originalDocDate = originalDocDate;
            this.productInfo = productInfo;
            this.bottlingDate = bottlingDate;
            this.quantity = quantity;
            this.egaisNumber = egaisNumber;
            this.egaisDate = egaisDate;
            this.gtdNumber = gtdNumber;
            this.gtdDate = gtdDate;
        }

        public EgaisReplyFormA(Guid id, string aRegId, EgaisProductInfo productInfo)
            : base(id)
        {
            this.aRegId = aRegId;
            this.productInfo = productInfo;
        }

        [NotNull]
        public string ARegId
        {
            get { return aRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  aRegId = value;
            }
        }

        public EgaisOrganizationInfo OriginalClient
        {
            get { return originalClient; }
            set { originalClient = value; }
        }

        public string OriginalDocNumber
        {
            get { return originalDocNumber; }
            set { originalDocNumber = value; }
        }

        public DateTime? OriginalDocDate
        {
            get { return originalDocDate; }
            set { originalDocDate = value; }
        }

        [NotNull]
        public EgaisProductInfo ProductInfo
        {
            get { return productInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  productInfo = value;
            }
        }

        public DateTime? BottlingDate
        {
            get { return bottlingDate; }
            set { bottlingDate = value; }
        }

        public decimal? Quantity
        {
            get { return quantity; }
            set { quantity = value; }
        }

        public string EgaisNumber
        {
            get { return egaisNumber; }
            set { egaisNumber = value; }
        }

        public DateTime? EgaisDate
        {
            get { return egaisDate; }
            set { egaisDate = value; }
        }

        public string GtdNumber
        {
            get { return gtdNumber; }
            set { gtdNumber = value; }
        }

        public DateTime? GtdDate
        {
            get { return gtdDate; }
            set { gtdDate = value; }
        }

        public DateTime? DateUpdated
        {
            get { return dateUpdated; }
            set { dateUpdated = value; }
        }

    }

    [DataClass("EgaisIncomingInvoice")]
    public partial class EgaisIncomingInvoice : EgaisAbstractInvoice, WithRequestRepealOutgoing
    {
        [NotNull, NotNullField]
        private EgaisIncomingInvoiceStatus status;
        [NotNull, NotNullField]
        private EgaisIncomingInvoiceConfirmStatus confirmStatus;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sourceRarId = "";
        private string senderRarId;
        private bool useMarkConfirm;
        [Obsolete("Deprecated in Java code")]
        private EgaisConfirmTicketData egaisConfirmData;
        private EgaisResultData ticketActReceiveData;
        private EgaisConfirmTicketData supplierConfirmData;
        private EgaisResultData ticketActProcessData;

        protected EgaisIncomingInvoice() {}

        public EgaisIncomingInvoice(Guid id, Guid? departmentId, EgaisApiVersion versionInvoice, string identityId, bool? packed, string wbRegId, string wbNumber, DateTime? wbDate, DateTime? shippingDate, EgaisTransportInfo transportInfo, EgaisOrganizationInfo shipperInfo, User shipper, EgaisOrganizationInfo recipientInfo, EgaisOrganizationInfo supplierInfo, string invoiceBase, EgaisIncomingInvoiceStatus status, EgaisIncomingInvoiceConfirmStatus confirmStatus, string sourceRarId, string senderRarId, bool useMarkConfirm, EgaisConfirmTicketData egaisConfirmData, EgaisConfirmTicketData supplierConfirmData)
            : base(id, departmentId, versionInvoice, identityId, packed, wbRegId, wbNumber, wbDate, shippingDate, transportInfo, shipperInfo, shipper, recipientInfo, supplierInfo, invoiceBase)
        {
            this.status = status;
            this.confirmStatus = confirmStatus;
            this.sourceRarId = sourceRarId;
            this.senderRarId = senderRarId;
            this.useMarkConfirm = useMarkConfirm;
            this.egaisConfirmData = egaisConfirmData;
            this.supplierConfirmData = supplierConfirmData;
        }

        public EgaisIncomingInvoice(Guid id, EgaisApiVersion versionInvoice, EgaisOrganizationInfo shipperInfo, EgaisOrganizationInfo recipientInfo, EgaisIncomingInvoiceStatus status, EgaisIncomingInvoiceConfirmStatus confirmStatus, string sourceRarId, bool useMarkConfirm)
            : base(id, versionInvoice, shipperInfo, recipientInfo)
        {
            this.status = status;
            this.confirmStatus = confirmStatus;
            this.sourceRarId = sourceRarId;
            this.useMarkConfirm = useMarkConfirm;
        }

        [NotNull]
        public EgaisIncomingInvoiceStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        [NotNull]
        public EgaisIncomingInvoiceConfirmStatus ConfirmStatus
        {
            get { return confirmStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  confirmStatus = value;
            }
        }

        [NotNull]
        public string SourceRarId
        {
            get { return sourceRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceRarId = value;
            }
        }

        public string SenderRarId
        {
            get { return senderRarId; }
            set { senderRarId = value; }
        }

        public bool UseMarkConfirm
        {
            get { return useMarkConfirm; }
            set { useMarkConfirm = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public EgaisConfirmTicketData EgaisConfirmData
        {
            get { return egaisConfirmData; }
            set { egaisConfirmData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketActReceiveData
        {
            get { return ticketActReceiveData; }
            set { ticketActReceiveData = value; }
        }

        public EgaisConfirmTicketData SupplierConfirmData
        {
            get { return supplierConfirmData; }
            set { supplierConfirmData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketActProcessData
        {
            get { return ticketActProcessData; }
            set { ticketActProcessData = value; }
        }

    }

    [DataClass("EgaisIncomingInvoiceConfirmStatus")]
    [EnumClass]
    public partial class EgaisIncomingInvoiceConfirmStatus : LocalizableName<EgaisIncomingInvoiceConfirmStatus>
    {
        /// <summary> ПОЛУЧЕНА. </summary>
        public static readonly EgaisIncomingInvoiceConfirmStatus RECEIVED = new EgaisIncomingInvoiceConfirmStatus("RECEIVED", true);
        /// <summary> ПОДТВЕРЖДЕНА. </summary>
        public static readonly EgaisIncomingInvoiceConfirmStatus CONFIRMED = new EgaisIncomingInvoiceConfirmStatus("CONFIRMED", false);
        /// <summary> ОТКЛОНЕНА. </summary>
        public static readonly EgaisIncomingInvoiceConfirmStatus DISCARDED = new EgaisIncomingInvoiceConfirmStatus("DISCARDED", false);
        /// <summary> ОТМЕНЕНА. </summary>
        public static readonly EgaisIncomingInvoiceConfirmStatus REPEALED = new EgaisIncomingInvoiceConfirmStatus("REPEALED", false);

        private readonly bool editable;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisIncomingInvoiceConfirmStatus(string __value, bool editable)
        {
            this.__value = __value;
            this.__nameResId = "EGAISINCOMINGINVOICECONFIRMSTATUS_NAME_" + __value;
            this.editable = editable;
        }

        public static EgaisIncomingInvoiceConfirmStatus Parse(string value)
        {
            switch(value)
            {
                case "RECEIVED": return RECEIVED;
                case "CONFIRMED": return CONFIRMED;
                case "DISCARDED": return DISCARDED;
                case "REPEALED": return REPEALED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisIncomingInvoiceConfirmStatus[] VALUES
        {
            get
            {
                return new []
                {
                    RECEIVED, 
                    CONFIRMED, 
                    DISCARDED, 
                    REPEALED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Editable
        {
            get { return editable; }
        }

    }

    [DataClass("EgaisIncomingInvoiceItem")]
    public partial class EgaisIncomingInvoiceItem : EgaisAbstractInvoiceItem
    {

        protected EgaisIncomingInvoiceItem() {}

        public EgaisIncomingInvoiceItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string identityId, string packId, string party, string aRegId, string bRegId, string exciseNumber, DateTime? exciseDate, decimal? exciseSum, decimal? exciseBs, EgaisOrganizationInfo originalClient)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo, identityId, packId, party, aRegId, bRegId, exciseNumber, exciseDate, exciseSum, exciseBs, originalClient)
        {

        }

        public EgaisIncomingInvoiceItem(Guid id, EgaisProductInfo productInfo, string identityId, string aRegId)
            : base(id, productInfo, identityId, aRegId)
        {

        }

    }

    [DataClass("EgaisIncomingInvoiceStatus")]
    [EnumClass]
    public partial class EgaisIncomingInvoiceStatus : LocalizableName<EgaisIncomingInvoiceStatus>, EgaisEditableStatus
    {
        /// <summary> Получена. </summary>
        public static readonly EgaisIncomingInvoiceStatus NO_ACK = new EgaisIncomingInvoiceStatus("NO_ACK", true, false, false, false);
        /// <summary> Ответ отправляется. </summary>
        public static readonly EgaisIncomingInvoiceStatus TO_SEND = new EgaisIncomingInvoiceStatus("TO_SEND", false, true, false, false);
        /// <summary> Ответ отправлен. </summary>
        public static readonly EgaisIncomingInvoiceStatus SENT = new EgaisIncomingInvoiceStatus("SENT", false, true, false, false);
        /// <summary> Ошибка отправки. </summary>
        public static readonly EgaisIncomingInvoiceStatus ERROR_TO_SEND = new EgaisIncomingInvoiceStatus("ERROR_TO_SEND", true, false, false, false);
        /// <summary> Ответ принят ЕГАИС. </summary>
        public static readonly EgaisIncomingInvoiceStatus CHANGED_ACT_CONFIRMED_BY_EGAIS = new EgaisIncomingInvoiceStatus("CHANGED_ACT_CONFIRMED_BY_EGAIS", false, true, false, false);
        /// <summary> Ответ отклонен ЕГАИС. </summary>
        public static readonly EgaisIncomingInvoiceStatus CHANGED_ACT_REJECTED_BY_EGAIS = new EgaisIncomingInvoiceStatus("CHANGED_ACT_REJECTED_BY_EGAIS", true, false, false, false);
        /// <summary> Подтверждена поставщиком. </summary>
        public static readonly EgaisIncomingInvoiceStatus CHANGED_ACT_CONFIRMED_BY_SUPPLIER = new EgaisIncomingInvoiceStatus("CHANGED_ACT_CONFIRMED_BY_SUPPLIER", false, true, false, false);
        /// <summary> Отклонена поставщиком. </summary>
        public static readonly EgaisIncomingInvoiceStatus CHANGED_ACT_REJECTED_BY_SUPPLIER = new EgaisIncomingInvoiceStatus("CHANGED_ACT_REJECTED_BY_SUPPLIER", false, false, true, false);
        /// <summary> Подтверждена ЕГАИС. </summary>
        public static readonly EgaisIncomingInvoiceStatus CONFIRMED = new EgaisIncomingInvoiceStatus("CONFIRMED", false, true, false, false);
        /// <summary> Отклонена. </summary>
        public static readonly EgaisIncomingInvoiceStatus REJECTED = new EgaisIncomingInvoiceStatus("REJECTED", false, false, true, false);
        /// <summary> Отменена. </summary>
        public static readonly EgaisIncomingInvoiceStatus REPEALED_LATER = new EgaisIncomingInvoiceStatus("REPEALED_LATER", false, true, false, true);

        private readonly bool editable;
        private readonly bool accountable;
        private readonly bool cancelled;
        private readonly bool repealed;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisIncomingInvoiceStatus(string __value, bool editable, bool accountable, bool cancelled, bool repealed)
        {
            this.__value = __value;
            this.__nameResId = "EGAISINCOMINGINVOICESTATUS_NAME_" + __value;
            this.editable = editable;
            this.accountable = accountable;
            this.cancelled = cancelled;
            this.repealed = repealed;
        }

        public static EgaisIncomingInvoiceStatus Parse(string value)
        {
            switch(value)
            {
                case "NO_ACK": return NO_ACK;
                case "TO_SEND": return TO_SEND;
                case "SENT": return SENT;
                case "ERROR_TO_SEND": return ERROR_TO_SEND;
                case "CHANGED_ACT_CONFIRMED_BY_EGAIS": return CHANGED_ACT_CONFIRMED_BY_EGAIS;
                case "CHANGED_ACT_REJECTED_BY_EGAIS": return CHANGED_ACT_REJECTED_BY_EGAIS;
                case "CHANGED_ACT_CONFIRMED_BY_SUPPLIER": return CHANGED_ACT_CONFIRMED_BY_SUPPLIER;
                case "CHANGED_ACT_REJECTED_BY_SUPPLIER": return CHANGED_ACT_REJECTED_BY_SUPPLIER;
                case "CONFIRMED": return CONFIRMED;
                case "REJECTED": return REJECTED;
                case "REPEALED_LATER": return REPEALED_LATER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisIncomingInvoiceStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NO_ACK, 
                    TO_SEND, 
                    SENT, 
                    ERROR_TO_SEND, 
                    CHANGED_ACT_CONFIRMED_BY_EGAIS, 
                    CHANGED_ACT_REJECTED_BY_EGAIS, 
                    CHANGED_ACT_CONFIRMED_BY_SUPPLIER, 
                    CHANGED_ACT_REJECTED_BY_SUPPLIER, 
                    CONFIRMED, 
                    REJECTED, 
                    REPEALED_LATER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Editable
        {
            get { return editable; }
        }

        public bool Accountable
        {
            get { return accountable; }
        }

        public bool Cancelled
        {
            get { return cancelled; }
        }

        public bool Repealed
        {
            get { return repealed; }
        }

    }

    [DataClass("AlcoholJournal")]
    public partial class AlcoholJournal
    {
        private DateTime? dateFrom;
        private DateTime? dateTo;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AlcoholJournalItem> items = new List<AlcoholJournalItem>();

        protected AlcoholJournal() {}

        public AlcoholJournal(DateTime? dateFrom, DateTime? dateTo)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }
        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        [NotNull]
        public List<AlcoholJournalItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("AlcoholJournalItem")]
    public partial class AlcoholJournalItem
    {
        private DateTime? date;
        private decimal? amount;
        private string fsRarId;
        private EgaisProductInfo egaisProduct;

        protected AlcoholJournalItem() {}

        public AlcoholJournalItem(DateTime? date, decimal? amount, string fsRarId, EgaisProductInfo egaisProduct)
        {
            this.date = date;
            this.amount = amount;
            this.fsRarId = fsRarId;
            this.egaisProduct = egaisProduct;
        }
        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public string FsRarId
        {
            get { return fsRarId; }
            set { fsRarId = value; }
        }

        public EgaisProductInfo EgaisProduct
        {
            get { return egaisProduct; }
            set { egaisProduct = value; }
        }

    }

    [DataClass("EgaisAbstractMarkDocument")]
    public abstract partial class EgaisAbstractMarkDocument : EgaisAbstractInternalDocument
    {

        protected EgaisAbstractMarkDocument() {}

        protected EgaisAbstractMarkDocument(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, departmentId, sourceRarId, status)
        {

        }

        protected EgaisAbstractMarkDocument(Guid id, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, sourceRarId, status)
        {

        }

    }

    [DataClass("EgaisAbstractMarkDocumentItem")]
    public abstract partial class EgaisAbstractMarkDocumentItem : EgaisAbstractDocumentItem
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string bRegId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EgaisMark> marks = new List<EgaisMark>();

        protected EgaisAbstractMarkDocumentItem() {}

        protected EgaisAbstractMarkDocumentItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.bRegId = bRegId;
        }

        protected EgaisAbstractMarkDocumentItem(Guid id, EgaisProductInfo productInfo, string bRegId)
            : base(id, productInfo)
        {
            this.bRegId = bRegId;
        }

        [NotNull]
        public string BRegId
        {
            get { return bRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  bRegId = value;
            }
        }

        [NotNull]
        public List<EgaisMark> Marks
        {
            get { return marks; }
        }

    }

    [DataClass("EgaisMark")]
    public partial class EgaisMark
    {
        private string mark;

        protected EgaisMark() {}

        public EgaisMark(string mark)
        {
            this.mark = mark;
        }
        public string Mark
        {
            get { return mark; }
            set { mark = value; }
        }

    }

    [DataClass("EgaisMarkBalanceQuery")]
    public partial class EgaisMarkBalanceQuery : EgaisAbstractMarkDocument
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> parameters = new Dictionary<string, string>();

        protected EgaisMarkBalanceQuery() {}

        public EgaisMarkBalanceQuery(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, departmentId, sourceRarId, status)
        {

        }

        public EgaisMarkBalanceQuery(Guid id, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, sourceRarId, status)
        {

        }

        [NotNull]
        public Dictionary<string, string> Parameters
        {
            get { return parameters; }
        }

    }

    [DataClass("EgaisMarkBalanceQueryItem")]
    public partial class EgaisMarkBalanceQueryItem : EgaisAbstractMarkDocumentItem
    {

        protected EgaisMarkBalanceQueryItem() {}

        public EgaisMarkBalanceQueryItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo, bRegId)
        {

        }

        public EgaisMarkBalanceQueryItem(Guid id, EgaisProductInfo productInfo, string bRegId)
            : base(id, productInfo, bRegId)
        {

        }

    }

    [DataClass("EgaisMarkBox")]
    public partial class EgaisMarkBox
    {
        private string boxNumber;
        private List<EgaisMark> marks;

        protected EgaisMarkBox() {}

        public EgaisMarkBox(string boxNumber)
        {
            this.boxNumber = boxNumber;
        }
        public string BoxNumber
        {
            get { return boxNumber; }
            set { boxNumber = value; }
        }

        public List<EgaisMark> Marks
        {
            get { return marks; }
            set { marks = value; }
        }

    }

    [DataClass("EgaisMarkConfirm")]
    public partial class EgaisMarkConfirm : EgaisAbstractDocument, EgaisTerminalLockable
    {
        [NotNull, NotNullField]
        private EgaisMarkConfirmStatus markStatus;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sourceRarId = "";
        private Guid egaisInvoiceId;
        private Terminal lockedByTerminal;

        protected EgaisMarkConfirm() {}

        public EgaisMarkConfirm(Guid id, Guid? departmentId, EgaisMarkConfirmStatus markStatus, string sourceRarId, Guid egaisInvoiceId)
            : base(id, departmentId)
        {
            this.markStatus = markStatus;
            this.sourceRarId = sourceRarId;
            this.egaisInvoiceId = egaisInvoiceId;
        }

        public EgaisMarkConfirm(Guid id, EgaisMarkConfirmStatus markStatus, string sourceRarId, Guid egaisInvoiceId)
            : base(id)
        {
            this.markStatus = markStatus;
            this.sourceRarId = sourceRarId;
            this.egaisInvoiceId = egaisInvoiceId;
        }

        [NotNull]
        public EgaisMarkConfirmStatus MarkStatus
        {
            get { return markStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  markStatus = value;
            }
        }

        [NotNull]
        public string SourceRarId
        {
            get { return sourceRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceRarId = value;
            }
        }

        public Guid EgaisInvoiceId
        {
            get { return egaisInvoiceId; }
            set { egaisInvoiceId = value; }
        }

        [CanBeNull]
        public Terminal LockedByTerminal
        {
            get { return lockedByTerminal; }
            set { lockedByTerminal = value; }
        }

    }

    [DataClass("EgaisMarkConfirmItem")]
    public partial class EgaisMarkConfirmItem : EgaisAbstractMarkDocumentItem
    {

        protected EgaisMarkConfirmItem() {}

        public EgaisMarkConfirmItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo, bRegId)
        {

        }

        public EgaisMarkConfirmItem(Guid id, EgaisProductInfo productInfo, string bRegId)
            : base(id, productInfo, bRegId)
        {

        }

    }

    [DataClass("EgaisMarkConfirmStatus")]
    [EnumClass]
    public partial class EgaisMarkConfirmStatus : LocalizableName<EgaisMarkConfirmStatus>
    {
        /// <summary> Новый. </summary>
        public static readonly EgaisMarkConfirmStatus PENDING = new EgaisMarkConfirmStatus("PENDING", Serializer.Deserialize<HashSet<EgaisInternalDocumentStatus>>("<r><i cls=\"EgaisInternalDocumentStatus\">UPDATING</i></r>", false));
        /// <summary> Редактируется. </summary>
        public static readonly EgaisMarkConfirmStatus UPDATING = new EgaisMarkConfirmStatus("UPDATING", Serializer.Deserialize<HashSet<EgaisInternalDocumentStatus>>("<r><i cls=\"EgaisInternalDocumentStatus\">UPDATING</i></r>", false));
        /// <summary> Подтвержден. </summary>
        public static readonly EgaisMarkConfirmStatus COMPLETED = new EgaisMarkConfirmStatus("COMPLETED", Serializer.Deserialize<HashSet<EgaisInternalDocumentStatus>>("<r><i cls=\"EgaisInternalDocumentStatus\">UPDATING</i><i cls=\"EgaisInternalDocumentStatus\">TO_SEND</i><i cls=\"EgaisInternalDocumentStatus\">SENT</i><i cls=\"EgaisInternalDocumentStatus\">ERROR_TO_SEND</i><i cls=\"EgaisInternalDocumentStatus\">REJECTED_BY_EGAIS</i><i cls=\"EgaisInternalDocumentStatus\">RECEIVED_BY_EGAIS</i><i cls=\"EgaisInternalDocumentStatus\">PROCESSED_BY_EGAIS</i><i cls=\"EgaisInternalDocumentStatus\">REPEALED_LATER</i></r>", false));

        private readonly HashSet<EgaisInternalDocumentStatus> statuses;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisMarkConfirmStatus(string __value, HashSet<EgaisInternalDocumentStatus> statuses)
        {
            this.__value = __value;
            this.__nameResId = "EGAISMARKCONFIRMSTATUS_NAME_" + __value;
            this.statuses = statuses;
        }

        public static EgaisMarkConfirmStatus Parse(string value)
        {
            switch(value)
            {
                case "PENDING": return PENDING;
                case "UPDATING": return UPDATING;
                case "COMPLETED": return COMPLETED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisMarkConfirmStatus[] VALUES
        {
            get
            {
                return new []
                {
                    PENDING, 
                    UPDATING, 
                    COMPLETED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public HashSet<EgaisInternalDocumentStatus> Statuses
        {
            get { return statuses; }
        }

    }

    [DataClass("EgaisMarkFix")]
    public partial class EgaisMarkFix : EgaisAbstractMarkDocument
    {

        protected EgaisMarkFix() {}

        public EgaisMarkFix(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, departmentId, sourceRarId, status)
        {

        }

        public EgaisMarkFix(Guid id, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, sourceRarId, status)
        {

        }

    }

    [DataClass("EgaisMarkFixItem")]
    public partial class EgaisMarkFixItem : EgaisAbstractMarkDocumentItem
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisMarkFixItem() {}

        public EgaisMarkFixItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo, bRegId)
        {

        }

        public EgaisMarkFixItem(Guid id, EgaisProductInfo productInfo, string bRegId)
            : base(id, productInfo, bRegId)
        {

        }

    }

    [DataClass("EgaisMarkFixStubDocument")]
    public partial class EgaisMarkFixStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisMarkFixStubDocument() {}

        public EgaisMarkFixStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisMarkFixStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisMarkUnFix")]
    public partial class EgaisMarkUnFix : EgaisAbstractMarkDocument
    {

        protected EgaisMarkUnFix() {}

        public EgaisMarkUnFix(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, departmentId, sourceRarId, status)
        {

        }

        public EgaisMarkUnFix(Guid id, string sourceRarId, EgaisInternalDocumentStatus status)
            : base(id, sourceRarId, status)
        {

        }

    }

    [DataClass("EgaisMarkUnFixItem")]
    public partial class EgaisMarkUnFixItem : EgaisAbstractMarkDocumentItem
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisMarkUnFixItem() {}

        public EgaisMarkUnFixItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo, bRegId)
        {

        }

        public EgaisMarkUnFixItem(Guid id, EgaisProductInfo productInfo, string bRegId)
            : base(id, productInfo, bRegId)
        {

        }

    }

    [DataClass("EgaisMarkUnFixStubDocument")]
    public partial class EgaisMarkUnFixStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisMarkUnFixStubDocument() {}

        public EgaisMarkUnFixStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisMarkUnFixStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisTerminalLockable")]
    public partial interface EgaisTerminalLockable
    {

    }

    [DataClass("EgaisUnsealEvent")]
    public partial class EgaisUnsealEvent : RestoEvent
    {
        private bool deleted;
        [NotNull, NotNullField]
        private EgaisUnsealEventStatus status;
        [NotNull, NotNullField]
        private EgaisUnsealEventAction action;
        private EgaisShopWriteoffType writeoffType;
        private string sourceRarId;
        private Product product;
        private string productBarCode;
        private string egaisAlcCode;
        private string egaisMarkCode;
        private decimal? unpackedAmount;
        private User barman;
        private Group group;
        private RestaurantSection restaurantSection;
        private DateTime? dateFirstTry;
        private string processingError;
        private Guid? documentId;
        private string documentNumber;
        private OperationInfo modifiedInfo;

        protected EgaisUnsealEvent() {}

        public EgaisUnsealEvent(Guid id, DepartmentEntity department, DateTime date, bool deleted, EgaisUnsealEventStatus status, EgaisUnsealEventAction action, EgaisShopWriteoffType writeoffType, string sourceRarId, Product product, string productBarCode, string egaisAlcCode, string egaisMarkCode, decimal? unpackedAmount, User barman, Group group, RestaurantSection restaurantSection)
            : base(id, department, date)
        {
            this.deleted = deleted;
            this.status = status;
            this.action = action;
            this.writeoffType = writeoffType;
            this.sourceRarId = sourceRarId;
            this.product = product;
            this.productBarCode = productBarCode;
            this.egaisAlcCode = egaisAlcCode;
            this.egaisMarkCode = egaisMarkCode;
            this.unpackedAmount = unpackedAmount;
            this.barman = barman;
            this.group = group;
            this.restaurantSection = restaurantSection;
        }

        public EgaisUnsealEvent(Guid id, DateTime date, bool deleted, EgaisUnsealEventStatus status, EgaisUnsealEventAction action)
            : base(id, date)
        {
            this.deleted = deleted;
            this.status = status;
            this.action = action;
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [NotNull]
        public EgaisUnsealEventStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        [NotNull]
        public EgaisUnsealEventAction Action
        {
            get { return action; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  action = value;
            }
        }

        public EgaisShopWriteoffType WriteoffType
        {
            get { return writeoffType; }
            set { writeoffType = value; }
        }

        public string SourceRarId
        {
            get { return sourceRarId; }
            set { sourceRarId = value; }
        }

        public Product Product
        {
            get { return product; }
            set { product = value; }
        }

        public string ProductBarCode
        {
            get { return productBarCode; }
            set { productBarCode = value; }
        }

        public string EgaisAlcCode
        {
            get { return egaisAlcCode; }
            set { egaisAlcCode = value; }
        }

        public string EgaisMarkCode
        {
            get { return egaisMarkCode; }
            set { egaisMarkCode = value; }
        }

        public decimal? UnpackedAmount
        {
            get { return unpackedAmount; }
            set { unpackedAmount = value; }
        }

        public User Barman
        {
            get { return barman; }
            set { barman = value; }
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

        public RestaurantSection RestaurantSection
        {
            get { return restaurantSection; }
            set { restaurantSection = value; }
        }

        public DateTime? DateFirstTry
        {
            get { return dateFirstTry; }
            set { dateFirstTry = value; }
        }

        [CanBeNull]
        public string ProcessingError
        {
            get { return processingError; }
            set { processingError = value; }
        }

        public Guid? DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        [CanBeNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("EgaisUnsealEventAction")]
    [EnumClass]
    public partial class EgaisUnsealEventAction : LocalizableName<EgaisUnsealEventAction>
    {
        /// <summary> Вскрытие. </summary>
        public static readonly EgaisUnsealEventAction UNSEAL = new EgaisUnsealEventAction("UNSEAL");
        /// <summary> Отмена. </summary>
        public static readonly EgaisUnsealEventAction CANCEL = new EgaisUnsealEventAction("CANCEL");

        private readonly string __value;
        private readonly string __nameResId;

        private EgaisUnsealEventAction(string __value)
        {
            this.__value = __value;
            this.__nameResId = "EGAISUNSEALEVENTACTION_NAME_" + __value;
        }

        public static EgaisUnsealEventAction Parse(string value)
        {
            switch(value)
            {
                case "UNSEAL": return UNSEAL;
                case "CANCEL": return CANCEL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisUnsealEventAction[] VALUES
        {
            get
            {
                return new []
                {
                    UNSEAL, 
                    CANCEL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EgaisUnsealEventStatus")]
    [EnumClass]
    public partial class EgaisUnsealEventStatus : LocalizableName<EgaisUnsealEventStatus>
    {
        /// <summary> Новое. </summary>
        public static readonly EgaisUnsealEventStatus NEW = new EgaisUnsealEventStatus("NEW", false, true, false);
        /// <summary> Не обработано. </summary>
        public static readonly EgaisUnsealEventStatus EXPIRED = new EgaisUnsealEventStatus("EXPIRED", false, false, true);
        /// <summary> Временная ошибка. </summary>
        public static readonly EgaisUnsealEventStatus TRY_AGAIN = new EgaisUnsealEventStatus("TRY_AGAIN", true, true, false);
        /// <summary> Ошибка обработки. </summary>
        public static readonly EgaisUnsealEventStatus ERROR = new EgaisUnsealEventStatus("ERROR", true, false, true);
        /// <summary> Обработано. </summary>
        public static readonly EgaisUnsealEventStatus PROCESSED = new EgaisUnsealEventStatus("PROCESSED", false, false, false);

        private readonly bool isError;
        private readonly bool shouldProcess;
        private readonly bool mayRenew;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisUnsealEventStatus(string __value, bool isError, bool shouldProcess, bool mayRenew)
        {
            this.__value = __value;
            this.__nameResId = "EGAISUNSEALEVENTSTATUS_NAME_" + __value;
            this.isError = isError;
            this.shouldProcess = shouldProcess;
            this.mayRenew = mayRenew;
        }

        public static EgaisUnsealEventStatus Parse(string value)
        {
            switch(value)
            {
                case "NEW": return NEW;
                case "EXPIRED": return EXPIRED;
                case "TRY_AGAIN": return TRY_AGAIN;
                case "ERROR": return ERROR;
                case "PROCESSED": return PROCESSED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisUnsealEventStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NEW, 
                    EXPIRED, 
                    TRY_AGAIN, 
                    ERROR, 
                    PROCESSED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool IsError
        {
            get { return isError; }
        }

        public bool ShouldProcess
        {
            get { return shouldProcess; }
        }

        public bool MayRenew
        {
            get { return mayRenew; }
        }

    }

    [DataClass("EgaisAbstractStubDocument")]
    public abstract partial class EgaisAbstractStubDocument : StubDocument
    {

        protected EgaisAbstractStubDocument() {}

        protected EgaisAbstractStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        protected EgaisAbstractStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisDocumentLink")]
    public abstract partial class EgaisDocumentLink : Entity
    {
        [NotNull, NotNullField]
        private DocumentType internalDocumentType;
        private Guid internalDocumentId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string internalDocumentNumber = "";
        private DateTime internalDocumentDate;

        protected EgaisDocumentLink() {}

        protected EgaisDocumentLink(Guid id, DocumentType internalDocumentType, Guid internalDocumentId, string internalDocumentNumber, DateTime internalDocumentDate)
            : base(id)
        {
            this.internalDocumentType = internalDocumentType;
            this.internalDocumentId = internalDocumentId;
            this.internalDocumentNumber = internalDocumentNumber;
            this.internalDocumentDate = internalDocumentDate;
        }
        [NotNull]
        public DocumentType InternalDocumentType
        {
            get { return internalDocumentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  internalDocumentType = value;
            }
        }

        public Guid InternalDocumentId
        {
            get { return internalDocumentId; }
            set { internalDocumentId = value; }
        }

        [NotNull]
        public string InternalDocumentNumber
        {
            get { return internalDocumentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  internalDocumentNumber = value;
            }
        }

        public DateTime InternalDocumentDate
        {
            get { return internalDocumentDate; }
            set { internalDocumentDate = value; }
        }

    }

    [DataClass("EgaisOutgoingInvoice")]
    public partial class EgaisOutgoingInvoice : EgaisAbstractInvoice, WithRequestRepealIncoming
    {
        private EgaisOutgoingInvoiceType outgoingInvoiceType;
        [NotNull, NotNullField]
        private EgaisOutgoingInvoiceStatus status;
        [NotNull, NotNullField]
        private EgaisOutgoingInvoiceConfirmStatus confirmStatus;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string senderRarId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string destinationRarId = "";
        private string replyIdAct;
        [Obsolete("Deprecated in Java code")]
        private EgaisConfirmTicketData egaisConfirmData;
        private EgaisResultData ticketSentReceiveData;
        private EgaisResultData ticketSentProcessData;
        private EgaisConfirmData recipientConfirmData;
        private EgaisResultData ticketChangedReceiveData;
        private EgaisResultData ticketChangedProcessData;

        protected EgaisOutgoingInvoice() {}

        public EgaisOutgoingInvoice(Guid id, Guid? departmentId, EgaisApiVersion versionInvoice, string identityId, bool? packed, string wbRegId, string wbNumber, DateTime? wbDate, DateTime? shippingDate, EgaisTransportInfo transportInfo, EgaisOrganizationInfo shipperInfo, User shipper, EgaisOrganizationInfo recipientInfo, EgaisOrganizationInfo supplierInfo, string invoiceBase, EgaisOutgoingInvoiceType outgoingInvoiceType, EgaisOutgoingInvoiceStatus status, EgaisOutgoingInvoiceConfirmStatus confirmStatus, string senderRarId, string destinationRarId, EgaisConfirmTicketData egaisConfirmData, EgaisConfirmData recipientConfirmData)
            : base(id, departmentId, versionInvoice, identityId, packed, wbRegId, wbNumber, wbDate, shippingDate, transportInfo, shipperInfo, shipper, recipientInfo, supplierInfo, invoiceBase)
        {
            this.outgoingInvoiceType = outgoingInvoiceType;
            this.status = status;
            this.confirmStatus = confirmStatus;
            this.senderRarId = senderRarId;
            this.destinationRarId = destinationRarId;
            this.egaisConfirmData = egaisConfirmData;
            this.recipientConfirmData = recipientConfirmData;
        }

        public EgaisOutgoingInvoice(Guid id, EgaisApiVersion versionInvoice, EgaisOrganizationInfo shipperInfo, EgaisOrganizationInfo recipientInfo, EgaisOutgoingInvoiceType outgoingInvoiceType, EgaisOutgoingInvoiceStatus status, EgaisOutgoingInvoiceConfirmStatus confirmStatus, string senderRarId, string destinationRarId)
            : base(id, versionInvoice, shipperInfo, recipientInfo)
        {
            this.outgoingInvoiceType = outgoingInvoiceType;
            this.status = status;
            this.confirmStatus = confirmStatus;
            this.senderRarId = senderRarId;
            this.destinationRarId = destinationRarId;
        }

        public EgaisOutgoingInvoiceType OutgoingInvoiceType
        {
            get { return outgoingInvoiceType; }
            set { outgoingInvoiceType = value; }
        }

        [NotNull]
        public EgaisOutgoingInvoiceStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        [NotNull]
        public EgaisOutgoingInvoiceConfirmStatus ConfirmStatus
        {
            get { return confirmStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  confirmStatus = value;
            }
        }

        [NotNull]
        public string SenderRarId
        {
            get { return senderRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  senderRarId = value;
            }
        }

        [NotNull]
        public string DestinationRarId
        {
            get { return destinationRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  destinationRarId = value;
            }
        }

        [CanBeNull]
        public string ReplyIdAct
        {
            get { return replyIdAct; }
            set { replyIdAct = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public EgaisConfirmTicketData EgaisConfirmData
        {
            get { return egaisConfirmData; }
            set { egaisConfirmData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketSentReceiveData
        {
            get { return ticketSentReceiveData; }
            set { ticketSentReceiveData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketSentProcessData
        {
            get { return ticketSentProcessData; }
            set { ticketSentProcessData = value; }
        }

        public EgaisConfirmData RecipientConfirmData
        {
            get { return recipientConfirmData; }
            set { recipientConfirmData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketChangedReceiveData
        {
            get { return ticketChangedReceiveData; }
            set { ticketChangedReceiveData = value; }
        }

        [CanBeNull]
        public EgaisResultData TicketChangedProcessData
        {
            get { return ticketChangedProcessData; }
            set { ticketChangedProcessData = value; }
        }

    }

    [DataClass("EgaisOutgoingInvoiceConfirmStatus")]
    [EnumClass]
    public partial class EgaisOutgoingInvoiceConfirmStatus : LocalizableName<EgaisOutgoingInvoiceConfirmStatus>
    {
        /// <summary> НОВАЯ. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus NOT_CONFIRMED = new EgaisOutgoingInvoiceConfirmStatus("NOT_CONFIRMED");
        /// <summary> ПОДТВЕРЖДЕНА С РАСХОЖДЕНИЯМИ. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus CHANGED_BY_RECIPIENT = new EgaisOutgoingInvoiceConfirmStatus("CHANGED_BY_RECIPIENT");
        /// <summary> ПОДТВЕРЖДЕН АКТ РАСХОЖДЕНИЙ. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus CONFIRMED_CHANGES_ACT = new EgaisOutgoingInvoiceConfirmStatus("CONFIRMED_CHANGES_ACT");
        /// <summary> ОТКЛОНЕН АКТ РАСХОЖДЕНИЙ. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus DISCARDED_CHANGES_ACT = new EgaisOutgoingInvoiceConfirmStatus("DISCARDED_CHANGES_ACT");
        /// <summary> ПОДТВЕРЖДЕНА. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus CONFIRMED = new EgaisOutgoingInvoiceConfirmStatus("CONFIRMED");
        /// <summary> ОТКЛОНЕНА. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus DISCARDED = new EgaisOutgoingInvoiceConfirmStatus("DISCARDED");
        /// <summary> ОТМЕНЕНА. </summary>
        public static readonly EgaisOutgoingInvoiceConfirmStatus REPEALED = new EgaisOutgoingInvoiceConfirmStatus("REPEALED");

        private readonly string __value;
        private readonly string __nameResId;

        private EgaisOutgoingInvoiceConfirmStatus(string __value)
        {
            this.__value = __value;
            this.__nameResId = "EGAISOUTGOINGINVOICECONFIRMSTATUS_NAME_" + __value;
        }

        public static EgaisOutgoingInvoiceConfirmStatus Parse(string value)
        {
            switch(value)
            {
                case "NOT_CONFIRMED": return NOT_CONFIRMED;
                case "CHANGED_BY_RECIPIENT": return CHANGED_BY_RECIPIENT;
                case "CONFIRMED_CHANGES_ACT": return CONFIRMED_CHANGES_ACT;
                case "DISCARDED_CHANGES_ACT": return DISCARDED_CHANGES_ACT;
                case "CONFIRMED": return CONFIRMED;
                case "DISCARDED": return DISCARDED;
                case "REPEALED": return REPEALED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisOutgoingInvoiceConfirmStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_CONFIRMED, 
                    CHANGED_BY_RECIPIENT, 
                    CONFIRMED_CHANGES_ACT, 
                    DISCARDED_CHANGES_ACT, 
                    CONFIRMED, 
                    DISCARDED, 
                    REPEALED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("EgaisOutgoingInvoiceItem")]
    public partial class EgaisOutgoingInvoiceItem : EgaisAbstractInvoiceItem
    {
        private string prevBRegId;

        protected EgaisOutgoingInvoiceItem() {}

        public EgaisOutgoingInvoiceItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string identityId, string packId, string party, string aRegId, string bRegId, string exciseNumber, DateTime? exciseDate, decimal? exciseSum, decimal? exciseBs, EgaisOrganizationInfo originalClient, string prevBRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo, identityId, packId, party, aRegId, bRegId, exciseNumber, exciseDate, exciseSum, exciseBs, originalClient)
        {
            this.prevBRegId = prevBRegId;
        }

        public EgaisOutgoingInvoiceItem(Guid id, EgaisProductInfo productInfo, string identityId, string aRegId)
            : base(id, productInfo, identityId, aRegId)
        {

        }

        public string PrevBRegId
        {
            get { return prevBRegId; }
            set { prevBRegId = value; }
        }

    }

    [DataClass("EgaisOutgoingInvoiceStatus")]
    [EnumClass]
    public partial class EgaisOutgoingInvoiceStatus : LocalizableName<EgaisOutgoingInvoiceStatus>, EgaisEditableStatus
    {
        /// <summary> Новая. </summary>
        public static readonly EgaisOutgoingInvoiceStatus NO_ACK = new EgaisOutgoingInvoiceStatus("NO_ACK", true, false, false, false, false);
        /// <summary> Накладная отправляется. </summary>
        public static readonly EgaisOutgoingInvoiceStatus TO_SEND = new EgaisOutgoingInvoiceStatus("TO_SEND", false, true, false, false, false);
        /// <summary> Накладная отправлена. </summary>
        public static readonly EgaisOutgoingInvoiceStatus SENT = new EgaisOutgoingInvoiceStatus("SENT", false, true, false, false, false);
        /// <summary> Ошибка отправки накладной в УТМ. </summary>
        public static readonly EgaisOutgoingInvoiceStatus ERROR_TO_SEND = new EgaisOutgoingInvoiceStatus("ERROR_TO_SEND", true, false, false, false, false);
        /// <summary> Принята ЕГАИС. </summary>
        public static readonly EgaisOutgoingInvoiceStatus CONFIRMED_BY_EGAIS = new EgaisOutgoingInvoiceStatus("CONFIRMED_BY_EGAIS", false, true, false, false, false);
        /// <summary> Не принято в ЕГАИС. </summary>
        public static readonly EgaisOutgoingInvoiceStatus REJECTED_BY_EGAIS = new EgaisOutgoingInvoiceStatus("REJECTED_BY_EGAIS", true, false, false, false, false);
        /// <summary> Подтверждена получателем. </summary>
        public static readonly EgaisOutgoingInvoiceStatus CONFIRMED_BY_RECIPIENT = new EgaisOutgoingInvoiceStatus("CONFIRMED_BY_RECIPIENT", false, true, false, false, false);
        /// <summary> Отменена получателем. </summary>
        public static readonly EgaisOutgoingInvoiceStatus REJECTED_BY_RECIPIENT = new EgaisOutgoingInvoiceStatus("REJECTED_BY_RECIPIENT", false, false, true, false, false);
        /// <summary> Подтверждена с расхождениями. </summary>
        public static readonly EgaisOutgoingInvoiceStatus CONFIRMED_WITH_CHANGES_BY_RECIPIENT = new EgaisOutgoingInvoiceStatus("CONFIRMED_WITH_CHANGES_BY_RECIPIENT", false, true, false, true, false);
        /// <summary> Ответ отправляется. </summary>
        public static readonly EgaisOutgoingInvoiceStatus ANSWER_TO_SEND = new EgaisOutgoingInvoiceStatus("ANSWER_TO_SEND", false, true, false, false, false);
        /// <summary> Ответ отправлен. </summary>
        public static readonly EgaisOutgoingInvoiceStatus ANSWER_SENT = new EgaisOutgoingInvoiceStatus("ANSWER_SENT", false, true, false, false, false);
        /// <summary> Ошибка отправки ответа. </summary>
        public static readonly EgaisOutgoingInvoiceStatus ERROR_TO_SEND_ANSWER = new EgaisOutgoingInvoiceStatus("ERROR_TO_SEND_ANSWER", false, true, false, true, false);
        /// <summary> Ответ принят ЕГАИС. </summary>
        public static readonly EgaisOutgoingInvoiceStatus ANSWER_CONFIRMED_BY_EGAIS = new EgaisOutgoingInvoiceStatus("ANSWER_CONFIRMED_BY_EGAIS", false, true, false, false, false);
        /// <summary> Ответ не принят в ЕГАИС. </summary>
        public static readonly EgaisOutgoingInvoiceStatus ANSWER_REJECTED_BY_EGAIS = new EgaisOutgoingInvoiceStatus("ANSWER_REJECTED_BY_EGAIS", false, true, false, true, false);
        /// <summary> Подтверждена ЕГАИС. </summary>
        public static readonly EgaisOutgoingInvoiceStatus CONFIRMED = new EgaisOutgoingInvoiceStatus("CONFIRMED", false, true, false, false, false);
        /// <summary> Отклонена. </summary>
        public static readonly EgaisOutgoingInvoiceStatus REJECTED = new EgaisOutgoingInvoiceStatus("REJECTED", false, false, true, false, false);
        /// <summary> Отменена. </summary>
        public static readonly EgaisOutgoingInvoiceStatus REPEALED_LATER = new EgaisOutgoingInvoiceStatus("REPEALED_LATER", false, true, false, false, true);

        private readonly bool editable;
        private readonly bool accountable;
        private readonly bool cancelled;
        private readonly bool answerable;
        private readonly bool repealed;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisOutgoingInvoiceStatus(string __value, bool editable, bool accountable, bool cancelled, bool answerable, bool repealed)
        {
            this.__value = __value;
            this.__nameResId = "EGAISOUTGOINGINVOICESTATUS_NAME_" + __value;
            this.editable = editable;
            this.accountable = accountable;
            this.cancelled = cancelled;
            this.answerable = answerable;
            this.repealed = repealed;
        }

        public static EgaisOutgoingInvoiceStatus Parse(string value)
        {
            switch(value)
            {
                case "NO_ACK": return NO_ACK;
                case "TO_SEND": return TO_SEND;
                case "SENT": return SENT;
                case "ERROR_TO_SEND": return ERROR_TO_SEND;
                case "CONFIRMED_BY_EGAIS": return CONFIRMED_BY_EGAIS;
                case "REJECTED_BY_EGAIS": return REJECTED_BY_EGAIS;
                case "CONFIRMED_BY_RECIPIENT": return CONFIRMED_BY_RECIPIENT;
                case "REJECTED_BY_RECIPIENT": return REJECTED_BY_RECIPIENT;
                case "CONFIRMED_WITH_CHANGES_BY_RECIPIENT": return CONFIRMED_WITH_CHANGES_BY_RECIPIENT;
                case "ANSWER_TO_SEND": return ANSWER_TO_SEND;
                case "ANSWER_SENT": return ANSWER_SENT;
                case "ERROR_TO_SEND_ANSWER": return ERROR_TO_SEND_ANSWER;
                case "ANSWER_CONFIRMED_BY_EGAIS": return ANSWER_CONFIRMED_BY_EGAIS;
                case "ANSWER_REJECTED_BY_EGAIS": return ANSWER_REJECTED_BY_EGAIS;
                case "CONFIRMED": return CONFIRMED;
                case "REJECTED": return REJECTED;
                case "REPEALED_LATER": return REPEALED_LATER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisOutgoingInvoiceStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NO_ACK, 
                    TO_SEND, 
                    SENT, 
                    ERROR_TO_SEND, 
                    CONFIRMED_BY_EGAIS, 
                    REJECTED_BY_EGAIS, 
                    CONFIRMED_BY_RECIPIENT, 
                    REJECTED_BY_RECIPIENT, 
                    CONFIRMED_WITH_CHANGES_BY_RECIPIENT, 
                    ANSWER_TO_SEND, 
                    ANSWER_SENT, 
                    ERROR_TO_SEND_ANSWER, 
                    ANSWER_CONFIRMED_BY_EGAIS, 
                    ANSWER_REJECTED_BY_EGAIS, 
                    CONFIRMED, 
                    REJECTED, 
                    REPEALED_LATER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Editable
        {
            get { return editable; }
        }

        public bool Accountable
        {
            get { return accountable; }
        }

        public bool Cancelled
        {
            get { return cancelled; }
        }

        public bool Answerable
        {
            get { return answerable; }
        }

        public bool Repealed
        {
            get { return repealed; }
        }

    }

    [DataClass("EgaisOutgoingInvoiceStubDocument")]
    public partial class EgaisOutgoingInvoiceStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisOutgoingInvoiceStubDocument() {}

        public EgaisOutgoingInvoiceStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisOutgoingInvoiceStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisOutgoingInvoiceType")]
    public enum EgaisOutgoingInvoiceType
    {
        WB_INVOICE_FROM_ME,
        WB_RETURN_TO_ME,
        WB_INVOICE_TO_ME,
        WB_RETURN_FROM_ME,
        WB_INTERNAL
    }

    [DataClass("EgaisRequestRepeal")]
    public partial class EgaisRequestRepeal : EgaisAbstractInternalDocument
    {
        [NotNull, NotNullField]
        private EgaisDocumentTypes repealedDocumentType;
        [NotNull, NotNullField]
        private EgaisRequestRepealStatus repealStatus;
        private Guid? repealedDocumentId;
        private string repealedIncomingRequestNumber;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string repealedRegId = "";
        private EgaisConfirmData counteragentConfirmData;

        protected EgaisRequestRepeal() {}

        public EgaisRequestRepeal(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisDocumentTypes repealedDocumentType, EgaisRequestRepealStatus repealStatus, Guid? repealedDocumentId, string repealedIncomingRequestNumber, string repealedRegId)
            : base(id, departmentId, sourceRarId, status)
        {
            this.repealedDocumentType = repealedDocumentType;
            this.repealStatus = repealStatus;
            this.repealedDocumentId = repealedDocumentId;
            this.repealedIncomingRequestNumber = repealedIncomingRequestNumber;
            this.repealedRegId = repealedRegId;
        }

        public EgaisRequestRepeal(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisDocumentTypes repealedDocumentType, EgaisRequestRepealStatus repealStatus, string repealedRegId)
            : base(id, sourceRarId, status)
        {
            this.repealedDocumentType = repealedDocumentType;
            this.repealStatus = repealStatus;
            this.repealedRegId = repealedRegId;
        }

        [NotNull]
        public EgaisDocumentTypes RepealedDocumentType
        {
            get { return repealedDocumentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  repealedDocumentType = value;
            }
        }

        [NotNull]
        public EgaisRequestRepealStatus RepealStatus
        {
            get { return repealStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  repealStatus = value;
            }
        }

        public Guid? RepealedDocumentId
        {
            get { return repealedDocumentId; }
            set { repealedDocumentId = value; }
        }

        public string RepealedIncomingRequestNumber
        {
            get { return repealedIncomingRequestNumber; }
            set { repealedIncomingRequestNumber = value; }
        }

        [NotNull]
        public string RepealedRegId
        {
            get { return repealedRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  repealedRegId = value;
            }
        }

        [CanBeNull]
        public EgaisConfirmData CounteragentConfirmData
        {
            get { return counteragentConfirmData; }
            set { counteragentConfirmData = value; }
        }

    }

    [DataClass("EgaisRequestRepealInfo")]
    public partial class EgaisRequestRepealInfo
    {
        private string sourceRarId;
        private string requestNumber;
        private DateTime? requestDate;
        private string wbRegId;

        protected EgaisRequestRepealInfo() {}

        public EgaisRequestRepealInfo(string sourceRarId, string requestNumber, DateTime? requestDate, string wbRegId)
        {
            this.sourceRarId = sourceRarId;
            this.requestNumber = requestNumber;
            this.requestDate = requestDate;
            this.wbRegId = wbRegId;
        }
        public string SourceRarId
        {
            get { return sourceRarId; }
            set { sourceRarId = value; }
        }

        public string RequestNumber
        {
            get { return requestNumber; }
            set { requestNumber = value; }
        }

        public DateTime? RequestDate
        {
            get { return requestDate; }
            set { requestDate = value; }
        }

        public string WbRegId
        {
            get { return wbRegId; }
            set { wbRegId = value; }
        }

    }

    [DataClass("EgaisRequestRepealItem")]
    public partial class EgaisRequestRepealItem : EgaisAbstractDocumentItem
    {
        private List<EgaisMark> marks;
        private string bRegId;

        protected EgaisRequestRepealItem() {}

        public EgaisRequestRepealItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.bRegId = bRegId;
        }

        public EgaisRequestRepealItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

        public List<EgaisMark> Marks
        {
            get { return marks; }
            set { marks = value; }
        }

        public string BRegId
        {
            get { return bRegId; }
            set { bRegId = value; }
        }

    }

    [DataClass("EgaisRequestRepealStatus")]
    [EnumClass]
    public partial class EgaisRequestRepealStatus : LocalizableName<EgaisRequestRepealStatus>
    {
        /// <summary> Входящий. </summary>
        public static readonly EgaisRequestRepealStatus RECEIVED = new EgaisRequestRepealStatus("RECEIVED", true, false, false);
        /// <summary> Исходящий. </summary>
        public static readonly EgaisRequestRepealStatus REQUESTED = new EgaisRequestRepealStatus("REQUESTED", false, true, false);
        /// <summary> Документ отменен. </summary>
        public static readonly EgaisRequestRepealStatus REPEALED = new EgaisRequestRepealStatus("REPEALED", false, true, true);
        /// <summary> Запрос отклонен. </summary>
        public static readonly EgaisRequestRepealStatus RETAINED = new EgaisRequestRepealStatus("RETAINED", false, false, false);

        private readonly bool answerable;
        private readonly bool accountable;
        private readonly bool repealed;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisRequestRepealStatus(string __value, bool answerable, bool accountable, bool repealed)
        {
            this.__value = __value;
            this.__nameResId = "EGAISREQUESTREPEALSTATUS_NAME_" + __value;
            this.answerable = answerable;
            this.accountable = accountable;
            this.repealed = repealed;
        }

        public static EgaisRequestRepealStatus Parse(string value)
        {
            switch(value)
            {
                case "RECEIVED": return RECEIVED;
                case "REQUESTED": return REQUESTED;
                case "REPEALED": return REPEALED;
                case "RETAINED": return RETAINED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisRequestRepealStatus[] VALUES
        {
            get
            {
                return new []
                {
                    RECEIVED, 
                    REQUESTED, 
                    REPEALED, 
                    RETAINED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public bool Answerable
        {
            get { return answerable; }
        }

        public bool Accountable
        {
            get { return accountable; }
        }

        public bool Repealed
        {
            get { return repealed; }
        }

    }

    [DataClass("WithRequestRepealIncoming")]
    public partial interface WithRequestRepealIncoming
    {

    }

    [DataClass("WithRequestRepealOutgoing")]
    public partial interface WithRequestRepealOutgoing
    {

    }

    [DataClass("EgaisRequestRepealStubDocument")]
    public partial class EgaisRequestRepealStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisRequestRepealStubDocument() {}

        public EgaisRequestRepealStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisRequestRepealStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisShopIncoming")]
    public partial class EgaisShopIncoming : EgaisAbstractInternalDocument, WithRequestRepealOutgoing
    {
        [NotNull, NotNullField]
        private EgaisShopIncomingType egaisIncomingType;
        private string mixedWriteoffRegId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EgaisShopIncomingLink> internalDocuments = new List<EgaisShopIncomingLink>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisShopIncoming() {}

        public EgaisShopIncoming(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisShopIncomingType egaisIncomingType)
            : base(id, departmentId, sourceRarId, status)
        {
            this.egaisIncomingType = egaisIncomingType;
        }

        public EgaisShopIncoming(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisShopIncomingType egaisIncomingType)
            : base(id, sourceRarId, status)
        {
            this.egaisIncomingType = egaisIncomingType;
        }

        [NotNull]
        public EgaisShopIncomingType EgaisIncomingType
        {
            get { return egaisIncomingType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  egaisIncomingType = value;
            }
        }

        [CanBeNull]
        public string MixedWriteoffRegId
        {
            get { return mixedWriteoffRegId; }
            set { mixedWriteoffRegId = value; }
        }

        [NotNull]
        public List<EgaisShopIncomingLink> InternalDocuments
        {
            get { return internalDocuments; }
        }

    }

    [DataClass("EgaisShopIncomingItem")]
    public partial class EgaisShopIncomingItem : EgaisAbstractDocumentItem
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisShopIncomingItem() {}

        public EgaisShopIncomingItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {

        }

        public EgaisShopIncomingItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

    }

    [DataClass("EgaisShopIncomingLink")]
    public partial class EgaisShopIncomingLink : EgaisDocumentLink
    {

        protected EgaisShopIncomingLink() {}

        public EgaisShopIncomingLink(Guid id, DocumentType internalDocumentType, Guid internalDocumentId, string internalDocumentNumber, DateTime internalDocumentDate)
            : base(id, internalDocumentType, internalDocumentId, internalDocumentNumber, internalDocumentDate)
        {

        }
    }

    [DataClass("EgaisShopIncomingStubDocument")]
    public partial class EgaisShopIncomingStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisShopIncomingStubDocument() {}

        public EgaisShopIncomingStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisShopIncomingStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisShopIncomingType")]
    [EnumClass]
    public partial class EgaisShopIncomingType : LocalizableName<EgaisShopIncomingType>, ILocalizableDescription
    {
        /// <summary> Пересортица. Излишки пересортица. </summary>
        public static readonly EgaisShopIncomingType MIXED = new EgaisShopIncomingType("MIXED", "Пересортица");
        /// <summary> Излишки. Излишки продукции. В случае обнаружения излишков продукции организация предоставляет в ЕГАИС акт постановки на баланс с указанием основания «Излишки». </summary>
        public static readonly EgaisShopIncomingType SURPLUS = new EgaisShopIncomingType("SURPLUS", "Излишки");
        /// <summary> Продукция, полученная до 01.01.2016. Продукция, полученная до 01.01.2016. </summary>
        public static readonly EgaisShopIncomingType OPENING = new EgaisShopIncomingType("OPENING", "Продукция, полученная до 01.01.2016");
        /// <summary> Производство_Сливы. Собственное производство/сливы продукции. </summary>
        public static readonly EgaisShopIncomingType PRODUCTION = new EgaisShopIncomingType("PRODUCTION", "Производство_Сливы");

        private readonly string egaisId;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __descriptionResId;

        private EgaisShopIncomingType(string __value, string egaisId)
        {
            this.__value = __value;
            this.__nameResId = "EGAISSHOPINCOMINGTYPE_NAME_" + __value;
            this.__descriptionResId = "EGAISSHOPINCOMINGTYPE_DESCRIPTION_" + __value;
            this.egaisId = egaisId;
        }

        public static EgaisShopIncomingType Parse(string value)
        {
            switch(value)
            {
                case "MIXED": return MIXED;
                case "SURPLUS": return SURPLUS;
                case "OPENING": return OPENING;
                case "PRODUCTION": return PRODUCTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisShopIncomingType[] VALUES
        {
            get
            {
                return new []
                {
                    MIXED, 
                    SURPLUS, 
                    OPENING, 
                    PRODUCTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string DescriptionResId
        {
            get { return __descriptionResId; }
        }

        public string EgaisId
        {
            get { return egaisId; }
        }

    }

    [DataClass("EgaisShopTransfer")]
    public partial class EgaisShopTransfer : EgaisAbstractInternalDocument
    {
        [NotNull, NotNullField]
        private EgaisShopTransferDirection direction;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisShopTransfer() {}

        public EgaisShopTransfer(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisShopTransferDirection direction)
            : base(id, departmentId, sourceRarId, status)
        {
            this.direction = direction;
        }

        public EgaisShopTransfer(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisShopTransferDirection direction)
            : base(id, sourceRarId, status)
        {
            this.direction = direction;
        }

        [NotNull]
        public EgaisShopTransferDirection Direction
        {
            get { return direction; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  direction = value;
            }
        }

    }

    [DataClass("EgaisShopTransferDirection")]
    [EnumClass]
    public partial class EgaisShopTransferDirection : LocalizableName<EgaisShopTransferDirection>
    {
        /// <summary> Возврат из торгового зала (регистр 1). </summary>
        public static readonly EgaisShopTransferDirection FROM_SHOP = new EgaisShopTransferDirection("FROM_SHOP", EgaisRegister.STORE);
        /// <summary> Передача в торговый зал (регистр 2). </summary>
        public static readonly EgaisShopTransferDirection TO_SHOP = new EgaisShopTransferDirection("TO_SHOP", EgaisRegister.SHOP);

        private readonly EgaisRegister toRegister;
        private readonly string __value;
        private readonly string __nameResId;

        private EgaisShopTransferDirection(string __value, EgaisRegister toRegister)
        {
            this.__value = __value;
            this.__nameResId = "EGAISSHOPTRANSFERDIRECTION_NAME_" + __value;
            this.toRegister = toRegister;
        }

        public static EgaisShopTransferDirection Parse(string value)
        {
            switch(value)
            {
                case "FROM_SHOP": return FROM_SHOP;
                case "TO_SHOP": return TO_SHOP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisShopTransferDirection[] VALUES
        {
            get
            {
                return new []
                {
                    FROM_SHOP, 
                    TO_SHOP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public EgaisRegister ToRegister
        {
            get { return toRegister; }
        }

    }

    [DataClass("EgaisShopTransferItem")]
    public partial class EgaisShopTransferItem : EgaisAbstractDocumentItem
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string bRegId = "";

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisShopTransferItem() {}

        public EgaisShopTransferItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.bRegId = bRegId;
        }

        public EgaisShopTransferItem(Guid id, EgaisProductInfo productInfo, string bRegId)
            : base(id, productInfo)
        {
            this.bRegId = bRegId;
        }

        [NotNull]
        public string BRegId
        {
            get { return bRegId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  bRegId = value;
            }
        }

    }

    [DataClass("EgaisShopTransferStubDocument")]
    public partial class EgaisShopTransferStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisShopTransferStubDocument() {}

        public EgaisShopTransferStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisShopTransferStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisShopWriteoff")]
    public partial class EgaisShopWriteoff : EgaisAbstractInternalDocument, WithRequestRepealOutgoing
    {
        [NotNull, NotNullField]
        private EgaisRegister egaisRegister;
        [NotNull, NotNullField]
        private EgaisShopWriteoffType egaisWriteoffType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EgaisShopWriteoffLink> internalDocuments = new List<EgaisShopWriteoffLink>();
        private DateTime? dateLastAutomaticUpdate;
        private Guid? groupId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisShopWriteoff() {}

        public EgaisShopWriteoff(Guid id, Guid? departmentId, string sourceRarId, EgaisInternalDocumentStatus status, EgaisRegister egaisRegister, EgaisShopWriteoffType egaisWriteoffType)
            : base(id, departmentId, sourceRarId, status)
        {
            this.egaisRegister = egaisRegister;
            this.egaisWriteoffType = egaisWriteoffType;
        }

        public EgaisShopWriteoff(Guid id, string sourceRarId, EgaisInternalDocumentStatus status, EgaisRegister egaisRegister, EgaisShopWriteoffType egaisWriteoffType)
            : base(id, sourceRarId, status)
        {
            this.egaisRegister = egaisRegister;
            this.egaisWriteoffType = egaisWriteoffType;
        }

        [NotNull]
        public EgaisRegister EgaisRegister
        {
            get { return egaisRegister; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  egaisRegister = value;
            }
        }

        [NotNull]
        public EgaisShopWriteoffType EgaisWriteoffType
        {
            get { return egaisWriteoffType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  egaisWriteoffType = value;
            }
        }

        [NotNull]
        public List<EgaisShopWriteoffLink> InternalDocuments
        {
            get { return internalDocuments; }
        }

        public DateTime? DateLastAutomaticUpdate
        {
            get { return dateLastAutomaticUpdate; }
            set { dateLastAutomaticUpdate = value; }
        }

        public Guid? GroupId
        {
            get { return groupId; }
            set { groupId = value; }
        }

    }

    [DataClass("EgaisShopWriteoffItem")]
    public partial class EgaisShopWriteoffItem : EgaisAbstractDocumentItem
    {
        private decimal? sumSale;
        private List<EgaisMark> marks;
        private string bRegId;
        private decimal? internalWriteoffLiters;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisShopWriteoffItem() {}

        public EgaisShopWriteoffItem(Guid id, int num, Product supplierProduct, MeasureUnit amountUnit, Guid? containerId, EgaisProductInfo productInfo, string bRegId)
            : base(id, num, supplierProduct, amountUnit, containerId, productInfo)
        {
            this.bRegId = bRegId;
        }

        public EgaisShopWriteoffItem(Guid id, EgaisProductInfo productInfo)
            : base(id, productInfo)
        {

        }

        public decimal? SumSale
        {
            get { return sumSale; }
            set { sumSale = value; }
        }

        public List<EgaisMark> Marks
        {
            get { return marks; }
            set { marks = value; }
        }

        public string BRegId
        {
            get { return bRegId; }
            set { bRegId = value; }
        }

        public decimal? InternalWriteoffLiters
        {
            get { return internalWriteoffLiters; }
            set { internalWriteoffLiters = value; }
        }

    }

    [DataClass("EgaisShopWriteoffLink")]
    public partial class EgaisShopWriteoffLink : EgaisDocumentLink
    {

        protected EgaisShopWriteoffLink() {}

        public EgaisShopWriteoffLink(Guid id, DocumentType internalDocumentType, Guid internalDocumentId, string internalDocumentNumber, DateTime internalDocumentDate)
            : base(id, internalDocumentType, internalDocumentId, internalDocumentNumber, internalDocumentDate)
        {

        }
    }

    [DataClass("EgaisShopWriteoffStubDocument")]
    public partial class EgaisShopWriteoffStubDocument : EgaisAbstractStubDocument
    {

        protected EgaisShopWriteoffStubDocument() {}

        public EgaisShopWriteoffStubDocument(Guid id, DateTime dateIncoming, string documentNumber, DocumentStatus status)
            : base(id, dateIncoming, documentNumber, status)
        {

        }

        public EgaisShopWriteoffStubDocument(Guid id, DateTime dateIncoming, string documentNumber)
            : base(id, dateIncoming, documentNumber)
        {

        }

    }

    [DataClass("EgaisShopWriteoffType")]
    [EnumClass]
    public partial class EgaisShopWriteoffType : LocalizableName<EgaisShopWriteoffType>, ILocalizableDescription
    {
        /// <summary> Пересортица. Недостача пересортица. </summary>
        public static readonly EgaisShopWriteoffType MIXED = new EgaisShopWriteoffType("MIXED", "Пересортица");
        /// <summary> Недостача. Недостача (хищение, злоупотребление материально ответственных лиц, ошибки учета, естественная убыль, ...). </summary>
        public static readonly EgaisShopWriteoffType SHORTAGE = new EgaisShopWriteoffType("SHORTAGE", "Недостача");
        /// <summary> Уценка. Уценка (списание) в результате порчи. </summary>
        public static readonly EgaisShopWriteoffType REDUCTION = new EgaisShopWriteoffType("REDUCTION", "Уценка");
        /// <summary> Порча. Списание объема продукции, не подлежащей дальнейшей реализации (бой, срок годности, порча). </summary>
        public static readonly EgaisShopWriteoffType SPOILAGE = new EgaisShopWriteoffType("SPOILAGE", "Порча");
        /// <summary> Потери. Потери при транспортировке. </summary>
        public static readonly EgaisShopWriteoffType TRANSPORT = new EgaisShopWriteoffType("TRANSPORT", "Потери");
        /// <summary> Проверки. Списание объема продукции, израсходованной на лабораторные нужды для прохождения добровольной проверки качества, рекламные образцы. Требуется указание штрихкодов.. </summary>
        public static readonly EgaisShopWriteoffType CHECK = new EgaisShopWriteoffType("CHECK", "Проверки");
        /// <summary> Арест. Списание арестованной продукции, изъятой из оборота продукции, конфискованной продукции по решению суда. Требуется указание штрихкодов.. </summary>
        public static readonly EgaisShopWriteoffType SEIZURE = new EgaisShopWriteoffType("SEIZURE", "Арест");
        /// <summary> Иные цели. Списание продукции, когда ФСМ/АМ не возможно считать. </summary>
        public static readonly EgaisShopWriteoffType OTHER = new EgaisShopWriteoffType("OTHER", "Иные цели");
        /// <summary> Реализация. Розничная реализация продукция, не подлежащая фиксации в ЕГАИС. </summary>
        public static readonly EgaisShopWriteoffType SALES = new EgaisShopWriteoffType("SALES", "Реализация");
        /// <summary> Производственные потери. Списание продукции при производственных потерях. </summary>
        public static readonly EgaisShopWriteoffType PRODUCTION = new EgaisShopWriteoffType("PRODUCTION", "Производственные потери");

        private readonly string egaisId;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __descriptionResId;

        private EgaisShopWriteoffType(string __value, string egaisId)
        {
            this.__value = __value;
            this.__nameResId = "EGAISSHOPWRITEOFFTYPE_NAME_" + __value;
            this.__descriptionResId = "EGAISSHOPWRITEOFFTYPE_DESCRIPTION_" + __value;
            this.egaisId = egaisId;
        }

        public static EgaisShopWriteoffType Parse(string value)
        {
            switch(value)
            {
                case "MIXED": return MIXED;
                case "SHORTAGE": return SHORTAGE;
                case "REDUCTION": return REDUCTION;
                case "SPOILAGE": return SPOILAGE;
                case "TRANSPORT": return TRANSPORT;
                case "CHECK": return CHECK;
                case "SEIZURE": return SEIZURE;
                case "OTHER": return OTHER;
                case "SALES": return SALES;
                case "PRODUCTION": return PRODUCTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisShopWriteoffType[] VALUES
        {
            get
            {
                return new []
                {
                    MIXED, 
                    SHORTAGE, 
                    REDUCTION, 
                    SPOILAGE, 
                    TRANSPORT, 
                    CHECK, 
                    SEIZURE, 
                    OTHER, 
                    SALES, 
                    PRODUCTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string DescriptionResId
        {
            get { return __descriptionResId; }
        }

        public string EgaisId
        {
            get { return egaisId; }
        }

    }

    [DataClass("EgaisConfirmData")]
    public partial class EgaisConfirmData
    {
        private string identity;
        private string actNumber;
        private DateTime? actDate;
        private string confirmComment;

        protected EgaisConfirmData() {}

        public EgaisConfirmData(string identity, string actNumber, DateTime? actDate, string confirmComment)
        {
            this.identity = identity;
            this.actNumber = actNumber;
            this.actDate = actDate;
            this.confirmComment = confirmComment;
        }
        public string Identity
        {
            get { return identity; }
            set { identity = value; }
        }

        public string ActNumber
        {
            get { return actNumber; }
            set { actNumber = value; }
        }

        public DateTime? ActDate
        {
            get { return actDate; }
            set { actDate = value; }
        }

        public string ConfirmComment
        {
            get { return confirmComment; }
            set { confirmComment = value; }
        }

    }

    [DataClass("EgaisConfirmTicketData")]
    public partial class EgaisConfirmTicketData
    {
        private string ticketNumber;
        private DateTime? ticketDate;
        private string notes;

        protected EgaisConfirmTicketData() {}

        public EgaisConfirmTicketData(string ticketNumber, DateTime? ticketDate, string notes)
        {
            this.ticketNumber = ticketNumber;
            this.ticketDate = ticketDate;
            this.notes = notes;
        }
        public string TicketNumber
        {
            get { return ticketNumber; }
            set { ticketNumber = value; }
        }

        public DateTime? TicketDate
        {
            get { return ticketDate; }
            set { ticketDate = value; }
        }

        public string Notes
        {
            get { return notes; }
            set { notes = value; }
        }

    }

    [DataClass("EgaisDocType")]
    [EnumClass]
    public partial class EgaisDocType
    {
        public static readonly EgaisDocType WAYBILL = new EgaisDocType("WAYBILL", "WAYBILL");
        public static readonly EgaisDocType WAYBILLTICKET = new EgaisDocType("WAYBILLTICKET", "WayBillTicket");

        private readonly string docType;
        private readonly string __value;

        private EgaisDocType(string __value, string docType)
        {
            this.__value = __value;
            this.docType = docType;
        }

        public static EgaisDocType Parse(string value)
        {
            switch(value)
            {
                case "WAYBILL": return WAYBILL;
                case "WAYBILLTICKET": return WAYBILLTICKET;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisDocType[] VALUES
        {
            get
            {
                return new []
                {
                    WAYBILL, 
                    WAYBILLTICKET
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string DocType
        {
            get { return docType; }
        }

    }

    [DataClass("EgaisOperationName")]
    [EnumClass]
    public partial class EgaisOperationName
    {
        public static readonly EgaisOperationName CONFIRM = new EgaisOperationName("CONFIRM", "Confirm");
        public static readonly EgaisOperationName UNCONFIRM = new EgaisOperationName("UNCONFIRM", "UnConfirm");

        private readonly string operationName;
        private readonly string __value;

        private EgaisOperationName(string __value, string operationName)
        {
            this.__value = __value;
            this.operationName = operationName;
        }

        public static EgaisOperationName Parse(string value)
        {
            switch(value)
            {
                case "CONFIRM": return CONFIRM;
                case "UNCONFIRM": return UNCONFIRM;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static EgaisOperationName[] VALUES
        {
            get
            {
                return new []
                {
                    CONFIRM, 
                    UNCONFIRM
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string OperationName
        {
            get { return operationName; }
        }

    }

    [DataClass("EgaisResultData")]
    public partial class EgaisResultData
    {
        private EgaisResultStatus status;
        private DateTime? date;
        private string operation;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string comment = "";

        protected EgaisResultData() {}

        public EgaisResultData(EgaisResultStatus status, DateTime? date, string operation, string comment)
        {
            this.status = status;
            this.date = date;
            this.operation = operation;
            this.comment = comment;
        }

        public EgaisResultData(EgaisResultStatus status, string comment)
        {
            this.status = status;
            this.comment = comment;
        }

        public EgaisResultStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public string Operation
        {
            get { return operation; }
            set { operation = value; }
        }

        [NotNull]
        public string Comment
        {
            get { return comment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  comment = value;
            }
        }

    }

    [DataClass("EgaisResultStatus")]
    public enum EgaisResultStatus
    {
        ACCEPTED,
        REJECTED
    }

    [DataClass("EgaisFifoSortValue")]
    public partial class EgaisFifoSortValue
    {
        private DateTime date;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";
        private int itemNumber;

        protected EgaisFifoSortValue() {}

        public EgaisFifoSortValue(DateTime date, string documentNumber, int itemNumber)
        {
            this.date = date;
            this.documentNumber = documentNumber;
            this.itemNumber = itemNumber;
        }
        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

        public int ItemNumber
        {
            get { return itemNumber; }
            set { itemNumber = value; }
        }

    }

    [DataClass("EgaisTransactionPart")]
    public partial class EgaisTransactionPart : CachedEntity
    {
        [NotNull, NotNullField]
        private EgaisTransactionPartKey key;
        private DateTime dateIncoming;
        [HasDefaultValue]
        private decimal quantityChange = 0;
        [HasDefaultValue]
        private decimal quantityRemain = 0;
        private decimal? quantityTotalExpected;
        [HasDefaultValue]
        private decimal amountChange = 0;
        [HasDefaultValue]
        private decimal amountRemain = 0;
        [NotNull, NotNullField]
        private EgaisDocumentTypes documentType;
        private Guid documentId;
        private Guid documentItemId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";
        [HasDefaultValue]
        private int documentItemNumber = 1;
        private string documentRegId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string producerRarId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string productName = "";
        private bool productIsPacked;
        [HasDefaultValue]
        private decimal productCapacity = 0;
        [NotNull, NotNullField]
        private OperationInfo createdInfo;
        private OperationInfo modifiedInfo;

        protected EgaisTransactionPart() {}

        public EgaisTransactionPart(Guid id, EgaisTransactionPartKey key, DateTime dateIncoming, decimal quantityChange, decimal quantityRemain, decimal? quantityTotalExpected, decimal amountChange, decimal amountRemain, EgaisDocumentTypes documentType, Guid documentId, Guid documentItemId, string documentRegId, string producerRarId, string productName, bool productIsPacked, decimal productCapacity, OperationInfo createdInfo)
            : base(id)
        {
            this.key = key;
            this.dateIncoming = dateIncoming;
            this.quantityChange = quantityChange;
            this.quantityRemain = quantityRemain;
            this.quantityTotalExpected = quantityTotalExpected;
            this.amountChange = amountChange;
            this.amountRemain = amountRemain;
            this.documentType = documentType;
            this.documentId = documentId;
            this.documentItemId = documentItemId;
            this.documentRegId = documentRegId;
            this.producerRarId = producerRarId;
            this.productName = productName;
            this.productIsPacked = productIsPacked;
            this.productCapacity = productCapacity;
            this.createdInfo = createdInfo;
        }

        public EgaisTransactionPart(Guid id, EgaisTransactionPartKey key, DateTime dateIncoming, decimal quantityChange, decimal quantityRemain, decimal amountChange, decimal amountRemain, EgaisDocumentTypes documentType, Guid documentId, Guid documentItemId, string producerRarId, string productName, decimal productCapacity, OperationInfo createdInfo)
            : base(id)
        {
            this.key = key;
            this.dateIncoming = dateIncoming;
            this.quantityChange = quantityChange;
            this.quantityRemain = quantityRemain;
            this.amountChange = amountChange;
            this.amountRemain = amountRemain;
            this.documentType = documentType;
            this.documentId = documentId;
            this.documentItemId = documentItemId;
            this.producerRarId = producerRarId;
            this.productName = productName;
            this.productCapacity = productCapacity;
            this.createdInfo = createdInfo;
        }

        [NotNull]
        public EgaisTransactionPartKey Key
        {
            get { return key; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  key = value;
            }
        }

        public DateTime DateIncoming
        {
            get { return dateIncoming; }
            set { dateIncoming = value; }
        }

        public decimal QuantityChange
        {
            get { return quantityChange; }
            set { quantityChange = value; }
        }

        public decimal QuantityRemain
        {
            get { return quantityRemain; }
            set { quantityRemain = value; }
        }

        public decimal? QuantityTotalExpected
        {
            get { return quantityTotalExpected; }
            set { quantityTotalExpected = value; }
        }

        public decimal AmountChange
        {
            get { return amountChange; }
            set { amountChange = value; }
        }

        public decimal AmountRemain
        {
            get { return amountRemain; }
            set { amountRemain = value; }
        }

        [NotNull]
        public EgaisDocumentTypes DocumentType
        {
            get { return documentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentType = value;
            }
        }

        public Guid DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        public Guid DocumentItemId
        {
            get { return documentItemId; }
            set { documentItemId = value; }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

        public int DocumentItemNumber
        {
            get { return documentItemNumber; }
            set { documentItemNumber = value; }
        }

        public string DocumentRegId
        {
            get { return documentRegId; }
            set { documentRegId = value; }
        }

        [NotNull]
        public string ProducerRarId
        {
            get { return producerRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  producerRarId = value;
            }
        }

        [NotNull]
        public string ProductName
        {
            get { return productName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  productName = value;
            }
        }

        public bool ProductIsPacked
        {
            get { return productIsPacked; }
            set { productIsPacked = value; }
        }

        public decimal ProductCapacity
        {
            get { return productCapacity; }
            set { productCapacity = value; }
        }

        [NotNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  createdInfo = value;
            }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("EgaisTransactionPartKey")]
    public partial class EgaisTransactionPartKey
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string sourceRarId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string alcCode = "";
        private string aRegId;
        private string bRegId;

        protected EgaisTransactionPartKey() {}

        public EgaisTransactionPartKey(string sourceRarId, string alcCode, string aRegId, string bRegId)
        {
            this.sourceRarId = sourceRarId;
            this.alcCode = alcCode;
            this.aRegId = aRegId;
            this.bRegId = bRegId;
        }

        public EgaisTransactionPartKey(string sourceRarId, string alcCode)
        {
            this.sourceRarId = sourceRarId;
            this.alcCode = alcCode;
        }

        [NotNull]
        public string SourceRarId
        {
            get { return sourceRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceRarId = value;
            }
        }

        [NotNull]
        public string AlcCode
        {
            get { return alcCode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  alcCode = value;
            }
        }

        public string ARegId
        {
            get { return aRegId; }
            set { aRegId = value; }
        }

        public string BRegId
        {
            get { return bRegId; }
            set { bRegId = value; }
        }

    }

    [DataClass("EgaisInventoryReport")]
    public partial class EgaisInventoryReport
    {
        private DateTime dateFrom;
        private DateTime dateTo;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, HashSet<string>> alcCodeByProduct = new Dictionary<Guid, HashSet<string>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, HashSet<Guid>> productByAlcCode = new Dictionary<string, HashSet<Guid>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Store, Dictionary<Product, decimal>> internalStartBalanceInMeasureUnits = new Dictionary<Store, Dictionary<Product, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Store, Dictionary<Product, decimal>> internalStartBalanceInLiters = new Dictionary<Store, Dictionary<Product, decimal>>();
        private Dictionary<Store, List<EgaisInventoryReportInternalItem>> internalWriteoffs;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, Dictionary<string, decimal>> egaisEndBalanceStoreLiter = new Dictionary<string, Dictionary<string, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, Dictionary<string, decimal>> egaisEndBalanceShopLiter = new Dictionary<string, Dictionary<string, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, List<EgaisTransactionPart>> egaisIncomesStoreRemain = new Dictionary<string, List<EgaisTransactionPart>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, List<EgaisTransactionPart>> egaisIncomesShopRemain = new Dictionary<string, List<EgaisTransactionPart>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, Dictionary<EgaisTransactionPartKey, decimal>> egaisLastBalanceStore = new Dictionary<string, Dictionary<EgaisTransactionPartKey, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, Dictionary<EgaisTransactionPartKey, decimal>> egaisLastBalanceShop = new Dictionary<string, Dictionary<EgaisTransactionPartKey, decimal>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, User> bRegIdSupplier = new Dictionary<string, User>();

        protected EgaisInventoryReport() {}

        public EgaisInventoryReport(DateTime dateFrom, DateTime dateTo)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
        }
        public DateTime DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        [NotNull]
        public Dictionary<Guid, HashSet<string>> AlcCodeByProduct
        {
            get { return alcCodeByProduct; }
        }

        [NotNull]
        public Dictionary<string, HashSet<Guid>> ProductByAlcCode
        {
            get { return productByAlcCode; }
        }

        [NotNull]
        public Dictionary<Store, Dictionary<Product, decimal>> InternalStartBalanceInMeasureUnits
        {
            get { return internalStartBalanceInMeasureUnits; }
        }

        [NotNull]
        public Dictionary<Store, Dictionary<Product, decimal>> InternalStartBalanceInLiters
        {
            get { return internalStartBalanceInLiters; }
        }

        public Dictionary<Store, List<EgaisInventoryReportInternalItem>> InternalWriteoffs
        {
            get { return internalWriteoffs; }
            set { internalWriteoffs = value; }
        }

        [NotNull]
        public Dictionary<string, Dictionary<string, decimal>> EgaisEndBalanceStoreLiter
        {
            get { return egaisEndBalanceStoreLiter; }
        }

        [NotNull]
        public Dictionary<string, Dictionary<string, decimal>> EgaisEndBalanceShopLiter
        {
            get { return egaisEndBalanceShopLiter; }
        }

        [NotNull]
        public Dictionary<string, List<EgaisTransactionPart>> EgaisIncomesStoreRemain
        {
            get { return egaisIncomesStoreRemain; }
        }

        [NotNull]
        public Dictionary<string, List<EgaisTransactionPart>> EgaisIncomesShopRemain
        {
            get { return egaisIncomesShopRemain; }
        }

        [NotNull]
        public Dictionary<string, Dictionary<EgaisTransactionPartKey, decimal>> EgaisLastBalanceStore
        {
            get { return egaisLastBalanceStore; }
        }

        [NotNull]
        public Dictionary<string, Dictionary<EgaisTransactionPartKey, decimal>> EgaisLastBalanceShop
        {
            get { return egaisLastBalanceShop; }
        }

        [NotNull]
        public Dictionary<string, User> BRegIdSupplier
        {
            get { return bRegIdSupplier; }
        }

    }

    [DataClass("EgaisInventoryReportInternalItem")]
    public partial class EgaisInventoryReportInternalItem
    {
        private DateTime date;
        [NotNull, NotNullField]
        private Store store;
        [NotNull, NotNullField]
        private Product product;
        [HasDefaultValue]
        private decimal amountInPrimaryUnits = 0;
        [HasDefaultValue]
        private decimal amountInLiters = 0;
        private Guid documentId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string documentNumber = "";
        private string documentItemComment;

        protected EgaisInventoryReportInternalItem() {}

        public EgaisInventoryReportInternalItem(DateTime date, Store store, Product product, decimal amountInPrimaryUnits, decimal amountInLiters, Guid documentId, string documentNumber)
        {
            this.date = date;
            this.store = store;
            this.product = product;
            this.amountInPrimaryUnits = amountInPrimaryUnits;
            this.amountInLiters = amountInLiters;
            this.documentId = documentId;
            this.documentNumber = documentNumber;
        }
        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        [NotNull]
        public Store Store
        {
            get { return store; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  store = value;
            }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal AmountInPrimaryUnits
        {
            get { return amountInPrimaryUnits; }
            set { amountInPrimaryUnits = value; }
        }

        public decimal AmountInLiters
        {
            get { return amountInLiters; }
            set { amountInLiters = value; }
        }

        public Guid DocumentId
        {
            get { return documentId; }
            set { documentId = value; }
        }

        [NotNull]
        public string DocumentNumber
        {
            get { return documentNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentNumber = value;
            }
        }

        [CanBeNull]
        public string DocumentItemComment
        {
            get { return documentItemComment; }
            set { documentItemComment = value; }
        }

    }

    [DataClass("EgaisInvoiceCreateResult")]
    public partial class EgaisInvoiceCreateResult
    {
        private EgaisOutgoingInvoice invoice;
        private List<EgaisAbstractQuery> queries;

        protected EgaisInvoiceCreateResult() {}

        public EgaisInvoiceCreateResult(EgaisOutgoingInvoice invoice)
        {
            this.invoice = invoice;
        }
        public EgaisOutgoingInvoice Invoice
        {
            get { return invoice; }
            set { invoice = value; }
        }

        public List<EgaisAbstractQuery> Queries
        {
            get { return queries; }
            set { queries = value; }
        }

    }

    [DataClass("EgaisInvoiceSaveResult")]
    public partial class EgaisInvoiceSaveResult
    {
        private bool invoiceSaved;
        private string otherSuggestedNumber;
        private string errorMessage;
        private string additionalInfo;
        private Dictionary<Product, string> productsWithAlcCodeToRemove;
        private Dictionary<Product, string> productsWithAlcCodeToAdd;
        private Dictionary<Product, SupplierPriceListItem> priceItemsToRemove;
        private Dictionary<Product, SupplierPriceListItem> priceItemsToAdd;

        protected EgaisInvoiceSaveResult() {}

        public EgaisInvoiceSaveResult(bool invoiceSaved, string otherSuggestedNumber, string errorMessage, string additionalInfo)
        {
            this.invoiceSaved = invoiceSaved;
            this.otherSuggestedNumber = otherSuggestedNumber;
            this.errorMessage = errorMessage;
            this.additionalInfo = additionalInfo;
        }
        public bool InvoiceSaved
        {
            get { return invoiceSaved; }
            set { invoiceSaved = value; }
        }

        public string OtherSuggestedNumber
        {
            get { return otherSuggestedNumber; }
            set { otherSuggestedNumber = value; }
        }

        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

        public string AdditionalInfo
        {
            get { return additionalInfo; }
            set { additionalInfo = value; }
        }

        public Dictionary<Product, string> ProductsWithAlcCodeToRemove
        {
            get { return productsWithAlcCodeToRemove; }
            set { productsWithAlcCodeToRemove = value; }
        }

        public Dictionary<Product, string> ProductsWithAlcCodeToAdd
        {
            get { return productsWithAlcCodeToAdd; }
            set { productsWithAlcCodeToAdd = value; }
        }

        public Dictionary<Product, SupplierPriceListItem> PriceItemsToRemove
        {
            get { return priceItemsToRemove; }
            set { priceItemsToRemove = value; }
        }

        public Dictionary<Product, SupplierPriceListItem> PriceItemsToAdd
        {
            get { return priceItemsToAdd; }
            set { priceItemsToAdd = value; }
        }

    }

    [DataClass("EgaisResendInvoiceSendResult")]
    public partial class EgaisResendInvoiceSendResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EgaisIncomingInvoice> invoicesToConfirm = new List<EgaisIncomingInvoice>();
        private int requestsCount;

        protected EgaisResendInvoiceSendResult() {}

        public EgaisResendInvoiceSendResult(int requestsCount)
        {
            this.requestsCount = requestsCount;
        }
        [NotNull]
        public List<EgaisIncomingInvoice> InvoicesToConfirm
        {
            get { return invoicesToConfirm; }
        }

        public int RequestsCount
        {
            get { return requestsCount; }
            set { requestsCount = value; }
        }

    }

    [DataClass("EgaisConnectionSettings")]
    public partial class EgaisConnectionSettings
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string fsRarId = "";
        private string versionTtn;
        private string versionTtnNew;
        private EgaisInternalDocumentStatus versionTtnStatus;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string url = "";
        private Guid? terminalId;
        private string terminalName;
        private ICollection<Guid> allowedTerminals;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EgaisConnectionSettings() {}

        public EgaisConnectionSettings(string name, string fsRarId, string versionTtn, string versionTtnNew, EgaisInternalDocumentStatus versionTtnStatus, string url, Guid? terminalId, string terminalName)
        {
            this.name = name;
            this.fsRarId = fsRarId;
            this.versionTtn = versionTtn;
            this.versionTtnNew = versionTtnNew;
            this.versionTtnStatus = versionTtnStatus;
            this.url = url;
            this.terminalId = terminalId;
            this.terminalName = terminalName;
        }

        public EgaisConnectionSettings(string name, string fsRarId, string url)
        {
            this.name = name;
            this.fsRarId = fsRarId;
            this.url = url;
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        [NotNull]
        public string FsRarId
        {
            get { return fsRarId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  fsRarId = value;
            }
        }

        public string VersionTtn
        {
            get { return versionTtn; }
            set { versionTtn = value; }
        }

        public string VersionTtnNew
        {
            get { return versionTtnNew; }
            set { versionTtnNew = value; }
        }

        public EgaisInternalDocumentStatus VersionTtnStatus
        {
            get { return versionTtnStatus; }
            set { versionTtnStatus = value; }
        }

        [NotNull]
        public string Url
        {
            get { return url; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  url = value;
            }
        }

        public Guid? TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

        public string TerminalName
        {
            get { return terminalName; }
            set { terminalName = value; }
        }

        public ICollection<Guid> AllowedTerminals
        {
            get { return allowedTerminals; }
            set { allowedTerminals = value; }
        }

    }

    [DataClass("EgaisConnectionsSettings")]
    public partial class EgaisConnectionsSettings
    {
        [HasDefaultValue]
        private bool rmsManagedConnection = true;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<EgaisConnectionSettings> connections = new HashSet<EgaisConnectionSettings>();
        [HasDefaultValue]
        private bool unsealMarkedWriteoffFromStore = false;
        [HasDefaultValue]
        private bool unsealUnmarkedWriteoffFromStore = false;
        private TimeSpan? stopUpdatingTime;
        [HasDefaultValue]
        private bool autoSend = false;
        private int markKeepDays;

        public EgaisConnectionsSettings() {}

        public EgaisConnectionsSettings(int markKeepDays)
        {
            this.markKeepDays = markKeepDays;
        }
        public bool RmsManagedConnection
        {
            get { return rmsManagedConnection; }
            set { rmsManagedConnection = value; }
        }

        [NotNull]
        public HashSet<EgaisConnectionSettings> Connections
        {
            get { return connections; }
        }

        public bool UnsealMarkedWriteoffFromStore
        {
            get { return unsealMarkedWriteoffFromStore; }
            set { unsealMarkedWriteoffFromStore = value; }
        }

        public bool UnsealUnmarkedWriteoffFromStore
        {
            get { return unsealUnmarkedWriteoffFromStore; }
            set { unsealUnmarkedWriteoffFromStore = value; }
        }

        public TimeSpan? StopUpdatingTime
        {
            get { return stopUpdatingTime; }
            set { stopUpdatingTime = value; }
        }

        public bool AutoSend
        {
            get { return autoSend; }
            set { autoSend = value; }
        }

        public int MarkKeepDays
        {
            get { return markKeepDays; }
            set { markKeepDays = value; }
        }

    }

    [DataClass("UtmDocumentStatus")]
    public partial class UtmDocumentStatus : CachedEntity
    {
        private string sourceRarId;
        private UtmDocumentType type;
        private string query;
        private string replyId;
        private string fileName;
        private UtmDocumentState status;
        private UtmDocumentPresence presence;
        private DateTime? processingDate;
        private string errorMessage;
        private bool toDeleteRequest;
        private bool toProcessRequest;
        [HasDefaultValue]
        private int badAttemptsToProcessRequest = 0;

        protected UtmDocumentStatus() {}

        public UtmDocumentStatus(Guid id, string sourceRarId, UtmDocumentType type, string query, string replyId, string fileName, UtmDocumentState status, UtmDocumentPresence presence, DateTime? processingDate, string errorMessage, bool toDeleteRequest, bool toProcessRequest)
            : base(id)
        {
            this.sourceRarId = sourceRarId;
            this.type = type;
            this.query = query;
            this.replyId = replyId;
            this.fileName = fileName;
            this.status = status;
            this.presence = presence;
            this.processingDate = processingDate;
            this.errorMessage = errorMessage;
            this.toDeleteRequest = toDeleteRequest;
            this.toProcessRequest = toProcessRequest;
        }

        public UtmDocumentStatus(Guid id)
            : base(id)
        {

        }

        public string SourceRarId
        {
            get { return sourceRarId; }
            set { sourceRarId = value; }
        }

        public UtmDocumentType Type
        {
            get { return type; }
            set { type = value; }
        }

        public string Query
        {
            get { return query; }
            set { query = value; }
        }

        public string ReplyId
        {
            get { return replyId; }
            set { replyId = value; }
        }

        public string FileName
        {
            get { return fileName; }
            set { fileName = value; }
        }

        public UtmDocumentState Status
        {
            get { return status; }
            set { status = value; }
        }

        public UtmDocumentPresence Presence
        {
            get { return presence; }
            set { presence = value; }
        }

        public DateTime? ProcessingDate
        {
            get { return processingDate; }
            set { processingDate = value; }
        }

        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

        public bool ToDeleteRequest
        {
            get { return toDeleteRequest; }
            set { toDeleteRequest = value; }
        }

        public bool ToProcessRequest
        {
            get { return toProcessRequest; }
            set { toProcessRequest = value; }
        }

        public int BadAttemptsToProcessRequest
        {
            get { return badAttemptsToProcessRequest; }
            set { badAttemptsToProcessRequest = value; }
        }

    }

    [DataClass("UtmDocumentPresence")]
    public enum UtmDocumentPresence
    {
        PRESENT,
        GONE,
        EXPIRED,
        REPLACED
    }

    [DataClass("UtmDocumentState")]
    public enum UtmDocumentState
    {
        PROCESSED,
        ERROR,
        ERROR_TO_DELETE
    }

    [DataClass("UtmDocumentType")]
    public enum UtmDocumentType
    {
        IN,
        OUT
    }

    [RootEntity]
    [DataClass("ConnectionGroup")]
    public partial class ConnectionGroup : PersistedEntity
    {
        private string name;
        private HashSet<DepartmentEntity> departments;
        private HashSet<User> representativeSuppliers;
        private User representativeUser;
        [HasDefaultValue]
        private bool outer = false;
        [HasDefaultValue]
        private bool registered = true;

        protected ConnectionGroup() {}

        public ConnectionGroup(Guid id, string name)
            : base(id)
        {
            this.name = name;
        }

        public ConnectionGroup(Guid id)
            : base(id)
        {

        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

        [CanBeNull]
        public HashSet<User> RepresentativeSuppliers
        {
            get { return representativeSuppliers; }
            set { representativeSuppliers = value; }
        }

        [CanBeNull]
        public User RepresentativeUser
        {
            get { return representativeUser; }
            set { representativeUser = value; }
        }

        public bool Outer
        {
            get { return outer; }
            set { outer = value; }
        }

        public bool Registered
        {
            get { return registered; }
            set { registered = value; }
        }

    }

    [DataClass("FranchiseOuterEntityType")]
    [EnumClass]
    public partial class FranchiseOuterEntityType
    {
        public static readonly FranchiseOuterEntityType STORE = new FranchiseOuterEntityType("STORE", typeof(Store));
        public static readonly FranchiseOuterEntityType DEPARTMENT = new FranchiseOuterEntityType("DEPARTMENT", typeof(Department));
        public static readonly FranchiseOuterEntityType CENTRAL_OFFICE = new FranchiseOuterEntityType("CENTRAL_OFFICE", typeof(CentralOffice));
        public static readonly FranchiseOuterEntityType CENTRAL_STORE = new FranchiseOuterEntityType("CENTRAL_STORE", typeof(CentralStore));
        public static readonly FranchiseOuterEntityType MANUFACTURE = new FranchiseOuterEntityType("MANUFACTURE", typeof(Manufacture));

        private readonly Type entityClass;
        private readonly string __value;

        private FranchiseOuterEntityType(string __value, Type entityClass)
        {
            this.__value = __value;
            this.entityClass = entityClass;
        }

        public static FranchiseOuterEntityType Parse(string value)
        {
            switch(value)
            {
                case "STORE": return STORE;
                case "DEPARTMENT": return DEPARTMENT;
                case "CENTRAL_OFFICE": return CENTRAL_OFFICE;
                case "CENTRAL_STORE": return CENTRAL_STORE;
                case "MANUFACTURE": return MANUFACTURE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static FranchiseOuterEntityType[] VALUES
        {
            get
            {
                return new []
                {
                    STORE, 
                    DEPARTMENT, 
                    CENTRAL_OFFICE, 
                    CENTRAL_STORE, 
                    MANUFACTURE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public Type EntityClass
        {
            get { return entityClass; }
        }

    }

    [DataClass("PingMessageRecord")]
    public partial class PingMessageRecord
    {
        private Guid? id;
        private Guid? parentId;
        private DateTime? date;
        private PingMessageType messageType;
        private string text;
        private ConnectionGroup sourceConnectionGroup;
        private ConnectionGroup targetConnectionGroup;

        protected PingMessageRecord() {}

        public PingMessageRecord(Guid? id, Guid? parentId, DateTime? date, PingMessageType messageType, string text, ConnectionGroup sourceConnectionGroup, ConnectionGroup targetConnectionGroup)
        {
            this.id = id;
            this.parentId = parentId;
            this.date = date;
            this.messageType = messageType;
            this.text = text;
            this.sourceConnectionGroup = sourceConnectionGroup;
            this.targetConnectionGroup = targetConnectionGroup;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public Guid? ParentId
        {
            get { return parentId; }
            set { parentId = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public PingMessageType MessageType
        {
            get { return messageType; }
            set { messageType = value; }
        }

        public string Text
        {
            get { return text; }
            set { text = value; }
        }

        public ConnectionGroup SourceConnectionGroup
        {
            get { return sourceConnectionGroup; }
            set { sourceConnectionGroup = value; }
        }

        public ConnectionGroup TargetConnectionGroup
        {
            get { return targetConnectionGroup; }
            set { targetConnectionGroup = value; }
        }

    }

    [DataClass("ProductDisabledField")]
    [EnumClass]
    public partial class ProductDisabledField
    {
        public static readonly ProductDisabledField NAME = new ProductDisabledField("NAME", "Название");
        public static readonly ProductDisabledField PRODUCT_TYPE = new ProductDisabledField("PRODUCT_TYPE", "Тип номенклатуры");
        public static readonly ProductDisabledField GROUP = new ProductDisabledField("GROUP", "Группа");
        public static readonly ProductDisabledField CODE = new ProductDisabledField("CODE", "Артикул");
        public static readonly ProductDisabledField MEASURE_UNIT = new ProductDisabledField("MEASURE_UNIT", "Единицы измерения");
        public static readonly ProductDisabledField ACCOUNTING_CATEGORY = new ProductDisabledField("ACCOUNTING_CATEGORY", "Бухгалтерская категория");
        public static readonly ProductDisabledField COOKING_PLACE_TYPE = new ProductDisabledField("COOKING_PLACE_TYPE", "Тип места приготовления");
        public static readonly ProductDisabledField ASSEMBLY_CHART = new ProductDisabledField("ASSEMBLY_CHART", "Технологическая карта");
        public static readonly ProductDisabledField CATEGORY = new ProductDisabledField("CATEGORY", "Категория");
        public static readonly ProductDisabledField CONTAINERS = new ProductDisabledField("CONTAINERS", "Фасовки");
        public static readonly ProductDisabledField ENERGY = new ProductDisabledField("ENERGY", "Пищевая ценность");
        public static readonly ProductDisabledField MODIFIERS = new ProductDisabledField("MODIFIERS", "Модификаторы");
        public static readonly ProductDisabledField VAT = new ProductDisabledField("VAT", "НДС");
        public static readonly ProductDisabledField SCALE_AND_SIZES = new ProductDisabledField("SCALE_AND_SIZES", "Шкала и размеры");

        private readonly string title;
        private readonly string __value;

        private ProductDisabledField(string __value, string title)
        {
            this.__value = __value;
            this.title = title;
        }

        public static ProductDisabledField Parse(string value)
        {
            switch(value)
            {
                case "NAME": return NAME;
                case "PRODUCT_TYPE": return PRODUCT_TYPE;
                case "GROUP": return GROUP;
                case "CODE": return CODE;
                case "MEASURE_UNIT": return MEASURE_UNIT;
                case "ACCOUNTING_CATEGORY": return ACCOUNTING_CATEGORY;
                case "COOKING_PLACE_TYPE": return COOKING_PLACE_TYPE;
                case "ASSEMBLY_CHART": return ASSEMBLY_CHART;
                case "CATEGORY": return CATEGORY;
                case "CONTAINERS": return CONTAINERS;
                case "ENERGY": return ENERGY;
                case "MODIFIERS": return MODIFIERS;
                case "VAT": return VAT;
                case "SCALE_AND_SIZES": return SCALE_AND_SIZES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProductDisabledField[] VALUES
        {
            get
            {
                return new []
                {
                    NAME, 
                    PRODUCT_TYPE, 
                    GROUP, 
                    CODE, 
                    MEASURE_UNIT, 
                    ACCOUNTING_CATEGORY, 
                    COOKING_PLACE_TYPE, 
                    ASSEMBLY_CHART, 
                    CATEGORY, 
                    CONTAINERS, 
                    ENERGY, 
                    MODIFIERS, 
                    VAT, 
                    SCALE_AND_SIZES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Title
        {
            get { return title; }
        }

    }

    [DataClass("PingMessageType")]
    public enum PingMessageType
    {
        REQUEST,
        RESPONSE
    }

    [DataClass("AbstractChoiceBinding")]
    public abstract partial class AbstractChoiceBinding
    {
        private ProductTreeEntity modifier;
        [HasDefaultValue]
        private int defaultAmount = 0;
        [HasDefaultValue]
        private int freeOfChargeAmount = 0;

        protected AbstractChoiceBinding() {}

        protected AbstractChoiceBinding(ProductTreeEntity modifier)
        {
            this.modifier = modifier;
        }
        public ProductTreeEntity Modifier
        {
            get { return modifier; }
            set { modifier = value; }
        }

        public int DefaultAmount
        {
            get { return defaultAmount; }
            set { defaultAmount = value; }
        }

        public int FreeOfChargeAmount
        {
            get { return freeOfChargeAmount; }
            set { freeOfChargeAmount = value; }
        }

    }

    [DataClass("ActionAfterPaymentType")]
    [EnumClass]
    public partial class ActionAfterPaymentType : LocalizableName<ActionAfterPaymentType>
    {
        /// <summary> Возвращаться на предыдущий экран (схема зала, по официантам...). </summary>
        public static readonly ActionAfterPaymentType PREVIOUS_PAGE = new ActionAfterPaymentType("PREVIOUS_PAGE");
        /// <summary> Блокировать терминал. </summary>
        public static readonly ActionAfterPaymentType BLOCK_PAGE = new ActionAfterPaymentType("BLOCK_PAGE");

        private readonly string __value;
        private readonly string __nameResId;

        private ActionAfterPaymentType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACTIONAFTERPAYMENTTYPE_NAME_" + __value;
        }

        public static ActionAfterPaymentType Parse(string value)
        {
            switch(value)
            {
                case "PREVIOUS_PAGE": return PREVIOUS_PAGE;
                case "BLOCK_PAGE": return BLOCK_PAGE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ActionAfterPaymentType[] VALUES
        {
            get
            {
                return new []
                {
                    PREVIOUS_PAGE, 
                    BLOCK_PAGE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ActionAfterPrintType")]
    [EnumClass]
    public partial class ActionAfterPrintType : LocalizableName<ActionAfterPrintType>
    {
        /// <summary> Оставаться на экране заказа. </summary>
        public static readonly ActionAfterPrintType ORDERPAGE = new ActionAfterPrintType("ORDERPAGE");
        /// <summary> Возвращаться на предыдущий экран (схема зала, по официантам...). </summary>
        public static readonly ActionAfterPrintType PREVIOUSPAGE = new ActionAfterPrintType("PREVIOUSPAGE");
        /// <summary> Блокировать терминал. </summary>
        public static readonly ActionAfterPrintType BLOCKPAGE = new ActionAfterPrintType("BLOCKPAGE");
        /// <summary> Переходить на экран кассы. </summary>
        public static readonly ActionAfterPrintType CASHPAGE = new ActionAfterPrintType("CASHPAGE");

        private readonly string __value;
        private readonly string __nameResId;

        private ActionAfterPrintType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACTIONAFTERPRINTTYPE_NAME_" + __value;
        }

        public static ActionAfterPrintType Parse(string value)
        {
            switch(value)
            {
                case "ORDERPAGE": return ORDERPAGE;
                case "PREVIOUSPAGE": return PREVIOUSPAGE;
                case "BLOCKPAGE": return BLOCKPAGE;
                case "CASHPAGE": return CASHPAGE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ActionAfterPrintType[] VALUES
        {
            get
            {
                return new []
                {
                    ORDERPAGE, 
                    PREVIOUSPAGE, 
                    BLOCKPAGE, 
                    CASHPAGE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("AllergenGroupsFrontDto")]
    public partial class AllergenGroupsFrontDto
    {
        private Dictionary<Guid, HashSet<Guid>> productIdToAllergenGroupIds;


        public Dictionary<Guid, HashSet<Guid>> ProductIdToAllergenGroupIds
        {
            get { return productIdToAllergenGroupIds; }
            set { productIdToAllergenGroupIds = value; }
        }

    }

    [DataClass("AllowableDeviationAction")]
    [EnumClass]
    public partial class AllowableDeviationAction : LocalizableName<AllowableDeviationAction>
    {
        /// <summary> Не предупреждать. </summary>
        public static readonly AllowableDeviationAction NOT_NOTIFY = new AllowableDeviationAction("NOT_NOTIFY");
        /// <summary> Предупреждать. </summary>
        public static readonly AllowableDeviationAction NOTIFY = new AllowableDeviationAction("NOTIFY");
        /// <summary> Запрещать проведение. </summary>
        public static readonly AllowableDeviationAction DISABLE = new AllowableDeviationAction("DISABLE");
        /// <summary> Запрещать проведение, если товар дороже. </summary>
        public static readonly AllowableDeviationAction DISABLE_GREATER = new AllowableDeviationAction("DISABLE_GREATER");

        private readonly string __value;
        private readonly string __nameResId;

        private AllowableDeviationAction(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ALLOWABLEDEVIATIONACTION_NAME_" + __value;
        }

        public static AllowableDeviationAction Parse(string value)
        {
            switch(value)
            {
                case "NOT_NOTIFY": return NOT_NOTIFY;
                case "NOTIFY": return NOTIFY;
                case "DISABLE": return DISABLE;
                case "DISABLE_GREATER": return DISABLE_GREATER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AllowableDeviationAction[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_NOTIFY, 
                    NOTIFY, 
                    DISABLE, 
                    DISABLE_GREATER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("BlockPageType")]
    [EnumClass]
    public partial class BlockPageType : LocalizableName<BlockPageType>
    {
        /// <summary> Стартовая страница. </summary>
        public static readonly BlockPageType LOGIN = new BlockPageType("LOGIN");
        /// <summary> Страница схемы зала. </summary>
        public static readonly BlockPageType SCHEMA = new BlockPageType("SCHEMA");
        /// <summary> Страница всех столов. </summary>
        public static readonly BlockPageType TABLES = new BlockPageType("TABLES");

        private readonly string __value;
        private readonly string __nameResId;

        private BlockPageType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "BLOCKPAGETYPE_NAME_" + __value;
        }

        public static BlockPageType Parse(string value)
        {
            switch(value)
            {
                case "LOGIN": return LOGIN;
                case "SCHEMA": return SCHEMA;
                case "TABLES": return TABLES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static BlockPageType[] VALUES
        {
            get
            {
                return new []
                {
                    LOGIN, 
                    SCHEMA, 
                    TABLES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionInfo")]
    public partial class CafeSessionInfo
    {
        private Guid? sessionId;
        private int number;
        private DateTime? operationDay;
        private DateTime? openDate;
        private DateTime? closeDate;
        private int cashNumber;
        private User manager;

        public CafeSessionInfo() {}

        public CafeSessionInfo(Guid? sessionId, int number, DateTime? operationDay, DateTime? openDate, DateTime? closeDate, int cashNumber, User manager)
        {
            this.sessionId = sessionId;
            this.number = number;
            this.operationDay = operationDay;
            this.openDate = openDate;
            this.closeDate = closeDate;
            this.cashNumber = cashNumber;
            this.manager = manager;
        }
        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public DateTime? OperationDay
        {
            get { return operationDay; }
            set { operationDay = value; }
        }

        public DateTime? OpenDate
        {
            get { return openDate; }
            set { openDate = value; }
        }

        public DateTime? CloseDate
        {
            get { return closeDate; }
            set { closeDate = value; }
        }

        public int CashNumber
        {
            get { return cashNumber; }
            set { cashNumber = value; }
        }

        public User Manager
        {
            get { return manager; }
            set { manager = value; }
        }

    }

    [DataClass("CafeSessionProperties")]
    public partial class CafeSessionProperties : ICafeSession
    {
        private Group group;
        private Guid? id;
        [HasDefaultValue]
        private int? number = 0;

        protected CafeSessionProperties() {}

        public CafeSessionProperties(Group group, Guid? id)
        {
            this.group = group;
            this.id = id;
        }
        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public int? Number
        {
            get { return number; }
            set { number = value; }
        }

    }

    [RootEntity]
    [DataClass("CafeSetup")]
    public partial class CafeSetup : PersistedEntity
    {
        private ChartOfAccounts chartOfAccounts;
        [NotNull, NotNullField]
        private CleanEventsSettings cleanEventsSettings;
        private TerminalsSettings terminalsSettings;
        private PenaltyOrBonusType inventoryShortagePenaltyType;
        private PenaltyOrBonusType deletionOfPrintedItemsPenaltyType;
        [NotNull, NotNullField]
        private ChequePrintSettings chequePrintSettings;
        private BusinessDateSettings businessDateSettings;
        private OperationalDaySettings operationalDaySettings;
        private Export1CMapping export1CMapping;
        private User administrator;
        private Role adminRole;
        private DateTime? periodStartDate;
        private int? periodLengthDays;
        [NotNull, NotNullField]
        private ReservesSettings reservesSettings;
        private SavedImageInfo restoImage;
        private int minimalPinLength;
        [NotNull, NotNullField]
        private ReportOfQualitySettings reportOfQualitySettings;
        private ActionAfterPrintType afterPrecheckTack;
        private ActionAfterPrintType afterPrintTack;
        private ActionAfterPaymentType afterPaymentTack;
        private int prefixBarcodeWeightGoods;
        private int prefixBarcodePieceGoods;
        private int prefixBarcodeServiceCheques;
        [NotNull, NotNullField]
        private DocumentSettings docSettings;
        [HasDefaultValue]
        private bool warnOnNegativeBalances = true;
        [HasDefaultValue]
        private bool stopListIsStrict = false;
        [HasDefaultValue]
        private bool preventOrderEditAfterBill = true;
        [HasDefaultValue]
        private bool doNotAuthorizeBillCancellation = false;
        [HasDefaultValue]
        private bool useForeignNameForMenuAndBills = false;
        private decimal? maximalChequeSum;
        [HasDefaultValue]
        private decimal? minimalChequeSum = 0;
        private decimal? encashmentWarningSum;
        [HasDefaultValue]
        private int maxInitialRealGuestCount = 5;
        private BlockPageType blockPageType;
        private BackupSettings backupSettings;
        [HasDefaultValue]
        private bool compatibilityWithRKeeper = false;
        [HasDefaultValue]
        private bool compatibilityWith1C = true;
        private TaxCategory prepayTaxCategory;
        private ProductItemCategory prepayItemCategory;
        private ProductItemCategory paymentItemCategory;
        [HasDefaultValue]
        private bool closeWindowAfterPrepay = false;
        [HasDefaultValue]
        private bool resetOrdersCounterAfterCafeSessionClose = false;
        [HasDefaultValue]
        private bool throughInputEnabled = false;
        [HasDefaultValue]
        private bool serveDishesAsFastAsPossible = true;
        private CourseDishesCookingMode courseDishesCookingMode;
        [HasDefaultValue]
        private bool autoServeCompletedDishes = true;
        [HasDefaultValue]
        private bool groupKitchenProdutsByCookingPlace = false;
        [HasDefaultValue]
        private bool showFullKitchenProductComment = false;
        [HasDefaultValue]
        private bool orderKitchenModifiersByFastCode = false;
        [HasDefaultValue]
        private int course2PrintToCookingDelayMinutes = 20;
        [HasDefaultValue]
        private int course3PrintToCookingDelayMinutes = 40;
        [HasDefaultValue]
        private int course4PrintToCookingDelayMinutes = 60;
        [HasDefaultValue]
        private int highCourseDelayIntervalMinutes = 20;
        [HasDefaultValue]
        private int dishesOverdueIntervalSeconds = 90;
        [HasDefaultValue]
        private bool notifyWaitersOnCookingComplete = true;
        [NotNull, NotNullField]
        private PbxSettings pbxSettings;
        [NotNull, NotNullField]
        private TapiSettings tapiSettings;
        private DishesSelectionMode dishesSelectionMode;
        [NotNull, NotNullField]
        private OrdermanSettings ordermanSettings;
        [NotNull, NotNullField]
        private WaiterDebtSettings waiterDebtSettings;
        [HasDefaultValue]
        private bool includeNdsInDishPrice = true;
        [HasDefaultValue]
        private bool incomingInvoiceIsInvoiceRequired = false;
        private User systemUser;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, Object> settings = new Dictionary<string, Object>();
        private CafeSessionSettings cafeSessionSetup;
        [HasDefaultValue]
        private bool allowProcessSalesDocumentsThatBringsToNegativeBalances = true;
        [HasDefaultValue]
        private bool requirePrepayConfirmation = true;
        private DeliverySettings deliverySettings;
        [HasDefaultValue]
        private string loginScreenCustomerDisplayText = "";
        [HasDefaultValue]
        private bool shouldPrintServiceChequeOnOrderStorno = false;
        [HasDefaultValue]
        private bool shouldPrintServiceChequeOnPayInPayOut = false;
        [HasDefaultValue]
        private string countryPhoneCode = "7";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<TimePeakInterval> timePeakIntervals = new List<TimePeakInterval>();
        [HasDefaultValue]
        private int beforeTimePeakModeChangeIntervalSeconds = 900;
        [HasDefaultValue]
        private int autoServicePrintDelaySeconds = 0;
        [HasDefaultValue]
        private int kitchenPrintDelaySeconds = 0;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<OverrideTaxCategory> overrideTaxes = new HashSet<OverrideTaxCategory>();
        private OrderTypeFillRequirements orderTypeFillRequirements;
        private InputRequisitesType inputRequisitesType;
        [HasDefaultValue]
        private bool useCashDrawersMapping = false;
        [HasDefaultValue]
        private bool neverConfirmPermission = true;
        private CashFlowCategory defaultCashFlowCategory;
        private CashFlowCategory prepayCashFlowCategory;
        [NotNull, NotNullField]
        private Account prepayReturnAccount;
        [NotNull, NotNullField]
        private Account defaultInvoiceRevenueAccount;
        [NotNull, NotNullField]
        private Account defaultInvoiceAccountTo;
        [HasDefaultValue]
        private bool prepayReturnInAnotherCafeSession = true;
        [HasDefaultValue]
        private bool displayWaiterRevenueByDishes = false;
        [HasDefaultValue]
        private bool employeeSalaryDepartmentsEnabled = true;
        private FractionalProductAmountMode fractionalProductAmountMode;
        [HasDefaultValue]
        private bool closePersonalSessionWithOrdersForbidden = false;
        [HasDefaultValue]
        private bool shouldPrintServiceChequeOnOrderChangeTableOrItems = false;
        [HasDefaultValue]
        private bool editOrderIfFullPrepay = false;
        [HasDefaultValue]
        private bool hideZeroMutexModifiers = false;
        [HasDefaultValue]
        private bool displayRelativeNumberOfModifiers = false;
        [HasDefaultValue]
        private bool printVatInvoice = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CafeSetup() {}

        public CafeSetup(Guid id, ChartOfAccounts chartOfAccounts, CleanEventsSettings cleanEventsSettings, TerminalsSettings terminalsSettings, PenaltyOrBonusType deletionOfPrintedItemsPenaltyType, ChequePrintSettings chequePrintSettings, BusinessDateSettings businessDateSettings, OperationalDaySettings operationalDaySettings, Export1CMapping export1CMapping, User administrator, Role adminRole, DateTime? periodStartDate, int? periodLengthDays, ReservesSettings reservesSettings, SavedImageInfo restoImage, int minimalPinLength, ReportOfQualitySettings reportOfQualitySettings, ActionAfterPrintType afterPrecheckTack, ActionAfterPrintType afterPrintTack, ActionAfterPaymentType afterPaymentTack, int prefixBarcodeWeightGoods, int prefixBarcodePieceGoods, int prefixBarcodeServiceCheques, DocumentSettings docSettings, BlockPageType blockPageType, BackupSettings backupSettings, TaxCategory prepayTaxCategory, ProductItemCategory prepayItemCategory, ProductItemCategory paymentItemCategory, CourseDishesCookingMode courseDishesCookingMode, PbxSettings pbxSettings, TapiSettings tapiSettings, DishesSelectionMode dishesSelectionMode, OrdermanSettings ordermanSettings, WaiterDebtSettings waiterDebtSettings, User systemUser, OrderTypeFillRequirements orderTypeFillRequirements, InputRequisitesType inputRequisitesType, Account prepayReturnAccount, Account defaultInvoiceRevenueAccount, Account defaultInvoiceAccountTo, FractionalProductAmountMode fractionalProductAmountMode)
            : base(id)
        {
            this.chartOfAccounts = chartOfAccounts;
            this.cleanEventsSettings = cleanEventsSettings;
            this.terminalsSettings = terminalsSettings;
            this.deletionOfPrintedItemsPenaltyType = deletionOfPrintedItemsPenaltyType;
            this.chequePrintSettings = chequePrintSettings;
            this.businessDateSettings = businessDateSettings;
            this.operationalDaySettings = operationalDaySettings;
            this.export1CMapping = export1CMapping;
            this.administrator = administrator;
            this.adminRole = adminRole;
            this.periodStartDate = periodStartDate;
            this.periodLengthDays = periodLengthDays;
            this.reservesSettings = reservesSettings;
            this.restoImage = restoImage;
            this.minimalPinLength = minimalPinLength;
            this.reportOfQualitySettings = reportOfQualitySettings;
            this.afterPrecheckTack = afterPrecheckTack;
            this.afterPrintTack = afterPrintTack;
            this.afterPaymentTack = afterPaymentTack;
            this.prefixBarcodeWeightGoods = prefixBarcodeWeightGoods;
            this.prefixBarcodePieceGoods = prefixBarcodePieceGoods;
            this.prefixBarcodeServiceCheques = prefixBarcodeServiceCheques;
            this.docSettings = docSettings;
            this.blockPageType = blockPageType;
            this.backupSettings = backupSettings;
            this.prepayTaxCategory = prepayTaxCategory;
            this.prepayItemCategory = prepayItemCategory;
            this.paymentItemCategory = paymentItemCategory;
            this.courseDishesCookingMode = courseDishesCookingMode;
            this.pbxSettings = pbxSettings;
            this.tapiSettings = tapiSettings;
            this.dishesSelectionMode = dishesSelectionMode;
            this.ordermanSettings = ordermanSettings;
            this.waiterDebtSettings = waiterDebtSettings;
            this.systemUser = systemUser;
            this.orderTypeFillRequirements = orderTypeFillRequirements;
            this.inputRequisitesType = inputRequisitesType;
            this.prepayReturnAccount = prepayReturnAccount;
            this.defaultInvoiceRevenueAccount = defaultInvoiceRevenueAccount;
            this.defaultInvoiceAccountTo = defaultInvoiceAccountTo;
            this.fractionalProductAmountMode = fractionalProductAmountMode;
        }

        public CafeSetup(Guid id, CleanEventsSettings cleanEventsSettings, ChequePrintSettings chequePrintSettings, ReservesSettings reservesSettings, ReportOfQualitySettings reportOfQualitySettings, DocumentSettings docSettings, PbxSettings pbxSettings, TapiSettings tapiSettings, OrdermanSettings ordermanSettings, WaiterDebtSettings waiterDebtSettings, Account prepayReturnAccount, Account defaultInvoiceRevenueAccount, Account defaultInvoiceAccountTo)
            : base(id)
        {
            this.cleanEventsSettings = cleanEventsSettings;
            this.chequePrintSettings = chequePrintSettings;
            this.reservesSettings = reservesSettings;
            this.reportOfQualitySettings = reportOfQualitySettings;
            this.docSettings = docSettings;
            this.pbxSettings = pbxSettings;
            this.tapiSettings = tapiSettings;
            this.ordermanSettings = ordermanSettings;
            this.waiterDebtSettings = waiterDebtSettings;
            this.prepayReturnAccount = prepayReturnAccount;
            this.defaultInvoiceRevenueAccount = defaultInvoiceRevenueAccount;
            this.defaultInvoiceAccountTo = defaultInvoiceAccountTo;
        }

        public ChartOfAccounts ChartOfAccounts
        {
            get { return chartOfAccounts; }
            set { chartOfAccounts = value; }
        }

        [NotNull]
        public CleanEventsSettings CleanEventsSettings
        {
            get { return cleanEventsSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cleanEventsSettings = value;
            }
        }

        public TerminalsSettings TerminalsSettings
        {
            get { return terminalsSettings; }
            set { terminalsSettings = value; }
        }

        [CanBeNull]
        public PenaltyOrBonusType InventoryShortagePenaltyType
        {
            get { return inventoryShortagePenaltyType; }
            set { inventoryShortagePenaltyType = value; }
        }

        public PenaltyOrBonusType DeletionOfPrintedItemsPenaltyType
        {
            get { return deletionOfPrintedItemsPenaltyType; }
            set { deletionOfPrintedItemsPenaltyType = value; }
        }

        [NotNull]
        public ChequePrintSettings ChequePrintSettings
        {
            get { return chequePrintSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  chequePrintSettings = value;
            }
        }

        public BusinessDateSettings BusinessDateSettings
        {
            get { return businessDateSettings; }
            set { businessDateSettings = value; }
        }

        public OperationalDaySettings OperationalDaySettings
        {
            get { return operationalDaySettings; }
            set { operationalDaySettings = value; }
        }

        public Export1CMapping Export1CMapping
        {
            get { return export1CMapping; }
            set { export1CMapping = value; }
        }

        public User Administrator
        {
            get { return administrator; }
            set { administrator = value; }
        }

        public Role AdminRole
        {
            get { return adminRole; }
            set { adminRole = value; }
        }

        public DateTime? PeriodStartDate
        {
            get { return periodStartDate; }
            set { periodStartDate = value; }
        }

        public int? PeriodLengthDays
        {
            get { return periodLengthDays; }
            set { periodLengthDays = value; }
        }

        [NotNull]
        public ReservesSettings ReservesSettings
        {
            get { return reservesSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  reservesSettings = value;
            }
        }

        public SavedImageInfo RestoImage
        {
            get { return restoImage; }
            set { restoImage = value; }
        }

        public int MinimalPinLength
        {
            get { return minimalPinLength; }
            set { minimalPinLength = value; }
        }

        [NotNull]
        public ReportOfQualitySettings ReportOfQualitySettings
        {
            get { return reportOfQualitySettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  reportOfQualitySettings = value;
            }
        }

        public ActionAfterPrintType AfterPrecheckTack
        {
            get { return afterPrecheckTack; }
            set { afterPrecheckTack = value; }
        }

        public ActionAfterPrintType AfterPrintTack
        {
            get { return afterPrintTack; }
            set { afterPrintTack = value; }
        }

        public ActionAfterPaymentType AfterPaymentTack
        {
            get { return afterPaymentTack; }
            set { afterPaymentTack = value; }
        }

        public int PrefixBarcodeWeightGoods
        {
            get { return prefixBarcodeWeightGoods; }
            set { prefixBarcodeWeightGoods = value; }
        }

        public int PrefixBarcodePieceGoods
        {
            get { return prefixBarcodePieceGoods; }
            set { prefixBarcodePieceGoods = value; }
        }

        public int PrefixBarcodeServiceCheques
        {
            get { return prefixBarcodeServiceCheques; }
            set { prefixBarcodeServiceCheques = value; }
        }

        [NotNull]
        public DocumentSettings DocSettings
        {
            get { return docSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  docSettings = value;
            }
        }

        public bool WarnOnNegativeBalances
        {
            get { return warnOnNegativeBalances; }
            set { warnOnNegativeBalances = value; }
        }

        public bool StopListIsStrict
        {
            get { return stopListIsStrict; }
            set { stopListIsStrict = value; }
        }

        public bool PreventOrderEditAfterBill
        {
            get { return preventOrderEditAfterBill; }
            set { preventOrderEditAfterBill = value; }
        }

        public bool DoNotAuthorizeBillCancellation
        {
            get { return doNotAuthorizeBillCancellation; }
            set { doNotAuthorizeBillCancellation = value; }
        }

        public bool UseForeignNameForMenuAndBills
        {
            get { return useForeignNameForMenuAndBills; }
            set { useForeignNameForMenuAndBills = value; }
        }

        public decimal? MaximalChequeSum
        {
            get { return maximalChequeSum; }
            set { maximalChequeSum = value; }
        }

        public decimal? MinimalChequeSum
        {
            get { return minimalChequeSum; }
            set { minimalChequeSum = value; }
        }

        public decimal? EncashmentWarningSum
        {
            get { return encashmentWarningSum; }
            set { encashmentWarningSum = value; }
        }

        public int MaxInitialRealGuestCount
        {
            get { return maxInitialRealGuestCount; }
            set { maxInitialRealGuestCount = value; }
        }

        public BlockPageType BlockPageType
        {
            get { return blockPageType; }
            set { blockPageType = value; }
        }

        public BackupSettings BackupSettings
        {
            get { return backupSettings; }
            set { backupSettings = value; }
        }

        public bool CompatibilityWithRKeeper
        {
            get { return compatibilityWithRKeeper; }
            set { compatibilityWithRKeeper = value; }
        }

        public bool CompatibilityWith1C
        {
            get { return compatibilityWith1C; }
            set { compatibilityWith1C = value; }
        }

        public TaxCategory PrepayTaxCategory
        {
            get { return prepayTaxCategory; }
            set { prepayTaxCategory = value; }
        }

        public ProductItemCategory PrepayItemCategory
        {
            get { return prepayItemCategory; }
            set { prepayItemCategory = value; }
        }

        public ProductItemCategory PaymentItemCategory
        {
            get { return paymentItemCategory; }
            set { paymentItemCategory = value; }
        }

        public bool CloseWindowAfterPrepay
        {
            get { return closeWindowAfterPrepay; }
            set { closeWindowAfterPrepay = value; }
        }

        public bool ResetOrdersCounterAfterCafeSessionClose
        {
            get { return resetOrdersCounterAfterCafeSessionClose; }
            set { resetOrdersCounterAfterCafeSessionClose = value; }
        }

        public bool ThroughInputEnabled
        {
            get { return throughInputEnabled; }
            set { throughInputEnabled = value; }
        }

        public bool ServeDishesAsFastAsPossible
        {
            get { return serveDishesAsFastAsPossible; }
            set { serveDishesAsFastAsPossible = value; }
        }

        public CourseDishesCookingMode CourseDishesCookingMode
        {
            get { return courseDishesCookingMode; }
            set { courseDishesCookingMode = value; }
        }

        public bool AutoServeCompletedDishes
        {
            get { return autoServeCompletedDishes; }
            set { autoServeCompletedDishes = value; }
        }

        public bool GroupKitchenProdutsByCookingPlace
        {
            get { return groupKitchenProdutsByCookingPlace; }
            set { groupKitchenProdutsByCookingPlace = value; }
        }

        public bool ShowFullKitchenProductComment
        {
            get { return showFullKitchenProductComment; }
            set { showFullKitchenProductComment = value; }
        }

        public bool OrderKitchenModifiersByFastCode
        {
            get { return orderKitchenModifiersByFastCode; }
            set { orderKitchenModifiersByFastCode = value; }
        }

        public int Course2PrintToCookingDelayMinutes
        {
            get { return course2PrintToCookingDelayMinutes; }
            set { course2PrintToCookingDelayMinutes = value; }
        }

        public int Course3PrintToCookingDelayMinutes
        {
            get { return course3PrintToCookingDelayMinutes; }
            set { course3PrintToCookingDelayMinutes = value; }
        }

        public int Course4PrintToCookingDelayMinutes
        {
            get { return course4PrintToCookingDelayMinutes; }
            set { course4PrintToCookingDelayMinutes = value; }
        }

        public int HighCourseDelayIntervalMinutes
        {
            get { return highCourseDelayIntervalMinutes; }
            set { highCourseDelayIntervalMinutes = value; }
        }

        public int DishesOverdueIntervalSeconds
        {
            get { return dishesOverdueIntervalSeconds; }
            set { dishesOverdueIntervalSeconds = value; }
        }

        public bool NotifyWaitersOnCookingComplete
        {
            get { return notifyWaitersOnCookingComplete; }
            set { notifyWaitersOnCookingComplete = value; }
        }

        [NotNull]
        public PbxSettings PbxSettings
        {
            get { return pbxSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  pbxSettings = value;
            }
        }

        [NotNull]
        public TapiSettings TapiSettings
        {
            get { return tapiSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  tapiSettings = value;
            }
        }

        public DishesSelectionMode DishesSelectionMode
        {
            get { return dishesSelectionMode; }
            set { dishesSelectionMode = value; }
        }

        [NotNull]
        public OrdermanSettings OrdermanSettings
        {
            get { return ordermanSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  ordermanSettings = value;
            }
        }

        [NotNull]
        public WaiterDebtSettings WaiterDebtSettings
        {
            get { return waiterDebtSettings; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  waiterDebtSettings = value;
            }
        }

        public bool IncludeNdsInDishPrice
        {
            get { return includeNdsInDishPrice; }
            set { includeNdsInDishPrice = value; }
        }

        public bool IncomingInvoiceIsInvoiceRequired
        {
            get { return incomingInvoiceIsInvoiceRequired; }
            set { incomingInvoiceIsInvoiceRequired = value; }
        }

        public User SystemUser
        {
            get { return systemUser; }
            set { systemUser = value; }
        }

        [NotNull]
        public Dictionary<string, Object> Settings
        {
            get { return settings; }
        }

        [CanBeNull]
        public CafeSessionSettings CafeSessionSetup
        {
            get { return cafeSessionSetup; }
            set { cafeSessionSetup = value; }
        }

        public bool AllowProcessSalesDocumentsThatBringsToNegativeBalances
        {
            get { return allowProcessSalesDocumentsThatBringsToNegativeBalances; }
            set { allowProcessSalesDocumentsThatBringsToNegativeBalances = value; }
        }

        public bool RequirePrepayConfirmation
        {
            get { return requirePrepayConfirmation; }
            set { requirePrepayConfirmation = value; }
        }

        [CanBeNull]
        public DeliverySettings DeliverySettings
        {
            get { return deliverySettings; }
            set { deliverySettings = value; }
        }

        public string LoginScreenCustomerDisplayText
        {
            get { return loginScreenCustomerDisplayText; }
            set { loginScreenCustomerDisplayText = value; }
        }

        public bool ShouldPrintServiceChequeOnOrderStorno
        {
            get { return shouldPrintServiceChequeOnOrderStorno; }
            set { shouldPrintServiceChequeOnOrderStorno = value; }
        }

        public bool ShouldPrintServiceChequeOnPayInPayOut
        {
            get { return shouldPrintServiceChequeOnPayInPayOut; }
            set { shouldPrintServiceChequeOnPayInPayOut = value; }
        }

        public string CountryPhoneCode
        {
            get { return countryPhoneCode; }
            set { countryPhoneCode = value; }
        }

        [NotNull]
        public List<TimePeakInterval> TimePeakIntervals
        {
            get { return timePeakIntervals; }
        }

        public int BeforeTimePeakModeChangeIntervalSeconds
        {
            get { return beforeTimePeakModeChangeIntervalSeconds; }
            set { beforeTimePeakModeChangeIntervalSeconds = value; }
        }

        public int AutoServicePrintDelaySeconds
        {
            get { return autoServicePrintDelaySeconds; }
            set { autoServicePrintDelaySeconds = value; }
        }

        public int KitchenPrintDelaySeconds
        {
            get { return kitchenPrintDelaySeconds; }
            set { kitchenPrintDelaySeconds = value; }
        }

        [NotNull]
        public HashSet<OverrideTaxCategory> OverrideTaxes
        {
            get { return overrideTaxes; }
        }

        public OrderTypeFillRequirements OrderTypeFillRequirements
        {
            get { return orderTypeFillRequirements; }
            set { orderTypeFillRequirements = value; }
        }

        public InputRequisitesType InputRequisitesType
        {
            get { return inputRequisitesType; }
            set { inputRequisitesType = value; }
        }

        public bool UseCashDrawersMapping
        {
            get { return useCashDrawersMapping; }
            set { useCashDrawersMapping = value; }
        }

        public bool NeverConfirmPermission
        {
            get { return neverConfirmPermission; }
            set { neverConfirmPermission = value; }
        }

        [CanBeNull]
        public CashFlowCategory DefaultCashFlowCategory
        {
            get { return defaultCashFlowCategory; }
            set { defaultCashFlowCategory = value; }
        }

        [CanBeNull]
        public CashFlowCategory PrepayCashFlowCategory
        {
            get { return prepayCashFlowCategory; }
            set { prepayCashFlowCategory = value; }
        }

        [NotNull]
        public Account PrepayReturnAccount
        {
            get { return prepayReturnAccount; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  prepayReturnAccount = value;
            }
        }

        [NotNull]
        public Account DefaultInvoiceRevenueAccount
        {
            get { return defaultInvoiceRevenueAccount; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  defaultInvoiceRevenueAccount = value;
            }
        }

        [NotNull]
        public Account DefaultInvoiceAccountTo
        {
            get { return defaultInvoiceAccountTo; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  defaultInvoiceAccountTo = value;
            }
        }

        public bool PrepayReturnInAnotherCafeSession
        {
            get { return prepayReturnInAnotherCafeSession; }
            set { prepayReturnInAnotherCafeSession = value; }
        }

        public bool DisplayWaiterRevenueByDishes
        {
            get { return displayWaiterRevenueByDishes; }
            set { displayWaiterRevenueByDishes = value; }
        }

        public bool EmployeeSalaryDepartmentsEnabled
        {
            get { return employeeSalaryDepartmentsEnabled; }
            set { employeeSalaryDepartmentsEnabled = value; }
        }

        public FractionalProductAmountMode FractionalProductAmountMode
        {
            get { return fractionalProductAmountMode; }
            set { fractionalProductAmountMode = value; }
        }

        public bool ClosePersonalSessionWithOrdersForbidden
        {
            get { return closePersonalSessionWithOrdersForbidden; }
            set { closePersonalSessionWithOrdersForbidden = value; }
        }

        public bool ShouldPrintServiceChequeOnOrderChangeTableOrItems
        {
            get { return shouldPrintServiceChequeOnOrderChangeTableOrItems; }
            set { shouldPrintServiceChequeOnOrderChangeTableOrItems = value; }
        }

        public bool EditOrderIfFullPrepay
        {
            get { return editOrderIfFullPrepay; }
            set { editOrderIfFullPrepay = value; }
        }

        public bool HideZeroMutexModifiers
        {
            get { return hideZeroMutexModifiers; }
            set { hideZeroMutexModifiers = value; }
        }

        public bool DisplayRelativeNumberOfModifiers
        {
            get { return displayRelativeNumberOfModifiers; }
            set { displayRelativeNumberOfModifiers = value; }
        }

        public bool PrintVatInvoice
        {
            get { return printVatInvoice; }
            set { printVatInvoice = value; }
        }

    }

    [RootEntity]
    [DataClass("CafeState")]
    public partial class CafeState : PersistedEntity
    {
        private StopList stopList;
        private int nextCustomTransactionNumber;
        private int orderNumberCounter;

        protected CafeState() {}

        public CafeState(Guid id, StopList stopList, int nextCustomTransactionNumber, int orderNumberCounter)
            : base(id)
        {
            this.stopList = stopList;
            this.nextCustomTransactionNumber = nextCustomTransactionNumber;
            this.orderNumberCounter = orderNumberCounter;
        }

        public CafeState(Guid id)
            : base(id)
        {

        }

        public StopList StopList
        {
            get { return stopList; }
            set { stopList = value; }
        }

        public int NextCustomTransactionNumber
        {
            get { return nextCustomTransactionNumber; }
            set { nextCustomTransactionNumber = value; }
        }

        public int OrderNumberCounter
        {
            get { return orderNumberCounter; }
            set { orderNumberCounter = value; }
        }

    }

    [DataClass("ChoiceBinding")]
    public partial class ChoiceBinding : AbstractChoiceBinding
    {
        private int minimumAmount;
        private int maximumAmount;
        [HasDefaultValue]
        private bool hideIfDefaultAmount = false;
        [HasDefaultValue]
        private bool required = false;
        [HasDefaultValue]
        private bool childModifiersHaveMinMaxRestrictions = false;
        [HasDefaultValue]
        private bool splittable = false;
        private List<ChoiceBinding> childModifiers;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ChoiceBinding() {}

        public ChoiceBinding(ProductTreeEntity modifier, int minimumAmount, int maximumAmount)
            : base(modifier)
        {
            this.minimumAmount = minimumAmount;
            this.maximumAmount = maximumAmount;
        }
        public int MinimumAmount
        {
            get { return minimumAmount; }
            set { minimumAmount = value; }
        }

        public int MaximumAmount
        {
            get { return maximumAmount; }
            set { maximumAmount = value; }
        }

        public bool HideIfDefaultAmount
        {
            get { return hideIfDefaultAmount; }
            set { hideIfDefaultAmount = value; }
        }

        public bool Required
        {
            get { return required; }
            set { required = value; }
        }

        public bool ChildModifiersHaveMinMaxRestrictions
        {
            get { return childModifiersHaveMinMaxRestrictions; }
            set { childModifiersHaveMinMaxRestrictions = value; }
        }

        public bool Splittable
        {
            get { return splittable; }
            set { splittable = value; }
        }

        [CanBeNull]
        public List<ChoiceBinding> ChildModifiers
        {
            get { return childModifiers; }
            set { childModifiers = value; }
        }

    }

    [DataClass("ChoiceBindingRedefinition")]
    public partial class ChoiceBindingRedefinition : AbstractChoiceBinding
    {
        private int? minimumAmount;
        private int? maximumAmount;
        private List<ChoiceBindingRedefinition> childModifiers;

        protected ChoiceBindingRedefinition() {}

        public ChoiceBindingRedefinition(ProductTreeEntity modifier)
            : base(modifier)
        {

        }
        public int? MinimumAmount
        {
            get { return minimumAmount; }
            set { minimumAmount = value; }
        }

        public int? MaximumAmount
        {
            get { return maximumAmount; }
            set { maximumAmount = value; }
        }

        [CanBeNull]
        public List<ChoiceBindingRedefinition> ChildModifiers
        {
            get { return childModifiers; }
            set { childModifiers = value; }
        }

    }

    [DataClass("CookingPlaceSource")]
    [EnumClass]
    public partial class CookingPlaceSource : LocalizableName<CookingPlaceSource>
    {
        /// <summary> По столу, на котором открыт заказ. </summary>
        public static readonly CookingPlaceSource SECTION_TABLE = new CookingPlaceSource("SECTION_TABLE");
        /// <summary> По терминалу, с которого редактируется заказ. </summary>
        public static readonly CookingPlaceSource SECTION_TERMINAL = new CookingPlaceSource("SECTION_TERMINAL");

        private readonly string __value;
        private readonly string __nameResId;

        private CookingPlaceSource(string __value)
        {
            this.__value = __value;
            this.__nameResId = "COOKINGPLACESOURCE_NAME_" + __value;
        }

        public static CookingPlaceSource Parse(string value)
        {
            switch(value)
            {
                case "SECTION_TABLE": return SECTION_TABLE;
                case "SECTION_TERMINAL": return SECTION_TERMINAL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CookingPlaceSource[] VALUES
        {
            get
            {
                return new []
                {
                    SECTION_TABLE, 
                    SECTION_TERMINAL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CourseDishesCookingMode")]
    public enum CourseDishesCookingMode
    {
        START_COOKING_AFTER_DELAY,
        FINISH_COOKING_AFTER_DELAY,
        BY_SERVE_CHEQUE
    }

    [DataClass("DeviceType")]
    [EnumClass]
    public partial class DeviceType
    {
        public static readonly DeviceType CASH_REGISTER = new DeviceType("CASH_REGISTER", "CashRegister");
        public static readonly DeviceType PRINTER_DEVICE = new DeviceType("PRINTER_DEVICE", "PrinterDevice");
        public static readonly DeviceType CAMERA_DEVICE = new DeviceType("CAMERA_DEVICE", "CameraDevice");
        public static readonly DeviceType CUSTOMER_DISPLAY = new DeviceType("CUSTOMER_DISPLAY", "CustomerDisplay");
        public static readonly DeviceType CARD_PROCESSING = new DeviceType("CARD_PROCESSING", "CardProcessing");
        public static readonly DeviceType SCALE_DEVICE = new DeviceType("SCALE_DEVICE", "ScaleDevice");
        public static readonly DeviceType CASH_DRAWER_DEVICE = new DeviceType("CASH_DRAWER_DEVICE", "CashDrawerDevice");
        public static readonly DeviceType POWER_DEVICE = new DeviceType("POWER_DEVICE", "PowerDevice");

        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly string deviceTypeName = "";
        private readonly string __value;

        private DeviceType(string __value, string deviceTypeName)
        {
            this.__value = __value;
            this.deviceTypeName = deviceTypeName;
        }

        public static DeviceType Parse(string value)
        {
            switch(value)
            {
                case "CASH_REGISTER": return CASH_REGISTER;
                case "PRINTER_DEVICE": return PRINTER_DEVICE;
                case "CAMERA_DEVICE": return CAMERA_DEVICE;
                case "CUSTOMER_DISPLAY": return CUSTOMER_DISPLAY;
                case "CARD_PROCESSING": return CARD_PROCESSING;
                case "SCALE_DEVICE": return SCALE_DEVICE;
                case "CASH_DRAWER_DEVICE": return CASH_DRAWER_DEVICE;
                case "POWER_DEVICE": return POWER_DEVICE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeviceType[] VALUES
        {
            get
            {
                return new []
                {
                    CASH_REGISTER, 
                    PRINTER_DEVICE, 
                    CAMERA_DEVICE, 
                    CUSTOMER_DISPLAY, 
                    CARD_PROCESSING, 
                    SCALE_DEVICE, 
                    CASH_DRAWER_DEVICE, 
                    POWER_DEVICE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        [NotNull]
        public string DeviceTypeName
        {
            get { return deviceTypeName; }
        }

    }

    [DataClass("DishesSelectionMode")]
    [EnumClass]
    public partial class DishesSelectionMode : LocalizableName<DishesSelectionMode>
    {
        /// <summary> Перевод статуса обычным нажатием. </summary>
        public static readonly DishesSelectionMode SHORT_CLICK_WITH_POPUP = new DishesSelectionMode("SHORT_CLICK_WITH_POPUP");
        /// <summary> Перевод статуса долгим нажатием. </summary>
        public static readonly DishesSelectionMode LONG_CLICK_WITH_POPUP = new DishesSelectionMode("LONG_CLICK_WITH_POPUP");
        /// <summary> Перевод статуса в следующий без открытия окна выбора. </summary>
        public static readonly DishesSelectionMode SHORT_CLICK_NO_POPUP = new DishesSelectionMode("SHORT_CLICK_NO_POPUP");

        private readonly string __value;
        private readonly string __nameResId;

        private DishesSelectionMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DISHESSELECTIONMODE_NAME_" + __value;
        }

        public static DishesSelectionMode Parse(string value)
        {
            switch(value)
            {
                case "SHORT_CLICK_WITH_POPUP": return SHORT_CLICK_WITH_POPUP;
                case "LONG_CLICK_WITH_POPUP": return LONG_CLICK_WITH_POPUP;
                case "SHORT_CLICK_NO_POPUP": return SHORT_CLICK_NO_POPUP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DishesSelectionMode[] VALUES
        {
            get
            {
                return new []
                {
                    SHORT_CLICK_WITH_POPUP, 
                    LONG_CLICK_WITH_POPUP, 
                    SHORT_CLICK_NO_POPUP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DriverType")]
    [EnumClass]
    public partial class DriverType
    {
        public static readonly DriverType CAS_SCALE = new DriverType("CAS_SCALE", "CASScaleDriver");
        public static readonly DriverType MASSA_SCALE = new DriverType("MASSA_SCALE", "MassaScaleDriver");
        public static readonly DriverType SHTRIH_SCALE = new DriverType("SHTRIH_SCALE", "ShtrihScaleDriver");
        public static readonly DriverType SHTRIH_PRINT_SCALE = new DriverType("SHTRIH_PRINT_SCALE", "ShtrihPrintScaleDriver");
        public static readonly DriverType DIGI_SCALE = new DriverType("DIGI_SCALE", "DigiScaleDriver");
        public static readonly DriverType SPARK_CASHREGISTER = new DriverType("SPARK_CASHREGISTER", "SparkDriver");
        public static readonly DriverType SPARK_FN_CASHREGISTER = new DriverType("SPARK_FN_CASHREGISTER", "SparkFnDriver");

        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly string driverTypeName = "";
        private readonly string __value;

        private DriverType(string __value, string driverTypeName)
        {
            this.__value = __value;
            this.driverTypeName = driverTypeName;
        }

        public static DriverType Parse(string value)
        {
            switch(value)
            {
                case "CAS_SCALE": return CAS_SCALE;
                case "MASSA_SCALE": return MASSA_SCALE;
                case "SHTRIH_SCALE": return SHTRIH_SCALE;
                case "SHTRIH_PRINT_SCALE": return SHTRIH_PRINT_SCALE;
                case "DIGI_SCALE": return DIGI_SCALE;
                case "SPARK_CASHREGISTER": return SPARK_CASHREGISTER;
                case "SPARK_FN_CASHREGISTER": return SPARK_FN_CASHREGISTER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DriverType[] VALUES
        {
            get
            {
                return new []
                {
                    CAS_SCALE, 
                    MASSA_SCALE, 
                    SHTRIH_SCALE, 
                    SHTRIH_PRINT_SCALE, 
                    DIGI_SCALE, 
                    SPARK_CASHREGISTER, 
                    SPARK_FN_CASHREGISTER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        [NotNull]
        public string DriverTypeName
        {
            get { return driverTypeName; }
        }

    }

    [DataClass("FractionalProductAmountMode")]
    [EnumClass]
    public partial class FractionalProductAmountMode : LocalizableName<FractionalProductAmountMode>
    {
        /// <summary> Используется. </summary>
        public static readonly FractionalProductAmountMode ALLOWED = new FractionalProductAmountMode("ALLOWED");
        /// <summary> Не используется. </summary>
        public static readonly FractionalProductAmountMode DENIED = new FractionalProductAmountMode("DENIED");
        /// <summary> Только для весовых товаров. </summary>
        public static readonly FractionalProductAmountMode WEIGHT_ONLY = new FractionalProductAmountMode("WEIGHT_ONLY");

        private readonly string __value;
        private readonly string __nameResId;

        private FractionalProductAmountMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "FRACTIONALPRODUCTAMOUNTMODE_NAME_" + __value;
        }

        public static FractionalProductAmountMode Parse(string value)
        {
            switch(value)
            {
                case "ALLOWED": return ALLOWED;
                case "DENIED": return DENIED;
                case "WEIGHT_ONLY": return WEIGHT_ONLY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static FractionalProductAmountMode[] VALUES
        {
            get
            {
                return new []
                {
                    ALLOWED, 
                    DENIED, 
                    WEIGHT_ONLY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("FrontSessionsProperties")]
    public partial class FrontSessionsProperties : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Role, long> maximumSessionDurationForRole = new Dictionary<Role, long>();
        [HasDefaultValue]
        private long maximumSessionDuration = 86400;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public FrontSessionsProperties() {}

        public FrontSessionsProperties(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<Role, long> MaximumSessionDurationForRole
        {
            get { return maximumSessionDurationForRole; }
        }

        public long MaximumSessionDuration
        {
            get { return maximumSessionDuration; }
            set { maximumSessionDuration = value; }
        }

    }

    [DataClass("Gender")]
    [EnumClass]
    public partial class Gender : LocalizableName<Gender>
    {
        /// <summary> Не указан. </summary>
        public static readonly Gender NOT_SPECIFIED = new Gender("NOT_SPECIFIED");
        /// <summary> Мужской. </summary>
        public static readonly Gender MALE = new Gender("MALE");
        /// <summary> Женский. </summary>
        public static readonly Gender FEMALE = new Gender("FEMALE");

        private readonly string __value;
        private readonly string __nameResId;

        private Gender(string __value)
        {
            this.__value = __value;
            this.__nameResId = "GENDER_NAME_" + __value;
        }

        public static Gender Parse(string value)
        {
            switch(value)
            {
                case "NOT_SPECIFIED": return NOT_SPECIFIED;
                case "MALE": return MALE;
                case "FEMALE": return FEMALE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static Gender[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_SPECIFIED, 
                    MALE, 
                    FEMALE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ICafeSession")]
    public partial interface ICafeSession
    {

    }

    [DataClass("InputRequisitesType")]
    [EnumClass]
    public partial class InputRequisitesType : LocalizableName<InputRequisitesType>
    {
        /// <summary> Не требовать. </summary>
        public static readonly InputRequisitesType NOT_REQUIRED = new InputRequisitesType("NOT_REQUIRED");
        /// <summary> Только данные юр. лица. </summary>
        public static readonly InputRequisitesType FILL_ON_ORGANIZATION_DETAILS = new InputRequisitesType("FILL_ON_ORGANIZATION_DETAILS");
        /// <summary> Данные юр.лица и гостя. </summary>
        public static readonly InputRequisitesType FILL_ON_ORGANIZATION_AND_GUEST_DETAILS = new InputRequisitesType("FILL_ON_ORGANIZATION_AND_GUEST_DETAILS");

        private readonly string __value;
        private readonly string __nameResId;

        private InputRequisitesType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "INPUTREQUISITESTYPE_NAME_" + __value;
        }

        public static InputRequisitesType Parse(string value)
        {
            switch(value)
            {
                case "NOT_REQUIRED": return NOT_REQUIRED;
                case "FILL_ON_ORGANIZATION_DETAILS": return FILL_ON_ORGANIZATION_DETAILS;
                case "FILL_ON_ORGANIZATION_AND_GUEST_DETAILS": return FILL_ON_ORGANIZATION_AND_GUEST_DETAILS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static InputRequisitesType[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_REQUIRED, 
                    FILL_ON_ORGANIZATION_DETAILS, 
                    FILL_ON_ORGANIZATION_AND_GUEST_DETAILS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("OrderTypeFillRequirements")]
    [EnumClass]
    public partial class OrderTypeFillRequirements : LocalizableName<OrderTypeFillRequirements>
    {
        /// <summary> Не требовать. </summary>
        public static readonly OrderTypeFillRequirements NOT_REQUIRED = new OrderTypeFillRequirements("NOT_REQUIRED");
        /// <summary> При создании заказа. </summary>
        public static readonly OrderTypeFillRequirements FILL_ON_ORDER_CREATE = new OrderTypeFillRequirements("FILL_ON_ORDER_CREATE");
        /// <summary> При печати на кухню. </summary>
        public static readonly OrderTypeFillRequirements FILL_ON_SERVICE_PRINT = new OrderTypeFillRequirements("FILL_ON_SERVICE_PRINT");
        /// <summary> При пречеке/оплате заказа. </summary>
        public static readonly OrderTypeFillRequirements FILL_ON_PRECHEQUE = new OrderTypeFillRequirements("FILL_ON_PRECHEQUE");

        private readonly string __value;
        private readonly string __nameResId;

        private OrderTypeFillRequirements(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ORDERTYPEFILLREQUIREMENTS_NAME_" + __value;
        }

        public static OrderTypeFillRequirements Parse(string value)
        {
            switch(value)
            {
                case "NOT_REQUIRED": return NOT_REQUIRED;
                case "FILL_ON_ORDER_CREATE": return FILL_ON_ORDER_CREATE;
                case "FILL_ON_SERVICE_PRINT": return FILL_ON_SERVICE_PRINT;
                case "FILL_ON_PRECHEQUE": return FILL_ON_PRECHEQUE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OrderTypeFillRequirements[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_REQUIRED, 
                    FILL_ON_ORDER_CREATE, 
                    FILL_ON_SERVICE_PRINT, 
                    FILL_ON_PRECHEQUE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PassportInfo")]
    public partial class PassportInfo
    {
        private string series;
        private string number;
        private string issuer;
        private DateInfo issueDate;
        private DateInfo validTillDate;

        protected PassportInfo() {}

        public PassportInfo(string series, string number, string issuer, DateInfo issueDate)
        {
            this.series = series;
            this.number = number;
            this.issuer = issuer;
            this.issueDate = issueDate;
        }
        public string Series
        {
            get { return series; }
            set { series = value; }
        }

        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public string Issuer
        {
            get { return issuer; }
            set { issuer = value; }
        }

        public DateInfo IssueDate
        {
            get { return issueDate; }
            set { issueDate = value; }
        }

        [CanBeNull]
        public DateInfo ValidTillDate
        {
            get { return validTillDate; }
            set { validTillDate = value; }
        }

    }

    [DataClass("PreferencesStorage")]
    public partial class PreferencesStorage
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> preferences = new Dictionary<string, string>();
        private string jsVarName;

        protected PreferencesStorage() {}

        public PreferencesStorage(string jsVarName)
        {
            this.jsVarName = jsVarName;
        }
        [NotNull]
        public Dictionary<string, string> Preferences
        {
            get { return preferences; }
        }

        public string JsVarName
        {
            get { return jsVarName; }
            set { jsVarName = value; }
        }

    }

    [DataClass("RecalculateInfo")]
    public partial class RecalculateInfo
    {
        private decimal? realCashRest;
        private decimal? priorCashRest;
        private decimal? finalCashRest;
        private DateTime? date;
        private User author;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AuthData> auths = new List<AuthData>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<User> penaltyUsers = new List<User>();

        protected RecalculateInfo() {}

        public RecalculateInfo(decimal? realCashRest, decimal? priorCashRest, decimal? finalCashRest, DateTime? date, User author)
        {
            this.realCashRest = realCashRest;
            this.priorCashRest = priorCashRest;
            this.finalCashRest = finalCashRest;
            this.date = date;
            this.author = author;
        }
        public decimal? RealCashRest
        {
            get { return realCashRest; }
            set { realCashRest = value; }
        }

        public decimal? PriorCashRest
        {
            get { return priorCashRest; }
            set { priorCashRest = value; }
        }

        public decimal? FinalCashRest
        {
            get { return finalCashRest; }
            set { finalCashRest = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public User Author
        {
            get { return author; }
            set { author = value; }
        }

        [NotNull]
        public List<AuthData> Auths
        {
            get { return auths; }
        }

        [NotNull]
        public List<User> PenaltyUsers
        {
            get { return penaltyUsers; }
        }

    }

    [RootEntity]
    [DataClass("Role")]
    public partial class Role : SimplePermissionOwner
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        [HasDefaultValue]
        private decimal? paymentPerHour = 0;
        [HasDefaultValue]
        private decimal? steadySalary = 0;
        [HasDefaultValue]
        private decimal? advance = 0;
        [HasDefaultValue]
        private string comment = "";
        private RoleScheduleType scheduleType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<User> responsibleUsers = new HashSet<User>();
        private DayTime attendanceOvertime;
        [HasDefaultValue]
        private bool canWorkBySubstitutedCard = true;
        [HasDefaultValue]
        private bool requiresConfirmationForWorkOutOfSchedule = true;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Role() {}

        public Role(Guid id, LocalizableValue name, string code)
            : base(id, name)
        {
            this.code = code;
        }
        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        public decimal? PaymentPerHour
        {
            get { return paymentPerHour; }
            set { paymentPerHour = value; }
        }

        public decimal? SteadySalary
        {
            get { return steadySalary; }
            set { steadySalary = value; }
        }

        public decimal? Advance
        {
            get { return advance; }
            set { advance = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public RoleScheduleType ScheduleType
        {
            get { return scheduleType; }
            set { scheduleType = value; }
        }

        [NotNull]
        public HashSet<User> ResponsibleUsers
        {
            get { return responsibleUsers; }
        }

        [CanBeNull]
        public DayTime AttendanceOvertime
        {
            get { return attendanceOvertime; }
            set { attendanceOvertime = value; }
        }

        public bool CanWorkBySubstitutedCard
        {
            get { return canWorkBySubstitutedCard; }
            set { canWorkBySubstitutedCard = value; }
        }

        public bool RequiresConfirmationForWorkOutOfSchedule
        {
            get { return requiresConfirmationForWorkOutOfSchedule; }
            set { requiresConfirmationForWorkOutOfSchedule = value; }
        }

    }

    [RootEntity]
    [DataClass("ServiceFee")]
    public partial class ServiceFee : LocalizableNamePersistedEntity
    {
        private Account account;
        private ServiceFeeStrategy strategy;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DiscountType, Product> serviceByDiscountType = new Dictionary<DiscountType, Product>();
        [HasDefaultValue]
        private bool system = false;

        protected ServiceFee() {}

        public ServiceFee(Guid id, LocalizableValue name, Account account, ServiceFeeStrategy strategy)
            : base(id, name)
        {
            this.account = account;
            this.strategy = strategy;
        }

        public ServiceFee(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public ServiceFeeStrategy Strategy
        {
            get { return strategy; }
            set { strategy = value; }
        }

        [NotNull]
        public Dictionary<DiscountType, Product> ServiceByDiscountType
        {
            get { return serviceByDiscountType; }
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

    }

    [DataClass("ServiceFeeDiscountType")]
    public partial class ServiceFeeDiscountType : DiscountType
    {
        private bool discount;

        protected ServiceFeeDiscountType() {}

        public ServiceFeeDiscountType(Guid id, LocalizableValue name, LocalizableValue shortName, bool isConformationRequired, DiscountRights rights, bool applyOnlyInPeriod, DiscountPeriod discountPeriod, bool activated, bool discount)
            : base(id, name, shortName, isConformationRequired, rights, applyOnlyInPeriod, discountPeriod, activated)
        {
            this.discount = discount;
        }

        public ServiceFeeDiscountType(Guid id, LocalizableValue name, LocalizableValue shortName)
            : base(id, name, shortName)
        {

        }

        public bool Discount
        {
            get { return discount; }
            set { discount = value; }
        }

    }

    [DataClass("ServiceFeeStrategy")]
    [EnumClass]
    public partial class ServiceFeeStrategy : LocalizableName<ServiceFeeStrategy>
    {
        /// <summary> Округлять в меньшую сторону до целого. </summary>
        public static readonly ServiceFeeStrategy ROUNDING_DOWN = new ServiceFeeStrategy("ROUNDING_DOWN");
        /// <summary> Изменить стоимость заказа исходя из настроек скидки/надбавки. </summary>
        public static readonly ServiceFeeStrategy SERVICE_CHARGE = new ServiceFeeStrategy("SERVICE_CHARGE");
        /// <summary> Округлять цену за единицу в меньшую сторону. </summary>
        public static readonly ServiceFeeStrategy ROUNDING_PRICE_PER_UNIT = new ServiceFeeStrategy("ROUNDING_PRICE_PER_UNIT");

        private readonly string __value;
        private readonly string __nameResId;

        private ServiceFeeStrategy(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SERVICEFEESTRATEGY_NAME_" + __value;
        }

        public static ServiceFeeStrategy Parse(string value)
        {
            switch(value)
            {
                case "ROUNDING_DOWN": return ROUNDING_DOWN;
                case "SERVICE_CHARGE": return SERVICE_CHARGE;
                case "ROUNDING_PRICE_PER_UNIT": return ROUNDING_PRICE_PER_UNIT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ServiceFeeStrategy[] VALUES
        {
            get
            {
                return new []
                {
                    ROUNDING_DOWN, 
                    SERVICE_CHARGE, 
                    ROUNDING_PRICE_PER_UNIT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("SettingsItem")]
    public partial class SettingsItem
    {
        private string description;
        private SettingsItemType type;
        private string name;
        private string friendlyName;
        private string categoryName;

        public SettingsItem() {}

        public SettingsItem(string description, SettingsItemType type, string name, string friendlyName, string categoryName)
        {
            this.description = description;
            this.type = type;
            this.name = name;
            this.friendlyName = friendlyName;
            this.categoryName = categoryName;
        }
        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public SettingsItemType Type
        {
            get { return type; }
            set { type = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string FriendlyName
        {
            get { return friendlyName; }
            set { friendlyName = value; }
        }

        public string CategoryName
        {
            get { return categoryName; }
            set { categoryName = value; }
        }

    }

    [DataClass("SettingsItemType")]
    public enum SettingsItemType
    {
        STRING,
        PASSWORD,
        INTEGER
    }

    [RootEntity]
    [DataClass("StopList")]
    public partial class StopList : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Product> stopSet = new HashSet<Product>();

        protected StopList() {}

        public StopList(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public HashSet<Product> StopSet
        {
            get { return stopSet; }
        }

    }

    [DataClass("SupplierType")]
    [EnumClass]
    public partial class SupplierType : LocalizableName<SupplierType>
    {
        /// <summary> Поставщик. </summary>
        public static readonly SupplierType SUPPLIER = new SupplierType("SUPPLIER");
        /// <summary> Импортер. </summary>
        public static readonly SupplierType IMPORTER = new SupplierType("IMPORTER");
        /// <summary> Производитель. </summary>
        public static readonly SupplierType PRODUCER = new SupplierType("PRODUCER");

        private readonly string __value;
        private readonly string __nameResId;

        private SupplierType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SUPPLIERTYPE_NAME_" + __value;
        }

        public static SupplierType Parse(string value)
        {
            switch(value)
            {
                case "SUPPLIER": return SUPPLIER;
                case "IMPORTER": return IMPORTER;
                case "PRODUCER": return PRODUCER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SupplierType[] VALUES
        {
            get
            {
                return new []
                {
                    SUPPLIER, 
                    IMPORTER, 
                    PRODUCER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("UncompleteRecalculateInfo")]
    public partial class UncompleteRecalculateInfo
    {
        private User user;
        private DateTime? date;
        private decimal? enteredCashRest;
        private decimal? cashRest;

        protected UncompleteRecalculateInfo() {}

        public UncompleteRecalculateInfo(User user, DateTime? date, decimal? enteredCashRest, decimal? cashRest)
        {
            this.user = user;
            this.date = date;
            this.enteredCashRest = enteredCashRest;
            this.cashRest = cashRest;
        }
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public decimal? EnteredCashRest
        {
            get { return enteredCashRest; }
            set { enteredCashRest = value; }
        }

        public decimal? CashRest
        {
            get { return cashRest; }
            set { cashRest = value; }
        }

    }

    [RootEntity]
    [DataClass("User")]
    public partial class User : SimplePermissionOwner
    {
        [HasDefaultValue]
        private bool supplier = false;
        [HasDefaultValue]
        private bool employee = false;
        [HasDefaultValue]
        private bool client = false;
        [HasDefaultValue]
        private bool pluginUser = false;
        [HasDefaultValue]
        private bool system = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string code = "";
        private Role mainRole;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Role> roles = new HashSet<Role>();
        [HasDefaultValue]
        private decimal advance = 0;
        private string pin;
        private Card authCard;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string loginName = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string passwordHash = "";
        private string externalPin;
        private string firstName;
        private string middleName;
        private string lastName;
        private string address;
        private string phone;
        private string cellPhone;
        private PbxAuthorizationSettings pbxAuthorizationSettings;
        private Gender gender;
        private string note;
        private string company;
        private string taxpayerIdNumber;
        private string snils;
        private string accountingReasonCode;
        private string gln;
        private string businessClassificationCode;
        private string economicActivityClassificationCode;
        private string bik;
        private string bank;
        private string bankCity;
        private string settlementAccount;
        private string correspondentAccount;
        private string iban;
        private string swiftBic;
        private string registrationNumber;
        private string legalAddress;
        private string actualAddress;
        private Account bankStatementCorrespondentAccount;
        private CashFlowCategory bankStatementCashFlowCategory;
        private string licenseActivityType;
        private DateTime? hireDate;
        private string hireDocumentNumber;
        private DateInfo activationDate;
        private DateInfo deactivationDate;
        private string blockReason;
        private DateInfo birthday;
        private string email;
        [HasDefaultValue]
        private bool? usePriceList = true;
        private int? paymentDelay;
        private WeekDays paymentWeekday;
        private AllowableDeviationAction deviationAction;
        [HasDefaultValue]
        private bool? allowInvoiceIncomeNotInPriceList = true;
        private DepartmentEntity preferredDepartment;
        private HashSet<DepartmentEntity> assignedToDepartments;
        private HashSet<DepartmentEntity> responsibilityDepartments;
        private JurPerson jurPerson;
        [HasDefaultValue]
        private bool dontAllowOperationsWithoutCard = true;
        private PassportInfo passportInfo;
        [HasDefaultValue]
        private bool representsStore = false;
        [HasDefaultValue]
        private bool representsFranchiseConnectionGroup = false;
        private Guid? representedFranchiseOuterEntityId;
        private FranchiseOuterEntityType representedFranchiseOuterEntityType;
        [Obsolete("Deprecated in Java code")]
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> properties = new Dictionary<string, string>();
        private ClientPriceCategory priceCategory;
        private Conception conception;
        private SavedImageInfo photo;
        private SupplierType supplierType;
        private HashSet<MedicalAnalysis> medicalAnalysis;
        private CookingPlaceType cookWorkPlace;
        [NotNull, NotNullField]
        private EdiSystem ediSystem;
        private DateTime? fireDate;
        private int? eulaLastAcceptedVersion;
        private DateTime? eulaLastAcceptedDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> publicExternalData = new Dictionary<string, string>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public User() {}

        public User(Guid id, LocalizableValue name, Role mainRole, string pin, Card authCard, EdiSystem ediSystem)
            : base(id, name)
        {
            this.mainRole = mainRole;
            this.pin = pin;
            this.authCard = authCard;
            this.ediSystem = ediSystem;
        }

        public User(Guid id, LocalizableValue name, EdiSystem ediSystem)
            : base(id, name)
        {
            this.ediSystem = ediSystem;
        }

        public bool Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        public bool Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public bool Client
        {
            get { return client; }
            set { client = value; }
        }

        public bool PluginUser
        {
            get { return pluginUser; }
            set { pluginUser = value; }
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        [NotNull]
        public string Code
        {
            get { return code; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  code = value;
            }
        }

        public Role MainRole
        {
            get { return mainRole; }
            set { mainRole = value; }
        }

        [NotNull]
        public HashSet<Role> Roles
        {
            get { return roles; }
        }

        public decimal Advance
        {
            get { return advance; }
            set { advance = value; }
        }

        public string Pin
        {
            get { return pin; }
            set { pin = value; }
        }

        public Card AuthCard
        {
            get { return authCard; }
            set { authCard = value; }
        }

        [NotNull]
        public string LoginName
        {
            get { return loginName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  loginName = value;
            }
        }

        [NotNull]
        public string PasswordHash
        {
            get { return passwordHash; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  passwordHash = value;
            }
        }

        [CanBeNull]
        public string ExternalPin
        {
            get { return externalPin; }
            set { externalPin = value; }
        }

        [CanBeNull]
        public string FirstName
        {
            get { return firstName; }
            set { firstName = value; }
        }

        [CanBeNull]
        public string MiddleName
        {
            get { return middleName; }
            set { middleName = value; }
        }

        [CanBeNull]
        public string LastName
        {
            get { return lastName; }
            set { lastName = value; }
        }

        [CanBeNull]
        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        [CanBeNull]
        public string Phone
        {
            get { return phone; }
            set { phone = value; }
        }

        [CanBeNull]
        public string CellPhone
        {
            get { return cellPhone; }
            set { cellPhone = value; }
        }

        [CanBeNull]
        public PbxAuthorizationSettings PbxAuthorizationSettings
        {
            get { return pbxAuthorizationSettings; }
            set { pbxAuthorizationSettings = value; }
        }

        [CanBeNull]
        public Gender Gender
        {
            get { return gender; }
            set { gender = value; }
        }

        [CanBeNull]
        public string Note
        {
            get { return note; }
            set { note = value; }
        }

        [CanBeNull]
        public string Company
        {
            get { return company; }
            set { company = value; }
        }

        [CanBeNull]
        public string TaxpayerIdNumber
        {
            get { return taxpayerIdNumber; }
            set { taxpayerIdNumber = value; }
        }

        [CanBeNull]
        public string Snils
        {
            get { return snils; }
            set { snils = value; }
        }

        [CanBeNull]
        public string AccountingReasonCode
        {
            get { return accountingReasonCode; }
            set { accountingReasonCode = value; }
        }

        [CanBeNull]
        public string Gln
        {
            get { return gln; }
            set { gln = value; }
        }

        [CanBeNull]
        public string BusinessClassificationCode
        {
            get { return businessClassificationCode; }
            set { businessClassificationCode = value; }
        }

        [CanBeNull]
        public string EconomicActivityClassificationCode
        {
            get { return economicActivityClassificationCode; }
            set { economicActivityClassificationCode = value; }
        }

        [CanBeNull]
        public string Bik
        {
            get { return bik; }
            set { bik = value; }
        }

        [CanBeNull]
        public string Bank
        {
            get { return bank; }
            set { bank = value; }
        }

        [CanBeNull]
        public string BankCity
        {
            get { return bankCity; }
            set { bankCity = value; }
        }

        [CanBeNull]
        public string SettlementAccount
        {
            get { return settlementAccount; }
            set { settlementAccount = value; }
        }

        [CanBeNull]
        public string CorrespondentAccount
        {
            get { return correspondentAccount; }
            set { correspondentAccount = value; }
        }

        [CanBeNull]
        public string Iban
        {
            get { return iban; }
            set { iban = value; }
        }

        [CanBeNull]
        public string SwiftBic
        {
            get { return swiftBic; }
            set { swiftBic = value; }
        }

        [CanBeNull]
        public string RegistrationNumber
        {
            get { return registrationNumber; }
            set { registrationNumber = value; }
        }

        [CanBeNull]
        public string LegalAddress
        {
            get { return legalAddress; }
            set { legalAddress = value; }
        }

        [CanBeNull]
        public string ActualAddress
        {
            get { return actualAddress; }
            set { actualAddress = value; }
        }

        [CanBeNull]
        public Account BankStatementCorrespondentAccount
        {
            get { return bankStatementCorrespondentAccount; }
            set { bankStatementCorrespondentAccount = value; }
        }

        [CanBeNull]
        public CashFlowCategory BankStatementCashFlowCategory
        {
            get { return bankStatementCashFlowCategory; }
            set { bankStatementCashFlowCategory = value; }
        }

        [CanBeNull]
        public string LicenseActivityType
        {
            get { return licenseActivityType; }
            set { licenseActivityType = value; }
        }

        public DateTime? HireDate
        {
            get { return hireDate; }
            set { hireDate = value; }
        }

        [CanBeNull]
        public string HireDocumentNumber
        {
            get { return hireDocumentNumber; }
            set { hireDocumentNumber = value; }
        }

        [CanBeNull]
        public DateInfo ActivationDate
        {
            get { return activationDate; }
            set { activationDate = value; }
        }

        [CanBeNull]
        public DateInfo DeactivationDate
        {
            get { return deactivationDate; }
            set { deactivationDate = value; }
        }

        [CanBeNull]
        public string BlockReason
        {
            get { return blockReason; }
            set { blockReason = value; }
        }

        [CanBeNull]
        public DateInfo Birthday
        {
            get { return birthday; }
            set { birthday = value; }
        }

        [CanBeNull]
        public string Email
        {
            get { return email; }
            set { email = value; }
        }

        public bool? UsePriceList
        {
            get { return usePriceList; }
            set { usePriceList = value; }
        }

        public int? PaymentDelay
        {
            get { return paymentDelay; }
            set { paymentDelay = value; }
        }

        [CanBeNull]
        public WeekDays PaymentWeekday
        {
            get { return paymentWeekday; }
            set { paymentWeekday = value; }
        }

        [CanBeNull]
        public AllowableDeviationAction DeviationAction
        {
            get { return deviationAction; }
            set { deviationAction = value; }
        }

        public bool? AllowInvoiceIncomeNotInPriceList
        {
            get { return allowInvoiceIncomeNotInPriceList; }
            set { allowInvoiceIncomeNotInPriceList = value; }
        }

        [CanBeNull]
        public DepartmentEntity PreferredDepartment
        {
            get { return preferredDepartment; }
            set { preferredDepartment = value; }
        }

        public HashSet<DepartmentEntity> AssignedToDepartments
        {
            get { return assignedToDepartments; }
            set { assignedToDepartments = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> ResponsibilityDepartments
        {
            get { return responsibilityDepartments; }
            set { responsibilityDepartments = value; }
        }

        [CanBeNull]
        public JurPerson JurPerson
        {
            get { return jurPerson; }
            set { jurPerson = value; }
        }

        public bool DontAllowOperationsWithoutCard
        {
            get { return dontAllowOperationsWithoutCard; }
            set { dontAllowOperationsWithoutCard = value; }
        }

        [CanBeNull]
        public PassportInfo PassportInfo
        {
            get { return passportInfo; }
            set { passportInfo = value; }
        }

        public bool RepresentsStore
        {
            get { return representsStore; }
            set { representsStore = value; }
        }

        public bool RepresentsFranchiseConnectionGroup
        {
            get { return representsFranchiseConnectionGroup; }
            set { representsFranchiseConnectionGroup = value; }
        }

        public Guid? RepresentedFranchiseOuterEntityId
        {
            get { return representedFranchiseOuterEntityId; }
            set { representedFranchiseOuterEntityId = value; }
        }

        [CanBeNull]
        public FranchiseOuterEntityType RepresentedFranchiseOuterEntityType
        {
            get { return representedFranchiseOuterEntityType; }
            set { representedFranchiseOuterEntityType = value; }
        }

        [Obsolete("Deprecated in Java code")]
        [NotNull]
        public Dictionary<string, string> Properties
        {
            get { return properties; }
        }

        [CanBeNull]
        public ClientPriceCategory PriceCategory
        {
            get { return priceCategory; }
            set { priceCategory = value; }
        }

        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

        [CanBeNull]
        public SavedImageInfo Photo
        {
            get { return photo; }
            set { photo = value; }
        }

        [CanBeNull]
        public SupplierType SupplierType
        {
            get { return supplierType; }
            set { supplierType = value; }
        }

        [CanBeNull]
        public HashSet<MedicalAnalysis> MedicalAnalysis
        {
            get { return medicalAnalysis; }
            set { medicalAnalysis = value; }
        }

        [CanBeNull]
        public CookingPlaceType CookWorkPlace
        {
            get { return cookWorkPlace; }
            set { cookWorkPlace = value; }
        }

        [NotNull]
        public EdiSystem EdiSystem
        {
            get { return ediSystem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  ediSystem = value;
            }
        }

        public DateTime? FireDate
        {
            get { return fireDate; }
            set { fireDate = value; }
        }

        public int? EulaLastAcceptedVersion
        {
            get { return eulaLastAcceptedVersion; }
            set { eulaLastAcceptedVersion = value; }
        }

        public DateTime? EulaLastAcceptedDate
        {
            get { return eulaLastAcceptedDate; }
            set { eulaLastAcceptedDate = value; }
        }

        [NotNull]
        public Dictionary<string, string> PublicExternalData
        {
            get { return publicExternalData; }
        }

    }

    [DataClass("UserValidationInfo")]
    public partial class UserValidationInfo
    {
        private UserValidationType type;
        private string message;

        protected UserValidationInfo() {}

        public UserValidationInfo(UserValidationType type, string message)
        {
            this.type = type;
            this.message = message;
        }
        public UserValidationType Type
        {
            get { return type; }
            set { type = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

    }

    [DataClass("UserValidationType")]
    public enum UserValidationType
    {
        SUCCESS,
        CODE_NOT_UNIQUE_ERROR,
        LOGIN_NOT_UNIQUE_ERROR,
        CARD_NUMBER_NOT_UNIQUE_ERROR,
        PIN_CODE_TOO_SHORT,
        PIN_CODE_NOT_UNIQUE_ERROR,
        PART_OF_PIN_CODE_NOT_UNIQUE_ERROR,
        BIRTHDAY_IN_THE_FUTURE_ERROR,
        USER_NAME_NOT_UNIQUE_ERROR,
        BAD_GLN_FORMAT,
        GLN_NOT_UNIQUE_ERROR,
        EMPLOYEE_MAIN_ROLE_IS_NULL
    }

    [DataClass("UserWithValidationInfo")]
    public partial class UserWithValidationInfo
    {
        private User user;
        private UserValidationInfo validationInfo;


        [CanBeNull]
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        [CanBeNull]
        public UserValidationInfo ValidationInfo
        {
            get { return validationInfo; }
            set { validationInfo = value; }
        }

    }

    [DataClass("WaiterDebtSettings")]
    public partial class WaiterDebtSettings
    {
        private PayInOutType payInType;
        private PayInOutType payOutType;
        private PayInOutType payOutForCourierChangeType;
        [HasDefaultValue]
        private bool needPrintServiceChequeOnPayOut = true;
        [HasDefaultValue]
        private bool isExactSumAllowed = false;
        [HasDefaultValue]
        private bool isGreaterThanDebtSumAllowed = true;
        [HasDefaultValue]
        private bool isWaiterDebtAllowed = false;
        [HasDefaultValue]
        private bool isCourierDebtAllowed = false;
        [HasDefaultValue]
        private bool checkSumDebtForCourier = false;
        [HasDefaultValue]
        private decimal warningThresholdOfDebtSumForCourier = 0;
        [HasDefaultValue]
        private decimal blockingThresholdOfDebtSumForCourier = 0;

        protected WaiterDebtSettings() {}

        public WaiterDebtSettings(PayInOutType payInType, PayInOutType payOutType, PayInOutType payOutForCourierChangeType)
        {
            this.payInType = payInType;
            this.payOutType = payOutType;
            this.payOutForCourierChangeType = payOutForCourierChangeType;
        }
        public PayInOutType PayInType
        {
            get { return payInType; }
            set { payInType = value; }
        }

        public PayInOutType PayOutType
        {
            get { return payOutType; }
            set { payOutType = value; }
        }

        public PayInOutType PayOutForCourierChangeType
        {
            get { return payOutForCourierChangeType; }
            set { payOutForCourierChangeType = value; }
        }

        public bool NeedPrintServiceChequeOnPayOut
        {
            get { return needPrintServiceChequeOnPayOut; }
            set { needPrintServiceChequeOnPayOut = value; }
        }

        public bool IsExactSumAllowed
        {
            get { return isExactSumAllowed; }
            set { isExactSumAllowed = value; }
        }

        public bool IsGreaterThanDebtSumAllowed
        {
            get { return isGreaterThanDebtSumAllowed; }
            set { isGreaterThanDebtSumAllowed = value; }
        }

        public bool IsWaiterDebtAllowed
        {
            get { return isWaiterDebtAllowed; }
            set { isWaiterDebtAllowed = value; }
        }

        public bool IsCourierDebtAllowed
        {
            get { return isCourierDebtAllowed; }
            set { isCourierDebtAllowed = value; }
        }

        public bool CheckSumDebtForCourier
        {
            get { return checkSumDebtForCourier; }
            set { checkSumDebtForCourier = value; }
        }

        public decimal WarningThresholdOfDebtSumForCourier
        {
            get { return warningThresholdOfDebtSumForCourier; }
            set { warningThresholdOfDebtSumForCourier = value; }
        }

        public decimal BlockingThresholdOfDebtSumForCourier
        {
            get { return blockingThresholdOfDebtSumForCourier; }
            set { blockingThresholdOfDebtSumForCourier = value; }
        }

    }

    [DataClass("Address")]
    public partial class Address
    {
        private bool isMainAddress;
        private string line1;
        private string line2;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string house = "";
        private string building;
        private string flat;
        private string entrance;
        private string floor;
        private string doorphone;
        private string additionalInfo;
        [NotNull, NotNullField]
        private Street street;
        private Region region;
        private string externalCartographyId;
        private string index;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Address() {}

        public Address(bool isMainAddress, string line1, string line2, string house, string building, string flat, string entrance, string floor, string doorphone, string additionalInfo, Street street, Region region, string externalCartographyId, string index)
        {
            this.isMainAddress = isMainAddress;
            this.line1 = line1;
            this.line2 = line2;
            this.house = house;
            this.building = building;
            this.flat = flat;
            this.entrance = entrance;
            this.floor = floor;
            this.doorphone = doorphone;
            this.additionalInfo = additionalInfo;
            this.street = street;
            this.region = region;
            this.externalCartographyId = externalCartographyId;
            this.index = index;
        }

        public Address(string house, Street street)
        {
            this.house = house;
            this.street = street;
        }

        public bool IsMainAddress
        {
            get { return isMainAddress; }
            set { isMainAddress = value; }
        }

        public string Line1
        {
            get { return line1; }
            set { line1 = value; }
        }

        public string Line2
        {
            get { return line2; }
            set { line2 = value; }
        }

        [NotNull]
        public string House
        {
            get { return house; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  house = value;
            }
        }

        public string Building
        {
            get { return building; }
            set { building = value; }
        }

        public string Flat
        {
            get { return flat; }
            set { flat = value; }
        }

        public string Entrance
        {
            get { return entrance; }
            set { entrance = value; }
        }

        public string Floor
        {
            get { return floor; }
            set { floor = value; }
        }

        public string Doorphone
        {
            get { return doorphone; }
            set { doorphone = value; }
        }

        public string AdditionalInfo
        {
            get { return additionalInfo; }
            set { additionalInfo = value; }
        }

        [NotNull]
        public Street Street
        {
            get { return street; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  street = value;
            }
        }

        public Region Region
        {
            get { return region; }
            set { region = value; }
        }

        public string ExternalCartographyId
        {
            get { return externalCartographyId; }
            set { externalCartographyId = value; }
        }

        public string Index
        {
            get { return index; }
            set { index = value; }
        }

    }

    [RootEntity]
    [DataClass("City")]
    public partial class City : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private string phoneCodes;
        private string externalId;
        private string additionalInfo;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public City() {}

        public City(Guid id, string name)
            : base(id)
        {
            this.name = name;
        }
        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        [CanBeNull]
        public string PhoneCodes
        {
            get { return phoneCodes; }
            set { phoneCodes = value; }
        }

        [CanBeNull]
        public string ExternalId
        {
            get { return externalId; }
            set { externalId = value; }
        }

        [CanBeNull]
        public string AdditionalInfo
        {
            get { return additionalInfo; }
            set { additionalInfo = value; }
        }

    }

    [DataClass("DeliveryAddress")]
    public partial class DeliveryAddress
    {
        private string line1;
        private string line2;
        private string house;
        private string building;
        private string flat;
        private string entrance;
        private string floor;
        private string doorphone;
        private string additionalInfo;
        private Street street;
        private Region region;
        private string externalCartographyId;
        private string index;

        public DeliveryAddress() {}

        public DeliveryAddress(string line1, string line2, string house, string building, string flat, string entrance, string floor, string doorphone, string additionalInfo, Street street, Region region, string externalCartographyId)
        {
            this.line1 = line1;
            this.line2 = line2;
            this.house = house;
            this.building = building;
            this.flat = flat;
            this.entrance = entrance;
            this.floor = floor;
            this.doorphone = doorphone;
            this.additionalInfo = additionalInfo;
            this.street = street;
            this.region = region;
            this.externalCartographyId = externalCartographyId;
        }
        public string Line1
        {
            get { return line1; }
            set { line1 = value; }
        }

        public string Line2
        {
            get { return line2; }
            set { line2 = value; }
        }

        public string House
        {
            get { return house; }
            set { house = value; }
        }

        public string Building
        {
            get { return building; }
            set { building = value; }
        }

        public string Flat
        {
            get { return flat; }
            set { flat = value; }
        }

        public string Entrance
        {
            get { return entrance; }
            set { entrance = value; }
        }

        public string Floor
        {
            get { return floor; }
            set { floor = value; }
        }

        public string Doorphone
        {
            get { return doorphone; }
            set { doorphone = value; }
        }

        public string AdditionalInfo
        {
            get { return additionalInfo; }
            set { additionalInfo = value; }
        }

        public Street Street
        {
            get { return street; }
            set { street = value; }
        }

        public Region Region
        {
            get { return region; }
            set { region = value; }
        }

        public string ExternalCartographyId
        {
            get { return externalCartographyId; }
            set { externalCartographyId = value; }
        }

        [CanBeNull]
        public string Index
        {
            get { return index; }
            set { index = value; }
        }

    }

    [DataClass("Street")]
    public partial class Street : CachedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [HasDefaultValue]
        private bool deleted = false;
        private City city;
        private string externalId;
        [HasDefaultValue]
        private int revisionPart = 0;
        [HasDefaultValue]
        private long timestamp = 0;
        private Guid? timestampId;

        protected Street() {}

        public Street(Guid id, string name, City city)
            : base(id)
        {
            this.name = name;
            this.city = city;
        }

        public Street(Guid id, string name)
            : base(id)
        {
            this.name = name;
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public City City
        {
            get { return city; }
            set { city = value; }
        }

        [CanBeNull]
        public string ExternalId
        {
            get { return externalId; }
            set { externalId = value; }
        }

        public int RevisionPart
        {
            get { return revisionPart; }
            set { revisionPart = value; }
        }

        public long Timestamp
        {
            get { return timestamp; }
            set { timestamp = value; }
        }

        public Guid? TimestampId
        {
            get { return timestampId; }
            set { timestampId = value; }
        }

    }

    [DataClass("KladrObject")]
    public partial class KladrObject
    {
        private string id;
        private string name;
        private Object zip;
        private string type;
        private string typeShort;
        private string okato;
        private string parentName;
        private string parentType;
        private string parentTypeShort;
        private List<KladrObject> parents;

        public KladrObject() {}

        public KladrObject(string id, string name, Object zip, string type, string typeShort, string okato, string parentName, string parentType, string parentTypeShort)
        {
            this.id = id;
            this.name = name;
            this.zip = zip;
            this.type = type;
            this.typeShort = typeShort;
            this.okato = okato;
            this.parentName = parentName;
            this.parentType = parentType;
            this.parentTypeShort = parentTypeShort;
        }
        public string Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Object Zip
        {
            get { return zip; }
            set { zip = value; }
        }

        public string Type
        {
            get { return type; }
            set { type = value; }
        }

        public string TypeShort
        {
            get { return typeShort; }
            set { typeShort = value; }
        }

        public string Okato
        {
            get { return okato; }
            set { okato = value; }
        }

        public string ParentName
        {
            get { return parentName; }
            set { parentName = value; }
        }

        public string ParentType
        {
            get { return parentType; }
            set { parentType = value; }
        }

        public string ParentTypeShort
        {
            get { return parentTypeShort; }
            set { parentTypeShort = value; }
        }

        public List<KladrObject> Parents
        {
            get { return parents; }
            set { parents = value; }
        }

    }

    [DataClass("KladrSynchronizationResult")]
    public partial class KladrSynchronizationResult
    {
        private bool success;
        private bool? alreadyExistStreets;
        private int? kladrStreetsAmount;
        private int? matchedRmsStreetsAmount;
        private int? deletedRmsStreetsAmount;

        public KladrSynchronizationResult() {}

        public KladrSynchronizationResult(bool success, bool? alreadyExistStreets, int? kladrStreetsAmount, int? matchedRmsStreetsAmount, int? deletedRmsStreetsAmount)
        {
            this.success = success;
            this.alreadyExistStreets = alreadyExistStreets;
            this.kladrStreetsAmount = kladrStreetsAmount;
            this.matchedRmsStreetsAmount = matchedRmsStreetsAmount;
            this.deletedRmsStreetsAmount = deletedRmsStreetsAmount;
        }
        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public bool? AlreadyExistStreets
        {
            get { return alreadyExistStreets; }
            set { alreadyExistStreets = value; }
        }

        public int? KladrStreetsAmount
        {
            get { return kladrStreetsAmount; }
            set { kladrStreetsAmount = value; }
        }

        public int? MatchedRmsStreetsAmount
        {
            get { return matchedRmsStreetsAmount; }
            set { matchedRmsStreetsAmount = value; }
        }

        public int? DeletedRmsStreetsAmount
        {
            get { return deletedRmsStreetsAmount; }
            set { deletedRmsStreetsAmount = value; }
        }

    }

    [DataClass("StreetSearchRequest")]
    public partial class StreetSearchRequest
    {
        private string classifierId;
        private Guid? id;
        private string city;
        private string name;

        protected StreetSearchRequest() {}

        public StreetSearchRequest(string classifierId, Guid? id, string city, string name)
        {
            this.classifierId = classifierId;
            this.id = id;
            this.city = city;
            this.name = name;
        }
        public string ClassifierId
        {
            get { return classifierId; }
            set { classifierId = value; }
        }

        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public string City
        {
            get { return city; }
            set { city = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }

    [DataClass("Announcement")]
    public partial class Announcement : CachedEntity
    {
        [HasDefaultValue]
        private bool deleted = false;
        private DateTime? dateFrom;
        private DateTime? dateTo;
        private AnnouncementProperties properties;
        [HasDefaultValue]
        private string textFormatted = "";
        [HasDefaultValue]
        private string textPlain = "";
        private OperationInfo createdInfo;
        private OperationInfo modifiedInfo;

        protected Announcement() {}

        public Announcement(Guid id, DateTime? dateFrom, DateTime? dateTo, AnnouncementProperties properties, OperationInfo createdInfo)
            : base(id)
        {
            this.dateFrom = dateFrom;
            this.dateTo = dateTo;
            this.properties = properties;
            this.createdInfo = createdInfo;
        }

        public Announcement(Guid id)
            : base(id)
        {

        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public AnnouncementProperties Properties
        {
            get { return properties; }
            set { properties = value; }
        }

        public string TextFormatted
        {
            get { return textFormatted; }
            set { textFormatted = value; }
        }

        public string TextPlain
        {
            get { return textPlain; }
            set { textPlain = value; }
        }

        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("AnnouncementProperties")]
    public partial class AnnouncementProperties
    {
        [HasDefaultValue]
        private int priority = 50;
        [HasDefaultValue]
        private bool replicatable = true;
        [HasDefaultValue]
        private bool visibleInFront = false;
        [HasDefaultValue]
        private bool visibleInOffice = false;
        [HasDefaultValue]
        private bool dateVisible = true;
        private HashSet<DepartmentEntity> departments;
        private HashSet<Role> roles;
        private HashSet<User> users;


        public int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        public bool Replicatable
        {
            get { return replicatable; }
            set { replicatable = value; }
        }

        public bool VisibleInFront
        {
            get { return visibleInFront; }
            set { visibleInFront = value; }
        }

        public bool VisibleInOffice
        {
            get { return visibleInOffice; }
            set { visibleInOffice = value; }
        }

        public bool DateVisible
        {
            get { return dateVisible; }
            set { dateVisible = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

        [CanBeNull]
        public HashSet<Role> Roles
        {
            get { return roles; }
            set { roles = value; }
        }

        [CanBeNull]
        public HashSet<User> Users
        {
            get { return users; }
            set { users = value; }
        }

    }

    [RootEntity]
    [DataClass("AutoAdditionSettings")]
    public partial class AutoAdditionSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<AutoAdditionSettingsItem> items = new List<AutoAdditionSettingsItem>();

        protected AutoAdditionSettings() {}

        public AutoAdditionSettings(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public List<AutoAdditionSettingsItem> Items
        {
            get { return items; }
        }

    }

    [DataClass("AutoAdditionSettingsItem")]
    public partial class AutoAdditionSettingsItem
    {
        [NotNull, NotNullField]
        private Product product;
        [NotNull, NotNullField]
        private AutoAdditionType autoAdditionType;
        [HasDefaultValue]
        private decimal quantity = 0;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Product> initiatorProducts = new HashSet<Product>();
        private bool deleted;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public AutoAdditionSettingsItem() {}

        public AutoAdditionSettingsItem(Product product, AutoAdditionType autoAdditionType, decimal quantity, bool deleted)
        {
            this.product = product;
            this.autoAdditionType = autoAdditionType;
            this.quantity = quantity;
            this.deleted = deleted;
        }
        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        [NotNull]
        public AutoAdditionType AutoAdditionType
        {
            get { return autoAdditionType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  autoAdditionType = value;
            }
        }

        public decimal Quantity
        {
            get { return quantity; }
            set { quantity = value; }
        }

        [NotNull]
        public HashSet<Product> InitiatorProducts
        {
            get { return initiatorProducts; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

    }

    [DataClass("AutoAdditionType")]
    [EnumClass]
    public partial class AutoAdditionType : LocalizableName<AutoAdditionType>
    {
        /// <summary> Для блюд. </summary>
        public static readonly AutoAdditionType PER_PRODUCT = new AutoAdditionType("PER_PRODUCT");
        /// <summary> Для каждой персоны. </summary>
        public static readonly AutoAdditionType PER_PERSON = new AutoAdditionType("PER_PERSON");
        /// <summary> На весь заказ. </summary>
        public static readonly AutoAdditionType FOR_ORDER = new AutoAdditionType("FOR_ORDER");
        /// <summary> Услуга доставки. </summary>
        public static readonly AutoAdditionType BY_ZONE = new AutoAdditionType("BY_ZONE");

        private readonly string __value;
        private readonly string __nameResId;

        private AutoAdditionType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "AUTOADDITIONTYPE_NAME_" + __value;
        }

        public static AutoAdditionType Parse(string value)
        {
            switch(value)
            {
                case "PER_PRODUCT": return PER_PRODUCT;
                case "PER_PERSON": return PER_PERSON;
                case "FOR_ORDER": return FOR_ORDER;
                case "BY_ZONE": return BY_ZONE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static AutoAdditionType[] VALUES
        {
            get
            {
                return new []
                {
                    PER_PRODUCT, 
                    PER_PERSON, 
                    FOR_ORDER, 
                    BY_ZONE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("OuterEconomicActivityNomenclatureCode")]
    public partial class OuterEconomicActivityNomenclatureCode : LocalizableNamePersistedEntity
    {
        private bool isSystem;
        private string outerEanCode;
        private bool isMarked;
        private bool allowSkipMarkScan;

        protected OuterEconomicActivityNomenclatureCode() {}

        public OuterEconomicActivityNomenclatureCode(Guid id, LocalizableValue name, bool isSystem, string outerEanCode, bool isMarked, bool allowSkipMarkScan)
            : base(id, name)
        {
            this.isSystem = isSystem;
            this.outerEanCode = outerEanCode;
            this.isMarked = isMarked;
            this.allowSkipMarkScan = allowSkipMarkScan;
        }

        public OuterEconomicActivityNomenclatureCode(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public bool IsSystem
        {
            get { return isSystem; }
        }

        public string OuterEanCode
        {
            get { return outerEanCode; }
            set { outerEanCode = value; }
        }

        public bool IsMarked
        {
            get { return isMarked; }
            set { isMarked = value; }
        }

        public bool AllowSkipMarkScan
        {
            get { return allowSkipMarkScan; }
            set { allowSkipMarkScan = value; }
        }

    }

    [DataClass("AuthCardInfo")]
    public partial class AuthCardInfo
    {
        private Guid? userId;
        private string hash;
        private string pin;

        protected AuthCardInfo() {}

        public AuthCardInfo(Guid? userId, string hash, string pin)
        {
            this.userId = userId;
            this.hash = hash;
            this.pin = pin;
        }
        public Guid? UserId
        {
            get { return userId; }
            set { userId = value; }
        }

        public string Hash
        {
            get { return hash; }
            set { hash = value; }
        }

        public string Pin
        {
            get { return pin; }
            set { pin = value; }
        }

    }

    [DataClass("AuthData")]
    public partial class AuthData
    {
        private User user;
        private Card card;

        protected AuthData() {}

        public AuthData(User user, Card card)
        {
            this.user = user;
            this.card = card;
        }
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public Card Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [DataClass("Card")]
    public partial class Card
    {
        private string slip;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Card() {}

        public Card(string slip)
        {
            this.slip = slip;
        }
        public string Slip
        {
            get { return slip; }
            set { slip = value; }
        }

    }

    [RootEntity]
    [DataClass("DiscountCard")]
    public partial class DiscountCard : LocalizableNamePersistedEntity
    {
        private DiscountCardType type;
        [NotNull, NotNullField]
        private Card card;
        private ClientPriceCategory priceCategory;

        protected DiscountCard() {}

        public DiscountCard(Guid id, LocalizableValue name, Card card)
            : base(id, name)
        {
            this.card = card;
        }
        [CanBeNull]
        public DiscountCardType Type
        {
            get { return type; }
            set { type = value; }
        }

        [NotNull]
        public Card Card
        {
            get { return card; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  card = value;
            }
        }

        [CanBeNull]
        public ClientPriceCategory PriceCategory
        {
            get { return priceCategory; }
            set { priceCategory = value; }
        }

    }

    [DataClass("DiscountCardMode")]
    [EnumClass]
    public partial class DiscountCardMode : LocalizableName<DiscountCardMode>
    {
        /// <summary> Процент. </summary>
        public static readonly DiscountCardMode PERCENT = new DiscountCardMode("PERCENT");
        /// <summary> Настраиваемая сумма. </summary>
        public static readonly DiscountCardMode FLEXIBLE_SUM = new DiscountCardMode("FLEXIBLE_SUM");
        /// <summary> Фиксированная сумма. </summary>
        public static readonly DiscountCardMode FIXED_SUM = new DiscountCardMode("FIXED_SUM");

        private readonly string __value;
        private readonly string __nameResId;

        private DiscountCardMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DISCOUNTCARDMODE_NAME_" + __value;
        }

        public static DiscountCardMode Parse(string value)
        {
            switch(value)
            {
                case "PERCENT": return PERCENT;
                case "FLEXIBLE_SUM": return FLEXIBLE_SUM;
                case "FIXED_SUM": return FIXED_SUM;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DiscountCardMode[] VALUES
        {
            get
            {
                return new []
                {
                    PERCENT, 
                    FLEXIBLE_SUM, 
                    FIXED_SUM
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DiscountCardType")]
    public partial class DiscountCardType : DiscountType
    {
        [HasDefaultValue]
        private decimal? percent = 0;
        [NotNull, NotNullField]
        private LocalizableValue comment;
        [HasDefaultValue]
        private int numOfPrintedDigits = 4;
        [HasDefaultValue]
        private bool isCategorisedDiscount = false;
        [HasDefaultValue]
        private bool printDetailedInPrecheque = true;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ProductCategory, decimal> categoryToPercent = new Dictionary<ProductCategory, decimal>();
        private int? applicationPriority;
        [HasDefaultValue]
        private bool canBeAppliedSelectively = false;
        private decimal? minOrderSum;
        [NotNull, NotNullField]
        private DiscountCardMode mode;
        [HasDefaultValue]
        private decimal? sum = 0;
        [HasDefaultValue]
        private bool isIikoCard51Discount = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DiscountCardType() {}

        public DiscountCardType(Guid id, LocalizableValue name, LocalizableValue shortName, bool isConformationRequired, DiscountRights rights, bool applyOnlyInPeriod, DiscountPeriod discountPeriod, bool activated, LocalizableValue comment, DiscountCardMode mode)
            : base(id, name, shortName, isConformationRequired, rights, applyOnlyInPeriod, discountPeriod, activated)
        {
            this.comment = comment;
            this.mode = mode;
        }

        public DiscountCardType(Guid id, LocalizableValue name, LocalizableValue shortName, LocalizableValue comment, DiscountCardMode mode)
            : base(id, name, shortName)
        {
            this.comment = comment;
            this.mode = mode;
        }

        public decimal? Percent
        {
            get { return percent; }
            set { percent = value; }
        }

        [NotNull]
        public LocalizableValue Comment
        {
            get { return comment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  comment = value;
            }
        }

        public int NumOfPrintedDigits
        {
            get { return numOfPrintedDigits; }
            set { numOfPrintedDigits = value; }
        }

        public bool IsCategorisedDiscount
        {
            get { return isCategorisedDiscount; }
            set { isCategorisedDiscount = value; }
        }

        public bool PrintDetailedInPrecheque
        {
            get { return printDetailedInPrecheque; }
            set { printDetailedInPrecheque = value; }
        }

        [NotNull]
        public Dictionary<ProductCategory, decimal> CategoryToPercent
        {
            get { return categoryToPercent; }
        }

        public int? ApplicationPriority
        {
            get { return applicationPriority; }
            set { applicationPriority = value; }
        }

        public bool CanBeAppliedSelectively
        {
            get { return canBeAppliedSelectively; }
            set { canBeAppliedSelectively = value; }
        }

        public decimal? MinOrderSum
        {
            get { return minOrderSum; }
            set { minOrderSum = value; }
        }

        [NotNull]
        public DiscountCardMode Mode
        {
            get { return mode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  mode = value;
            }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public bool IsIikoCard51Discount
        {
            get { return isIikoCard51Discount; }
            set { isIikoCard51Discount = value; }
        }

    }

    [DataClass("DiscountCardWay")]
    public enum DiscountCardWay
    {
        NONE,
        DISCOUNT_TYPE,
        PRICE_CATEGORY
    }

    [DataClass("BaseCard")]
    public partial interface BaseCard
    {

    }

    [DataClass("CardOperationOrderItem")]
    public abstract partial class CardOperationOrderItem : ServiceOrderItem
    {
        private PaymentSystem paymentSystem;
        private CardTransaction transaction;
        private Cheque cheque;

        protected CardOperationOrderItem() {}

        protected CardOperationOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest, decimal? price, PaymentSystem paymentSystem, CardTransaction transaction, Cheque cheque)
            : base(id, dish, amount, fixedPrice, delMethod, removalType, status, cookingCourse, delivered, printed, cookingStartTime, guest, price)
        {
            this.paymentSystem = paymentSystem;
            this.transaction = transaction;
            this.cheque = cheque;
        }

        protected CardOperationOrderItem(Guid id)
            : base(id)
        {

        }

        public PaymentSystem PaymentSystem
        {
            get { return paymentSystem; }
            set { paymentSystem = value; }
        }

        public CardTransaction Transaction
        {
            get { return transaction; }
            set { transaction = value; }
        }

        public Cheque Cheque
        {
            get { return cheque; }
            set { cheque = value; }
        }

    }

    [DataClass("CardPaymentItem")]
    public abstract partial class CardPaymentItem : PaymentItem
    {
        private CardTransaction transaction;
        private Cheque cheque;

        protected CardPaymentItem() {}

        protected CardPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo, CardTransaction transaction, Cheque cheque)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {
            this.transaction = transaction;
            this.cheque = cheque;
        }

        protected CardPaymentItem(Guid id)
            : base(id)
        {

        }

        public CardTransaction Transaction
        {
            get { return transaction; }
            set { transaction = value; }
        }

        public Cheque Cheque
        {
            get { return cheque; }
            set { cheque = value; }
        }

    }

    [RootEntity]
    [DataClass("CardProcessingDevice")]
    public partial class CardProcessingDevice : AgentDevice
    {

        protected CardProcessingDevice() {}

        public CardProcessingDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name, agentId, driver)
        {

        }

        public CardProcessingDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

    }

    [DataClass("CardProcessingDriver")]
    public abstract partial class CardProcessingDriver : AgentDriver
    {
        private CardProcessingDevice device;

        public CardProcessingDriver() {}

        protected CardProcessingDriver(CardProcessingDevice device)
        {
            this.device = device;
        }
        public CardProcessingDevice Device
        {
            get { return device; }
            set { device = value; }
        }

    }

    [DataClass("CardProcessingMapping")]
    public partial class CardProcessingMapping : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<PointOfSale, CardProcessingDevice> pointToDevice = new Dictionary<PointOfSale, CardProcessingDevice>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<PointOfSale, Object> pointToSettings = new Dictionary<PointOfSale, Object>();

        protected CardProcessingMapping() {}

        public CardProcessingMapping(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        [NotNull]
        public Dictionary<PointOfSale, CardProcessingDevice> PointToDevice
        {
            get { return pointToDevice; }
        }

        [NotNull]
        public Dictionary<PointOfSale, Object> PointToSettings
        {
            get { return pointToSettings; }
        }

    }

    [DataClass("CardSystemMapping")]
    public partial class CardSystemMapping
    {
        private bool useDefaultPaymentType;
        private PaymentType defaultPaymentType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, PaymentType> paymentTypes = new Dictionary<string, PaymentType>();

        public CardSystemMapping() {}

        public CardSystemMapping(bool useDefaultPaymentType, PaymentType defaultPaymentType)
        {
            this.useDefaultPaymentType = useDefaultPaymentType;
            this.defaultPaymentType = defaultPaymentType;
        }
        public bool UseDefaultPaymentType
        {
            get { return useDefaultPaymentType; }
            set { useDefaultPaymentType = value; }
        }

        public PaymentType DefaultPaymentType
        {
            get { return defaultPaymentType; }
            set { defaultPaymentType = value; }
        }

        [NotNull]
        public Dictionary<string, PaymentType> PaymentTypes
        {
            get { return paymentTypes; }
        }

    }

    [DataClass("CardTransaction")]
    public abstract partial class CardTransaction : RestoEvent, WithAnonymized
    {
        [HasDefaultValue]
        private bool anonymized = false;
        private PaymentSystem paymentSystem;
        private CardTransactionType type;
        private decimal? sum;
        private bool? executed;
        private bool? accepted;
        private bool? verified;
        private Guid? originalTransactionId;
        private Guid? orderId;
        private string externalId;

        protected CardTransaction() {}

        protected CardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId)
            : base(id, department, date)
        {
            this.paymentSystem = paymentSystem;
            this.type = type;
            this.sum = sum;
            this.executed = executed;
            this.accepted = accepted;
            this.verified = verified;
            this.originalTransactionId = originalTransactionId;
        }

        protected CardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public bool Anonymized
        {
            get { return anonymized; }
            set { anonymized = value; }
        }

        public PaymentSystem PaymentSystem
        {
            get { return paymentSystem; }
            set { paymentSystem = value; }
        }

        public CardTransactionType Type
        {
            get { return type; }
            set { type = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public bool? Executed
        {
            get { return executed; }
            set { executed = value; }
        }

        public bool? Accepted
        {
            get { return accepted; }
            set { accepted = value; }
        }

        public bool? Verified
        {
            get { return verified; }
            set { verified = value; }
        }

        public Guid? OriginalTransactionId
        {
            get { return originalTransactionId; }
            set { originalTransactionId = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        [CanBeNull]
        public string ExternalId
        {
            get { return externalId; }
            set { externalId = value; }
        }

    }

    [DataClass("CardTransactionType")]
    public enum CardTransactionType
    {
        ACTIVATION,
        WRITEOFF,
        BLOCK,
        UNBLOCK,
        CANCEL,
        REPLENISHMENT,
        STORNO,
        AUTH,
        CANCELAUTH
    }

    [DataClass("Cheque")]
    public partial interface Cheque
    {

    }

    [DataClass("MagnetTrackData")]
    public partial class MagnetTrackData
    {
        private string track1;
        private string track2;
        private string track3;
        private string secret;

        protected MagnetTrackData() {}

        public MagnetTrackData(string track1, string track2, string track3, string secret)
        {
            this.track1 = track1;
            this.track2 = track2;
            this.track3 = track3;
            this.secret = secret;
        }
        public string Track1
        {
            get { return track1; }
            set { track1 = value; }
        }

        public string Track2
        {
            get { return track2; }
            set { track2 = value; }
        }

        public string Track3
        {
            get { return track3; }
            set { track3 = value; }
        }

        public string Secret
        {
            get { return secret; }
            set { secret = value; }
        }

    }

    [DataClass("OrderBonusEvent")]
    public partial class OrderBonusEvent : RestoEvent
    {
        private OrderPaymentEvent order;
        private decimal? bonus;
        private bool cancelled;
        private string cardNumber;
        private string type;

        protected OrderBonusEvent() {}

        public OrderBonusEvent(Guid id, DepartmentEntity department, DateTime date, OrderPaymentEvent order, decimal? bonus, bool cancelled, string cardNumber)
            : base(id, department, date)
        {
            this.order = order;
            this.bonus = bonus;
            this.cancelled = cancelled;
            this.cardNumber = cardNumber;
        }

        public OrderBonusEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public OrderPaymentEvent Order
        {
            get { return order; }
            set { order = value; }
        }

        public decimal? Bonus
        {
            get { return bonus; }
            set { bonus = value; }
        }

        public bool Cancelled
        {
            get { return cancelled; }
            set { cancelled = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        [CanBeNull]
        public string Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("PlastekOrderItem")]
    public abstract partial class PlastekOrderItem : CardOperationOrderItem
    {

        protected PlastekOrderItem() {}

        protected PlastekOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest, decimal? price, PaymentSystem paymentSystem, CardTransaction transaction, Cheque cheque)
            : base(id, dish, amount, fixedPrice, delMethod, removalType, status, cookingCourse, delivered, printed, cookingStartTime, guest, price, paymentSystem, transaction, cheque)
        {

        }

        protected PlastekOrderItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("EdelweissCard")]
    public partial class EdelweissCard : BaseCard
    {
        private string roomNumber;

        protected EdelweissCard() {}

        public EdelweissCard(string roomNumber)
        {
            this.roomNumber = roomNumber;
        }
        public string RoomNumber
        {
            get { return roomNumber; }
            set { roomNumber = value; }
        }

    }

    [DataClass("EdelweissCardTransaction")]
    public partial class EdelweissCardTransaction : CardTransaction
    {
        private EdelweissCard edelweissCard;
        private DateTime? edelweissOperationTime;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EdelweissCardTransaction() {}

        public EdelweissCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, EdelweissCard edelweissCard, DateTime? edelweissOperationTime)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.edelweissCard = edelweissCard;
            this.edelweissOperationTime = edelweissOperationTime;
        }

        public EdelweissCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public EdelweissCard EdelweissCard
        {
            get { return edelweissCard; }
            set { edelweissCard = value; }
        }

        public DateTime? EdelweissOperationTime
        {
            get { return edelweissOperationTime; }
            set { edelweissOperationTime = value; }
        }

    }

    [DataClass("EdelweissDriver")]
    public partial class EdelweissDriver : CardProcessingDriver
    {
        private EdelweissDriverSettings edelweissDriverSettings;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EdelweissDriver() {}

        public EdelweissDriver(CardProcessingDevice device, EdelweissDriverSettings edelweissDriverSettings)
            : base(device)
        {
            this.edelweissDriverSettings = edelweissDriverSettings;
        }
        public EdelweissDriverSettings EdelweissDriverSettings
        {
            get { return edelweissDriverSettings; }
            set { edelweissDriverSettings = value; }
        }

    }

    [DataClass("EdelweissDriverSettings")]
    public partial class EdelweissDriverSettings
    {
        private string edelServer;
        private string edelDb;
        private string login;
        private string password;
        private bool printSignaturePlace;

        public EdelweissDriverSettings() {}

        public EdelweissDriverSettings(string edelServer, string edelDb, string login, string password, bool printSignaturePlace)
        {
            this.edelServer = edelServer;
            this.edelDb = edelDb;
            this.login = login;
            this.password = password;
            this.printSignaturePlace = printSignaturePlace;
        }
        public string EdelServer
        {
            get { return edelServer; }
            set { edelServer = value; }
        }

        public string EdelDb
        {
            get { return edelDb; }
            set { edelDb = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public bool PrintSignaturePlace
        {
            get { return printSignaturePlace; }
            set { printSignaturePlace = value; }
        }

    }

    [RootEntity]
    [DataClass("EdelweissMapping")]
    public partial class EdelweissMapping : CardProcessingMapping
    {

        protected EdelweissMapping() {}

        public EdelweissMapping(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
    }

    [DataClass("EdelweissTransaction")]
    public partial class EdelweissTransaction
    {
        private EdelweissCard edelweissCard;
        private string terminalID;
        private decimal? sum;
        private DateTime? edelweissOperationTime;

        public EdelweissTransaction() {}

        public EdelweissTransaction(EdelweissCard edelweissCard, string terminalID, decimal? sum, DateTime? edelweissOperationTime)
        {
            this.edelweissCard = edelweissCard;
            this.terminalID = terminalID;
            this.sum = sum;
            this.edelweissOperationTime = edelweissOperationTime;
        }
        public EdelweissCard EdelweissCard
        {
            get { return edelweissCard; }
            set { edelweissCard = value; }
        }

        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public DateTime? EdelweissOperationTime
        {
            get { return edelweissOperationTime; }
            set { edelweissOperationTime = value; }
        }

    }

    [DataClass("EpitomeCard")]
    public partial class EpitomeCard : BaseCard
    {
        private string accountNumber;

        protected EpitomeCard() {}

        public EpitomeCard(string accountNumber)
        {
            this.accountNumber = accountNumber;
        }
        public string AccountNumber
        {
            get { return accountNumber; }
            set { accountNumber = value; }
        }

    }

    [DataClass("EpitomeCardTransaction")]
    public partial class EpitomeCardTransaction : CardTransaction
    {
        private EpitomeCard epitomeCard;
        private DateTime? epitomeOperationTime;
        private string chequeNumber;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EpitomeCardTransaction() {}

        public EpitomeCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, EpitomeCard epitomeCard, DateTime? epitomeOperationTime, string chequeNumber)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.epitomeCard = epitomeCard;
            this.epitomeOperationTime = epitomeOperationTime;
            this.chequeNumber = chequeNumber;
        }

        public EpitomeCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public EpitomeCard EpitomeCard
        {
            get { return epitomeCard; }
            set { epitomeCard = value; }
        }

        public DateTime? EpitomeOperationTime
        {
            get { return epitomeOperationTime; }
            set { epitomeOperationTime = value; }
        }

        public string ChequeNumber
        {
            get { return chequeNumber; }
            set { chequeNumber = value; }
        }

    }

    [DataClass("EpitomeDriver")]
    public partial class EpitomeDriver : CardProcessingDriver
    {
        private EpitomeDriverSettings epitomeDriverSettings;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EpitomeDriver() {}

        public EpitomeDriver(CardProcessingDevice device, EpitomeDriverSettings epitomeDriverSettings)
            : base(device)
        {
            this.epitomeDriverSettings = epitomeDriverSettings;
        }
        public EpitomeDriverSettings EpitomeDriverSettings
        {
            get { return epitomeDriverSettings; }
            set { epitomeDriverSettings = value; }
        }

    }

    [DataClass("EpitomeDriverSettings")]
    public partial class EpitomeDriverSettings
    {
        private string server;
        private string database;
        private bool useWindowsAccount;
        private int timeOut;
        private string login;
        private string password;
        [HasDefaultValue]
        private bool useDatabaseConnection = true;
        [HasDefaultValue]
        private string serverApiUrl = "";
        private List<EpitomeGuestInfoHeaders> headersToShow;
        private bool printSignaturePlace;

        public EpitomeDriverSettings() {}

        public EpitomeDriverSettings(string server, string database, bool useWindowsAccount, int timeOut, string login, string password, bool printSignaturePlace)
        {
            this.server = server;
            this.database = database;
            this.useWindowsAccount = useWindowsAccount;
            this.timeOut = timeOut;
            this.login = login;
            this.password = password;
            this.printSignaturePlace = printSignaturePlace;
        }
        public string Server
        {
            get { return server; }
            set { server = value; }
        }

        public string Database
        {
            get { return database; }
            set { database = value; }
        }

        public bool UseWindowsAccount
        {
            get { return useWindowsAccount; }
            set { useWindowsAccount = value; }
        }

        public int TimeOut
        {
            get { return timeOut; }
            set { timeOut = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public bool UseDatabaseConnection
        {
            get { return useDatabaseConnection; }
            set { useDatabaseConnection = value; }
        }

        public string ServerApiUrl
        {
            get { return serverApiUrl; }
            set { serverApiUrl = value; }
        }

        public List<EpitomeGuestInfoHeaders> HeadersToShow
        {
            get { return headersToShow; }
            set { headersToShow = value; }
        }

        public bool PrintSignaturePlace
        {
            get { return printSignaturePlace; }
            set { printSignaturePlace = value; }
        }

    }

    [DataClass("EpitomeGuestInfoHeaders")]
    public enum EpitomeGuestInfoHeaders
    {
        PROPERTY,
        ROOM_NUMBER,
        GUEST_NAME,
        ACCOUNT_NUMBER,
        BALANCE,
        ARRIVAL,
        DEPARTURE,
        GTD,
        COMPANY,
        VIP,
        CCTYPE,
        CC_EXP
    }

    [RootEntity]
    [DataClass("EpitomeMapping")]
    public partial class EpitomeMapping : CardProcessingMapping
    {

        protected EpitomeMapping() {}

        public EpitomeMapping(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
    }

    [DataClass("EpitomeTransaction")]
    public partial class EpitomeTransaction
    {
        private EpitomeCard epitomeCard;
        private string terminalID;
        private decimal? sum;
        private DateTime? epitomeOperationTime;

        public EpitomeTransaction() {}

        public EpitomeTransaction(EpitomeCard epitomeCard, string terminalID, decimal? sum, DateTime? epitomeOperationTime)
        {
            this.epitomeCard = epitomeCard;
            this.terminalID = terminalID;
            this.sum = sum;
            this.epitomeOperationTime = epitomeOperationTime;
        }
        public EpitomeCard EpitomeCard
        {
            get { return epitomeCard; }
            set { epitomeCard = value; }
        }

        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public DateTime? EpitomeOperationTime
        {
            get { return epitomeOperationTime; }
            set { epitomeOperationTime = value; }
        }

    }

    [DataClass("HoistCard")]
    public partial class HoistCard : BaseCard
    {
        private string roomNumber;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public HoistCard() {}

        public HoistCard(string roomNumber)
        {
            this.roomNumber = roomNumber;
        }
        public string RoomNumber
        {
            get { return roomNumber; }
            set { roomNumber = value; }
        }

    }

    [DataClass("HoistCardTransaction")]
    public partial class HoistCardTransaction : CardTransaction
    {
        private HoistCard hoistCard;
        private DateTime? hoistOperationTime;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public HoistCardTransaction() {}

        public HoistCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, HoistCard hoistCard, DateTime? hoistOperationTime)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.hoistCard = hoistCard;
            this.hoistOperationTime = hoistOperationTime;
        }

        public HoistCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public HoistCard HoistCard
        {
            get { return hoistCard; }
            set { hoistCard = value; }
        }

        public DateTime? HoistOperationTime
        {
            get { return hoistOperationTime; }
            set { hoistOperationTime = value; }
        }

    }

    [DataClass("HoistDriver")]
    public partial class HoistDriver : CardProcessingDriver
    {
        private string hostAddress;
        private int connectTimeoutInMs;
        private string terminalID;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public HoistDriver() {}

        public HoistDriver(CardProcessingDevice device, string hostAddress, int connectTimeoutInMs, string terminalID)
            : base(device)
        {
            this.hostAddress = hostAddress;
            this.connectTimeoutInMs = connectTimeoutInMs;
            this.terminalID = terminalID;
        }
        public string HostAddress
        {
            get { return hostAddress; }
            set { hostAddress = value; }
        }

        public int ConnectTimeoutInMs
        {
            get { return connectTimeoutInMs; }
            set { connectTimeoutInMs = value; }
        }

        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

    }

    [DataClass("HoistInquiryArgs")]
    public partial class HoistInquiryArgs
    {
        private string terminalID;
        private HoistCard hoistCard;
        private DateTime? timestamp;

        protected HoistInquiryArgs() {}

        public HoistInquiryArgs(string terminalID, HoistCard hoistCard, DateTime? timestamp)
        {
            this.terminalID = terminalID;
            this.hoistCard = hoistCard;
            this.timestamp = timestamp;
        }
        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

        public HoistCard HoistCard
        {
            get { return hoistCard; }
            set { hoistCard = value; }
        }

        public DateTime? Timestamp
        {
            get { return timestamp; }
            set { timestamp = value; }
        }

    }

    [DataClass("HoistInquiryResult")]
    public partial class HoistInquiryResult : HoistResultBase
    {
        private DateTime? timestamp;
        private string terminalID;
        private string name;

        protected HoistInquiryResult() {}

        public HoistInquiryResult(bool operationStatus, string operationDescr, string operationDetails, DateTime? timestamp, string terminalID, string name)
            : base(operationStatus, operationDescr, operationDetails)
        {
            this.timestamp = timestamp;
            this.terminalID = terminalID;
            this.name = name;
        }
        public DateTime? Timestamp
        {
            get { return timestamp; }
            set { timestamp = value; }
        }

        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

    }

    [RootEntity]
    [DataClass("HoistMapping")]
    public partial class HoistMapping : CardProcessingMapping
    {

        protected HoistMapping() {}

        public HoistMapping(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
    }

    [DataClass("HoistPaymentItem")]
    public partial class HoistPaymentItem : CardPaymentItem
    {
        private HoistCard card;
        private string terminalID;

        protected HoistPaymentItem() {}

        public HoistPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo, CardTransaction transaction, Cheque cheque, HoistCard card, string terminalID)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo, transaction, cheque)
        {
            this.card = card;
            this.terminalID = terminalID;
        }

        public HoistPaymentItem(Guid id)
            : base(id)
        {

        }

        public HoistCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

    }

    [DataClass("HoistRequestArgs")]
    public partial class HoistRequestArgs
    {
        private HoistCard hoistCard;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<HoistTransaction> transactions = new List<HoistTransaction>();

        protected HoistRequestArgs() {}

        public HoistRequestArgs(HoistCard hoistCard)
        {
            this.hoistCard = hoistCard;
        }
        public HoistCard HoistCard
        {
            get { return hoistCard; }
            set { hoistCard = value; }
        }

        [NotNull]
        public List<HoistTransaction> Transactions
        {
            get { return transactions; }
        }

    }

    [DataClass("HoistRequestResult")]
    public partial class HoistRequestResult : HoistResultBase
    {
        private string terminalID;
        private DateTime? timestamp;
        private decimal? summa;

        protected HoistRequestResult() {}

        public HoistRequestResult(bool operationStatus, string operationDescr, string operationDetails, string terminalID, DateTime? timestamp, decimal? summa)
            : base(operationStatus, operationDescr, operationDetails)
        {
            this.terminalID = terminalID;
            this.timestamp = timestamp;
            this.summa = summa;
        }
        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

        public DateTime? Timestamp
        {
            get { return timestamp; }
            set { timestamp = value; }
        }

        public decimal? Summa
        {
            get { return summa; }
            set { summa = value; }
        }

    }

    [DataClass("HoistResultBase")]
    public abstract partial class HoistResultBase
    {
        private bool operationStatus;
        private string operationDescr;
        private string operationDetails;

        protected HoistResultBase() {}

        protected HoistResultBase(bool operationStatus, string operationDescr, string operationDetails)
        {
            this.operationStatus = operationStatus;
            this.operationDescr = operationDescr;
            this.operationDetails = operationDetails;
        }
        public bool OperationStatus
        {
            get { return operationStatus; }
            set { operationStatus = value; }
        }

        public string OperationDescr
        {
            get { return operationDescr; }
            set { operationDescr = value; }
        }

        public string OperationDetails
        {
            get { return operationDetails; }
            set { operationDetails = value; }
        }

    }

    [DataClass("HoistSettings")]
    public partial class HoistSettings : DeviceSettings
    {

        protected HoistSettings() {}

        public HoistSettings(string javaDevice)
            : base(javaDevice)
        {

        }
    }

    [DataClass("HoistTransaction")]
    public partial class HoistTransaction
    {
        private HoistCard hoistCard;
        private string terminalID;
        private decimal? sum;
        private DateTime? hoistOperationTime;

        public HoistTransaction() {}

        public HoistTransaction(HoistCard hoistCard, string terminalID, decimal? sum, DateTime? hoistOperationTime)
        {
            this.hoistCard = hoistCard;
            this.terminalID = terminalID;
            this.sum = sum;
            this.hoistOperationTime = hoistOperationTime;
        }
        public HoistCard HoistCard
        {
            get { return hoistCard; }
            set { hoistCard = value; }
        }

        public string TerminalID
        {
            get { return terminalID; }
            set { terminalID = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public DateTime? HoistOperationTime
        {
            get { return hoistOperationTime; }
            set { hoistOperationTime = value; }
        }

    }

    [DataClass("HrsCardTransaction")]
    public partial class HrsCardTransaction : CardTransaction
    {
        private string guestName;
        private string guestHrsIdentifier;
        private string roomNumber;

        protected HrsCardTransaction() {}

        public HrsCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, string guestName, string guestHrsIdentifier, string roomNumber)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.guestName = guestName;
            this.guestHrsIdentifier = guestHrsIdentifier;
            this.roomNumber = roomNumber;
        }

        public HrsCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public string GuestName
        {
            get { return guestName; }
            set { guestName = value; }
        }

        public string GuestHrsIdentifier
        {
            get { return guestHrsIdentifier; }
            set { guestHrsIdentifier = value; }
        }

        public string RoomNumber
        {
            get { return roomNumber; }
            set { roomNumber = value; }
        }

    }

    [DataClass("IikoCard5DepartmentSettings")]
    public partial class IikoCard5DepartmentSettings
    {
        private string posServerAddress;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string login = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string password = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<IikoCard5MarketingCampaign> marketingCampaigns = new List<IikoCard5MarketingCampaign>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoCard5DepartmentSettings() {}

        public IikoCard5DepartmentSettings(string login, string password)
        {
            this.login = login;
            this.password = password;
        }
        [CanBeNull]
        public string PosServerAddress
        {
            get { return posServerAddress; }
            set { posServerAddress = value; }
        }

        [NotNull]
        public string Login
        {
            get { return login; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  login = value;
            }
        }

        [NotNull]
        public string Password
        {
            get { return password; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  password = value;
            }
        }

        [NotNull]
        public ICollection<IikoCard5MarketingCampaign> MarketingCampaigns
        {
            get { return marketingCampaigns; }
        }

    }

    [DataClass("IikoCard5MarketingCampaign")]
    public partial class IikoCard5MarketingCampaign
    {
        private Guid id;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private bool isApplicable;

        protected IikoCard5MarketingCampaign() {}

        public IikoCard5MarketingCampaign(Guid id, string name, bool isApplicable)
        {
            this.id = id;
            this.name = name;
            this.isApplicable = isApplicable;
        }

        public IikoCard5MarketingCampaign(Guid id, string name)
        {
            this.id = id;
            this.name = name;
        }

        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public bool IsApplicable
        {
            get { return isApplicable; }
            set { isApplicable = value; }
        }

    }

    [RootEntity]
    [DataClass("IikoCard5Settings")]
    public partial class IikoCard5Settings : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string mainServerAddress = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DepartmentEntity, IikoCard5DepartmentSettings> departmentSpecific = new Dictionary<DepartmentEntity, IikoCard5DepartmentSettings>();
        [NotNull, NotNullField]
        private ExternalApiPaymentType relatedType;
        [NotNull, NotNullField]
        private ExternalApiPaymentType relatedTypeForDiscount;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoCard5Settings() {}

        public IikoCard5Settings(Guid id, string mainServerAddress, ExternalApiPaymentType relatedType, ExternalApiPaymentType relatedTypeForDiscount)
            : base(id)
        {
            this.mainServerAddress = mainServerAddress;
            this.relatedType = relatedType;
            this.relatedTypeForDiscount = relatedTypeForDiscount;
        }
        [NotNull]
        public string MainServerAddress
        {
            get { return mainServerAddress; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  mainServerAddress = value;
            }
        }

        [NotNull]
        public Dictionary<DepartmentEntity, IikoCard5DepartmentSettings> DepartmentSpecific
        {
            get { return departmentSpecific; }
        }

        [NotNull]
        public ExternalApiPaymentType RelatedType
        {
            get { return relatedType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  relatedType = value;
            }
        }

        [NotNull]
        public ExternalApiPaymentType RelatedTypeForDiscount
        {
            get { return relatedTypeForDiscount; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  relatedTypeForDiscount = value;
            }
        }

    }

    [DataClass("IikoCard51DepartmentSettings")]
    public partial class IikoCard51DepartmentSettings
    {
        [NotNull, NotNullField]
        private IikoCard51PosServerLocation posServerLocation;
        private string posServerAddress;
        private string password;
        [HasDefaultValue]
        private long whenPasswordGenerated = 0;
        [HasDefaultValue]
        private bool findFaceEnabled = false;
        private string findFaceAuthorizationToken;
        private decimal? findFaceIdentificationThreshold;
        private string findFaceFolder;
        [HasDefaultValue]
        private bool requireGuestVerification = false;
        [HasDefaultValue]
        private bool requireCreateGuestVerification = false;
        [HasDefaultValue]
        private bool denyAuthorizationOnVerificationFail = false;
        [HasDefaultValue]
        private long whenSettingsUpdated = 0;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoCard51DepartmentSettings() {}

        public IikoCard51DepartmentSettings(IikoCard51PosServerLocation posServerLocation, string posServerAddress, string password)
        {
            this.posServerLocation = posServerLocation;
            this.posServerAddress = posServerAddress;
            this.password = password;
        }

        public IikoCard51DepartmentSettings(IikoCard51PosServerLocation posServerLocation)
        {
            this.posServerLocation = posServerLocation;
        }

        [NotNull]
        public IikoCard51PosServerLocation PosServerLocation
        {
            get { return posServerLocation; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  posServerLocation = value;
            }
        }

        public string PosServerAddress
        {
            get { return posServerAddress; }
            set { posServerAddress = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public long WhenPasswordGenerated
        {
            get { return whenPasswordGenerated; }
            set { whenPasswordGenerated = value; }
        }

        public bool FindFaceEnabled
        {
            get { return findFaceEnabled; }
            set { findFaceEnabled = value; }
        }

        [CanBeNull]
        public string FindFaceAuthorizationToken
        {
            get { return findFaceAuthorizationToken; }
            set { findFaceAuthorizationToken = value; }
        }

        public decimal? FindFaceIdentificationThreshold
        {
            get { return findFaceIdentificationThreshold; }
            set { findFaceIdentificationThreshold = value; }
        }

        [CanBeNull]
        public string FindFaceFolder
        {
            get { return findFaceFolder; }
            set { findFaceFolder = value; }
        }

        public bool RequireGuestVerification
        {
            get { return requireGuestVerification; }
            set { requireGuestVerification = value; }
        }

        public bool RequireCreateGuestVerification
        {
            get { return requireCreateGuestVerification; }
            set { requireCreateGuestVerification = value; }
        }

        public bool DenyAuthorizationOnVerificationFail
        {
            get { return denyAuthorizationOnVerificationFail; }
            set { denyAuthorizationOnVerificationFail = value; }
        }

        public long WhenSettingsUpdated
        {
            get { return whenSettingsUpdated; }
            set { whenSettingsUpdated = value; }
        }

    }

    [DataClass("IikoCard51MarketingCampaign")]
    public partial class IikoCard51MarketingCampaign
    {
        private Guid id;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private string programName;
        private bool isApplicable;
        private bool isCertificate;

        protected IikoCard51MarketingCampaign() {}

        public IikoCard51MarketingCampaign(Guid id, string name, string programName, bool isApplicable, bool isCertificate)
        {
            this.id = id;
            this.name = name;
            this.programName = programName;
            this.isApplicable = isApplicable;
            this.isCertificate = isCertificate;
        }

        public IikoCard51MarketingCampaign(Guid id, string name)
        {
            this.id = id;
            this.name = name;
        }

        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public string ProgramName
        {
            get { return programName; }
            set { programName = value; }
        }

        public bool IsApplicable
        {
            get { return isApplicable; }
            set { isApplicable = value; }
        }

        public bool IsCertificate
        {
            get { return isCertificate; }
            set { isCertificate = value; }
        }

    }

    [DataClass("IikoCard51PosServerLocation")]
    [EnumClass]
    public partial class IikoCard51PosServerLocation : LocalizableName<IikoCard51PosServerLocation>
    {
        /// <summary> На главной кассе. </summary>
        public static readonly IikoCard51PosServerLocation MAIN_CASH_REGISTER = new IikoCard51PosServerLocation("MAIN_CASH_REGISTER");
        /// <summary> На сервере. </summary>
        public static readonly IikoCard51PosServerLocation SERVER = new IikoCard51PosServerLocation("SERVER");
        /// <summary> Ввести адрес вручную. </summary>
        public static readonly IikoCard51PosServerLocation MANUAL = new IikoCard51PosServerLocation("MANUAL");

        private readonly string __value;
        private readonly string __nameResId;

        private IikoCard51PosServerLocation(string __value)
        {
            this.__value = __value;
            this.__nameResId = "IIKOCARD51POSSERVERLOCATION_NAME_" + __value;
        }

        public static IikoCard51PosServerLocation Parse(string value)
        {
            switch(value)
            {
                case "MAIN_CASH_REGISTER": return MAIN_CASH_REGISTER;
                case "SERVER": return SERVER;
                case "MANUAL": return MANUAL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static IikoCard51PosServerLocation[] VALUES
        {
            get
            {
                return new []
                {
                    MAIN_CASH_REGISTER, 
                    SERVER, 
                    MANUAL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("IikoCard51Settings")]
    public partial class IikoCard51Settings : PersistedEntity
    {
        [HasDefaultValue]
        private bool enabled = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string mainServerAddress = "";
        private bool useDefaultMqCredentials;
        [Obsolete("Deprecated in Java code")]
        private Guid? relatedType;
        private string mqHost;
        private int? mqPort;
        private string mqProtocol;
        private string mqLogin;
        private string mqPassword;
        [NotNull, NotNullField]
        private IikoCard51PosServerLocation posServerLocationCallCenter;
        private string posServerAddressCallCenter;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DepartmentEntity, IikoCard51DepartmentSettings> departmentSpecific = new Dictionary<DepartmentEntity, IikoCard51DepartmentSettings>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, ICollection<IikoCard51MarketingCampaign>> marketingCampaigns = new Dictionary<Guid, ICollection<IikoCard51MarketingCampaign>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<IikoCard51MarketingCampaign, DiscountCardType> discountsMapping = new Dictionary<IikoCard51MarketingCampaign, DiscountCardType>();

        protected IikoCard51Settings() {}

        public IikoCard51Settings(Guid id, string mainServerAddress, bool useDefaultMqCredentials, Guid? relatedType, string mqHost, int? mqPort, string mqProtocol, string mqLogin, string mqPassword, IikoCard51PosServerLocation posServerLocationCallCenter, string posServerAddressCallCenter)
            : base(id)
        {
            this.mainServerAddress = mainServerAddress;
            this.useDefaultMqCredentials = useDefaultMqCredentials;
            this.relatedType = relatedType;
            this.mqHost = mqHost;
            this.mqPort = mqPort;
            this.mqProtocol = mqProtocol;
            this.mqLogin = mqLogin;
            this.mqPassword = mqPassword;
            this.posServerLocationCallCenter = posServerLocationCallCenter;
            this.posServerAddressCallCenter = posServerAddressCallCenter;
        }

        public IikoCard51Settings(Guid id, string mainServerAddress, bool useDefaultMqCredentials, IikoCard51PosServerLocation posServerLocationCallCenter)
            : base(id)
        {
            this.mainServerAddress = mainServerAddress;
            this.useDefaultMqCredentials = useDefaultMqCredentials;
            this.posServerLocationCallCenter = posServerLocationCallCenter;
        }

        public bool Enabled
        {
            get { return enabled; }
            set { enabled = value; }
        }

        [NotNull]
        public string MainServerAddress
        {
            get { return mainServerAddress; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  mainServerAddress = value;
            }
        }

        public bool UseDefaultMqCredentials
        {
            get { return useDefaultMqCredentials; }
            set { useDefaultMqCredentials = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public Guid? RelatedType
        {
            get { return relatedType; }
            set { relatedType = value; }
        }

        public string MqHost
        {
            get { return mqHost; }
            set { mqHost = value; }
        }

        public int? MqPort
        {
            get { return mqPort; }
            set { mqPort = value; }
        }

        public string MqProtocol
        {
            get { return mqProtocol; }
            set { mqProtocol = value; }
        }

        public string MqLogin
        {
            get { return mqLogin; }
            set { mqLogin = value; }
        }

        public string MqPassword
        {
            get { return mqPassword; }
            set { mqPassword = value; }
        }

        [NotNull]
        public IikoCard51PosServerLocation PosServerLocationCallCenter
        {
            get { return posServerLocationCallCenter; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  posServerLocationCallCenter = value;
            }
        }

        public string PosServerAddressCallCenter
        {
            get { return posServerAddressCallCenter; }
            set { posServerAddressCallCenter = value; }
        }

        [NotNull]
        public Dictionary<DepartmentEntity, IikoCard51DepartmentSettings> DepartmentSpecific
        {
            get { return departmentSpecific; }
        }

        [NotNull]
        public Dictionary<Guid, ICollection<IikoCard51MarketingCampaign>> MarketingCampaigns
        {
            get { return marketingCampaigns; }
        }

        [NotNull]
        public Dictionary<IikoCard51MarketingCampaign, DiscountCardType> DiscountsMapping
        {
            get { return discountsMapping; }
        }

    }

    [DataClass("IikoCard51Transaction")]
    public partial class IikoCard51Transaction : CardTransaction
    {
        private string credential;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoCard51Transaction() {}

        public IikoCard51Transaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, string credential)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.credential = credential;
        }

        public IikoCard51Transaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public string Credential
        {
            get { return credential; }
            set { credential = value; }
        }

    }

    [DataClass("IikoNetDepartmentSettings")]
    public partial class IikoNetDepartmentSettings
    {
        private string iikoNetPosServerAddress;
        [HasDefaultValue]
        private bool shouldUsePos = true;
        private string iikoNetId;
        private string password;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoNetDepartmentSettings() {}

        public IikoNetDepartmentSettings(string iikoNetId, string password)
        {
            this.iikoNetId = iikoNetId;
            this.password = password;
        }
        [CanBeNull]
        public string IikoNetPosServerAddress
        {
            get { return iikoNetPosServerAddress; }
            set { iikoNetPosServerAddress = value; }
        }

        public bool ShouldUsePos
        {
            get { return shouldUsePos; }
            set { shouldUsePos = value; }
        }

        public string IikoNetId
        {
            get { return iikoNetId; }
            set { iikoNetId = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

    }

    [RootEntity]
    [DataClass("IikoNetSettings")]
    public partial class IikoNetSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string iikoNetServiceAddress = "";
        [Obsolete("Deprecated in Java code")]
        private string iikoNetPosServerAddress;
        [Obsolete("Deprecated in Java code")]
        [HasDefaultValue]
        private bool shouldUsePos = true;
        [Obsolete("Deprecated in Java code")]
        private string iikoNetId;
        [Obsolete("Deprecated in Java code")]
        private string password;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DepartmentEntity, IikoNetDepartmentSettings> departmentSpecific = new Dictionary<DepartmentEntity, IikoNetDepartmentSettings>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<PaymentType> applicablePaymentTypes = new HashSet<PaymentType>();
        [HasDefaultValue]
        private bool combineWithOtherBonuses = true;
        [Obsolete("Deprecated in Java code")]
        [HasDefaultValue]
        private bool applyBonusIfDiscountApplied = true;
        private NonCashPaymentType relatedType;

        protected IikoNetSettings() {}

        public IikoNetSettings(Guid id, string iikoNetServiceAddress, string iikoNetId, string password)
            : base(id)
        {
            this.iikoNetServiceAddress = iikoNetServiceAddress;
            this.iikoNetId = iikoNetId;
            this.password = password;
        }

        public IikoNetSettings(Guid id, string iikoNetServiceAddress)
            : base(id)
        {
            this.iikoNetServiceAddress = iikoNetServiceAddress;
        }

        [NotNull]
        public string IikoNetServiceAddress
        {
            get { return iikoNetServiceAddress; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  iikoNetServiceAddress = value;
            }
        }

        [Obsolete("Deprecated in Java code")]
        [CanBeNull]
        public string IikoNetPosServerAddress
        {
            get { return iikoNetPosServerAddress; }
            set { iikoNetPosServerAddress = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public bool ShouldUsePos
        {
            get { return shouldUsePos; }
            set { shouldUsePos = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public string IikoNetId
        {
            get { return iikoNetId; }
            set { iikoNetId = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        [NotNull]
        public Dictionary<DepartmentEntity, IikoNetDepartmentSettings> DepartmentSpecific
        {
            get { return departmentSpecific; }
        }

        [NotNull]
        public HashSet<PaymentType> ApplicablePaymentTypes
        {
            get { return applicablePaymentTypes; }
        }

        public bool CombineWithOtherBonuses
        {
            get { return combineWithOtherBonuses; }
            set { combineWithOtherBonuses = value; }
        }

        [Obsolete("Deprecated in Java code")]
        public bool ApplyBonusIfDiscountApplied
        {
            get { return applyBonusIfDiscountApplied; }
            set { applyBonusIfDiscountApplied = value; }
        }

        [CanBeNull]
        public NonCashPaymentType RelatedType
        {
            get { return relatedType; }
            set { relatedType = value; }
        }

    }

    [DataClass("IikoNetTransaction")]
    public partial class IikoNetTransaction : CardTransaction
    {
        private string cardExternalId;
        private Guid? operationId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoNetTransaction() {}

        public IikoNetTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, string cardExternalId, Guid? operationId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.cardExternalId = cardExternalId;
            this.operationId = operationId;
        }

        public IikoNetTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public string CardExternalId
        {
            get { return cardExternalId; }
            set { cardExternalId = value; }
        }

        public Guid? OperationId
        {
            get { return operationId; }
            set { operationId = value; }
        }

    }

    [DataClass("JettonCard")]
    public partial class JettonCard : BaseCard
    {
        private string externalId;

        protected JettonCard() {}

        public JettonCard(string externalId)
        {
            this.externalId = externalId;
        }
        public string ExternalId
        {
            get { return externalId; }
            set { externalId = value; }
        }

    }

    [DataClass("JettonCardTransaction")]
    public partial class JettonCardTransaction : CardTransaction
    {
        private JettonCard jettonCard;
        private DateTime? jettonOperationTime;
        private Guid? jettonTransactionId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public JettonCardTransaction() {}

        public JettonCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, JettonCard jettonCard, DateTime? jettonOperationTime, Guid? jettonTransactionId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.jettonCard = jettonCard;
            this.jettonOperationTime = jettonOperationTime;
            this.jettonTransactionId = jettonTransactionId;
        }

        public JettonCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public JettonCard JettonCard
        {
            get { return jettonCard; }
            set { jettonCard = value; }
        }

        public DateTime? JettonOperationTime
        {
            get { return jettonOperationTime; }
            set { jettonOperationTime = value; }
        }

        public Guid? JettonTransactionId
        {
            get { return jettonTransactionId; }
            set { jettonTransactionId = value; }
        }

    }

    [DataClass("PetrolPlusCardTransaction")]
    public partial class PetrolPlusCardTransaction : CardTransaction
    {

        protected PetrolPlusCardTransaction() {}

        public PetrolPlusCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {

        }

        public PetrolPlusCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

    }

    [DataClass("PlastekActivateBonusResult")]
    public partial class PlastekActivateBonusResult : PlastekOperationTaskResult
    {
        private decimal? sum;
        private decimal? balance;
        private decimal? bonusPercent;
        private decimal? bonus;

        protected PlastekActivateBonusResult() {}

        public PlastekActivateBonusResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? sum, decimal? balance, decimal? bonusPercent, decimal? bonus)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.sum = sum;
            this.balance = balance;
            this.bonusPercent = bonusPercent;
            this.bonus = bonus;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? BonusPercent
        {
            get { return bonusPercent; }
            set { bonusPercent = value; }
        }

        public decimal? Bonus
        {
            get { return bonus; }
            set { bonus = value; }
        }

    }

    [DataClass("PlastekActivateBonusTask")]
    public partial class PlastekActivateBonusTask : PlastekTask
    {
        private PlastekCard card;
        private decimal? sum;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekActivateBonusTask() {}

        public PlastekActivateBonusTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, decimal? sum)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.sum = sum;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PlastekActivateCardResult")]
    public partial class PlastekActivateCardResult : PlastekOperationTaskResult
    {
        private decimal? sum;
        private decimal? balance;

        protected PlastekActivateCardResult() {}

        public PlastekActivateCardResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? sum, decimal? balance)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.sum = sum;
            this.balance = balance;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

    }

    [DataClass("PlastekActivateCardTask")]
    public partial class PlastekActivateCardTask : PlastekTask
    {
        private PlastekCard card;
        private decimal? sum;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekActivateCardTask() {}

        public PlastekActivateCardTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, decimal? sum)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.sum = sum;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PlastekActivationOrderItem")]
    public partial class PlastekActivationOrderItem : PlastekOrderItem
    {
        private PlastekCard card;

        protected PlastekActivationOrderItem() {}

        public PlastekActivationOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest, decimal? price, PaymentSystem paymentSystem, CardTransaction transaction, Cheque cheque, PlastekCard card)
            : base(id, dish, amount, fixedPrice, delMethod, removalType, status, cookingCourse, delivered, printed, cookingStartTime, guest, price, paymentSystem, transaction, cheque)
        {
            this.card = card;
        }

        public PlastekActivationOrderItem(Guid id)
            : base(id)
        {

        }

        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [DataClass("PlastekAuthorizationResult")]
    public partial class PlastekAuthorizationResult : PlastekOperationTaskResult
    {
        private decimal? balance;
        private int authId;

        protected PlastekAuthorizationResult() {}

        public PlastekAuthorizationResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? balance, int authId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.balance = balance;
            this.authId = authId;
        }
        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public int AuthId
        {
            get { return authId; }
            set { authId = value; }
        }

    }

    [DataClass("PlastekAuthorizationTask")]
    public partial class PlastekAuthorizationTask : PlastekTask
    {
        private string cardNumber;
        private decimal? sum;
        private decimal? sumAdd;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekAuthorizationTask() {}

        public PlastekAuthorizationTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string cardNumber, decimal? sum, decimal? sumAdd)
            : base(success, id, deviceId, terminalSettings)
        {
            this.cardNumber = cardNumber;
            this.sum = sum;
            this.sumAdd = sumAdd;
        }
        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumAdd
        {
            get { return sumAdd; }
            set { sumAdd = value; }
        }

    }

    [DataClass("PlastekCard")]
    public partial class PlastekCard : BaseCard
    {
        private string number;
        private string pin;
        private int? type;

        protected PlastekCard() {}

        public PlastekCard(string number, string pin, int? type)
        {
            this.number = number;
            this.pin = pin;
            this.type = type;
        }
        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public string Pin
        {
            get { return pin; }
            set { pin = value; }
        }

        public int? Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("PlastekCardInfoResult")]
    public partial class PlastekCardInfoResult : PlastekOperationTaskResult
    {
        private string activationTime;
        private string expirationTime;
        private string lastUsedTime;
        private int status;
        private decimal? balance;
        private decimal? totalBalance;
        private decimal? totalPayment;
        private decimal? bonusPercent;

        protected PlastekCardInfoResult() {}

        public PlastekCardInfoResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, string activationTime, string expirationTime, string lastUsedTime, int status, decimal? balance, decimal? totalBalance, decimal? totalPayment, decimal? bonusPercent)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.activationTime = activationTime;
            this.expirationTime = expirationTime;
            this.lastUsedTime = lastUsedTime;
            this.status = status;
            this.balance = balance;
            this.totalBalance = totalBalance;
            this.totalPayment = totalPayment;
            this.bonusPercent = bonusPercent;
        }
        public string ActivationTime
        {
            get { return activationTime; }
            set { activationTime = value; }
        }

        public string ExpirationTime
        {
            get { return expirationTime; }
            set { expirationTime = value; }
        }

        public string LastUsedTime
        {
            get { return lastUsedTime; }
            set { lastUsedTime = value; }
        }

        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? TotalBalance
        {
            get { return totalBalance; }
            set { totalBalance = value; }
        }

        public decimal? TotalPayment
        {
            get { return totalPayment; }
            set { totalPayment = value; }
        }

        public decimal? BonusPercent
        {
            get { return bonusPercent; }
            set { bonusPercent = value; }
        }

    }

    [DataClass("PlastekCardInfoTask")]
    public partial class PlastekCardInfoTask : PlastekTask
    {
        private PlastekCard card;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekCardInfoTask() {}

        public PlastekCardInfoTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [DataClass("PlastekCardReportItem")]
    public partial class PlastekCardReportItem
    {
        private string locationName;
        private string terminalId;
        private string login;
        private int transactionId;
        private string operationTime;
        private int operationType;
        private decimal? sum;
        private decimal? balance;
        private int secondTransactionId;

        protected PlastekCardReportItem() {}

        public PlastekCardReportItem(string locationName, string terminalId, string login, int transactionId, string operationTime, int operationType, decimal? sum, decimal? balance, int secondTransactionId)
        {
            this.locationName = locationName;
            this.terminalId = terminalId;
            this.login = login;
            this.transactionId = transactionId;
            this.operationTime = operationTime;
            this.operationType = operationType;
            this.sum = sum;
            this.balance = balance;
            this.secondTransactionId = secondTransactionId;
        }
        public string LocationName
        {
            get { return locationName; }
            set { locationName = value; }
        }

        public string TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public string OperationTime
        {
            get { return operationTime; }
            set { operationTime = value; }
        }

        public int OperationType
        {
            get { return operationType; }
            set { operationType = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public int SecondTransactionId
        {
            get { return secondTransactionId; }
            set { secondTransactionId = value; }
        }

    }

    [DataClass("PlastekCardReportResult")]
    public partial class PlastekCardReportResult : PlastekReportTaskResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PlastekCardReportItem> report = new List<PlastekCardReportItem>();

        protected PlastekCardReportResult() {}

        public PlastekCardReportResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string startTime, string endTime)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, startTime, endTime)
        {

        }
        [NotNull]
        public List<PlastekCardReportItem> Report
        {
            get { return report; }
        }

    }

    [DataClass("PlastekCardReportTask")]
    public partial class PlastekCardReportTask : PlastekTask
    {
        private string cardNumber;
        private string startTime;
        private string endTime;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekCardReportTask() {}

        public PlastekCardReportTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string cardNumber, string startTime, string endTime)
            : base(success, id, deviceId, terminalSettings)
        {
            this.cardNumber = cardNumber;
            this.startTime = startTime;
            this.endTime = endTime;
        }
        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public string StartTime
        {
            get { return startTime; }
            set { startTime = value; }
        }

        public string EndTime
        {
            get { return endTime; }
            set { endTime = value; }
        }

    }

    [DataClass("PlastekCardStatus")]
    [EnumClass]
    public partial class PlastekCardStatus
    {
        public static readonly PlastekCardStatus STATUS_NOT_REGISTERED = new PlastekCardStatus("STATUS_NOT_REGISTERED", 0, "Не зарегистрирована");
        public static readonly PlastekCardStatus STATUS_ACTIVE = new PlastekCardStatus("STATUS_ACTIVE", 1, "Активна");
        public static readonly PlastekCardStatus STATUS_STOPPED = new PlastekCardStatus("STATUS_STOPPED", 2, "Приостановлена");
        public static readonly PlastekCardStatus STATUS_CANCELED = new PlastekCardStatus("STATUS_CANCELED", 3, "Отменена");
        public static readonly PlastekCardStatus STATUS_REPLACED = new PlastekCardStatus("STATUS_REPLACED", 4, "Заменена");
        public static readonly PlastekCardStatus STATUS_OBSOLETE = new PlastekCardStatus("STATUS_OBSOLETE", 5, "Устарела");
        public static readonly PlastekCardStatus STATUS_BLOCKED = new PlastekCardStatus("STATUS_BLOCKED", 6, "Блокирована");
        public static readonly PlastekCardStatus STATUS_AUTHORIZED = new PlastekCardStatus("STATUS_AUTHORIZED", 7, "Авторизована");

        private readonly int value;
        private readonly string friendlyName;
        private readonly string __value;

        private PlastekCardStatus(string __value, int value, string friendlyName)
        {
            this.__value = __value;
            this.value = value;
            this.friendlyName = friendlyName;
        }

        public static PlastekCardStatus Parse(string value)
        {
            switch(value)
            {
                case "STATUS_NOT_REGISTERED": return STATUS_NOT_REGISTERED;
                case "STATUS_ACTIVE": return STATUS_ACTIVE;
                case "STATUS_STOPPED": return STATUS_STOPPED;
                case "STATUS_CANCELED": return STATUS_CANCELED;
                case "STATUS_REPLACED": return STATUS_REPLACED;
                case "STATUS_OBSOLETE": return STATUS_OBSOLETE;
                case "STATUS_BLOCKED": return STATUS_BLOCKED;
                case "STATUS_AUTHORIZED": return STATUS_AUTHORIZED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PlastekCardStatus[] VALUES
        {
            get
            {
                return new []
                {
                    STATUS_NOT_REGISTERED, 
                    STATUS_ACTIVE, 
                    STATUS_STOPPED, 
                    STATUS_CANCELED, 
                    STATUS_REPLACED, 
                    STATUS_OBSOLETE, 
                    STATUS_BLOCKED, 
                    STATUS_AUTHORIZED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Value
        {
            get { return value; }
        }

        public string FriendlyName
        {
            get { return friendlyName; }
        }

    }

    [DataClass("PlastekCardTransaction")]
    public partial class PlastekCardTransaction : CardTransaction
    {
        private PlastekCard plastekCard;
        private string plastekOperationTime;
        private int? plastekTransactionId;
        private string terminalId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekCardTransaction() {}

        public PlastekCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, PlastekCard plastekCard, string plastekOperationTime, int? plastekTransactionId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.plastekCard = plastekCard;
            this.plastekOperationTime = plastekOperationTime;
            this.plastekTransactionId = plastekTransactionId;
        }

        public PlastekCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public PlastekCard PlastekCard
        {
            get { return plastekCard; }
            set { plastekCard = value; }
        }

        public string PlastekOperationTime
        {
            get { return plastekOperationTime; }
            set { plastekOperationTime = value; }
        }

        public int? PlastekTransactionId
        {
            get { return plastekTransactionId; }
            set { plastekTransactionId = value; }
        }

        [CanBeNull]
        public string TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

    }

    [DataClass("PlastekCheque")]
    public partial class PlastekCheque : Cheque
    {
        private string operationName;
        private string cardNumber;
        private string terminalName;
        private string userName;
        private string plastekTerminal;
        private string plastekLogin;
        private bool isSessionTask;
        private PlastekTaskResult result;
        private AgentErrorResult errorResult;
        private bool? overrideDoubleCheque;
        private int printCount;

        protected PlastekCheque() {}

        public PlastekCheque(string operationName, string cardNumber, string terminalName, string userName, string plastekTerminal, string plastekLogin, bool isSessionTask, PlastekTaskResult result, AgentErrorResult errorResult, bool? overrideDoubleCheque, int printCount)
        {
            this.operationName = operationName;
            this.cardNumber = cardNumber;
            this.terminalName = terminalName;
            this.userName = userName;
            this.plastekTerminal = plastekTerminal;
            this.plastekLogin = plastekLogin;
            this.isSessionTask = isSessionTask;
            this.result = result;
            this.errorResult = errorResult;
            this.overrideDoubleCheque = overrideDoubleCheque;
            this.printCount = printCount;
        }
        public string OperationName
        {
            get { return operationName; }
            set { operationName = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public string TerminalName
        {
            get { return terminalName; }
            set { terminalName = value; }
        }

        public string UserName
        {
            get { return userName; }
            set { userName = value; }
        }

        public string PlastekTerminal
        {
            get { return plastekTerminal; }
            set { plastekTerminal = value; }
        }

        public string PlastekLogin
        {
            get { return plastekLogin; }
            set { plastekLogin = value; }
        }

        public bool IsSessionTask
        {
            get { return isSessionTask; }
            set { isSessionTask = value; }
        }

        public PlastekTaskResult Result
        {
            get { return result; }
            set { result = value; }
        }

        public AgentErrorResult ErrorResult
        {
            get { return errorResult; }
            set { errorResult = value; }
        }

        public bool? OverrideDoubleCheque
        {
            get { return overrideDoubleCheque; }
            set { overrideDoubleCheque = value; }
        }

        public int PrintCount
        {
            get { return printCount; }
            set { printCount = value; }
        }

    }

    [DataClass("PlastekCloseSessionResult")]
    public partial class PlastekCloseSessionResult : PlastekOperationTaskResult
    {
        private int shiftId;

        protected PlastekCloseSessionResult() {}

        public PlastekCloseSessionResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, int shiftId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.shiftId = shiftId;
        }
        public int ShiftId
        {
            get { return shiftId; }
            set { shiftId = value; }
        }

    }

    [DataClass("PlastekCloseSessionTask")]
    public partial class PlastekCloseSessionTask : PlastekTask
    {
        private int shiftId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekCloseSessionTask() {}

        public PlastekCloseSessionTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, int shiftId)
            : base(success, id, deviceId, terminalSettings)
        {
            this.shiftId = shiftId;
        }
        public int ShiftId
        {
            get { return shiftId; }
            set { shiftId = value; }
        }

    }

    [DataClass("PlastekConfirmAuthorizationResult")]
    public partial class PlastekConfirmAuthorizationResult : PlastekOperationTaskResult
    {
        private decimal? balance;
        private decimal? bonus;
        private int bonusId;

        protected PlastekConfirmAuthorizationResult() {}

        public PlastekConfirmAuthorizationResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? balance, decimal? bonus, int bonusId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.balance = balance;
            this.bonus = bonus;
            this.bonusId = bonusId;
        }
        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? Bonus
        {
            get { return bonus; }
            set { bonus = value; }
        }

        public int BonusId
        {
            get { return bonusId; }
            set { bonusId = value; }
        }

    }

    [DataClass("PlastekConfirmAuthorizationTask")]
    public partial class PlastekConfirmAuthorizationTask : PlastekTask
    {
        private string cardNumber;
        private int authId;
        private decimal? sum;
        private decimal? sumAdd;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekConfirmAuthorizationTask() {}

        public PlastekConfirmAuthorizationTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string cardNumber, int authId, decimal? sum, decimal? sumAdd)
            : base(success, id, deviceId, terminalSettings)
        {
            this.cardNumber = cardNumber;
            this.authId = authId;
            this.sum = sum;
            this.sumAdd = sumAdd;
        }
        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public int AuthId
        {
            get { return authId; }
            set { authId = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? SumAdd
        {
            get { return sumAdd; }
            set { sumAdd = value; }
        }

    }

    [DataClass("PlastekDriver")]
    public partial class PlastekDriver : CardProcessingDriver
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekDriver() {}

        public PlastekDriver(CardProcessingDevice device)
            : base(device)
        {

        }
    }

    [DataClass("PlastekLockCardResult")]
    public partial class PlastekLockCardResult : PlastekOperationTaskResult
    {

        protected PlastekLockCardResult() {}

        public PlastekLockCardResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {

        }
    }

    [DataClass("PlastekLockCardTask")]
    public partial class PlastekLockCardTask : PlastekTask
    {
        private PlastekCard card;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekLockCardTask() {}

        public PlastekLockCardTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [RootEntity]
    [DataClass("PlastekMapping")]
    public partial class PlastekMapping : CardProcessingMapping
    {
        private bool bonusEnabled;

        protected PlastekMapping() {}

        public PlastekMapping(Guid id, LocalizableValue name, bool bonusEnabled)
            : base(id, name)
        {
            this.bonusEnabled = bonusEnabled;
        }
        public bool BonusEnabled
        {
            get { return bonusEnabled; }
            set { bonusEnabled = value; }
        }

    }

    [DataClass("PlastekOpenSessionResult")]
    public partial class PlastekOpenSessionResult : PlastekOperationTaskResult
    {

        protected PlastekOpenSessionResult() {}

        public PlastekOpenSessionResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {

        }
    }

    [DataClass("PlastekOpenSessionTask")]
    public partial class PlastekOpenSessionTask : PlastekTask
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekOpenSessionTask() {}

        public PlastekOpenSessionTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings)
            : base(success, id, deviceId, terminalSettings)
        {

        }
    }

    [DataClass("PlastekOperationTaskResult")]
    public partial class PlastekOperationTaskResult : PlastekTaskResult
    {
        private string operationTime;
        private int transactionId;

        protected PlastekOperationTaskResult() {}

        public PlastekOperationTaskResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login)
        {
            this.operationTime = operationTime;
            this.transactionId = transactionId;
        }
        public string OperationTime
        {
            get { return operationTime; }
            set { operationTime = value; }
        }

        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

    }

    [DataClass("PlastekOperationsReportItem")]
    public partial class PlastekOperationsReportItem
    {
        private int transactionId;
        private string operationTime;
        private string cardNumber;
        private int cardType;
        private int operationType;
        private string operationName;
        private decimal? sum;
        private decimal? balance;
        private int secondTransactionId;

        protected PlastekOperationsReportItem() {}

        public PlastekOperationsReportItem(int transactionId, string operationTime, string cardNumber, int cardType, int operationType, string operationName, decimal? sum, decimal? balance, int secondTransactionId)
        {
            this.transactionId = transactionId;
            this.operationTime = operationTime;
            this.cardNumber = cardNumber;
            this.cardType = cardType;
            this.operationType = operationType;
            this.operationName = operationName;
            this.sum = sum;
            this.balance = balance;
            this.secondTransactionId = secondTransactionId;
        }
        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public string OperationTime
        {
            get { return operationTime; }
            set { operationTime = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public int CardType
        {
            get { return cardType; }
            set { cardType = value; }
        }

        public int OperationType
        {
            get { return operationType; }
            set { operationType = value; }
        }

        public string OperationName
        {
            get { return operationName; }
            set { operationName = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public int SecondTransactionId
        {
            get { return secondTransactionId; }
            set { secondTransactionId = value; }
        }

    }

    [DataClass("PlastekOperationsReportResult")]
    public partial class PlastekOperationsReportResult : PlastekReportTaskResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PlastekOperationsReportItem> report = new List<PlastekOperationsReportItem>();

        protected PlastekOperationsReportResult() {}

        public PlastekOperationsReportResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string startTime, string endTime)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, startTime, endTime)
        {

        }
        [NotNull]
        public List<PlastekOperationsReportItem> Report
        {
            get { return report; }
        }

    }

    [DataClass("PlastekOperationsReportTask")]
    public partial class PlastekOperationsReportTask : PlastekTask
    {
        private string startTime;
        private string endTime;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekOperationsReportTask() {}

        public PlastekOperationsReportTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string startTime, string endTime)
            : base(success, id, deviceId, terminalSettings)
        {
            this.startTime = startTime;
            this.endTime = endTime;
        }
        public string StartTime
        {
            get { return startTime; }
            set { startTime = value; }
        }

        public string EndTime
        {
            get { return endTime; }
            set { endTime = value; }
        }

    }

    [DataClass("PlastekPayInBonusResult")]
    public partial class PlastekPayInBonusResult : PlastekOperationTaskResult
    {
        private decimal? sum;
        private decimal? balance;
        private decimal? totalBalance;
        private decimal? bonusPercent;
        private decimal? prevBonusPercent;
        private decimal? bonus;

        protected PlastekPayInBonusResult() {}

        public PlastekPayInBonusResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? sum, decimal? balance, decimal? totalBalance, decimal? bonusPercent, decimal? prevBonusPercent, decimal? bonus)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.sum = sum;
            this.balance = balance;
            this.totalBalance = totalBalance;
            this.bonusPercent = bonusPercent;
            this.prevBonusPercent = prevBonusPercent;
            this.bonus = bonus;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? TotalBalance
        {
            get { return totalBalance; }
            set { totalBalance = value; }
        }

        public decimal? BonusPercent
        {
            get { return bonusPercent; }
            set { bonusPercent = value; }
        }

        public decimal? PrevBonusPercent
        {
            get { return prevBonusPercent; }
            set { prevBonusPercent = value; }
        }

        public decimal? Bonus
        {
            get { return bonus; }
            set { bonus = value; }
        }

    }

    [DataClass("PlastekPayInBonusTask")]
    public partial class PlastekPayInBonusTask : PlastekTask
    {
        private PlastekCard card;
        private decimal? sum;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekPayInBonusTask() {}

        public PlastekPayInBonusTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, decimal? sum)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.sum = sum;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PlastekPayInResult")]
    public partial class PlastekPayInResult : PlastekOperationTaskResult
    {
        private decimal? sum;
        private decimal? balance;
        private decimal? totalBalance;
        private decimal? bonusPercent;
        private decimal? prevBonusPercent;

        protected PlastekPayInResult() {}

        public PlastekPayInResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? sum, decimal? balance, decimal? totalBalance, decimal? bonusPercent, decimal? prevBonusPercent)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.sum = sum;
            this.balance = balance;
            this.totalBalance = totalBalance;
            this.bonusPercent = bonusPercent;
            this.prevBonusPercent = prevBonusPercent;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? TotalBalance
        {
            get { return totalBalance; }
            set { totalBalance = value; }
        }

        public decimal? BonusPercent
        {
            get { return bonusPercent; }
            set { bonusPercent = value; }
        }

        public decimal? PrevBonusPercent
        {
            get { return prevBonusPercent; }
            set { prevBonusPercent = value; }
        }

    }

    [DataClass("PlastekPayInTask")]
    public partial class PlastekPayInTask : PlastekTask
    {
        private PlastekCard card;
        private decimal? sum;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekPayInTask() {}

        public PlastekPayInTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, decimal? sum)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.sum = sum;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PlastekPayOutResult")]
    public partial class PlastekPayOutResult : PlastekOperationTaskResult
    {
        private decimal? sum;
        private decimal? balance;
        private decimal? totalPayment;
        private decimal? bonus;
        private int bonusId;

        protected PlastekPayOutResult() {}

        public PlastekPayOutResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? sum, decimal? balance, decimal? totalPayment, decimal? bonus, int bonusId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.sum = sum;
            this.balance = balance;
            this.totalPayment = totalPayment;
            this.bonus = bonus;
            this.bonusId = bonusId;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? TotalPayment
        {
            get { return totalPayment; }
            set { totalPayment = value; }
        }

        public decimal? Bonus
        {
            get { return bonus; }
            set { bonus = value; }
        }

        public int BonusId
        {
            get { return bonusId; }
            set { bonusId = value; }
        }

    }

    [DataClass("PlastekPayOutTask")]
    public partial class PlastekPayOutTask : PlastekTask
    {
        private PlastekCard card;
        private decimal? sum;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekPayOutTask() {}

        public PlastekPayOutTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, decimal? sum)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.sum = sum;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PlastekPaymentItem")]
    public partial class PlastekPaymentItem : CardPaymentItem
    {
        private PlastekCard card;

        protected PlastekPaymentItem() {}

        public PlastekPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo, CardTransaction transaction, Cheque cheque, PlastekCard card)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo, transaction, cheque)
        {
            this.card = card;
        }

        public PlastekPaymentItem(Guid id)
            : base(id)
        {

        }

        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [DataClass("PlastekReplaceCardResult")]
    public partial class PlastekReplaceCardResult : PlastekOperationTaskResult
    {
        private int cancelTransactionId;

        protected PlastekReplaceCardResult() {}

        public PlastekReplaceCardResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, int cancelTransactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.cancelTransactionId = cancelTransactionId;
        }
        public int CancelTransactionId
        {
            get { return cancelTransactionId; }
            set { cancelTransactionId = value; }
        }

    }

    [DataClass("PlastekReplaceCardTask")]
    public partial class PlastekReplaceCardTask : PlastekTask
    {
        private string cardNumber;
        private PlastekCard newCard;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekReplaceCardTask() {}

        public PlastekReplaceCardTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string cardNumber, PlastekCard newCard)
            : base(success, id, deviceId, terminalSettings)
        {
            this.cardNumber = cardNumber;
            this.newCard = newCard;
        }
        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public PlastekCard NewCard
        {
            get { return newCard; }
            set { newCard = value; }
        }

    }

    [DataClass("PlastekReplenishmentOrderItem")]
    public partial class PlastekReplenishmentOrderItem : PlastekOrderItem
    {
        private PlastekCard card;

        protected PlastekReplenishmentOrderItem() {}

        public PlastekReplenishmentOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest, decimal? price, PaymentSystem paymentSystem, CardTransaction transaction, Cheque cheque, PlastekCard card)
            : base(id, dish, amount, fixedPrice, delMethod, removalType, status, cookingCourse, delivered, printed, cookingStartTime, guest, price, paymentSystem, transaction, cheque)
        {
            this.card = card;
        }

        public PlastekReplenishmentOrderItem(Guid id)
            : base(id)
        {

        }

        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [DataClass("PlastekReportTaskResult")]
    public partial class PlastekReportTaskResult : PlastekTaskResult
    {
        private string startTime;
        private string endTime;

        protected PlastekReportTaskResult() {}

        public PlastekReportTaskResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string startTime, string endTime)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login)
        {
            this.startTime = startTime;
            this.endTime = endTime;
        }
        public string StartTime
        {
            get { return startTime; }
            set { startTime = value; }
        }

        public string EndTime
        {
            get { return endTime; }
            set { endTime = value; }
        }

    }

    [DataClass("PlastekReturnDepositPaymentTask")]
    public partial class PlastekReturnDepositPaymentTask : PlastekTask
    {
        private string cardNumber;
        private decimal? sum;
        private int returnedTransactionId;

        protected PlastekReturnDepositPaymentTask() {}

        public PlastekReturnDepositPaymentTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string cardNumber, decimal? sum, int returnedTransactionId)
            : base(success, id, deviceId, terminalSettings)
        {
            this.cardNumber = cardNumber;
            this.sum = sum;
            this.returnedTransactionId = returnedTransactionId;
        }
        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public int ReturnedTransactionId
        {
            get { return returnedTransactionId; }
            set { returnedTransactionId = value; }
        }

    }

    [DataClass("PlastekReturnPaymentResult")]
    public partial class PlastekReturnPaymentResult : PlastekOperationTaskResult
    {
        private decimal? balance;
        private decimal? bonusReturned;
        private int returnedTransactionId;
        private int bonusReturnTransactionId;

        protected PlastekReturnPaymentResult() {}

        public PlastekReturnPaymentResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? balance, decimal? bonusReturned, int returnedTransactionId, int bonusReturnTransactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.balance = balance;
            this.bonusReturned = bonusReturned;
            this.returnedTransactionId = returnedTransactionId;
            this.bonusReturnTransactionId = bonusReturnTransactionId;
        }
        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public decimal? BonusReturned
        {
            get { return bonusReturned; }
            set { bonusReturned = value; }
        }

        public int ReturnedTransactionId
        {
            get { return returnedTransactionId; }
            set { returnedTransactionId = value; }
        }

        public int BonusReturnTransactionId
        {
            get { return bonusReturnTransactionId; }
            set { bonusReturnTransactionId = value; }
        }

    }

    [DataClass("PlastekReturnPaymentTask")]
    public partial class PlastekReturnPaymentTask : PlastekTask
    {
        private PlastekCard card;
        private decimal? sum;
        private int returnedTransactionId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekReturnPaymentTask() {}

        public PlastekReturnPaymentTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, decimal? sum, int returnedTransactionId)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.sum = sum;
            this.returnedTransactionId = returnedTransactionId;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public int ReturnedTransactionId
        {
            get { return returnedTransactionId; }
            set { returnedTransactionId = value; }
        }

    }

    [DataClass("PlastekSettings")]
    public partial class PlastekSettings : DeviceSettings
    {
        private string uri;
        private int merchantId;
        private int locationId;
        private int programId;
        private string login;
        private string password;

        protected PlastekSettings() {}

        public PlastekSettings(string javaDevice, string uri, int merchantId, int locationId, int programId, string login, string password)
            : base(javaDevice)
        {
            this.uri = uri;
            this.merchantId = merchantId;
            this.locationId = locationId;
            this.programId = programId;
            this.login = login;
            this.password = password;
        }
        public string Uri
        {
            get { return uri; }
            set { uri = value; }
        }

        public int MerchantId
        {
            get { return merchantId; }
            set { merchantId = value; }
        }

        public int LocationId
        {
            get { return locationId; }
            set { locationId = value; }
        }

        public int ProgramId
        {
            get { return programId; }
            set { programId = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

    }

    [DataClass("PlastekSummaryReportItem")]
    public partial class PlastekSummaryReportItem
    {
        private int operationType;
        private string operationName;
        private int count;
        private decimal? sum;

        protected PlastekSummaryReportItem() {}

        public PlastekSummaryReportItem(int operationType, string operationName, int count, decimal? sum)
        {
            this.operationType = operationType;
            this.operationName = operationName;
            this.count = count;
            this.sum = sum;
        }
        public int OperationType
        {
            get { return operationType; }
            set { operationType = value; }
        }

        public string OperationName
        {
            get { return operationName; }
            set { operationName = value; }
        }

        public int Count
        {
            get { return count; }
            set { count = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PlastekSummaryReportResult")]
    public partial class PlastekSummaryReportResult : PlastekReportTaskResult
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PlastekSummaryReportItem> report = new List<PlastekSummaryReportItem>();

        protected PlastekSummaryReportResult() {}

        public PlastekSummaryReportResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string startTime, string endTime)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, startTime, endTime)
        {

        }
        [NotNull]
        public List<PlastekSummaryReportItem> Report
        {
            get { return report; }
        }

    }

    [DataClass("PlastekSummaryReportTask")]
    public partial class PlastekSummaryReportTask : PlastekTask
    {
        private string startTime;
        private string endTime;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekSummaryReportTask() {}

        public PlastekSummaryReportTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string startTime, string endTime)
            : base(success, id, deviceId, terminalSettings)
        {
            this.startTime = startTime;
            this.endTime = endTime;
        }
        public string StartTime
        {
            get { return startTime; }
            set { startTime = value; }
        }

        public string EndTime
        {
            get { return endTime; }
            set { endTime = value; }
        }

    }

    [DataClass("PlastekTask")]
    public partial class PlastekTask : AgentTask
    {
        private PlastekTerminalSettings terminalSettings;

        protected PlastekTask() {}

        public PlastekTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings)
            : base(success, id, deviceId)
        {
            this.terminalSettings = terminalSettings;
        }
        public PlastekTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

    }

    [DataClass("PlastekTaskResult")]
    public partial class PlastekTaskResult : AgentOkDeviceResult
    {
        private int merchantId;
        private int locationId;
        private string terminalId;
        private string login;

        protected PlastekTaskResult() {}

        public PlastekTaskResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.merchantId = merchantId;
            this.locationId = locationId;
            this.terminalId = terminalId;
            this.login = login;
        }
        public int MerchantId
        {
            get { return merchantId; }
            set { merchantId = value; }
        }

        public int LocationId
        {
            get { return locationId; }
            set { locationId = value; }
        }

        public string TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

    }

    [DataClass("PlastekTerminalSettings")]
    public partial class PlastekTerminalSettings
    {
        private bool standalone;
        private string terminalId;

        protected PlastekTerminalSettings() {}

        public PlastekTerminalSettings(bool standalone, string terminalId)
        {
            this.standalone = standalone;
            this.terminalId = terminalId;
        }
        public bool Standalone
        {
            get { return standalone; }
            set { standalone = value; }
        }

        public string TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

    }

    [DataClass("PlastekUnlockCardResult")]
    public partial class PlastekUnlockCardResult : PlastekOperationTaskResult
    {

        protected PlastekUnlockCardResult() {}

        public PlastekUnlockCardResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {

        }
    }

    [DataClass("PlastekUnlockCardTask")]
    public partial class PlastekUnlockCardTask : PlastekTask
    {
        private PlastekCard card;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekUnlockCardTask() {}

        public PlastekUnlockCardTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

    }

    [DataClass("PlastekVerifyResult")]
    public partial class PlastekVerifyResult : PlastekReportTaskResult
    {
        private PlastekVerifySum transactionsSum;
        private PlastekVerifySum itemsSum;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PlastekCardTransaction> problemTransactions = new List<PlastekCardTransaction>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PlastekOperationsReportItem> problemItems = new List<PlastekOperationsReportItem>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekVerifyResult() {}

        public PlastekVerifyResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string startTime, string endTime, PlastekVerifySum transactionsSum, PlastekVerifySum itemsSum)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, startTime, endTime)
        {
            this.transactionsSum = transactionsSum;
            this.itemsSum = itemsSum;
        }
        public PlastekVerifySum TransactionsSum
        {
            get { return transactionsSum; }
            set { transactionsSum = value; }
        }

        public PlastekVerifySum ItemsSum
        {
            get { return itemsSum; }
            set { itemsSum = value; }
        }

        [NotNull]
        public List<PlastekCardTransaction> ProblemTransactions
        {
            get { return problemTransactions; }
        }

        [NotNull]
        public List<PlastekOperationsReportItem> ProblemItems
        {
            get { return problemItems; }
        }

    }

    [DataClass("PlastekVerifySum")]
    public partial class PlastekVerifySum
    {
        private decimal? payOutSum;
        private decimal? payInSum;
        private decimal? activationSum;
        private decimal? voidSum;

        protected PlastekVerifySum() {}

        public PlastekVerifySum(decimal? payOutSum, decimal? payInSum, decimal? activationSum, decimal? voidSum)
        {
            this.payOutSum = payOutSum;
            this.payInSum = payInSum;
            this.activationSum = activationSum;
            this.voidSum = voidSum;
        }
        public decimal? PayOutSum
        {
            get { return payOutSum; }
            set { payOutSum = value; }
        }

        public decimal? PayInSum
        {
            get { return payInSum; }
            set { payInSum = value; }
        }

        public decimal? ActivationSum
        {
            get { return activationSum; }
            set { activationSum = value; }
        }

        public decimal? VoidSum
        {
            get { return voidSum; }
            set { voidSum = value; }
        }

    }

    [DataClass("PlastekVoidAuthorizationTask")]
    public partial class PlastekVoidAuthorizationTask : PlastekTask
    {
        private string cardNumber;
        private int authId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekVoidAuthorizationTask() {}

        public PlastekVoidAuthorizationTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, string cardNumber, int authId)
            : base(success, id, deviceId, terminalSettings)
        {
            this.cardNumber = cardNumber;
            this.authId = authId;
        }
        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public int AuthId
        {
            get { return authId; }
            set { authId = value; }
        }

    }

    [DataClass("PlastekVoidTransactionResult")]
    public partial class PlastekVoidTransactionResult : PlastekOperationTaskResult
    {
        private decimal? balance;
        private int voidedTransactionId;

        protected PlastekVoidTransactionResult() {}

        public PlastekVoidTransactionResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int merchantId, int locationId, string terminalId, string login, string operationTime, int transactionId, decimal? balance, int voidedTransactionId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId, merchantId, locationId, terminalId, login, operationTime, transactionId)
        {
            this.balance = balance;
            this.voidedTransactionId = voidedTransactionId;
        }
        public decimal? Balance
        {
            get { return balance; }
            set { balance = value; }
        }

        public int VoidedTransactionId
        {
            get { return voidedTransactionId; }
            set { voidedTransactionId = value; }
        }

    }

    [DataClass("PlastekVoidTransactionTask")]
    public partial class PlastekVoidTransactionTask : PlastekTask
    {
        private PlastekCard card;
        private int voidedTransactionId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PlastekVoidTransactionTask() {}

        public PlastekVoidTransactionTask(bool success, Guid? id, Guid? deviceId, PlastekTerminalSettings terminalSettings, PlastekCard card, int voidedTransactionId)
            : base(success, id, deviceId, terminalSettings)
        {
            this.card = card;
            this.voidedTransactionId = voidedTransactionId;
        }
        public PlastekCard Card
        {
            get { return card; }
            set { card = value; }
        }

        public int VoidedTransactionId
        {
            get { return voidedTransactionId; }
            set { voidedTransactionId = value; }
        }

    }

    [DataClass("VirtualPlastekDriver")]
    public partial class VirtualPlastekDriver : PlastekDriver
    {
        private VirtualPlastekSettings settings;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public VirtualPlastekDriver() {}

        public VirtualPlastekDriver(CardProcessingDevice device, VirtualPlastekSettings settings)
            : base(device)
        {
            this.settings = settings;
        }
        public VirtualPlastekSettings Settings
        {
            get { return settings; }
            set { settings = value; }
        }

    }

    [DataClass("VirtualPlastekSettings")]
    public partial class VirtualPlastekSettings : PlastekSettings
    {
        private string plastekTerminalId;

        protected VirtualPlastekSettings() {}

        public VirtualPlastekSettings(string javaDevice, string uri, int merchantId, int locationId, int programId, string login, string password, string plastekTerminalId)
            : base(javaDevice, uri, merchantId, locationId, programId, login, password)
        {
            this.plastekTerminalId = plastekTerminalId;
        }
        public string PlastekTerminalId
        {
            get { return plastekTerminalId; }
            set { plastekTerminalId = value; }
        }

    }

    [DataClass("PulsarAbortOperationTask")]
    public partial class PulsarAbortOperationTask : PulsarTask
    {
        private PulsarOperationData operationData;

        protected PulsarAbortOperationTask() {}

        public PulsarAbortOperationTask(bool success, Guid? id, Guid? deviceId, PulsarOperationData operationData)
            : base(success, id, deviceId)
        {
            this.operationData = operationData;
        }
        public PulsarOperationData OperationData
        {
            get { return operationData; }
            set { operationData = value; }
        }

    }

    [DataClass("PulsarCardTransaction")]
    public partial class PulsarCardTransaction : CardTransaction
    {
        private PulsarOperationData operationData;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PulsarCardTransaction() {}

        public PulsarCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, PulsarOperationData operationData)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.operationData = operationData;
        }

        public PulsarCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public PulsarOperationData OperationData
        {
            get { return operationData; }
            set { operationData = value; }
        }

    }

    [DataClass("PulsarCheque")]
    public partial class PulsarCheque : Cheque
    {
        private string terminalName;
        private string bankBillHeader;
        private string userName;
        private PulsarOperationData operationData;

        protected PulsarCheque() {}

        public PulsarCheque(string terminalName, string bankBillHeader, string userName, PulsarOperationData operationData)
        {
            this.terminalName = terminalName;
            this.bankBillHeader = bankBillHeader;
            this.userName = userName;
            this.operationData = operationData;
        }
        public string TerminalName
        {
            get { return terminalName; }
            set { terminalName = value; }
        }

        public string BankBillHeader
        {
            get { return bankBillHeader; }
            set { bankBillHeader = value; }
        }

        public string UserName
        {
            get { return userName; }
            set { userName = value; }
        }

        public PulsarOperationData OperationData
        {
            get { return operationData; }
            set { operationData = value; }
        }

    }

    [DataClass("PulsarDriver")]
    public partial class PulsarDriver : CardProcessingDriver
    {
        private string bankBillHeader;
        private int transactionId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PulsarDriver() {}

        public PulsarDriver(CardProcessingDevice device, string bankBillHeader, int transactionId)
            : base(device)
        {
            this.bankBillHeader = bankBillHeader;
            this.transactionId = transactionId;
        }
        public string BankBillHeader
        {
            get { return bankBillHeader; }
            set { bankBillHeader = value; }
        }

        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

    }

    [RootEntity]
    [DataClass("PulsarMapping")]
    public partial class PulsarMapping : CardProcessingMapping
    {
        [NotNull, NotNullField]
        private CardSystemMapping cardSystemMapping;

        protected PulsarMapping() {}

        public PulsarMapping(Guid id, LocalizableValue name, CardSystemMapping cardSystemMapping)
            : base(id, name)
        {
            this.cardSystemMapping = cardSystemMapping;
        }
        [NotNull]
        public CardSystemMapping CardSystemMapping
        {
            get { return cardSystemMapping; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cardSystemMapping = value;
            }
        }

    }

    [DataClass("PulsarOperationData")]
    public partial class PulsarOperationData
    {
        private string sum;
        private string currencyCode;
        private string cardNumber;
        private string cardExpiryDate;
        private string authorizationCode;
        private string hostDateTime;
        private string hostResponseCode;
        private int? hostTransactionId;
        private string referenceNumber;
        private string terminalDateTime;
        private string terminalId;
        private int? terminalTransactionId;
        private int? transactionId;
        private int? operationCode;
        private int? originalOperationCode;
        private int? status;
        private string textResponse;
        private int? pinCodingMode;
        private string receiptData;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PulsarOperationData() {}

        public PulsarOperationData(string sum, string currencyCode, string cardNumber, string cardExpiryDate, string authorizationCode, string hostDateTime, string hostResponseCode, int? hostTransactionId, string referenceNumber, string terminalDateTime, string terminalId, int? terminalTransactionId, int? transactionId, int? operationCode, int? originalOperationCode, int? status, string textResponse, int? pinCodingMode, string receiptData)
        {
            this.sum = sum;
            this.currencyCode = currencyCode;
            this.cardNumber = cardNumber;
            this.cardExpiryDate = cardExpiryDate;
            this.authorizationCode = authorizationCode;
            this.hostDateTime = hostDateTime;
            this.hostResponseCode = hostResponseCode;
            this.hostTransactionId = hostTransactionId;
            this.referenceNumber = referenceNumber;
            this.terminalDateTime = terminalDateTime;
            this.terminalId = terminalId;
            this.terminalTransactionId = terminalTransactionId;
            this.transactionId = transactionId;
            this.operationCode = operationCode;
            this.originalOperationCode = originalOperationCode;
            this.status = status;
            this.textResponse = textResponse;
            this.pinCodingMode = pinCodingMode;
            this.receiptData = receiptData;
        }
        public string Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public string CardExpiryDate
        {
            get { return cardExpiryDate; }
            set { cardExpiryDate = value; }
        }

        public string AuthorizationCode
        {
            get { return authorizationCode; }
            set { authorizationCode = value; }
        }

        public string HostDateTime
        {
            get { return hostDateTime; }
            set { hostDateTime = value; }
        }

        public string HostResponseCode
        {
            get { return hostResponseCode; }
            set { hostResponseCode = value; }
        }

        public int? HostTransactionId
        {
            get { return hostTransactionId; }
            set { hostTransactionId = value; }
        }

        public string ReferenceNumber
        {
            get { return referenceNumber; }
            set { referenceNumber = value; }
        }

        public string TerminalDateTime
        {
            get { return terminalDateTime; }
            set { terminalDateTime = value; }
        }

        public string TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

        public int? TerminalTransactionId
        {
            get { return terminalTransactionId; }
            set { terminalTransactionId = value; }
        }

        public int? TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public int? OperationCode
        {
            get { return operationCode; }
            set { operationCode = value; }
        }

        public int? OriginalOperationCode
        {
            get { return originalOperationCode; }
            set { originalOperationCode = value; }
        }

        public int? Status
        {
            get { return status; }
            set { status = value; }
        }

        public string TextResponse
        {
            get { return textResponse; }
            set { textResponse = value; }
        }

        public int? PinCodingMode
        {
            get { return pinCodingMode; }
            set { pinCodingMode = value; }
        }

        public string ReceiptData
        {
            get { return receiptData; }
            set { receiptData = value; }
        }

    }

    [DataClass("PulsarOperationResult")]
    public partial class PulsarOperationResult : AgentOkDeviceResult
    {
        private PulsarOperationData operationData;

        protected PulsarOperationResult() {}

        public PulsarOperationResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, PulsarOperationData operationData)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.operationData = operationData;
        }
        public PulsarOperationData OperationData
        {
            get { return operationData; }
            set { operationData = value; }
        }

    }

    [DataClass("PulsarPayOutTask")]
    public partial class PulsarPayOutTask : PulsarTask
    {
        private int transactionId;
        private PulsarTerminalSettings terminalSettings;
        private string sum;

        protected PulsarPayOutTask() {}

        public PulsarPayOutTask(bool success, Guid? id, Guid? deviceId, int transactionId, PulsarTerminalSettings terminalSettings, string sum)
            : base(success, id, deviceId)
        {
            this.transactionId = transactionId;
            this.terminalSettings = terminalSettings;
            this.sum = sum;
        }
        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public PulsarTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

        public string Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PulsarPaymentItem")]
    public partial class PulsarPaymentItem : CardPaymentItem
    {

        protected PulsarPaymentItem() {}

        public PulsarPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo, CardTransaction transaction, Cheque cheque)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo, transaction, cheque)
        {

        }

        public PulsarPaymentItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("PulsarSettings")]
    public partial class PulsarSettings : DeviceSettings
    {
        private string currencyCode;
        private int operationTimeout;
        private int verifyTimeout;
        private string serverAddress;
        private int serverPort;

        protected PulsarSettings() {}

        public PulsarSettings(string javaDevice, string currencyCode, int operationTimeout, int verifyTimeout, string serverAddress, int serverPort)
            : base(javaDevice)
        {
            this.currencyCode = currencyCode;
            this.operationTimeout = operationTimeout;
            this.verifyTimeout = verifyTimeout;
            this.serverAddress = serverAddress;
            this.serverPort = serverPort;
        }
        public string CurrencyCode
        {
            get { return currencyCode; }
            set { currencyCode = value; }
        }

        public int OperationTimeout
        {
            get { return operationTimeout; }
            set { operationTimeout = value; }
        }

        public int VerifyTimeout
        {
            get { return verifyTimeout; }
            set { verifyTimeout = value; }
        }

        public string ServerAddress
        {
            get { return serverAddress; }
            set { serverAddress = value; }
        }

        public int ServerPort
        {
            get { return serverPort; }
            set { serverPort = value; }
        }

    }

    [DataClass("PulsarTask")]
    public partial class PulsarTask : AgentTask
    {

        protected PulsarTask() {}

        public PulsarTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("PulsarTerminalSettings")]
    public partial class PulsarTerminalSettings
    {
        private string controlAddress;
        private int controlPort;
        private int controlTimeout;
        private string terminalId;
        private int comPort;
        private int baudRate;

        protected PulsarTerminalSettings() {}

        public PulsarTerminalSettings(string controlAddress, int controlPort, int controlTimeout, string terminalId, int comPort, int baudRate)
        {
            this.controlAddress = controlAddress;
            this.controlPort = controlPort;
            this.controlTimeout = controlTimeout;
            this.terminalId = terminalId;
            this.comPort = comPort;
            this.baudRate = baudRate;
        }
        public string ControlAddress
        {
            get { return controlAddress; }
            set { controlAddress = value; }
        }

        public int ControlPort
        {
            get { return controlPort; }
            set { controlPort = value; }
        }

        public int ControlTimeout
        {
            get { return controlTimeout; }
            set { controlTimeout = value; }
        }

        public string TerminalId
        {
            get { return terminalId; }
            set { terminalId = value; }
        }

        public int ComPort
        {
            get { return comPort; }
            set { comPort = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

    }

    [DataClass("PulsarTestTask")]
    public partial class PulsarTestTask : PulsarTask
    {
        private PulsarTerminalSettings terminalSettings;

        protected PulsarTestTask() {}

        public PulsarTestTask(bool success, Guid? id, Guid? deviceId, PulsarTerminalSettings terminalSettings)
            : base(success, id, deviceId)
        {
            this.terminalSettings = terminalSettings;
        }
        public PulsarTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

    }

    [DataClass("PulsarUploadOperationTask")]
    public partial class PulsarUploadOperationTask : PulsarTask
    {
        private PulsarOperationData operationData;

        protected PulsarUploadOperationTask() {}

        public PulsarUploadOperationTask(bool success, Guid? id, Guid? deviceId, PulsarOperationData operationData)
            : base(success, id, deviceId)
        {
            this.operationData = operationData;
        }
        public PulsarOperationData OperationData
        {
            get { return operationData; }
            set { operationData = value; }
        }

    }

    [DataClass("PulsarVerifyCheque")]
    public partial class PulsarVerifyCheque : Cheque
    {
        private string terminalName;
        private string bankBillHeader;
        private string userName;
        private PulsarVerifyParameters parameters;
        private PulsarVerifyParameters hostParameters;
        private string errorMessage;

        protected PulsarVerifyCheque() {}

        public PulsarVerifyCheque(string terminalName, string bankBillHeader, string userName, PulsarVerifyParameters parameters, PulsarVerifyParameters hostParameters, string errorMessage)
        {
            this.terminalName = terminalName;
            this.bankBillHeader = bankBillHeader;
            this.userName = userName;
            this.parameters = parameters;
            this.hostParameters = hostParameters;
            this.errorMessage = errorMessage;
        }
        public string TerminalName
        {
            get { return terminalName; }
            set { terminalName = value; }
        }

        public string BankBillHeader
        {
            get { return bankBillHeader; }
            set { bankBillHeader = value; }
        }

        public string UserName
        {
            get { return userName; }
            set { userName = value; }
        }

        public PulsarVerifyParameters Parameters
        {
            get { return parameters; }
            set { parameters = value; }
        }

        public PulsarVerifyParameters HostParameters
        {
            get { return hostParameters; }
            set { hostParameters = value; }
        }

        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

    }

    [DataClass("PulsarVerifyParameters")]
    public partial class PulsarVerifyParameters
    {
        private string debitSum;
        private string debitCount;
        private string creditSum;
        private string creditCount;
        private string voidDebitSum;
        private string voidDebitCount;
        private string voidCreditSum;
        private string voidCreditCount;

        protected PulsarVerifyParameters() {}

        public PulsarVerifyParameters(string debitSum, string debitCount, string creditSum, string creditCount, string voidDebitSum, string voidDebitCount, string voidCreditSum, string voidCreditCount)
        {
            this.debitSum = debitSum;
            this.debitCount = debitCount;
            this.creditSum = creditSum;
            this.creditCount = creditCount;
            this.voidDebitSum = voidDebitSum;
            this.voidDebitCount = voidDebitCount;
            this.voidCreditSum = voidCreditSum;
            this.voidCreditCount = voidCreditCount;
        }
        public string DebitSum
        {
            get { return debitSum; }
            set { debitSum = value; }
        }

        public string DebitCount
        {
            get { return debitCount; }
            set { debitCount = value; }
        }

        public string CreditSum
        {
            get { return creditSum; }
            set { creditSum = value; }
        }

        public string CreditCount
        {
            get { return creditCount; }
            set { creditCount = value; }
        }

        public string VoidDebitSum
        {
            get { return voidDebitSum; }
            set { voidDebitSum = value; }
        }

        public string VoidDebitCount
        {
            get { return voidDebitCount; }
            set { voidDebitCount = value; }
        }

        public string VoidCreditSum
        {
            get { return voidCreditSum; }
            set { voidCreditSum = value; }
        }

        public string VoidCreditCount
        {
            get { return voidCreditCount; }
            set { voidCreditCount = value; }
        }

    }

    [DataClass("PulsarVerifySummaryResult")]
    public partial class PulsarVerifySummaryResult : AgentOkDeviceResult
    {
        private int status;
        private PulsarVerifyParameters parameters;

        protected PulsarVerifySummaryResult() {}

        public PulsarVerifySummaryResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int status, PulsarVerifyParameters parameters)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.status = status;
            this.parameters = parameters;
        }
        public int Status
        {
            get { return status; }
            set { status = value; }
        }

        public PulsarVerifyParameters Parameters
        {
            get { return parameters; }
            set { parameters = value; }
        }

    }

    [DataClass("PulsarVerifySummaryTask")]
    public partial class PulsarVerifySummaryTask : PulsarTask
    {
        private int transactionId;
        private PulsarTerminalSettings terminalSettings;
        private PulsarVerifyParameters parameters;

        protected PulsarVerifySummaryTask() {}

        public PulsarVerifySummaryTask(bool success, Guid? id, Guid? deviceId, int transactionId, PulsarTerminalSettings terminalSettings, PulsarVerifyParameters parameters)
            : base(success, id, deviceId)
        {
            this.transactionId = transactionId;
            this.terminalSettings = terminalSettings;
            this.parameters = parameters;
        }
        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public PulsarTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

        public PulsarVerifyParameters Parameters
        {
            get { return parameters; }
            set { parameters = value; }
        }

    }

    [DataClass("PulsarVerifyTask")]
    public partial class PulsarVerifyTask : PulsarTask
    {
        private int transactionId;
        private PulsarTerminalSettings terminalSettings;

        protected PulsarVerifyTask() {}

        public PulsarVerifyTask(bool success, Guid? id, Guid? deviceId, int transactionId, PulsarTerminalSettings terminalSettings)
            : base(success, id, deviceId)
        {
            this.transactionId = transactionId;
            this.terminalSettings = terminalSettings;
        }
        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public PulsarTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

    }

    [DataClass("PulsarVoidOperationTask")]
    public partial class PulsarVoidOperationTask : PulsarTask
    {
        private int transactionId;
        private PulsarTerminalSettings terminalSettings;
        private PulsarOperationData operationData;

        protected PulsarVoidOperationTask() {}

        public PulsarVoidOperationTask(bool success, Guid? id, Guid? deviceId, int transactionId, PulsarTerminalSettings terminalSettings, PulsarOperationData operationData)
            : base(success, id, deviceId)
        {
            this.transactionId = transactionId;
            this.terminalSettings = terminalSettings;
            this.operationData = operationData;
        }
        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public PulsarTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

        public PulsarOperationData OperationData
        {
            get { return operationData; }
            set { operationData = value; }
        }

    }

    [DataClass("SbrfCardTransaction")]
    public partial class SbrfCardTransaction : CardTransaction
    {
        private string trxDate;
        private string trxTime;
        private string termNum;
        private string authCode;
        private string rrn;
        private string cardName;
        private int? cardType;
        private string clientCard;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public SbrfCardTransaction() {}

        public SbrfCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {

        }

        public SbrfCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        [CanBeNull]
        public string TrxDate
        {
            get { return trxDate; }
            set { trxDate = value; }
        }

        [CanBeNull]
        public string TrxTime
        {
            get { return trxTime; }
            set { trxTime = value; }
        }

        [CanBeNull]
        public string TermNum
        {
            get { return termNum; }
            set { termNum = value; }
        }

        [CanBeNull]
        public string AuthCode
        {
            get { return authCode; }
            set { authCode = value; }
        }

        [CanBeNull]
        public string Rrn
        {
            get { return rrn; }
            set { rrn = value; }
        }

        [CanBeNull]
        public string CardName
        {
            get { return cardName; }
            set { cardName = value; }
        }

        public int? CardType
        {
            get { return cardType; }
            set { cardType = value; }
        }

        [CanBeNull]
        public string ClientCard
        {
            get { return clientCard; }
            set { clientCard = value; }
        }

    }

    [DataClass("SmartSaleDriver")]
    public partial class SmartSaleDriver : CardProcessingDriver
    {
        private PulsarSettings settings;
        private PulsarTerminalSettings terminalSettings;
        private PointOfSale pointOfSale;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public SmartSaleDriver() {}

        public SmartSaleDriver(CardProcessingDevice device, PulsarSettings settings, PulsarTerminalSettings terminalSettings, PointOfSale pointOfSale)
            : base(device)
        {
            this.settings = settings;
            this.terminalSettings = terminalSettings;
            this.pointOfSale = pointOfSale;
        }
        public PulsarSettings Settings
        {
            get { return settings; }
            set { settings = value; }
        }

        public PulsarTerminalSettings TerminalSettings
        {
            get { return terminalSettings; }
            set { terminalSettings = value; }
        }

        public PointOfSale PointOfSale
        {
            get { return pointOfSale; }
            set { pointOfSale = value; }
        }

    }

    [DataClass("TrposCardTransaction")]
    public partial class TrposCardTransaction : CardTransaction
    {
        private int? ecrNumber;
        private int? ecrReceiptNumber;
        private int? invoiceNumber;
        private string rrn;
        private string issuerName;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public TrposCardTransaction() {}

        public TrposCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {

        }

        public TrposCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public int? EcrNumber
        {
            get { return ecrNumber; }
            set { ecrNumber = value; }
        }

        public int? EcrReceiptNumber
        {
            get { return ecrReceiptNumber; }
            set { ecrReceiptNumber = value; }
        }

        public int? InvoiceNumber
        {
            get { return invoiceNumber; }
            set { invoiceNumber = value; }
        }

        [CanBeNull]
        public string Rrn
        {
            get { return rrn; }
            set { rrn = value; }
        }

        [CanBeNull]
        public string IssuerName
        {
            get { return issuerName; }
            set { issuerName = value; }
        }

    }

    [DataClass("TrposDriver")]
    public partial class TrposDriver : CardProcessingDriver
    {
        private CardSystemMapping cardSystemMapping;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public TrposDriver() {}

        public TrposDriver(CardProcessingDevice device, CardSystemMapping cardSystemMapping)
            : base(device)
        {
            this.cardSystemMapping = cardSystemMapping;
        }
        public CardSystemMapping CardSystemMapping
        {
            get { return cardSystemMapping; }
            set { cardSystemMapping = value; }
        }

    }

    [RootEntity]
    [DataClass("CashDrawerDevice")]
    public partial class CashDrawerDevice : AgentDevice, ICashDrawerCommonTask
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashDrawerDevice() {}

        public CashDrawerDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name, agentId, driver)
        {

        }

        public CashDrawerDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

    }

    [DataClass("CashDrawerDeviceDriver")]
    public abstract partial class CashDrawerDeviceDriver : AgentDriver
    {


    }

    [DataClass("CashDrawerHolder")]
    public partial class CashDrawerHolder
    {
        private CashDrawerDevice cashDrawerDevice;
        [HasDefaultValue]
        private int rank = 0;


        [CanBeNull]
        public CashDrawerDevice CashDrawerDevice
        {
            get { return cashDrawerDevice; }
            set { cashDrawerDevice = value; }
        }

        public int Rank
        {
            get { return rank; }
            set { rank = value; }
        }

    }

    [DataClass("CashDrawerRegisterTask")]
    public partial class CashDrawerRegisterTask : AgentTask
    {

        protected CashDrawerRegisterTask() {}

        public CashDrawerRegisterTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("CashDrawerResult")]
    public partial class CashDrawerResult : AgentOkDeviceResult
    {
        private bool health;
        private bool isOpened;

        protected CashDrawerResult() {}

        public CashDrawerResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, bool health, bool isOpened)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.health = health;
            this.isOpened = isOpened;
        }
        public bool Health
        {
            get { return health; }
            set { health = value; }
        }

        public bool IsOpened
        {
            get { return isOpened; }
            set { isOpened = value; }
        }

    }

    [DataClass("CheckCashDrawerTask")]
    public partial class CheckCashDrawerTask : CashDrawerRegisterTask
    {

        protected CheckCashDrawerTask() {}

        public CheckCashDrawerTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("ICashDrawerCommonTask")]
    public partial interface ICashDrawerCommonTask
    {

    }

    [DataClass("OpenCashDrawerTask")]
    public partial class OpenCashDrawerTask : CashDrawerRegisterTask
    {

        protected OpenCashDrawerTask() {}

        public OpenCashDrawerTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("OpenDrawerResult")]
    public partial class OpenDrawerResult : AgentOkDeviceResult
    {
        private bool result;

        protected OpenDrawerResult() {}

        public OpenDrawerResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, bool result)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.result = result;
        }
        public bool Result
        {
            get { return result; }
            set { result = value; }
        }

    }

    [DataClass("OPOSCashDrawerDriver")]
    public partial class OPOSCashDrawerDriver : CashDrawerDeviceDriver
    {


    }

    [DataClass("SessionCloseInfo")]
    public partial class SessionCloseInfo
    {
        private SessionCloseParameters closeParameters;
        private decimal? bookCash;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<CounteragentTransaction> penaltyOrBonuses = new List<CounteragentTransaction>();
        private DateTime? date;

        protected SessionCloseInfo() {}

        public SessionCloseInfo(SessionCloseParameters closeParameters, decimal? bookCash, DateTime? date)
        {
            this.closeParameters = closeParameters;
            this.bookCash = bookCash;
            this.date = date;
        }
        public SessionCloseParameters CloseParameters
        {
            get { return closeParameters; }
            set { closeParameters = value; }
        }

        public decimal? BookCash
        {
            get { return bookCash; }
            set { bookCash = value; }
        }

        [NotNull]
        public List<CounteragentTransaction> PenaltyOrBonuses
        {
            get { return penaltyOrBonuses; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

    }

    [DataClass("SessionCloseParameters")]
    public partial class SessionCloseParameters
    {
        private decimal? cashTaking;
        [HasDefaultValue]
        private decimal cashRest = 0;
        private decimal? cashRestPrior;
        private AuthData auth;
        private User loggedUser;

        protected SessionCloseParameters() {}

        public SessionCloseParameters(decimal? cashTaking, decimal cashRest, decimal? cashRestPrior, AuthData auth, User loggedUser)
        {
            this.cashTaking = cashTaking;
            this.cashRest = cashRest;
            this.cashRestPrior = cashRestPrior;
            this.auth = auth;
            this.loggedUser = loggedUser;
        }

        public SessionCloseParameters(decimal cashRest)
        {
            this.cashRest = cashRest;
        }

        public decimal? CashTaking
        {
            get { return cashTaking; }
            set { cashTaking = value; }
        }

        public decimal CashRest
        {
            get { return cashRest; }
            set { cashRest = value; }
        }

        public decimal? CashRestPrior
        {
            get { return cashRestPrior; }
            set { cashRestPrior = value; }
        }

        public AuthData Auth
        {
            get { return auth; }
            set { auth = value; }
        }

        public User LoggedUser
        {
            get { return loggedUser; }
            set { loggedUser = value; }
        }

    }

    [DataClass("SessionRotation")]
    public partial class SessionRotation
    {
        private User cashier;
        private User prevCashier;
        private DateTime? date;

        protected SessionRotation() {}

        public SessionRotation(User cashier, User prevCashier, DateTime? date)
        {
            this.cashier = cashier;
            this.prevCashier = prevCashier;
            this.date = date;
        }
        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

        public User PrevCashier
        {
            get { return prevCashier; }
            set { prevCashier = value; }
        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

    }

    [RootEntity]
    [DataClass("OrderCustomerPersistentBuffer")]
    public partial class OrderCustomerPersistentBuffer : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, Guid> customerIds = new Dictionary<Guid, Guid>();

        protected OrderCustomerPersistentBuffer() {}

        public OrderCustomerPersistentBuffer(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<Guid, Guid> CustomerIds
        {
            get { return customerIds; }
        }

    }

    [DataClass("Currency")]
    public partial class Currency : CurrencyInfo
    {
        private string isoName;
        private string shortNameForGui;
        private string shortName;
        private string centName;
        [HasDefaultValue]
        private bool showFractionalPart = true;
        [HasDefaultValue]
        private bool showCurrency = true;
        [HasDefaultValue]
        private bool showCurrencyAfterSum = true;
        private List<int> denominations;
        [HasDefaultValue]
        private decimal? minimumDenomination = 0;
        [HasDefaultValue]
        private string code = "";

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Currency() {}

        public Currency(string isoName, string shortNameForGui, string shortName, string centName)
        {
            this.isoName = isoName;
            this.shortNameForGui = shortNameForGui;
            this.shortName = shortName;
            this.centName = centName;
        }
        public string IsoName
        {
            get { return isoName; }
            set { isoName = value; }
        }

        public string ShortNameForGui
        {
            get { return shortNameForGui; }
            set { shortNameForGui = value; }
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public string CentName
        {
            get { return centName; }
            set { centName = value; }
        }

        public bool ShowFractionalPart
        {
            get { return showFractionalPart; }
            set { showFractionalPart = value; }
        }

        public bool ShowCurrency
        {
            get { return showCurrency; }
            set { showCurrency = value; }
        }

        public bool ShowCurrencyAfterSum
        {
            get { return showCurrencyAfterSum; }
            set { showCurrencyAfterSum = value; }
        }

        public List<int> Denominations
        {
            get { return denominations; }
            set { denominations = value; }
        }

        public decimal? MinimumDenomination
        {
            get { return minimumDenomination; }
            set { minimumDenomination = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

    }

    [RootEntity]
    [DataClass("CurrencyEntity")]
    public partial class CurrencyEntity : PersistedEntity, CurrencyInfo
    {
        private string isoName;
        private string shortNameForGui;
        private string shortName;
        private string centName;
        [HasDefaultValue]
        private bool showFractionalPart = true;
        [HasDefaultValue]
        private bool showCurrency = true;
        [HasDefaultValue]
        private bool showCurrencyAfterSum = true;
        private List<int> denominations;
        [HasDefaultValue]
        private decimal? minimumDenomination = 0;
        [HasDefaultValue]
        private string code = "";

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CurrencyEntity() {}

        public CurrencyEntity(Guid id, string isoName, string shortNameForGui, string shortName, string centName)
            : base(id)
        {
            this.isoName = isoName;
            this.shortNameForGui = shortNameForGui;
            this.shortName = shortName;
            this.centName = centName;
        }

        public CurrencyEntity(Guid id)
            : base(id)
        {

        }

        public string IsoName
        {
            get { return isoName; }
            set { isoName = value; }
        }

        public string ShortNameForGui
        {
            get { return shortNameForGui; }
            set { shortNameForGui = value; }
        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public string CentName
        {
            get { return centName; }
            set { centName = value; }
        }

        public bool ShowFractionalPart
        {
            get { return showFractionalPart; }
            set { showFractionalPart = value; }
        }

        public bool ShowCurrency
        {
            get { return showCurrency; }
            set { showCurrency = value; }
        }

        public bool ShowCurrencyAfterSum
        {
            get { return showCurrencyAfterSum; }
            set { showCurrencyAfterSum = value; }
        }

        public List<int> Denominations
        {
            get { return denominations; }
            set { denominations = value; }
        }

        public decimal? MinimumDenomination
        {
            get { return minimumDenomination; }
            set { minimumDenomination = value; }
        }

        public string Code
        {
            get { return code; }
            set { code = value; }
        }

    }

    [DataClass("CurrencyInfo")]
    public partial interface CurrencyInfo
    {

    }

    [DataClass("CurrencyRate")]
    public partial class CurrencyRate : AbstractKeyedTimeTableItem
    {
        [NotNull, NotNullField]
        private CurrencyEntity currency;
        [HasDefaultValue]
        private decimal rate = 0;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CurrencyRate() {}

        public CurrencyRate(Guid id, DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency, decimal rate)
            : base(id, dateFrom, dateTo)
        {
            this.currency = currency;
            this.rate = rate;
        }

        public CurrencyRate(Guid id, CurrencyEntity currency, decimal rate)
            : base(id)
        {
            this.currency = currency;
            this.rate = rate;
        }

        [NotNull]
        public CurrencyEntity Currency
        {
            get { return currency; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  currency = value;
            }
        }

        public decimal Rate
        {
            get { return rate; }
            set { rate = value; }
        }

    }

    [DataClass("CurrencyRateDto")]
    public partial class CurrencyRateDto
    {
        private Guid? currencyId;
        private decimal? rate;
        private DateTime? dateFrom;
        private DateTime? dateTo;

        protected CurrencyRateDto() {}

        public CurrencyRateDto(Guid? currencyId, decimal? rate)
        {
            this.currencyId = currencyId;
            this.rate = rate;
        }
        public Guid? CurrencyId
        {
            get { return currencyId; }
            set { currencyId = value; }
        }

        public decimal? Rate
        {
            get { return rate; }
            set { rate = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

    }

    [DataClass("CurrencyRateInfo")]
    public partial class CurrencyRateInfo
    {
        private CurrencyEntity currency;
        private decimal? currencyRate;


        [CanBeNull]
        public CurrencyEntity Currency
        {
            get { return currency; }
            set { currency = value; }
        }

        public decimal? CurrencyRate
        {
            get { return currencyRate; }
            set { currencyRate = value; }
        }

    }

    [DataClass("CurrencyServerConstants")]
    [EnumClass]
    public partial class CurrencyServerConstants
    {
        public static readonly CurrencyServerConstants MIN_DISPLAY_PRECISION = new CurrencyServerConstants("MIN_DISPLAY_PRECISION", 0);
        public static readonly CurrencyServerConstants MAX_DISPLAY_PRECISION = new CurrencyServerConstants("MAX_DISPLAY_PRECISION", 4);

        private readonly int precision;
        private readonly string __value;

        private CurrencyServerConstants(string __value, int precision)
        {
            this.__value = __value;
            this.precision = precision;
        }

        public static CurrencyServerConstants Parse(string value)
        {
            switch(value)
            {
                case "MIN_DISPLAY_PRECISION": return MIN_DISPLAY_PRECISION;
                case "MAX_DISPLAY_PRECISION": return MAX_DISPLAY_PRECISION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CurrencyServerConstants[] VALUES
        {
            get
            {
                return new []
                {
                    MIN_DISPLAY_PRECISION, 
                    MAX_DISPLAY_PRECISION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Precision
        {
            get { return precision; }
        }

    }

    [DataClass("SumInCurrency")]
    public partial class SumInCurrency
    {
        private decimal? sum;
        private decimal? originalSum;
        private CurrencyEntity currency;
        private decimal? currencyRate;

        protected SumInCurrency() {}

        public SumInCurrency(decimal? sum, decimal? originalSum, CurrencyEntity currency, decimal? currencyRate)
        {
            this.sum = sum;
            this.originalSum = originalSum;
            this.currency = currency;
            this.currencyRate = currencyRate;
        }
        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public decimal? OriginalSum
        {
            get { return originalSum; }
            set { originalSum = value; }
        }

        public CurrencyEntity Currency
        {
            get { return currency; }
            set { currency = value; }
        }

        public decimal? CurrencyRate
        {
            get { return currencyRate; }
            set { currencyRate = value; }
        }

    }

    [DataClass("SumInCurrencyPerOrder")]
    public partial class SumInCurrencyPerOrder : SumInCurrency
    {
        private Guid? orderId;

        protected SumInCurrencyPerOrder() {}

        public SumInCurrencyPerOrder(decimal? sum, decimal? originalSum, CurrencyEntity currency, decimal? currencyRate, Guid? orderId)
            : base(sum, originalSum, currency, currencyRate)
        {
            this.orderId = orderId;
        }
        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

    }

    [DataClass("BlackListAddressInfo")]
    public partial class BlackListAddressInfo
    {
        private Guid streetId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string streetName = "";
        private string house;
        private string building;
        private string flat;

        protected BlackListAddressInfo() {}

        public BlackListAddressInfo(Guid streetId, string streetName, string house, string building, string flat)
        {
            this.streetId = streetId;
            this.streetName = streetName;
            this.house = house;
            this.building = building;
            this.flat = flat;
        }

        public BlackListAddressInfo(Guid streetId, string streetName)
        {
            this.streetId = streetId;
            this.streetName = streetName;
        }

        public Guid StreetId
        {
            get { return streetId; }
            set { streetId = value; }
        }

        [NotNull]
        public string StreetName
        {
            get { return streetName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  streetName = value;
            }
        }

        public string House
        {
            get { return house; }
            set { house = value; }
        }

        public string Building
        {
            get { return building; }
            set { building = value; }
        }

        public string Flat
        {
            get { return flat; }
            set { flat = value; }
        }

    }

    [DataClass("BlackListInfo")]
    public partial class BlackListInfo
    {
        [HasDefaultValue]
        private bool inBlackList = false;
        private string blackListReason;

        protected BlackListInfo() {}

        public BlackListInfo(string blackListReason)
        {
            this.blackListReason = blackListReason;
        }
        public bool InBlackList
        {
            get { return inBlackList; }
            set { inBlackList = value; }
        }

        public string BlackListReason
        {
            get { return blackListReason; }
            set { blackListReason = value; }
        }

    }

    [DataClass("Customer")]
    public partial class Customer : CachedEntity
    {
        private bool deleted;
        private bool? personalDataConsent;
        [NotNull, NotNullField]
        private PersonalDataStatus personalDataStatus;
        private DateTime? consentDateFrom;
        private DateTime? consentDateTo;
        private DateTime? processingDateFrom;
        private DateTime? processingDateTo;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private string surname;
        private string nick;
        private string comment;
        private string cardNumber;
        private DiscountCardType discountCardType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Address> addresses = new List<Address>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<CustomerPhone> phones = new List<CustomerPhone>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<CustomerEmail> emails = new List<CustomerEmail>();
        private CustomerOrganizationDetailsInfo counteragentInfo;
        [HasDefaultValue]
        private decimal? initialBalance = 0;
        private CustomerIikoNetInfo iikoBizInfo;
        private BlackListInfo blackListInfo;
        private MarketingSource marketingSource;
        private DateTime? dateCreated;
        private User linkedCounteragent;
        private DateTime? dateLatestSurvey;
        private Gender gender;
        private DateTime? birthdate;
        [HasDefaultValue]
        private bool receivesOrderStatusNotifications = true;
        [HasDefaultValue]
        private bool receivesLoyaltySystemNotifications = false;
        [HasDefaultValue]
        private bool receivesPromotionalNotifications = false;
        private DateTime? lastOrderDate;
        [HasDefaultValue]
        private int revisionPart = 0;
        [HasDefaultValue]
        private long timestamp = 1;
        private Guid? timestampId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Customer() {}

        public Customer(Guid id, bool deleted, bool? personalDataConsent, PersonalDataStatus personalDataStatus, DateTime? consentDateFrom, DateTime? consentDateTo, DateTime? processingDateFrom, DateTime? processingDateTo, string name, string surname, string nick, string comment, string cardNumber, DiscountCardType discountCardType, Gender gender)
            : base(id)
        {
            this.deleted = deleted;
            this.personalDataConsent = personalDataConsent;
            this.personalDataStatus = personalDataStatus;
            this.consentDateFrom = consentDateFrom;
            this.consentDateTo = consentDateTo;
            this.processingDateFrom = processingDateFrom;
            this.processingDateTo = processingDateTo;
            this.name = name;
            this.surname = surname;
            this.nick = nick;
            this.comment = comment;
            this.cardNumber = cardNumber;
            this.discountCardType = discountCardType;
            this.gender = gender;
        }

        public Customer(Guid id, PersonalDataStatus personalDataStatus, string name)
            : base(id)
        {
            this.personalDataStatus = personalDataStatus;
            this.name = name;
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public bool? PersonalDataConsent
        {
            get { return personalDataConsent; }
            set { personalDataConsent = value; }
        }

        [NotNull]
        public PersonalDataStatus PersonalDataStatus
        {
            get { return personalDataStatus; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  personalDataStatus = value;
            }
        }

        public DateTime? ConsentDateFrom
        {
            get { return consentDateFrom; }
            set { consentDateFrom = value; }
        }

        public DateTime? ConsentDateTo
        {
            get { return consentDateTo; }
            set { consentDateTo = value; }
        }

        public DateTime? ProcessingDateFrom
        {
            get { return processingDateFrom; }
            set { processingDateFrom = value; }
        }

        public DateTime? ProcessingDateTo
        {
            get { return processingDateTo; }
            set { processingDateTo = value; }
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public string Surname
        {
            get { return surname; }
            set { surname = value; }
        }

        public string Nick
        {
            get { return nick; }
            set { nick = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public DiscountCardType DiscountCardType
        {
            get { return discountCardType; }
            set { discountCardType = value; }
        }

        [NotNull]
        public List<Address> Addresses
        {
            get { return addresses; }
        }

        [NotNull]
        public List<CustomerPhone> Phones
        {
            get { return phones; }
        }

        [NotNull]
        public List<CustomerEmail> Emails
        {
            get { return emails; }
        }

        [CanBeNull]
        public CustomerOrganizationDetailsInfo CounteragentInfo
        {
            get { return counteragentInfo; }
            set { counteragentInfo = value; }
        }

        public decimal? InitialBalance
        {
            get { return initialBalance; }
            set { initialBalance = value; }
        }

        [CanBeNull]
        public CustomerIikoNetInfo IikoBizInfo
        {
            get { return iikoBizInfo; }
            set { iikoBizInfo = value; }
        }

        [CanBeNull]
        public BlackListInfo BlackListInfo
        {
            get { return blackListInfo; }
            set { blackListInfo = value; }
        }

        [CanBeNull]
        public MarketingSource MarketingSource
        {
            get { return marketingSource; }
            set { marketingSource = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        [CanBeNull]
        public User LinkedCounteragent
        {
            get { return linkedCounteragent; }
            set { linkedCounteragent = value; }
        }

        public DateTime? DateLatestSurvey
        {
            get { return dateLatestSurvey; }
            set { dateLatestSurvey = value; }
        }

        public Gender Gender
        {
            get { return gender; }
            set { gender = value; }
        }

        public DateTime? Birthdate
        {
            get { return birthdate; }
            set { birthdate = value; }
        }

        public bool ReceivesOrderStatusNotifications
        {
            get { return receivesOrderStatusNotifications; }
            set { receivesOrderStatusNotifications = value; }
        }

        public bool ReceivesLoyaltySystemNotifications
        {
            get { return receivesLoyaltySystemNotifications; }
            set { receivesLoyaltySystemNotifications = value; }
        }

        public bool ReceivesPromotionalNotifications
        {
            get { return receivesPromotionalNotifications; }
            set { receivesPromotionalNotifications = value; }
        }

        public DateTime? LastOrderDate
        {
            get { return lastOrderDate; }
            set { lastOrderDate = value; }
        }

        public int RevisionPart
        {
            get { return revisionPart; }
            set { revisionPart = value; }
        }

        public long Timestamp
        {
            get { return timestamp; }
            set { timestamp = value; }
        }

        public Guid? TimestampId
        {
            get { return timestampId; }
            set { timestampId = value; }
        }

    }

    [DataClass("CustomerEmail")]
    public partial class CustomerEmail
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string email = "";
        private string comment;
        private bool isMain;

        protected CustomerEmail() {}

        public CustomerEmail(string email, string comment, bool isMain)
        {
            this.email = email;
            this.comment = comment;
            this.isMain = isMain;
        }

        public CustomerEmail(string email)
        {
            this.email = email;
        }

        [NotNull]
        public string Email
        {
            get { return email; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  email = value;
            }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public bool IsMain
        {
            get { return isMain; }
            set { isMain = value; }
        }

    }

    [DataClass("CustomerIikoNetInfo")]
    public partial class CustomerIikoNetInfo
    {
        private Guid? iikoNetId;

        public CustomerIikoNetInfo() {}

        public CustomerIikoNetInfo(Guid? iikoNetId)
        {
            this.iikoNetId = iikoNetId;
        }
        public Guid? IikoNetId
        {
            get { return iikoNetId; }
            set { iikoNetId = value; }
        }

    }

    [DataClass("CustomerOrganizationDetailsFullAddress")]
    public partial class CustomerOrganizationDetailsFullAddress
    {
        private string postCode;
        private string country;
        private string region;
        private string city;
        private string street;
        private string house;


        [CanBeNull]
        public string PostCode
        {
            get { return postCode; }
            set { postCode = value; }
        }

        [CanBeNull]
        public string Country
        {
            get { return country; }
            set { country = value; }
        }

        [CanBeNull]
        public string Region
        {
            get { return region; }
            set { region = value; }
        }

        [CanBeNull]
        public string City
        {
            get { return city; }
            set { city = value; }
        }

        [CanBeNull]
        public string Street
        {
            get { return street; }
            set { street = value; }
        }

        [CanBeNull]
        public string House
        {
            get { return house; }
            set { house = value; }
        }

    }

    [DataClass("CustomerOrganizationDetailsInfo")]
    public partial class CustomerOrganizationDetailsInfo
    {
        private string name;
        private string code;
        private string accountingReasonCode;
        private string recipientCode;
        private string address;
        private CustomerOrganizationDetailsFullAddress fullAddress;
        private CustomerPublicOrganizationDetailsInfo publicAuthorityInfo;

        protected CustomerOrganizationDetailsInfo() {}

        public CustomerOrganizationDetailsInfo(string name)
        {
            this.name = name;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [CanBeNull]
        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        [CanBeNull]
        public string AccountingReasonCode
        {
            get { return accountingReasonCode; }
            set { accountingReasonCode = value; }
        }

        [CanBeNull]
        public string RecipientCode
        {
            get { return recipientCode; }
            set { recipientCode = value; }
        }

        [CanBeNull]
        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        [CanBeNull]
        public CustomerOrganizationDetailsFullAddress FullAddress
        {
            get { return fullAddress; }
            set { fullAddress = value; }
        }

        [CanBeNull]
        public CustomerPublicOrganizationDetailsInfo PublicAuthorityInfo
        {
            get { return publicAuthorityInfo; }
            set { publicAuthorityInfo = value; }
        }

    }

    [DataClass("CustomerPhone")]
    public partial class CustomerPhone
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string phoneNumber = "";
        private string comment;
        private bool isMain;

        protected CustomerPhone() {}

        public CustomerPhone(string phoneNumber, string comment, bool isMain)
        {
            this.phoneNumber = phoneNumber;
            this.comment = comment;
            this.isMain = isMain;
        }

        public CustomerPhone(string phoneNumber)
        {
            this.phoneNumber = phoneNumber;
        }

        [NotNull]
        public string PhoneNumber
        {
            get { return phoneNumber; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  phoneNumber = value;
            }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public bool IsMain
        {
            get { return isMain; }
            set { isMain = value; }
        }

    }

    [DataClass("CustomerPublicOrganizationDetailsInfo")]
    public partial class CustomerPublicOrganizationDetailsInfo
    {
        private string projectCode;
        private string tenderCode;


        [CanBeNull]
        public string ProjectCode
        {
            get { return projectCode; }
            set { projectCode = value; }
        }

        [CanBeNull]
        public string TenderCode
        {
            get { return tenderCode; }
            set { tenderCode = value; }
        }

    }

    [DataClass("PersonalDataConsent")]
    [EnumClass]
    public partial class PersonalDataConsent : LocalizableName<PersonalDataConsent>, ILocalizableDescription
    {
        /// <summary> Неизвестное состояние. Данные о согласии на обработку персональных данных некорректны. Обратитесь к администратору.. </summary>
        public static readonly PersonalDataConsent INVALID = new PersonalDataConsent("INVALID", true, true, false, false);
        /// <summary> Согласие не определено. Нет данных о согласии на обработку персональных данных. Требуется запросить новое согласие.. </summary>
        public static readonly PersonalDataConsent MISSING_CONSENT_FLAG = new PersonalDataConsent("MISSING_CONSENT_FLAG", true, true, false, true);
        /// <summary> Срок не определен. Нет данных о сроке согласия на обработку персональных данных. Требуется запросить новое согласие.. </summary>
        public static readonly PersonalDataConsent MISSING_CONSENT_DATES = new PersonalDataConsent("MISSING_CONSENT_DATES", true, true, false, true);
        /// <summary> Запросить. Нет данных о согласии или сроке согласия на обработку персональных данных. Требуется запросить новое согласие.. </summary>
        public static readonly PersonalDataConsent AWAITING_CONSENT_PROCESSING = new PersonalDataConsent("AWAITING_CONSENT_PROCESSING", true, true, false, true);
        /// <summary> Согласен. Получено согласие на обработку персональных данных с {0} по {1}. </summary>
        public static readonly PersonalDataConsent VALID_CONSENT = new PersonalDataConsent("VALID_CONSENT", true, false, false, false);
        /// <summary> Приостановить. Обработка персональных данных приостановлена. Данные гостя обрабатываются, пока у него есть открытые заказы.. </summary>
        public static readonly PersonalDataConsent SUSPENDED_PROCESSING = new PersonalDataConsent("SUSPENDED_PROCESSING", false, true, true, false);
        /// <summary> Просрочено. Срок согласия на обработку персональных данных истек. Данные гостя обрабатываются, пока у него есть открытые заказы.. </summary>
        public static readonly PersonalDataConsent EXPIRED_CONSENT = new PersonalDataConsent("EXPIRED_CONSENT", false, true, true, false);
        /// <summary> Отозвал. Гость отозвал согласие на обработку персональных данных. Данные гостя обрабатываются, пока у него есть открытые заказы.. </summary>
        public static readonly PersonalDataConsent REVOKED_CONSENT = new PersonalDataConsent("REVOKED_CONSENT", false, true, true, false);
        /// <summary> Не давал. Гость не дал согласия на обработку персональных данных. Данные гостя обрабатываются, пока у него есть открытые заказы.. </summary>
        public static readonly PersonalDataConsent DENIED_CONSENT = new PersonalDataConsent("DENIED_CONSENT", false, true, true, false);
        /// <summary> Анонимизирован. Персональные данные гостя анонимизированы.. </summary>
        public static readonly PersonalDataConsent ANONYMIZED = new PersonalDataConsent("ANONYMIZED", false, false, false, false);

        private readonly bool visible;
        private readonly bool groupOperationsAllowed;
        private readonly bool waitingForRemoveData;
        private readonly bool incompleteConsentData;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __descriptionResId;

        private PersonalDataConsent(string __value, bool visible, bool groupOperationsAllowed, bool waitingForRemoveData, bool incompleteConsentData)
        {
            this.__value = __value;
            this.__nameResId = "PERSONALDATACONSENT_NAME_" + __value;
            this.__descriptionResId = "PERSONALDATACONSENT_DESCRIPTION_" + __value;
            this.visible = visible;
            this.groupOperationsAllowed = groupOperationsAllowed;
            this.waitingForRemoveData = waitingForRemoveData;
            this.incompleteConsentData = incompleteConsentData;
        }

        public static PersonalDataConsent Parse(string value)
        {
            switch(value)
            {
                case "INVALID": return INVALID;
                case "MISSING_CONSENT_FLAG": return MISSING_CONSENT_FLAG;
                case "MISSING_CONSENT_DATES": return MISSING_CONSENT_DATES;
                case "AWAITING_CONSENT_PROCESSING": return AWAITING_CONSENT_PROCESSING;
                case "VALID_CONSENT": return VALID_CONSENT;
                case "SUSPENDED_PROCESSING": return SUSPENDED_PROCESSING;
                case "EXPIRED_CONSENT": return EXPIRED_CONSENT;
                case "REVOKED_CONSENT": return REVOKED_CONSENT;
                case "DENIED_CONSENT": return DENIED_CONSENT;
                case "ANONYMIZED": return ANONYMIZED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PersonalDataConsent[] VALUES
        {
            get
            {
                return new []
                {
                    INVALID, 
                    MISSING_CONSENT_FLAG, 
                    MISSING_CONSENT_DATES, 
                    AWAITING_CONSENT_PROCESSING, 
                    VALID_CONSENT, 
                    SUSPENDED_PROCESSING, 
                    EXPIRED_CONSENT, 
                    REVOKED_CONSENT, 
                    DENIED_CONSENT, 
                    ANONYMIZED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string DescriptionResId
        {
            get { return __descriptionResId; }
        }

        public bool Visible
        {
            get { return visible; }
        }

        public bool GroupOperationsAllowed
        {
            get { return groupOperationsAllowed; }
        }

        public bool WaitingForRemoveData
        {
            get { return waitingForRemoveData; }
        }

        public bool IncompleteConsentData
        {
            get { return incompleteConsentData; }
        }

    }

    [DataClass("PersonalDataStatus")]
    [EnumClass]
    public partial class PersonalDataStatus
    {
        public static readonly PersonalDataStatus PROVIDED = new PersonalDataStatus("PROVIDED", true, true);
        public static readonly PersonalDataStatus ANONYMIZED = new PersonalDataStatus("ANONYMIZED", false, false);
        public static readonly PersonalDataStatus NONE = new PersonalDataStatus("NONE", false, true);

        private readonly bool provided;
        private readonly bool visible;
        private readonly string __value;

        private PersonalDataStatus(string __value, bool provided, bool visible)
        {
            this.__value = __value;
            this.provided = provided;
            this.visible = visible;
        }

        public static PersonalDataStatus Parse(string value)
        {
            switch(value)
            {
                case "PROVIDED": return PROVIDED;
                case "ANONYMIZED": return ANONYMIZED;
                case "NONE": return NONE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PersonalDataStatus[] VALUES
        {
            get
            {
                return new []
                {
                    PROVIDED, 
                    ANONYMIZED, 
                    NONE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public bool Provided
        {
            get { return provided; }
        }

        public bool Visible
        {
            get { return visible; }
        }

    }

    [DataClass("WithAnonymized")]
    public partial interface WithAnonymized
    {

    }

    [DataClass("CustomerIdsFilterInfo")]
    public partial class CustomerIdsFilterInfo
    {
        private ICollection<Guid> customerIds;
        private long localRevision;

        protected CustomerIdsFilterInfo() {}

        public CustomerIdsFilterInfo(long localRevision)
        {
            this.localRevision = localRevision;
        }
        public ICollection<Guid> CustomerIds
        {
            get { return customerIds; }
            set { customerIds = value; }
        }

        public long LocalRevision
        {
            get { return localRevision; }
            set { localRevision = value; }
        }

    }

    [RootEntity]
    [DataClass("CustomerDisplayDevice")]
    public partial class CustomerDisplayDevice : AgentDevice
    {
        private Terminal terminal;

        protected CustomerDisplayDevice() {}

        public CustomerDisplayDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver, Terminal terminal)
            : base(id, name, agentId, driver)
        {
            this.terminal = terminal;
        }

        public CustomerDisplayDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

    }

    [DataClass("CustomerDisplayDriver")]
    public abstract partial class CustomerDisplayDriver : AgentDriver
    {


    }

    [DataClass("CustomerDisplaySettings")]
    public partial class CustomerDisplaySettings : DeviceSettings
    {
        private int brightness;
        private int idleTimeMillis;
        private string idleText;

        protected CustomerDisplaySettings() {}

        public CustomerDisplaySettings(string javaDevice, int brightness, int idleTimeMillis, string idleText)
            : base(javaDevice)
        {
            this.brightness = brightness;
            this.idleTimeMillis = idleTimeMillis;
            this.idleText = idleText;
        }
        public int Brightness
        {
            get { return brightness; }
            set { brightness = value; }
        }

        public int IdleTimeMillis
        {
            get { return idleTimeMillis; }
            set { idleTimeMillis = value; }
        }

        public string IdleText
        {
            get { return idleText; }
            set { idleText = value; }
        }

    }

    [DataClass("CustomerDisplayTask")]
    public partial class CustomerDisplayTask : AgentTask
    {

        protected CustomerDisplayTask() {}

        public CustomerDisplayTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("DisplayIdleTask")]
    public partial class DisplayIdleTask : CustomerDisplayTask
    {
        private int timeToIdleMillis;

        protected DisplayIdleTask() {}

        public DisplayIdleTask(bool success, Guid? id, Guid? deviceId, int timeToIdleMillis)
            : base(success, id, deviceId)
        {
            this.timeToIdleMillis = timeToIdleMillis;
        }
        public int TimeToIdleMillis
        {
            get { return timeToIdleMillis; }
            set { timeToIdleMillis = value; }
        }

    }

    [DataClass("DisplayTextTask")]
    public partial class DisplayTextTask : CustomerDisplayTask
    {
        private int maxShowTimeMillis;
        private string topLeft;
        private string topRight;
        private string bottomLeft;
        private string bottomRight;

        protected DisplayTextTask() {}

        public DisplayTextTask(bool success, Guid? id, Guid? deviceId, int maxShowTimeMillis, string topLeft, string topRight, string bottomLeft, string bottomRight)
            : base(success, id, deviceId)
        {
            this.maxShowTimeMillis = maxShowTimeMillis;
            this.topLeft = topLeft;
            this.topRight = topRight;
            this.bottomLeft = bottomLeft;
            this.bottomRight = bottomRight;
        }
        public int MaxShowTimeMillis
        {
            get { return maxShowTimeMillis; }
            set { maxShowTimeMillis = value; }
        }

        public string TopLeft
        {
            get { return topLeft; }
            set { topLeft = value; }
        }

        public string TopRight
        {
            get { return topRight; }
            set { topRight = value; }
        }

        public string BottomLeft
        {
            get { return bottomLeft; }
            set { bottomLeft = value; }
        }

        public string BottomRight
        {
            get { return bottomRight; }
            set { bottomRight = value; }
        }

    }

    [DataClass("FV2029Driver")]
    public partial class FV2029Driver : CustomerDisplayDriver
    {


    }

    [DataClass("FV2029Settings")]
    public partial class FV2029Settings : CustomerDisplaySettings
    {
        private string portType;
        private int portNumber;
        private int baudRate;
        private string commandSet;
        private string codePage;
        private bool scrollIdleText;

        protected FV2029Settings() {}

        public FV2029Settings(string javaDevice, int brightness, int idleTimeMillis, string idleText, string portType, int portNumber, int baudRate, string commandSet, string codePage, bool scrollIdleText)
            : base(javaDevice, brightness, idleTimeMillis, idleText)
        {
            this.portType = portType;
            this.portNumber = portNumber;
            this.baudRate = baudRate;
            this.commandSet = commandSet;
            this.codePage = codePage;
            this.scrollIdleText = scrollIdleText;
        }
        public string PortType
        {
            get { return portType; }
            set { portType = value; }
        }

        public int PortNumber
        {
            get { return portNumber; }
            set { portNumber = value; }
        }

        public int BaudRate
        {
            get { return baudRate; }
            set { baudRate = value; }
        }

        public string CommandSet
        {
            get { return commandSet; }
            set { commandSet = value; }
        }

        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public bool ScrollIdleText
        {
            get { return scrollIdleText; }
            set { scrollIdleText = value; }
        }

    }

    [DataClass("OposCustomerDisplayDriver")]
    public partial class OposCustomerDisplayDriver : CustomerDisplayDriver
    {


    }

    [DataClass("OposCustomerDisplaySettings")]
    public partial class OposCustomerDisplaySettings : CustomerDisplaySettings
    {
        private string deviceName;

        protected OposCustomerDisplaySettings() {}

        public OposCustomerDisplaySettings(string javaDevice, int brightness, int idleTimeMillis, string idleText, string deviceName)
            : base(javaDevice, brightness, idleTimeMillis, idleText)
        {
            this.deviceName = deviceName;
        }
        public string DeviceName
        {
            get { return deviceName; }
            set { deviceName = value; }
        }

    }

    [DataClass("ActionOnValidationRejection")]
    [EnumClass]
    public partial class ActionOnValidationRejection : LocalizableName<ActionOnValidationRejection>
    {
        /// <summary> Отклонить заказ. </summary>
        public static readonly ActionOnValidationRejection REJECT = new ActionOnValidationRejection("REJECT");
        /// <summary> Отметить заказ как проблемный. </summary>
        public static readonly ActionOnValidationRejection CREATE_PROBLEM = new ActionOnValidationRejection("CREATE_PROBLEM");

        private readonly string __value;
        private readonly string __nameResId;

        private ActionOnValidationRejection(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ACTIONONVALIDATIONREJECTION_NAME_" + __value;
        }

        public static ActionOnValidationRejection Parse(string value)
        {
            switch(value)
            {
                case "REJECT": return REJECT;
                case "CREATE_PROBLEM": return CREATE_PROBLEM;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ActionOnValidationRejection[] VALUES
        {
            get
            {
                return new []
                {
                    REJECT, 
                    CREATE_PROBLEM
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("AutoAssignDeliveryTerminalSettings")]
    public partial class AutoAssignDeliveryTerminalSettings : PersistedEntity
    {
        [HasDefaultValue]
        private bool autoAssignExternalDeliveries = true;
        private ActionOnValidationRejection actionOnValidationRejection;

        protected AutoAssignDeliveryTerminalSettings() {}

        public AutoAssignDeliveryTerminalSettings(Guid id)
            : base(id)
        {

        }
        public bool AutoAssignExternalDeliveries
        {
            get { return autoAssignExternalDeliveries; }
            set { autoAssignExternalDeliveries = value; }
        }

        [CanBeNull]
        public ActionOnValidationRejection ActionOnValidationRejection
        {
            get { return actionOnValidationRejection; }
            set { actionOnValidationRejection = value; }
        }

    }

    [DataClass("Delivery")]
    public partial class Delivery : SimpleDepartmentableEntity, WithAnonymized
    {
        [HasDefaultValue]
        private bool anonymized = false;
        private DepartmentEntity department;
        private DateTime date;
        private Guid? sourceId;
        private Guid? movedToDeliveryId;
        private Guid? movedFromDeliveryId;
        private Guid? movedToTerminalGroupId;
        private Guid? movedFromTerminalGroupId;
        private Guid? orderId;
        [HasDefaultValue]
        private bool isSelfService = false;
        private User courier;
        private DeliveryExternalCourierServiceData ecsData;
        [HasDefaultValue]
        private bool isCourierSelectedManually = false;
        private User deliveryOperator;
        [HasDefaultValue]
        private string comment = "";
        [HasDefaultValue]
        private int number = 0;
        private DateTime createTime;
        private DateTime? confirmTime;
        private DateTime? cookingStartedTime;
        private DateTime? printTime;
        private DateTime? cookingFinishTime;
        private DateTime? sendTime;
        private DateTime? actualTime;
        private DateTime? closeTime;
        private DateTime? billTime;
        private DateTime? cancelTime;
        private DateTime? predictedCookingCompleteTime;
        private DateTime? predictedDeliveryTime;
        private long? deliveryDurationInMinutes;
        private long? lastDefaultTerminalDeliveryDurationInMinutes;
        [HasDefaultValue]
        private bool billPrinted = false;
        [HasDefaultValue]
        private bool isPrintedBillActual = false;
        [HasDefaultValue]
        private string customerPhoneNumber = "";
        private string customerName;
        [HasDefaultValue]
        private string customerEmail = "";
        private Customer customer;
        private DeliveryAddress address;
        [NotNull, NotNullField]
        private DeliveryStatus status;
        private DeliveryCancelCause deliveryCancelCause;
        private string deliveryCancelComment;
        [HasDefaultValue]
        private int syncRevision = 0;
        [NotNull, NotNullField]
        private DeliveryProblem problem;
        [NotNull, NotNullField]
        private Group group;
        private string sourceKey;
        private MarketingSource marketingSource;
        [HasDefaultValue]
        private int personsCount = 1;
        [HasDefaultValue]
        private bool splitBetweenPersons = false;
        private double? latitude;
        private double? longitude;
        private string zone;
        private int? indexInCourierRoute;
        [HasDefaultValue]
        private bool isCustomerAuthorizedInIikoBiz = false;
        private decimal? payedSum;
        private double? avgMark;
        private double? avgCourierMark;
        private double? avgOperatorMark;
        private double? avgFoodMark;
        private string opinionComment;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<DeliverySaleItem> deliverySaleItems = new HashSet<DeliverySaleItem>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<SurveyItemResponse> opinionMarks = new HashSet<SurveyItemResponse>();

        protected Delivery() {}

        public Delivery(Guid id, DateTime date, DateTime createTime, Customer customer, DeliveryStatus status, DeliveryProblem problem, Group group)
            : base(id)
        {
            this.date = date;
            this.createTime = createTime;
            this.customer = customer;
            this.status = status;
            this.problem = problem;
            this.group = group;
        }

        public Delivery(Guid id, DateTime date, DateTime createTime, DeliveryStatus status, DeliveryProblem problem, Group group)
            : base(id)
        {
            this.date = date;
            this.createTime = createTime;
            this.status = status;
            this.problem = problem;
            this.group = group;
        }

        public bool Anonymized
        {
            get { return anonymized; }
            set { anonymized = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public Guid? SourceId
        {
            get { return sourceId; }
            set { sourceId = value; }
        }

        public Guid? MovedToDeliveryId
        {
            get { return movedToDeliveryId; }
            set { movedToDeliveryId = value; }
        }

        public Guid? MovedFromDeliveryId
        {
            get { return movedFromDeliveryId; }
            set { movedFromDeliveryId = value; }
        }

        public Guid? MovedToTerminalGroupId
        {
            get { return movedToTerminalGroupId; }
            set { movedToTerminalGroupId = value; }
        }

        public Guid? MovedFromTerminalGroupId
        {
            get { return movedFromTerminalGroupId; }
            set { movedFromTerminalGroupId = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public bool IsSelfService
        {
            get { return isSelfService; }
            set { isSelfService = value; }
        }

        [CanBeNull]
        public User Courier
        {
            get { return courier; }
            set { courier = value; }
        }

        [CanBeNull]
        public DeliveryExternalCourierServiceData EcsData
        {
            get { return ecsData; }
            set { ecsData = value; }
        }

        public bool IsCourierSelectedManually
        {
            get { return isCourierSelectedManually; }
            set { isCourierSelectedManually = value; }
        }

        [CanBeNull]
        public User DeliveryOperator
        {
            get { return deliveryOperator; }
            set { deliveryOperator = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public DateTime CreateTime
        {
            get { return createTime; }
            set { createTime = value; }
        }

        public DateTime? ConfirmTime
        {
            get { return confirmTime; }
            set { confirmTime = value; }
        }

        public DateTime? CookingStartedTime
        {
            get { return cookingStartedTime; }
            set { cookingStartedTime = value; }
        }

        public DateTime? PrintTime
        {
            get { return printTime; }
            set { printTime = value; }
        }

        public DateTime? CookingFinishTime
        {
            get { return cookingFinishTime; }
            set { cookingFinishTime = value; }
        }

        public DateTime? SendTime
        {
            get { return sendTime; }
            set { sendTime = value; }
        }

        public DateTime? ActualTime
        {
            get { return actualTime; }
            set { actualTime = value; }
        }

        public DateTime? CloseTime
        {
            get { return closeTime; }
            set { closeTime = value; }
        }

        public DateTime? BillTime
        {
            get { return billTime; }
            set { billTime = value; }
        }

        public DateTime? CancelTime
        {
            get { return cancelTime; }
            set { cancelTime = value; }
        }

        public DateTime? PredictedCookingCompleteTime
        {
            get { return predictedCookingCompleteTime; }
            set { predictedCookingCompleteTime = value; }
        }

        public DateTime? PredictedDeliveryTime
        {
            get { return predictedDeliveryTime; }
            set { predictedDeliveryTime = value; }
        }

        public long? DeliveryDurationInMinutes
        {
            get { return deliveryDurationInMinutes; }
            set { deliveryDurationInMinutes = value; }
        }

        public long? LastDefaultTerminalDeliveryDurationInMinutes
        {
            get { return lastDefaultTerminalDeliveryDurationInMinutes; }
            set { lastDefaultTerminalDeliveryDurationInMinutes = value; }
        }

        public bool BillPrinted
        {
            get { return billPrinted; }
            set { billPrinted = value; }
        }

        public bool IsPrintedBillActual
        {
            get { return isPrintedBillActual; }
            set { isPrintedBillActual = value; }
        }

        public string CustomerPhoneNumber
        {
            get { return customerPhoneNumber; }
            set { customerPhoneNumber = value; }
        }

        [CanBeNull]
        public string CustomerName
        {
            get { return customerName; }
            set { customerName = value; }
        }

        public string CustomerEmail
        {
            get { return customerEmail; }
            set { customerEmail = value; }
        }

        public Customer Customer
        {
            get { return customer; }
            set { customer = value; }
        }

        [CanBeNull]
        public DeliveryAddress Address
        {
            get { return address; }
            set { address = value; }
        }

        [NotNull]
        public DeliveryStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        [CanBeNull]
        public DeliveryCancelCause DeliveryCancelCause
        {
            get { return deliveryCancelCause; }
            set { deliveryCancelCause = value; }
        }

        [CanBeNull]
        public string DeliveryCancelComment
        {
            get { return deliveryCancelComment; }
            set { deliveryCancelComment = value; }
        }

        public int SyncRevision
        {
            get { return syncRevision; }
            set { syncRevision = value; }
        }

        [NotNull]
        public DeliveryProblem Problem
        {
            get { return problem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  problem = value;
            }
        }

        [NotNull]
        public Group Group
        {
            get { return group; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  group = value;
            }
        }

        [CanBeNull]
        public string SourceKey
        {
            get { return sourceKey; }
            set { sourceKey = value; }
        }

        [CanBeNull]
        public MarketingSource MarketingSource
        {
            get { return marketingSource; }
            set { marketingSource = value; }
        }

        public int PersonsCount
        {
            get { return personsCount; }
            set { personsCount = value; }
        }

        public bool SplitBetweenPersons
        {
            get { return splitBetweenPersons; }
            set { splitBetweenPersons = value; }
        }

        public double? Latitude
        {
            get { return latitude; }
            set { latitude = value; }
        }

        public double? Longitude
        {
            get { return longitude; }
            set { longitude = value; }
        }

        [CanBeNull]
        public string Zone
        {
            get { return zone; }
            set { zone = value; }
        }

        public int? IndexInCourierRoute
        {
            get { return indexInCourierRoute; }
            set { indexInCourierRoute = value; }
        }

        public bool IsCustomerAuthorizedInIikoBiz
        {
            get { return isCustomerAuthorizedInIikoBiz; }
            set { isCustomerAuthorizedInIikoBiz = value; }
        }

        public decimal? PayedSum
        {
            get { return payedSum; }
            set { payedSum = value; }
        }

        public double? AvgMark
        {
            get { return avgMark; }
            set { avgMark = value; }
        }

        public double? AvgCourierMark
        {
            get { return avgCourierMark; }
            set { avgCourierMark = value; }
        }

        public double? AvgOperatorMark
        {
            get { return avgOperatorMark; }
            set { avgOperatorMark = value; }
        }

        public double? AvgFoodMark
        {
            get { return avgFoodMark; }
            set { avgFoodMark = value; }
        }

        [CanBeNull]
        public string OpinionComment
        {
            get { return opinionComment; }
            set { opinionComment = value; }
        }

        [NotNull]
        public HashSet<DeliverySaleItem> DeliverySaleItems
        {
            get { return deliverySaleItems; }
        }

        [NotNull]
        public HashSet<SurveyItemResponse> OpinionMarks
        {
            get { return opinionMarks; }
        }

    }

    [DataClass("DeliveryAppearanceSetting")]
    public partial class DeliveryAppearanceSetting
    {
        private RGBColor backColorStatus;
        private RGBColor fontColorStatus;


        [CanBeNull]
        public RGBColor BackColorStatus
        {
            get { return backColorStatus; }
            set { backColorStatus = value; }
        }

        [CanBeNull]
        public RGBColor FontColorStatus
        {
            get { return fontColorStatus; }
            set { fontColorStatus = value; }
        }

    }

    [RootEntity]
    [DataClass("DeliveryAppearanceSettings")]
    public partial class DeliveryAppearanceSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DeliveryAppearanceStatus, DeliveryAppearanceSetting> appearanceSettings = new Dictionary<DeliveryAppearanceStatus, DeliveryAppearanceSetting>();
        [HasDefaultValue]
        private bool enableSettings = false;

        protected DeliveryAppearanceSettings() {}

        public DeliveryAppearanceSettings(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<DeliveryAppearanceStatus, DeliveryAppearanceSetting> AppearanceSettings
        {
            get { return appearanceSettings; }
        }

        public bool EnableSettings
        {
            get { return enableSettings; }
            set { enableSettings = value; }
        }

    }

    [DataClass("DeliveryAppearanceStatus")]
    public enum DeliveryAppearanceStatus
    {
        UNPROCESSED,
        UNCONFIRMED,
        WAIT_COOKING,
        READY_FOR_COOKING,
        COOKING_STARTED,
        COOKING_COMPLETED,
        WAITING,
        ON_WAY,
        DELIVERED,
        CLOSED,
        CANCELLED
    }

    [RootEntity]
    [DataClass("DeliveryCancelCause")]
    public partial class DeliveryCancelCause : LocalizableNamePersistedEntity
    {
        [HasDefaultValue]
        private bool system = false;
        [HasDefaultValue]
        private bool reserved = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DeliveryCancelCause() {}

        public DeliveryCancelCause(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        public bool Reserved
        {
            get { return reserved; }
            set { reserved = value; }
        }

    }

    [RootEntity]
    [DataClass("DeliveryConfirmationSettings")]
    public partial class DeliveryConfirmationSettings : PersistedEntity
    {
        [HasDefaultValue]
        private bool isConfirmationEnabled = false;
        [HasDefaultValue]
        private long confirmAllowedIntervalInMinutes = 1440;
        [HasDefaultValue]
        private bool confirmExternalOrdersAutomatically = false;
        [HasDefaultValue]
        private long confirmPaidOrdersCountNeeded = 1;
        private DeliveryConfirmationAddressComparsionMode addressComparsionMode;
        [HasDefaultValue]
        private bool sumLimitation = false;
        [HasDefaultValue]
        private decimal? sumLimit = 0;
        [HasDefaultValue]
        private bool forbidForCustomerInBlackList = false;
        [HasDefaultValue]
        private bool forbidByDishCategory = false;
        [HasDefaultValue]
        private bool forbidForCityPhone = false;
        private List<ProductCategory> forbiddenCategories;

        protected DeliveryConfirmationSettings() {}

        public DeliveryConfirmationSettings(Guid id)
            : base(id)
        {

        }
        public bool IsConfirmationEnabled
        {
            get { return isConfirmationEnabled; }
            set { isConfirmationEnabled = value; }
        }

        public long ConfirmAllowedIntervalInMinutes
        {
            get { return confirmAllowedIntervalInMinutes; }
            set { confirmAllowedIntervalInMinutes = value; }
        }

        public bool ConfirmExternalOrdersAutomatically
        {
            get { return confirmExternalOrdersAutomatically; }
            set { confirmExternalOrdersAutomatically = value; }
        }

        public long ConfirmPaidOrdersCountNeeded
        {
            get { return confirmPaidOrdersCountNeeded; }
            set { confirmPaidOrdersCountNeeded = value; }
        }

        [CanBeNull]
        public DeliveryConfirmationAddressComparsionMode AddressComparsionMode
        {
            get { return addressComparsionMode; }
            set { addressComparsionMode = value; }
        }

        public bool SumLimitation
        {
            get { return sumLimitation; }
            set { sumLimitation = value; }
        }

        public decimal? SumLimit
        {
            get { return sumLimit; }
            set { sumLimit = value; }
        }

        public bool ForbidForCustomerInBlackList
        {
            get { return forbidForCustomerInBlackList; }
            set { forbidForCustomerInBlackList = value; }
        }

        public bool ForbidByDishCategory
        {
            get { return forbidByDishCategory; }
            set { forbidByDishCategory = value; }
        }

        public bool ForbidForCityPhone
        {
            get { return forbidForCityPhone; }
            set { forbidForCityPhone = value; }
        }

        public List<ProductCategory> ForbiddenCategories
        {
            get { return forbiddenCategories; }
            set { forbiddenCategories = value; }
        }

    }

    [DataClass("DeliveryDto")]
    public partial class DeliveryDto : ReserveDeliveryDto
    {
        private Delivery delivery;

        protected DeliveryDto() {}

        public DeliveryDto(decimal? prepaySum, Delivery delivery)
            : base(prepaySum)
        {
            this.delivery = delivery;
        }
        public Delivery Delivery
        {
            get { return delivery; }
            set { delivery = value; }
        }

    }

    [DataClass("DeliveryExternalCourierServiceData")]
    public partial class DeliveryExternalCourierServiceData
    {
        private Guid? serviceId;
        private string serviceName;
        private string courierName;
        private string courierPhone;
        private string courierComment;

        public DeliveryExternalCourierServiceData() {}

        public DeliveryExternalCourierServiceData(Guid? serviceId, string serviceName, string courierName, string courierPhone, string courierComment)
        {
            this.serviceId = serviceId;
            this.serviceName = serviceName;
            this.courierName = courierName;
            this.courierPhone = courierPhone;
            this.courierComment = courierComment;
        }
        public Guid? ServiceId
        {
            get { return serviceId; }
            set { serviceId = value; }
        }

        public string ServiceName
        {
            get { return serviceName; }
            set { serviceName = value; }
        }

        public string CourierName
        {
            get { return courierName; }
            set { courierName = value; }
        }

        public string CourierPhone
        {
            get { return courierPhone; }
            set { courierPhone = value; }
        }

        public string CourierComment
        {
            get { return courierComment; }
            set { courierComment = value; }
        }

    }

    [DataClass("DeliveryInvoiceFormat")]
    [EnumClass]
    public partial class DeliveryInvoiceFormat : LocalizableName<DeliveryInvoiceFormat>
    {
        /// <summary> Лист A4. </summary>
        public static readonly DeliveryInvoiceFormat A4 = new DeliveryInvoiceFormat("A4");
        /// <summary> Рулонная. </summary>
        public static readonly DeliveryInvoiceFormat ROLL = new DeliveryInvoiceFormat("ROLL");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryInvoiceFormat(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYINVOICEFORMAT_NAME_" + __value;
        }

        public static DeliveryInvoiceFormat Parse(string value)
        {
            switch(value)
            {
                case "A4": return A4;
                case "ROLL": return ROLL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryInvoiceFormat[] VALUES
        {
            get
            {
                return new []
                {
                    A4, 
                    ROLL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryPaymentTimeOption")]
    [EnumClass]
    public partial class DeliveryPaymentTimeOption : LocalizableName<DeliveryPaymentTimeOption>
    {
        /// <summary> При отправке доставки. </summary>
        public static readonly DeliveryPaymentTimeOption AT_DELIVERY_SEND = new DeliveryPaymentTimeOption("AT_DELIVERY_SEND");
        /// <summary> При закрытии доставки. </summary>
        public static readonly DeliveryPaymentTimeOption AT_DELIVERY_CLOSE = new DeliveryPaymentTimeOption("AT_DELIVERY_CLOSE");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryPaymentTimeOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYPAYMENTTIMEOPTION_NAME_" + __value;
        }

        public static DeliveryPaymentTimeOption Parse(string value)
        {
            switch(value)
            {
                case "AT_DELIVERY_SEND": return AT_DELIVERY_SEND;
                case "AT_DELIVERY_CLOSE": return AT_DELIVERY_CLOSE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryPaymentTimeOption[] VALUES
        {
            get
            {
                return new []
                {
                    AT_DELIVERY_SEND, 
                    AT_DELIVERY_CLOSE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryProblem")]
    public partial class DeliveryProblem
    {
        private bool hasProblem;
        private string problem;

        public DeliveryProblem() {}

        public DeliveryProblem(bool hasProblem, string problem)
        {
            this.hasProblem = hasProblem;
            this.problem = problem;
        }
        public bool HasProblem
        {
            get { return hasProblem; }
            set { hasProblem = value; }
        }

        public string Problem
        {
            get { return problem; }
            set { problem = value; }
        }

    }

    [DataClass("DeliveryRestrictionItem")]
    public partial class DeliveryRestrictionItem
    {
        private decimal? minSum;
        private Guid? deliveryTerminalId;
        private Guid? departmentId;
        private string zone;
        private int weekMap;
        private DayTime from;
        private DayTime to;
        [HasDefaultValue]
        private int priority = 1;
        [HasDefaultValue]
        private long deliveryDurationInMinutes = 60;
        private Product deliveryServiceProduct;

        public DeliveryRestrictionItem() {}

        public DeliveryRestrictionItem(decimal? minSum, Guid? deliveryTerminalId, Guid? departmentId, string zone, int weekMap, DayTime from, DayTime to)
        {
            this.minSum = minSum;
            this.deliveryTerminalId = deliveryTerminalId;
            this.departmentId = departmentId;
            this.zone = zone;
            this.weekMap = weekMap;
            this.from = from;
            this.to = to;
        }
        public decimal? MinSum
        {
            get { return minSum; }
            set { minSum = value; }
        }

        public Guid? DeliveryTerminalId
        {
            get { return deliveryTerminalId; }
            set { deliveryTerminalId = value; }
        }

        public Guid? DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        public string Zone
        {
            get { return zone; }
            set { zone = value; }
        }

        public int WeekMap
        {
            get { return weekMap; }
            set { weekMap = value; }
        }

        public DayTime From
        {
            get { return from; }
            set { from = value; }
        }

        public DayTime To
        {
            get { return to; }
            set { to = value; }
        }

        public int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        public long DeliveryDurationInMinutes
        {
            get { return deliveryDurationInMinutes; }
            set { deliveryDurationInMinutes = value; }
        }

        [CanBeNull]
        public Product DeliveryServiceProduct
        {
            get { return deliveryServiceProduct; }
            set { deliveryServiceProduct = value; }
        }

    }

    [RootEntity]
    [DataClass("DeliveryRestrictions")]
    public partial class DeliveryRestrictions : PersistedEntity
    {
        private string deliveryRegionsMapUrl;
        private DeliveryGeocodeServiceType deliveryGeocodeServiceType;
        [HasDefaultValue]
        private long defaultDeliveryDurationInMinutes = 60;
        [HasDefaultValue]
        private bool useSameDeliveryDuration = true;
        [HasDefaultValue]
        private bool useSameMinSum = true;
        private decimal? defaultMinSum;
        [HasDefaultValue]
        private bool useSameWorkTimeInterval = false;
        private DayTime defaultFrom;
        private DayTime defaultTo;
        [HasDefaultValue]
        private bool useSameRestrictionsOnAllWeek = false;
        [HasDefaultValue]
        private bool rejectOnGeocodingError = true;
        [HasDefaultValue]
        private bool addDeliveryServiceCost = false;
        private HashSet<Guid> orderTypesToAddDeliveryServiceCost;
        [HasDefaultValue]
        private bool useSameDeliveryServiceProduct = true;
        private Product defaultDeliveryServiceProduct;
        private Account accountDeliveryServiceProduct;
        private ICollection<DeliveryRestrictionItem> restrictions;
        private ICollection<DeliveryZone> deliveryZones;
        [HasDefaultValue]
        private bool useExternalAssignationService = false;
        private string externalAssignationServiceUrl;
        [HasDefaultValue]
        private bool trustLastCheck = true;
        [HasDefaultValue]
        private bool requireExactAddressForGeocoding = false;
        private DeliveryRestrictionsMode zonesMode;

        protected DeliveryRestrictions() {}

        public DeliveryRestrictions(Guid id, string externalAssignationServiceUrl, DeliveryRestrictionsMode zonesMode)
            : base(id)
        {
            this.externalAssignationServiceUrl = externalAssignationServiceUrl;
            this.zonesMode = zonesMode;
        }

        public DeliveryRestrictions(Guid id)
            : base(id)
        {

        }

        [CanBeNull]
        public string DeliveryRegionsMapUrl
        {
            get { return deliveryRegionsMapUrl; }
            set { deliveryRegionsMapUrl = value; }
        }

        [CanBeNull]
        public DeliveryGeocodeServiceType DeliveryGeocodeServiceType
        {
            get { return deliveryGeocodeServiceType; }
            set { deliveryGeocodeServiceType = value; }
        }

        public long DefaultDeliveryDurationInMinutes
        {
            get { return defaultDeliveryDurationInMinutes; }
            set { defaultDeliveryDurationInMinutes = value; }
        }

        public bool UseSameDeliveryDuration
        {
            get { return useSameDeliveryDuration; }
            set { useSameDeliveryDuration = value; }
        }

        public bool UseSameMinSum
        {
            get { return useSameMinSum; }
            set { useSameMinSum = value; }
        }

        public decimal? DefaultMinSum
        {
            get { return defaultMinSum; }
            set { defaultMinSum = value; }
        }

        public bool UseSameWorkTimeInterval
        {
            get { return useSameWorkTimeInterval; }
            set { useSameWorkTimeInterval = value; }
        }

        [CanBeNull]
        public DayTime DefaultFrom
        {
            get { return defaultFrom; }
            set { defaultFrom = value; }
        }

        [CanBeNull]
        public DayTime DefaultTo
        {
            get { return defaultTo; }
            set { defaultTo = value; }
        }

        public bool UseSameRestrictionsOnAllWeek
        {
            get { return useSameRestrictionsOnAllWeek; }
            set { useSameRestrictionsOnAllWeek = value; }
        }

        public bool RejectOnGeocodingError
        {
            get { return rejectOnGeocodingError; }
            set { rejectOnGeocodingError = value; }
        }

        public bool AddDeliveryServiceCost
        {
            get { return addDeliveryServiceCost; }
            set { addDeliveryServiceCost = value; }
        }

        [CanBeNull]
        public HashSet<Guid> OrderTypesToAddDeliveryServiceCost
        {
            get { return orderTypesToAddDeliveryServiceCost; }
            set { orderTypesToAddDeliveryServiceCost = value; }
        }

        public bool UseSameDeliveryServiceProduct
        {
            get { return useSameDeliveryServiceProduct; }
            set { useSameDeliveryServiceProduct = value; }
        }

        [CanBeNull]
        public Product DefaultDeliveryServiceProduct
        {
            get { return defaultDeliveryServiceProduct; }
            set { defaultDeliveryServiceProduct = value; }
        }

        [CanBeNull]
        public Account AccountDeliveryServiceProduct
        {
            get { return accountDeliveryServiceProduct; }
            set { accountDeliveryServiceProduct = value; }
        }

        public ICollection<DeliveryRestrictionItem> Restrictions
        {
            get { return restrictions; }
            set { restrictions = value; }
        }

        public ICollection<DeliveryZone> DeliveryZones
        {
            get { return deliveryZones; }
            set { deliveryZones = value; }
        }

        public bool UseExternalAssignationService
        {
            get { return useExternalAssignationService; }
            set { useExternalAssignationService = value; }
        }

        public string ExternalAssignationServiceUrl
        {
            get { return externalAssignationServiceUrl; }
            set { externalAssignationServiceUrl = value; }
        }

        public bool TrustLastCheck
        {
            get { return trustLastCheck; }
            set { trustLastCheck = value; }
        }

        public bool RequireExactAddressForGeocoding
        {
            get { return requireExactAddressForGeocoding; }
            set { requireExactAddressForGeocoding = value; }
        }

        public DeliveryRestrictionsMode ZonesMode
        {
            get { return zonesMode; }
            set { zonesMode = value; }
        }

    }

    [DataClass("DeliveryRestrictionsMode")]
    [EnumClass]
    public partial class DeliveryRestrictionsMode : LocalizableName<DeliveryRestrictionsMode>
    {
        /// <summary> Не использовать. </summary>
        public static readonly DeliveryRestrictionsMode DO_NOT_USE = new DeliveryRestrictionsMode("DO_NOT_USE");
        /// <summary> Использовать карты. </summary>
        public static readonly DeliveryRestrictionsMode MAP_POLYGONS = new DeliveryRestrictionsMode("MAP_POLYGONS");
        /// <summary> Ручное создание. </summary>
        public static readonly DeliveryRestrictionsMode MANUALLY_DEFINED = new DeliveryRestrictionsMode("MANUALLY_DEFINED");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryRestrictionsMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYRESTRICTIONSMODE_NAME_" + __value;
        }

        public static DeliveryRestrictionsMode Parse(string value)
        {
            switch(value)
            {
                case "DO_NOT_USE": return DO_NOT_USE;
                case "MAP_POLYGONS": return MAP_POLYGONS;
                case "MANUALLY_DEFINED": return MANUALLY_DEFINED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryRestrictionsMode[] VALUES
        {
            get
            {
                return new []
                {
                    DO_NOT_USE, 
                    MAP_POLYGONS, 
                    MANUALLY_DEFINED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryServerConstants")]
    [EnumClass]
    public partial class DeliveryServerConstants
    {
        public static readonly DeliveryServerConstants INSTANCE = new DeliveryServerConstants("INSTANCE", Serializer.Deserialize<ByValue<DeliveryRestrictions>>("<r cls=\"DeliveryRestrictions\" eid=\"ae95d00b-537f-d315-d646-a8822cbebc7d\"><revision>0</revision><lastModifyNode null=\"1\"></lastModifyNode><deleted>false</deleted><modified null=\"1\"></modified><created null=\"1\"></created><deletedDate null=\"1\"></deletedDate><userCreatedId null=\"1\"></userCreatedId><userModifiedId null=\"1\"></userModifiedId><localId>-1</localId><deliveryRegionsMapUrl null=\"1\"></deliveryRegionsMapUrl><deliveryGeocodeServiceType>TWOGIS</deliveryGeocodeServiceType><defaultDeliveryDurationInMinutes>60</defaultDeliveryDurationInMinutes><useSameDeliveryDuration>true</useSameDeliveryDuration><useSameMinSum>true</useSameMinSum><defaultMinSum>0</defaultMinSum><useSameWorkTimeInterval>false</useSameWorkTimeInterval><defaultFrom null=\"1\"></defaultFrom><defaultTo null=\"1\"></defaultTo><useSameRestrictionsOnAllWeek>true</useSameRestrictionsOnAllWeek><rejectOnGeocodingError>true</rejectOnGeocodingError><addDeliveryServiceCost>false</addDeliveryServiceCost><orderTypesToAddDeliveryServiceCost null=\"1\"></orderTypesToAddDeliveryServiceCost><useSameDeliveryServiceProduct>true</useSameDeliveryServiceProduct><defaultDeliveryServiceProduct null=\"1\"></defaultDeliveryServiceProduct><accountDeliveryServiceProduct null=\"1\"></accountDeliveryServiceProduct><restrictions></restrictions><deliveryZones></deliveryZones><useExternalAssignationService>false</useExternalAssignationService><externalAssignationServiceUrl null=\"1\"></externalAssignationServiceUrl><trustLastCheck>true</trustLastCheck><requireExactAddressForGeocoding>false</requireExactAddressForGeocoding><zonesMode>DO_NOT_USE</zonesMode></r>", false));

        private readonly ByValue<DeliveryRestrictions> defaultDeliveryRestrictions;
        private readonly string __value;

        private DeliveryServerConstants(string __value, ByValue<DeliveryRestrictions> defaultDeliveryRestrictions)
        {
            this.__value = __value;
            this.defaultDeliveryRestrictions = defaultDeliveryRestrictions;
        }

        public static DeliveryServerConstants Parse(string value)
        {
            switch(value)
            {
                case "INSTANCE": return INSTANCE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryServerConstants[] VALUES
        {
            get
            {
                return new []
                {
                    INSTANCE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public ByValue<DeliveryRestrictions> DefaultDeliveryRestrictions
        {
            get { return defaultDeliveryRestrictions; }
        }

    }

    [RootEntity]
    [DataClass("DeliverySettings")]
    public partial class DeliverySettings : PersistedEntity
    {
        [HasDefaultValue]
        private long defaultSelfServiceDeliveryDurationInMinutes = 15;
        [NotNull, NotNullField]
        private DeliverySettingsServiceType serviceType;
        private DeliveryBillPrintTimeOption deliveryBillPrintTimeOption;
        private DeliveryStickerPrintTimeOption deliveryStickerPrintTimeOption;
        private DeliveryServicePrintTimeOption deliveryServicePrintTimeOption;
        private DeliveryNumberGenerationOption deliveryNumberGenerationOption;
        private DepartmentEntity department;
        private DeliverySmsSendingSettings smsSendingSettings;
        private DeliveryAppearanceSettings appearanceSettings;
        private Guid? defaultCity;
        private HashSet<Guid> deliveryCities;
        [HasDefaultValue]
        private bool beepOnDeliveriesUpdate = true;
        [HasDefaultValue]
        private bool createSelfServiceDeliveryWithoutCustomer = false;
        [HasDefaultValue]
        private bool createDeliveryWithKitchenWorkload = false;
        [HasDefaultValue]
        private bool marketingSourceRequired = false;
        [HasDefaultValue]
        private int timeLifeOfCourierRoutes = 7;
        [HasDefaultValue]
        private bool isValidateCourierLocationOnCompleteDelivery = false;
        [HasDefaultValue]
        private int rangeAroundAddressForCompleteDelivery = 100;
        [HasDefaultValue]
        private int mobileDeliveryUpdateFrequency = 60;
        [HasDefaultValue]
        private bool showAlertTimerInMobile = true;
        private DeliveryPaymentTimeOption deliveryPaymentTimeOption;
        private Guid defaultPaymentTypeId;
        [HasDefaultValue]
        private bool showTimeToCookNotification = true;
        private IikoNetAutomationOption iikoNetAutomationOption;
        private DeliveryInvoiceFormat deliveryInvoiceFormat;
        [HasDefaultValue]
        private int deliveryBillCount = 1;
        [HasDefaultValue]
        private bool processExternalPrepayOnAddition = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> sourceKeysAllowedToCreateUnknownStreets = new List<string>();

        protected DeliverySettings() {}

        public DeliverySettings(Guid id, DeliverySettingsServiceType serviceType, Guid? defaultCity, DeliveryPaymentTimeOption deliveryPaymentTimeOption, Guid defaultPaymentTypeId, IikoNetAutomationOption iikoNetAutomationOption, DeliveryInvoiceFormat deliveryInvoiceFormat)
            : base(id)
        {
            this.serviceType = serviceType;
            this.defaultCity = defaultCity;
            this.deliveryPaymentTimeOption = deliveryPaymentTimeOption;
            this.defaultPaymentTypeId = defaultPaymentTypeId;
            this.iikoNetAutomationOption = iikoNetAutomationOption;
            this.deliveryInvoiceFormat = deliveryInvoiceFormat;
        }

        public DeliverySettings(Guid id, DeliverySettingsServiceType serviceType, Guid defaultPaymentTypeId)
            : base(id)
        {
            this.serviceType = serviceType;
            this.defaultPaymentTypeId = defaultPaymentTypeId;
        }

        public long DefaultSelfServiceDeliveryDurationInMinutes
        {
            get { return defaultSelfServiceDeliveryDurationInMinutes; }
            set { defaultSelfServiceDeliveryDurationInMinutes = value; }
        }

        [NotNull]
        public DeliverySettingsServiceType ServiceType
        {
            get { return serviceType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  serviceType = value;
            }
        }

        [CanBeNull]
        public DeliveryBillPrintTimeOption DeliveryBillPrintTimeOption
        {
            get { return deliveryBillPrintTimeOption; }
            set { deliveryBillPrintTimeOption = value; }
        }

        [CanBeNull]
        public DeliveryStickerPrintTimeOption DeliveryStickerPrintTimeOption
        {
            get { return deliveryStickerPrintTimeOption; }
            set { deliveryStickerPrintTimeOption = value; }
        }

        [CanBeNull]
        public DeliveryServicePrintTimeOption DeliveryServicePrintTimeOption
        {
            get { return deliveryServicePrintTimeOption; }
            set { deliveryServicePrintTimeOption = value; }
        }

        [CanBeNull]
        public DeliveryNumberGenerationOption DeliveryNumberGenerationOption
        {
            get { return deliveryNumberGenerationOption; }
            set { deliveryNumberGenerationOption = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [CanBeNull]
        public DeliverySmsSendingSettings SmsSendingSettings
        {
            get { return smsSendingSettings; }
            set { smsSendingSettings = value; }
        }

        [CanBeNull]
        public DeliveryAppearanceSettings AppearanceSettings
        {
            get { return appearanceSettings; }
            set { appearanceSettings = value; }
        }

        public Guid? DefaultCity
        {
            get { return defaultCity; }
            set { defaultCity = value; }
        }

        [CanBeNull]
        public HashSet<Guid> DeliveryCities
        {
            get { return deliveryCities; }
            set { deliveryCities = value; }
        }

        public bool BeepOnDeliveriesUpdate
        {
            get { return beepOnDeliveriesUpdate; }
            set { beepOnDeliveriesUpdate = value; }
        }

        public bool CreateSelfServiceDeliveryWithoutCustomer
        {
            get { return createSelfServiceDeliveryWithoutCustomer; }
            set { createSelfServiceDeliveryWithoutCustomer = value; }
        }

        public bool CreateDeliveryWithKitchenWorkload
        {
            get { return createDeliveryWithKitchenWorkload; }
            set { createDeliveryWithKitchenWorkload = value; }
        }

        public bool MarketingSourceRequired
        {
            get { return marketingSourceRequired; }
            set { marketingSourceRequired = value; }
        }

        public int TimeLifeOfCourierRoutes
        {
            get { return timeLifeOfCourierRoutes; }
            set { timeLifeOfCourierRoutes = value; }
        }

        public bool IsValidateCourierLocationOnCompleteDelivery
        {
            get { return isValidateCourierLocationOnCompleteDelivery; }
            set { isValidateCourierLocationOnCompleteDelivery = value; }
        }

        public int RangeAroundAddressForCompleteDelivery
        {
            get { return rangeAroundAddressForCompleteDelivery; }
            set { rangeAroundAddressForCompleteDelivery = value; }
        }

        public int MobileDeliveryUpdateFrequency
        {
            get { return mobileDeliveryUpdateFrequency; }
            set { mobileDeliveryUpdateFrequency = value; }
        }

        public bool ShowAlertTimerInMobile
        {
            get { return showAlertTimerInMobile; }
            set { showAlertTimerInMobile = value; }
        }

        public DeliveryPaymentTimeOption DeliveryPaymentTimeOption
        {
            get { return deliveryPaymentTimeOption; }
            set { deliveryPaymentTimeOption = value; }
        }

        public Guid DefaultPaymentTypeId
        {
            get { return defaultPaymentTypeId; }
            set { defaultPaymentTypeId = value; }
        }

        public bool ShowTimeToCookNotification
        {
            get { return showTimeToCookNotification; }
            set { showTimeToCookNotification = value; }
        }

        public IikoNetAutomationOption IikoNetAutomationOption
        {
            get { return iikoNetAutomationOption; }
            set { iikoNetAutomationOption = value; }
        }

        public DeliveryInvoiceFormat DeliveryInvoiceFormat
        {
            get { return deliveryInvoiceFormat; }
            set { deliveryInvoiceFormat = value; }
        }

        public int DeliveryBillCount
        {
            get { return deliveryBillCount; }
            set { deliveryBillCount = value; }
        }

        public bool ProcessExternalPrepayOnAddition
        {
            get { return processExternalPrepayOnAddition; }
            set { processExternalPrepayOnAddition = value; }
        }

        [NotNull]
        public List<string> SourceKeysAllowedToCreateUnknownStreets
        {
            get { return sourceKeysAllowedToCreateUnknownStreets; }
        }

    }

    [DataClass("DeliverySettingsServiceType")]
    [EnumClass]
    public partial class DeliverySettingsServiceType : LocalizableName<DeliverySettingsServiceType>
    {
        /// <summary> Только курьером. </summary>
        public static readonly DeliverySettingsServiceType COURIER_ONLY = new DeliverySettingsServiceType("COURIER_ONLY", 1);
        /// <summary> Только самовывоз. </summary>
        public static readonly DeliverySettingsServiceType SELF_SERVICE_ONLY = new DeliverySettingsServiceType("SELF_SERVICE_ONLY", 2);
        /// <summary> Курьером и самовывоз. </summary>
        public static readonly DeliverySettingsServiceType COURIER_AND_SELF_SERVICE = new DeliverySettingsServiceType("COURIER_AND_SELF_SERVICE", 3);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private DeliverySettingsServiceType(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYSETTINGSSERVICETYPE_NAME_" + __value;
            this.id = id;
        }

        public static DeliverySettingsServiceType Parse(string value)
        {
            switch(value)
            {
                case "COURIER_ONLY": return COURIER_ONLY;
                case "SELF_SERVICE_ONLY": return SELF_SERVICE_ONLY;
                case "COURIER_AND_SELF_SERVICE": return COURIER_AND_SELF_SERVICE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliverySettingsServiceType[] VALUES
        {
            get
            {
                return new []
                {
                    COURIER_ONLY, 
                    SELF_SERVICE_ONLY, 
                    COURIER_AND_SELF_SERVICE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("DeliverySmsSendingEventType")]
    public enum DeliverySmsSendingEventType
    {
        ON_DELIVERY_STATUS_SET_NEW,
        ON_DELIVERY_ITEMS_COOKING_STARTED,
        ON_DELIVERY_ITEMS_COOKING_COMPLETED,
        ON_DELIVERY_STATUS_SET_WAITING,
        ON_DELIVERY_STATUS_SET_ON_WAY,
        ON_DELIVERY_STATUS_SET_CLOSED,
        ON_DELIVERY_STATUS_SET_CANCELLED,
        ON_DELIVERY_STATUS_SET_DELIVERED,
        ON_DELIVERY_STATUS_SET_UNCONFIRMED,
        ON_DELIVERY_SUM_CHANGED
    }

    [DataClass("DeliverySmsSendingMode")]
    [EnumClass]
    public partial class DeliverySmsSendingMode : LocalizableName<DeliverySmsSendingMode>
    {
        /// <summary> SMS-уведомления. </summary>
        public static readonly DeliverySmsSendingMode SMS_ONLY = new DeliverySmsSendingMode("SMS_ONLY", 0);
        /// <summary> Push-уведомления. </summary>
        public static readonly DeliverySmsSendingMode PUSH_ONLY = new DeliverySmsSendingMode("PUSH_ONLY", 1);
        /// <summary> Push-уведомления и SMS-уведомления, если push-не удался. </summary>
        public static readonly DeliverySmsSendingMode PUSH_OR_SMS = new DeliverySmsSendingMode("PUSH_OR_SMS", 2);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private DeliverySmsSendingMode(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYSMSSENDINGMODE_NAME_" + __value;
            this.id = id;
        }

        public static DeliverySmsSendingMode Parse(string value)
        {
            switch(value)
            {
                case "SMS_ONLY": return SMS_ONLY;
                case "PUSH_ONLY": return PUSH_ONLY;
                case "PUSH_OR_SMS": return PUSH_OR_SMS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliverySmsSendingMode[] VALUES
        {
            get
            {
                return new []
                {
                    SMS_ONLY, 
                    PUSH_ONLY, 
                    PUSH_OR_SMS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("DeliverySmsSendingSetting")]
    public partial class DeliverySmsSendingSetting
    {
        private bool sendSms;
        private string template;

        protected DeliverySmsSendingSetting() {}

        public DeliverySmsSendingSetting(bool sendSms, string template)
        {
            this.sendSms = sendSms;
            this.template = template;
        }
        public bool SendSms
        {
            get { return sendSms; }
            set { sendSms = value; }
        }

        public string Template
        {
            get { return template; }
            set { template = value; }
        }

    }

    [RootEntity]
    [DataClass("DeliverySmsSendingSettings")]
    public partial class DeliverySmsSendingSettings : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DeliverySmsSendingEventType, DeliverySmsSendingSetting> eventSettings = new Dictionary<DeliverySmsSendingEventType, DeliverySmsSendingSetting>();
        private DeliverySmsSendingMode mode;
        [HasDefaultValue]
        private string pushUrl = "";

        protected DeliverySmsSendingSettings() {}

        public DeliverySmsSendingSettings(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<DeliverySmsSendingEventType, DeliverySmsSendingSetting> EventSettings
        {
            get { return eventSettings; }
        }

        [CanBeNull]
        public DeliverySmsSendingMode Mode
        {
            get { return mode; }
            set { mode = value; }
        }

        public string PushUrl
        {
            get { return pushUrl; }
            set { pushUrl = value; }
        }

    }

    [DataClass("DeliveryStatus")]
    [EnumClass]
    public partial class DeliveryStatus : LocalizableName<DeliveryStatus>
    {
        /// <summary> Новая. </summary>
        public static readonly DeliveryStatus NEW = new DeliveryStatus("NEW", 1);
        /// <summary> Ждет отправки. </summary>
        public static readonly DeliveryStatus WAITING = new DeliveryStatus("WAITING", 2);
        /// <summary> В пути. </summary>
        public static readonly DeliveryStatus ON_WAY = new DeliveryStatus("ON_WAY", 3);
        /// <summary> Закрыта. </summary>
        public static readonly DeliveryStatus CLOSED = new DeliveryStatus("CLOSED", 4);
        /// <summary> Отменена. </summary>
        public static readonly DeliveryStatus CANCELLED = new DeliveryStatus("CANCELLED", 5);
        /// <summary> Доставлена. </summary>
        public static readonly DeliveryStatus DELIVERED = new DeliveryStatus("DELIVERED", 6);
        /// <summary> Не подтверждена. </summary>
        public static readonly DeliveryStatus UNCONFIRMED = new DeliveryStatus("UNCONFIRMED", 7);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryStatus(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYSTATUS_NAME_" + __value;
            this.id = id;
        }

        public static DeliveryStatus Parse(string value)
        {
            switch(value)
            {
                case "NEW": return NEW;
                case "WAITING": return WAITING;
                case "ON_WAY": return ON_WAY;
                case "CLOSED": return CLOSED;
                case "CANCELLED": return CANCELLED;
                case "DELIVERED": return DELIVERED;
                case "UNCONFIRMED": return UNCONFIRMED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NEW, 
                    WAITING, 
                    ON_WAY, 
                    CLOSED, 
                    CANCELLED, 
                    DELIVERED, 
                    UNCONFIRMED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("DeliveryGeocodeResponse")]
    public partial class DeliveryGeocodeResponse
    {
        private bool error;
        private bool addressNotFoundError;
        private decimal? latitude;
        private decimal? longitude;
        private ICollection<string> zones;

        public DeliveryGeocodeResponse() {}

        public DeliveryGeocodeResponse(bool error, bool addressNotFoundError, decimal? latitude, decimal? longitude)
        {
            this.error = error;
            this.addressNotFoundError = addressNotFoundError;
            this.latitude = latitude;
            this.longitude = longitude;
        }
        public bool Error
        {
            get { return error; }
            set { error = value; }
        }

        public bool AddressNotFoundError
        {
            get { return addressNotFoundError; }
            set { addressNotFoundError = value; }
        }

        public decimal? Latitude
        {
            get { return latitude; }
            set { latitude = value; }
        }

        public decimal? Longitude
        {
            get { return longitude; }
            set { longitude = value; }
        }

        public ICollection<string> Zones
        {
            get { return zones; }
            set { zones = value; }
        }

    }

    [DataClass("DeliveryGeocodeServiceType")]
    [EnumClass]
    public partial class DeliveryGeocodeServiceType : LocalizableName<DeliveryGeocodeServiceType>
    {
        /// <summary> Yandex. </summary>
        public static readonly DeliveryGeocodeServiceType YANDEX = new DeliveryGeocodeServiceType("YANDEX");
        /// <summary> Google. </summary>
        public static readonly DeliveryGeocodeServiceType GOOGLE = new DeliveryGeocodeServiceType("GOOGLE");
        /// <summary> OpenStreetMap. </summary>
        public static readonly DeliveryGeocodeServiceType OPENSTREETMAP = new DeliveryGeocodeServiceType("OPENSTREETMAP");
        /// <summary> 2GIS. </summary>
        public static readonly DeliveryGeocodeServiceType TWOGIS = new DeliveryGeocodeServiceType("TWOGIS");

        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryGeocodeServiceType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYGEOCODESERVICETYPE_NAME_" + __value;
        }

        public static DeliveryGeocodeServiceType Parse(string value)
        {
            switch(value)
            {
                case "YANDEX": return YANDEX;
                case "GOOGLE": return GOOGLE;
                case "OPENSTREETMAP": return OPENSTREETMAP;
                case "TWOGIS": return TWOGIS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryGeocodeServiceType[] VALUES
        {
            get
            {
                return new []
                {
                    YANDEX, 
                    GOOGLE, 
                    OPENSTREETMAP, 
                    TWOGIS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DeliveryZone")]
    public partial class DeliveryZone
    {
        private string name;
        [HasDefaultValue]
        private bool isDeleted = false;
        private List<DeliveryZonePoint> coordinates;
        private List<DeliveryZoneAddressBinding> addresses;

        protected DeliveryZone() {}

        public DeliveryZone(string name)
        {
            this.name = name;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public bool IsDeleted
        {
            get { return isDeleted; }
            set { isDeleted = value; }
        }

        public List<DeliveryZonePoint> Coordinates
        {
            get { return coordinates; }
            set { coordinates = value; }
        }

        public List<DeliveryZoneAddressBinding> Addresses
        {
            get { return addresses; }
            set { addresses = value; }
        }

    }

    [DataClass("DeliveryZoneAddressBinding")]
    public partial class DeliveryZoneAddressBinding
    {
        private Guid streetId;
        private string index;
        private HousesRange houses;

        protected DeliveryZoneAddressBinding() {}

        public DeliveryZoneAddressBinding(Guid streetId, string index, HousesRange houses)
        {
            this.streetId = streetId;
            this.index = index;
            this.houses = houses;
        }

        public DeliveryZoneAddressBinding(Guid streetId)
        {
            this.streetId = streetId;
        }

        public Guid StreetId
        {
            get { return streetId; }
            set { streetId = value; }
        }

        public string Index
        {
            get { return index; }
            set { index = value; }
        }

        public HousesRange Houses
        {
            get { return houses; }
            set { houses = value; }
        }

    }

    [DataClass("DeliveryZonePoint")]
    public partial class DeliveryZonePoint
    {
        [HasDefaultValue]
        private decimal x = 0;
        [HasDefaultValue]
        private decimal y = 0;

        protected DeliveryZonePoint() {}

        public DeliveryZonePoint(decimal x, decimal y)
        {
            this.x = x;
            this.y = y;
        }
        public decimal X
        {
            get { return x; }
            set { x = value; }
        }

        public decimal Y
        {
            get { return y; }
            set { y = value; }
        }

    }

    [DataClass("HousesRange")]
    public partial class HousesRange
    {
        private HousesRangeType type;
        private List<string> specificNumbers;
        private int startingNumber;
        private int maxNumber;
        private bool isUnlimitedRange;

        protected HousesRange() {}

        public HousesRange(HousesRangeType type, int startingNumber, int maxNumber, bool isUnlimitedRange)
        {
            this.type = type;
            this.startingNumber = startingNumber;
            this.maxNumber = maxNumber;
            this.isUnlimitedRange = isUnlimitedRange;
        }
        public HousesRangeType Type
        {
            get { return type; }
            set { type = value; }
        }

        public List<string> SpecificNumbers
        {
            get { return specificNumbers; }
            set { specificNumbers = value; }
        }

        public int StartingNumber
        {
            get { return startingNumber; }
            set { startingNumber = value; }
        }

        public int MaxNumber
        {
            get { return maxNumber; }
            set { maxNumber = value; }
        }

        public bool IsUnlimitedRange
        {
            get { return isUnlimitedRange; }
            set { isUnlimitedRange = value; }
        }

    }

    [DataClass("HousesRangeType")]
    [EnumClass]
    public partial class HousesRangeType : LocalizableName<HousesRangeType>
    {
        /// <summary> Четные и нечетные. </summary>
        public static readonly HousesRangeType ALL = new HousesRangeType("ALL", 0);
        /// <summary> Четные. </summary>
        public static readonly HousesRangeType EVEN = new HousesRangeType("EVEN", 1);
        /// <summary> Нечетные. </summary>
        public static readonly HousesRangeType ODD = new HousesRangeType("ODD", 2);
        /// <summary> Список номеров. </summary>
        public static readonly HousesRangeType SPECIFIC_NUMBERS = new HousesRangeType("SPECIFIC_NUMBERS", 3);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private HousesRangeType(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "HOUSESRANGETYPE_NAME_" + __value;
            this.id = id;
        }

        public static HousesRangeType Parse(string value)
        {
            switch(value)
            {
                case "ALL": return ALL;
                case "EVEN": return EVEN;
                case "ODD": return ODD;
                case "SPECIFIC_NUMBERS": return SPECIFIC_NUMBERS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static HousesRangeType[] VALUES
        {
            get
            {
                return new []
                {
                    ALL, 
                    EVEN, 
                    ODD, 
                    SPECIFIC_NUMBERS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("DeliveryHeatMapInfo")]
    public partial class DeliveryHeatMapInfo
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<DeliveryPolygon> polygons = new List<DeliveryPolygon>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<double> legendValues = new List<double>();
        private bool success;
        private bool isDeliveryZonesConfigurated;
        private int colorRange;
        private int xNumberOfPolygons;
        private int yNumberOfPolygons;
        private double centerLatitudeCoordinate;
        private double centerLongitudeCoordinate;
        private double minLatitudeCoordinate;
        private double minLongitudeCoordinate;
        private double maxLatitudeCoordinate;
        private double maxLongitudeCoordinate;
        private double width;
        private double height;

        protected DeliveryHeatMapInfo() {}

        public DeliveryHeatMapInfo(bool success, bool isDeliveryZonesConfigurated, int colorRange, int xNumberOfPolygons, int yNumberOfPolygons, double centerLatitudeCoordinate, double centerLongitudeCoordinate, double minLatitudeCoordinate, double minLongitudeCoordinate, double maxLatitudeCoordinate, double maxLongitudeCoordinate, double width, double height)
        {
            this.success = success;
            this.isDeliveryZonesConfigurated = isDeliveryZonesConfigurated;
            this.colorRange = colorRange;
            this.xNumberOfPolygons = xNumberOfPolygons;
            this.yNumberOfPolygons = yNumberOfPolygons;
            this.centerLatitudeCoordinate = centerLatitudeCoordinate;
            this.centerLongitudeCoordinate = centerLongitudeCoordinate;
            this.minLatitudeCoordinate = minLatitudeCoordinate;
            this.minLongitudeCoordinate = minLongitudeCoordinate;
            this.maxLatitudeCoordinate = maxLatitudeCoordinate;
            this.maxLongitudeCoordinate = maxLongitudeCoordinate;
            this.width = width;
            this.height = height;
        }
        [NotNull]
        public List<DeliveryPolygon> Polygons
        {
            get { return polygons; }
        }

        [NotNull]
        public List<double> LegendValues
        {
            get { return legendValues; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public bool IsDeliveryZonesConfigurated
        {
            get { return isDeliveryZonesConfigurated; }
            set { isDeliveryZonesConfigurated = value; }
        }

        public int ColorRange
        {
            get { return colorRange; }
            set { colorRange = value; }
        }

        public int XNumberOfPolygons
        {
            get { return xNumberOfPolygons; }
            set { xNumberOfPolygons = value; }
        }

        public int YNumberOfPolygons
        {
            get { return yNumberOfPolygons; }
            set { yNumberOfPolygons = value; }
        }

        public double CenterLatitudeCoordinate
        {
            get { return centerLatitudeCoordinate; }
            set { centerLatitudeCoordinate = value; }
        }

        public double CenterLongitudeCoordinate
        {
            get { return centerLongitudeCoordinate; }
            set { centerLongitudeCoordinate = value; }
        }

        public double MinLatitudeCoordinate
        {
            get { return minLatitudeCoordinate; }
            set { minLatitudeCoordinate = value; }
        }

        public double MinLongitudeCoordinate
        {
            get { return minLongitudeCoordinate; }
            set { minLongitudeCoordinate = value; }
        }

        public double MaxLatitudeCoordinate
        {
            get { return maxLatitudeCoordinate; }
            set { maxLatitudeCoordinate = value; }
        }

        public double MaxLongitudeCoordinate
        {
            get { return maxLongitudeCoordinate; }
            set { maxLongitudeCoordinate = value; }
        }

        public double Width
        {
            get { return width; }
            set { width = value; }
        }

        public double Height
        {
            get { return height; }
            set { height = value; }
        }

    }

    [DataClass("DeliveryHeatMapPolygonSize")]
    [EnumClass]
    public partial class DeliveryHeatMapPolygonSize : LocalizableName<DeliveryHeatMapPolygonSize>
    {
        /// <summary> 100 x 100 метров. </summary>
        public static readonly DeliveryHeatMapPolygonSize ONE_HUNDRED = new DeliveryHeatMapPolygonSize("ONE_HUNDRED", 100);
        /// <summary> 250 x 250 метров. </summary>
        public static readonly DeliveryHeatMapPolygonSize TWO_HUNDRED_FIFTY = new DeliveryHeatMapPolygonSize("TWO_HUNDRED_FIFTY", 250);
        /// <summary> 500 х 500 метров. </summary>
        public static readonly DeliveryHeatMapPolygonSize FIVE_HUNDRED = new DeliveryHeatMapPolygonSize("FIVE_HUNDRED", 500);
        /// <summary> 1000 х 1000 метров. </summary>
        public static readonly DeliveryHeatMapPolygonSize ONE_THOUSAND = new DeliveryHeatMapPolygonSize("ONE_THOUSAND", 1000);

        private readonly int polygonSize;
        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryHeatMapPolygonSize(string __value, int polygonSize)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYHEATMAPPOLYGONSIZE_NAME_" + __value;
            this.polygonSize = polygonSize;
        }

        public static DeliveryHeatMapPolygonSize Parse(string value)
        {
            switch(value)
            {
                case "ONE_HUNDRED": return ONE_HUNDRED;
                case "TWO_HUNDRED_FIFTY": return TWO_HUNDRED_FIFTY;
                case "FIVE_HUNDRED": return FIVE_HUNDRED;
                case "ONE_THOUSAND": return ONE_THOUSAND;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryHeatMapPolygonSize[] VALUES
        {
            get
            {
                return new []
                {
                    ONE_HUNDRED, 
                    TWO_HUNDRED_FIFTY, 
                    FIVE_HUNDRED, 
                    ONE_THOUSAND
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int PolygonSize
        {
            get { return polygonSize; }
        }

    }

    [DataClass("DeliveryHeatMapReportType")]
    [EnumClass]
    public partial class DeliveryHeatMapReportType : LocalizableName<DeliveryHeatMapReportType>
    {
        /// <summary> Кол-во доставок по районам. </summary>
        public static readonly DeliveryHeatMapReportType DELIVERY_AMOUNT = new DeliveryHeatMapReportType("DELIVERY_AMOUNT", 0);
        /// <summary> Сумма заказов по районам. </summary>
        public static readonly DeliveryHeatMapReportType DELIVERY_SUM = new DeliveryHeatMapReportType("DELIVERY_SUM", 1);
        /// <summary> Средний чек по районам. </summary>
        public static readonly DeliveryHeatMapReportType AVG_CHEQUE = new DeliveryHeatMapReportType("AVG_CHEQUE", 2);
        /// <summary> Среднее время в пути по районам. </summary>
        public static readonly DeliveryHeatMapReportType AVG_DELIVERY_TIME = new DeliveryHeatMapReportType("AVG_DELIVERY_TIME", 3);
        /// <summary> Кол-во доставок по источнику рекламы. </summary>
        public static readonly DeliveryHeatMapReportType MARKETING_SOURCE_DELIVERY_AMOUNT = new DeliveryHeatMapReportType("MARKETING_SOURCE_DELIVERY_AMOUNT", 4);

        private readonly int reportTypeIndex;
        private readonly string __value;
        private readonly string __nameResId;

        private DeliveryHeatMapReportType(string __value, int reportTypeIndex)
        {
            this.__value = __value;
            this.__nameResId = "DELIVERYHEATMAPREPORTTYPE_NAME_" + __value;
            this.reportTypeIndex = reportTypeIndex;
        }

        public static DeliveryHeatMapReportType Parse(string value)
        {
            switch(value)
            {
                case "DELIVERY_AMOUNT": return DELIVERY_AMOUNT;
                case "DELIVERY_SUM": return DELIVERY_SUM;
                case "AVG_CHEQUE": return AVG_CHEQUE;
                case "AVG_DELIVERY_TIME": return AVG_DELIVERY_TIME;
                case "MARKETING_SOURCE_DELIVERY_AMOUNT": return MARKETING_SOURCE_DELIVERY_AMOUNT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DeliveryHeatMapReportType[] VALUES
        {
            get
            {
                return new []
                {
                    DELIVERY_AMOUNT, 
                    DELIVERY_SUM, 
                    AVG_CHEQUE, 
                    AVG_DELIVERY_TIME, 
                    MARKETING_SOURCE_DELIVERY_AMOUNT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int ReportTypeIndex
        {
            get { return reportTypeIndex; }
        }

    }

    [DataClass("DeliveryPolygon")]
    public partial class DeliveryPolygon
    {
        private int deliveryAmount;
        private double weight;
        private double? latitudeLeftDownCorner;
        private double? longitudeLeftDownCorner;

        protected DeliveryPolygon() {}

        public DeliveryPolygon(int deliveryAmount, double weight, double? latitudeLeftDownCorner, double? longitudeLeftDownCorner)
        {
            this.deliveryAmount = deliveryAmount;
            this.weight = weight;
            this.latitudeLeftDownCorner = latitudeLeftDownCorner;
            this.longitudeLeftDownCorner = longitudeLeftDownCorner;
        }
        public int DeliveryAmount
        {
            get { return deliveryAmount; }
            set { deliveryAmount = value; }
        }

        public double Weight
        {
            get { return weight; }
            set { weight = value; }
        }

        public double? LatitudeLeftDownCorner
        {
            get { return latitudeLeftDownCorner; }
            set { latitudeLeftDownCorner = value; }
        }

        public double? LongitudeLeftDownCorner
        {
            get { return longitudeLeftDownCorner; }
            set { longitudeLeftDownCorner = value; }
        }

    }

    [DataClass("BrdDataLoadingRequest")]
    public partial class BrdDataLoadingRequest
    {
        private int? customersRevision;
        private long? customersLocalRevision;
        private int? streetsRevision;
        private long? streetsLocalRevision;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public BrdDataLoadingRequest() {}

        public BrdDataLoadingRequest(int? customersRevision, long? customersLocalRevision, int? streetsRevision, long? streetsLocalRevision)
        {
            this.customersRevision = customersRevision;
            this.customersLocalRevision = customersLocalRevision;
            this.streetsRevision = streetsRevision;
            this.streetsLocalRevision = streetsLocalRevision;
        }
        public int? CustomersRevision
        {
            get { return customersRevision; }
            set { customersRevision = value; }
        }

        public long? CustomersLocalRevision
        {
            get { return customersLocalRevision; }
            set { customersLocalRevision = value; }
        }

        public int? StreetsRevision
        {
            get { return streetsRevision; }
            set { streetsRevision = value; }
        }

        public long? StreetsLocalRevision
        {
            get { return streetsLocalRevision; }
            set { streetsLocalRevision = value; }
        }

    }

    [DataClass("BrdDataLoadingResponse")]
    public partial class BrdDataLoadingResponse
    {
        private long? customersLocalRevision;
        private long? streetsLocalRevision;
        private ICollection<Customer> customers;
        private ICollection<Street> streets;

        protected BrdDataLoadingResponse() {}

        public BrdDataLoadingResponse(long? customersLocalRevision, long? streetsLocalRevision)
        {
            this.customersLocalRevision = customersLocalRevision;
            this.streetsLocalRevision = streetsLocalRevision;
        }
        public long? CustomersLocalRevision
        {
            get { return customersLocalRevision; }
            set { customersLocalRevision = value; }
        }

        public long? StreetsLocalRevision
        {
            get { return streetsLocalRevision; }
            set { streetsLocalRevision = value; }
        }

        public ICollection<Customer> Customers
        {
            get { return customers; }
            set { customers = value; }
        }

        public ICollection<Street> Streets
        {
            get { return streets; }
            set { streets = value; }
        }

    }

    [DataClass("TerminalDeliveryDuration")]
    public partial class TerminalDeliveryDuration
    {
        private long? courierDeliveryDurationInMinutes;
        private long? selfServiceDeliveryDurationInMinutes;

        public TerminalDeliveryDuration() {}

        public TerminalDeliveryDuration(long? courierDeliveryDurationInMinutes, long? selfServiceDeliveryDurationInMinutes)
        {
            this.courierDeliveryDurationInMinutes = courierDeliveryDurationInMinutes;
            this.selfServiceDeliveryDurationInMinutes = selfServiceDeliveryDurationInMinutes;
        }
        public long? CourierDeliveryDurationInMinutes
        {
            get { return courierDeliveryDurationInMinutes; }
            set { courierDeliveryDurationInMinutes = value; }
        }

        public long? SelfServiceDeliveryDurationInMinutes
        {
            get { return selfServiceDeliveryDurationInMinutes; }
            set { selfServiceDeliveryDurationInMinutes = value; }
        }

    }

    [DataClass("CourierWorkload")]
    public partial class CourierWorkload
    {
        private User courier;
        private int deliveriesCount;

        public CourierWorkload() {}

        public CourierWorkload(User courier, int deliveriesCount)
        {
            this.courier = courier;
            this.deliveriesCount = deliveriesCount;
        }
        public User Courier
        {
            get { return courier; }
            set { courier = value; }
        }

        public int DeliveriesCount
        {
            get { return deliveriesCount; }
            set { deliveriesCount = value; }
        }

    }

    [DataClass("DeliveryTerminalWorkload")]
    public partial class DeliveryTerminalWorkload
    {
        private List<KitchenWorkload> kitchenWorkload;
        private List<CourierWorkload> courierWorkload;
        private int couriersCount;
        private bool isTimePeak;

        public DeliveryTerminalWorkload() {}

        public DeliveryTerminalWorkload(int couriersCount, bool isTimePeak)
        {
            this.couriersCount = couriersCount;
            this.isTimePeak = isTimePeak;
        }
        public List<KitchenWorkload> KitchenWorkload
        {
            get { return kitchenWorkload; }
            set { kitchenWorkload = value; }
        }

        public List<CourierWorkload> CourierWorkload
        {
            get { return courierWorkload; }
            set { courierWorkload = value; }
        }

        public int CouriersCount
        {
            get { return couriersCount; }
            set { couriersCount = value; }
        }

        public bool IsTimePeak
        {
            get { return isTimePeak; }
            set { isTimePeak = value; }
        }

    }

    [DataClass("KitchenWorkload")]
    public partial class KitchenWorkload
    {
        private CookingPlaceType cookingPlaceType;
        private int kitchenWorkloadInMinutes;
        private int cookCount;

        public KitchenWorkload() {}

        public KitchenWorkload(CookingPlaceType cookingPlaceType, int kitchenWorkloadInMinutes, int cookCount)
        {
            this.cookingPlaceType = cookingPlaceType;
            this.kitchenWorkloadInMinutes = kitchenWorkloadInMinutes;
            this.cookCount = cookCount;
        }
        public CookingPlaceType CookingPlaceType
        {
            get { return cookingPlaceType; }
            set { cookingPlaceType = value; }
        }

        public int KitchenWorkloadInMinutes
        {
            get { return kitchenWorkloadInMinutes; }
            set { kitchenWorkloadInMinutes = value; }
        }

        public int CookCount
        {
            get { return cookCount; }
            set { cookCount = value; }
        }

    }

    [DataClass("AssignationAddress")]
    public partial class AssignationAddress
    {
        private string raw;
        private string city;
        private string street;
        private string house;
        private string building;


        [CanBeNull]
        public string Raw
        {
            get { return raw; }
            set { raw = value; }
        }

        [CanBeNull]
        public string City
        {
            get { return city; }
            set { city = value; }
        }

        [CanBeNull]
        public string Street
        {
            get { return street; }
            set { street = value; }
        }

        [CanBeNull]
        public string House
        {
            get { return house; }
            set { house = value; }
        }

        [CanBeNull]
        public string Building
        {
            get { return building; }
            set { building = value; }
        }

    }

    [DataClass("AssignationOrderItem")]
    public partial class AssignationOrderItem
    {
        private Guid id;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string product = "";
        [HasDefaultValue]
        private decimal amount = 0;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<AssignationOrderItemModifier> modifiers = new List<AssignationOrderItemModifier>();

        protected AssignationOrderItem() {}

        public AssignationOrderItem(Guid id, string product, decimal amount)
        {
            this.id = id;
            this.product = product;
            this.amount = amount;
        }
        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        [NotNull]
        public string Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        [NotNull]
        public ICollection<AssignationOrderItemModifier> Modifiers
        {
            get { return modifiers; }
        }

    }

    [DataClass("AssignationOrderItemModifier")]
    public partial class AssignationOrderItemModifier
    {
        private Guid id;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string product = "";
        [HasDefaultValue]
        private decimal amount = 0;

        protected AssignationOrderItemModifier() {}

        public AssignationOrderItemModifier(Guid id, string product, decimal amount)
        {
            this.id = id;
            this.product = product;
            this.amount = amount;
        }
        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        [NotNull]
        public string Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("AssignationRequest")]
    public partial class AssignationRequest
    {
        private bool isCourierDelivery;
        private AssignationAddress deliveryAddress;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string deliveryDate = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<AssignationOrderItem> orderItems = new List<AssignationOrderItem>();
        [HasDefaultValue]
        private decimal deliverySum = 0;
        [HasDefaultValue]
        private decimal discountSum = 0;
        private bool forVerifying;
        private Guid? selectedDeliveryTerminalId;

        protected AssignationRequest() {}

        public AssignationRequest(bool isCourierDelivery, string deliveryDate, decimal deliverySum, decimal discountSum, bool forVerifying)
        {
            this.isCourierDelivery = isCourierDelivery;
            this.deliveryDate = deliveryDate;
            this.deliverySum = deliverySum;
            this.discountSum = discountSum;
            this.forVerifying = forVerifying;
        }

        public AssignationRequest(string deliveryDate, decimal deliverySum, decimal discountSum)
        {
            this.deliveryDate = deliveryDate;
            this.deliverySum = deliverySum;
            this.discountSum = discountSum;
        }

        public bool IsCourierDelivery
        {
            get { return isCourierDelivery; }
            set { isCourierDelivery = value; }
        }

        [CanBeNull]
        public AssignationAddress DeliveryAddress
        {
            get { return deliveryAddress; }
            set { deliveryAddress = value; }
        }

        [NotNull]
        public string DeliveryDate
        {
            get { return deliveryDate; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  deliveryDate = value;
            }
        }

        [NotNull]
        public ICollection<AssignationOrderItem> OrderItems
        {
            get { return orderItems; }
        }

        public decimal DeliverySum
        {
            get { return deliverySum; }
            set { deliverySum = value; }
        }

        public decimal DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public bool ForVerifying
        {
            get { return forVerifying; }
            set { forVerifying = value; }
        }

        public Guid? SelectedDeliveryTerminalId
        {
            get { return selectedDeliveryTerminalId; }
            set { selectedDeliveryTerminalId = value; }
        }

    }

    [DataClass("AssignationResponse")]
    public partial class AssignationResponse
    {
        private bool isAllowed;
        private string rejectCause;
        private long deliveryDurationInMinutes;
        private Guid? deliveryTerminalId;
        private string addressId;
        private decimal? latitude;
        private decimal? longitude;

        public AssignationResponse() {}

        public AssignationResponse(bool isAllowed, string rejectCause, long deliveryDurationInMinutes, Guid? deliveryTerminalId, string addressId, decimal? latitude, decimal? longitude)
        {
            this.isAllowed = isAllowed;
            this.rejectCause = rejectCause;
            this.deliveryDurationInMinutes = deliveryDurationInMinutes;
            this.deliveryTerminalId = deliveryTerminalId;
            this.addressId = addressId;
            this.latitude = latitude;
            this.longitude = longitude;
        }
        public bool IsAllowed
        {
            get { return isAllowed; }
            set { isAllowed = value; }
        }

        public string RejectCause
        {
            get { return rejectCause; }
            set { rejectCause = value; }
        }

        public long DeliveryDurationInMinutes
        {
            get { return deliveryDurationInMinutes; }
            set { deliveryDurationInMinutes = value; }
        }

        public Guid? DeliveryTerminalId
        {
            get { return deliveryTerminalId; }
            set { deliveryTerminalId = value; }
        }

        public string AddressId
        {
            get { return addressId; }
            set { addressId = value; }
        }

        public decimal? Latitude
        {
            get { return latitude; }
            set { latitude = value; }
        }

        public decimal? Longitude
        {
            get { return longitude; }
            set { longitude = value; }
        }

    }

    [RootEntity]
    [DataClass("LogisticsSettings")]
    public partial class LogisticsSettings : PersistedEntity
    {
        [HasDefaultValue]
        private bool isEnabled = false;
        [HasDefaultValue]
        private int maxCourierWeight = 2;
        [HasDefaultValue]
        private int orderUnloadingTimeInMinute = 10;
        [HasDefaultValue]
        private int maximumTimeDelayInMinute = 10;
        private Strategy exceedingStrategy;
        [HasDefaultValue]
        private bool printCourierRouteList = true;
        [HasDefaultValue]
        private bool forbidAutoServicePrintIfNoFreeCouriers = false;
        private ICollection<LogisticsSettingsItem> logisticsSettingsItems;
        private ICollection<User> usersExcludedFromDistribution;
        private bool usePredictedTime;

        protected LogisticsSettings() {}

        public LogisticsSettings(Guid id, bool usePredictedTime)
            : base(id)
        {
            this.usePredictedTime = usePredictedTime;
        }

        public LogisticsSettings(Guid id)
            : base(id)
        {

        }

        public bool IsEnabled
        {
            get { return isEnabled; }
            set { isEnabled = value; }
        }

        public int MaxCourierWeight
        {
            get { return maxCourierWeight; }
            set { maxCourierWeight = value; }
        }

        public int OrderUnloadingTimeInMinute
        {
            get { return orderUnloadingTimeInMinute; }
            set { orderUnloadingTimeInMinute = value; }
        }

        public int MaximumTimeDelayInMinute
        {
            get { return maximumTimeDelayInMinute; }
            set { maximumTimeDelayInMinute = value; }
        }

        [CanBeNull]
        public Strategy ExceedingStrategy
        {
            get { return exceedingStrategy; }
            set { exceedingStrategy = value; }
        }

        public bool PrintCourierRouteList
        {
            get { return printCourierRouteList; }
            set { printCourierRouteList = value; }
        }

        public bool ForbidAutoServicePrintIfNoFreeCouriers
        {
            get { return forbidAutoServicePrintIfNoFreeCouriers; }
            set { forbidAutoServicePrintIfNoFreeCouriers = value; }
        }

        public ICollection<LogisticsSettingsItem> LogisticsSettingsItems
        {
            get { return logisticsSettingsItems; }
            set { logisticsSettingsItems = value; }
        }

        public ICollection<User> UsersExcludedFromDistribution
        {
            get { return usersExcludedFromDistribution; }
            set { usersExcludedFromDistribution = value; }
        }

        public bool UsePredictedTime
        {
            get { return usePredictedTime; }
            set { usePredictedTime = value; }
        }

    }

    [DataClass("LogisticsSettingsItem")]
    public partial class LogisticsSettingsItem
    {
        [HasDefaultValue]
        private bool isEnabled = false;
        private Terminal deliveryTerminal;
        private string address;

        public LogisticsSettingsItem() {}

        public LogisticsSettingsItem(Terminal deliveryTerminal, string address)
        {
            this.deliveryTerminal = deliveryTerminal;
            this.address = address;
        }
        public bool IsEnabled
        {
            get { return isEnabled; }
            set { isEnabled = value; }
        }

        public Terminal DeliveryTerminal
        {
            get { return deliveryTerminal; }
            set { deliveryTerminal = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

    }

    [DataClass("Strategy")]
    [EnumClass]
    public partial class Strategy : LocalizableName<Strategy>
    {
        /// <summary> Распределение согласно настройкам. </summary>
        public static readonly Strategy DEFAULT = new Strategy("DEFAULT", 0);
        /// <summary> Распределение с овербукингом. </summary>
        public static readonly Strategy OVERBOOKING = new Strategy("OVERBOOKING", 1);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private Strategy(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "STRATEGY_NAME_" + __value;
            this.id = id;
        }

        public static Strategy Parse(string value)
        {
            switch(value)
            {
                case "DEFAULT": return DEFAULT;
                case "OVERBOOKING": return OVERBOOKING;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static Strategy[] VALUES
        {
            get
            {
                return new []
                {
                    DEFAULT, 
                    OVERBOOKING
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("OrderErrorType")]
    [EnumClass]
    public partial class OrderErrorType : LocalizableName<OrderErrorType>
    {
        /// <summary> Заказ не отгеокодирован. </summary>
        public static readonly OrderErrorType CANNOT_GEOCODING = new OrderErrorType("CANNOT_GEOCODING", 1);
        /// <summary> Заказ не может быть распределен. </summary>
        public static readonly OrderErrorType CANNOT_DISTRIBUTE = new OrderErrorType("CANNOT_DISTRIBUTE", 2);
        /// <summary> При распределении заказа превышено максимальное количество заказов для одного курьера. </summary>
        public static readonly OrderErrorType ABOVE_WEIGHT = new OrderErrorType("ABOVE_WEIGHT", 3);
        /// <summary> Превышено время доставки. </summary>
        public static readonly OrderErrorType TIME_EXCEEDED = new OrderErrorType("TIME_EXCEEDED", 4);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private OrderErrorType(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "ORDERERRORTYPE_NAME_" + __value;
            this.id = id;
        }

        public static OrderErrorType Parse(string value)
        {
            switch(value)
            {
                case "CANNOT_GEOCODING": return CANNOT_GEOCODING;
                case "CANNOT_DISTRIBUTE": return CANNOT_DISTRIBUTE;
                case "ABOVE_WEIGHT": return ABOVE_WEIGHT;
                case "TIME_EXCEEDED": return TIME_EXCEEDED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OrderErrorType[] VALUES
        {
            get
            {
                return new []
                {
                    CANNOT_GEOCODING, 
                    CANNOT_DISTRIBUTE, 
                    ABOVE_WEIGHT, 
                    TIME_EXCEEDED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("RequestErrorType")]
    [EnumClass]
    public partial class RequestErrorType : LocalizableName<RequestErrorType>
    {
        /// <summary> Без ошибки. </summary>
        public static readonly RequestErrorType WITHOUT_ERROR = new RequestErrorType("WITHOUT_ERROR", 0);
        /// <summary> Внутренняя ошибка приложения. </summary>
        public static readonly RequestErrorType INTERNAL_ERROR = new RequestErrorType("INTERNAL_ERROR", 1);
        /// <summary> Ошибка лицензии. </summary>
        public static readonly RequestErrorType LICENSE_ERROR = new RequestErrorType("LICENSE_ERROR", 2);
        /// <summary> Ошибка в формате данных. </summary>
        public static readonly RequestErrorType DATA_FORMAT_ERROR = new RequestErrorType("DATA_FORMAT_ERROR", 3);
        /// <summary> Не удалось геокодировать адрес ресторана. </summary>
        public static readonly RequestErrorType CANNOT_GEOCODING = new RequestErrorType("CANNOT_GEOCODING", 4);

        private readonly int id;
        private readonly string __value;
        private readonly string __nameResId;

        private RequestErrorType(string __value, int id)
        {
            this.__value = __value;
            this.__nameResId = "REQUESTERRORTYPE_NAME_" + __value;
            this.id = id;
        }

        public static RequestErrorType Parse(string value)
        {
            switch(value)
            {
                case "WITHOUT_ERROR": return WITHOUT_ERROR;
                case "INTERNAL_ERROR": return INTERNAL_ERROR;
                case "LICENSE_ERROR": return LICENSE_ERROR;
                case "DATA_FORMAT_ERROR": return DATA_FORMAT_ERROR;
                case "CANNOT_GEOCODING": return CANNOT_GEOCODING;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RequestErrorType[] VALUES
        {
            get
            {
                return new []
                {
                    WITHOUT_ERROR, 
                    INTERNAL_ERROR, 
                    LICENSE_ERROR, 
                    DATA_FORMAT_ERROR, 
                    CANNOT_GEOCODING
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("AssignCouriersToOrdersRequestDto")]
    public partial class AssignCouriersToOrdersRequestDto
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<CourierDto> couriers = new List<CourierDto>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<OrderDto> orders = new List<OrderDto>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string terminalAddress = "";

        protected AssignCouriersToOrdersRequestDto() {}

        public AssignCouriersToOrdersRequestDto(string terminalAddress)
        {
            this.terminalAddress = terminalAddress;
        }
        [NotNull]
        public ICollection<CourierDto> Couriers
        {
            get { return couriers; }
        }

        [NotNull]
        public ICollection<OrderDto> Orders
        {
            get { return orders; }
        }

        [NotNull]
        public string TerminalAddress
        {
            get { return terminalAddress; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  terminalAddress = value;
            }
        }

    }

    [DataClass("AssignCouriersToOrdersResponseDto")]
    public partial class AssignCouriersToOrdersResponseDto
    {
        private string error;
        private RequestErrorType errorType;
        private ICollection<RouteDto> routes;
        private ICollection<OrderErrorDto> ordersWithErrors;

        public AssignCouriersToOrdersResponseDto() {}

        public AssignCouriersToOrdersResponseDto(string error, RequestErrorType errorType)
        {
            this.error = error;
            this.errorType = errorType;
        }
        public string Error
        {
            get { return error; }
            set { error = value; }
        }

        public RequestErrorType ErrorType
        {
            get { return errorType; }
            set { errorType = value; }
        }

        public ICollection<RouteDto> Routes
        {
            get { return routes; }
            set { routes = value; }
        }

        public ICollection<OrderErrorDto> OrdersWithErrors
        {
            get { return ordersWithErrors; }
            set { ordersWithErrors = value; }
        }

    }

    [DataClass("CourierComeBackTimeDto")]
    public partial class CourierComeBackTimeDto
    {
        private string error;
        private RequestErrorType errorType;
        private Guid? courierId;
        private Guid? orderId;
        private DateTime? comeBackTime;

        public CourierComeBackTimeDto() {}

        public CourierComeBackTimeDto(string error, RequestErrorType errorType, Guid? courierId, Guid? orderId, DateTime? comeBackTime)
        {
            this.error = error;
            this.errorType = errorType;
            this.courierId = courierId;
            this.orderId = orderId;
            this.comeBackTime = comeBackTime;
        }
        public string Error
        {
            get { return error; }
            set { error = value; }
        }

        public RequestErrorType ErrorType
        {
            get { return errorType; }
            set { errorType = value; }
        }

        public Guid? CourierId
        {
            get { return courierId; }
            set { courierId = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public DateTime? ComeBackTime
        {
            get { return comeBackTime; }
            set { comeBackTime = value; }
        }

    }

    [DataClass("CourierComeBackTimeRequestDto")]
    public partial class CourierComeBackTimeRequestDto
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<CourierDto, OrderDto> couriersWithOrder = new Dictionary<CourierDto, OrderDto>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string terminalAddress = "";

        protected CourierComeBackTimeRequestDto() {}

        public CourierComeBackTimeRequestDto(string terminalAddress)
        {
            this.terminalAddress = terminalAddress;
        }
        [NotNull]
        public Dictionary<CourierDto, OrderDto> CouriersWithOrder
        {
            get { return couriersWithOrder; }
        }

        [NotNull]
        public string TerminalAddress
        {
            get { return terminalAddress; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  terminalAddress = value;
            }
        }

    }

    [DataClass("CourierComeBackTimeResponseDto")]
    public partial class CourierComeBackTimeResponseDto
    {
        private List<CourierComeBackTimeDto> couriersComeBackTimes;


        public List<CourierComeBackTimeDto> CouriersComeBackTimes
        {
            get { return couriersComeBackTimes; }
            set { couriersComeBackTimes = value; }
        }

    }

    [DataClass("CourierDto")]
    public partial class CourierDto
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        private Guid id;
        private DateTime? startWorkingHours;
        private DateTime? endWorkingHours;
        private int rating;

        protected CourierDto() {}

        public CourierDto(string name, Guid id, DateTime? startWorkingHours, DateTime? endWorkingHours, int rating)
        {
            this.name = name;
            this.id = id;
            this.startWorkingHours = startWorkingHours;
            this.endWorkingHours = endWorkingHours;
            this.rating = rating;
        }

        public CourierDto(string name, Guid id)
        {
            this.name = name;
            this.id = id;
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        public DateTime? StartWorkingHours
        {
            get { return startWorkingHours; }
            set { startWorkingHours = value; }
        }

        public DateTime? EndWorkingHours
        {
            get { return endWorkingHours; }
            set { endWorkingHours = value; }
        }

        public int Rating
        {
            get { return rating; }
            set { rating = value; }
        }

    }

    [DataClass("LegDto")]
    public partial class LegDto
    {
        private Guid orderId;
        private DateTime time;
        private DateTime? deliveryIntervalEnd;
        private DateTime? deliveryIntervalStart;

        protected LegDto() {}

        public LegDto(Guid orderId, DateTime time, DateTime? deliveryIntervalEnd, DateTime? deliveryIntervalStart)
        {
            this.orderId = orderId;
            this.time = time;
            this.deliveryIntervalEnd = deliveryIntervalEnd;
            this.deliveryIntervalStart = deliveryIntervalStart;
        }

        public LegDto(Guid orderId, DateTime time)
        {
            this.orderId = orderId;
            this.time = time;
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public DateTime Time
        {
            get { return time; }
            set { time = value; }
        }

        public DateTime? DeliveryIntervalEnd
        {
            get { return deliveryIntervalEnd; }
            set { deliveryIntervalEnd = value; }
        }

        public DateTime? DeliveryIntervalStart
        {
            get { return deliveryIntervalStart; }
            set { deliveryIntervalStart = value; }
        }

    }

    [DataClass("LogisticAddressDto")]
    public partial class LogisticAddressDto
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string city = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string street = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string house = "";
        private string building;

        protected LogisticAddressDto() {}

        public LogisticAddressDto(string city, string street, string house, string building)
        {
            this.city = city;
            this.street = street;
            this.house = house;
            this.building = building;
        }

        public LogisticAddressDto(string city, string street, string house)
        {
            this.city = city;
            this.street = street;
            this.house = house;
        }

        [NotNull]
        public string City
        {
            get { return city; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  city = value;
            }
        }

        [NotNull]
        public string Street
        {
            get { return street; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  street = value;
            }
        }

        [NotNull]
        public string House
        {
            get { return house; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  house = value;
            }
        }

        public string Building
        {
            get { return building; }
            set { building = value; }
        }

    }

    [DataClass("OrderDto")]
    public partial class OrderDto
    {
        private int number;
        private Guid id;
        [NotNull, NotNullField]
        private LogisticAddressDto address;
        private Guid? courierId;
        private DateTime deliveryTime;
        private double weight;
        private DateTime? predictedTime;

        protected OrderDto() {}

        public OrderDto(int number, Guid id, LogisticAddressDto address, Guid? courierId, DateTime deliveryTime, double weight, DateTime? predictedTime)
        {
            this.number = number;
            this.id = id;
            this.address = address;
            this.courierId = courierId;
            this.deliveryTime = deliveryTime;
            this.weight = weight;
            this.predictedTime = predictedTime;
        }

        public OrderDto(Guid id, LogisticAddressDto address, DateTime deliveryTime)
        {
            this.id = id;
            this.address = address;
            this.deliveryTime = deliveryTime;
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public Guid Id
        {
            get { return id; }
            set { id = value; }
        }

        [NotNull]
        public LogisticAddressDto Address
        {
            get { return address; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  address = value;
            }
        }

        public Guid? CourierId
        {
            get { return courierId; }
            set { courierId = value; }
        }

        public DateTime DeliveryTime
        {
            get { return deliveryTime; }
            set { deliveryTime = value; }
        }

        public double Weight
        {
            get { return weight; }
            set { weight = value; }
        }

        public DateTime? PredictedTime
        {
            get { return predictedTime; }
            set { predictedTime = value; }
        }

    }

    [DataClass("OrderErrorDto")]
    public partial class OrderErrorDto
    {
        private Guid orderId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string error = "";
        private OrderErrorType errorType;

        protected OrderErrorDto() {}

        public OrderErrorDto(Guid orderId, string error, OrderErrorType errorType)
        {
            this.orderId = orderId;
            this.error = error;
            this.errorType = errorType;
        }

        public OrderErrorDto(Guid orderId, string error)
        {
            this.orderId = orderId;
            this.error = error;
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        [NotNull]
        public string Error
        {
            get { return error; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  error = value;
            }
        }

        public OrderErrorType ErrorType
        {
            get { return errorType; }
            set { errorType = value; }
        }

    }

    [DataClass("RouteDto")]
    public partial class RouteDto
    {
        private Guid courierId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<LegDto> path = new List<LegDto>();

        protected RouteDto() {}

        public RouteDto(Guid courierId)
        {
            this.courierId = courierId;
        }
        public Guid CourierId
        {
            get { return courierId; }
            set { courierId = value; }
        }

        [NotNull]
        public ICollection<LegDto> Path
        {
            get { return path; }
        }

    }

    [RootEntity]
    [DataClass("MarketingSource")]
    public partial class MarketingSource : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> attachedSources = new List<string>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public MarketingSource() {}

        public MarketingSource(Guid id, string name)
            : base(id)
        {
            this.name = name;
        }
        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        [NotNull]
        public List<string> AttachedSources
        {
            get { return attachedSources; }
        }

    }

    [DataClass("AbstractOrderGroupSourceInfo")]
    public abstract partial class AbstractOrderGroupSourceInfo
    {


    }

    [DataClass("BanquetInfo")]
    public partial class BanquetInfo
    {
        private DateTime? createDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> properties = new Dictionary<string, string>();
        private DateTime? modifiedDate;

        public BanquetInfo() {}

        public BanquetInfo(DateTime? createDate, DateTime? modifiedDate)
        {
            this.createDate = createDate;
            this.modifiedDate = modifiedDate;
        }
        public DateTime? CreateDate
        {
            get { return createDate; }
            set { createDate = value; }
        }

        [NotNull]
        public Dictionary<string, string> Properties
        {
            get { return properties; }
        }

        public DateTime? ModifiedDate
        {
            get { return modifiedDate; }
            set { modifiedDate = value; }
        }

    }

    [DataClass("CafeDeletionMethod")]
    public partial class CafeDeletionMethod : OrderDeletionMethod
    {

        protected CafeDeletionMethod() {}

        public CafeDeletionMethod(string id, string name, bool shouldWriteoff)
            : base(id, name, shouldWriteoff)
        {

        }
    }

    [DataClass("CashPaymentItem")]
    public partial class CashPaymentItem : SimplePaymentItem
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashPaymentItem() {}

        public CashPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {

        }

        public CashPaymentItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("ChoiceOrderItem")]
    public partial class ChoiceOrderItem : OrderEntry
    {
        private bool deleted;
        private OrderItem parent;

        protected ChoiceOrderItem() {}

        public ChoiceOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, bool deleted, OrderItem parent)
            : base(id, dish, amount, fixedPrice, delMethod, removalType)
        {
            this.deleted = deleted;
            this.parent = parent;
        }

        public ChoiceOrderItem(Guid id)
            : base(id)
        {

        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public OrderItem Parent
        {
            get { return parent; }
            set { parent = value; }
        }

    }

    [DataClass("CookingCourse")]
    public partial class CookingCourse
    {
        private bool cookingStarted;
        private int type;
        private int number;

        protected CookingCourse() {}

        public CookingCourse(bool cookingStarted, int type, int number)
        {
            this.cookingStarted = cookingStarted;
            this.type = type;
            this.number = number;
        }
        public bool CookingStarted
        {
            get { return cookingStarted; }
            set { cookingStarted = value; }
        }

        public int Type
        {
            get { return type; }
            set { type = value; }
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

    }

    [DataClass("CreditPaymentItem")]
    public partial class CreditPaymentItem : SimplePaymentItem
    {

        protected CreditPaymentItem() {}

        public CreditPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {

        }

        public CreditPaymentItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("ManualCardPaymentItem")]
    public partial class ManualCardPaymentItem : SimplePaymentItem
    {

        protected ManualCardPaymentItem() {}

        public ManualCardPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {

        }

        public ManualCardPaymentItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("MultiDiscount")]
    public partial class MultiDiscount : OrderSumCorrection
    {
        private HashSet<OrderSumCorrection> discounts;
        private decimal? resultPercent;

        protected MultiDiscount() {}

        public MultiDiscount(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status, decimal? resultPercent)
            : base(percent, authData, manual, type, status)
        {
            this.resultPercent = resultPercent;
        }

        public MultiDiscount(bool manual)
            : base(manual)
        {

        }

        public HashSet<OrderSumCorrection> Discounts
        {
            get { return discounts; }
            set { discounts = value; }
        }

        public decimal? ResultPercent
        {
            get { return resultPercent; }
            set { resultPercent = value; }
        }

    }

    [DataClass("NowriteoffDeletionMethod")]
    public partial class NowriteoffDeletionMethod : OrderDeletionMethod
    {

        protected NowriteoffDeletionMethod() {}

        public NowriteoffDeletionMethod(string id, string name, bool shouldWriteoff)
            : base(id, name, shouldWriteoff)
        {

        }
    }

    [DataClass("OrderCouponInfo")]
    public partial class OrderCouponInfo
    {
        private string number;
        private string series;

        protected OrderCouponInfo() {}

        public OrderCouponInfo(string number, string series)
        {
            this.number = number;
            this.series = series;
        }
        public string Number
        {
            get { return number; }
            set { number = value; }
        }

        public string Series
        {
            get { return series; }
            set { series = value; }
        }

    }

    [DataClass("OrderDeletionMethod")]
    public abstract partial class OrderDeletionMethod
    {
        private string id;
        private string name;
        private bool shouldWriteoff;

        protected OrderDeletionMethod() {}

        protected OrderDeletionMethod(string id, string name, bool shouldWriteoff)
        {
            this.id = id;
            this.name = name;
            this.shouldWriteoff = shouldWriteoff;
        }
        public string Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public bool ShouldWriteoff
        {
            get { return shouldWriteoff; }
            set { shouldWriteoff = value; }
        }

    }

    [DataClass("OrderEntry")]
    public abstract partial class OrderEntry : Entity
    {
        private Product dish;
        private decimal? amount;
        private decimal? fixedPrice;
        private OrderDeletionMethod delMethod;
        private RemovalType removalType;

        protected OrderEntry() {}

        protected OrderEntry(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType)
            : base(id)
        {
            this.dish = dish;
            this.amount = amount;
            this.fixedPrice = fixedPrice;
            this.delMethod = delMethod;
            this.removalType = removalType;
        }

        protected OrderEntry(Guid id)
            : base(id)
        {

        }

        public Product Dish
        {
            get { return dish; }
            set { dish = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? FixedPrice
        {
            get { return fixedPrice; }
            set { fixedPrice = value; }
        }

        public OrderDeletionMethod DelMethod
        {
            get { return delMethod; }
            set { delMethod = value; }
        }

        public RemovalType RemovalType
        {
            get { return removalType; }
            set { removalType = value; }
        }

    }

    [DataClass("OrderGroupInfo")]
    public partial class OrderGroupInfo : OrderGroupSourceInfo
    {

        protected OrderGroupInfo() {}

        public OrderGroupInfo(Guid? orderId, int? orderNum)
            : base(orderId, orderNum)
        {

        }
    }

    [DataClass("OrderGroupSourceInfo")]
    public abstract partial class OrderGroupSourceInfo : AbstractOrderGroupSourceInfo
    {
        private Guid? orderId;
        private int? orderNum;

        protected OrderGroupSourceInfo() {}

        protected OrderGroupSourceInfo(Guid? orderId, int? orderNum)
        {
            this.orderId = orderId;
            this.orderNum = orderNum;
        }
        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int? OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

    }

    [DataClass("OrderGuest")]
    public partial class OrderGuest : Entity
    {
        private string name;
        [HasDefaultValue]
        private int? place = 0;

        protected OrderGuest() {}

        public OrderGuest(Guid id, string name)
            : base(id)
        {
            this.name = name;
        }

        public OrderGuest(Guid id)
            : base(id)
        {

        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public int? Place
        {
            get { return place; }
            set { place = value; }
        }

    }

    [DataClass("OrderIncrease")]
    public partial class OrderIncrease : OrderSumCorrection
    {
        private string comment;

        protected OrderIncrease() {}

        public OrderIncrease(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status, string comment)
            : base(percent, authData, manual, type, status)
        {
            this.comment = comment;
        }

        public OrderIncrease(bool manual)
            : base(manual)
        {

        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [DataClass("OrderInfo")]
    public partial interface OrderInfo
    {

    }

    [DataClass("OrderItem")]
    public partial class OrderItem : OrderEntry
    {
        private OrderItemStatus status;
        private CookingCourse cookingCourse;
        private bool delivered;
        private bool printed;
        private DateTime? cookingStartTime;
        private DateTime? printTime;
        private DateTime? deliverTime;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly EntityList<ChoiceOrderItem> choices = new EntityList<ChoiceOrderItem>();
        private OrderGuest guest;
        [HasDefaultValue]
        private int prechequeGuestNum = 1;

        protected OrderItem() {}

        public OrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest)
            : base(id, dish, amount, fixedPrice, delMethod, removalType)
        {
            this.status = status;
            this.cookingCourse = cookingCourse;
            this.delivered = delivered;
            this.printed = printed;
            this.cookingStartTime = cookingStartTime;
            this.guest = guest;
        }

        public OrderItem(Guid id)
            : base(id)
        {

        }

        public OrderItemStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public CookingCourse CookingCourse
        {
            get { return cookingCourse; }
            set { cookingCourse = value; }
        }

        public bool Delivered
        {
            get { return delivered; }
            set { delivered = value; }
        }

        public bool Printed
        {
            get { return printed; }
            set { printed = value; }
        }

        public DateTime? CookingStartTime
        {
            get { return cookingStartTime; }
            set { cookingStartTime = value; }
        }

        public DateTime? PrintTime
        {
            get { return printTime; }
            set { printTime = value; }
        }

        public DateTime? DeliverTime
        {
            get { return deliverTime; }
            set { deliverTime = value; }
        }

        [NotNull]
        public EntityList<ChoiceOrderItem> Choices
        {
            get { return choices; }
        }

        public OrderGuest Guest
        {
            get { return guest; }
            set { guest = value; }
        }

        public int PrechequeGuestNum
        {
            get { return prechequeGuestNum; }
            set { prechequeGuestNum = value; }
        }

    }

    [DataClass("OrderItemStatus")]
    [EnumClass]
    public partial class OrderItemStatus
    {
        public static readonly OrderItemStatus NEW = new OrderItemStatus("NEW", 0);
        public static readonly OrderItemStatus PRINTED = new OrderItemStatus("PRINTED", 1);
        public static readonly OrderItemStatus DELETED = new OrderItemStatus("DELETED", 2);
        public static readonly OrderItemStatus PROCESSING = new OrderItemStatus("PROCESSING", 3);
        public static readonly OrderItemStatus NEED_APPROVE = new OrderItemStatus("NEED_APPROVE", 4);
        public static readonly OrderItemStatus PROCESSED = new OrderItemStatus("PROCESSED", 5);
        public static readonly OrderItemStatus CANCELLING = new OrderItemStatus("CANCELLING", 6);
        public static readonly OrderItemStatus FAILED = new OrderItemStatus("FAILED", 7);
        public static readonly OrderItemStatus STORNING = new OrderItemStatus("STORNING", 8);
        public static readonly OrderItemStatus STORNED = new OrderItemStatus("STORNED", 9);

        private readonly int val;
        private readonly string __value;

        private OrderItemStatus(string __value, int val)
        {
            this.__value = __value;
            this.val = val;
        }

        public static OrderItemStatus Parse(string value)
        {
            switch(value)
            {
                case "NEW": return NEW;
                case "PRINTED": return PRINTED;
                case "DELETED": return DELETED;
                case "PROCESSING": return PROCESSING;
                case "NEED_APPROVE": return NEED_APPROVE;
                case "PROCESSED": return PROCESSED;
                case "CANCELLING": return CANCELLING;
                case "FAILED": return FAILED;
                case "STORNING": return STORNING;
                case "STORNED": return STORNED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OrderItemStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NEW, 
                    PRINTED, 
                    DELETED, 
                    PROCESSING, 
                    NEED_APPROVE, 
                    PROCESSED, 
                    CANCELLING, 
                    FAILED, 
                    STORNING, 
                    STORNED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Val
        {
            get { return val; }
        }

    }

    [DataClass("OrderSourceInfo")]
    public partial class OrderSourceInfo : OrderGroupSourceInfo
    {

        protected OrderSourceInfo() {}

        public OrderSourceInfo(Guid? orderId, int? orderNum)
            : base(orderId, orderNum)
        {

        }
    }

    [DataClass("OrderSumCorrection")]
    public abstract partial class OrderSumCorrection
    {
        private decimal? percent;
        private AuthData authData;
        private bool manual;
        private DiscountType type;
        private DiscountItemStatus status;

        protected OrderSumCorrection() {}

        protected OrderSumCorrection(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status)
        {
            this.percent = percent;
            this.authData = authData;
            this.manual = manual;
            this.type = type;
            this.status = status;
        }

        protected OrderSumCorrection(bool manual)
        {
            this.manual = manual;
        }

        public decimal? Percent
        {
            get { return percent; }
            set { percent = value; }
        }

        public AuthData AuthData
        {
            get { return authData; }
            set { authData = value; }
        }

        public bool Manual
        {
            get { return manual; }
            set { manual = value; }
        }

        public DiscountType Type
        {
            get { return type; }
            set { type = value; }
        }

        public DiscountItemStatus Status
        {
            get { return status; }
            set { status = value; }
        }

    }

    [DataClass("PaymentItem")]
    public abstract partial class PaymentItem : Entity
    {
        private PaymentItemStatus status;
        private PaymentType type;
        private bool prepay;
        private decimal? amount;
        private bool rollBackOnFinish;
        private Guid? counteragentId;
        private AuthCardInfo cardInfo;

        protected PaymentItem() {}

        protected PaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo)
            : base(id)
        {
            this.status = status;
            this.type = type;
            this.prepay = prepay;
            this.amount = amount;
            this.rollBackOnFinish = rollBackOnFinish;
            this.counteragentId = counteragentId;
            this.cardInfo = cardInfo;
        }

        protected PaymentItem(Guid id)
            : base(id)
        {

        }

        public PaymentItemStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public PaymentType Type
        {
            get { return type; }
            set { type = value; }
        }

        public bool Prepay
        {
            get { return prepay; }
            set { prepay = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public bool RollBackOnFinish
        {
            get { return rollBackOnFinish; }
            set { rollBackOnFinish = value; }
        }

        public Guid? CounteragentId
        {
            get { return counteragentId; }
            set { counteragentId = value; }
        }

        public AuthCardInfo CardInfo
        {
            get { return cardInfo; }
            set { cardInfo = value; }
        }

    }

    [DataClass("PaymentItemStatus")]
    public enum PaymentItemStatus
    {
        NEW,
        PROCESSING,
        NEED_APPROVE,
        PROCESSED,
        PRINTING,
        PRINTED,
        CANCELLING,
        STORNING,
        STORNED,
        DELETED,
        FAILED
    }

    [DataClass("PriceCategoryInfo")]
    public partial class PriceCategoryInfo
    {
        private string card;
        private User user;
        private DiscountCard discountCard;


        [CanBeNull]
        public string Card
        {
            get { return card; }
            set { card = value; }
        }

        [CanBeNull]
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        [CanBeNull]
        public DiscountCard DiscountCard
        {
            get { return discountCard; }
            set { discountCard = value; }
        }

    }

    [RootEntity]
    [DataClass("RemovalType")]
    public partial class RemovalType : LocalizableNamePersistedEntity
    {
        private Account account;
        [HasDefaultValue]
        private bool canWriteoffToCafe = false;
        [HasDefaultValue]
        private bool canWriteoffToWaiter = false;
        [HasDefaultValue]
        private bool canWriteoffToUser = false;
        private bool reasonRequired;
        [HasDefaultValue]
        private bool manual = true;
        private string comment;
        private HashSet<DepartmentEntity> departments;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public RemovalType() {}

        public RemovalType(Guid id, LocalizableValue name, Account account, bool reasonRequired)
            : base(id, name)
        {
            this.account = account;
            this.reasonRequired = reasonRequired;
        }

        public RemovalType(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public bool CanWriteoffToCafe
        {
            get { return canWriteoffToCafe; }
            set { canWriteoffToCafe = value; }
        }

        public bool CanWriteoffToWaiter
        {
            get { return canWriteoffToWaiter; }
            set { canWriteoffToWaiter = value; }
        }

        public bool CanWriteoffToUser
        {
            get { return canWriteoffToUser; }
            set { canWriteoffToUser = value; }
        }

        public bool ReasonRequired
        {
            get { return reasonRequired; }
            set { reasonRequired = value; }
        }

        public bool Manual
        {
            get { return manual; }
            set { manual = value; }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

    }

    [DataClass("ServiceOrderItem")]
    public abstract partial class ServiceOrderItem : OrderItem
    {
        private decimal? price;

        protected ServiceOrderItem() {}

        protected ServiceOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest, decimal? price)
            : base(id, dish, amount, fixedPrice, delMethod, removalType, status, cookingCourse, delivered, printed, cookingStartTime, guest)
        {
            this.price = price;
        }

        protected ServiceOrderItem(Guid id)
            : base(id)
        {

        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

    }

    [DataClass("SimplePaymentItem")]
    public abstract partial class SimplePaymentItem : PaymentItem
    {

        protected SimplePaymentItem() {}

        protected SimplePaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {

        }

        protected SimplePaymentItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("SimpleServiceOrderItem")]
    public partial class SimpleServiceOrderItem : ServiceOrderItem
    {

        protected SimpleServiceOrderItem() {}

        public SimpleServiceOrderItem(Guid id, Product dish, decimal? amount, decimal? fixedPrice, OrderDeletionMethod delMethod, RemovalType removalType, OrderItemStatus status, CookingCourse cookingCourse, bool delivered, bool printed, DateTime? cookingStartTime, OrderGuest guest, decimal? price)
            : base(id, dish, amount, fixedPrice, delMethod, removalType, status, cookingCourse, delivered, printed, cookingStartTime, guest, price)
        {

        }

        public SimpleServiceOrderItem(Guid id)
            : base(id)
        {

        }

    }

    [DataClass("UserDeletionMethod")]
    public partial class UserDeletionMethod : OrderDeletionMethod
    {
        private User user;
        private Group group;

        protected UserDeletionMethod() {}

        public UserDeletionMethod(string id, string name, bool shouldWriteoff, User user, Group group)
            : base(id, name, shouldWriteoff)
        {
            this.user = user;
            this.group = group;
        }
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

    }

    [DataClass("VoucherPaymentItem")]
    public partial class VoucherPaymentItem : SimplePaymentItem
    {
        private int vouchersNum;

        protected VoucherPaymentItem() {}

        public VoucherPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo, int vouchersNum)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {
            this.vouchersNum = vouchersNum;
        }

        public VoucherPaymentItem(Guid id)
            : base(id)
        {

        }

        public int VouchersNum
        {
            get { return vouchersNum; }
            set { vouchersNum = value; }
        }

    }

    [DataClass("WriteoffPaymentItem")]
    public partial class WriteoffPaymentItem : SimplePaymentItem
    {
        private string reason;
        private User employee;

        protected WriteoffPaymentItem() {}

        public WriteoffPaymentItem(Guid id, PaymentItemStatus status, PaymentType type, bool prepay, decimal? amount, bool rollBackOnFinish, Guid? counteragentId, AuthCardInfo cardInfo, string reason)
            : base(id, status, type, prepay, amount, rollBackOnFinish, counteragentId, cardInfo)
        {
            this.reason = reason;
        }

        public WriteoffPaymentItem(Guid id)
            : base(id)
        {

        }

        public string Reason
        {
            get { return reason; }
            set { reason = value; }
        }

        [CanBeNull]
        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

    }

    [DataClass("Discount")]
    public partial class Discount : OrderSumCorrection
    {

        protected Discount() {}

        public Discount(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status)
            : base(percent, authData, manual, type, status)
        {

        }

        public Discount(bool manual)
            : base(manual)
        {

        }

    }

    [DataClass("DiscountCardDriver")]
    public partial class DiscountCardDriver : DiscountDriver
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DiscountCardDriver() {}

        public DiscountCardDriver(DiscountDevice device)
            : base(device)
        {

        }
    }

    [DataClass("DiscountCardItem")]
    public partial class DiscountCardItem : Discount
    {
        private DiscountCard card;
        private Card rolledCard;

        protected DiscountCardItem() {}

        public DiscountCardItem(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status, DiscountCard card)
            : base(percent, authData, manual, type, status)
        {
            this.card = card;
        }

        public DiscountCardItem(bool manual)
            : base(manual)
        {

        }

        public DiscountCard Card
        {
            get { return card; }
            set { card = value; }
        }

        [CanBeNull]
        public Card RolledCard
        {
            get { return rolledCard; }
            set { rolledCard = value; }
        }

    }

    [RootEntity]
    [DataClass("DiscountDevice")]
    public partial class DiscountDevice : AgentDevice
    {
        [HasDefaultValue]
        private bool? system = false;

        protected DiscountDevice() {}

        public DiscountDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver)
            : base(id, name, agentId, driver)
        {

        }

        public DiscountDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public bool? System
        {
            get { return system; }
            set { system = value; }
        }

    }

    [DataClass("DiscountDriver")]
    public abstract partial class DiscountDriver : AgentDriver
    {
        private DiscountDevice device;

        public DiscountDriver() {}

        protected DiscountDriver(DiscountDevice device)
        {
            this.device = device;
        }
        public DiscountDevice Device
        {
            get { return device; }
            set { device = value; }
        }

    }

    [DataClass("DiscountItem")]
    public partial class DiscountItem : Discount
    {

        protected DiscountItem() {}

        public DiscountItem(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status)
            : base(percent, authData, manual, type, status)
        {

        }

        public DiscountItem(bool manual)
            : base(manual)
        {

        }

    }

    [DataClass("DiscountItemStatus")]
    public enum DiscountItemStatus
    {
        NEW,
        PROCESSED
    }

    [RootEntity]
    [DataClass("DiscountPeriod")]
    public partial class DiscountPeriod : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PeriodScheduleItem> periods = new List<PeriodScheduleItem>();
        private Guid? franchiseUniqueId;
        private Guid? franchiseMasterId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DiscountPeriod() {}

        public DiscountPeriod(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        [NotNull]
        public List<PeriodScheduleItem> Periods
        {
            get { return periods; }
        }

        public Guid? FranchiseUniqueId
        {
            get { return franchiseUniqueId; }
            set { franchiseUniqueId = value; }
        }

        public Guid? FranchiseMasterId
        {
            get { return franchiseMasterId; }
            set { franchiseMasterId = value; }
        }

    }

    [DataClass("DiscountRights")]
    public partial class DiscountRights
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Role> allowedRoles = new HashSet<Role>();
        private bool mustBeConfirmed;
        private Role confirmedBy;
        private bool forSecondSlidingOnly;

        public DiscountRights() {}

        public DiscountRights(bool mustBeConfirmed, Role confirmedBy, bool forSecondSlidingOnly)
        {
            this.mustBeConfirmed = mustBeConfirmed;
            this.confirmedBy = confirmedBy;
            this.forSecondSlidingOnly = forSecondSlidingOnly;
        }
        [NotNull]
        public HashSet<Role> AllowedRoles
        {
            get { return allowedRoles; }
        }

        public bool MustBeConfirmed
        {
            get { return mustBeConfirmed; }
            set { mustBeConfirmed = value; }
        }

        public Role ConfirmedBy
        {
            get { return confirmedBy; }
            set { confirmedBy = value; }
        }

        public bool ForSecondSlidingOnly
        {
            get { return forSecondSlidingOnly; }
            set { forSecondSlidingOnly = value; }
        }

    }

    [DataClass("DiscountServiceResult")]
    public partial class DiscountServiceResult
    {
        private Guid? discountTypeId;
        private bool success;
        private string message;

        protected DiscountServiceResult() {}

        public DiscountServiceResult(Guid? discountTypeId, bool success, string message)
        {
            this.discountTypeId = discountTypeId;
            this.success = success;
            this.message = message;
        }
        public Guid? DiscountTypeId
        {
            get { return discountTypeId; }
            set { discountTypeId = value; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

    }

    [RootEntity]
    [DataClass("DiscountType")]
    public abstract partial class DiscountType : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private LocalizableValue shortName;
        private bool isConformationRequired;
        private DiscountRights rights;
        private bool applyOnlyInPeriod;
        private DiscountPeriod discountPeriod;
        private bool activated;
        [HasDefaultValue]
        private bool isManual = false;
        [HasDefaultValue]
        private bool isCard = true;
        [HasDefaultValue]
        private bool canApplyByCardNumber = false;
        [HasDefaultValue]
        private bool isAutomatic = false;
        [HasDefaultValue]
        private bool matchPeriodForEachDish = false;
        [HasDefaultValue]
        private bool isCombinable = true;
        private List<RestaurantSection> sections;
        private HashSet<DepartmentEntity> departments;
        [HasDefaultValue]
        private bool applyBeforeExcludedVat = true;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<OrderServiceType> serviceTypes = new HashSet<OrderServiceType>();

        protected DiscountType() {}

        protected DiscountType(Guid id, LocalizableValue name, LocalizableValue shortName, bool isConformationRequired, DiscountRights rights, bool applyOnlyInPeriod, DiscountPeriod discountPeriod, bool activated)
            : base(id, name)
        {
            this.shortName = shortName;
            this.isConformationRequired = isConformationRequired;
            this.rights = rights;
            this.applyOnlyInPeriod = applyOnlyInPeriod;
            this.discountPeriod = discountPeriod;
            this.activated = activated;
        }

        protected DiscountType(Guid id, LocalizableValue name, LocalizableValue shortName)
            : base(id, name)
        {
            this.shortName = shortName;
        }

        [NotNull]
        public LocalizableValue ShortName
        {
            get { return shortName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  shortName = value;
            }
        }

        public bool IsConformationRequired
        {
            get { return isConformationRequired; }
            set { isConformationRequired = value; }
        }

        public DiscountRights Rights
        {
            get { return rights; }
            set { rights = value; }
        }

        public bool ApplyOnlyInPeriod
        {
            get { return applyOnlyInPeriod; }
            set { applyOnlyInPeriod = value; }
        }

        public DiscountPeriod DiscountPeriod
        {
            get { return discountPeriod; }
            set { discountPeriod = value; }
        }

        public bool Activated
        {
            get { return activated; }
            set { activated = value; }
        }

        public bool IsManual
        {
            get { return isManual; }
            set { isManual = value; }
        }

        public bool IsCard
        {
            get { return isCard; }
            set { isCard = value; }
        }

        public bool CanApplyByCardNumber
        {
            get { return canApplyByCardNumber; }
            set { canApplyByCardNumber = value; }
        }

        public bool IsAutomatic
        {
            get { return isAutomatic; }
            set { isAutomatic = value; }
        }

        public bool MatchPeriodForEachDish
        {
            get { return matchPeriodForEachDish; }
            set { matchPeriodForEachDish = value; }
        }

        public bool IsCombinable
        {
            get { return isCombinable; }
            set { isCombinable = value; }
        }

        [CanBeNull]
        public List<RestaurantSection> Sections
        {
            get { return sections; }
            set { sections = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

        public bool ApplyBeforeExcludedVat
        {
            get { return applyBeforeExcludedVat; }
            set { applyBeforeExcludedVat = value; }
        }

        [NotNull]
        public HashSet<OrderServiceType> ServiceTypes
        {
            get { return serviceTypes; }
        }

    }

    [DataClass("ItemSaleEventDiscount")]
    public partial class ItemSaleEventDiscount : CachedEntity
    {
        private Guid itemSaleEventId;
        private DateTime itemSaleEventDate;
        private Guid discountEventId;
        [NotNull, NotNullField]
        private DiscountType discountType;
        [HasDefaultValue]
        private decimal discountSum = 0;
        [HasDefaultValue]
        private decimal increaseSum = 0;
        [HasDefaultValue]
        private decimal dishAmount = 0;
        private bool isDiscount;
        private int comboAmount;
        private string comboName;
        private Guid? comboId;
        private ProductSize comboSize;

        protected ItemSaleEventDiscount() {}

        public ItemSaleEventDiscount(Guid id, Guid itemSaleEventId, DateTime itemSaleEventDate, Guid discountEventId, DiscountType discountType, decimal discountSum, decimal increaseSum, decimal dishAmount, bool isDiscount, int comboAmount)
            : base(id)
        {
            this.itemSaleEventId = itemSaleEventId;
            this.itemSaleEventDate = itemSaleEventDate;
            this.discountEventId = discountEventId;
            this.discountType = discountType;
            this.discountSum = discountSum;
            this.increaseSum = increaseSum;
            this.dishAmount = dishAmount;
            this.isDiscount = isDiscount;
            this.comboAmount = comboAmount;
        }

        public ItemSaleEventDiscount(Guid id, Guid itemSaleEventId, DateTime itemSaleEventDate, Guid discountEventId, DiscountType discountType, decimal discountSum, decimal increaseSum, decimal dishAmount, bool isDiscount)
            : base(id)
        {
            this.itemSaleEventId = itemSaleEventId;
            this.itemSaleEventDate = itemSaleEventDate;
            this.discountEventId = discountEventId;
            this.discountType = discountType;
            this.discountSum = discountSum;
            this.increaseSum = increaseSum;
            this.dishAmount = dishAmount;
            this.isDiscount = isDiscount;
        }

        public Guid ItemSaleEventId
        {
            get { return itemSaleEventId; }
            set { itemSaleEventId = value; }
        }

        public DateTime ItemSaleEventDate
        {
            get { return itemSaleEventDate; }
            set { itemSaleEventDate = value; }
        }

        public Guid DiscountEventId
        {
            get { return discountEventId; }
            set { discountEventId = value; }
        }

        [NotNull]
        public DiscountType DiscountType
        {
            get { return discountType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  discountType = value;
            }
        }

        public decimal DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public decimal IncreaseSum
        {
            get { return increaseSum; }
            set { increaseSum = value; }
        }

        public decimal DishAmount
        {
            get { return dishAmount; }
            set { dishAmount = value; }
        }

        public bool IsDiscount
        {
            get { return isDiscount; }
            set { isDiscount = value; }
        }

        public int ComboAmount
        {
            get { return comboAmount; }
            set { comboAmount = value; }
        }

        [CanBeNull]
        public string ComboName
        {
            get { return comboName; }
            set { comboName = value; }
        }

        public Guid? ComboId
        {
            get { return comboId; }
            set { comboId = value; }
        }

        [CanBeNull]
        public ProductSize ComboSize
        {
            get { return comboSize; }
            set { comboSize = value; }
        }

    }

    [DataClass("FlyerDiscountItem")]
    public partial class FlyerDiscountItem : Discount
    {
        private int flyerAmount;

        protected FlyerDiscountItem() {}

        public FlyerDiscountItem(decimal? percent, AuthData authData, bool manual, DiscountType type, DiscountItemStatus status, int flyerAmount)
            : base(percent, authData, manual, type, status)
        {
            this.flyerAmount = flyerAmount;
        }

        public FlyerDiscountItem(bool manual)
            : base(manual)
        {

        }

        public int FlyerAmount
        {
            get { return flyerAmount; }
            set { flyerAmount = value; }
        }

    }

    [DataClass("FlyerDiscountType")]
    public partial class FlyerDiscountType : DiscountType
    {
        private bool printPrecheque;
        private RemovalType removalType;
        private string visualCode;

        protected FlyerDiscountType() {}

        public FlyerDiscountType(Guid id, LocalizableValue name, LocalizableValue shortName, bool isConformationRequired, DiscountRights rights, bool applyOnlyInPeriod, DiscountPeriod discountPeriod, bool activated, bool printPrecheque, RemovalType removalType, string visualCode)
            : base(id, name, shortName, isConformationRequired, rights, applyOnlyInPeriod, discountPeriod, activated)
        {
            this.printPrecheque = printPrecheque;
            this.removalType = removalType;
            this.visualCode = visualCode;
        }

        public FlyerDiscountType(Guid id, LocalizableValue name, LocalizableValue shortName)
            : base(id, name, shortName)
        {

        }

        public bool PrintPrecheque
        {
            get { return printPrecheque; }
            set { printPrecheque = value; }
        }

        public RemovalType RemovalType
        {
            get { return removalType; }
            set { removalType = value; }
        }

        public string VisualCode
        {
            get { return visualCode; }
            set { visualCode = value; }
        }

    }

    [DataClass("LuckyTickedBaseCardInfo")]
    public partial class LuckyTickedBaseCardInfo
    {
        [HasDefaultValue]
        private decimal? discountPercent = 0;
        [HasDefaultValue]
        private string cardNumber = "";
        [HasDefaultValue]
        private string cardSecret = "";
        [HasDefaultValue]
        private decimal? bonusSum = 0;
        [HasDefaultValue]
        private decimal? discountSum = 0;
        [HasDefaultValue]
        private string clientInfo = "";
        private List<LuckyTicketPointRule> pointRules;


        public decimal? DiscountPercent
        {
            get { return discountPercent; }
            set { discountPercent = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public string CardSecret
        {
            get { return cardSecret; }
            set { cardSecret = value; }
        }

        public decimal? BonusSum
        {
            get { return bonusSum; }
            set { bonusSum = value; }
        }

        public decimal? DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public string ClientInfo
        {
            get { return clientInfo; }
            set { clientInfo = value; }
        }

        [CanBeNull]
        public List<LuckyTicketPointRule> PointRules
        {
            get { return pointRules; }
            set { pointRules = value; }
        }

    }

    [DataClass("LuckyTicketCardTransaction")]
    public partial class LuckyTicketCardTransaction : CardTransaction
    {
        private string cardSecret;
        private Guid? deviceId;
        private LuckyTicketPaymentMethod method;
        private DateTime? luckyTicketOperationTime;
        private int? luckyTicketTransactionId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public LuckyTicketCardTransaction() {}

        public LuckyTicketCardTransaction(Guid id, DepartmentEntity department, DateTime date, PaymentSystem paymentSystem, CardTransactionType type, decimal? sum, bool? executed, bool? accepted, bool? verified, Guid? originalTransactionId, string cardSecret, Guid? deviceId, LuckyTicketPaymentMethod method, DateTime? luckyTicketOperationTime, int? luckyTicketTransactionId)
            : base(id, department, date, paymentSystem, type, sum, executed, accepted, verified, originalTransactionId)
        {
            this.cardSecret = cardSecret;
            this.deviceId = deviceId;
            this.method = method;
            this.luckyTicketOperationTime = luckyTicketOperationTime;
            this.luckyTicketTransactionId = luckyTicketTransactionId;
        }

        public LuckyTicketCardTransaction(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public string CardSecret
        {
            get { return cardSecret; }
            set { cardSecret = value; }
        }

        public Guid? DeviceId
        {
            get { return deviceId; }
            set { deviceId = value; }
        }

        public LuckyTicketPaymentMethod Method
        {
            get { return method; }
            set { method = value; }
        }

        public DateTime? LuckyTicketOperationTime
        {
            get { return luckyTicketOperationTime; }
            set { luckyTicketOperationTime = value; }
        }

        public int? LuckyTicketTransactionId
        {
            get { return luckyTicketTransactionId; }
            set { luckyTicketTransactionId = value; }
        }

    }

    [DataClass("LuckyTicketCheque")]
    public partial class LuckyTicketCheque : Cheque, LuckyTicketChequeInfo
    {
        private int operationType;
        private DateTime? hostData;
        private int? operationId;
        private bool success;
        private string cardNumber;
        private decimal? amount;
        private int printCount;
        private string errorCause;
        private LuckyTicketPaymentMethod method;

        protected LuckyTicketCheque() {}

        public LuckyTicketCheque(int operationType, DateTime? hostData, int? operationId, bool success, string cardNumber, decimal? amount, int printCount, string errorCause, LuckyTicketPaymentMethod method)
        {
            this.operationType = operationType;
            this.hostData = hostData;
            this.operationId = operationId;
            this.success = success;
            this.cardNumber = cardNumber;
            this.amount = amount;
            this.printCount = printCount;
            this.errorCause = errorCause;
            this.method = method;
        }
        public int OperationType
        {
            get { return operationType; }
            set { operationType = value; }
        }

        public DateTime? HostData
        {
            get { return hostData; }
            set { hostData = value; }
        }

        public int? OperationId
        {
            get { return operationId; }
            set { operationId = value; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public int PrintCount
        {
            get { return printCount; }
            set { printCount = value; }
        }

        public string ErrorCause
        {
            get { return errorCause; }
            set { errorCause = value; }
        }

        public LuckyTicketPaymentMethod Method
        {
            get { return method; }
            set { method = value; }
        }

    }

    [DataClass("LuckyTicketChequeInfo")]
    public partial interface LuckyTicketChequeInfo
    {

    }

    [DataClass("LuckyTicketChequeStub")]
    public partial class LuckyTicketChequeStub : LuckyTicketChequeInfo
    {
        private string errorCause;
        private DateTime? hostData;
        private int? operationId;
        private string serializedTransaction;

        public LuckyTicketChequeStub() {}

        public LuckyTicketChequeStub(string errorCause, DateTime? hostData, int? operationId, string serializedTransaction)
        {
            this.errorCause = errorCause;
            this.hostData = hostData;
            this.operationId = operationId;
            this.serializedTransaction = serializedTransaction;
        }
        public string ErrorCause
        {
            get { return errorCause; }
            set { errorCause = value; }
        }

        public DateTime? HostData
        {
            get { return hostData; }
            set { hostData = value; }
        }

        public int? OperationId
        {
            get { return operationId; }
            set { operationId = value; }
        }

        public string SerializedTransaction
        {
            get { return serializedTransaction; }
            set { serializedTransaction = value; }
        }

    }

    [DataClass("LuckyTicketDiscountData")]
    public partial class LuckyTicketDiscountData : LuckyTicketDiscountInfo
    {
        [HasDefaultValue]
        private string cardSecret = "";
        [HasDefaultValue]
        private string transaction = "";
        [HasDefaultValue]
        private decimal? percent = 0;


        public string CardSecret
        {
            get { return cardSecret; }
            set { cardSecret = value; }
        }

        public string Transaction
        {
            get { return transaction; }
            set { transaction = value; }
        }

        public decimal? Percent
        {
            get { return percent; }
            set { percent = value; }
        }

    }

    [DataClass("LuckyTicketDiscountInfo")]
    public partial interface LuckyTicketDiscountInfo
    {

    }

    [DataClass("LuckyTicketDiscountType")]
    public partial class LuckyTicketDiscountType : DiscountType
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public LuckyTicketDiscountType() {}

        public LuckyTicketDiscountType(Guid id, LocalizableValue name, LocalizableValue shortName, bool isConformationRequired, DiscountRights rights, bool applyOnlyInPeriod, DiscountPeriod discountPeriod, bool activated)
            : base(id, name, shortName, isConformationRequired, rights, applyOnlyInPeriod, discountPeriod, activated)
        {

        }

        public LuckyTicketDiscountType(Guid id, LocalizableValue name, LocalizableValue shortName)
            : base(id, name, shortName)
        {

        }

    }

    [DataClass("LuckyTicketDriver")]
    public partial class LuckyTicketDriver : DiscountDriver
    {
        private string serverName;
        [HasDefaultValue]
        private int machinId = 0;
        [HasDefaultValue]
        private int employeeId = 0;
        [HasDefaultValue]
        private bool performCardCash = true;
        [HasDefaultValue]
        private bool? performEnoughMeansValidation = true;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public LuckyTicketDriver() {}

        public LuckyTicketDriver(DiscountDevice device, string serverName)
            : base(device)
        {
            this.serverName = serverName;
        }
        public string ServerName
        {
            get { return serverName; }
            set { serverName = value; }
        }

        public int MachinId
        {
            get { return machinId; }
            set { machinId = value; }
        }

        public int EmployeeId
        {
            get { return employeeId; }
            set { employeeId = value; }
        }

        public bool PerformCardCash
        {
            get { return performCardCash; }
            set { performCardCash = value; }
        }

        public bool? PerformEnoughMeansValidation
        {
            get { return performEnoughMeansValidation; }
            set { performEnoughMeansValidation = value; }
        }

    }

    [DataClass("LuckyTicketOrderData")]
    public partial class LuckyTicketOrderData : OrderInfo
    {
        private List<PaymentItem> paymentItems;
        [HasDefaultValue]
        private int number = 0;
        [HasDefaultValue]
        private string tableString = "";


        [CanBeNull]
        public List<PaymentItem> PaymentItems
        {
            get { return paymentItems; }
            set { paymentItems = value; }
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public string TableString
        {
            get { return tableString; }
            set { tableString = value; }
        }

    }

    [DataClass("LuckyTicketPaymentItemInfo")]
    public partial interface LuckyTicketPaymentItemInfo
    {

    }

    [DataClass("LuckyTicketPaymentItemStub")]
    public partial class LuckyTicketPaymentItemStub : LuckyTicketPaymentItemInfo
    {
        private MagnetTrackData trackData;
        private LuckyTicketPaymentMethod method;
        private string luckyTicketTransaction;
        private decimal? amount;

        public LuckyTicketPaymentItemStub() {}

        public LuckyTicketPaymentItemStub(MagnetTrackData trackData, LuckyTicketPaymentMethod method, string luckyTicketTransaction, decimal? amount)
        {
            this.trackData = trackData;
            this.method = method;
            this.luckyTicketTransaction = luckyTicketTransaction;
            this.amount = amount;
        }
        public MagnetTrackData TrackData
        {
            get { return trackData; }
            set { trackData = value; }
        }

        public LuckyTicketPaymentMethod Method
        {
            get { return method; }
            set { method = value; }
        }

        public string LuckyTicketTransaction
        {
            get { return luckyTicketTransaction; }
            set { luckyTicketTransaction = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

    }

    [DataClass("LuckyTicketPaymentMethod")]
    public enum LuckyTicketPaymentMethod
    {
        CREDIT,
        POINTS
    }

    [DataClass("LuckyTicketPointRule")]
    public partial class LuckyTicketPointRule
    {
        private LuckyTicketRuleType type;
        [HasDefaultValue]
        private decimal? value = 0;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ProductCategory> categories = new List<ProductCategory>();

        public LuckyTicketPointRule() {}

        public LuckyTicketPointRule(LuckyTicketRuleType type)
        {
            this.type = type;
        }
        public LuckyTicketRuleType Type
        {
            get { return type; }
            set { type = value; }
        }

        public decimal? Value
        {
            get { return value; }
            set { this.value = value; }
        }

        [NotNull]
        public List<ProductCategory> Categories
        {
            get { return categories; }
        }

    }

    [DataClass("LuckyTicketRuleType")]
    public enum LuckyTicketRuleType
    {
        MULTIPLICATION,
        FIXED
    }

    [DataClass("PastOrder")]
    public partial class PastOrder
    {
        private Guid orderId;
        private PastOrderGroupInfo groupOrder;
        private PastOrderSourceInfo sourceOrder;
        private int number;
        private DateTime openTime;
        private DateTime closeTime;
        private User cashier;
        private User waiter;
        private CashRegister cashRegister;
        private int cafeSessionNumber;
        private Guid cafeSessionId;
        private DateTime cafeSessionOpenTime;
        private List<int> fiscalChequeNumbers;
        private int tableNumber;
        private RestaurantSection restaurantSection;
        private OrderType orderType;
        private bool hasVatInvoice;
        private bool? storned;
        private bool deleted;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<PastOrderItem> items = new List<PastOrderItem>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<PastOrderPayment> payments = new List<PastOrderPayment>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<PastOrderHrsTransaction> cardTransactions = new List<PastOrderHrsTransaction>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<PastOrder> groupPastOrders = new List<PastOrder>();
        private string writeoffReason;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<string, string> publicExternalData = new Dictionary<string, string>();
        private string originName;

        protected PastOrder() {}

        public PastOrder(Guid orderId, PastOrderGroupInfo groupOrder, PastOrderSourceInfo sourceOrder, int number, DateTime openTime, DateTime closeTime, User cashier, User waiter, CashRegister cashRegister, int cafeSessionNumber, Guid cafeSessionId, DateTime cafeSessionOpenTime, int tableNumber, RestaurantSection restaurantSection, OrderType orderType, bool hasVatInvoice, bool? storned, bool deleted, string writeoffReason, string originName)
        {
            this.orderId = orderId;
            this.groupOrder = groupOrder;
            this.sourceOrder = sourceOrder;
            this.number = number;
            this.openTime = openTime;
            this.closeTime = closeTime;
            this.cashier = cashier;
            this.waiter = waiter;
            this.cashRegister = cashRegister;
            this.cafeSessionNumber = cafeSessionNumber;
            this.cafeSessionId = cafeSessionId;
            this.cafeSessionOpenTime = cafeSessionOpenTime;
            this.tableNumber = tableNumber;
            this.restaurantSection = restaurantSection;
            this.orderType = orderType;
            this.hasVatInvoice = hasVatInvoice;
            this.storned = storned;
            this.deleted = deleted;
            this.writeoffReason = writeoffReason;
            this.originName = originName;
        }

        public PastOrder(Guid orderId, int number, DateTime openTime, DateTime closeTime, int cafeSessionNumber, Guid cafeSessionId, DateTime cafeSessionOpenTime)
        {
            this.orderId = orderId;
            this.number = number;
            this.openTime = openTime;
            this.closeTime = closeTime;
            this.cafeSessionNumber = cafeSessionNumber;
            this.cafeSessionId = cafeSessionId;
            this.cafeSessionOpenTime = cafeSessionOpenTime;
        }

        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public PastOrderGroupInfo GroupOrder
        {
            get { return groupOrder; }
            set { groupOrder = value; }
        }

        public PastOrderSourceInfo SourceOrder
        {
            get { return sourceOrder; }
            set { sourceOrder = value; }
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public DateTime OpenTime
        {
            get { return openTime; }
            set { openTime = value; }
        }

        public DateTime CloseTime
        {
            get { return closeTime; }
            set { closeTime = value; }
        }

        public User Cashier
        {
            get { return cashier; }
            set { cashier = value; }
        }

        public User Waiter
        {
            get { return waiter; }
            set { waiter = value; }
        }

        public CashRegister CashRegister
        {
            get { return cashRegister; }
            set { cashRegister = value; }
        }

        public int CafeSessionNumber
        {
            get { return cafeSessionNumber; }
            set { cafeSessionNumber = value; }
        }

        public Guid CafeSessionId
        {
            get { return cafeSessionId; }
            set { cafeSessionId = value; }
        }

        public DateTime CafeSessionOpenTime
        {
            get { return cafeSessionOpenTime; }
            set { cafeSessionOpenTime = value; }
        }

        public List<int> FiscalChequeNumbers
        {
            get { return fiscalChequeNumbers; }
            set { fiscalChequeNumbers = value; }
        }

        public int TableNumber
        {
            get { return tableNumber; }
            set { tableNumber = value; }
        }

        public RestaurantSection RestaurantSection
        {
            get { return restaurantSection; }
            set { restaurantSection = value; }
        }

        public OrderType OrderType
        {
            get { return orderType; }
            set { orderType = value; }
        }

        public bool HasVatInvoice
        {
            get { return hasVatInvoice; }
            set { hasVatInvoice = value; }
        }

        public bool? Storned
        {
            get { return storned; }
            set { storned = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        [NotNull]
        public ICollection<PastOrderItem> Items
        {
            get { return items; }
        }

        [NotNull]
        public ICollection<PastOrderPayment> Payments
        {
            get { return payments; }
        }

        [NotNull]
        public ICollection<PastOrderHrsTransaction> CardTransactions
        {
            get { return cardTransactions; }
        }

        [NotNull]
        public ICollection<PastOrder> GroupPastOrders
        {
            get { return groupPastOrders; }
        }

        public string WriteoffReason
        {
            get { return writeoffReason; }
            set { writeoffReason = value; }
        }

        [NotNull]
        public Dictionary<string, string> PublicExternalData
        {
            get { return publicExternalData; }
        }

        public string OriginName
        {
            get { return originName; }
            set { originName = value; }
        }

    }

    [DataClass("PastOrderGroupInfo")]
    public partial class PastOrderGroupInfo : PastOrderGroupSourceInfo
    {

        protected PastOrderGroupInfo() {}

        public PastOrderGroupInfo(Guid orderId, int orderNum)
            : base(orderId, orderNum)
        {

        }
    }

    [DataClass("PastOrderGroupSourceInfo")]
    public partial class PastOrderGroupSourceInfo : AbstractOrderGroupSourceInfo
    {
        private Guid orderId;
        [HasDefaultValue]
        private int orderNum = 0;

        protected PastOrderGroupSourceInfo() {}

        public PastOrderGroupSourceInfo(Guid orderId, int orderNum)
        {
            this.orderId = orderId;
            this.orderNum = orderNum;
        }
        public Guid OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int OrderNum
        {
            get { return orderNum; }
            set { orderNum = value; }
        }

    }

    [DataClass("PastOrderHrsTransaction")]
    public partial class PastOrderHrsTransaction
    {
        private string guestName;
        private string guestHrsIdentifier;
        private string roomNumber;

        protected PastOrderHrsTransaction() {}

        public PastOrderHrsTransaction(string guestName, string guestHrsIdentifier, string roomNumber)
        {
            this.guestName = guestName;
            this.guestHrsIdentifier = guestHrsIdentifier;
            this.roomNumber = roomNumber;
        }
        public string GuestName
        {
            get { return guestName; }
            set { guestName = value; }
        }

        public string GuestHrsIdentifier
        {
            get { return guestHrsIdentifier; }
            set { guestHrsIdentifier = value; }
        }

        public string RoomNumber
        {
            get { return roomNumber; }
            set { roomNumber = value; }
        }

    }

    [DataClass("PastOrderItem")]
    public partial class PastOrderItem
    {
        [HasDefaultValue]
        private decimal sumWithDiscounts = 0;
        [HasDefaultValue]
        private decimal sumWithoutDiscounts = 0;
        [HasDefaultValue]
        private decimal amount = 0;
        [HasDefaultValue]
        private decimal price = 0;
        [NotNull, NotNullField]
        private Product product;
        private ProductSize productSize;
        private bool isMainDish;
        [HasDefaultValue]
        private decimal vatRate = 0;
        [HasDefaultValue]
        private decimal vatSum = 0;

        protected PastOrderItem() {}

        public PastOrderItem(decimal sumWithDiscounts, decimal sumWithoutDiscounts, decimal amount, decimal price, Product product, ProductSize productSize, bool isMainDish, decimal vatRate, decimal vatSum)
        {
            this.sumWithDiscounts = sumWithDiscounts;
            this.sumWithoutDiscounts = sumWithoutDiscounts;
            this.amount = amount;
            this.price = price;
            this.product = product;
            this.productSize = productSize;
            this.isMainDish = isMainDish;
            this.vatRate = vatRate;
            this.vatSum = vatSum;
        }

        public PastOrderItem(decimal sumWithDiscounts, decimal sumWithoutDiscounts, decimal amount, decimal price, Product product, decimal vatRate, decimal vatSum)
        {
            this.sumWithDiscounts = sumWithDiscounts;
            this.sumWithoutDiscounts = sumWithoutDiscounts;
            this.amount = amount;
            this.price = price;
            this.product = product;
            this.vatRate = vatRate;
            this.vatSum = vatSum;
        }

        public decimal SumWithDiscounts
        {
            get { return sumWithDiscounts; }
            set { sumWithDiscounts = value; }
        }

        public decimal SumWithoutDiscounts
        {
            get { return sumWithoutDiscounts; }
            set { sumWithoutDiscounts = value; }
        }

        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal Price
        {
            get { return price; }
            set { price = value; }
        }

        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        public ProductSize ProductSize
        {
            get { return productSize; }
            set { productSize = value; }
        }

        public bool IsMainDish
        {
            get { return isMainDish; }
            set { isMainDish = value; }
        }

        public decimal VatRate
        {
            get { return vatRate; }
            set { vatRate = value; }
        }

        public decimal VatSum
        {
            get { return vatSum; }
            set { vatSum = value; }
        }

    }

    [DataClass("PastOrderPayment")]
    public partial class PastOrderPayment
    {
        [NotNull, NotNullField]
        private PaymentType paymentType;
        [NotNull, NotNullField]
        private TransactionType transactionType;
        [HasDefaultValue]
        private decimal sum = 0;

        protected PastOrderPayment() {}

        public PastOrderPayment(PaymentType paymentType, TransactionType transactionType, decimal sum)
        {
            this.paymentType = paymentType;
            this.transactionType = transactionType;
            this.sum = sum;
        }
        [NotNull]
        public PaymentType PaymentType
        {
            get { return paymentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  paymentType = value;
            }
        }

        [NotNull]
        public TransactionType TransactionType
        {
            get { return transactionType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  transactionType = value;
            }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

    }

    [DataClass("PastOrderSourceInfo")]
    public partial class PastOrderSourceInfo : PastOrderGroupSourceInfo
    {

        protected PastOrderSourceInfo() {}

        public PastOrderSourceInfo(Guid orderId, int orderNum)
            : base(orderId, orderNum)
        {

        }
    }

    [DataClass("OrdermanSettings")]
    public partial class OrdermanSettings
    {
        [HasDefaultValue]
        private bool ordermanEnabled = false;
        [HasDefaultValue]
        private bool paymentEnabled = false;
        [HasDefaultValue]
        private bool fiscalMode = false;
        private PaymentType defaultPaymentType;
        private PayInOutType payInType;
        private PayInOutType payOutType;
        [HasDefaultValue]
        private bool showOrderSum = true;

        public OrdermanSettings() {}

        public OrdermanSettings(PaymentType defaultPaymentType, PayInOutType payInType, PayInOutType payOutType)
        {
            this.defaultPaymentType = defaultPaymentType;
            this.payInType = payInType;
            this.payOutType = payOutType;
        }
        public bool OrdermanEnabled
        {
            get { return ordermanEnabled; }
            set { ordermanEnabled = value; }
        }

        public bool PaymentEnabled
        {
            get { return paymentEnabled; }
            set { paymentEnabled = value; }
        }

        public bool FiscalMode
        {
            get { return fiscalMode; }
            set { fiscalMode = value; }
        }

        public PaymentType DefaultPaymentType
        {
            get { return defaultPaymentType; }
            set { defaultPaymentType = value; }
        }

        public PayInOutType PayInType
        {
            get { return payInType; }
            set { payInType = value; }
        }

        public PayInOutType PayOutType
        {
            get { return payOutType; }
            set { payOutType = value; }
        }

        public bool ShowOrderSum
        {
            get { return showOrderSum; }
            set { showOrderSum = value; }
        }

    }

    [DataClass("CashPaymentType")]
    public partial class CashPaymentType : PaymentType
    {
        private decimal? currencyRate;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashPaymentType() {}

        public CashPaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, decimal? currencyRate)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType)
        {
            this.currencyRate = currencyRate;
        }

        public CashPaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name, paymentGroup)
        {

        }

        public decimal? CurrencyRate
        {
            get { return currencyRate; }
            set { currencyRate = value; }
        }

    }

    [DataClass("ConfigurablePaymentType")]
    public partial class ConfigurablePaymentType : PaymentType
    {
        [NotNull, NotNullField]
        private PaymentType basePaymentType;
        [NotNull, NotNullField]
        private DocumentProcessor documentProcessor;
        [HasDefaultValue]
        private int docCopiesCount = 1;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ConfigurablePaymentType() {}

        public ConfigurablePaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, PaymentType basePaymentType, DocumentProcessor documentProcessor)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType)
        {
            this.basePaymentType = basePaymentType;
            this.documentProcessor = documentProcessor;
        }

        public ConfigurablePaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup, PaymentType basePaymentType, DocumentProcessor documentProcessor)
            : base(id, name, paymentGroup)
        {
            this.basePaymentType = basePaymentType;
            this.documentProcessor = documentProcessor;
        }

        [NotNull]
        public PaymentType BasePaymentType
        {
            get { return basePaymentType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  basePaymentType = value;
            }
        }

        [NotNull]
        public DocumentProcessor DocumentProcessor
        {
            get { return documentProcessor; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  documentProcessor = value;
            }
        }

        public int DocCopiesCount
        {
            get { return docCopiesCount; }
            set { docCopiesCount = value; }
        }

    }

    [DataClass("CreditPaymentType")]
    public partial class CreditPaymentType : PaymentType
    {
        [HasDefaultValue]
        private bool forEmploeeys = false;
        [HasDefaultValue]
        private bool forClients = true;
        [HasDefaultValue]
        private bool forSuppliers = false;
        [HasDefaultValue]
        private bool authByCounteragent = false;
        [HasDefaultValue]
        private bool authByEmployee = false;
        [HasDefaultValue]
        private bool useInDeliveryForCounteragents = false;
        private DocumentProcessor documentProcessor;
        private string deliveryNumberTemplate;
        [HasDefaultValue]
        private bool deliveryNumberIsSuffix = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CreditPaymentType() {}

        public CreditPaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, DocumentProcessor documentProcessor, string deliveryNumberTemplate)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType)
        {
            this.documentProcessor = documentProcessor;
            this.deliveryNumberTemplate = deliveryNumberTemplate;
        }

        public CreditPaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name, paymentGroup)
        {

        }

        public bool ForEmploeeys
        {
            get { return forEmploeeys; }
            set { forEmploeeys = value; }
        }

        public bool ForClients
        {
            get { return forClients; }
            set { forClients = value; }
        }

        public bool ForSuppliers
        {
            get { return forSuppliers; }
            set { forSuppliers = value; }
        }

        public bool AuthByCounteragent
        {
            get { return authByCounteragent; }
            set { authByCounteragent = value; }
        }

        public bool AuthByEmployee
        {
            get { return authByEmployee; }
            set { authByEmployee = value; }
        }

        public bool UseInDeliveryForCounteragents
        {
            get { return useInDeliveryForCounteragents; }
            set { useInDeliveryForCounteragents = value; }
        }

        public DocumentProcessor DocumentProcessor
        {
            get { return documentProcessor; }
            set { documentProcessor = value; }
        }

        public string DeliveryNumberTemplate
        {
            get { return deliveryNumberTemplate; }
            set { deliveryNumberTemplate = value; }
        }

        public bool DeliveryNumberIsSuffix
        {
            get { return deliveryNumberIsSuffix; }
            set { deliveryNumberIsSuffix = value; }
        }

    }

    [DataClass("ExternalApiPaymentType")]
    public partial class ExternalApiPaymentType : NonCashPaymentType
    {
        [NotNull, NotNullField]
        private Account cashReceiptAccount;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ExternalApiPaymentType() {}

        public ExternalApiPaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, PaymentSystem paymentSystem, Account cashReceiptAccount)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType, paymentSystem)
        {
            this.cashReceiptAccount = cashReceiptAccount;
        }

        public ExternalApiPaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup, Account cashReceiptAccount)
            : base(id, name, paymentGroup)
        {
            this.cashReceiptAccount = cashReceiptAccount;
        }

        [NotNull]
        public Account CashReceiptAccount
        {
            get { return cashReceiptAccount; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  cashReceiptAccount = value;
            }
        }

    }

    [DataClass("IikoCard51PaymentType")]
    public partial class IikoCard51PaymentType : NonCashPaymentType
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public IikoCard51PaymentType() {}

        public IikoCard51PaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, PaymentSystem paymentSystem)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType, paymentSystem)
        {

        }

        public IikoCard51PaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name, paymentGroup)
        {

        }

    }

    [DataClass("NonCashPaymentType")]
    public partial class NonCashPaymentType : PaymentType
    {
        private PaymentSystem paymentSystem;
        private string cardTypeName;
        private decimal? nominal;
        private Account revenueAccount;
        [HasDefaultValue]
        private int checksNumber = 2;
        [HasDefaultValue]
        private bool showSignatureConfirmation = true;
        [HasDefaultValue]
        private bool printErrorMessages = true;
        [HasDefaultValue]
        private int epitomeDefualtNumber = 1;
        [HasDefaultValue]
        private int epitomeOutletNumber = 21;
        private Dictionary<Guid, decimal> epitomeCategoryMapping;
        [HasDefaultValue]
        private bool epitomePrepaidOnly = false;
        [HasDefaultValue]
        private int edelweissDepartmentCode = 21;
        [HasDefaultValue]
        private bool hoistCanEditRoomNumber = true;
        [HasDefaultValue]
        private bool proccessAsDiscount = false;
        [HasDefaultValue]
        private bool fiscalizeAsDiscount = false;
        [HasDefaultValue]
        private bool fiscalizeZeroBill = false;
        private DiscountCardType replaceDiscount;
        [HasDefaultValue]
        private bool canDisplayChange = false;
        private string iikoNetPaymentCode;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public NonCashPaymentType() {}

        public NonCashPaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, PaymentSystem paymentSystem)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType)
        {
            this.paymentSystem = paymentSystem;
        }

        public NonCashPaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name, paymentGroup)
        {

        }

        public PaymentSystem PaymentSystem
        {
            get { return paymentSystem; }
            set { paymentSystem = value; }
        }

        [CanBeNull]
        public string CardTypeName
        {
            get { return cardTypeName; }
            set { cardTypeName = value; }
        }

        public decimal? Nominal
        {
            get { return nominal; }
            set { nominal = value; }
        }

        [CanBeNull]
        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        public int ChecksNumber
        {
            get { return checksNumber; }
            set { checksNumber = value; }
        }

        public bool ShowSignatureConfirmation
        {
            get { return showSignatureConfirmation; }
            set { showSignatureConfirmation = value; }
        }

        public bool PrintErrorMessages
        {
            get { return printErrorMessages; }
            set { printErrorMessages = value; }
        }

        public int EpitomeDefualtNumber
        {
            get { return epitomeDefualtNumber; }
            set { epitomeDefualtNumber = value; }
        }

        public int EpitomeOutletNumber
        {
            get { return epitomeOutletNumber; }
            set { epitomeOutletNumber = value; }
        }

        [CanBeNull]
        public Dictionary<Guid, decimal> EpitomeCategoryMapping
        {
            get { return epitomeCategoryMapping; }
            set { epitomeCategoryMapping = value; }
        }

        public bool EpitomePrepaidOnly
        {
            get { return epitomePrepaidOnly; }
            set { epitomePrepaidOnly = value; }
        }

        public int EdelweissDepartmentCode
        {
            get { return edelweissDepartmentCode; }
            set { edelweissDepartmentCode = value; }
        }

        public bool HoistCanEditRoomNumber
        {
            get { return hoistCanEditRoomNumber; }
            set { hoistCanEditRoomNumber = value; }
        }

        public bool ProccessAsDiscount
        {
            get { return proccessAsDiscount; }
            set { proccessAsDiscount = value; }
        }

        public bool FiscalizeAsDiscount
        {
            get { return fiscalizeAsDiscount; }
            set { fiscalizeAsDiscount = value; }
        }

        public bool FiscalizeZeroBill
        {
            get { return fiscalizeZeroBill; }
            set { fiscalizeZeroBill = value; }
        }

        [CanBeNull]
        public DiscountCardType ReplaceDiscount
        {
            get { return replaceDiscount; }
            set { replaceDiscount = value; }
        }

        public bool CanDisplayChange
        {
            get { return canDisplayChange; }
            set { canDisplayChange = value; }
        }

        [CanBeNull]
        public string IikoNetPaymentCode
        {
            get { return iikoNetPaymentCode; }
            set { iikoNetPaymentCode = value; }
        }

    }

    [DataClass("PaymentAuthorizationType")]
    [EnumClass]
    public partial class PaymentAuthorizationType : LocalizableName<PaymentAuthorizationType>
    {
        /// <summary> Сотрудники. </summary>
        public static readonly PaymentAuthorizationType EMPLOYEE = new PaymentAuthorizationType("EMPLOYEE", "employee");
        /// <summary> Гости. </summary>
        public static readonly PaymentAuthorizationType GUEST = new PaymentAuthorizationType("GUEST", "guest");

        private readonly string code;
        private readonly string __value;
        private readonly string __nameResId;

        private PaymentAuthorizationType(string __value, string code)
        {
            this.__value = __value;
            this.__nameResId = "PAYMENTAUTHORIZATIONTYPE_NAME_" + __value;
            this.code = code;
        }

        public static PaymentAuthorizationType Parse(string value)
        {
            switch(value)
            {
                case "EMPLOYEE": return EMPLOYEE;
                case "GUEST": return GUEST;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PaymentAuthorizationType[] VALUES
        {
            get
            {
                return new []
                {
                    EMPLOYEE, 
                    GUEST
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Code
        {
            get { return code; }
        }

    }

    [DataClass("PaymentGroup")]
    [EnumClass]
    public partial class PaymentGroup : LocalizableName<PaymentGroup>
    {
        /// <summary> Оплата наличными. </summary>
        public static readonly PaymentGroup CASH = new PaymentGroup("CASH");
        /// <summary> Банковские карты. </summary>
        public static readonly PaymentGroup CARD = new PaymentGroup("CARD");
        /// <summary> Без выручки. </summary>
        public static readonly PaymentGroup WRITEOFF = new PaymentGroup("WRITEOFF");
        /// <summary> Безналичный расчет. </summary>
        public static readonly PaymentGroup NON_CASH = new PaymentGroup("NON_CASH");

        private readonly string __value;
        private readonly string __nameResId;

        private PaymentGroup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PAYMENTGROUP_NAME_" + __value;
        }

        public static PaymentGroup Parse(string value)
        {
            switch(value)
            {
                case "CASH": return CASH;
                case "CARD": return CARD;
                case "WRITEOFF": return WRITEOFF;
                case "NON_CASH": return NON_CASH;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PaymentGroup[] VALUES
        {
            get
            {
                return new []
                {
                    CASH, 
                    CARD, 
                    WRITEOFF, 
                    NON_CASH
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("PaymentMethod")]
    public partial class PaymentMethod : LocalizableNamePersistedEntity
    {
        private string shortName;
        private bool system;
        private bool cash;
        private bool nonCash;
        private bool prepay;
        private bool postpay;
        private bool consideration;

        protected PaymentMethod() {}

        public PaymentMethod(Guid id, LocalizableValue name, string shortName, bool system, bool cash, bool nonCash, bool prepay, bool postpay, bool consideration)
            : base(id, name)
        {
            this.shortName = shortName;
            this.system = system;
            this.cash = cash;
            this.nonCash = nonCash;
            this.prepay = prepay;
            this.postpay = postpay;
            this.consideration = consideration;
        }

        public PaymentMethod(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string ShortName
        {
            get { return shortName; }
            set { shortName = value; }
        }

        public bool System
        {
            get { return system; }
            set { system = value; }
        }

        public bool Cash
        {
            get { return cash; }
            set { cash = value; }
        }

        public bool NonCash
        {
            get { return nonCash; }
            set { nonCash = value; }
        }

        public bool Prepay
        {
            get { return prepay; }
            set { prepay = value; }
        }

        public bool Postpay
        {
            get { return postpay; }
            set { postpay = value; }
        }

        public bool Consideration
        {
            get { return consideration; }
            set { consideration = value; }
        }

    }

    [DataClass("PaymentProcessingType")]
    [EnumClass]
    public partial class PaymentProcessingType : LocalizableName<PaymentProcessingType>
    {
        /// <summary> Только внешний. </summary>
        public static readonly PaymentProcessingType EXTERNAL = new PaymentProcessingType("EXTERNAL");
        /// <summary> Только на стороне ресторана. </summary>
        public static readonly PaymentProcessingType INTERNAL = new PaymentProcessingType("INTERNAL");
        /// <summary> Как внешний, так и на стороне ресторана. </summary>
        public static readonly PaymentProcessingType BOTH = new PaymentProcessingType("BOTH");

        private readonly string __value;
        private readonly string __nameResId;

        private PaymentProcessingType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PAYMENTPROCESSINGTYPE_NAME_" + __value;
        }

        public static PaymentProcessingType Parse(string value)
        {
            switch(value)
            {
                case "EXTERNAL": return EXTERNAL;
                case "INTERNAL": return INTERNAL;
                case "BOTH": return BOTH;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PaymentProcessingType[] VALUES
        {
            get
            {
                return new []
                {
                    EXTERNAL, 
                    INTERNAL, 
                    BOTH
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("PaymentSystem")]
    public partial class PaymentSystem : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private LocalizableValue friendlyName;
        private List<Product> activationProducts;
        private Product replenishProduct;
        private Account account;
        private decimal? ndsPercent;
        [HasDefaultValue]
        private bool external = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PaymentSystem() {}

        public PaymentSystem(Guid id, LocalizableValue name, LocalizableValue friendlyName, Product replenishProduct)
            : base(id, name)
        {
            this.friendlyName = friendlyName;
            this.replenishProduct = replenishProduct;
        }

        public PaymentSystem(Guid id, LocalizableValue name, LocalizableValue friendlyName)
            : base(id, name)
        {
            this.friendlyName = friendlyName;
        }

        [NotNull]
        public LocalizableValue FriendlyName
        {
            get { return friendlyName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  friendlyName = value;
            }
        }

        public List<Product> ActivationProducts
        {
            get { return activationProducts; }
            set { activationProducts = value; }
        }

        public Product ReplenishProduct
        {
            get { return replenishProduct; }
            set { replenishProduct = value; }
        }

        [CanBeNull]
        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public decimal? NdsPercent
        {
            get { return ndsPercent; }
            set { ndsPercent = value; }
        }

        public bool External
        {
            get { return external; }
            set { external = value; }
        }

    }

    [DataClass("PaymentSystemNames")]
    [EnumClass]
    public partial class PaymentSystemNames
    {
        public static readonly PaymentSystemNames IIKO_NET = new PaymentSystemNames("IIKO_NET", "iikoNet");
        public static readonly PaymentSystemNames PLASTEK = new PaymentSystemNames("PLASTEK", "plastek");
        public static readonly PaymentSystemNames SBRF = new PaymentSystemNames("SBRF", "sbrf");
        public static readonly PaymentSystemNames SMART_SALE = new PaymentSystemNames("SMART_SALE", "smartsale");
        public static readonly PaymentSystemNames TRPOS = new PaymentSystemNames("TRPOS", "trpos");
        public static readonly PaymentSystemNames IIKO_CARD5 = new PaymentSystemNames("IIKO_CARD5", "iikoCard5");
        public static readonly PaymentSystemNames IIKO_CARD51 = new PaymentSystemNames("IIKO_CARD51", "iikoCard51");
        public static readonly PaymentSystemNames UCS = new PaymentSystemNames("UCS", "ucsPayment");
        public static readonly PaymentSystemNames HOIST = new PaymentSystemNames("HOIST", "hoist");
        public static readonly PaymentSystemNames LUCKY_TICKET = new PaymentSystemNames("LUCKY_TICKET", "luckyTicket");
        public static readonly PaymentSystemNames JETTON = new PaymentSystemNames("JETTON", "jetton");
        public static readonly PaymentSystemNames EDELWEISS = new PaymentSystemNames("EDELWEISS", "edelweiss");
        public static readonly PaymentSystemNames EPITOME = new PaymentSystemNames("EPITOME", "epitome");
        public static readonly PaymentSystemNames PETROL_PLUS = new PaymentSystemNames("PETROL_PLUS", "petrolPlus");

        private readonly string name;
        private readonly string __value;

        private PaymentSystemNames(string __value, string name)
        {
            this.__value = __value;
            this.name = name;
        }

        public static PaymentSystemNames Parse(string value)
        {
            switch(value)
            {
                case "IIKO_NET": return IIKO_NET;
                case "PLASTEK": return PLASTEK;
                case "SBRF": return SBRF;
                case "SMART_SALE": return SMART_SALE;
                case "TRPOS": return TRPOS;
                case "IIKO_CARD5": return IIKO_CARD5;
                case "IIKO_CARD51": return IIKO_CARD51;
                case "UCS": return UCS;
                case "HOIST": return HOIST;
                case "LUCKY_TICKET": return LUCKY_TICKET;
                case "JETTON": return JETTON;
                case "EDELWEISS": return EDELWEISS;
                case "EPITOME": return EPITOME;
                case "PETROL_PLUS": return PETROL_PLUS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PaymentSystemNames[] VALUES
        {
            get
            {
                return new []
                {
                    IIKO_NET, 
                    PLASTEK, 
                    SBRF, 
                    SMART_SALE, 
                    TRPOS, 
                    IIKO_CARD5, 
                    IIKO_CARD51, 
                    UCS, 
                    HOIST, 
                    LUCKY_TICKET, 
                    JETTON, 
                    EDELWEISS, 
                    EPITOME, 
                    PETROL_PLUS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Name
        {
            get { return name; }
        }

    }

    [RootEntity]
    [DataClass("PaymentType")]
    public abstract partial class PaymentType : LocalizableNamePersistedEntity
    {
        private bool printCheque;
        private PaymentMethod paymentMethod;
        [HasDefaultValue]
        private bool printNonFiscalCheque = true;
        private string chequeCaption;
        private bool combinable;
        [NotNull, NotNullField]
        private PaymentGroup paymentGroup;
        private string comment;
        [HasDefaultValue]
        private bool hideInFront = false;
        private HashSet<DepartmentEntity> departments;
        private DiscountCardType discount;
        private ICollection<ProductCategory> compatibleCategories;
        [HasDefaultValue]
        private int cashMemoChequeCopiesCount = 0;
        [HasDefaultValue]
        private bool openCashDrawerOnPay = true;
        [HasDefaultValue]
        private bool setExactPrice = false;
        private CashFlowCategory cashFlowCategory;
        [HasDefaultValue]
        private bool canBeCreatedExternallyFromBiz = false;
        private string code;
        private PaymentProcessingType paymentProcessingType;
        [HasDefaultValue]
        private bool isApplicablePaymentType = true;

        protected PaymentType() {}

        protected PaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType)
            : base(id, name)
        {
            this.printCheque = printCheque;
            this.chequeCaption = chequeCaption;
            this.combinable = combinable;
            this.paymentGroup = paymentGroup;
            this.paymentProcessingType = paymentProcessingType;
        }

        protected PaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name)
        {
            this.paymentGroup = paymentGroup;
        }

        public bool PrintCheque
        {
            get { return printCheque; }
            set { printCheque = value; }
        }

        [CanBeNull]
        public PaymentMethod PaymentMethod
        {
            get { return paymentMethod; }
            set { paymentMethod = value; }
        }

        public bool PrintNonFiscalCheque
        {
            get { return printNonFiscalCheque; }
            set { printNonFiscalCheque = value; }
        }

        public string ChequeCaption
        {
            get { return chequeCaption; }
            set { chequeCaption = value; }
        }

        public bool Combinable
        {
            get { return combinable; }
            set { combinable = value; }
        }

        [NotNull]
        public PaymentGroup PaymentGroup
        {
            get { return paymentGroup; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  paymentGroup = value;
            }
        }

        [CanBeNull]
        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public bool HideInFront
        {
            get { return hideInFront; }
            set { hideInFront = value; }
        }

        [CanBeNull]
        public HashSet<DepartmentEntity> Departments
        {
            get { return departments; }
            set { departments = value; }
        }

        [CanBeNull]
        public DiscountCardType Discount
        {
            get { return discount; }
            set { discount = value; }
        }

        [CanBeNull]
        public ICollection<ProductCategory> CompatibleCategories
        {
            get { return compatibleCategories; }
            set { compatibleCategories = value; }
        }

        public int CashMemoChequeCopiesCount
        {
            get { return cashMemoChequeCopiesCount; }
            set { cashMemoChequeCopiesCount = value; }
        }

        public bool OpenCashDrawerOnPay
        {
            get { return openCashDrawerOnPay; }
            set { openCashDrawerOnPay = value; }
        }

        public bool SetExactPrice
        {
            get { return setExactPrice; }
            set { setExactPrice = value; }
        }

        [CanBeNull]
        public CashFlowCategory CashFlowCategory
        {
            get { return cashFlowCategory; }
            set { cashFlowCategory = value; }
        }

        public bool CanBeCreatedExternallyFromBiz
        {
            get { return canBeCreatedExternallyFromBiz; }
            set { canBeCreatedExternallyFromBiz = value; }
        }

        [CanBeNull]
        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public PaymentProcessingType PaymentProcessingType
        {
            get { return paymentProcessingType; }
            set { paymentProcessingType = value; }
        }

        public bool IsApplicablePaymentType
        {
            get { return isApplicablePaymentType; }
            set { isApplicablePaymentType = value; }
        }

    }

    [DataClass("SessionFullReport")]
    public partial class SessionFullReport : RestoEvent
    {
        private Guid? sessionId;
        private string htmlText;

        protected SessionFullReport() {}

        public SessionFullReport(Guid id, DepartmentEntity department, DateTime date, Guid? sessionId, string htmlText)
            : base(id, department, date)
        {
            this.sessionId = sessionId;
            this.htmlText = htmlText;
        }

        public SessionFullReport(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public Guid? SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

        public string HtmlText
        {
            get { return htmlText; }
            set { htmlText = value; }
        }

    }

    [DataClass("VoucherPaymentType")]
    public partial class VoucherPaymentType : NonCashPaymentType
    {
        [HasDefaultValue]
        private bool applyToSelectedProductsAndGroupsOnly = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<ProductTreeEntity> productsAndGroups = new HashSet<ProductTreeEntity>();
        [HasDefaultValue]
        private bool isAmountNominal = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public VoucherPaymentType() {}

        public VoucherPaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, PaymentSystem paymentSystem)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType, paymentSystem)
        {

        }

        public VoucherPaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name, paymentGroup)
        {

        }

        public bool ApplyToSelectedProductsAndGroupsOnly
        {
            get { return applyToSelectedProductsAndGroupsOnly; }
            set { applyToSelectedProductsAndGroupsOnly = value; }
        }

        [NotNull]
        public HashSet<ProductTreeEntity> ProductsAndGroups
        {
            get { return productsAndGroups; }
        }

        public bool IsAmountNominal
        {
            get { return isAmountNominal; }
            set { isAmountNominal = value; }
        }

    }

    [DataClass("WriteoffPaymentType")]
    public partial class WriteoffPaymentType : PaymentType
    {
        private string reason;
        private Account account;
        private int? limit;
        private PaymentAuthorizationType authorization;
        private bool? isReasonRequired;
        private bool? isAuthRequired;
        private DocumentType documentType;
        private CookingPlaceType cookingPlaceType;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public WriteoffPaymentType() {}

        public WriteoffPaymentType(Guid id, LocalizableValue name, bool printCheque, string chequeCaption, bool combinable, PaymentGroup paymentGroup, PaymentProcessingType paymentProcessingType, string reason)
            : base(id, name, printCheque, chequeCaption, combinable, paymentGroup, paymentProcessingType)
        {
            this.reason = reason;
        }

        public WriteoffPaymentType(Guid id, LocalizableValue name, PaymentGroup paymentGroup)
            : base(id, name, paymentGroup)
        {

        }

        public string Reason
        {
            get { return reason; }
            set { reason = value; }
        }

        [CanBeNull]
        public Account Account
        {
            get { return account; }
            set { account = value; }
        }

        public int? Limit
        {
            get { return limit; }
            set { limit = value; }
        }

        [CanBeNull]
        public PaymentAuthorizationType Authorization
        {
            get { return authorization; }
            set { authorization = value; }
        }

        public bool? IsReasonRequired
        {
            get { return isReasonRequired; }
            set { isReasonRequired = value; }
        }

        public bool? IsAuthRequired
        {
            get { return isAuthRequired; }
            set { isAuthRequired = value; }
        }

        [CanBeNull]
        public DocumentType DocumentType
        {
            get { return documentType; }
            set { documentType = value; }
        }

        [CanBeNull]
        public CookingPlaceType CookingPlaceType
        {
            get { return cookingPlaceType; }
            set { cookingPlaceType = value; }
        }

    }

    [RootEntity]
    [DataClass("PluginSettings")]
    public partial class PluginSettings : PersistedEntity
    {
        private Guid pluginKey;
        private Guid? boundEntityId;
        private int version;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string displayName = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string rawValue = "";

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PluginSettings() {}

        public PluginSettings(Guid id, Guid pluginKey, Guid? boundEntityId, int version, string displayName, string rawValue)
            : base(id)
        {
            this.pluginKey = pluginKey;
            this.boundEntityId = boundEntityId;
            this.version = version;
            this.displayName = displayName;
            this.rawValue = rawValue;
        }

        public PluginSettings(Guid id, Guid pluginKey, string displayName, string rawValue)
            : base(id)
        {
            this.pluginKey = pluginKey;
            this.displayName = displayName;
            this.rawValue = rawValue;
        }

        public Guid PluginKey
        {
            get { return pluginKey; }
            set { pluginKey = value; }
        }

        public Guid? BoundEntityId
        {
            get { return boundEntityId; }
            set { boundEntityId = value; }
        }

        public int Version
        {
            get { return version; }
            set { version = value; }
        }

        [NotNull]
        public string DisplayName
        {
            get { return displayName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  displayName = value;
            }
        }

        [NotNull]
        public string RawValue
        {
            get { return rawValue; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  rawValue = value;
            }
        }

    }

    [DataClass("PowerDeviceChannelStateResult")]
    public partial class PowerDeviceChannelStateResult : AgentOkDeviceResult
    {
        private bool? result;

        protected PowerDeviceChannelStateResult() {}

        public PowerDeviceChannelStateResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, bool? result)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.result = result;
        }
        public bool? Result
        {
            get { return result; }
            set { result = value; }
        }

    }

    [DataClass("PowerDeviceRegisterTask")]
    public partial class PowerDeviceRegisterTask : AgentTask
    {

        protected PowerDeviceRegisterTask() {}

        public PowerDeviceRegisterTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("SetChannelStateTask")]
    public partial class SetChannelStateTask : PowerDeviceRegisterTask
    {
        private int channel;
        private bool state;

        protected SetChannelStateTask() {}

        public SetChannelStateTask(bool success, Guid? id, Guid? deviceId, int channel, bool state)
            : base(success, id, deviceId)
        {
            this.channel = channel;
            this.state = state;
        }
        public int Channel
        {
            get { return channel; }
            set { channel = value; }
        }

        public bool State
        {
            get { return state; }
            set { state = value; }
        }

    }

    [DataClass("AlposAf01Driver")]
    public partial class AlposAf01Driver : ChequePrinterDriver
    {
        [HasDefaultValue]
        private bool uploadExternalDataInMainCash = true;


        public bool UploadExternalDataInMainCash
        {
            get { return uploadExternalDataInMainCash; }
            set { uploadExternalDataInMainCash = value; }
        }

    }

    [DataClass("ArtSoftFiscalRegisterDriver")]
    public partial class ArtSoftFiscalRegisterDriver : ChequePrinterDriver
    {


    }

    [DataClass("AtolDriver")]
    public partial class AtolDriver : ChequePrinterDriver
    {


    }

    [DataClass("AtolPrinterDriver")]
    public partial class AtolPrinterDriver : EpsonT88Driver
    {


    }

    [DataClass("AzimuthFnPrimDriver")]
    public partial class AzimuthFnPrimDriver : ChequePrinterDriver
    {


    }

    [DataClass("AzimuthPrimDriver")]
    public partial class AzimuthPrimDriver : ChequePrinterDriver
    {


    }

    [DataClass("BP21PrinterDriver")]
    public partial class BP21PrinterDriver : PortWriterDriver
    {
        private int labelWidth;
        private int labelHeight;
        private int dpi;
        private int labelMarginHor;
        private int labelMarginVert;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public BP21PrinterDriver() {}

        public BP21PrinterDriver(int labelWidth, int labelHeight, int dpi, int labelMarginHor, int labelMarginVert)
        {
            this.labelWidth = labelWidth;
            this.labelHeight = labelHeight;
            this.dpi = dpi;
            this.labelMarginHor = labelMarginHor;
            this.labelMarginVert = labelMarginVert;
        }
        public int LabelWidth
        {
            get { return labelWidth; }
            set { labelWidth = value; }
        }

        public int LabelHeight
        {
            get { return labelHeight; }
            set { labelHeight = value; }
        }

        public int Dpi
        {
            get { return dpi; }
            set { dpi = value; }
        }

        public int LabelMarginHor
        {
            get { return labelMarginHor; }
            set { labelMarginHor = value; }
        }

        public int LabelMarginVert
        {
            get { return labelMarginVert; }
            set { labelMarginVert = value; }
        }

    }

    [DataClass("BP41PrinterDriver")]
    public partial class BP41PrinterDriver : PortWriterDriver
    {
        [HasDefaultValue]
        private int labelWidth = 432;
        [HasDefaultValue]
        private int labelHeight = 320;
        [HasDefaultValue]
        private int labelWidthInMm = 57;
        [HasDefaultValue]
        private int labelHeightInMm = 39;
        [HasDefaultValue]
        private int dpi = 203;
        [HasDefaultValue]
        private int labelMarginHor = 1;
        [HasDefaultValue]
        private int labelMarginVert = 0;


        public int LabelWidth
        {
            get { return labelWidth; }
            set { labelWidth = value; }
        }

        public int LabelHeight
        {
            get { return labelHeight; }
            set { labelHeight = value; }
        }

        public int LabelWidthInMm
        {
            get { return labelWidthInMm; }
            set { labelWidthInMm = value; }
        }

        public int LabelHeightInMm
        {
            get { return labelHeightInMm; }
            set { labelHeightInMm = value; }
        }

        public int Dpi
        {
            get { return dpi; }
            set { dpi = value; }
        }

        public int LabelMarginHor
        {
            get { return labelMarginHor; }
            set { labelMarginHor = value; }
        }

        public int LabelMarginVert
        {
            get { return labelMarginVert; }
            set { labelMarginVert = value; }
        }

    }

    [DataClass("BrioFisFm32Driver")]
    public partial class BrioFisFm32Driver : ChequePrinterDriver
    {


    }

    [DataClass("BtpR580IIDriver")]
    public partial class BtpR580IIDriver : EpsonT88Driver
    {


    }

    [DataClass("CashServerDriver")]
    public partial class CashServerDriver : ChequePrinterDriver
    {
        private IPrinterDevice printerDevice;
        [HasDefaultValue]
        private bool emulateDayShift = false;
        [HasDefaultValue]
        private bool emulateFiscalReports = false;
        [HasDefaultValue]
        private bool emulateFiscalCheques = false;

        protected CashServerDriver() {}

        public CashServerDriver(IPrinterDevice printerDevice)
        {
            this.printerDevice = printerDevice;
        }
        public IPrinterDevice PrinterDevice
        {
            get { return printerDevice; }
            set { printerDevice = value; }
        }

        public bool EmulateDayShift
        {
            get { return emulateDayShift; }
            set { emulateDayShift = value; }
        }

        public bool EmulateFiscalReports
        {
            get { return emulateFiscalReports; }
            set { emulateFiscalReports = value; }
        }

        public bool EmulateFiscalCheques
        {
            get { return emulateFiscalCheques; }
            set { emulateFiscalCheques = value; }
        }

    }

    [DataClass("CheckboxDriver")]
    public partial class CheckboxDriver : ArtSoftFiscalRegisterDriver
    {


    }

    [DataClass("CheckwayDriver")]
    public partial class CheckwayDriver : EpsonT88Driver
    {
        private CheckwayProduct productId;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CheckwayDriver() {}

        public CheckwayDriver(CheckwayProduct productId)
        {
            this.productId = productId;
        }
        public CheckwayProduct ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

    }

    [DataClass("CheckwayProduct")]
    [EnumClass]
    public partial class CheckwayProduct : LocalizableName<CheckwayProduct>
    {
        /// <summary> CheckWay Print 1000. </summary>
        public static readonly CheckwayProduct PRINT1000 = new CheckwayProduct("PRINT1000");
        /// <summary> CheckWay Print 3000. </summary>
        public static readonly CheckwayProduct PRINT3000 = new CheckwayProduct("PRINT3000");

        private readonly string __value;
        private readonly string __nameResId;

        private CheckwayProduct(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CHECKWAYPRODUCT_NAME_" + __value;
        }

        public static CheckwayProduct Parse(string value)
        {
            switch(value)
            {
                case "PRINT1000": return PRINT1000;
                case "PRINT3000": return PRINT3000;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CheckwayProduct[] VALUES
        {
            get
            {
                return new []
                {
                    PRINT1000, 
                    PRINT3000
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ChequePrinterDriver")]
    public abstract partial class ChequePrinterDriver : PrinterDriver
    {


    }

    [DataClass("ChequePrinterNullDriver")]
    public partial class ChequePrinterNullDriver : ChequePrinterDriver
    {


    }

    [DataClass("ChequePrinterStub")]
    public partial class ChequePrinterStub : ChequePrinterDriver
    {
        private IPrinterDevice printerDevice;
        [HasDefaultValue]
        private bool emulateDayShift = false;
        [HasDefaultValue]
        private bool emulateFiscalReports = false;
        [HasDefaultValue]
        private bool emulateFiscalCheques = false;
        [HasDefaultValue]
        private bool isVirtual = false;

        protected ChequePrinterStub() {}

        public ChequePrinterStub(IPrinterDevice printerDevice)
        {
            this.printerDevice = printerDevice;
        }
        public IPrinterDevice PrinterDevice
        {
            get { return printerDevice; }
            set { printerDevice = value; }
        }

        public bool EmulateDayShift
        {
            get { return emulateDayShift; }
            set { emulateDayShift = value; }
        }

        public bool EmulateFiscalReports
        {
            get { return emulateFiscalReports; }
            set { emulateFiscalReports = value; }
        }

        public bool EmulateFiscalCheques
        {
            get { return emulateFiscalCheques; }
            set { emulateFiscalCheques = value; }
        }

        public bool IsVirtual
        {
            get { return isVirtual; }
            set { isVirtual = value; }
        }

    }

    [DataClass("CitizenCTSxxxDriver")]
    public partial class CitizenCTSxxxDriver : EpsonT88Driver
    {


    }

    [DataClass("ComstarDriver")]
    public partial class ComstarDriver : PortWriterDriver
    {


    }

    [DataClass("ConnectionInterface")]
    [EnumClass]
    public partial class ConnectionInterface
    {
        public static readonly ConnectionInterface COM = new ConnectionInterface("COM", "COM");
        public static readonly ConnectionInterface ETHERNET = new ConnectionInterface("ETHERNET", "ETHERNET");
        public static readonly ConnectionInterface USB = new ConnectionInterface("USB", "USB");

        private readonly string name;
        private readonly string __value;

        private ConnectionInterface(string __value, string name)
        {
            this.__value = __value;
            this.name = name;
        }

        public static ConnectionInterface Parse(string value)
        {
            switch(value)
            {
                case "COM": return COM;
                case "ETHERNET": return ETHERNET;
                case "USB": return USB;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ConnectionInterface[] VALUES
        {
            get
            {
                return new []
                {
                    COM, 
                    ETHERNET, 
                    USB
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Name
        {
            get { return name; }
        }

    }

    [DataClass("DatecsDriver")]
    public partial class DatecsDriver : ChequePrinterDriver
    {


    }

    [DataClass("EmpirijaDriver")]
    public partial class EmpirijaDriver : ChequePrinterDriver
    {


    }

    [DataClass("EpsonT88Driver")]
    public partial class EpsonT88Driver : PulsePrinterDriver
    {


    }

    [DataClass("EpsonTMU220Driver")]
    public partial class EpsonTMU220Driver : PulsePrinterDriver
    {


    }

    [DataClass("EpsonTMU295Driver")]
    public partial class EpsonTMU295Driver : PulsePrinterDriver
    {
        [HasDefaultValue]
        private int linesOnPage = 20;
        private int emptyLines;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EpsonTMU295Driver() {}

        public EpsonTMU295Driver(int emptyLines)
        {
            this.emptyLines = emptyLines;
        }
        public int LinesOnPage
        {
            get { return linesOnPage; }
            set { linesOnPage = value; }
        }

        public int EmptyLines
        {
            get { return emptyLines; }
            set { emptyLines = value; }
        }

    }

    [DataClass("EscPosPrinterDriver")]
    public partial class EscPosPrinterDriver : PortWriterDriver
    {


    }

    [DataClass("ExternalCashRegisterDriver")]
    public partial class ExternalCashRegisterDriver : ChequePrinterDriver
    {


    }

    [DataClass("HrsDriver")]
    public partial class HrsDriver : ChequePrinterDriver
    {


    }

    [DataClass("IcsDriver")]
    public partial class IcsDriver : ChequePrinterDriver
    {


    }

    [DataClass("IksSpsDriver")]
    public partial class IksSpsDriver : ChequePrinterDriver
    {


    }

    [DataClass("Maria301Driver")]
    public partial class Maria301Driver : ChequePrinterDriver
    {


    }

    [DataClass("Mercury130Driver")]
    public partial class Mercury130Driver : ChequePrinterDriver
    {


    }

    [DataClass("MercuryDriver")]
    public partial class MercuryDriver : ChequePrinterDriver
    {


    }

    [DataClass("MstarTKDriver")]
    public partial class MstarTKDriver : MercuryDriver
    {


    }

    [DataClass("OPOSPrinterDriver")]
    public partial class OPOSPrinterDriver : PrinterDriver
    {
        [HasDefaultValue]
        private int oposFont0Width = 19;
        [HasDefaultValue]
        private int oposFont1Width = 24;
        [HasDefaultValue]
        private int oposFont2Width = 48;
        [HasDefaultValue]
        private string codePage = "cp866";
        [HasDefaultValue]
        private int pulsePort = 0;


        public int OposFont0Width
        {
            get { return oposFont0Width; }
            set { oposFont0Width = value; }
        }

        public int OposFont1Width
        {
            get { return oposFont1Width; }
            set { oposFont1Width = value; }
        }

        public int OposFont2Width
        {
            get { return oposFont2Width; }
            set { oposFont2Width = value; }
        }

        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public int PulsePort
        {
            get { return pulsePort; }
            set { pulsePort = value; }
        }

    }

    [DataClass("OPOSRegisterDriver")]
    public partial class OPOSRegisterDriver : ChequePrinterDriver
    {


    }

    [DataClass("PilotFP410KDriver")]
    public partial class PilotFP410KDriver : ChequePrinterDriver
    {


    }

    [DataClass("PiritDriver")]
    public partial class PiritDriver : ChequePrinterDriver
    {


    }

    [DataClass("PiritFnDriver")]
    public partial class PiritFnDriver : ChequePrinterDriver
    {


    }

    [DataClass("PortWriterDriver")]
    public abstract partial class PortWriterDriver : PrinterDriver
    {
        [HasDefaultValue]
        private string codePage = "cp866";
        [HasDefaultValue]
        private int widthInDots = 576;


        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public int WidthInDots
        {
            get { return widthInDots; }
            set { widthInDots = value; }
        }

    }

    [DataClass("PortWriterDriverTask")]
    public partial class PortWriterDriverTask : AgentTask
    {
        private string codePage;
        private string byteStream;
        [HasDefaultValue]
        private bool waitForCompletion = false;

        protected PortWriterDriverTask() {}

        public PortWriterDriverTask(bool success, Guid? id, Guid? deviceId, string codePage, string byteStream)
            : base(success, id, deviceId)
        {
            this.codePage = codePage;
            this.byteStream = byteStream;
        }
        public string CodePage
        {
            get { return codePage; }
            set { codePage = value; }
        }

        public string ByteStream
        {
            get { return byteStream; }
            set { byteStream = value; }
        }

        public bool WaitForCompletion
        {
            get { return waitForCompletion; }
            set { waitForCompletion = value; }
        }

    }

    [DataClass("PoscenterDriver")]
    public partial class PoscenterDriver : PortWriterDriver
    {
        private int labelWidth;
        private int labelHeight;
        private int dpi;
        private int labelMarginHor;
        private int labelMarginVert;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PoscenterDriver() {}

        public PoscenterDriver(int labelWidth, int labelHeight, int dpi, int labelMarginHor, int labelMarginVert)
        {
            this.labelWidth = labelWidth;
            this.labelHeight = labelHeight;
            this.dpi = dpi;
            this.labelMarginHor = labelMarginHor;
            this.labelMarginVert = labelMarginVert;
        }
        public int LabelWidth
        {
            get { return labelWidth; }
            set { labelWidth = value; }
        }

        public int LabelHeight
        {
            get { return labelHeight; }
            set { labelHeight = value; }
        }

        public int Dpi
        {
            get { return dpi; }
            set { dpi = value; }
        }

        public int LabelMarginHor
        {
            get { return labelMarginHor; }
            set { labelMarginHor = value; }
        }

        public int LabelMarginVert
        {
            get { return labelMarginVert; }
            set { labelMarginVert = value; }
        }

    }

    [DataClass("PosiflexDriver")]
    public partial class PosiflexDriver : PulsePrinterDriver
    {


    }

    [DataClass("PosnetDriver")]
    public partial class PosnetDriver : ChequePrinterDriver
    {


    }

    [DataClass("PosnetThermalDriver")]
    public partial class PosnetThermalDriver : ChequePrinterDriver
    {


    }

    [DataClass("PrimFRDriver")]
    public partial class PrimFRDriver : ChequePrinterDriver
    {


    }

    [DataClass("PrintItemInfo")]
    public partial class PrintItemInfo : ChequeSale
    {
        private Guid? productId;
        [HasDefaultValue]
        private bool deleted = false;
        private decimal? initialAmount;
        private ICollection<PrintItemInfo> choices;

        protected PrintItemInfo() {}

        public PrintItemInfo(string name, decimal? price, decimal? amount, int section, decimal? nds, decimal? discountSum, decimal? increaseSum, decimal? sum, decimal? initialAmount)
            : base(name, price, amount, section, nds, discountSum, increaseSum, sum)
        {
            this.initialAmount = initialAmount;
        }
        public Guid? ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public bool Deleted
        {
            get { return deleted; }
            set { deleted = value; }
        }

        public decimal? InitialAmount
        {
            get { return initialAmount; }
            set { initialAmount = value; }
        }

        [CanBeNull]
        public ICollection<PrintItemInfo> Choices
        {
            get { return choices; }
            set { choices = value; }
        }

    }

    [DataClass("PrintOrientation")]
    [EnumClass]
    public partial class PrintOrientation : LocalizableName<PrintOrientation>
    {
        /// <summary> По умолчанию. </summary>
        public static readonly PrintOrientation DEFAULT = new PrintOrientation("DEFAULT");
        /// <summary> Сверху вниз. </summary>
        public static readonly PrintOrientation TOP_TO_BOTTOM = new PrintOrientation("TOP_TO_BOTTOM");
        /// <summary> Снизу вверх. </summary>
        public static readonly PrintOrientation BOTTOM_TO_TOP = new PrintOrientation("BOTTOM_TO_TOP");

        private readonly string __value;
        private readonly string __nameResId;

        private PrintOrientation(string __value)
        {
            this.__value = __value;
            this.__nameResId = "PRINTORIENTATION_NAME_" + __value;
        }

        public static PrintOrientation Parse(string value)
        {
            switch(value)
            {
                case "DEFAULT": return DEFAULT;
                case "TOP_TO_BOTTOM": return TOP_TO_BOTTOM;
                case "BOTTOM_TO_TOP": return BOTTOM_TO_TOP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PrintOrientation[] VALUES
        {
            get
            {
                return new []
                {
                    DEFAULT, 
                    TOP_TO_BOTTOM, 
                    BOTTOM_TO_TOP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PrinterDriver")]
    public abstract partial class PrinterDriver : AgentDriver
    {


    }

    [DataClass("PrinterNullDriver")]
    public partial class PrinterNullDriver : PrinterDriver
    {


    }

    [DataClass("PrinterOpenDrawerTask")]
    public partial class PrinterOpenDrawerTask : AgentTask
    {
        private int pulsePort;

        protected PrinterOpenDrawerTask() {}

        public PrinterOpenDrawerTask(bool success, Guid? id, Guid? deviceId, int pulsePort)
            : base(success, id, deviceId)
        {
            this.pulsePort = pulsePort;
        }
        public int PulsePort
        {
            get { return pulsePort; }
            set { pulsePort = value; }
        }

    }

    [DataClass("PulsePrinterDriver")]
    public abstract partial class PulsePrinterDriver : PortWriterDriver
    {
        [HasDefaultValue]
        private int pulsePort = 0;


        public int PulsePort
        {
            get { return pulsePort; }
            set { pulsePort = value; }
        }

    }

    [DataClass("RestaurantPrintOption")]
    [EnumClass]
    public partial class RestaurantPrintOption : LocalizableName<RestaurantPrintOption>
    {
        /// <summary> Без печати и занесения в буфер КЛ. </summary>
        public static readonly RestaurantPrintOption NONE = new RestaurantPrintOption("NONE");
        /// <summary> Печать без занесения в буфер КЛ. </summary>
        public static readonly RestaurantPrintOption TAPE = new RestaurantPrintOption("TAPE");
        /// <summary> Печать и занесение в буфер КЛ. </summary>
        public static readonly RestaurantPrintOption TAPE_AND_CR = new RestaurantPrintOption("TAPE_AND_CR");

        private readonly string __value;
        private readonly string __nameResId;

        private RestaurantPrintOption(string __value)
        {
            this.__value = __value;
            this.__nameResId = "RESTAURANTPRINTOPTION_NAME_" + __value;
        }

        public static RestaurantPrintOption Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "TAPE": return TAPE;
                case "TAPE_AND_CR": return TAPE_AND_CR;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RestaurantPrintOption[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    TAPE, 
                    TAPE_AND_CR
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("SMxxxDriver")]
    public partial class SMxxxDriver : PortWriterDriver
    {


    }

    [DataClass("SP298Driver")]
    public partial class SP298Driver : PortWriterDriver
    {
        [HasDefaultValue]
        private int linesOnPage = 20;
        private int emptyLines;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public SP298Driver() {}

        public SP298Driver(int emptyLines)
        {
            this.emptyLines = emptyLines;
        }
        public int LinesOnPage
        {
            get { return linesOnPage; }
            set { linesOnPage = value; }
        }

        public int EmptyLines
        {
            get { return emptyLines; }
            set { emptyLines = value; }
        }

    }

    [DataClass("SPrintTM200Driver")]
    public partial class SPrintTM200Driver : PulsePrinterDriver
    {


    }

    [DataClass("SPrintTM200SimpleDriver")]
    public partial class SPrintTM200SimpleDriver : PulsePrinterDriver
    {


    }

    [DataClass("SPxxxDriver")]
    public partial class SPxxxDriver : PortWriterDriver
    {


    }

    [DataClass("SerialPortFlowControl")]
    [EnumClass]
    public partial class SerialPortFlowControl : LocalizableName<SerialPortFlowControl>
    {
        /// <summary> Нет. </summary>
        public static readonly SerialPortFlowControl NONE = new SerialPortFlowControl("NONE");
        /// <summary> Аппаратный. </summary>
        public static readonly SerialPortFlowControl HARDWARE = new SerialPortFlowControl("HARDWARE");

        private readonly string __value;
        private readonly string __nameResId;

        private SerialPortFlowControl(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SERIALPORTFLOWCONTROL_NAME_" + __value;
        }

        public static SerialPortFlowControl Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "HARDWARE": return HARDWARE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SerialPortFlowControl[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    HARDWARE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("Shtrih600Driver")]
    public partial class Shtrih600Driver : PortWriterDriver
    {


    }

    [DataClass("Shtrih700Driver")]
    public partial class Shtrih700Driver : EpsonT88Driver
    {


    }

    [DataClass("ShtrihDriver")]
    public partial class ShtrihDriver : ChequePrinterDriver
    {


    }

    [DataClass("ShtrihFRFDriver")]
    public partial class ShtrihFRFDriver : ShtrihDriver
    {


    }

    [DataClass("SparkDriver")]
    public partial class SparkDriver : ChequePrinterDriver
    {


    }

    [DataClass("SparkFnDriver")]
    public partial class SparkFnDriver : ChequePrinterDriver
    {


    }

    [DataClass("TSPxxxDriver")]
    public partial class TSPxxxDriver : PortWriterDriver
    {


    }

    [DataClass("TaxationSystem")]
    [EnumClass]
    public partial class TaxationSystem : LocalizableName<TaxationSystem>
    {
        /// <summary> Общая. </summary>
        public static readonly TaxationSystem COMMON = new TaxationSystem("COMMON");
        /// <summary> Упрощенная доход. </summary>
        public static readonly TaxationSystem SIMPLIFIED1 = new TaxationSystem("SIMPLIFIED1");
        /// <summary> Упрощенная доход минус расход. </summary>
        public static readonly TaxationSystem SIMPLIFIED2 = new TaxationSystem("SIMPLIFIED2");
        /// <summary> Единый налог на вмененный доход. </summary>
        public static readonly TaxationSystem SINGLETAXONIMPUTEDINCOME = new TaxationSystem("SINGLETAXONIMPUTEDINCOME");
        /// <summary> Единый сельскохозяйственный налог. </summary>
        public static readonly TaxationSystem SINGLEAGRICULTURALTAX = new TaxationSystem("SINGLEAGRICULTURALTAX");
        /// <summary> Патентная система налогообложения. </summary>
        public static readonly TaxationSystem PATENT = new TaxationSystem("PATENT");

        private readonly string __value;
        private readonly string __nameResId;

        private TaxationSystem(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TAXATIONSYSTEM_NAME_" + __value;
        }

        public static TaxationSystem Parse(string value)
        {
            switch(value)
            {
                case "COMMON": return COMMON;
                case "SIMPLIFIED1": return SIMPLIFIED1;
                case "SIMPLIFIED2": return SIMPLIFIED2;
                case "SINGLETAXONIMPUTEDINCOME": return SINGLETAXONIMPUTEDINCOME;
                case "SINGLEAGRICULTURALTAX": return SINGLEAGRICULTURALTAX;
                case "PATENT": return PATENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TaxationSystem[] VALUES
        {
            get
            {
                return new []
                {
                    COMMON, 
                    SIMPLIFIED1, 
                    SIMPLIFIED2, 
                    SINGLETAXONIMPUTEDINCOME, 
                    SINGLEAGRICULTURALTAX, 
                    PATENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("TsplPrinterDriver")]
    public partial class TsplPrinterDriver : PortWriterDriver
    {
        [HasDefaultValue]
        private int labelWidth = 432;
        [HasDefaultValue]
        private int labelHeight = 320;
        [HasDefaultValue]
        private int dpi = 203;
        [HasDefaultValue]
        private int labelMarginHor = 1;
        [HasDefaultValue]
        private int labelMarginVert = 0;


        public int LabelWidth
        {
            get { return labelWidth; }
            set { labelWidth = value; }
        }

        public int LabelHeight
        {
            get { return labelHeight; }
            set { labelHeight = value; }
        }

        public int Dpi
        {
            get { return dpi; }
            set { dpi = value; }
        }

        public int LabelMarginHor
        {
            get { return labelMarginHor; }
            set { labelMarginHor = value; }
        }

        public int LabelMarginVert
        {
            get { return labelMarginVert; }
            set { labelMarginVert = value; }
        }

    }

    [DataClass("UnisystemDriver")]
    public partial class UnisystemDriver : ChequePrinterDriver
    {


    }

    [DataClass("WindowsPrinterDriver")]
    public partial class WindowsPrinterDriver : PortWriterDriver
    {


    }

    [DataClass("ZebraEplDriver")]
    public partial class ZebraEplDriver : PortWriterDriver
    {
        private int labelWidth;
        private int labelHeight;
        private int dpi;
        private int labelMarginHor;
        private int labelMarginVert;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ZebraEplDriver() {}

        public ZebraEplDriver(int labelWidth, int labelHeight, int dpi, int labelMarginHor, int labelMarginVert)
        {
            this.labelWidth = labelWidth;
            this.labelHeight = labelHeight;
            this.dpi = dpi;
            this.labelMarginHor = labelMarginHor;
            this.labelMarginVert = labelMarginVert;
        }
        public int LabelWidth
        {
            get { return labelWidth; }
            set { labelWidth = value; }
        }

        public int LabelHeight
        {
            get { return labelHeight; }
            set { labelHeight = value; }
        }

        public int Dpi
        {
            get { return dpi; }
            set { dpi = value; }
        }

        public int LabelMarginHor
        {
            get { return labelMarginHor; }
            set { labelMarginHor = value; }
        }

        public int LabelMarginVert
        {
            get { return labelMarginVert; }
            set { labelMarginVert = value; }
        }

    }

    [DataClass("CashRegisterResult")]
    public partial class CashRegisterResult : AgentOkDeviceResult
    {
        private decimal? cashSum;
        private bool haveCashSum;
        private decimal? totalIncomeSum;
        private bool haveTotalIncomeSum;
        private int session;
        private bool haveSession;
        private string serialNumber;
        private bool haveSerial;
        private int documentNumber;
        private bool haveDocument;
        private string documentSign;
        private bool haveDocumentSign;
        private string fnSerialNumber;
        private bool haveFnSerialNumber;
        private bool haveSaleNumber;
        [HasDefaultValue]
        private int saleNumber = 0;
        private bool haveBillNumber;
        [HasDefaultValue]
        private int billNumber = 0;
        private bool haveRtcDateTime;
        private string rtcDateTime;
        private bool nearPaperEnd;
        private bool haveNearPaperEnd;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CashRegisterResult() {}

        public CashRegisterResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, decimal? cashSum, bool haveCashSum, decimal? totalIncomeSum, bool haveTotalIncomeSum, int session, bool haveSession, string serialNumber, bool haveSerial, int documentNumber, bool haveDocument, string documentSign, bool haveDocumentSign, string fnSerialNumber, bool haveFnSerialNumber, bool haveSaleNumber, bool haveBillNumber, bool haveRtcDateTime, string rtcDateTime, bool nearPaperEnd, bool haveNearPaperEnd)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.cashSum = cashSum;
            this.haveCashSum = haveCashSum;
            this.totalIncomeSum = totalIncomeSum;
            this.haveTotalIncomeSum = haveTotalIncomeSum;
            this.session = session;
            this.haveSession = haveSession;
            this.serialNumber = serialNumber;
            this.haveSerial = haveSerial;
            this.documentNumber = documentNumber;
            this.haveDocument = haveDocument;
            this.documentSign = documentSign;
            this.haveDocumentSign = haveDocumentSign;
            this.fnSerialNumber = fnSerialNumber;
            this.haveFnSerialNumber = haveFnSerialNumber;
            this.haveSaleNumber = haveSaleNumber;
            this.haveBillNumber = haveBillNumber;
            this.haveRtcDateTime = haveRtcDateTime;
            this.rtcDateTime = rtcDateTime;
            this.nearPaperEnd = nearPaperEnd;
            this.haveNearPaperEnd = haveNearPaperEnd;
        }
        public decimal? CashSum
        {
            get { return cashSum; }
            set { cashSum = value; }
        }

        public bool HaveCashSum
        {
            get { return haveCashSum; }
            set { haveCashSum = value; }
        }

        public decimal? TotalIncomeSum
        {
            get { return totalIncomeSum; }
            set { totalIncomeSum = value; }
        }

        public bool HaveTotalIncomeSum
        {
            get { return haveTotalIncomeSum; }
            set { haveTotalIncomeSum = value; }
        }

        public int Session
        {
            get { return session; }
            set { session = value; }
        }

        public bool HaveSession
        {
            get { return haveSession; }
            set { haveSession = value; }
        }

        public string SerialNumber
        {
            get { return serialNumber; }
            set { serialNumber = value; }
        }

        public bool HaveSerial
        {
            get { return haveSerial; }
            set { haveSerial = value; }
        }

        public int DocumentNumber
        {
            get { return documentNumber; }
            set { documentNumber = value; }
        }

        public bool HaveDocument
        {
            get { return haveDocument; }
            set { haveDocument = value; }
        }

        public string DocumentSign
        {
            get { return documentSign; }
            set { documentSign = value; }
        }

        public bool HaveDocumentSign
        {
            get { return haveDocumentSign; }
            set { haveDocumentSign = value; }
        }

        public string FnSerialNumber
        {
            get { return fnSerialNumber; }
            set { fnSerialNumber = value; }
        }

        public bool HaveFnSerialNumber
        {
            get { return haveFnSerialNumber; }
            set { haveFnSerialNumber = value; }
        }

        public bool HaveSaleNumber
        {
            get { return haveSaleNumber; }
            set { haveSaleNumber = value; }
        }

        public int SaleNumber
        {
            get { return saleNumber; }
            set { saleNumber = value; }
        }

        public bool HaveBillNumber
        {
            get { return haveBillNumber; }
            set { haveBillNumber = value; }
        }

        public int BillNumber
        {
            get { return billNumber; }
            set { billNumber = value; }
        }

        public bool HaveRtcDateTime
        {
            get { return haveRtcDateTime; }
            set { haveRtcDateTime = value; }
        }

        public string RtcDateTime
        {
            get { return rtcDateTime; }
            set { rtcDateTime = value; }
        }

        public bool NearPaperEnd
        {
            get { return nearPaperEnd; }
            set { nearPaperEnd = value; }
        }

        public bool HaveNearPaperEnd
        {
            get { return haveNearPaperEnd; }
            set { haveNearPaperEnd = value; }
        }

    }

    [DataClass("CashRegisterTask")]
    public partial class CashRegisterTask : AgentTask
    {
        private string cashierName;

        protected CashRegisterTask() {}

        public CashRegisterTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
        [CanBeNull]
        public string CashierName
        {
            get { return cashierName; }
            set { cashierName = value; }
        }

    }

    [DataClass("ChequeCardPayment")]
    public partial class ChequeCardPayment
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [HasDefaultValue]
        private decimal sum = 0;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string comment = "";

        protected ChequeCardPayment() {}

        public ChequeCardPayment(string name, decimal sum, string comment)
        {
            this.name = name;
            this.sum = sum;
            this.comment = comment;
        }
        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        public decimal Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        [NotNull]
        public string Comment
        {
            get { return comment; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  comment = value;
            }
        }

    }

    [DataClass("ChequePrintSettings")]
    public partial class ChequePrintSettings
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string billHeader = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string billFooter = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string reportHeader = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<ChequeType, ChequeTemplate> mainTemplates = new Dictionary<ChequeType, ChequeTemplate>();

        protected ChequePrintSettings() {}

        public ChequePrintSettings(string billHeader, string billFooter, string reportHeader)
        {
            this.billHeader = billHeader;
            this.billFooter = billFooter;
            this.reportHeader = reportHeader;
        }
        [NotNull]
        public string BillHeader
        {
            get { return billHeader; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  billHeader = value;
            }
        }

        [NotNull]
        public string BillFooter
        {
            get { return billFooter; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  billFooter = value;
            }
        }

        [NotNull]
        public string ReportHeader
        {
            get { return reportHeader; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  reportHeader = value;
            }
        }

        [NotNull]
        public Dictionary<ChequeType, ChequeTemplate> MainTemplates
        {
            get { return mainTemplates; }
        }

    }

    [DataClass("ChequeSale")]
    public partial class ChequeSale
    {
        [HasDefaultValue]
        private string code = "";
        private string name;
        private decimal? price;
        private decimal? amount;
        private int section;
        [HasDefaultValue]
        private bool isTaxable = true;
        [HasDefaultValue]
        private string taxId = "";
        private decimal? nds;
        [HasDefaultValue]
        private decimal? discount = 0;
        [HasDefaultValue]
        private decimal? increase = 0;
        private decimal? discountSum;
        private decimal? increaseSum;
        private decimal? sum;
        [HasDefaultValue]
        private bool isCalculated = false;

        protected ChequeSale() {}

        public ChequeSale(string name, decimal? price, decimal? amount, int section, decimal? nds, decimal? discountSum, decimal? increaseSum, decimal? sum)
        {
            this.name = name;
            this.price = price;
            this.amount = amount;
            this.section = section;
            this.nds = nds;
            this.discountSum = discountSum;
            this.increaseSum = increaseSum;
            this.sum = sum;
        }
        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public decimal? Price
        {
            get { return price; }
            set { price = value; }
        }

        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public int Section
        {
            get { return section; }
            set { section = value; }
        }

        public bool IsTaxable
        {
            get { return isTaxable; }
            set { isTaxable = value; }
        }

        public string TaxId
        {
            get { return taxId; }
            set { taxId = value; }
        }

        public decimal? Nds
        {
            get { return nds; }
            set { nds = value; }
        }

        public decimal? Discount
        {
            get { return discount; }
            set { discount = value; }
        }

        public decimal? Increase
        {
            get { return increase; }
            set { increase = value; }
        }

        public decimal? DiscountSum
        {
            get { return discountSum; }
            set { discountSum = value; }
        }

        public decimal? IncreaseSum
        {
            get { return increaseSum; }
            set { increaseSum = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public bool IsCalculated
        {
            get { return isCalculated; }
            set { isCalculated = value; }
        }

    }

    [RootEntity]
    [DataClass("ChequeTemplate")]
    public partial class ChequeTemplate : LocalizableNamePersistedEntity
    {
        [NotNull, NotNullField]
        private ChequeType type;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string template = "";

        protected ChequeTemplate() {}

        public ChequeTemplate(Guid id, LocalizableValue name, ChequeType type, string template)
            : base(id, name)
        {
            this.type = type;
            this.template = template;
        }
        [NotNull]
        public ChequeType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        [NotNull]
        public string Template
        {
            get { return template; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  template = value;
            }
        }

    }

    [DataClass("ChequeType")]
    [EnumClass]
    public partial class ChequeType : LocalizableName<ChequeType>
    {
        /// <summary> Пречек. </summary>
        public static readonly ChequeType BILL = new ChequeType("BILL");
        /// <summary> Сервисный чек. </summary>
        public static readonly ChequeType SERVICE = new ChequeType("SERVICE");
        /// <summary> Квитанция об оплате заказа. </summary>
        public static readonly ChequeType CASH = new ChequeType("CASH");
        /// <summary> Товарный чек. </summary>
        public static readonly ChequeType CASH_MEMO = new ChequeType("CASH_MEMO");
        /// <summary> Этикетка. </summary>
        public static readonly ChequeType PRICE_TICKET = new ChequeType("PRICE_TICKET");
        /// <summary> Квитанция системы лояльности. </summary>
        public static readonly ChequeType IIKOCARD = new ChequeType("IIKOCARD");
        /// <summary> Табличка резерва для стола. </summary>
        public static readonly ChequeType TABLES_RESERVE = new ChequeType("TABLES_RESERVE");
        /// <summary> Накладная доставки. </summary>
        public static readonly ChequeType DELIVERY_BILL = new ChequeType("DELIVERY_BILL");
        /// <summary> Стикер. </summary>
        public static readonly ChequeType DELIVERY_STICKER = new ChequeType("DELIVERY_STICKER");
        /// <summary> Пречек. </summary>
        public static readonly ChequeType RAZOR_BILL_CHEQUE = new ChequeType("RAZOR_BILL_CHEQUE");
        /// <summary> Товарный чек. </summary>
        public static readonly ChequeType RAZOR_CASH_MEMO_CHEQUE = new ChequeType("RAZOR_CASH_MEMO_CHEQUE");
        /// <summary> Дополнение к фискальному чеку. </summary>
        public static readonly ChequeType RAZOR_CASH_REGISTER_CHEQUE_ADDITION = new ChequeType("RAZOR_CASH_REGISTER_CHEQUE_ADDITION");
        /// <summary> Чек окончания приготовления. </summary>
        public static readonly ChequeType RAZOR_COOKING_COMPLETE_CHEQUE = new ChequeType("RAZOR_COOKING_COMPLETE_CHEQUE");
        /// <summary> Накладная доставки. </summary>
        public static readonly ChequeType RAZOR_DELIVERY_BILL_CHEQUE = new ChequeType("RAZOR_DELIVERY_BILL_CHEQUE");
        /// <summary> Стикер доставки. </summary>
        public static readonly ChequeType RAZOR_DELIVERY_STICKER = new ChequeType("RAZOR_DELIVERY_STICKER");
        /// <summary> Стикер окончания приготовления. </summary>
        public static readonly ChequeType RAZOR_COOKING_COMPLETE_STICKER = new ChequeType("RAZOR_COOKING_COMPLETE_STICKER");
        /// <summary> Квитанция системы лояльности. </summary>
        public static readonly ChequeType RAZOR_IIKO_CARD = new ChequeType("RAZOR_IIKO_CARD");
        /// <summary> Краткая квитанция системы лояльности. </summary>
        public static readonly ChequeType RAZOR_IIKO_CARD_SHORT = new ChequeType("RAZOR_IIKO_CARD_SHORT");
        /// <summary> Товарный чек заказа закрытой КС. </summary>
        public static readonly ChequeType RAZOR_PAST_ORDER_CASH_MEMO_CHEQUE = new ChequeType("RAZOR_PAST_ORDER_CASH_MEMO_CHEQUE");
        /// <summary> Внесение/изъятие. </summary>
        public static readonly ChequeType RAZOR_PAY_IN_OUT = new ChequeType("RAZOR_PAY_IN_OUT");
        /// <summary> Предоплата. </summary>
        public static readonly ChequeType RAZOR_PREPAY_CHEQUE = new ChequeType("RAZOR_PREPAY_CHEQUE");
        /// <summary> Этикетка. </summary>
        public static readonly ChequeType RAZOR_PRICE_TICKET = new ChequeType("RAZOR_PRICE_TICKET");
        /// <summary> Квитанция об оплате. </summary>
        public static readonly ChequeType RAZOR_RECEIPT_CHEQUE = new ChequeType("RAZOR_RECEIPT_CHEQUE");
        /// <summary> Сервисный чек. </summary>
        public static readonly ChequeType RAZOR_SERVICE_CHEQUE = new ChequeType("RAZOR_SERVICE_CHEQUE");
        /// <summary> Табличка резерва для стола. </summary>
        public static readonly ChequeType RAZOR_TABLES_RESERVE = new ChequeType("RAZOR_TABLES_RESERVE");
        /// <summary> Чек предварительного заказа на банкет. </summary>
        public static readonly ChequeType RAZOR_BANQUET_PRELIMINARY_CHEQUE = new ChequeType("RAZOR_BANQUET_PRELIMINARY_CHEQUE");
        /// <summary> Маршрутный лист курьера. </summary>
        public static readonly ChequeType RAZOR_COURIER_ROUTE_LIST = new ChequeType("RAZOR_COURIER_ROUTE_LIST");
        /// <summary> Счет-фактура. </summary>
        public static readonly ChequeType RAZOR_VAT_INVOICE = new ChequeType("RAZOR_VAT_INVOICE");

        private readonly string __value;
        private readonly string __nameResId;

        private ChequeType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CHEQUETYPE_NAME_" + __value;
        }

        public static ChequeType Parse(string value)
        {
            switch(value)
            {
                case "BILL": return BILL;
                case "SERVICE": return SERVICE;
                case "CASH": return CASH;
                case "CASH_MEMO": return CASH_MEMO;
                case "PRICE_TICKET": return PRICE_TICKET;
                case "IIKOCARD": return IIKOCARD;
                case "TABLES_RESERVE": return TABLES_RESERVE;
                case "DELIVERY_BILL": return DELIVERY_BILL;
                case "DELIVERY_STICKER": return DELIVERY_STICKER;
                case "RAZOR_BILL_CHEQUE": return RAZOR_BILL_CHEQUE;
                case "RAZOR_CASH_MEMO_CHEQUE": return RAZOR_CASH_MEMO_CHEQUE;
                case "RAZOR_CASH_REGISTER_CHEQUE_ADDITION": return RAZOR_CASH_REGISTER_CHEQUE_ADDITION;
                case "RAZOR_COOKING_COMPLETE_CHEQUE": return RAZOR_COOKING_COMPLETE_CHEQUE;
                case "RAZOR_DELIVERY_BILL_CHEQUE": return RAZOR_DELIVERY_BILL_CHEQUE;
                case "RAZOR_DELIVERY_STICKER": return RAZOR_DELIVERY_STICKER;
                case "RAZOR_COOKING_COMPLETE_STICKER": return RAZOR_COOKING_COMPLETE_STICKER;
                case "RAZOR_IIKO_CARD": return RAZOR_IIKO_CARD;
                case "RAZOR_IIKO_CARD_SHORT": return RAZOR_IIKO_CARD_SHORT;
                case "RAZOR_PAST_ORDER_CASH_MEMO_CHEQUE": return RAZOR_PAST_ORDER_CASH_MEMO_CHEQUE;
                case "RAZOR_PAY_IN_OUT": return RAZOR_PAY_IN_OUT;
                case "RAZOR_PREPAY_CHEQUE": return RAZOR_PREPAY_CHEQUE;
                case "RAZOR_PRICE_TICKET": return RAZOR_PRICE_TICKET;
                case "RAZOR_RECEIPT_CHEQUE": return RAZOR_RECEIPT_CHEQUE;
                case "RAZOR_SERVICE_CHEQUE": return RAZOR_SERVICE_CHEQUE;
                case "RAZOR_TABLES_RESERVE": return RAZOR_TABLES_RESERVE;
                case "RAZOR_BANQUET_PRELIMINARY_CHEQUE": return RAZOR_BANQUET_PRELIMINARY_CHEQUE;
                case "RAZOR_COURIER_ROUTE_LIST": return RAZOR_COURIER_ROUTE_LIST;
                case "RAZOR_VAT_INVOICE": return RAZOR_VAT_INVOICE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ChequeType[] VALUES
        {
            get
            {
                return new []
                {
                    BILL, 
                    SERVICE, 
                    CASH, 
                    CASH_MEMO, 
                    PRICE_TICKET, 
                    IIKOCARD, 
                    TABLES_RESERVE, 
                    DELIVERY_BILL, 
                    DELIVERY_STICKER, 
                    RAZOR_BILL_CHEQUE, 
                    RAZOR_CASH_MEMO_CHEQUE, 
                    RAZOR_CASH_REGISTER_CHEQUE_ADDITION, 
                    RAZOR_COOKING_COMPLETE_CHEQUE, 
                    RAZOR_DELIVERY_BILL_CHEQUE, 
                    RAZOR_DELIVERY_STICKER, 
                    RAZOR_COOKING_COMPLETE_STICKER, 
                    RAZOR_IIKO_CARD, 
                    RAZOR_IIKO_CARD_SHORT, 
                    RAZOR_PAST_ORDER_CASH_MEMO_CHEQUE, 
                    RAZOR_PAY_IN_OUT, 
                    RAZOR_PREPAY_CHEQUE, 
                    RAZOR_PRICE_TICKET, 
                    RAZOR_RECEIPT_CHEQUE, 
                    RAZOR_SERVICE_CHEQUE, 
                    RAZOR_TABLES_RESERVE, 
                    RAZOR_BANQUET_PRELIMINARY_CHEQUE, 
                    RAZOR_COURIER_ROUTE_LIST, 
                    RAZOR_VAT_INVOICE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PrintTextTask")]
    public partial class PrintTextTask : CashRegisterTask
    {
        private string text;

        protected PrintTextTask() {}

        public PrintTextTask(bool success, Guid? id, Guid? deviceId, string text)
            : base(success, id, deviceId)
        {
            this.text = text;
        }
        public string Text
        {
            get { return text; }
            set { text = value; }
        }

    }

    [DataClass("XReportTask")]
    public partial class XReportTask : CashRegisterTask
    {

        protected XReportTask() {}

        public XReportTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("ChequeTemplateUpdateDto")]
    public partial class ChequeTemplateUpdateDto
    {
        private bool isMain;
        [NotNull, NotNullField]
        private ByValue<ChequeTemplate> chequeTemplateByValue;

        protected ChequeTemplateUpdateDto() {}

        public ChequeTemplateUpdateDto(bool isMain, ByValue<ChequeTemplate> chequeTemplateByValue)
        {
            this.isMain = isMain;
            this.chequeTemplateByValue = chequeTemplateByValue;
        }

        public ChequeTemplateUpdateDto(ByValue<ChequeTemplate> chequeTemplateByValue)
        {
            this.chequeTemplateByValue = chequeTemplateByValue;
        }

        public bool IsMain
        {
            get { return isMain; }
            set { isMain = value; }
        }

        [NotNull]
        public ByValue<ChequeTemplate> ChequeTemplateByValue
        {
            get { return chequeTemplateByValue; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  chequeTemplateByValue = value;
            }
        }

    }

    [DataClass("BooleanReportParameter")]
    public partial class BooleanReportParameter : ReportParameter
    {
        [HasDefaultValue]
        private bool defaultValue = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public BooleanReportParameter() {}

        public BooleanReportParameter(string name, string label)
            : base(name, label)
        {

        }
        public bool DefaultValue
        {
            get { return defaultValue; }
            set { defaultValue = value; }
        }

    }

    [DataClass("CounteragentsReportParameter")]
    public partial class CounteragentsReportParameter : ReportParameter
    {
        private CounteragentsReportParameterKind counteragentType;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CounteragentsReportParameter() {}

        public CounteragentsReportParameter(string name, string label, CounteragentsReportParameterKind counteragentType)
            : base(name, label)
        {
            this.counteragentType = counteragentType;
        }
        public CounteragentsReportParameterKind CounteragentType
        {
            get { return counteragentType; }
            set { counteragentType = value; }
        }

    }

    [DataClass("CounteragentsReportParameterKind")]
    [EnumClass]
    public partial class CounteragentsReportParameterKind : LocalizableName<CounteragentsReportParameterKind>
    {
        /// <summary> Сотрудник. </summary>
        public static readonly CounteragentsReportParameterKind EMPLOYEE = new CounteragentsReportParameterKind("EMPLOYEE");
        /// <summary> Гость. </summary>
        public static readonly CounteragentsReportParameterKind CLIENT = new CounteragentsReportParameterKind("CLIENT");
        /// <summary> Поставщик. </summary>
        public static readonly CounteragentsReportParameterKind SUPPLIER = new CounteragentsReportParameterKind("SUPPLIER");

        private readonly string __value;
        private readonly string __nameResId;

        private CounteragentsReportParameterKind(string __value)
        {
            this.__value = __value;
            this.__nameResId = "COUNTERAGENTSREPORTPARAMETERKIND_NAME_" + __value;
        }

        public static CounteragentsReportParameterKind Parse(string value)
        {
            switch(value)
            {
                case "EMPLOYEE": return EMPLOYEE;
                case "CLIENT": return CLIENT;
                case "SUPPLIER": return SUPPLIER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CounteragentsReportParameterKind[] VALUES
        {
            get
            {
                return new []
                {
                    EMPLOYEE, 
                    CLIENT, 
                    SUPPLIER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CustomEnumReportParameter")]
    public partial class CustomEnumReportParameter : ReportParameter
    {
        private List<CustomEnumReportParameterValue> values;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public CustomEnumReportParameter() {}

        public CustomEnumReportParameter(string name, string label)
            : base(name, label)
        {

        }
        public List<CustomEnumReportParameterValue> Values
        {
            get { return values; }
            set { values = value; }
        }

    }

    [DataClass("CustomEnumReportParameterValue")]
    public partial class CustomEnumReportParameterValue
    {
        private string name;
        private string label;
        [HasDefaultValue]
        private bool isDefault = false;

        public CustomEnumReportParameterValue() {}

        public CustomEnumReportParameterValue(string name, string label)
        {
            this.name = name;
            this.label = label;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Label
        {
            get { return label; }
            set { label = value; }
        }

        public bool IsDefault
        {
            get { return isDefault; }
            set { isDefault = value; }
        }

    }

    [DataClass("DateTimePeriodReportParameter")]
    public partial class DateTimePeriodReportParameter : ReportParameter
    {
        private DateTimePeriodReportParameterValue defaultValue;
        [HasDefaultValue]
        private bool showTimeEditor = false;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DateTimePeriodReportParameter() {}

        public DateTimePeriodReportParameter(string name, string label, DateTimePeriodReportParameterValue defaultValue)
            : base(name, label)
        {
            this.defaultValue = defaultValue;
        }
        public DateTimePeriodReportParameterValue DefaultValue
        {
            get { return defaultValue; }
            set { defaultValue = value; }
        }

        public bool ShowTimeEditor
        {
            get { return showTimeEditor; }
            set { showTimeEditor = value; }
        }

    }

    [DataClass("DateTimePeriodReportParameterValue")]
    [EnumClass]
    public partial class DateTimePeriodReportParameterValue : LocalizableName<DateTimePeriodReportParameterValue>
    {
        /// <summary> Кассовая смена. </summary>
        public static readonly DateTimePeriodReportParameterValue CAFE_SESSION = new DateTimePeriodReportParameterValue("CAFE_SESSION");
        /// <summary> Учетный день. </summary>
        public static readonly DateTimePeriodReportParameterValue BUSINESS_DAY = new DateTimePeriodReportParameterValue("BUSINESS_DAY");
        /// <summary> Текущий день. </summary>
        public static readonly DateTimePeriodReportParameterValue CURRENT_DAY = new DateTimePeriodReportParameterValue("CURRENT_DAY");
        /// <summary> Текущая неделя. </summary>
        public static readonly DateTimePeriodReportParameterValue CURRENT_WEEK = new DateTimePeriodReportParameterValue("CURRENT_WEEK");
        /// <summary> Текущий месяц. </summary>
        public static readonly DateTimePeriodReportParameterValue CURRENT_MONTH = new DateTimePeriodReportParameterValue("CURRENT_MONTH");
        /// <summary> Текущий год. </summary>
        public static readonly DateTimePeriodReportParameterValue CURRENT_YEAR = new DateTimePeriodReportParameterValue("CURRENT_YEAR");
        /// <summary> Прошлый день. </summary>
        public static readonly DateTimePeriodReportParameterValue PREVIOUS_DAY = new DateTimePeriodReportParameterValue("PREVIOUS_DAY");
        /// <summary> Прошлая неделя. </summary>
        public static readonly DateTimePeriodReportParameterValue PREVIOUS_WEEK = new DateTimePeriodReportParameterValue("PREVIOUS_WEEK");
        /// <summary> Прошлый месяц. </summary>
        public static readonly DateTimePeriodReportParameterValue PREVIOUS_MONTH = new DateTimePeriodReportParameterValue("PREVIOUS_MONTH");
        /// <summary> Прошлый год. </summary>
        public static readonly DateTimePeriodReportParameterValue PREVIOUS_YEAR = new DateTimePeriodReportParameterValue("PREVIOUS_YEAR");

        private readonly string __value;
        private readonly string __nameResId;

        private DateTimePeriodReportParameterValue(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DATETIMEPERIODREPORTPARAMETERVALUE_NAME_" + __value;
        }

        public static DateTimePeriodReportParameterValue Parse(string value)
        {
            switch(value)
            {
                case "CAFE_SESSION": return CAFE_SESSION;
                case "BUSINESS_DAY": return BUSINESS_DAY;
                case "CURRENT_DAY": return CURRENT_DAY;
                case "CURRENT_WEEK": return CURRENT_WEEK;
                case "CURRENT_MONTH": return CURRENT_MONTH;
                case "CURRENT_YEAR": return CURRENT_YEAR;
                case "PREVIOUS_DAY": return PREVIOUS_DAY;
                case "PREVIOUS_WEEK": return PREVIOUS_WEEK;
                case "PREVIOUS_MONTH": return PREVIOUS_MONTH;
                case "PREVIOUS_YEAR": return PREVIOUS_YEAR;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DateTimePeriodReportParameterValue[] VALUES
        {
            get
            {
                return new []
                {
                    CAFE_SESSION, 
                    BUSINESS_DAY, 
                    CURRENT_DAY, 
                    CURRENT_WEEK, 
                    CURRENT_MONTH, 
                    CURRENT_YEAR, 
                    PREVIOUS_DAY, 
                    PREVIOUS_WEEK, 
                    PREVIOUS_MONTH, 
                    PREVIOUS_YEAR
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("FrontReport")]
    public partial class FrontReport : LocalizableNamePersistedEntity
    {
        private LocalizableValue categoryName;
        [HasDefaultValue]
        private bool printOnCafeSessionClose = false;
        private ReportType reportType;
        private ReportSource reportSource;
        private ReportRequirements reportRequirements;
        private string template;
        private List<ReportParametersPage> pages;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public FrontReport() {}

        public FrontReport(Guid id, LocalizableValue name, LocalizableValue categoryName, ReportType reportType, ReportSource reportSource, ReportRequirements reportRequirements, string template)
            : base(id, name)
        {
            this.categoryName = categoryName;
            this.reportType = reportType;
            this.reportSource = reportSource;
            this.reportRequirements = reportRequirements;
            this.template = template;
        }

        public FrontReport(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public LocalizableValue CategoryName
        {
            get { return categoryName; }
            set { categoryName = value; }
        }

        public bool PrintOnCafeSessionClose
        {
            get { return printOnCafeSessionClose; }
            set { printOnCafeSessionClose = value; }
        }

        public ReportType ReportType
        {
            get { return reportType; }
            set { reportType = value; }
        }

        public ReportSource ReportSource
        {
            get { return reportSource; }
            set { reportSource = value; }
        }

        public ReportRequirements ReportRequirements
        {
            get { return reportRequirements; }
            set { reportRequirements = value; }
        }

        public string Template
        {
            get { return template; }
            set { template = value; }
        }

        public List<ReportParametersPage> Pages
        {
            get { return pages; }
            set { pages = value; }
        }

    }

    [DataClass("NumberReportParameter")]
    public partial class NumberReportParameter : ReportParameter
    {
        private NumberReportParameterKind parameterKind;
        [HasDefaultValue]
        private decimal? defaultValue = 0;
        [HasDefaultValue]
        private decimal? minValue = 0;
        private decimal? maxValue;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public NumberReportParameter() {}

        public NumberReportParameter(string name, string label, NumberReportParameterKind parameterKind, decimal? maxValue)
            : base(name, label)
        {
            this.parameterKind = parameterKind;
            this.maxValue = maxValue;
        }
        public NumberReportParameterKind ParameterKind
        {
            get { return parameterKind; }
            set { parameterKind = value; }
        }

        public decimal? DefaultValue
        {
            get { return defaultValue; }
            set { defaultValue = value; }
        }

        public decimal? MinValue
        {
            get { return minValue; }
            set { minValue = value; }
        }

        public decimal? MaxValue
        {
            get { return maxValue; }
            set { maxValue = value; }
        }

    }

    [DataClass("NumberReportParameterKind")]
    [EnumClass]
    public partial class NumberReportParameterKind : LocalizableName<NumberReportParameterKind>
    {
        /// <summary> Целое. </summary>
        public static readonly NumberReportParameterKind INTEGER = new NumberReportParameterKind("INTEGER");
        /// <summary> Дробное (количество). </summary>
        public static readonly NumberReportParameterKind AMOUNT = new NumberReportParameterKind("AMOUNT");
        /// <summary> Сумма. </summary>
        public static readonly NumberReportParameterKind MONEY = new NumberReportParameterKind("MONEY");

        private readonly string __value;
        private readonly string __nameResId;

        private NumberReportParameterKind(string __value)
        {
            this.__value = __value;
            this.__nameResId = "NUMBERREPORTPARAMETERKIND_NAME_" + __value;
        }

        public static NumberReportParameterKind Parse(string value)
        {
            switch(value)
            {
                case "INTEGER": return INTEGER;
                case "AMOUNT": return AMOUNT;
                case "MONEY": return MONEY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static NumberReportParameterKind[] VALUES
        {
            get
            {
                return new []
                {
                    INTEGER, 
                    AMOUNT, 
                    MONEY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ReportCategory")]
    [EnumClass]
    public partial class ReportCategory : LocalizableName<ReportCategory>
    {
        /// <summary> 01 Отчеты по выручке. </summary>
        public static readonly ReportCategory RESCUE = new ReportCategory("RESCUE");
        /// <summary> 02 Отчеты по расходу блюд. </summary>
        public static readonly ReportCategory DISH_SALE = new ReportCategory("DISH_SALE");
        /// <summary> 03 Специальные отчеты. </summary>
        public static readonly ReportCategory SPECIAL = new ReportCategory("SPECIAL");
        /// <summary> 04 Отчеты по кассе. </summary>
        public static readonly ReportCategory CASH_REGISTER = new ReportCategory("CASH_REGISTER");
        /// <summary> Отчеты Плас-Тек. </summary>
        public static readonly ReportCategory PLASTEK = new ReportCategory("PLASTEK");

        private readonly string __value;
        private readonly string __nameResId;

        private ReportCategory(string __value)
        {
            this.__value = __value;
            this.__nameResId = "REPORTCATEGORY_NAME_" + __value;
        }

        public static ReportCategory Parse(string value)
        {
            switch(value)
            {
                case "RESCUE": return RESCUE;
                case "DISH_SALE": return DISH_SALE;
                case "SPECIAL": return SPECIAL;
                case "CASH_REGISTER": return CASH_REGISTER;
                case "PLASTEK": return PLASTEK;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ReportCategory[] VALUES
        {
            get
            {
                return new []
                {
                    RESCUE, 
                    DISH_SALE, 
                    SPECIAL, 
                    CASH_REGISTER, 
                    PLASTEK
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ReportParameter")]
    public abstract partial class ReportParameter
    {
        private string name;
        private string label;
        [HasDefaultValue]
        private bool persistent = false;

        public ReportParameter() {}

        protected ReportParameter(string name, string label)
        {
            this.name = name;
            this.label = label;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Label
        {
            get { return label; }
            set { label = value; }
        }

        public bool Persistent
        {
            get { return persistent; }
            set { persistent = value; }
        }

    }

    [DataClass("ReportParametersPage")]
    public partial class ReportParametersPage
    {
        private string name;
        private string prompt;
        private List<ReportParameter> parameters;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ReportParametersPage() {}

        public ReportParametersPage(string name, string prompt)
        {
            this.name = name;
            this.prompt = prompt;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Prompt
        {
            get { return prompt; }
            set { prompt = value; }
        }

        public List<ReportParameter> Parameters
        {
            get { return parameters; }
            set { parameters = value; }
        }

    }

    [DataClass("ReportRequirements")]
    [EnumClass]
    public partial class ReportRequirements : LocalizableName<ReportRequirements>
    {
        /// <summary> Сервер. </summary>
        public static readonly ReportRequirements REQUIRES_SERVER = new ReportRequirements("REQUIRES_SERVER");
        /// <summary> Заказы. </summary>
        public static readonly ReportRequirements REQUIRES_ORDERS = new ReportRequirements("REQUIRES_ORDERS");
        /// <summary> Кассовый терминал. </summary>
        public static readonly ReportRequirements REQUIRES_EVENTS = new ReportRequirements("REQUIRES_EVENTS");

        private readonly string __value;
        private readonly string __nameResId;

        private ReportRequirements(string __value)
        {
            this.__value = __value;
            this.__nameResId = "REPORTREQUIREMENTS_NAME_" + __value;
        }

        public static ReportRequirements Parse(string value)
        {
            switch(value)
            {
                case "REQUIRES_SERVER": return REQUIRES_SERVER;
                case "REQUIRES_ORDERS": return REQUIRES_ORDERS;
                case "REQUIRES_EVENTS": return REQUIRES_EVENTS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ReportRequirements[] VALUES
        {
            get
            {
                return new []
                {
                    REQUIRES_SERVER, 
                    REQUIRES_ORDERS, 
                    REQUIRES_EVENTS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ReportSource")]
    [EnumClass]
    public partial class ReportSource : LocalizableName<ReportSource>
    {
        /// <summary> Пользовательский шаблон. </summary>
        public static readonly ReportSource CUSTOM_TEMPLATE_REPORT = new ReportSource("CUSTOM_TEMPLATE_REPORT", null, null, null);
        /// <summary> X-отчет. </summary>
        public static readonly ReportSource X_REPORT = new ReportSource("X_REPORT", ReportCategory.CASH_REGISTER, ReportType.X_REPORT, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 011 Общая выручка по типам с налогами. </summary>
        public static readonly ReportSource SALES_BY_TYPE_WITH_TAX_SERVER_REPORT = new ReportSource("SALES_BY_TYPE_WITH_TAX_SERVER_REPORT", ReportCategory.RESCUE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 012 Общая выручка почасовая. </summary>
        public static readonly ReportSource SERVER_HOURLY_REPORT = new ReportSource("SERVER_HOURLY_REPORT", ReportCategory.RESCUE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 013 Общая выручка по официантам. </summary>
        public static readonly ReportSource SALES_BY_WAITER_SERVER_REPORT = new ReportSource("SALES_BY_WAITER_SERVER_REPORT", ReportCategory.RESCUE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 015 Краткий отчет по открытым заказам и продажам в разрезе залов. </summary>
        public static readonly ReportSource ORDERS_SUMMARY_REPORT = new ReportSource("ORDERS_SUMMARY_REPORT", ReportCategory.RESCUE, ReportType.REGULAR, ReportRequirements.REQUIRES_ORDERS);
        /// <summary> 016 Чеки по типам оплаты. </summary>
        public static readonly ReportSource SALES_BY_PAYMENT_TYPE_SERVER_REPORT = new ReportSource("SALES_BY_PAYMENT_TYPE_SERVER_REPORT", ReportCategory.RESCUE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 021 Общий расход блюд. </summary>
        public static readonly ReportSource DISH_EXPENSE_SERVER_REPORT = new ReportSource("DISH_EXPENSE_SERVER_REPORT", ReportCategory.DISH_SALE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 023 Общие продажи блюд. </summary>
        public static readonly ReportSource SERVER_SALES_REPORT = new ReportSource("SERVER_SALES_REPORT", ReportCategory.DISH_SALE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 024 Общие списания блюд. </summary>
        public static readonly ReportSource SERVER_WRITEOFF_REPORT = new ReportSource("SERVER_WRITEOFF_REPORT", ReportCategory.DISH_SALE, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 031 Сводный отчет. </summary>
        public static readonly ReportSource SUMMARY_REPORT = new ReportSource("SUMMARY_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 032 Питание персонала. </summary>
        public static readonly ReportSource EMPLOYEES_NUTRITION_REPORT = new ReportSource("EMPLOYEES_NUTRITION_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 033 Время от пречека до оплаты. </summary>
        public static readonly ReportSource ORDER_GAP_REPORT = new ReportSource("ORDER_GAP_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 034 Списания блюд. </summary>
        public static readonly ReportSource SESSION_WRITEOFF_REPORT = new ReportSource("SESSION_WRITEOFF_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 035 Явки сотрудников. </summary>
        public static readonly ReportSource EMPLOYEES_ATTENDANCES_REPORT = new ReportSource("EMPLOYEES_ATTENDANCES_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_SERVER);
        /// <summary> 036 Отчет по скидкам и надбавкам. </summary>
        public static readonly ReportSource SESSION_DISCOUNT_REPORT = new ReportSource("SESSION_DISCOUNT_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_ORDERS);
        /// <summary> 037 Опасные операции. </summary>
        public static readonly ReportSource PROBLEM_OPERATIONS_REPORT = new ReportSource("PROBLEM_OPERATIONS_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_ORDERS);
        /// <summary> 038 Расчет сотрудникам. </summary>
        public static readonly ReportSource EMPLOYEE_DEBTS_REPORT = new ReportSource("EMPLOYEE_DEBTS_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 039 Отчет по вскрытиям тары. </summary>
        public static readonly ReportSource EGAIS_PRODUCT_UNSEAL_REPORT = new ReportSource("EGAIS_PRODUCT_UNSEAL_REPORT", ReportCategory.SPECIAL, ReportType.REGULAR, ReportRequirements.REQUIRES_ORDERS);
        /// <summary> 041 Выручка по типам с налогами. </summary>
        public static readonly ReportSource SALES_BY_TYPE_WITH_TAX_SESSION_REPORT = new ReportSource("SALES_BY_TYPE_WITH_TAX_SESSION_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 042 Выручка почасовая. </summary>
        public static readonly ReportSource SESSION_HOURLY_REPORT = new ReportSource("SESSION_HOURLY_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 043 Продажи блюд. </summary>
        public static readonly ReportSource SESSION_SALES_REPORT = new ReportSource("SESSION_SALES_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 044 Расход блюд. </summary>
        public static readonly ReportSource DISH_EXPENSE_SESSION_REPORT = new ReportSource("DISH_EXPENSE_SESSION_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 045 Полный отчет кассовой смены. </summary>
        public static readonly ReportSource CAFE_SESSION_FULL_REPORT = new ReportSource("CAFE_SESSION_FULL_REPORT", ReportCategory.CASH_REGISTER, ReportType.CAFE_SESSION_FULL_REPORT, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 046 Реестр счетов. </summary>
        public static readonly ReportSource CAFE_SESSION_SALES_REGISTER_REPORT = new ReportSource("CAFE_SESSION_SALES_REGISTER_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 047 Чеки по типам оплаты за смену. </summary>
        public static readonly ReportSource SALES_BY_PAYMENT_TYPE_SESSION_REPORT = new ReportSource("SALES_BY_PAYMENT_TYPE_SESSION_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 048 Итого по смене. </summary>
        public static readonly ReportSource CAFE_SESSION_SUMMARY_REPORT = new ReportSource("CAFE_SESSION_SUMMARY_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 049 Кассовая лента. </summary>
        public static readonly ReportSource CHEQUE_TAPE_REPORT = new ReportSource("CHEQUE_TAPE_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 050 Отчет по доставкам. </summary>
        public static readonly ReportSource DELIVERY_REPORT = new ReportSource("DELIVERY_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_ORDERS);
        /// <summary> 051 Расширенный реестр счетов. </summary>
        public static readonly ReportSource CAFE_SESSION_SALES_EXTENDED_REGISTER_REPORT = new ReportSource("CAFE_SESSION_SALES_EXTENDED_REGISTER_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 052 Отчет по внесениям и изъятиям. </summary>
        public static readonly ReportSource PAY_IN_OUT_REPORT = new ReportSource("PAY_IN_OUT_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> 053 Блюда для приготовления доставок. </summary>
        public static readonly ReportSource DELIVERY_DISHES_REPORT = new ReportSource("DELIVERY_DISHES_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_ORDERS);
        /// <summary> 054 Отчет по чаевым. </summary>
        public static readonly ReportSource DONATIONS_REPORT = new ReportSource("DONATIONS_REPORT", ReportCategory.CASH_REGISTER, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> Отчет по операциям. </summary>
        public static readonly ReportSource PLASTEK_OPERATIONS_REPORT = new ReportSource("PLASTEK_OPERATIONS_REPORT", ReportCategory.PLASTEK, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> Отчет по итогам. </summary>
        public static readonly ReportSource PLASTEK_SUMMARY_REPORT = new ReportSource("PLASTEK_SUMMARY_REPORT", ReportCategory.PLASTEK, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);
        /// <summary> Сверка итогов. </summary>
        public static readonly ReportSource PLASTEK_VERIFY_REPORT = new ReportSource("PLASTEK_VERIFY_REPORT", ReportCategory.PLASTEK, ReportType.REGULAR, ReportRequirements.REQUIRES_EVENTS);

        private readonly ReportCategory category;
        private readonly ReportType type;
        private readonly ReportRequirements requirements;
        private readonly string __value;
        private readonly string __nameResId;

        private ReportSource(string __value, ReportCategory category, ReportType type, ReportRequirements requirements)
        {
            this.__value = __value;
            this.__nameResId = "REPORTSOURCE_NAME_" + __value;
            this.category = category;
            this.type = type;
            this.requirements = requirements;
        }

        public static ReportSource Parse(string value)
        {
            switch(value)
            {
                case "CUSTOM_TEMPLATE_REPORT": return CUSTOM_TEMPLATE_REPORT;
                case "X_REPORT": return X_REPORT;
                case "SALES_BY_TYPE_WITH_TAX_SERVER_REPORT": return SALES_BY_TYPE_WITH_TAX_SERVER_REPORT;
                case "SERVER_HOURLY_REPORT": return SERVER_HOURLY_REPORT;
                case "SALES_BY_WAITER_SERVER_REPORT": return SALES_BY_WAITER_SERVER_REPORT;
                case "ORDERS_SUMMARY_REPORT": return ORDERS_SUMMARY_REPORT;
                case "SALES_BY_PAYMENT_TYPE_SERVER_REPORT": return SALES_BY_PAYMENT_TYPE_SERVER_REPORT;
                case "DISH_EXPENSE_SERVER_REPORT": return DISH_EXPENSE_SERVER_REPORT;
                case "SERVER_SALES_REPORT": return SERVER_SALES_REPORT;
                case "SERVER_WRITEOFF_REPORT": return SERVER_WRITEOFF_REPORT;
                case "SUMMARY_REPORT": return SUMMARY_REPORT;
                case "EMPLOYEES_NUTRITION_REPORT": return EMPLOYEES_NUTRITION_REPORT;
                case "ORDER_GAP_REPORT": return ORDER_GAP_REPORT;
                case "SESSION_WRITEOFF_REPORT": return SESSION_WRITEOFF_REPORT;
                case "EMPLOYEES_ATTENDANCES_REPORT": return EMPLOYEES_ATTENDANCES_REPORT;
                case "SESSION_DISCOUNT_REPORT": return SESSION_DISCOUNT_REPORT;
                case "PROBLEM_OPERATIONS_REPORT": return PROBLEM_OPERATIONS_REPORT;
                case "EMPLOYEE_DEBTS_REPORT": return EMPLOYEE_DEBTS_REPORT;
                case "EGAIS_PRODUCT_UNSEAL_REPORT": return EGAIS_PRODUCT_UNSEAL_REPORT;
                case "SALES_BY_TYPE_WITH_TAX_SESSION_REPORT": return SALES_BY_TYPE_WITH_TAX_SESSION_REPORT;
                case "SESSION_HOURLY_REPORT": return SESSION_HOURLY_REPORT;
                case "SESSION_SALES_REPORT": return SESSION_SALES_REPORT;
                case "DISH_EXPENSE_SESSION_REPORT": return DISH_EXPENSE_SESSION_REPORT;
                case "CAFE_SESSION_FULL_REPORT": return CAFE_SESSION_FULL_REPORT;
                case "CAFE_SESSION_SALES_REGISTER_REPORT": return CAFE_SESSION_SALES_REGISTER_REPORT;
                case "SALES_BY_PAYMENT_TYPE_SESSION_REPORT": return SALES_BY_PAYMENT_TYPE_SESSION_REPORT;
                case "CAFE_SESSION_SUMMARY_REPORT": return CAFE_SESSION_SUMMARY_REPORT;
                case "CHEQUE_TAPE_REPORT": return CHEQUE_TAPE_REPORT;
                case "DELIVERY_REPORT": return DELIVERY_REPORT;
                case "CAFE_SESSION_SALES_EXTENDED_REGISTER_REPORT": return CAFE_SESSION_SALES_EXTENDED_REGISTER_REPORT;
                case "PAY_IN_OUT_REPORT": return PAY_IN_OUT_REPORT;
                case "DELIVERY_DISHES_REPORT": return DELIVERY_DISHES_REPORT;
                case "DONATIONS_REPORT": return DONATIONS_REPORT;
                case "PLASTEK_OPERATIONS_REPORT": return PLASTEK_OPERATIONS_REPORT;
                case "PLASTEK_SUMMARY_REPORT": return PLASTEK_SUMMARY_REPORT;
                case "PLASTEK_VERIFY_REPORT": return PLASTEK_VERIFY_REPORT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ReportSource[] VALUES
        {
            get
            {
                return new []
                {
                    CUSTOM_TEMPLATE_REPORT, 
                    X_REPORT, 
                    SALES_BY_TYPE_WITH_TAX_SERVER_REPORT, 
                    SERVER_HOURLY_REPORT, 
                    SALES_BY_WAITER_SERVER_REPORT, 
                    ORDERS_SUMMARY_REPORT, 
                    SALES_BY_PAYMENT_TYPE_SERVER_REPORT, 
                    DISH_EXPENSE_SERVER_REPORT, 
                    SERVER_SALES_REPORT, 
                    SERVER_WRITEOFF_REPORT, 
                    SUMMARY_REPORT, 
                    EMPLOYEES_NUTRITION_REPORT, 
                    ORDER_GAP_REPORT, 
                    SESSION_WRITEOFF_REPORT, 
                    EMPLOYEES_ATTENDANCES_REPORT, 
                    SESSION_DISCOUNT_REPORT, 
                    PROBLEM_OPERATIONS_REPORT, 
                    EMPLOYEE_DEBTS_REPORT, 
                    EGAIS_PRODUCT_UNSEAL_REPORT, 
                    SALES_BY_TYPE_WITH_TAX_SESSION_REPORT, 
                    SESSION_HOURLY_REPORT, 
                    SESSION_SALES_REPORT, 
                    DISH_EXPENSE_SESSION_REPORT, 
                    CAFE_SESSION_FULL_REPORT, 
                    CAFE_SESSION_SALES_REGISTER_REPORT, 
                    SALES_BY_PAYMENT_TYPE_SESSION_REPORT, 
                    CAFE_SESSION_SUMMARY_REPORT, 
                    CHEQUE_TAPE_REPORT, 
                    DELIVERY_REPORT, 
                    CAFE_SESSION_SALES_EXTENDED_REGISTER_REPORT, 
                    PAY_IN_OUT_REPORT, 
                    DELIVERY_DISHES_REPORT, 
                    DONATIONS_REPORT, 
                    PLASTEK_OPERATIONS_REPORT, 
                    PLASTEK_SUMMARY_REPORT, 
                    PLASTEK_VERIFY_REPORT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public ReportCategory Category
        {
            get { return category; }
        }

        public ReportType Type
        {
            get { return type; }
        }

        public ReportRequirements Requirements
        {
            get { return requirements; }
        }

    }

    [DataClass("ReportType")]
    [EnumClass]
    public partial class ReportType : LocalizableName<ReportType>
    {
        /// <summary> Обычный отчет. </summary>
        public static readonly ReportType REGULAR = new ReportType("REGULAR");
        /// <summary> X-отчет. </summary>
        public static readonly ReportType X_REPORT = new ReportType("X_REPORT");
        /// <summary> Полный отчет кассовой смены. </summary>
        public static readonly ReportType CAFE_SESSION_FULL_REPORT = new ReportType("CAFE_SESSION_FULL_REPORT");

        private readonly string __value;
        private readonly string __nameResId;

        private ReportType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "REPORTTYPE_NAME_" + __value;
        }

        public static ReportType Parse(string value)
        {
            switch(value)
            {
                case "REGULAR": return REGULAR;
                case "X_REPORT": return X_REPORT;
                case "CAFE_SESSION_FULL_REPORT": return CAFE_SESSION_FULL_REPORT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ReportType[] VALUES
        {
            get
            {
                return new []
                {
                    REGULAR, 
                    X_REPORT, 
                    CAFE_SESSION_FULL_REPORT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("StringReportParameter")]
    public partial class StringReportParameter : ReportParameter
    {
        private string defaultValue;
        [HasDefaultValue]
        private int maxLength = 255;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public StringReportParameter() {}

        public StringReportParameter(string name, string label, string defaultValue)
            : base(name, label)
        {
            this.defaultValue = defaultValue;
        }
        public string DefaultValue
        {
            get { return defaultValue; }
            set { defaultValue = value; }
        }

        public int MaxLength
        {
            get { return maxLength; }
            set { maxLength = value; }
        }

    }

    [DataClass("TerminalsScopeReportParameter")]
    public partial class TerminalsScopeReportParameter : ReportParameter
    {
        private TerminalsScopeReportParameterValue defaultValue;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public TerminalsScopeReportParameter() {}

        public TerminalsScopeReportParameter(string name, string label, TerminalsScopeReportParameterValue defaultValue)
            : base(name, label)
        {
            this.defaultValue = defaultValue;
        }
        public TerminalsScopeReportParameterValue DefaultValue
        {
            get { return defaultValue; }
            set { defaultValue = value; }
        }

    }

    [DataClass("TerminalsScopeReportParameterValue")]
    [EnumClass]
    public partial class TerminalsScopeReportParameterValue : LocalizableName<TerminalsScopeReportParameterValue>
    {
        /// <summary> Все терминалы. </summary>
        public static readonly TerminalsScopeReportParameterValue ALL_TERMINALS = new TerminalsScopeReportParameterValue("ALL_TERMINALS");
        /// <summary> Текущий терминал. </summary>
        public static readonly TerminalsScopeReportParameterValue CURRENT_TERMINAL = new TerminalsScopeReportParameterValue("CURRENT_TERMINAL");

        private readonly string __value;
        private readonly string __nameResId;

        private TerminalsScopeReportParameterValue(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TERMINALSSCOPEREPORTPARAMETERVALUE_NAME_" + __value;
        }

        public static TerminalsScopeReportParameterValue Parse(string value)
        {
            switch(value)
            {
                case "ALL_TERMINALS": return ALL_TERMINALS;
                case "CURRENT_TERMINAL": return CURRENT_TERMINAL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TerminalsScopeReportParameterValue[] VALUES
        {
            get
            {
                return new []
                {
                    ALL_TERMINALS, 
                    CURRENT_TERMINAL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("StiReportTemplate")]
    public partial class StiReportTemplate : PersistedEntity
    {
        [NotNull, NotNullField]
        private StiReportType type;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string template = "";
        private OperationInfo createdInfo;
        private OperationInfo modifiedInfo;

        protected StiReportTemplate() {}

        public StiReportTemplate(Guid id, StiReportType type, string template)
            : base(id)
        {
            this.type = type;
            this.template = template;
        }
        [NotNull]
        public StiReportType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        [NotNull]
        public string Template
        {
            get { return template; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  template = value;
            }
        }

        [CanBeNull]
        public OperationInfo CreatedInfo
        {
            get { return createdInfo; }
            set { createdInfo = value; }
        }

        [CanBeNull]
        public OperationInfo ModifiedInfo
        {
            get { return modifiedInfo; }
            set { modifiedInfo = value; }
        }

    }

    [DataClass("StiReportType")]
    [EnumClass]
    public partial class StiReportType : LocalizableName<StiReportType>
    {
        /// <summary> Накладная доставки. </summary>
        public static readonly StiReportType DELIVERY_INVOICE = new StiReportType("DELIVERY_INVOICE");
        /// <summary> Маршрутный лист курьера. </summary>
        public static readonly StiReportType COURIER_ROUTE_LIST = new StiReportType("COURIER_ROUTE_LIST");
        /// <summary> Товарный чек. </summary>
        public static readonly StiReportType VAT_INVOICE = new StiReportType("VAT_INVOICE");
        /// <summary> ТОРГ-12. Фронт. </summary>
        public static readonly StiReportType TORG_12 = new StiReportType("TORG_12");
        /// <summary> Стикер окончания приготовления. </summary>
        public static readonly StiReportType COOKING_COMPLETE_STICKER = new StiReportType("COOKING_COMPLETE_STICKER");
        /// <summary> Стикер доставки. </summary>
        public static readonly StiReportType DELIVERY_STICKER = new StiReportType("DELIVERY_STICKER");
        /// <summary> Стикер для позиции документа. </summary>
        public static readonly StiReportType PRICE_TICKET = new StiReportType("PRICE_TICKET");
        /// <summary> Счет-фактура. Фронт. </summary>
        public static readonly StiReportType INVOICE_BILL = new StiReportType("INVOICE_BILL");
        /// <summary> Укороченный товарный чек. Фронт. </summary>
        public static readonly StiReportType VAT_INVOICE_SHORTENED = new StiReportType("VAT_INVOICE_SHORTENED");

        private readonly string __value;
        private readonly string __nameResId;

        private StiReportType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "STIREPORTTYPE_NAME_" + __value;
        }

        public static StiReportType Parse(string value)
        {
            switch(value)
            {
                case "DELIVERY_INVOICE": return DELIVERY_INVOICE;
                case "COURIER_ROUTE_LIST": return COURIER_ROUTE_LIST;
                case "VAT_INVOICE": return VAT_INVOICE;
                case "TORG_12": return TORG_12;
                case "COOKING_COMPLETE_STICKER": return COOKING_COMPLETE_STICKER;
                case "DELIVERY_STICKER": return DELIVERY_STICKER;
                case "PRICE_TICKET": return PRICE_TICKET;
                case "INVOICE_BILL": return INVOICE_BILL;
                case "VAT_INVOICE_SHORTENED": return VAT_INVOICE_SHORTENED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static StiReportType[] VALUES
        {
            get
            {
                return new []
                {
                    DELIVERY_INVOICE, 
                    COURIER_ROUTE_LIST, 
                    VAT_INVOICE, 
                    TORG_12, 
                    COOKING_COMPLETE_STICKER, 
                    DELIVERY_STICKER, 
                    PRICE_TICKET, 
                    INVOICE_BILL, 
                    VAT_INVOICE_SHORTENED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PlastekProblemOp")]
    public partial class PlastekProblemOp
    {
        private DateTime? time;
        private string cardNumber;
        private int transactionId;
        private bool success;
        private int voidedTransactionId;
        private string hostDate;
        private string plastekTerminalId;
        private string login;
        private string errorMessage;

        public PlastekProblemOp() {}

        public PlastekProblemOp(DateTime? time, string cardNumber, int transactionId, bool success, int voidedTransactionId, string hostDate, string plastekTerminalId, string login, string errorMessage)
        {
            this.time = time;
            this.cardNumber = cardNumber;
            this.transactionId = transactionId;
            this.success = success;
            this.voidedTransactionId = voidedTransactionId;
            this.hostDate = hostDate;
            this.plastekTerminalId = plastekTerminalId;
            this.login = login;
            this.errorMessage = errorMessage;
        }
        public DateTime? Time
        {
            get { return time; }
            set { time = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public int TransactionId
        {
            get { return transactionId; }
            set { transactionId = value; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public int VoidedTransactionId
        {
            get { return voidedTransactionId; }
            set { voidedTransactionId = value; }
        }

        public string HostDate
        {
            get { return hostDate; }
            set { hostDate = value; }
        }

        public string PlastekTerminalId
        {
            get { return plastekTerminalId; }
            set { plastekTerminalId = value; }
        }

        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

    }

    [DataClass("ProblemOpType")]
    [EnumClass]
    public partial class ProblemOpType : LocalizableName<ProblemOpType>, ILocalizableShortName
    {
        /// <summary> Нет проблемной операции. . </summary>
        public static readonly ProblemOpType NONE = new ProblemOpType("NONE", 0);
        /// <summary> Удаление из заказа без списания. УиЗбС. </summary>
        public static readonly ProblemOpType DELETE_NEW = new ProblemOpType("DELETE_NEW", 1);
        /// <summary> Удаление позиций заказа со списанием. УПЗсС. </summary>
        public static readonly ProblemOpType DELETE_PRINTED_WITH_WRITEOFF = new ProblemOpType("DELETE_PRINTED_WITH_WRITEOFF", 2);
        /// <summary> Удаление позиций заказа без списания. УПЗбС. </summary>
        public static readonly ProblemOpType DELETE_PRINTED = new ProblemOpType("DELETE_PRINTED", 3);
        /// <summary> Перенос в состоянии пречека - критическая операция. ПвСП. </summary>
        public static readonly ProblemOpType MOVE_TO_BILL = new ProblemOpType("MOVE_TO_BILL", 4);
        /// <summary> Надбавка после пречека. НпП. </summary>
        public static readonly ProblemOpType INCREASE_AFTER_BILL = new ProblemOpType("INCREASE_AFTER_BILL", 5);
        /// <summary> Отмена пречека. ОтПрч. </summary>
        public static readonly ProblemOpType CANCEL_BILL = new ProblemOpType("CANCEL_BILL", 6);
        /// <summary> Превышение лимита чека. ПлЧ. </summary>
        public static readonly ProblemOpType EXCEED_CHEQUE_LIMIT = new ProblemOpType("EXCEED_CHEQUE_LIMIT", 7);
        /// <summary> Отложенная оплата топливного заказа. ОтлОплТопЗак. </summary>
        public static readonly ProblemOpType PET_0RDER_MOVED_TO_DRY_TABLE = new ProblemOpType("PET_0RDER_MOVED_TO_DRY_TABLE", 3);
        /// <summary> Превышение времени между окончанием налива и оплатой. ПревВрОкНалОпл. </summary>
        public static readonly ProblemOpType PET_ORDER_NOT_CLOSED_TIMEOUT = new ProblemOpType("PET_ORDER_NOT_CLOSED_TIMEOUT", 3);

        private readonly int priority;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __shortNameResId;

        private ProblemOpType(string __value, int priority)
        {
            this.__value = __value;
            this.__nameResId = "PROBLEMOPTYPE_NAME_" + __value;
            this.__shortNameResId = "PROBLEMOPTYPE_SHORTNAME_" + __value;
            this.priority = priority;
        }

        public static ProblemOpType Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "DELETE_NEW": return DELETE_NEW;
                case "DELETE_PRINTED_WITH_WRITEOFF": return DELETE_PRINTED_WITH_WRITEOFF;
                case "DELETE_PRINTED": return DELETE_PRINTED;
                case "MOVE_TO_BILL": return MOVE_TO_BILL;
                case "INCREASE_AFTER_BILL": return INCREASE_AFTER_BILL;
                case "CANCEL_BILL": return CANCEL_BILL;
                case "EXCEED_CHEQUE_LIMIT": return EXCEED_CHEQUE_LIMIT;
                case "PET_0RDER_MOVED_TO_DRY_TABLE": return PET_0RDER_MOVED_TO_DRY_TABLE;
                case "PET_ORDER_NOT_CLOSED_TIMEOUT": return PET_ORDER_NOT_CLOSED_TIMEOUT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProblemOpType[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    DELETE_NEW, 
                    DELETE_PRINTED_WITH_WRITEOFF, 
                    DELETE_PRINTED, 
                    MOVE_TO_BILL, 
                    INCREASE_AFTER_BILL, 
                    CANCEL_BILL, 
                    EXCEED_CHEQUE_LIMIT, 
                    PET_0RDER_MOVED_TO_DRY_TABLE, 
                    PET_ORDER_NOT_CLOSED_TIMEOUT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string ShortNameResId
        {
            get { return __shortNameResId; }
        }

        public int Priority
        {
            get { return priority; }
        }

    }

    [DataClass("AbstractDocumentProcessor")]
    public abstract partial class AbstractDocumentProcessor : DocumentProcessor
    {
        private Conception conception;


        [CanBeNull]
        public Conception Conception
        {
            get { return conception; }
            set { conception = value; }
        }

    }

    [DataClass("AbstractSalesDocumentProcessor")]
    public abstract partial class AbstractSalesDocumentProcessor : AbstractSalesProcessor
    {


    }

    [DataClass("AbstractSalesProcessor")]
    public abstract partial class AbstractSalesProcessor : AbstractDocumentProcessor
    {
        private Account revenueAccount;
        private Account accountTo;


        [CanBeNull]
        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        [CanBeNull]
        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

    }

    [DataClass("AbstractStoreDocumentProcessor")]
    public abstract partial class AbstractStoreDocumentProcessor : AbstractDocumentProcessor
    {
        private ICollection<Store> fromStores;
        [HasDefaultValue]
        private bool fromProductCookingPlaceType = true;


        [CanBeNull]
        public ICollection<Store> FromStores
        {
            get { return fromStores; }
            set { fromStores = value; }
        }

        public bool FromProductCookingPlaceType
        {
            get { return fromProductCookingPlaceType; }
            set { fromProductCookingPlaceType = value; }
        }

    }

    [DataClass("AbstractStorePairDocumentProcessor")]
    public abstract partial class AbstractStorePairDocumentProcessor : AbstractStoreDocumentProcessor
    {
        private ICollection<Store> toStores;
        [HasDefaultValue]
        private bool toProductCookingPlaceType = true;


        [CanBeNull]
        public ICollection<Store> ToStores
        {
            get { return toStores; }
            set { toStores = value; }
        }

        public bool ToProductCookingPlaceType
        {
            get { return toProductCookingPlaceType; }
            set { toProductCookingPlaceType = value; }
        }

    }

    [DataClass("AbstractWriteoffDocumentProcessor")]
    public abstract partial class AbstractWriteoffDocumentProcessor : AbstractStoreDocumentProcessor
    {


    }

    [DataClass("DocumentProcessor")]
    public partial interface DocumentProcessor
    {

    }

    [DataClass("IncomingInventoryDocumentProcessor")]
    public partial class IncomingInventoryDocumentProcessor : AbstractStoreDocumentProcessor
    {


    }

    [DataClass("IncomingInvoiceProcessor")]
    public partial class IncomingInvoiceProcessor : AbstractDocumentProcessor
    {
        private User supplier;
        private Store storeTo;
        private bool useSalePrice;

        protected IncomingInvoiceProcessor() {}

        public IncomingInvoiceProcessor(bool useSalePrice)
        {
            this.useSalePrice = useSalePrice;
        }
        [CanBeNull]
        public User Supplier
        {
            get { return supplier; }
            set { supplier = value; }
        }

        [CanBeNull]
        public Store StoreTo
        {
            get { return storeTo; }
            set { storeTo = value; }
        }

        public bool UseSalePrice
        {
            get { return useSalePrice; }
            set { useSalePrice = value; }
        }

    }

    [DataClass("IncomingReturnedInvoiceProcessor")]
    public partial class IncomingReturnedInvoiceProcessor : AbstractDocumentProcessor
    {
        private Account revenueAccount;
        private Account revenueDebitAccount;
        private Account accountTo;

        protected IncomingReturnedInvoiceProcessor() {}

        public IncomingReturnedInvoiceProcessor(Account revenueAccount, Account revenueDebitAccount, Account accountTo)
        {
            this.revenueAccount = revenueAccount;
            this.revenueDebitAccount = revenueDebitAccount;
            this.accountTo = accountTo;
        }
        public Account RevenueAccount
        {
            get { return revenueAccount; }
            set { revenueAccount = value; }
        }

        public Account RevenueDebitAccount
        {
            get { return revenueDebitAccount; }
            set { revenueDebitAccount = value; }
        }

        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

    }

    [DataClass("IncomingServiceDocumentProcessor")]
    public partial class IncomingServiceDocumentProcessor : AbstractDocumentProcessor
    {


    }

    [DataClass("InternalTransferProcessor")]
    public partial class InternalTransferProcessor : AbstractStorePairDocumentProcessor
    {


    }

    [DataClass("ItemOperation")]
    [EnumClass]
    public partial class ItemOperation : LocalizableName<ItemOperation>
    {
        /// <summary> Приход. </summary>
        public static readonly ItemOperation ADDITION = new ItemOperation("ADDITION");
        /// <summary> Расход. </summary>
        public static readonly ItemOperation SUBSTRACTION = new ItemOperation("SUBSTRACTION");

        private readonly string __value;
        private readonly string __nameResId;

        private ItemOperation(string __value)
        {
            this.__value = __value;
            this.__nameResId = "ITEMOPERATION_NAME_" + __value;
        }

        public static ItemOperation Parse(string value)
        {
            switch(value)
            {
                case "ADDITION": return ADDITION;
                case "SUBSTRACTION": return SUBSTRACTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ItemOperation[] VALUES
        {
            get
            {
                return new []
                {
                    ADDITION, 
                    SUBSTRACTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("OutgoingInvoiceDocumentProcessor")]
    public partial class OutgoingInvoiceDocumentProcessor : AbstractSalesProcessor
    {
        private ICollection<Store> fromStores;
        [HasDefaultValue]
        private bool fromProductCookingPlaceType = true;
        [HasDefaultValue]
        private bool toPredefinedCustomersList = false;
        private ICollection<ClientPriceCategory> toPriceCategories;
        private ICollection<User> toCustomers;


        [CanBeNull]
        public ICollection<Store> FromStores
        {
            get { return fromStores; }
            set { fromStores = value; }
        }

        public bool FromProductCookingPlaceType
        {
            get { return fromProductCookingPlaceType; }
            set { fromProductCookingPlaceType = value; }
        }

        public bool ToPredefinedCustomersList
        {
            get { return toPredefinedCustomersList; }
            set { toPredefinedCustomersList = value; }
        }

        [CanBeNull]
        public ICollection<ClientPriceCategory> ToPriceCategories
        {
            get { return toPriceCategories; }
            set { toPriceCategories = value; }
        }

        [CanBeNull]
        public ICollection<User> ToCustomers
        {
            get { return toCustomers; }
            set { toCustomers = value; }
        }

    }

    [DataClass("PartiallyProcessableDocument")]
    public partial interface PartiallyProcessableDocument : ManualOrAutomaticDocument
    {

    }

    [DataClass("ProductionDocumentProcessor")]
    public partial class ProductionDocumentProcessor : AbstractStorePairDocumentProcessor
    {


    }

    [DataClass("SalesDocumentProcessor")]
    public partial class SalesDocumentProcessor : AbstractSalesDocumentProcessor
    {


    }

    [DataClass("TransformationDocumentProcessor")]
    public partial class TransformationDocumentProcessor : AbstractStorePairDocumentProcessor
    {
        [NotNull, NotNullField]
        private Product product;
        [NotNull, NotNullField]
        private ItemOperation operation;

        protected TransformationDocumentProcessor() {}

        public TransformationDocumentProcessor(Product product, ItemOperation operation)
        {
            this.product = product;
            this.operation = operation;
        }
        [NotNull]
        public Product Product
        {
            get { return product; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  product = value;
            }
        }

        [NotNull]
        public ItemOperation Operation
        {
            get { return operation; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  operation = value;
            }
        }

    }

    [DataClass("WriteoffDocumentProcessor")]
    public partial class WriteoffDocumentProcessor : AbstractWriteoffDocumentProcessor
    {
        [NotNull, NotNullField]
        private Account account;

        protected WriteoffDocumentProcessor() {}

        public WriteoffDocumentProcessor(Account account)
        {
            this.account = account;
        }
        [NotNull]
        public Account Account
        {
            get { return account; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  account = value;
            }
        }

    }

    [RootEntity]
    [DataClass("Region")]
    public partial class Region : LocalizableNamePersistedEntity
    {

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public Region() {}

        public Region(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
    }

    [DataClass("Reserve")]
    public partial class Reserve : SimpleDepartmentableEntity, WithAnonymized
    {
        [HasDefaultValue]
        private bool anonymized = false;
        private DepartmentEntity department;
        private DateTime date;
        private Guid? orderId;
        private int guests;
        private int durationMinutes;
        private string comment;
        private DiscountCardType cardType;
        private bool shouldRemind;
        [NotNull, NotNullField]
        private OperationInfo created;
        [NotNull, NotNullField]
        private OperationInfo modified;
        private DateTime? guestComing;
        private DateTime? guestGoOut;
        private ReserveStatus status;
        private string cardNumber;
        [HasDefaultValue]
        private string activityType = "";
        [HasDefaultValue]
        private int syncRevision = 0;
        [HasDefaultValue]
        private bool isBanquet = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Table> reservedTables = new HashSet<Table>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<BanquetSaleItem> banquetSaleItems = new HashSet<BanquetSaleItem>();
        private ReserveCancelCause cancelCause;
        [NotNull, NotNullField]
        private Group group;
        [HasDefaultValue]
        private string customerPhoneNumber = "";
        [HasDefaultValue]
        private string customerEmail = "";
        private Customer customer;
        [HasDefaultValue]
        private string orderNumber = "";
        private decimal? payedSum;
        [HasDefaultValue]
        private int number = 0;
        private Guid? externalId;

        protected Reserve() {}

        public Reserve(Guid id, DateTime date, int guests, int durationMinutes, string comment, DiscountCardType cardType, bool shouldRemind, OperationInfo created, OperationInfo modified, DateTime? guestComing, DateTime? guestGoOut, ReserveStatus status, string cardNumber, ReserveCancelCause cancelCause, Group group)
            : base(id)
        {
            this.date = date;
            this.guests = guests;
            this.durationMinutes = durationMinutes;
            this.comment = comment;
            this.cardType = cardType;
            this.shouldRemind = shouldRemind;
            this.created = created;
            this.modified = modified;
            this.guestComing = guestComing;
            this.guestGoOut = guestGoOut;
            this.status = status;
            this.cardNumber = cardNumber;
            this.cancelCause = cancelCause;
            this.group = group;
        }

        public Reserve(Guid id, DateTime date, OperationInfo created, OperationInfo modified, Group group)
            : base(id)
        {
            this.date = date;
            this.created = created;
            this.modified = modified;
            this.group = group;
        }

        public bool Anonymized
        {
            get { return anonymized; }
            set { anonymized = value; }
        }

        [CanBeNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        public DateTime Date
        {
            get { return date; }
            set { date = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public int Guests
        {
            get { return guests; }
            set { guests = value; }
        }

        public int DurationMinutes
        {
            get { return durationMinutes; }
            set { durationMinutes = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public DiscountCardType CardType
        {
            get { return cardType; }
            set { cardType = value; }
        }

        public bool ShouldRemind
        {
            get { return shouldRemind; }
            set { shouldRemind = value; }
        }

        [NotNull]
        public OperationInfo Created
        {
            get { return created; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  created = value;
            }
        }

        [NotNull]
        public OperationInfo Modified
        {
            get { return modified; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  modified = value;
            }
        }

        public DateTime? GuestComing
        {
            get { return guestComing; }
            set { guestComing = value; }
        }

        public DateTime? GuestGoOut
        {
            get { return guestGoOut; }
            set { guestGoOut = value; }
        }

        public ReserveStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public string CardNumber
        {
            get { return cardNumber; }
            set { cardNumber = value; }
        }

        public string ActivityType
        {
            get { return activityType; }
            set { activityType = value; }
        }

        public int SyncRevision
        {
            get { return syncRevision; }
            set { syncRevision = value; }
        }

        public bool IsBanquet
        {
            get { return isBanquet; }
            set { isBanquet = value; }
        }

        [NotNull]
        public HashSet<Table> ReservedTables
        {
            get { return reservedTables; }
        }

        [NotNull]
        public HashSet<BanquetSaleItem> BanquetSaleItems
        {
            get { return banquetSaleItems; }
        }

        public ReserveCancelCause CancelCause
        {
            get { return cancelCause; }
            set { cancelCause = value; }
        }

        [NotNull]
        public Group Group
        {
            get { return group; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  group = value;
            }
        }

        public string CustomerPhoneNumber
        {
            get { return customerPhoneNumber; }
            set { customerPhoneNumber = value; }
        }

        public string CustomerEmail
        {
            get { return customerEmail; }
            set { customerEmail = value; }
        }

        [CanBeNull]
        public Customer Customer
        {
            get { return customer; }
            set { customer = value; }
        }

        public string OrderNumber
        {
            get { return orderNumber; }
            set { orderNumber = value; }
        }

        public decimal? PayedSum
        {
            get { return payedSum; }
            set { payedSum = value; }
        }

        public int Number
        {
            get { return number; }
            set { number = value; }
        }

        public Guid? ExternalId
        {
            get { return externalId; }
            set { externalId = value; }
        }

    }

    [DataClass("ReserveCancelCause")]
    public enum ReserveCancelCause
    {
        LEFT,
        NOT_ARRIVED,
        REFUSED,
        OTHER
    }

    [DataClass("ReserveDeliveryDto")]
    public abstract partial class ReserveDeliveryDto
    {
        private decimal? prepaySum;

        protected ReserveDeliveryDto() {}

        protected ReserveDeliveryDto(decimal? prepaySum)
        {
            this.prepaySum = prepaySum;
        }
        public decimal? PrepaySum
        {
            get { return prepaySum; }
            set { prepaySum = value; }
        }

    }

    [DataClass("ReserveDto")]
    public partial class ReserveDto : ReserveDeliveryDto
    {
        private Reserve reserve;

        protected ReserveDto() {}

        public ReserveDto(decimal? prepaySum, Reserve reserve)
            : base(prepaySum)
        {
            this.reserve = reserve;
        }
        public Reserve Reserve
        {
            get { return reserve; }
            set { reserve = value; }
        }

    }

    [DataClass("ReserveStatus")]
    [EnumClass]
    public partial class ReserveStatus
    {
        public static readonly ReserveStatus NEW = new ReserveStatus("NEW", 1);
        public static readonly ReserveStatus EATING = new ReserveStatus("EATING", 2);
        public static readonly ReserveStatus CLOSED = new ReserveStatus("CLOSED", 3);

        private readonly int id;
        private readonly string __value;

        private ReserveStatus(string __value, int id)
        {
            this.__value = __value;
            this.id = id;
        }

        public static ReserveStatus Parse(string value)
        {
            switch(value)
            {
                case "NEW": return NEW;
                case "EATING": return EATING;
                case "CLOSED": return CLOSED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ReserveStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NEW, 
                    EATING, 
                    CLOSED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Id
        {
            get { return id; }
        }

    }

    [DataClass("ClearPluTask")]
    public partial class ClearPluTask : ScaleRegisterTask
    {

        protected ClearPluTask() {}

        public ClearPluTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("GetWeightTask")]
    public partial class GetWeightTask : ScaleRegisterTask
    {

        protected GetWeightTask() {}

        public GetWeightTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("PluStatus")]
    public enum PluStatus
    {
        OK,
        BUFFERED,
        WARNING,
        ERROR
    }

    [RootEntity]
    [DataClass("ScaleDevice")]
    public partial class ScaleDevice : AgentDevice
    {
        private Terminal terminal;

        protected ScaleDevice() {}

        public ScaleDevice(Guid id, LocalizableValue name, Guid? agentId, AgentDriver driver, Terminal terminal)
            : base(id, name, agentId, driver)
        {
            this.terminal = terminal;
        }

        public ScaleDevice(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

    }

    [DataClass("ScaleDeviceDriver")]
    public abstract partial class ScaleDeviceDriver : AgentDriver
    {


    }

    [DataClass("ScalePluResult")]
    public partial class ScalePluResult : AgentOkDeviceResult
    {
        private List<SendPluItem> pluItems;
        private int resultCode;

        protected ScalePluResult() {}

        public ScalePluResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, int resultCode)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.resultCode = resultCode;
        }
        public List<SendPluItem> PluItems
        {
            get { return pluItems; }
            set { pluItems = value; }
        }

        public int ResultCode
        {
            get { return resultCode; }
            set { resultCode = value; }
        }

    }

    [DataClass("ScaleRegisterTask")]
    public partial class ScaleRegisterTask : AgentTask
    {

        protected ScaleRegisterTask() {}

        public ScaleRegisterTask(bool success, Guid? id, Guid? deviceId)
            : base(success, id, deviceId)
        {

        }
    }

    [DataClass("ScaleWeightResult")]
    public partial class ScaleWeightResult : AgentOkDeviceResult
    {
        private decimal? weight;

        protected ScaleWeightResult() {}

        public ScaleWeightResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId, decimal? weight)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {
            this.weight = weight;
        }
        public decimal? Weight
        {
            get { return weight; }
            set { weight = value; }
        }

    }

    [DataClass("SendPluItem")]
    public partial class SendPluItem
    {
        private Guid? pluItemId;
        private long department;
        private long quickNo;
        private long itemNo;
        private string name;
        private long price;
        private long weightTare;
        private long expirationDate;
        private string description;
        private string foodValue;

        protected SendPluItem() {}

        public SendPluItem(Guid? pluItemId, long department, long quickNo, long itemNo, string name, long price, long weightTare, long expirationDate, string description, string foodValue)
        {
            this.pluItemId = pluItemId;
            this.department = department;
            this.quickNo = quickNo;
            this.itemNo = itemNo;
            this.name = name;
            this.price = price;
            this.weightTare = weightTare;
            this.expirationDate = expirationDate;
            this.description = description;
            this.foodValue = foodValue;
        }
        public Guid? PluItemId
        {
            get { return pluItemId; }
            set { pluItemId = value; }
        }

        public long Department
        {
            get { return department; }
            set { department = value; }
        }

        public long QuickNo
        {
            get { return quickNo; }
            set { quickNo = value; }
        }

        public long ItemNo
        {
            get { return itemNo; }
            set { itemNo = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public long Price
        {
            get { return price; }
            set { price = value; }
        }

        public long WeightTare
        {
            get { return weightTare; }
            set { weightTare = value; }
        }

        public long ExpirationDate
        {
            get { return expirationDate; }
            set { expirationDate = value; }
        }

        public string Description
        {
            get { return description; }
            set { description = value; }
        }

        public string FoodValue
        {
            get { return foodValue; }
            set { foodValue = value; }
        }

    }

    [DataClass("SendPluItemResult")]
    public partial class SendPluItemResult
    {
        private Guid? pluItemId;
        private int pluStatus;
        private string pluStatusDescription;

        public SendPluItemResult() {}

        public SendPluItemResult(Guid? pluItemId, int pluStatus, string pluStatusDescription)
        {
            this.pluItemId = pluItemId;
            this.pluStatus = pluStatus;
            this.pluStatusDescription = pluStatusDescription;
        }
        public Guid? PluItemId
        {
            get { return pluItemId; }
            set { pluItemId = value; }
        }

        public int PluStatus
        {
            get { return pluStatus; }
            set { pluStatus = value; }
        }

        public string PluStatusDescription
        {
            get { return pluStatusDescription; }
            set { pluStatusDescription = value; }
        }

    }

    [DataClass("SendPluResult")]
    public partial class SendPluResult : AgentOkDeviceResult
    {
        private List<SendPluItemResult> results;

        protected SendPluResult() {}

        public SendPluResult(Guid? agentId, long localTime, string name, Guid? taskId, bool success, string message, bool warnings, Guid? deviceId)
            : base(agentId, localTime, name, taskId, success, message, warnings, deviceId)
        {

        }
        public List<SendPluItemResult> Results
        {
            get { return results; }
            set { results = value; }
        }

    }

    [DataClass("SendPluTask")]
    public partial class SendPluTask : ScaleRegisterTask
    {
        private List<SendPluItem> items;
        private bool resetBuffer;
        private bool startUpload;

        protected SendPluTask() {}

        public SendPluTask(bool success, Guid? id, Guid? deviceId, bool resetBuffer, bool startUpload)
            : base(success, id, deviceId)
        {
            this.resetBuffer = resetBuffer;
            this.startUpload = startUpload;
        }
        public List<SendPluItem> Items
        {
            get { return items; }
            set { items = value; }
        }

        public bool ResetBuffer
        {
            get { return resetBuffer; }
            set { resetBuffer = value; }
        }

        public bool StartUpload
        {
            get { return startUpload; }
            set { startUpload = value; }
        }

    }

    [DataClass("CASScaleDriver")]
    public partial class CASScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("DigiScaleDriver")]
    public partial class DigiScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("ExternalScaleDriver")]
    public partial class ExternalScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("MassaScaleDriver")]
    public partial class MassaScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("NciEcrScaleDriver")]
    public partial class NciEcrScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("ScaleNullDriver")]
    public partial class ScaleNullDriver : ScaleDeviceDriver
    {


    }

    [DataClass("ShtrihPrintScaleDriver")]
    public partial class ShtrihPrintScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("ShtrihScaleDriver")]
    public partial class ShtrihScaleDriver : ScaleDeviceDriver
    {


    }

    [DataClass("CafeSessionCanDeleteOrdersOutOfSessionSetup")]
    [EnumClass]
    public partial class CafeSessionCanDeleteOrdersOutOfSessionSetup : LocalizableName<CafeSessionCanDeleteOrdersOutOfSessionSetup>
    {
        /// <summary> Запрещается. </summary>
        public static readonly CafeSessionCanDeleteOrdersOutOfSessionSetup NOT_ALLOWED = new CafeSessionCanDeleteOrdersOutOfSessionSetup("NOT_ALLOWED");
        /// <summary> Только заказы без списаний и оплаты. </summary>
        public static readonly CafeSessionCanDeleteOrdersOutOfSessionSetup WITHOUT_WRITEOFF_ONLY = new CafeSessionCanDeleteOrdersOutOfSessionSetup("WITHOUT_WRITEOFF_ONLY");
        /// <summary> Любые заказы без оплаты. </summary>
        public static readonly CafeSessionCanDeleteOrdersOutOfSessionSetup ALL = new CafeSessionCanDeleteOrdersOutOfSessionSetup("ALL");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionCanDeleteOrdersOutOfSessionSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCANDELETEORDERSOUTOFSESSIONSETUP_NAME_" + __value;
        }

        public static CafeSessionCanDeleteOrdersOutOfSessionSetup Parse(string value)
        {
            switch(value)
            {
                case "NOT_ALLOWED": return NOT_ALLOWED;
                case "WITHOUT_WRITEOFF_ONLY": return WITHOUT_WRITEOFF_ONLY;
                case "ALL": return ALL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionCanDeleteOrdersOutOfSessionSetup[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_ALLOWED, 
                    WITHOUT_WRITEOFF_ONLY, 
                    ALL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionCloseEncashmentSetup")]
    [EnumClass]
    public partial class CafeSessionCloseEncashmentSetup : LocalizableName<CafeSessionCloseEncashmentSetup>
    {
        /// <summary> Полная. </summary>
        public static readonly CafeSessionCloseEncashmentSetup COMPLETE = new CafeSessionCloseEncashmentSetup("COMPLETE");
        /// <summary> Вводить изымаемую сумму. </summary>
        public static readonly CafeSessionCloseEncashmentSetup CUSTOM = new CafeSessionCloseEncashmentSetup("CUSTOM");
        /// <summary> Не производить. </summary>
        public static readonly CafeSessionCloseEncashmentSetup NONE = new CafeSessionCloseEncashmentSetup("NONE");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionCloseEncashmentSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCLOSEENCASHMENTSETUP_NAME_" + __value;
        }

        public static CafeSessionCloseEncashmentSetup Parse(string value)
        {
            switch(value)
            {
                case "COMPLETE": return COMPLETE;
                case "CUSTOM": return CUSTOM;
                case "NONE": return NONE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionCloseEncashmentSetup[] VALUES
        {
            get
            {
                return new []
                {
                    COMPLETE, 
                    CUSTOM, 
                    NONE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionCloseOpenOrdersSetup")]
    [EnumClass]
    public partial class CafeSessionCloseOpenOrdersSetup : LocalizableName<CafeSessionCloseOpenOrdersSetup>
    {
        /// <summary> Все переносить. </summary>
        public static readonly CafeSessionCloseOpenOrdersSetup TRANSFER_ALL = new CafeSessionCloseOpenOrdersSetup("TRANSFER_ALL");
        /// <summary> Все закрывать. </summary>
        public static readonly CafeSessionCloseOpenOrdersSetup CLOSE_ALL = new CafeSessionCloseOpenOrdersSetup("CLOSE_ALL");
        /// <summary> На усмотрение менеджера. </summary>
        public static readonly CafeSessionCloseOpenOrdersSetup MANAGER = new CafeSessionCloseOpenOrdersSetup("MANAGER");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionCloseOpenOrdersSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCLOSEOPENORDERSSETUP_NAME_" + __value;
        }

        public static CafeSessionCloseOpenOrdersSetup Parse(string value)
        {
            switch(value)
            {
                case "TRANSFER_ALL": return TRANSFER_ALL;
                case "CLOSE_ALL": return CLOSE_ALL;
                case "MANAGER": return MANAGER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionCloseOpenOrdersSetup[] VALUES
        {
            get
            {
                return new []
                {
                    TRANSFER_ALL, 
                    CLOSE_ALL, 
                    MANAGER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionClosePersonalSessionsVerificationSetup")]
    [EnumClass]
    public partial class CafeSessionClosePersonalSessionsVerificationSetup : LocalizableName<CafeSessionClosePersonalSessionsVerificationSetup>
    {
        /// <summary> Все переносить. </summary>
        public static readonly CafeSessionClosePersonalSessionsVerificationSetup TRANSFER_ALL = new CafeSessionClosePersonalSessionsVerificationSetup("TRANSFER_ALL");
        /// <summary> Все закрывать. </summary>
        public static readonly CafeSessionClosePersonalSessionsVerificationSetup CLOSE_ALL = new CafeSessionClosePersonalSessionsVerificationSetup("CLOSE_ALL");
        /// <summary> Закрывать вне расписания. </summary>
        public static readonly CafeSessionClosePersonalSessionsVerificationSetup CLOSE_OUT_SHEDULE = new CafeSessionClosePersonalSessionsVerificationSetup("CLOSE_OUT_SHEDULE");
        /// <summary> На усмотрение менеджера. </summary>
        public static readonly CafeSessionClosePersonalSessionsVerificationSetup MANAGER = new CafeSessionClosePersonalSessionsVerificationSetup("MANAGER");
        /// <summary> Верификация явок. </summary>
        public static readonly CafeSessionClosePersonalSessionsVerificationSetup EMPLOYEE_ATTENDANCES = new CafeSessionClosePersonalSessionsVerificationSetup("EMPLOYEE_ATTENDANCES");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionClosePersonalSessionsVerificationSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCLOSEPERSONALSESSIONSVERIFICATIONSETUP_NAME_" + __value;
        }

        public static CafeSessionClosePersonalSessionsVerificationSetup Parse(string value)
        {
            switch(value)
            {
                case "TRANSFER_ALL": return TRANSFER_ALL;
                case "CLOSE_ALL": return CLOSE_ALL;
                case "CLOSE_OUT_SHEDULE": return CLOSE_OUT_SHEDULE;
                case "MANAGER": return MANAGER;
                case "EMPLOYEE_ATTENDANCES": return EMPLOYEE_ATTENDANCES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionClosePersonalSessionsVerificationSetup[] VALUES
        {
            get
            {
                return new []
                {
                    TRANSFER_ALL, 
                    CLOSE_ALL, 
                    CLOSE_OUT_SHEDULE, 
                    MANAGER, 
                    EMPLOYEE_ATTENDANCES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionClosePromisedDeliveryTimeSetup")]
    [EnumClass]
    public partial class CafeSessionClosePromisedDeliveryTimeSetup : LocalizableName<CafeSessionClosePromisedDeliveryTimeSetup>
    {
        /// <summary> Не проверять. </summary>
        public static readonly CafeSessionClosePromisedDeliveryTimeSetup DONT_CHECK = new CafeSessionClosePromisedDeliveryTimeSetup("DONT_CHECK");
        /// <summary> Проверять за прошлые дни. </summary>
        public static readonly CafeSessionClosePromisedDeliveryTimeSetup CHECK_PREVIOUS_OPER_DAY = new CafeSessionClosePromisedDeliveryTimeSetup("CHECK_PREVIOUS_OPER_DAY");
        /// <summary> Проверять за текущий день и прошлые дни. </summary>
        public static readonly CafeSessionClosePromisedDeliveryTimeSetup CHECK_CURRENT_OPER_DAY = new CafeSessionClosePromisedDeliveryTimeSetup("CHECK_CURRENT_OPER_DAY");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionClosePromisedDeliveryTimeSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCLOSEPROMISEDDELIVERYTIMESETUP_NAME_" + __value;
        }

        public static CafeSessionClosePromisedDeliveryTimeSetup Parse(string value)
        {
            switch(value)
            {
                case "DONT_CHECK": return DONT_CHECK;
                case "CHECK_PREVIOUS_OPER_DAY": return CHECK_PREVIOUS_OPER_DAY;
                case "CHECK_CURRENT_OPER_DAY": return CHECK_CURRENT_OPER_DAY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionClosePromisedDeliveryTimeSetup[] VALUES
        {
            get
            {
                return new []
                {
                    DONT_CHECK, 
                    CHECK_PREVIOUS_OPER_DAY, 
                    CHECK_CURRENT_OPER_DAY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionCloseRecalculationSetup")]
    [EnumClass]
    public partial class CafeSessionCloseRecalculationSetup : LocalizableName<CafeSessionCloseRecalculationSetup>
    {
        /// <summary> Обязательно. </summary>
        public static readonly CafeSessionCloseRecalculationSetup REQUIRED = new CafeSessionCloseRecalculationSetup("REQUIRED");
        /// <summary> Не требуется. </summary>
        public static readonly CafeSessionCloseRecalculationSetup NOT_REQUIRED = new CafeSessionCloseRecalculationSetup("NOT_REQUIRED");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionCloseRecalculationSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCLOSERECALCULATIONSETUP_NAME_" + __value;
        }

        public static CafeSessionCloseRecalculationSetup Parse(string value)
        {
            switch(value)
            {
                case "REQUIRED": return REQUIRED;
                case "NOT_REQUIRED": return NOT_REQUIRED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionCloseRecalculationSetup[] VALUES
        {
            get
            {
                return new []
                {
                    REQUIRED, 
                    NOT_REQUIRED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionCloseShutdownSetup")]
    [EnumClass]
    public partial class CafeSessionCloseShutdownSetup : LocalizableName<CafeSessionCloseShutdownSetup>
    {
        /// <summary> Всегда выключать. </summary>
        public static readonly CafeSessionCloseShutdownSetup AWLWAYS_SHUTDOWN = new CafeSessionCloseShutdownSetup("AWLWAYS_SHUTDOWN");
        /// <summary> Никогда не выключать. </summary>
        public static readonly CafeSessionCloseShutdownSetup NEVER_SHUTDOWN = new CafeSessionCloseShutdownSetup("NEVER_SHUTDOWN");
        /// <summary> Предлагать выключать. </summary>
        public static readonly CafeSessionCloseShutdownSetup SUGGEST_SHUTDOWN = new CafeSessionCloseShutdownSetup("SUGGEST_SHUTDOWN");
        /// <summary> Предлагать не выключать. </summary>
        public static readonly CafeSessionCloseShutdownSetup SUGGEST_NOT_SHUTDOWN = new CafeSessionCloseShutdownSetup("SUGGEST_NOT_SHUTDOWN");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionCloseShutdownSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONCLOSESHUTDOWNSETUP_NAME_" + __value;
        }

        public static CafeSessionCloseShutdownSetup Parse(string value)
        {
            switch(value)
            {
                case "AWLWAYS_SHUTDOWN": return AWLWAYS_SHUTDOWN;
                case "NEVER_SHUTDOWN": return NEVER_SHUTDOWN;
                case "SUGGEST_SHUTDOWN": return SUGGEST_SHUTDOWN;
                case "SUGGEST_NOT_SHUTDOWN": return SUGGEST_NOT_SHUTDOWN;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionCloseShutdownSetup[] VALUES
        {
            get
            {
                return new []
                {
                    AWLWAYS_SHUTDOWN, 
                    NEVER_SHUTDOWN, 
                    SUGGEST_SHUTDOWN, 
                    SUGGEST_NOT_SHUTDOWN
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionOpenOnAuthSetup")]
    [EnumClass]
    public partial class CafeSessionOpenOnAuthSetup : LocalizableName<CafeSessionOpenOnAuthSetup>
    {
        /// <summary> Не использовать. </summary>
        public static readonly CafeSessionOpenOnAuthSetup NONE = new CafeSessionOpenOnAuthSetup("NONE");
        /// <summary> Предлагать открыть. </summary>
        public static readonly CafeSessionOpenOnAuthSetup OFFER = new CafeSessionOpenOnAuthSetup("OFFER");
        /// <summary> Требовать открыть. </summary>
        public static readonly CafeSessionOpenOnAuthSetup REQUIRE = new CafeSessionOpenOnAuthSetup("REQUIRE");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionOpenOnAuthSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONOPENONAUTHSETUP_NAME_" + __value;
        }

        public static CafeSessionOpenOnAuthSetup Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "OFFER": return OFFER;
                case "REQUIRE": return REQUIRE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionOpenOnAuthSetup[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    OFFER, 
                    REQUIRE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionOpenPayInSetup")]
    [EnumClass]
    public partial class CafeSessionOpenPayInSetup : LocalizableName<CafeSessionOpenPayInSetup>
    {
        /// <summary> Не использовать. </summary>
        public static readonly CafeSessionOpenPayInSetup NONE = new CafeSessionOpenPayInSetup("NONE");
        /// <summary> Разрешать пропускать. </summary>
        public static readonly CafeSessionOpenPayInSetup OFFER = new CafeSessionOpenPayInSetup("OFFER");
        /// <summary> Требовать внесения. </summary>
        public static readonly CafeSessionOpenPayInSetup REQUIRE = new CafeSessionOpenPayInSetup("REQUIRE");

        private readonly string __value;
        private readonly string __nameResId;

        private CafeSessionOpenPayInSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CAFESESSIONOPENPAYINSETUP_NAME_" + __value;
        }

        public static CafeSessionOpenPayInSetup Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "OFFER": return OFFER;
                case "REQUIRE": return REQUIRE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CafeSessionOpenPayInSetup[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    OFFER, 
                    REQUIRE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CafeSessionSettings")]
    public partial class CafeSessionSettings
    {
        private CafeSessionCloseOpenOrdersSetup openOrdersSetup;
        private CafeSessionClosePersonalSessionsVerificationSetup personalSessionsVerificationSetup;
        private CafeSessionCloseRecalculationSetup recalculationSetup;
        private CafeSessionCloseEncashmentSetup encashmentSetup;
        private CafeSessionCloseShutdownSetup shutdownSetup;
        private CafeSessionClosePromisedDeliveryTimeSetup promisedDeliveryTimeSetup;
        [HasDefaultValue]
        private bool disableCloseCafeSessionWithPrepaidFiscalDeliveries = false;
        [HasDefaultValue]
        private bool disableCloseCafeSessionWithDebt = false;
        [HasDefaultValue]
        private bool confirmXReportPermission = false;
        [HasDefaultValue]
        private bool confirmEmployeeAttendancesOnSessionOpening = false;
        private CafeSessionCanDeleteOrdersOutOfSessionSetup canDeleteOrdersOutOfSession;
        private CafeSessionOpenOnAuthSetup openOnAuth;
        private CafeSessionOpenPayInSetup payInOnSessionOpen;
        private PayInOutType payInOnSessionOpenType;

        public CafeSessionSettings() {}

        public CafeSessionSettings(CafeSessionCloseOpenOrdersSetup openOrdersSetup, CafeSessionClosePersonalSessionsVerificationSetup personalSessionsVerificationSetup, CafeSessionCloseRecalculationSetup recalculationSetup, CafeSessionCloseEncashmentSetup encashmentSetup, CafeSessionCloseShutdownSetup shutdownSetup, CafeSessionClosePromisedDeliveryTimeSetup promisedDeliveryTimeSetup, CafeSessionCanDeleteOrdersOutOfSessionSetup canDeleteOrdersOutOfSession, CafeSessionOpenOnAuthSetup openOnAuth, CafeSessionOpenPayInSetup payInOnSessionOpen, PayInOutType payInOnSessionOpenType)
        {
            this.openOrdersSetup = openOrdersSetup;
            this.personalSessionsVerificationSetup = personalSessionsVerificationSetup;
            this.recalculationSetup = recalculationSetup;
            this.encashmentSetup = encashmentSetup;
            this.shutdownSetup = shutdownSetup;
            this.promisedDeliveryTimeSetup = promisedDeliveryTimeSetup;
            this.canDeleteOrdersOutOfSession = canDeleteOrdersOutOfSession;
            this.openOnAuth = openOnAuth;
            this.payInOnSessionOpen = payInOnSessionOpen;
            this.payInOnSessionOpenType = payInOnSessionOpenType;
        }
        public CafeSessionCloseOpenOrdersSetup OpenOrdersSetup
        {
            get { return openOrdersSetup; }
            set { openOrdersSetup = value; }
        }

        public CafeSessionClosePersonalSessionsVerificationSetup PersonalSessionsVerificationSetup
        {
            get { return personalSessionsVerificationSetup; }
            set { personalSessionsVerificationSetup = value; }
        }

        public CafeSessionCloseRecalculationSetup RecalculationSetup
        {
            get { return recalculationSetup; }
            set { recalculationSetup = value; }
        }

        public CafeSessionCloseEncashmentSetup EncashmentSetup
        {
            get { return encashmentSetup; }
            set { encashmentSetup = value; }
        }

        public CafeSessionCloseShutdownSetup ShutdownSetup
        {
            get { return shutdownSetup; }
            set { shutdownSetup = value; }
        }

        public CafeSessionClosePromisedDeliveryTimeSetup PromisedDeliveryTimeSetup
        {
            get { return promisedDeliveryTimeSetup; }
            set { promisedDeliveryTimeSetup = value; }
        }

        public bool DisableCloseCafeSessionWithPrepaidFiscalDeliveries
        {
            get { return disableCloseCafeSessionWithPrepaidFiscalDeliveries; }
            set { disableCloseCafeSessionWithPrepaidFiscalDeliveries = value; }
        }

        public bool DisableCloseCafeSessionWithDebt
        {
            get { return disableCloseCafeSessionWithDebt; }
            set { disableCloseCafeSessionWithDebt = value; }
        }

        public bool ConfirmXReportPermission
        {
            get { return confirmXReportPermission; }
            set { confirmXReportPermission = value; }
        }

        public bool ConfirmEmployeeAttendancesOnSessionOpening
        {
            get { return confirmEmployeeAttendancesOnSessionOpening; }
            set { confirmEmployeeAttendancesOnSessionOpening = value; }
        }

        public CafeSessionCanDeleteOrdersOutOfSessionSetup CanDeleteOrdersOutOfSession
        {
            get { return canDeleteOrdersOutOfSession; }
            set { canDeleteOrdersOutOfSession = value; }
        }

        public CafeSessionOpenOnAuthSetup OpenOnAuth
        {
            get { return openOnAuth; }
            set { openOnAuth = value; }
        }

        public CafeSessionOpenPayInSetup PayInOnSessionOpen
        {
            get { return payInOnSessionOpen; }
            set { payInOnSessionOpen = value; }
        }

        public PayInOutType PayInOnSessionOpenType
        {
            get { return payInOnSessionOpenType; }
            set { payInOnSessionOpenType = value; }
        }

    }

    [DataClass("CashRegisterCloseEncashmentSetup")]
    [EnumClass]
    public partial class CashRegisterCloseEncashmentSetup : LocalizableName<CashRegisterCloseEncashmentSetup>
    {
        /// <summary> Частичная инкассация. </summary>
        public static readonly CashRegisterCloseEncashmentSetup PARTIAL = new CashRegisterCloseEncashmentSetup("PARTIAL");
        /// <summary> Полная инкассация + внесение. </summary>
        public static readonly CashRegisterCloseEncashmentSetup FULLANDPAYIN = new CashRegisterCloseEncashmentSetup("FULLANDPAYIN");
        /// <summary> Автоинкассация + внесение. </summary>
        public static readonly CashRegisterCloseEncashmentSetup AUTOANDPAYIN = new CashRegisterCloseEncashmentSetup("AUTOANDPAYIN");

        private readonly string __value;
        private readonly string __nameResId;

        private CashRegisterCloseEncashmentSetup(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CASHREGISTERCLOSEENCASHMENTSETUP_NAME_" + __value;
        }

        public static CashRegisterCloseEncashmentSetup Parse(string value)
        {
            switch(value)
            {
                case "PARTIAL": return PARTIAL;
                case "FULLANDPAYIN": return FULLANDPAYIN;
                case "AUTOANDPAYIN": return AUTOANDPAYIN;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CashRegisterCloseEncashmentSetup[] VALUES
        {
            get
            {
                return new []
                {
                    PARTIAL, 
                    FULLANDPAYIN, 
                    AUTOANDPAYIN
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PreliminaryCookedProductsSettings")]
    public partial class PreliminaryCookedProductsSettings
    {
        [HasDefaultValue]
        private int productsGridColumnsCount = 4;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Product> products = new List<Product>();
        [HasDefaultValue]
        private bool showCookedProductsCountForCashier = false;
        private Account accountTo;


        public int ProductsGridColumnsCount
        {
            get { return productsGridColumnsCount; }
            set { productsGridColumnsCount = value; }
        }

        [NotNull]
        public List<Product> Products
        {
            get { return products; }
        }

        public bool ShowCookedProductsCountForCashier
        {
            get { return showCookedProductsCountForCashier; }
            set { showCookedProductsCountForCashier = value; }
        }

        [CanBeNull]
        public Account AccountTo
        {
            get { return accountTo; }
            set { accountTo = value; }
        }

    }

    [RootEntity]
    [DataClass("QuickLabels")]
    public partial class QuickLabels : PersistedEntity
    {
        [HasDefaultValue]
        private bool isDependsOnWeekDay = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<Guid> groupsInPages = new List<Guid>();
        private bool showSearch;
        [NotNull, NotNullField]
        private DepartmentEntity department;
        private RestaurantSection section;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<LabelPosition, Guid> labels = new Dictionary<LabelPosition, Guid>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> pageNames = new List<string>();
        private DateTime? lastChanged;

        protected QuickLabels() {}

        public QuickLabels(Guid id, bool showSearch, DepartmentEntity department, RestaurantSection section, DateTime? lastChanged)
            : base(id)
        {
            this.showSearch = showSearch;
            this.department = department;
            this.section = section;
            this.lastChanged = lastChanged;
        }

        public QuickLabels(Guid id, DepartmentEntity department)
            : base(id)
        {
            this.department = department;
        }

        public bool IsDependsOnWeekDay
        {
            get { return isDependsOnWeekDay; }
            set { isDependsOnWeekDay = value; }
        }

        [NotNull]
        public List<Guid> GroupsInPages
        {
            get { return groupsInPages; }
        }

        public bool ShowSearch
        {
            get { return showSearch; }
            set { showSearch = value; }
        }

        [NotNull]
        public DepartmentEntity Department
        {
            get { return department; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  department = value;
            }
        }

        public RestaurantSection Section
        {
            get { return section; }
            set { section = value; }
        }

        [NotNull]
        public Dictionary<LabelPosition, Guid> Labels
        {
            get { return labels; }
        }

        [NotNull]
        public List<string> PageNames
        {
            get { return pageNames; }
        }

        public DateTime? LastChanged
        {
            get { return lastChanged; }
            set { lastChanged = value; }
        }

    }

    [DataClass("LabelPosition")]
    public partial class LabelPosition
    {
        private int? day;
        private int page;
        private int x;
        private int y;

        protected LabelPosition() {}

        public LabelPosition(int? day, int page, int x, int y)
        {
            this.day = day;
            this.page = page;
            this.x = x;
            this.y = y;
        }
        public int? Day
        {
            get { return day; }
            set { day = value; }
        }

        public int Page
        {
            get { return page; }
            set { page = value; }
        }

        public int X
        {
            get { return x; }
            set { x = value; }
        }

        public int Y
        {
            get { return y; }
            set { y = value; }
        }

    }

    [DataClass("ReservesSettings")]
    public partial class ReservesSettings
    {
        private int allowedLateMinutes;
        private int preparedTimeMinutes;
        private DayTime defaultReserveStart;

        protected ReservesSettings() {}

        public ReservesSettings(int allowedLateMinutes, int preparedTimeMinutes, DayTime defaultReserveStart)
        {
            this.allowedLateMinutes = allowedLateMinutes;
            this.preparedTimeMinutes = preparedTimeMinutes;
            this.defaultReserveStart = defaultReserveStart;
        }
        public int AllowedLateMinutes
        {
            get { return allowedLateMinutes; }
            set { allowedLateMinutes = value; }
        }

        public int PreparedTimeMinutes
        {
            get { return preparedTimeMinutes; }
            set { preparedTimeMinutes = value; }
        }

        public DayTime DefaultReserveStart
        {
            get { return defaultReserveStart; }
            set { defaultReserveStart = value; }
        }

    }

    [DataClass("CustomerOpinion")]
    public partial class CustomerOpinion : CachedEntity
    {
        private Guid? deliveryId;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, int> marks = new Dictionary<Guid, int>();
        private string comment;

        protected CustomerOpinion() {}

        public CustomerOpinion(Guid id, Guid? deliveryId, string comment)
            : base(id)
        {
            this.deliveryId = deliveryId;
            this.comment = comment;
        }

        public CustomerOpinion(Guid id)
            : base(id)
        {

        }

        public Guid? DeliveryId
        {
            get { return deliveryId; }
            set { deliveryId = value; }
        }

        [NotNull]
        public Dictionary<Guid, int> Marks
        {
            get { return marks; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

    }

    [RootEntity]
    [DataClass("SurveyItem")]
    public partial class SurveyItem : PersistedEntity
    {
        [NotNull, NotNullField]
        private SurveyType type;
        [NotNull, NotNullField]
        private LocalizableValue question;

        protected SurveyItem() {}

        public SurveyItem(Guid id, SurveyType type, LocalizableValue question)
            : base(id)
        {
            this.type = type;
            this.question = question;
        }
        [NotNull]
        public SurveyType Type
        {
            get { return type; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  type = value;
            }
        }

        [NotNull]
        public LocalizableValue Question
        {
            get { return question; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  question = value;
            }
        }

    }

    [DataClass("SurveyItemResponse")]
    public partial class SurveyItemResponse : Entity
    {
        private Guid? deliveryOrderId;
        [NotNull, NotNullField]
        private SurveyItem surveyItem;
        private int mark;

        protected SurveyItemResponse() {}

        public SurveyItemResponse(Guid id, SurveyItem surveyItem, int mark)
            : base(id)
        {
            this.surveyItem = surveyItem;
            this.mark = mark;
        }
        public Guid? DeliveryOrderId
        {
            get { return deliveryOrderId; }
            set { deliveryOrderId = value; }
        }

        [NotNull]
        public SurveyItem SurveyItem
        {
            get { return surveyItem; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  surveyItem = value;
            }
        }

        public int Mark
        {
            get { return mark; }
            set { mark = value; }
        }

    }

    [DataClass("SurveyType")]
    [EnumClass]
    public partial class SurveyType : LocalizableName<SurveyType>
    {
        /// <summary> Общие вопросы. </summary>
        public static readonly SurveyType COMMON = new SurveyType("COMMON");
        /// <summary> Курьер. </summary>
        public static readonly SurveyType COURIER = new SurveyType("COURIER");
        /// <summary> Оператор доставки. </summary>
        public static readonly SurveyType DELIVERY_OPERATOR = new SurveyType("DELIVERY_OPERATOR");
        /// <summary> Кухня в доставке. </summary>
        public static readonly SurveyType DELIVERY_FOOD = new SurveyType("DELIVERY_FOOD");

        private readonly string __value;
        private readonly string __nameResId;

        private SurveyType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SURVEYTYPE_NAME_" + __value;
        }

        public static SurveyType Parse(string value)
        {
            switch(value)
            {
                case "COMMON": return COMMON;
                case "COURIER": return COURIER;
                case "DELIVERY_OPERATOR": return DELIVERY_OPERATOR;
                case "DELIVERY_FOOD": return DELIVERY_FOOD;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SurveyType[] VALUES
        {
            get
            {
                return new []
                {
                    COMMON, 
                    COURIER, 
                    DELIVERY_OPERATOR, 
                    DELIVERY_FOOD
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ServerUpgradeReport")]
    public partial class ServerUpgradeReport
    {
        [NotNull, NotNullField]
        private ServerUpgradeStatus status;
        private DateTime serverTime;
        [NotNull, NotNullField]
        private TerminalCountsInfo totalCount;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ServerUpgradeReportItem> terminals = new List<ServerUpgradeReportItem>();

        protected ServerUpgradeReport() {}

        public ServerUpgradeReport(ServerUpgradeStatus status, DateTime serverTime, TerminalCountsInfo totalCount)
        {
            this.status = status;
            this.serverTime = serverTime;
            this.totalCount = totalCount;
        }
        [NotNull]
        public ServerUpgradeStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        public DateTime ServerTime
        {
            get { return serverTime; }
            set { serverTime = value; }
        }

        [NotNull]
        public TerminalCountsInfo TotalCount
        {
            get { return totalCount; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  totalCount = value;
            }
        }

        [NotNull]
        public List<ServerUpgradeReportItem> Terminals
        {
            get { return terminals; }
        }

    }

    [DataClass("ServerUpgradeReportItem")]
    public partial class ServerUpgradeReportItem
    {
        private Terminal terminal;
        private bool active;
        private bool online;
        private TerminalExchangeState exchangeState;
        private TerminalUpgradeState upgradeState;

        protected ServerUpgradeReportItem() {}

        public ServerUpgradeReportItem(Terminal terminal, bool active, bool online, TerminalExchangeState exchangeState, TerminalUpgradeState upgradeState)
        {
            this.terminal = terminal;
            this.active = active;
            this.online = online;
            this.exchangeState = exchangeState;
            this.upgradeState = upgradeState;
        }
        public Terminal Terminal
        {
            get { return terminal; }
            set { terminal = value; }
        }

        public bool Active
        {
            get { return active; }
            set { active = value; }
        }

        public bool Online
        {
            get { return online; }
            set { online = value; }
        }

        public TerminalExchangeState ExchangeState
        {
            get { return exchangeState; }
            set { exchangeState = value; }
        }

        public TerminalUpgradeState UpgradeState
        {
            get { return upgradeState; }
            set { upgradeState = value; }
        }

    }

    [DataClass("TerminalCountsInfo")]
    public partial class TerminalCountsInfo
    {
        private int total;
        private int recentlyActive;
        private int readyForAutoUpgrade;
        private int lockedForAutoUpgrade;

        public TerminalCountsInfo() {}

        public TerminalCountsInfo(int total, int recentlyActive, int readyForAutoUpgrade, int lockedForAutoUpgrade)
        {
            this.total = total;
            this.recentlyActive = recentlyActive;
            this.readyForAutoUpgrade = readyForAutoUpgrade;
            this.lockedForAutoUpgrade = lockedForAutoUpgrade;
        }
        public int Total
        {
            get { return total; }
            set { total = value; }
        }

        public int RecentlyActive
        {
            get { return recentlyActive; }
            set { recentlyActive = value; }
        }

        public int ReadyForAutoUpgrade
        {
            get { return readyForAutoUpgrade; }
            set { readyForAutoUpgrade = value; }
        }

        public int LockedForAutoUpgrade
        {
            get { return lockedForAutoUpgrade; }
            set { lockedForAutoUpgrade = value; }
        }

    }

    [DataClass("TerminalExchangeState")]
    public partial class TerminalExchangeState : CachedEntity
    {
        [NotNull, NotNullField]
        private Terminal terminal;
        private string terminalVersion;
        private DateTime? lastActivityDate;
        private DateTime? entitiesUpdateDate;
        private int entitiesUpdateRevision;
        private DateTime? queueImportSuccessDate;
        private DateTime? queueImportLastDate;
        private string queueImportErrorMessage;
        private string queueImportErrorStacktrace;
        private int? queuePendingCount;
        private List<CafeSessionProperties> currentSessions;

        protected TerminalExchangeState() {}

        public TerminalExchangeState(Guid id, Terminal terminal, string terminalVersion, DateTime? lastActivityDate, DateTime? entitiesUpdateDate, int entitiesUpdateRevision, DateTime? queueImportSuccessDate, DateTime? queueImportLastDate, string queueImportErrorMessage, string queueImportErrorStacktrace, int? queuePendingCount)
            : base(id)
        {
            this.terminal = terminal;
            this.terminalVersion = terminalVersion;
            this.lastActivityDate = lastActivityDate;
            this.entitiesUpdateDate = entitiesUpdateDate;
            this.entitiesUpdateRevision = entitiesUpdateRevision;
            this.queueImportSuccessDate = queueImportSuccessDate;
            this.queueImportLastDate = queueImportLastDate;
            this.queueImportErrorMessage = queueImportErrorMessage;
            this.queueImportErrorStacktrace = queueImportErrorStacktrace;
            this.queuePendingCount = queuePendingCount;
        }

        public TerminalExchangeState(Guid id, Terminal terminal)
            : base(id)
        {
            this.terminal = terminal;
        }

        [NotNull]
        public Terminal Terminal
        {
            get { return terminal; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  terminal = value;
            }
        }

        public string TerminalVersion
        {
            get { return terminalVersion; }
            set { terminalVersion = value; }
        }

        public DateTime? LastActivityDate
        {
            get { return lastActivityDate; }
            set { lastActivityDate = value; }
        }

        public DateTime? EntitiesUpdateDate
        {
            get { return entitiesUpdateDate; }
            set { entitiesUpdateDate = value; }
        }

        public int EntitiesUpdateRevision
        {
            get { return entitiesUpdateRevision; }
            set { entitiesUpdateRevision = value; }
        }

        public DateTime? QueueImportSuccessDate
        {
            get { return queueImportSuccessDate; }
            set { queueImportSuccessDate = value; }
        }

        public DateTime? QueueImportLastDate
        {
            get { return queueImportLastDate; }
            set { queueImportLastDate = value; }
        }

        public string QueueImportErrorMessage
        {
            get { return queueImportErrorMessage; }
            set { queueImportErrorMessage = value; }
        }

        public string QueueImportErrorStacktrace
        {
            get { return queueImportErrorStacktrace; }
            set { queueImportErrorStacktrace = value; }
        }

        public int? QueuePendingCount
        {
            get { return queuePendingCount; }
            set { queuePendingCount = value; }
        }

        public List<CafeSessionProperties> CurrentSessions
        {
            get { return currentSessions; }
            set { currentSessions = value; }
        }

    }

    [DataClass("TerminalUpgradeState")]
    public partial class TerminalUpgradeState : CachedEntity
    {
        [NotNull, NotNullField]
        private Terminal terminal;
        [NotNull, NotNullField]
        private TerminalUpgradeStatus status;
        private DateTime dateReceived;
        private string targetVersion;
        private int revisionSettings;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<CheckResult> checkResults = new List<CheckResult>();

        protected TerminalUpgradeState() {}

        public TerminalUpgradeState(Guid id, Terminal terminal, TerminalUpgradeStatus status, DateTime dateReceived, string targetVersion, int revisionSettings)
            : base(id)
        {
            this.terminal = terminal;
            this.status = status;
            this.dateReceived = dateReceived;
            this.targetVersion = targetVersion;
            this.revisionSettings = revisionSettings;
        }

        public TerminalUpgradeState(Guid id, Terminal terminal, TerminalUpgradeStatus status, DateTime dateReceived)
            : base(id)
        {
            this.terminal = terminal;
            this.status = status;
            this.dateReceived = dateReceived;
        }

        [NotNull]
        public Terminal Terminal
        {
            get { return terminal; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  terminal = value;
            }
        }

        [NotNull]
        public TerminalUpgradeStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

        public DateTime DateReceived
        {
            get { return dateReceived; }
            set { dateReceived = value; }
        }

        public string TargetVersion
        {
            get { return targetVersion; }
            set { targetVersion = value; }
        }

        public int RevisionSettings
        {
            get { return revisionSettings; }
            set { revisionSettings = value; }
        }

        [NotNull]
        public List<CheckResult> CheckResults
        {
            get { return checkResults; }
        }

    }

    [DataClass("TerminalUpgradeStatus")]
    [EnumClass]
    public partial class TerminalUpgradeStatus : LocalizableName<TerminalUpgradeStatus>
    {
        /// <summary> Не готов. </summary>
        public static readonly TerminalUpgradeStatus NOT_READY = new TerminalUpgradeStatus("NOT_READY");
        /// <summary> Готов к обновлению вручную. </summary>
        public static readonly TerminalUpgradeStatus READY_FOR_MANUAL = new TerminalUpgradeStatus("READY_FOR_MANUAL");
        /// <summary> Готов к автоматическому обновлению. </summary>
        public static readonly TerminalUpgradeStatus READY_FOR_AUTO = new TerminalUpgradeStatus("READY_FOR_AUTO");
        /// <summary> Заблокирован и готов к обновлению. </summary>
        public static readonly TerminalUpgradeStatus LOCKED_FOR_AUTO = new TerminalUpgradeStatus("LOCKED_FOR_AUTO");

        private readonly string __value;
        private readonly string __nameResId;

        private TerminalUpgradeStatus(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TERMINALUPGRADESTATUS_NAME_" + __value;
        }

        public static TerminalUpgradeStatus Parse(string value)
        {
            switch(value)
            {
                case "NOT_READY": return NOT_READY;
                case "READY_FOR_MANUAL": return READY_FOR_MANUAL;
                case "READY_FOR_AUTO": return READY_FOR_AUTO;
                case "LOCKED_FOR_AUTO": return LOCKED_FOR_AUTO;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TerminalUpgradeStatus[] VALUES
        {
            get
            {
                return new []
                {
                    NOT_READY, 
                    READY_FOR_MANUAL, 
                    READY_FOR_AUTO, 
                    LOCKED_FOR_AUTO
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("FileDownloadBatch")]
    public partial class FileDownloadBatch
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<FileDownloadItem> files = new List<FileDownloadItem>();


        [NotNull]
        public List<FileDownloadItem> Files
        {
            get { return files; }
        }

    }

    [DataClass("FileDownloadItem")]
    public partial class FileDownloadItem
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string localFileName = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string downloadUrl = "";
        private long? size;
        private string sha256sum;

        protected FileDownloadItem() {}

        public FileDownloadItem(string localFileName, string downloadUrl, long? size, string sha256sum)
        {
            this.localFileName = localFileName;
            this.downloadUrl = downloadUrl;
            this.size = size;
            this.sha256sum = sha256sum;
        }

        public FileDownloadItem(string localFileName, string downloadUrl)
        {
            this.localFileName = localFileName;
            this.downloadUrl = downloadUrl;
        }

        [NotNull]
        public string LocalFileName
        {
            get { return localFileName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  localFileName = value;
            }
        }

        [NotNull]
        public string DownloadUrl
        {
            get { return downloadUrl; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  downloadUrl = value;
            }
        }

        public long? Size
        {
            get { return size; }
            set { size = value; }
        }

        public string Sha256sum
        {
            get { return sha256sum; }
            set { sha256sum = value; }
        }

    }

    [RootEntity]
    [DataClass("ServerUpgradeSettings")]
    public partial class ServerUpgradeSettings : PersistedEntity
    {
        private string targetVersion;
        private DateTime? dateTimeFrom;
        private DateTime? dateTimeTo;
        private int expectedServerUpgradeDurationSeconds;
        private LocalTimeInterval downloadInterval;
        [NotNull, NotNullField]
        private FileDownloadBatch downloads;
        private int quorumPercentCommon;
        private int quorumIgnoreOfflineDays;
        private int quorumRequireOnlineSeconds;

        protected ServerUpgradeSettings() {}

        public ServerUpgradeSettings(Guid id, string targetVersion, DateTime? dateTimeFrom, DateTime? dateTimeTo, int expectedServerUpgradeDurationSeconds, LocalTimeInterval downloadInterval, FileDownloadBatch downloads, int quorumPercentCommon, int quorumIgnoreOfflineDays, int quorumRequireOnlineSeconds)
            : base(id)
        {
            this.targetVersion = targetVersion;
            this.dateTimeFrom = dateTimeFrom;
            this.dateTimeTo = dateTimeTo;
            this.expectedServerUpgradeDurationSeconds = expectedServerUpgradeDurationSeconds;
            this.downloadInterval = downloadInterval;
            this.downloads = downloads;
            this.quorumPercentCommon = quorumPercentCommon;
            this.quorumIgnoreOfflineDays = quorumIgnoreOfflineDays;
            this.quorumRequireOnlineSeconds = quorumRequireOnlineSeconds;
        }

        public ServerUpgradeSettings(Guid id, FileDownloadBatch downloads)
            : base(id)
        {
            this.downloads = downloads;
        }

        public string TargetVersion
        {
            get { return targetVersion; }
            set { targetVersion = value; }
        }

        public DateTime? DateTimeFrom
        {
            get { return dateTimeFrom; }
            set { dateTimeFrom = value; }
        }

        public DateTime? DateTimeTo
        {
            get { return dateTimeTo; }
            set { dateTimeTo = value; }
        }

        public int ExpectedServerUpgradeDurationSeconds
        {
            get { return expectedServerUpgradeDurationSeconds; }
            set { expectedServerUpgradeDurationSeconds = value; }
        }

        public LocalTimeInterval DownloadInterval
        {
            get { return downloadInterval; }
            set { downloadInterval = value; }
        }

        [NotNull]
        public FileDownloadBatch Downloads
        {
            get { return downloads; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  downloads = value;
            }
        }

        public int QuorumPercentCommon
        {
            get { return quorumPercentCommon; }
            set { quorumPercentCommon = value; }
        }

        public int QuorumIgnoreOfflineDays
        {
            get { return quorumIgnoreOfflineDays; }
            set { quorumIgnoreOfflineDays = value; }
        }

        public int QuorumRequireOnlineSeconds
        {
            get { return quorumRequireOnlineSeconds; }
            set { quorumRequireOnlineSeconds = value; }
        }

    }

    [RootEntity]
    [DataClass("ServerUpgradeState")]
    public partial class ServerUpgradeState : PersistedEntity
    {
        [NotNull, NotNullField]
        private ServerUpgradeStatus status;

        protected ServerUpgradeState() {}

        public ServerUpgradeState(Guid id, ServerUpgradeStatus status)
            : base(id)
        {
            this.status = status;
        }
        [NotNull]
        public ServerUpgradeStatus Status
        {
            get { return status; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  status = value;
            }
        }

    }

    [DataClass("ServerUpgradeStatus")]
    [EnumClass]
    public partial class ServerUpgradeStatus : LocalizableName<ServerUpgradeStatus>, ILocalizableDescription
    {
        /// <summary> Не запланировано. Система ничего не делает. Устанавливается администратором, либо сервером, если обновление прошло успешно.. </summary>
        public static readonly ServerUpgradeStatus IDLE = new ServerUpgradeStatus("IDLE");
        /// <summary> Фоновая загрузка. Терминал скачивает инсталлятор новой версии, но больше ничего не делает. Устанавливается администратором, либо сервером, если обновление пропущено.. </summary>
        public static readonly ServerUpgradeStatus BACKGROUND = new ServerUpgradeStatus("BACKGROUND");
        /// <summary> Запланировано. Терминал скачивает инсталлятор новой версии и просит пользователей не выключать кассу (терминал) после завершения работы. Терминал ждет наступления запланированного момента начала работ и получения достаточного количества подтверждений от терминалов. Устанавливается администратором.. </summary>
        public static readonly ServerUpgradeStatus FOREGROUND = new ServerUpgradeStatus("FOREGROUND");
        /// <summary> Блокировка терминала. Терминал немедленно выгружает плагины и запрещает работу пользователей. Система собирает подтверждения от терминалов и переходит к следующему этапу, если их достаточно. Устанавливается сервером в запланированный момент начала работ.. </summary>
        public static readonly ServerUpgradeStatus LOCK = new ServerUpgradeStatus("LOCK");
        /// <summary> Обновление системы. Терминал продолжает запрещать работу пользователей. Система ничего не делает. Администратор должен остановить сервер и обновить его.. </summary>
        public static readonly ServerUpgradeStatus LOCK_SHUTDOWN = new ServerUpgradeStatus("LOCK_SHUTDOWN");

        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __descriptionResId;

        private ServerUpgradeStatus(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SERVERUPGRADESTATUS_NAME_" + __value;
            this.__descriptionResId = "SERVERUPGRADESTATUS_DESCRIPTION_" + __value;
        }

        public static ServerUpgradeStatus Parse(string value)
        {
            switch(value)
            {
                case "IDLE": return IDLE;
                case "BACKGROUND": return BACKGROUND;
                case "FOREGROUND": return FOREGROUND;
                case "LOCK": return LOCK;
                case "LOCK_SHUTDOWN": return LOCK_SHUTDOWN;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ServerUpgradeStatus[] VALUES
        {
            get
            {
                return new []
                {
                    IDLE, 
                    BACKGROUND, 
                    FOREGROUND, 
                    LOCK, 
                    LOCK_SHUTDOWN
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string DescriptionResId
        {
            get { return __descriptionResId; }
        }

    }

    [DataClass("OverrideTaxCategory")]
    public partial class OverrideTaxCategory
    {
        private OrderType orderType;
        private TaxCategory baseTaxCategory;
        private TaxCategory newTaxCategory;


        [CanBeNull]
        public OrderType OrderType
        {
            get { return orderType; }
            set { orderType = value; }
        }

        [CanBeNull]
        public TaxCategory BaseTaxCategory
        {
            get { return baseTaxCategory; }
            set { baseTaxCategory = value; }
        }

        [CanBeNull]
        public TaxCategory NewTaxCategory
        {
            get { return newTaxCategory; }
            set { newTaxCategory = value; }
        }

    }

    [RootEntity]
    [DataClass("WaiterTeam")]
    public partial class WaiterTeam : LocalizableNamePersistedEntity
    {
        private string code;
        private DepartmentEntity department;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public WaiterTeam() {}

        public WaiterTeam(Guid id, LocalizableValue name, DepartmentEntity department)
            : base(id, name)
        {
            this.department = department;
        }

        public WaiterTeam(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        [CanBeNull]
        public string Code
        {
            get { return code; }
            set { code = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [RootEntity]
    [DataClass("WaiterTeamAssignments")]
    public partial class WaiterTeamAssignments : PersistedEntity
    {
        private Dictionary<User, WaiterTeam> assignments;
        private DepartmentEntity department;

        protected WaiterTeamAssignments() {}

        public WaiterTeamAssignments(Guid id, DepartmentEntity department)
            : base(id)
        {
            this.department = department;
        }

        public WaiterTeamAssignments(Guid id)
            : base(id)
        {

        }

        public Dictionary<User, WaiterTeam> Assignments
        {
            get { return assignments; }
            set { assignments = value; }
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

    }

    [DataClass("ByValueSaveOrUpdateEntity")]
    public partial class ByValueSaveOrUpdateEntity : ObjectCreatorEntity
    {
        private ByValue<PersistedEntity> container;

        protected ByValueSaveOrUpdateEntity() {}

        public ByValueSaveOrUpdateEntity(Guid id, ObjectType type, Guid? objectId, ByValue<PersistedEntity> container)
            : base(id, type, objectId)
        {
            this.container = container;
        }

        public ByValueSaveOrUpdateEntity(Guid id)
            : base(id)
        {

        }

        public ByValue<PersistedEntity> Container
        {
            get { return container; }
            set { container = value; }
        }

    }

    [DataClass("CafeSessionCloseInfoContainer")]
    public partial class CafeSessionCloseInfoContainer : CachedEntity
    {
        private SessionCloseInfo info;
        private Group group;
        private Guid sessionId;

        protected CafeSessionCloseInfoContainer() {}

        public CafeSessionCloseInfoContainer(Guid id, SessionCloseInfo info, Group group, Guid sessionId)
            : base(id)
        {
            this.info = info;
            this.group = group;
            this.sessionId = sessionId;
        }

        public CafeSessionCloseInfoContainer(Guid id, Guid sessionId)
            : base(id)
        {
            this.sessionId = sessionId;
        }

        public SessionCloseInfo Info
        {
            get { return info; }
            set { info = value; }
        }

        public Group Group
        {
            get { return group; }
            set { group = value; }
        }

        public Guid SessionId
        {
            get { return sessionId; }
            set { sessionId = value; }
        }

    }

    [DataClass("EmployeeAttendanceCreator")]
    public partial class EmployeeAttendanceCreator : ObjectCreatorEntity
    {
        private DateTime? date;
        private User employee;
        private Role role;

        protected EmployeeAttendanceCreator() {}

        public EmployeeAttendanceCreator(Guid id, ObjectType type, Guid? objectId, DateTime? date, User employee, Role role)
            : base(id, type, objectId)
        {
            this.date = date;
            this.employee = employee;
            this.role = role;
        }

        public EmployeeAttendanceCreator(Guid id)
            : base(id)
        {

        }

        public DateTime? Date
        {
            get { return date; }
            set { date = value; }
        }

        public User Employee
        {
            get { return employee; }
            set { employee = value; }
        }

        public Role Role
        {
            get { return role; }
            set { role = value; }
        }

    }

    [DataClass("FrontBalanceSetter")]
    public partial class FrontBalanceSetter : CachedEntity
    {
        private Guid? productId;
        private Guid? productSizeId;
        private StopListItem stopListItem;
        private bool removeFromStop;
        private Guid? groupId;
        [HasDefaultValue]
        private bool relative = false;

        protected FrontBalanceSetter() {}

        public FrontBalanceSetter(Guid id, Guid? productId, Guid? productSizeId, bool removeFromStop, Guid? groupId)
            : base(id)
        {
            this.productId = productId;
            this.productSizeId = productSizeId;
            this.removeFromStop = removeFromStop;
            this.groupId = groupId;
        }

        public FrontBalanceSetter(Guid id)
            : base(id)
        {

        }

        public Guid? ProductId
        {
            get { return productId; }
            set { productId = value; }
        }

        public Guid? ProductSizeId
        {
            get { return productSizeId; }
            set { productSizeId = value; }
        }

        [CanBeNull]
        public StopListItem StopListItem
        {
            get { return stopListItem; }
            set { stopListItem = value; }
        }

        public bool RemoveFromStop
        {
            get { return removeFromStop; }
            set { removeFromStop = value; }
        }

        public Guid? GroupId
        {
            get { return groupId; }
            set { groupId = value; }
        }

        public bool Relative
        {
            get { return relative; }
            set { relative = value; }
        }

    }

    [RootEntity]
    [DataClass("FrontBalances")]
    public partial class FrontBalances : PersistedEntity
    {
        private Dictionary<FrontBalancesKey, StopListItem> commonBalance;
        private Dictionary<Guid, Dictionary<FrontBalancesKey, StopListItem>> balancesByGroups;

        protected FrontBalances() {}

        public FrontBalances(Guid id)
            : base(id)
        {

        }
        public Dictionary<FrontBalancesKey, StopListItem> CommonBalance
        {
            get { return commonBalance; }
            set { commonBalance = value; }
        }

        public Dictionary<Guid, Dictionary<FrontBalancesKey, StopListItem>> BalancesByGroups
        {
            get { return balancesByGroups; }
            set { balancesByGroups = value; }
        }

    }

    [DataClass("FrontBalancesKey")]
    public partial class FrontBalancesKey
    {
        private Guid productId;
        private Guid? productSizeId;

        protected FrontBalancesKey() {}

        public FrontBalancesKey(Guid productId, Guid? productSizeId)
        {
            this.productId = productId;
            this.productSizeId = productSizeId;
        }

        public FrontBalancesKey(Guid productId)
        {
            this.productId = productId;
        }

        public Guid ProductId
        {
            get { return productId; }
        }

        public Guid? ProductSizeId
        {
            get { return productSizeId; }
        }

    }

    [DataClass("ObjectCreatorEntity")]
    public partial class ObjectCreatorEntity : CachedEntity
    {
        private ObjectType type;
        private Guid? objectId;

        protected ObjectCreatorEntity() {}

        public ObjectCreatorEntity(Guid id, ObjectType type, Guid? objectId)
            : base(id)
        {
            this.type = type;
            this.objectId = objectId;
        }

        public ObjectCreatorEntity(Guid id)
            : base(id)
        {

        }

        public ObjectType Type
        {
            get { return type; }
            set { type = value; }
        }

        public Guid? ObjectId
        {
            get { return objectId; }
            set { objectId = value; }
        }

    }

    [DataClass("ObjectType")]
    public enum ObjectType
    {
        FRONT_BALANCES,
        EMPLOYEE_ATTENDANCE,
        BY_VALUE
    }

    [DataClass("OrderSalesDataContainer")]
    public partial class OrderSalesDataContainer : CachedEntity
    {
        private OrderSalesData orderSalesData;

        protected OrderSalesDataContainer() {}

        public OrderSalesDataContainer(Guid id, OrderSalesData orderSalesData)
            : base(id)
        {
            this.orderSalesData = orderSalesData;
        }

        public OrderSalesDataContainer(Guid id)
            : base(id)
        {

        }

        public OrderSalesData OrderSalesData
        {
            get { return orderSalesData; }
            set { orderSalesData = value; }
        }

    }

    [DataClass("StopListItem")]
    public partial class StopListItem
    {
        [HasDefaultValue]
        private decimal amount = 0;
        private OperationInfo operationInfo;

        protected StopListItem() {}

        public StopListItem(decimal amount)
        {
            this.amount = amount;
        }
        public decimal Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        [CanBeNull]
        public OperationInfo OperationInfo
        {
            get { return operationInfo; }
            set { operationInfo = value; }
        }

    }

    [DataClass("FrontEntitiesBackup")]
    public partial class FrontEntitiesBackup
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Reserve> reserves = new List<Reserve>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Delivery> deliveries = new List<Delivery>();
        private long? streetsLocalRevision;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Street> streets = new List<Street>();
        private long? customersLocalRevision;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly ICollection<Customer> customers = new List<Customer>();

        protected FrontEntitiesBackup() {}

        public FrontEntitiesBackup(long? streetsLocalRevision, long? customersLocalRevision)
        {
            this.streetsLocalRevision = streetsLocalRevision;
            this.customersLocalRevision = customersLocalRevision;
        }
        [NotNull]
        public ICollection<Reserve> Reserves
        {
            get { return reserves; }
        }

        [NotNull]
        public ICollection<Delivery> Deliveries
        {
            get { return deliveries; }
        }

        public long? StreetsLocalRevision
        {
            get { return streetsLocalRevision; }
            set { streetsLocalRevision = value; }
        }

        [NotNull]
        public ICollection<Street> Streets
        {
            get { return streets; }
        }

        public long? CustomersLocalRevision
        {
            get { return customersLocalRevision; }
            set { customersLocalRevision = value; }
        }

        [NotNull]
        public ICollection<Customer> Customers
        {
            get { return customers; }
        }

    }

    [DataClass("FrontEntitiesBackupRequest")]
    public partial class FrontEntitiesBackupRequest
    {
        [NotNull, NotNullField]
        private Group group;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Guid> excludedDeliveries = new HashSet<Guid>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Guid> excludedReserves = new HashSet<Guid>();
        private int? streetsKnownRevision;
        private int? customersKnownRevision;
        private long? streetsKnownLocalRevision;
        private long? customersKnownLocalRevision;
        private int citiesKnownRevision;

        protected FrontEntitiesBackupRequest() {}

        public FrontEntitiesBackupRequest(Group group, int? streetsKnownRevision, int? customersKnownRevision, long? streetsKnownLocalRevision, long? customersKnownLocalRevision, int citiesKnownRevision)
        {
            this.group = group;
            this.streetsKnownRevision = streetsKnownRevision;
            this.customersKnownRevision = customersKnownRevision;
            this.streetsKnownLocalRevision = streetsKnownLocalRevision;
            this.customersKnownLocalRevision = customersKnownLocalRevision;
            this.citiesKnownRevision = citiesKnownRevision;
        }

        public FrontEntitiesBackupRequest(Group group)
        {
            this.group = group;
        }

        [NotNull]
        public Group Group
        {
            get { return group; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  group = value;
            }
        }

        [NotNull]
        public HashSet<Guid> ExcludedDeliveries
        {
            get { return excludedDeliveries; }
        }

        [NotNull]
        public HashSet<Guid> ExcludedReserves
        {
            get { return excludedReserves; }
        }

        public int? StreetsKnownRevision
        {
            get { return streetsKnownRevision; }
            set { streetsKnownRevision = value; }
        }

        public int? CustomersKnownRevision
        {
            get { return customersKnownRevision; }
            set { customersKnownRevision = value; }
        }

        public long? StreetsKnownLocalRevision
        {
            get { return streetsKnownLocalRevision; }
            set { streetsKnownLocalRevision = value; }
        }

        public long? CustomersKnownLocalRevision
        {
            get { return customersKnownLocalRevision; }
            set { customersKnownLocalRevision = value; }
        }

        public int CitiesKnownRevision
        {
            get { return citiesKnownRevision; }
            set { citiesKnownRevision = value; }
        }

    }

    [DataClass("EmailSendingRequest")]
    public partial class EmailSendingRequest
    {
        private string subject;
        private string body;
        private string receiver;
        private string deliveryNumber;
        private string orderNumber;

        protected EmailSendingRequest() {}

        public EmailSendingRequest(string subject, string body, string receiver, string deliveryNumber, string orderNumber)
        {
            this.subject = subject;
            this.body = body;
            this.receiver = receiver;
            this.deliveryNumber = deliveryNumber;
            this.orderNumber = orderNumber;
        }
        public string Subject
        {
            get { return subject; }
            set { subject = value; }
        }

        public string Body
        {
            get { return body; }
            set { body = value; }
        }

        public string Receiver
        {
            get { return receiver; }
            set { receiver = value; }
        }

        public string DeliveryNumber
        {
            get { return deliveryNumber; }
            set { deliveryNumber = value; }
        }

        public string OrderNumber
        {
            get { return orderNumber; }
            set { orderNumber = value; }
        }

    }

    [DataClass("EmailSendingResultDto")]
    public partial class EmailSendingResultDto
    {
        private bool isError;
        private string errorText;

        public EmailSendingResultDto() {}

        public EmailSendingResultDto(bool isError, string errorText)
        {
            this.isError = isError;
            this.errorText = errorText;
        }
        public bool IsError
        {
            get { return isError; }
            set { isError = value; }
        }

        public string ErrorText
        {
            get { return errorText; }
            set { errorText = value; }
        }

    }

    [DataClass("SmsSendingRequest")]
    public partial class SmsSendingRequest
    {
        private string text;
        private string receiver;
        private string deliveryNumber;
        private string orderNumber;
        private Guid? orderId;
        private DeliveryStatus deliveryStatus;
        private decimal? sum;
        private string comment;
        private string orderType;
        private string source;
        private bool verificationSms;

        protected SmsSendingRequest() {}

        public SmsSendingRequest(string text, string receiver, string deliveryNumber, string orderNumber, Guid? orderId, DeliveryStatus deliveryStatus, decimal? sum, string comment, string orderType, string source, bool verificationSms)
        {
            this.text = text;
            this.receiver = receiver;
            this.deliveryNumber = deliveryNumber;
            this.orderNumber = orderNumber;
            this.orderId = orderId;
            this.deliveryStatus = deliveryStatus;
            this.sum = sum;
            this.comment = comment;
            this.orderType = orderType;
            this.source = source;
            this.verificationSms = verificationSms;
        }
        public string Text
        {
            get { return text; }
            set { text = value; }
        }

        public string Receiver
        {
            get { return receiver; }
            set { receiver = value; }
        }

        public string DeliveryNumber
        {
            get { return deliveryNumber; }
            set { deliveryNumber = value; }
        }

        public string OrderNumber
        {
            get { return orderNumber; }
            set { orderNumber = value; }
        }

        public Guid? OrderId
        {
            get { return orderId; }
            set { orderId = value; }
        }

        public DeliveryStatus DeliveryStatus
        {
            get { return deliveryStatus; }
            set { deliveryStatus = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public string OrderType
        {
            get { return orderType; }
            set { orderType = value; }
        }

        public string Source
        {
            get { return source; }
            set { source = value; }
        }

        public bool VerificationSms
        {
            get { return verificationSms; }
            set { verificationSms = value; }
        }

    }

    [DataClass("SmsSendingResultDto")]
    public partial class SmsSendingResultDto
    {
        private bool isError;
        private string errorText;
        private bool sentByPush;
        private bool zeroSmsBalance;

        public SmsSendingResultDto() {}

        public SmsSendingResultDto(bool isError, string errorText, bool sentByPush, bool zeroSmsBalance)
        {
            this.isError = isError;
            this.errorText = errorText;
            this.sentByPush = sentByPush;
            this.zeroSmsBalance = zeroSmsBalance;
        }
        public bool IsError
        {
            get { return isError; }
            set { isError = value; }
        }

        public string ErrorText
        {
            get { return errorText; }
            set { errorText = value; }
        }

        public bool SentByPush
        {
            get { return sentByPush; }
            set { sentByPush = value; }
        }

        public bool ZeroSmsBalance
        {
            get { return zeroSmsBalance; }
            set { zeroSmsBalance = value; }
        }

    }

    [DataClass("CheckExchange")]
    public enum CheckExchange
    {
        ALLOWED,
        NOT_ALLOWED,
        UNKNOWN,
        CHECK_DISABLED
    }

    [DataClass("IikoBizRegistrationDto")]
    public partial class IikoBizRegistrationDto
    {
        private string organizationName;
        private string address;
        private string adminName;
        private string email;
        private string password;
        private string currency;

        protected IikoBizRegistrationDto() {}

        public IikoBizRegistrationDto(string organizationName, string address, string adminName, string email, string password, string currency)
        {
            this.organizationName = organizationName;
            this.address = address;
            this.adminName = adminName;
            this.email = email;
            this.password = password;
            this.currency = currency;
        }
        public string OrganizationName
        {
            get { return organizationName; }
            set { organizationName = value; }
        }

        public string Address
        {
            get { return address; }
            set { address = value; }
        }

        public string AdminName
        {
            get { return adminName; }
            set { adminName = value; }
        }

        public string Email
        {
            get { return email; }
            set { email = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        public string Currency
        {
            get { return currency; }
            set { currency = value; }
        }

    }

    [DataClass("IikoBizRegistrationStatus")]
    public enum IikoBizRegistrationStatus
    {
        REGISTRATION_SUCCESS,
        UNKNOWN,
        INVALID_PASSWORD_FOR_EXISTING_USER,
        UNSUPPORTED_CURRENCY,
        DUPLICATE_ORGANIZATION_NAME
    }

    [DataClass("ConnectionFailReason")]
    [EnumClass]
    public partial class ConnectionFailReason : LocalizableName<ConnectionFailReason>
    {
        /// <summary> Превышено время ожидания соединения с api.biz.. </summary>
        public static readonly ConnectionFailReason TIMEOUT = new ConnectionFailReason("TIMEOUT");
        /// <summary> Ошибка соединения с RabbitMQ (запрет на использование порта, по умолчанию 5672).. </summary>
        public static readonly ConnectionFailReason RABBIT_MQ_CONNECTION = new ConnectionFailReason("RABBIT_MQ_CONNECTION");
        /// <summary> Неправильный логин/пароль для RabbitMQ.. </summary>
        public static readonly ConnectionFailReason RABBIT_MQ_AUTHENTICATION = new ConnectionFailReason("RABBIT_MQ_AUTHENTICATION");
        /// <summary> Организация с заданным CrmId не зарегистрирована в api.biz.. </summary>
        public static readonly ConnectionFailReason ORGANIZATION_IS_NOT_REGISTERED = new ConnectionFailReason("ORGANIZATION_IS_NOT_REGISTERED");
        /// <summary> Ошибка подключения к Api.. </summary>
        public static readonly ConnectionFailReason RMS_API_CONNECTION = new ConnectionFailReason("RMS_API_CONNECTION");

        private readonly string __value;
        private readonly string __nameResId;

        private ConnectionFailReason(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CONNECTIONFAILREASON_NAME_" + __value;
        }

        public static ConnectionFailReason Parse(string value)
        {
            switch(value)
            {
                case "TIMEOUT": return TIMEOUT;
                case "RABBIT_MQ_CONNECTION": return RABBIT_MQ_CONNECTION;
                case "RABBIT_MQ_AUTHENTICATION": return RABBIT_MQ_AUTHENTICATION;
                case "ORGANIZATION_IS_NOT_REGISTERED": return ORGANIZATION_IS_NOT_REGISTERED;
                case "RMS_API_CONNECTION": return RMS_API_CONNECTION;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ConnectionFailReason[] VALUES
        {
            get
            {
                return new []
                {
                    TIMEOUT, 
                    RABBIT_MQ_CONNECTION, 
                    RABBIT_MQ_AUTHENTICATION, 
                    ORGANIZATION_IS_NOT_REGISTERED, 
                    RMS_API_CONNECTION
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ConnectionTest")]
    public partial class ConnectionTest
    {
        private bool success;
        private string message;
        private ConnectionTestType connectionTestType;
        private ConnectionFailReason connectionFailReason;
        private IikoBizRegistrationDto iikoBizRegistrationInfo;

        public ConnectionTest() {}

        public ConnectionTest(bool success, string message, ConnectionTestType connectionTestType, ConnectionFailReason connectionFailReason, IikoBizRegistrationDto iikoBizRegistrationInfo)
        {
            this.success = success;
            this.message = message;
            this.connectionTestType = connectionTestType;
            this.connectionFailReason = connectionFailReason;
            this.iikoBizRegistrationInfo = iikoBizRegistrationInfo;
        }
        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

        public ConnectionTestType ConnectionTestType
        {
            get { return connectionTestType; }
            set { connectionTestType = value; }
        }

        public ConnectionFailReason ConnectionFailReason
        {
            get { return connectionFailReason; }
            set { connectionFailReason = value; }
        }

        public IikoBizRegistrationDto IikoBizRegistrationInfo
        {
            get { return iikoBizRegistrationInfo; }
            set { iikoBizRegistrationInfo = value; }
        }

    }

    [DataClass("ConnectionTestDto")]
    public partial class ConnectionTestDto
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ConnectionTest> connectionTests = new List<ConnectionTest>();
        private string crmId;

        public ConnectionTestDto() {}

        public ConnectionTestDto(string crmId)
        {
            this.crmId = crmId;
        }
        [NotNull]
        public List<ConnectionTest> ConnectionTests
        {
            get { return connectionTests; }
        }

        public string CrmId
        {
            get { return crmId; }
            set { crmId = value; }
        }

    }

    [DataClass("ConnectionTestType")]
    public enum ConnectionTestType
    {
        CRM_ID_CHECK,
        HARDWARE_ID_CHECK,
        IIKO_BIZ_EXCHANGE,
        CONSUMERS_HEALTH,
        RABBIT_MQ_CONNECTION,
        NOMENCLATURE_UPLOAD,
        CUSTOMER_EXCHANGE,
        CITIES_STREETS_REGIONS_UPLOAD
    }

    [DataClass("AmountPercent")]
    public partial class AmountPercent
    {
        private decimal? amount;
        private decimal? value;

        protected AmountPercent() {}

        public AmountPercent(decimal? amount, decimal? value)
        {
            this.amount = amount;
            this.value = value;
        }
        public decimal? Amount
        {
            get { return amount; }
            set { amount = value; }
        }

        public decimal? Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("CalculationType")]
    [EnumClass]
    public partial class CalculationType : LocalizableName<CalculationType>
    {
        /// <summary> сумма. </summary>
        public static readonly CalculationType FIXED = new CalculationType("FIXED");
        /// <summary> % от суммы. </summary>
        public static readonly CalculationType PERCENT = new CalculationType("PERCENT");

        private readonly string __value;
        private readonly string __nameResId;

        private CalculationType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CALCULATIONTYPE_NAME_" + __value;
        }

        public static CalculationType Parse(string value)
        {
            switch(value)
            {
                case "FIXED": return FIXED;
                case "PERCENT": return PERCENT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CalculationType[] VALUES
        {
            get
            {
                return new []
                {
                    FIXED, 
                    PERCENT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CompensationType")]
    [EnumClass]
    public partial class CompensationType : LocalizableName<CompensationType>
    {
        /// <summary> Фиксированная компенсация. </summary>
        public static readonly CompensationType FIXED_PAYMENT = new CompensationType("FIXED_PAYMENT");
        /// <summary> По выручке. </summary>
        public static readonly CompensationType REVENUE_LEVEL = new CompensationType("REVENUE_LEVEL");
        /// <summary> По количеству. </summary>
        public static readonly CompensationType QUANTITY = new CompensationType("QUANTITY");

        private readonly string __value;
        private readonly string __nameResId;

        private CompensationType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "COMPENSATIONTYPE_NAME_" + __value;
        }

        public static CompensationType Parse(string value)
        {
            switch(value)
            {
                case "FIXED_PAYMENT": return FIXED_PAYMENT;
                case "REVENUE_LEVEL": return REVENUE_LEVEL;
                case "QUANTITY": return QUANTITY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CompensationType[] VALUES
        {
            get
            {
                return new []
                {
                    FIXED_PAYMENT, 
                    REVENUE_LEVEL, 
                    QUANTITY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("DistributionType")]
    [EnumClass]
    public partial class DistributionType : LocalizableName<DistributionType>
    {
        /// <summary> начислять каждому. </summary>
        public static readonly DistributionType EVERYONE = new DistributionType("EVERYONE");
        /// <summary> распределять между участниками. </summary>
        public static readonly DistributionType UNIFORM = new DistributionType("UNIFORM");

        private readonly string __value;
        private readonly string __nameResId;

        private DistributionType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "DISTRIBUTIONTYPE_NAME_" + __value;
        }

        public static DistributionType Parse(string value)
        {
            switch(value)
            {
                case "EVERYONE": return EVERYONE;
                case "UNIFORM": return UNIFORM;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static DistributionType[] VALUES
        {
            get
            {
                return new []
                {
                    EVERYONE, 
                    UNIFORM
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [RootEntity]
    [DataClass("IncentiveProgram")]
    public partial class IncentiveProgram : LocalizableNamePersistedEntity
    {
        private string comment;
        private bool active;
        [HasDefaultValue]
        private bool informational = false;
        private SearchInfo searchInfo;
        private HashSet<User> employees;
        private HashSet<Role> selectedRoles;
        private DateTime? availableFrom;
        private DateTime? availableTo;
        private IncentiveType incentiveType;
        private HashSet<CookingPlaceType> cookingPlaces;
        private HashSet<RestaurantSection> restaurantSections;
        private HashSet<Conception> conceptions;
        private CalculationType calculationType;
        private CompensationType compensationType;
        private decimal? fixedCompensationValue;
        private RevenueCalculationType revenueCalculationType;
        private RevenueKpiType revenueKpiType;
        private DistributionType distributionType;
        private bool revenuePayOnce;
        private DateTime? revenueStartDate;
        private DateTime? revenueEndDate;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<decimal, decimal> revenueCompensationMap = new Dictionary<decimal, decimal>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<decimal, string> revenueLevelNames = new Dictionary<decimal, string>();
        private bool revenueAmountTypeFrom;
        private bool quantityPayOnce;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Object, AmountPercent> quantityCompensationMap = new Dictionary<Object, AmountPercent>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Department> departments = new HashSet<Department>();
        private HashSet<PaymentType> paymentTypes;
        private IncentiveProgram mainProgram;
        private TimeConstraintType timeConstraintType;
        private DiscountPeriod timeConstraintPeriod;

        protected IncentiveProgram() {}

        public IncentiveProgram(Guid id, LocalizableValue name, string comment, bool active, SearchInfo searchInfo, DateTime? availableFrom, DateTime? availableTo, IncentiveType incentiveType, CalculationType calculationType, CompensationType compensationType, decimal? fixedCompensationValue, RevenueCalculationType revenueCalculationType, RevenueKpiType revenueKpiType, DistributionType distributionType, bool revenuePayOnce, DateTime? revenueStartDate, DateTime? revenueEndDate, bool revenueAmountTypeFrom, bool quantityPayOnce)
            : base(id, name)
        {
            this.comment = comment;
            this.active = active;
            this.searchInfo = searchInfo;
            this.availableFrom = availableFrom;
            this.availableTo = availableTo;
            this.incentiveType = incentiveType;
            this.calculationType = calculationType;
            this.compensationType = compensationType;
            this.fixedCompensationValue = fixedCompensationValue;
            this.revenueCalculationType = revenueCalculationType;
            this.revenueKpiType = revenueKpiType;
            this.distributionType = distributionType;
            this.revenuePayOnce = revenuePayOnce;
            this.revenueStartDate = revenueStartDate;
            this.revenueEndDate = revenueEndDate;
            this.revenueAmountTypeFrom = revenueAmountTypeFrom;
            this.quantityPayOnce = quantityPayOnce;
        }

        public IncentiveProgram(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }

        public string Comment
        {
            get { return comment; }
            set { comment = value; }
        }

        public bool Active
        {
            get { return active; }
            set { active = value; }
        }

        public bool Informational
        {
            get { return informational; }
            set { informational = value; }
        }

        public SearchInfo SearchInfo
        {
            get { return searchInfo; }
            set { searchInfo = value; }
        }

        public HashSet<User> Employees
        {
            get { return employees; }
            set { employees = value; }
        }

        public HashSet<Role> SelectedRoles
        {
            get { return selectedRoles; }
            set { selectedRoles = value; }
        }

        public DateTime? AvailableFrom
        {
            get { return availableFrom; }
            set { availableFrom = value; }
        }

        public DateTime? AvailableTo
        {
            get { return availableTo; }
            set { availableTo = value; }
        }

        public IncentiveType IncentiveType
        {
            get { return incentiveType; }
            set { incentiveType = value; }
        }

        public HashSet<CookingPlaceType> CookingPlaces
        {
            get { return cookingPlaces; }
            set { cookingPlaces = value; }
        }

        public HashSet<RestaurantSection> RestaurantSections
        {
            get { return restaurantSections; }
            set { restaurantSections = value; }
        }

        [CanBeNull]
        public HashSet<Conception> Conceptions
        {
            get { return conceptions; }
            set { conceptions = value; }
        }

        public CalculationType CalculationType
        {
            get { return calculationType; }
            set { calculationType = value; }
        }

        public CompensationType CompensationType
        {
            get { return compensationType; }
            set { compensationType = value; }
        }

        public decimal? FixedCompensationValue
        {
            get { return fixedCompensationValue; }
            set { fixedCompensationValue = value; }
        }

        public RevenueCalculationType RevenueCalculationType
        {
            get { return revenueCalculationType; }
            set { revenueCalculationType = value; }
        }

        public RevenueKpiType RevenueKpiType
        {
            get { return revenueKpiType; }
            set { revenueKpiType = value; }
        }

        public DistributionType DistributionType
        {
            get { return distributionType; }
            set { distributionType = value; }
        }

        public bool RevenuePayOnce
        {
            get { return revenuePayOnce; }
            set { revenuePayOnce = value; }
        }

        public DateTime? RevenueStartDate
        {
            get { return revenueStartDate; }
            set { revenueStartDate = value; }
        }

        public DateTime? RevenueEndDate
        {
            get { return revenueEndDate; }
            set { revenueEndDate = value; }
        }

        [NotNull]
        public Dictionary<decimal, decimal> RevenueCompensationMap
        {
            get { return revenueCompensationMap; }
        }

        [NotNull]
        public Dictionary<decimal, string> RevenueLevelNames
        {
            get { return revenueLevelNames; }
        }

        public bool RevenueAmountTypeFrom
        {
            get { return revenueAmountTypeFrom; }
            set { revenueAmountTypeFrom = value; }
        }

        public bool QuantityPayOnce
        {
            get { return quantityPayOnce; }
            set { quantityPayOnce = value; }
        }

        [NotNull]
        public Dictionary<Object, AmountPercent> QuantityCompensationMap
        {
            get { return quantityCompensationMap; }
        }

        [NotNull]
        public HashSet<Department> Departments
        {
            get { return departments; }
        }

        [CanBeNull]
        public HashSet<PaymentType> PaymentTypes
        {
            get { return paymentTypes; }
            set { paymentTypes = value; }
        }

        [CanBeNull]
        public IncentiveProgram MainProgram
        {
            get { return mainProgram; }
            set { mainProgram = value; }
        }

        [CanBeNull]
        public TimeConstraintType TimeConstraintType
        {
            get { return timeConstraintType; }
            set { timeConstraintType = value; }
        }

        [CanBeNull]
        public DiscountPeriod TimeConstraintPeriod
        {
            get { return timeConstraintPeriod; }
            set { timeConstraintPeriod = value; }
        }

    }

    [DataClass("IncentiveType")]
    [EnumClass]
    public partial class IncentiveType : LocalizableName<IncentiveType>
    {
        /// <summary> Личные продажи. </summary>
        public static readonly IncentiveType PERSONAL_REVENUE = new IncentiveType("PERSONAL_REVENUE");
        /// <summary> Продажи по типу места приготовления. </summary>
        public static readonly IncentiveType COOKING_PLACE_TYPE_REVENUE = new IncentiveType("COOKING_PLACE_TYPE_REVENUE");
        /// <summary> За заказ. </summary>
        public static readonly IncentiveType ORDER = new IncentiveType("ORDER");
        /// <summary> Курьер заказа. </summary>
        public static readonly IncentiveType COURIER_ORDER = new IncentiveType("COURIER_ORDER");

        private readonly string __value;
        private readonly string __nameResId;

        private IncentiveType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "INCENTIVETYPE_NAME_" + __value;
        }

        public static IncentiveType Parse(string value)
        {
            switch(value)
            {
                case "PERSONAL_REVENUE": return PERSONAL_REVENUE;
                case "COOKING_PLACE_TYPE_REVENUE": return COOKING_PLACE_TYPE_REVENUE;
                case "ORDER": return ORDER;
                case "COURIER_ORDER": return COURIER_ORDER;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static IncentiveType[] VALUES
        {
            get
            {
                return new []
                {
                    PERSONAL_REVENUE, 
                    COOKING_PLACE_TYPE_REVENUE, 
                    ORDER, 
                    COURIER_ORDER
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("RevenueCalculationType")]
    [EnumClass]
    public partial class RevenueCalculationType : LocalizableName<RevenueCalculationType>
    {
        /// <summary> За период. </summary>
        public static readonly RevenueCalculationType PERIOD = new RevenueCalculationType("PERIOD");
        /// <summary> За кассовую смену. </summary>
        public static readonly RevenueCalculationType SHIFT = new RevenueCalculationType("SHIFT");
        /// <summary> За все время. </summary>
        public static readonly RevenueCalculationType ALL = new RevenueCalculationType("ALL");
        /// <summary> За месяц. </summary>
        public static readonly RevenueCalculationType MONTH = new RevenueCalculationType("MONTH");

        private readonly string __value;
        private readonly string __nameResId;

        private RevenueCalculationType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "REVENUECALCULATIONTYPE_NAME_" + __value;
        }

        public static RevenueCalculationType Parse(string value)
        {
            switch(value)
            {
                case "PERIOD": return PERIOD;
                case "SHIFT": return SHIFT;
                case "ALL": return ALL;
                case "MONTH": return MONTH;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RevenueCalculationType[] VALUES
        {
            get
            {
                return new []
                {
                    PERIOD, 
                    SHIFT, 
                    ALL, 
                    MONTH
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("RevenueKpiType")]
    [EnumClass]
    public partial class RevenueKpiType : LocalizableName<RevenueKpiType>
    {
        /// <summary> полная выручка. </summary>
        public static readonly RevenueKpiType DIRECT_REVENUE = new RevenueKpiType("DIRECT_REVENUE");
        /// <summary> выручка в час. </summary>
        public static readonly RevenueKpiType REVENUE_PER_HOUR = new RevenueKpiType("REVENUE_PER_HOUR");
        /// <summary> % от всей выручки. </summary>
        public static readonly RevenueKpiType PERCENT_OF_TOTAL_REVENUE = new RevenueKpiType("PERCENT_OF_TOTAL_REVENUE");

        private readonly string __value;
        private readonly string __nameResId;

        private RevenueKpiType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "REVENUEKPITYPE_NAME_" + __value;
        }

        public static RevenueKpiType Parse(string value)
        {
            switch(value)
            {
                case "DIRECT_REVENUE": return DIRECT_REVENUE;
                case "REVENUE_PER_HOUR": return REVENUE_PER_HOUR;
                case "PERCENT_OF_TOTAL_REVENUE": return PERCENT_OF_TOTAL_REVENUE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RevenueKpiType[] VALUES
        {
            get
            {
                return new []
                {
                    DIRECT_REVENUE, 
                    REVENUE_PER_HOUR, 
                    PERCENT_OF_TOTAL_REVENUE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("SearchInfo")]
    public partial class SearchInfo
    {
        private SearchType searchType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<Object> elements = new HashSet<Object>();

        public SearchInfo() {}

        public SearchInfo(SearchType searchType)
        {
            this.searchType = searchType;
        }
        public SearchType SearchType
        {
            get { return searchType; }
            set { searchType = value; }
        }

        [NotNull]
        public HashSet<Object> Elements
        {
            get { return elements; }
        }

    }

    [DataClass("SearchType")]
    [EnumClass]
    public partial class SearchType : LocalizableName<SearchType>
    {
        /// <summary> Позиция. </summary>
        public static readonly SearchType PRODUCT = new SearchType("PRODUCT");
        /// <summary> Группа. </summary>
        public static readonly SearchType GROUP = new SearchType("GROUP");
        /// <summary> Категория. </summary>
        public static readonly SearchType CATEGORY = new SearchType("CATEGORY");
        /// <summary> Все меню. </summary>
        public static readonly SearchType ALL_MENU = new SearchType("ALL_MENU");

        private readonly string __value;
        private readonly string __nameResId;

        private SearchType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SEARCHTYPE_NAME_" + __value;
        }

        public static SearchType Parse(string value)
        {
            switch(value)
            {
                case "PRODUCT": return PRODUCT;
                case "GROUP": return GROUP;
                case "CATEGORY": return CATEGORY;
                case "ALL_MENU": return ALL_MENU;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SearchType[] VALUES
        {
            get
            {
                return new []
                {
                    PRODUCT, 
                    GROUP, 
                    CATEGORY, 
                    ALL_MENU
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("SessionRevenueEntry")]
    public partial class SessionRevenueEntry : SimpleDepartmentableEntity
    {
        private DepartmentEntity department;
        [NotNull, NotNullField]
        private User employee;
        [NotNull, NotNullField]
        private IncentiveProgram program;
        [NotNull, NotNullField]
        private CloseSessionEvent closeEvent;
        private decimal? revenue;
        private decimal? revenueUnfiltered;
        private decimal? workedMinutes;

        protected SessionRevenueEntry() {}

        public SessionRevenueEntry(Guid id, DepartmentEntity department, User employee, IncentiveProgram program, CloseSessionEvent closeEvent, decimal? revenue, decimal? revenueUnfiltered, decimal? workedMinutes)
            : base(id)
        {
            this.department = department;
            this.employee = employee;
            this.program = program;
            this.closeEvent = closeEvent;
            this.revenue = revenue;
            this.revenueUnfiltered = revenueUnfiltered;
            this.workedMinutes = workedMinutes;
        }

        public SessionRevenueEntry(Guid id, User employee, IncentiveProgram program, CloseSessionEvent closeEvent)
            : base(id)
        {
            this.employee = employee;
            this.program = program;
            this.closeEvent = closeEvent;
        }

        public DepartmentEntity Department
        {
            get { return department; }
            set { department = value; }
        }

        [NotNull]
        public User Employee
        {
            get { return employee; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  employee = value;
            }
        }

        [NotNull]
        public IncentiveProgram Program
        {
            get { return program; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  program = value;
            }
        }

        [NotNull]
        public CloseSessionEvent CloseEvent
        {
            get { return closeEvent; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  closeEvent = value;
            }
        }

        public decimal? Revenue
        {
            get { return revenue; }
            set { revenue = value; }
        }

        public decimal? RevenueUnfiltered
        {
            get { return revenueUnfiltered; }
            set { revenueUnfiltered = value; }
        }

        public decimal? WorkedMinutes
        {
            get { return workedMinutes; }
            set { workedMinutes = value; }
        }

    }

    [DataClass("TimeConstraintType")]
    [EnumClass]
    public partial class TimeConstraintType : LocalizableName<TimeConstraintType>
    {
        /// <summary> Время добавления блюда в заказ. </summary>
        public static readonly TimeConstraintType DISH_ADDED_TO_ORDER = new TimeConstraintType("DISH_ADDED_TO_ORDER");
        /// <summary> Время закрытия заказа. </summary>
        public static readonly TimeConstraintType ORDER_CLOSED = new TimeConstraintType("ORDER_CLOSED");
        /// <summary> Время создания заказа. </summary>
        public static readonly TimeConstraintType ORDER_CREATED = new TimeConstraintType("ORDER_CREATED");
        /// <summary> Время доставки заказа. </summary>
        public static readonly TimeConstraintType ORDER_DELIVERED = new TimeConstraintType("ORDER_DELIVERED");

        private readonly string __value;
        private readonly string __nameResId;

        private TimeConstraintType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TIMECONSTRAINTTYPE_NAME_" + __value;
        }

        public static TimeConstraintType Parse(string value)
        {
            switch(value)
            {
                case "DISH_ADDED_TO_ORDER": return DISH_ADDED_TO_ORDER;
                case "ORDER_CLOSED": return ORDER_CLOSED;
                case "ORDER_CREATED": return ORDER_CREATED;
                case "ORDER_DELIVERED": return ORDER_DELIVERED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TimeConstraintType[] VALUES
        {
            get
            {
                return new []
                {
                    DISH_ADDED_TO_ORDER, 
                    ORDER_CLOSED, 
                    ORDER_CREATED, 
                    ORDER_DELIVERED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("ProgramDescription")]
    public partial class ProgramDescription
    {
        private IncentiveProgram program;
        private CloseSessionEvent sessionEvent;
        private decimal? sum;
        private string formula;
        private decimal? revenueLastLevelSum;
        private decimal? workedMinutes;
        private decimal? workedMinutesTotal;
        private string revenueLastLevelName;
        private bool anyLevelReached;

        public ProgramDescription() {}

        public ProgramDescription(IncentiveProgram program, CloseSessionEvent sessionEvent, decimal? sum, string formula, decimal? revenueLastLevelSum, decimal? workedMinutes, decimal? workedMinutesTotal, string revenueLastLevelName, bool anyLevelReached)
        {
            this.program = program;
            this.sessionEvent = sessionEvent;
            this.sum = sum;
            this.formula = formula;
            this.revenueLastLevelSum = revenueLastLevelSum;
            this.workedMinutes = workedMinutes;
            this.workedMinutesTotal = workedMinutesTotal;
            this.revenueLastLevelName = revenueLastLevelName;
            this.anyLevelReached = anyLevelReached;
        }
        public IncentiveProgram Program
        {
            get { return program; }
            set { program = value; }
        }

        public CloseSessionEvent SessionEvent
        {
            get { return sessionEvent; }
            set { sessionEvent = value; }
        }

        public decimal? Sum
        {
            get { return sum; }
            set { sum = value; }
        }

        public string Formula
        {
            get { return formula; }
            set { formula = value; }
        }

        public decimal? RevenueLastLevelSum
        {
            get { return revenueLastLevelSum; }
            set { revenueLastLevelSum = value; }
        }

        public decimal? WorkedMinutes
        {
            get { return workedMinutes; }
            set { workedMinutes = value; }
        }

        public decimal? WorkedMinutesTotal
        {
            get { return workedMinutesTotal; }
            set { workedMinutesTotal = value; }
        }

        public string RevenueLastLevelName
        {
            get { return revenueLastLevelName; }
            set { revenueLastLevelName = value; }
        }

        public bool AnyLevelReached
        {
            get { return anyLevelReached; }
            set { anyLevelReached = value; }
        }

    }

    [DataClass("GetConnectionResult")]
    public partial class GetConnectionResult
    {
        private Guid? connectionId;
        private string errorMessage;
        private bool isSuccess;
        private int? moduleId;

        protected GetConnectionResult() {}

        public GetConnectionResult(Guid? connectionId, string errorMessage, bool isSuccess, int? moduleId)
        {
            this.connectionId = connectionId;
            this.errorMessage = errorMessage;
            this.isSuccess = isSuccess;
            this.moduleId = moduleId;
        }
        public Guid? ConnectionId
        {
            get { return connectionId; }
            set { connectionId = value; }
        }

        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }

        public bool IsSuccess
        {
            get { return isSuccess; }
            set { isSuccess = value; }
        }

        public int? ModuleId
        {
            get { return moduleId; }
            set { moduleId = value; }
        }

    }

    [DataClass("IikoBizRegistrationInfo")]
    public partial class IikoBizRegistrationInfo
    {
        private string hwId;
        private string companyName;
        private string userName;
        private string userEmail;
        private string phone;
        private string password;

        public IikoBizRegistrationInfo() {}

        public IikoBizRegistrationInfo(string hwId, string companyName, string userName, string userEmail, string phone, string password)
        {
            this.hwId = hwId;
            this.companyName = companyName;
            this.userName = userName;
            this.userEmail = userEmail;
            this.phone = phone;
            this.password = password;
        }
        public string HwId
        {
            get { return hwId; }
            set { hwId = value; }
        }

        public string CompanyName
        {
            get { return companyName; }
            set { companyName = value; }
        }

        public string UserName
        {
            get { return userName; }
            set { userName = value; }
        }

        public string UserEmail
        {
            get { return userEmail; }
            set { userEmail = value; }
        }

        public string Phone
        {
            get { return phone; }
            set { phone = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

    }

    [DataClass("LicenseConnectionRequest")]
    public partial class LicenseConnectionRequest
    {
        private Guid connectionId;
        private int moduleId;
        private string tag;

        protected LicenseConnectionRequest() {}

        public LicenseConnectionRequest(Guid connectionId, int moduleId, string tag)
        {
            this.connectionId = connectionId;
            this.moduleId = moduleId;
            this.tag = tag;
        }

        public LicenseConnectionRequest(Guid connectionId)
        {
            this.connectionId = connectionId;
        }

        public Guid ConnectionId
        {
            get { return connectionId; }
            set { connectionId = value; }
        }

        public int ModuleId
        {
            get { return moduleId; }
            set { moduleId = value; }
        }

        public string Tag
        {
            get { return tag; }
            set { tag = value; }
        }

    }

    [DataClass("LicenseConnectionResponse")]
    public partial class LicenseConnectionResponse
    {
        private LicenseConnectionResultType type;
        private int? rejectedModuleId;

        protected LicenseConnectionResponse() {}

        public LicenseConnectionResponse(LicenseConnectionResultType type, int? rejectedModuleId)
        {
            this.type = type;
            this.rejectedModuleId = rejectedModuleId;
        }
        public LicenseConnectionResultType Type
        {
            get { return type; }
            set { type = value; }
        }

        public int? RejectedModuleId
        {
            get { return rejectedModuleId; }
            set { rejectedModuleId = value; }
        }

    }

    [DataClass("LicenseConnectionResultType")]
    public enum LicenseConnectionResultType
    {
        SUCCESS,
        UNLICENSED,
        EXPIRED,
        EXCEEDED
    }

    [DataClass("LicenseInfoResult")]
    public partial class LicenseInfoResult
    {
        private int licenseHash;
        private string licenseData;
        private int stateHash;
        private string stateData;
        private DateTime? validTill;

        public LicenseInfoResult() {}

        public LicenseInfoResult(int licenseHash, string licenseData, int stateHash, string stateData, DateTime? validTill)
        {
            this.licenseHash = licenseHash;
            this.licenseData = licenseData;
            this.stateHash = stateHash;
            this.stateData = stateData;
            this.validTill = validTill;
        }
        public int LicenseHash
        {
            get { return licenseHash; }
            set { licenseHash = value; }
        }

        public string LicenseData
        {
            get { return licenseData; }
            set { licenseData = value; }
        }

        public int StateHash
        {
            get { return stateHash; }
            set { stateHash = value; }
        }

        public string StateData
        {
            get { return stateData; }
            set { stateData = value; }
        }

        public DateTime? ValidTill
        {
            get { return validTill; }
            set { validTill = value; }
        }

    }

    [DataClass("LicenseStatus")]
    public enum LicenseStatus
    {
        MISSED,
        OK,
        CORRUPTED,
        NOT_VALID,
        EXPIRED
    }

    [DataClass("LicensingState")]
    public partial class LicensingState
    {
        private LicenseStatus licenseStatus;
        private OnlineLicensingResponse lastResponse;
        private OnlineLicensingState onlineState;

        public LicensingState() {}

        public LicensingState(LicenseStatus licenseStatus, OnlineLicensingResponse lastResponse, OnlineLicensingState onlineState)
        {
            this.licenseStatus = licenseStatus;
            this.lastResponse = lastResponse;
            this.onlineState = onlineState;
        }
        public LicenseStatus LicenseStatus
        {
            get { return licenseStatus; }
            set { licenseStatus = value; }
        }

        public OnlineLicensingResponse LastResponse
        {
            get { return lastResponse; }
            set { lastResponse = value; }
        }

        public OnlineLicensingState OnlineState
        {
            get { return onlineState; }
            set { onlineState = value; }
        }

    }

    [DataClass("RegionalFeatureId")]
    [EnumClass]
    public partial class RegionalFeatureId
    {
        public static readonly RegionalFeatureId MERCURY = new RegionalFeatureId("MERCURY", 0, true);
        public static readonly RegionalFeatureId ALCOHOL_DECLARATION = new RegionalFeatureId("ALCOHOL_DECLARATION", 1, true);
        public static readonly RegionalFeatureId EGAIS = new RegionalFeatureId("EGAIS", 2, true);
        public static readonly RegionalFeatureId TAXATION = new RegionalFeatureId("TAXATION", 3, true);
        public static readonly RegionalFeatureId KLADR = new RegionalFeatureId("KLADR", 4, true);
        public static readonly RegionalFeatureId ENFORCE_GDPR = new RegionalFeatureId("ENFORCE_GDPR", 5, false);
        public static readonly RegionalFeatureId ENFORCE_BELARUS_FISCALIZATION = new RegionalFeatureId("ENFORCE_BELARUS_FISCALIZATION", 6, false);
        public static readonly RegionalFeatureId ENFORCE_TRANFER_ORDERS_ON_SESSION_CLOSE = new RegionalFeatureId("ENFORCE_TRANFER_ORDERS_ON_SESSION_CLOSE", 7, false);
        public static readonly RegionalFeatureId ENFORCE_FZ54_PRODUCT_ITEM_CATEGORY = new RegionalFeatureId("ENFORCE_FZ54_PRODUCT_ITEM_CATEGORY", 8, true);
        public static readonly RegionalFeatureId RESERVED_FOR_COUNTRY_MAPPING = new RegionalFeatureId("RESERVED_FOR_COUNTRY_MAPPING", 9, false);
        public static readonly RegionalFeatureId ENFORCE_FZ54_PAYMENT_METHOD = new RegionalFeatureId("ENFORCE_FZ54_PAYMENT_METHOD", 10, true);
        public static readonly RegionalFeatureId ENFORCE_OUTER_ECONOMIC_ACTIVITY_NOMENCLATURE_CODE = new RegionalFeatureId("ENFORCE_OUTER_ECONOMIC_ACTIVITY_NOMENCLATURE_CODE", 11, true);
        public static readonly RegionalFeatureId ZERO_CHEQUE_FISCALIZATION = new RegionalFeatureId("ZERO_CHEQUE_FISCALIZATION", 12, false);
        public static readonly RegionalFeatureId UAE_ADDRESSING_SYSTEM = new RegionalFeatureId("UAE_ADDRESSING_SYSTEM", 13, false);
        public static readonly RegionalFeatureId GDPR_CONSENT_REQUIRED = new RegionalFeatureId("GDPR_CONSENT_REQUIRED", 14, false);
        public static readonly RegionalFeatureId GDPR_CONSENT_BY_DEFAULT = new RegionalFeatureId("GDPR_CONSENT_BY_DEFAULT", 15, false);
        public static readonly RegionalFeatureId CASH_REGISTER_STORNING_IS_DISALLOWED = new RegionalFeatureId("CASH_REGISTER_STORNING_IS_DISALLOWED", 16, false);
        public static readonly RegionalFeatureId UZ_CASH_REGISTER_REQUIREMENTS = new RegionalFeatureId("UZ_CASH_REGISTER_REQUIREMENTS", 17, false);
        public static readonly RegionalFeatureId GOSCOMSTAT_PRINT_FORMS = new RegionalFeatureId("GOSCOMSTAT_PRINT_FORMS", 18, true);
        public static readonly RegionalFeatureId IT_EINVOICE = new RegionalFeatureId("IT_EINVOICE", 19, false);
        public static readonly RegionalFeatureId DISABLE_PRINTED_BILL = new RegionalFeatureId("DISABLE_PRINTED_BILL", 20, false);
        public static readonly RegionalFeatureId LIMIT_USER_SETTINGS_ACCESS = new RegionalFeatureId("LIMIT_USER_SETTINGS_ACCESS", 21, false);
        public static readonly RegionalFeatureId FORBID_BUYING_FROM_CASHDESK = new RegionalFeatureId("FORBID_BUYING_FROM_CASHDESK", 22, false);
        public static readonly RegionalFeatureId DELETE_ORDERS_USING_ZERO_PAYMENT = new RegionalFeatureId("DELETE_ORDERS_USING_ZERO_PAYMENT", 23, false);
        public static readonly RegionalFeatureId ENFORCE_FRANCE_FISCALIZATION = new RegionalFeatureId("ENFORCE_FRANCE_FISCALIZATION", 24, false);
        public static readonly RegionalFeatureId ENFORCE_UKRAINE_FISCALIZATION = new RegionalFeatureId("ENFORCE_UKRAINE_FISCALIZATION", 25, false);
        public static readonly RegionalFeatureId SPLIT_BILL_BETWEEN_GUESTS = new RegionalFeatureId("SPLIT_BILL_BETWEEN_GUESTS", 26, false);
        public static readonly RegionalFeatureId PREPAID_ORDERS_RETURN_SPECIFICS = new RegionalFeatureId("PREPAID_ORDERS_RETURN_SPECIFICS", 27, false);
        public static readonly RegionalFeatureId USE_CALCULATED_PREPAY_TAX_CATEGORY = new RegionalFeatureId("USE_CALCULATED_PREPAY_TAX_CATEGORY", 28, false);
        public static readonly RegionalFeatureId USE_NONFISCAL_CASH_DURING_CASH_RECONCILIATION = new RegionalFeatureId("USE_NONFISCAL_CASH_DURING_CASH_RECONCILIATION", 29, false);
        public static readonly RegionalFeatureId CAN_FISCALIZE_AS_DISCOUNT = new RegionalFeatureId("CAN_FISCALIZE_AS_DISCOUNT", 30, false);

        private readonly int index;
        private readonly bool enabledWhenModuleIsMissing;
        private readonly string __value;

        private RegionalFeatureId(string __value, int index, bool enabledWhenModuleIsMissing)
        {
            this.__value = __value;
            this.index = index;
            this.enabledWhenModuleIsMissing = enabledWhenModuleIsMissing;
        }

        public static RegionalFeatureId Parse(string value)
        {
            switch(value)
            {
                case "MERCURY": return MERCURY;
                case "ALCOHOL_DECLARATION": return ALCOHOL_DECLARATION;
                case "EGAIS": return EGAIS;
                case "TAXATION": return TAXATION;
                case "KLADR": return KLADR;
                case "ENFORCE_GDPR": return ENFORCE_GDPR;
                case "ENFORCE_BELARUS_FISCALIZATION": return ENFORCE_BELARUS_FISCALIZATION;
                case "ENFORCE_TRANFER_ORDERS_ON_SESSION_CLOSE": return ENFORCE_TRANFER_ORDERS_ON_SESSION_CLOSE;
                case "ENFORCE_FZ54_PRODUCT_ITEM_CATEGORY": return ENFORCE_FZ54_PRODUCT_ITEM_CATEGORY;
                case "RESERVED_FOR_COUNTRY_MAPPING": return RESERVED_FOR_COUNTRY_MAPPING;
                case "ENFORCE_FZ54_PAYMENT_METHOD": return ENFORCE_FZ54_PAYMENT_METHOD;
                case "ENFORCE_OUTER_ECONOMIC_ACTIVITY_NOMENCLATURE_CODE": return ENFORCE_OUTER_ECONOMIC_ACTIVITY_NOMENCLATURE_CODE;
                case "ZERO_CHEQUE_FISCALIZATION": return ZERO_CHEQUE_FISCALIZATION;
                case "UAE_ADDRESSING_SYSTEM": return UAE_ADDRESSING_SYSTEM;
                case "GDPR_CONSENT_REQUIRED": return GDPR_CONSENT_REQUIRED;
                case "GDPR_CONSENT_BY_DEFAULT": return GDPR_CONSENT_BY_DEFAULT;
                case "CASH_REGISTER_STORNING_IS_DISALLOWED": return CASH_REGISTER_STORNING_IS_DISALLOWED;
                case "UZ_CASH_REGISTER_REQUIREMENTS": return UZ_CASH_REGISTER_REQUIREMENTS;
                case "GOSCOMSTAT_PRINT_FORMS": return GOSCOMSTAT_PRINT_FORMS;
                case "IT_EINVOICE": return IT_EINVOICE;
                case "DISABLE_PRINTED_BILL": return DISABLE_PRINTED_BILL;
                case "LIMIT_USER_SETTINGS_ACCESS": return LIMIT_USER_SETTINGS_ACCESS;
                case "FORBID_BUYING_FROM_CASHDESK": return FORBID_BUYING_FROM_CASHDESK;
                case "DELETE_ORDERS_USING_ZERO_PAYMENT": return DELETE_ORDERS_USING_ZERO_PAYMENT;
                case "ENFORCE_FRANCE_FISCALIZATION": return ENFORCE_FRANCE_FISCALIZATION;
                case "ENFORCE_UKRAINE_FISCALIZATION": return ENFORCE_UKRAINE_FISCALIZATION;
                case "SPLIT_BILL_BETWEEN_GUESTS": return SPLIT_BILL_BETWEEN_GUESTS;
                case "PREPAID_ORDERS_RETURN_SPECIFICS": return PREPAID_ORDERS_RETURN_SPECIFICS;
                case "USE_CALCULATED_PREPAY_TAX_CATEGORY": return USE_CALCULATED_PREPAY_TAX_CATEGORY;
                case "USE_NONFISCAL_CASH_DURING_CASH_RECONCILIATION": return USE_NONFISCAL_CASH_DURING_CASH_RECONCILIATION;
                case "CAN_FISCALIZE_AS_DISCOUNT": return CAN_FISCALIZE_AS_DISCOUNT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RegionalFeatureId[] VALUES
        {
            get
            {
                return new []
                {
                    MERCURY, 
                    ALCOHOL_DECLARATION, 
                    EGAIS, 
                    TAXATION, 
                    KLADR, 
                    ENFORCE_GDPR, 
                    ENFORCE_BELARUS_FISCALIZATION, 
                    ENFORCE_TRANFER_ORDERS_ON_SESSION_CLOSE, 
                    ENFORCE_FZ54_PRODUCT_ITEM_CATEGORY, 
                    RESERVED_FOR_COUNTRY_MAPPING, 
                    ENFORCE_FZ54_PAYMENT_METHOD, 
                    ENFORCE_OUTER_ECONOMIC_ACTIVITY_NOMENCLATURE_CODE, 
                    ZERO_CHEQUE_FISCALIZATION, 
                    UAE_ADDRESSING_SYSTEM, 
                    GDPR_CONSENT_REQUIRED, 
                    GDPR_CONSENT_BY_DEFAULT, 
                    CASH_REGISTER_STORNING_IS_DISALLOWED, 
                    UZ_CASH_REGISTER_REQUIREMENTS, 
                    GOSCOMSTAT_PRINT_FORMS, 
                    IT_EINVOICE, 
                    DISABLE_PRINTED_BILL, 
                    LIMIT_USER_SETTINGS_ACCESS, 
                    FORBID_BUYING_FROM_CASHDESK, 
                    DELETE_ORDERS_USING_ZERO_PAYMENT, 
                    ENFORCE_FRANCE_FISCALIZATION, 
                    ENFORCE_UKRAINE_FISCALIZATION, 
                    SPLIT_BILL_BETWEEN_GUESTS, 
                    PREPAID_ORDERS_RETURN_SPECIFICS, 
                    USE_CALCULATED_PREPAY_TAX_CATEGORY, 
                    USE_NONFISCAL_CASH_DURING_CASH_RECONCILIATION, 
                    CAN_FISCALIZE_AS_DISCOUNT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public int Index
        {
            get { return index; }
        }

        public bool EnabledWhenModuleIsMissing
        {
            get { return enabledWhenModuleIsMissing; }
        }

    }

    [DataClass("OnlineLicensingResponse")]
    public partial class OnlineLicensingResponse
    {
        private int statusCode;
        private string statusMessage;
        private string requestToken;
        private string license;
        private string licenseXml;
        private string jurPersonServiceUrl;
        private int? jurPersonSearchPeriod;

        protected OnlineLicensingResponse() {}

        public OnlineLicensingResponse(int statusCode, string statusMessage, string requestToken, string license)
        {
            this.statusCode = statusCode;
            this.statusMessage = statusMessage;
            this.requestToken = requestToken;
            this.license = license;
        }
        public int StatusCode
        {
            get { return statusCode; }
            set { statusCode = value; }
        }

        public string StatusMessage
        {
            get { return statusMessage; }
            set { statusMessage = value; }
        }

        public string RequestToken
        {
            get { return requestToken; }
            set { requestToken = value; }
        }

        public string License
        {
            get { return license; }
            set { license = value; }
        }

        [CanBeNull]
        public string LicenseXml
        {
            get { return licenseXml; }
            set { licenseXml = value; }
        }

        [CanBeNull]
        public string JurPersonServiceUrl
        {
            get { return jurPersonServiceUrl; }
            set { jurPersonServiceUrl = value; }
        }

        public int? JurPersonSearchPeriod
        {
            get { return jurPersonSearchPeriod; }
            set { jurPersonSearchPeriod = value; }
        }

    }

    [DataClass("OnlineLicensingState")]
    public partial class OnlineLicensingState
    {
        private string chosenHardwareId;
        private DateTime? expirationDate;
        private DateTime? lastSuccessfulCheckDate;
        private DateTime? lastCheckDate;
        private DateTime? nextCheckDate;


        [CanBeNull]
        public string ChosenHardwareId
        {
            get { return chosenHardwareId; }
            set { chosenHardwareId = value; }
        }

        public DateTime? ExpirationDate
        {
            get { return expirationDate; }
            set { expirationDate = value; }
        }

        public DateTime? LastSuccessfulCheckDate
        {
            get { return lastSuccessfulCheckDate; }
            set { lastSuccessfulCheckDate = value; }
        }

        public DateTime? LastCheckDate
        {
            get { return lastCheckDate; }
            set { lastCheckDate = value; }
        }

        public DateTime? NextCheckDate
        {
            get { return nextCheckDate; }
            set { nextCheckDate = value; }
        }

    }

    [DataClass("OnlineLicensingStatus")]
    [EnumClass]
    public partial class OnlineLicensingStatus : LocalizableName<OnlineLicensingStatus>
    {
        /// <summary> Получен лицензионный ключ.. </summary>
        public static readonly OnlineLicensingStatus OK = new OnlineLicensingStatus("OK", 200, ProblemSeverity.NORMAL, false);
        /// <summary> При получении лицензии произошла ошибка.. </summary>
        public static readonly OnlineLicensingStatus UNKNOWN = new OnlineLicensingStatus("UNKNOWN", 480, ProblemSeverity.ERROR, false);
        /// <summary> Вы уже устанавливали систему на другом компьютере. Отмените привязку в личном кабинете и попробуйте снова.. </summary>
        public static readonly OnlineLicensingStatus CRMID_HWID_NOT_MATCH = new OnlineLicensingStatus("CRMID_HWID_NOT_MATCH", 481, ProblemSeverity.ERROR, false);
        /// <summary> Вы уже использовали лицензию для этого CRMID на другом компьютере.. </summary>
        public static readonly OnlineLicensingStatus INCORRECT_REQUEST_TOKEN = new OnlineLicensingStatus("INCORRECT_REQUEST_TOKEN", 482, ProblemSeverity.ERROR, false);
        /// <summary> Клиент не зарегистрирован.. </summary>
        public static readonly OnlineLicensingStatus CLIENT_MISSING = new OnlineLicensingStatus("CLIENT_MISSING", 483, ProblemSeverity.ERROR, false);
        /// <summary> Нет действующих лицензий.. </summary>
        public static readonly OnlineLicensingStatus LICENSE_MISSING = new OnlineLicensingStatus("LICENSE_MISSING", 484, ProblemSeverity.ERROR, false);
        /// <summary> При получении лицензии произошла неизвестная ошибка. Сообщите о проблеме в поддержку.. </summary>
        public static readonly OnlineLicensingStatus INTERNAL_ERROR = new OnlineLicensingStatus("INTERNAL_ERROR", 500, ProblemSeverity.ERROR, true);
        /// <summary> Не удалось подключиться к серверу лицензий.. </summary>
        public static readonly OnlineLicensingStatus CANNOT_CONNECT = new OnlineLicensingStatus("CANNOT_CONNECT", 580, ProblemSeverity.WARNING, true);

        private readonly int code;
        private readonly ProblemSeverity problemSeverity;
        private readonly bool temporary;
        private readonly string __value;
        private readonly string __nameResId;

        private OnlineLicensingStatus(string __value, int code, ProblemSeverity problemSeverity, bool temporary)
        {
            this.__value = __value;
            this.__nameResId = "ONLINELICENSINGSTATUS_NAME_" + __value;
            this.code = code;
            this.problemSeverity = problemSeverity;
            this.temporary = temporary;
        }

        public static OnlineLicensingStatus Parse(string value)
        {
            switch(value)
            {
                case "OK": return OK;
                case "UNKNOWN": return UNKNOWN;
                case "CRMID_HWID_NOT_MATCH": return CRMID_HWID_NOT_MATCH;
                case "INCORRECT_REQUEST_TOKEN": return INCORRECT_REQUEST_TOKEN;
                case "CLIENT_MISSING": return CLIENT_MISSING;
                case "LICENSE_MISSING": return LICENSE_MISSING;
                case "INTERNAL_ERROR": return INTERNAL_ERROR;
                case "CANNOT_CONNECT": return CANNOT_CONNECT;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static OnlineLicensingStatus[] VALUES
        {
            get
            {
                return new []
                {
                    OK, 
                    UNKNOWN, 
                    CRMID_HWID_NOT_MATCH, 
                    INCORRECT_REQUEST_TOKEN, 
                    CLIENT_MISSING, 
                    LICENSE_MISSING, 
                    INTERNAL_ERROR, 
                    CANNOT_CONNECT
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Code
        {
            get { return code; }
        }

        public ProblemSeverity ProblemSeverity
        {
            get { return problemSeverity; }
        }

        public bool Temporary
        {
            get { return temporary; }
        }

    }

    [DataClass("LocalizedMessage")]
    public partial class LocalizedMessage
    {
        private string resId;

        protected LocalizedMessage() {}

        public LocalizedMessage(string resId)
        {
            this.resId = resId;
        }
        public string ResId
        {
            get { return resId; }
            set { resId = value; }
        }

    }

    [DataClass("RestoLocale")]
    [EnumClass]
    public partial class RestoLocale : LocalizableName<RestoLocale>
    {
        /// <summary> Русский. </summary>
        public static readonly RestoLocale RU_RU = new RestoLocale("RU_RU", "0419", "ru-RU", "ru", "RU", "Русский", "Русский", true, true, true, true, "http://help.iiko.ru", "");
        /// <summary> English (US). </summary>
        public static readonly RestoLocale EN_US = new RestoLocale("EN_US", "0409", "en-US", "en", "US", "English (US)", "Английский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> English (UK). </summary>
        public static readonly RestoLocale EN_GB = new RestoLocale("EN_GB", "0809", "en-GB", "en", "GB", "English (UK)", "Английский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Deutsch. </summary>
        public static readonly RestoLocale DE_DE = new RestoLocale("DE_DE", "0407", "de-DE", "de", "DE", "Deutsch", "Немецкий", true, true, true, true, "", "0409");
        /// <summary> Українська. </summary>
        public static readonly RestoLocale UK_UA = new RestoLocale("UK_UA", "0422", "uk-UA", "uk", "UA", "Українська", "Украинский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Tiếng Việt. </summary>
        public static readonly RestoLocale VI_VN = new RestoLocale("VI_VN", "042A", "vi-VN", "vi", "VN", "Tiếng Việt", "Вьетнамский", true, true, true, true, "", "0409");
        /// <summary> Čestina. </summary>
        public static readonly RestoLocale CS_CZ = new RestoLocale("CS_CZ", "0405", "cs-CZ", "cs", "CZ", "Čestina", "Чешский", true, true, true, true, "", "0409");
        /// <summary> Polski. </summary>
        public static readonly RestoLocale PL_PL = new RestoLocale("PL_PL", "0415", "pl-PL", "pl", "PL", "Polski", "Польский", true, true, true, true, "", "0409");
        /// <summary> Français. </summary>
        public static readonly RestoLocale FR_FR = new RestoLocale("FR_FR", "040C", "fr-FR", "fr", "FR", "Français", "Французский", true, true, true, true, "", "0409");
        /// <summary> Հայերեն. </summary>
        public static readonly RestoLocale HY_AM = new RestoLocale("HY_AM", "042B", "hy-AM", "hy", "AM", "Հայերեն", "Армянский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> ქართული. </summary>
        public static readonly RestoLocale KA_GE = new RestoLocale("KA_GE", "0437", "ka-GE", "ka", "GE", "ქართული", "Грузинский", true, true, true, false, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Română. </summary>
        public static readonly RestoLocale RO_RO = new RestoLocale("RO_RO", "0418", "ro-RO", "ro", "RO", "Română", "Румынский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Latviešu. </summary>
        public static readonly RestoLocale LV_LV = new RestoLocale("LV_LV", "0426", "lv-LV", "lv", "LV", "Latviešu", "Латышский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Lietuvių. </summary>
        public static readonly RestoLocale LT_LT = new RestoLocale("LT_LT", "0427", "lt-LT", "lt", "LT", "Lietuvių", "Литовский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Қазақ. </summary>
        public static readonly RestoLocale KK_KZ = new RestoLocale("KK_KZ", "043F", "kk-KZ", "kk", "KZ", "Қазақ", "Казахский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Azərbaycan dili. </summary>
        public static readonly RestoLocale AZ_LATN_AZ = new RestoLocale("AZ_LATN_AZ", "042C", "az-Latn-AZ", "az", "AZ", "Azərbaycan dili", "Азербайджанский", true, true, true, true, "http://en.help.iikosoftware.com", "0419");
        /// <summary> Български. </summary>
        public static readonly RestoLocale BG_BG = new RestoLocale("BG_BG", "0402", "bg-BG", "bg", "BG", "Български", "Болгарский", true, true, true, true, "", "0409");
        /// <summary> Bahasa Indonesia. </summary>
        public static readonly RestoLocale ID_ID = new RestoLocale("ID_ID", "0421", "id-ID", "id", "ID", "Bahasa Indonesia", "Индонезийский", true, true, true, true, "", "0409");
        /// <summary> العربية. </summary>
        public static readonly RestoLocale AR_SA = new RestoLocale("AR_SA", "0401", "ar-SA", "ar", "SA", "العربية", "Арабский", true, true, true, true, "", "0409");
        /// <summary> 中文. </summary>
        public static readonly RestoLocale ZH_CN = new RestoLocale("ZH_CN", "0804", "zh-CN", "zh", "CN", "中文", "Китайский", true, true, true, true, "", "0409");
        /// <summary> Монгол. </summary>
        public static readonly RestoLocale MN_MN = new RestoLocale("MN_MN", "0450", "mn-MN", "mn", "MN", "Монгол", "Монгольский", true, true, true, true, "", "0409");
        /// <summary> Italiano. </summary>
        public static readonly RestoLocale IT_IT = new RestoLocale("IT_IT", "0410", "it-IT", "it", "IT", "Italiano", "Итальянский", true, true, true, true, "http://it.iiko.help", "0409");
        /// <summary> Dutch. </summary>
        public static readonly RestoLocale NL_NL = new RestoLocale("NL_NL", "0413", "nl-NL", "nl", "NL", "Dutch", "Голландский", true, true, true, true, "", "0409");
        /// <summary> Türkçe. </summary>
        public static readonly RestoLocale TR_TR = new RestoLocale("TR_TR", "041F", "tr-TR", "tr", "TR", "Türkçe", "Турецкий", true, true, true, true, "", "0409");
        /// <summary> Español. </summary>
        public static readonly RestoLocale ES_ES = new RestoLocale("ES_ES", "0C0A", "es-ES", "es", "ES", "Espanol (Espana)", "Испанский", true, true, true, true, "", "0409");

        private readonly string code;
        private readonly string cultureName;
        private readonly string language;
        private readonly string country;
        private readonly string name;
        private readonly string comment;
        private readonly bool enabledInFront;
        private readonly bool enabledInOffice;
        private readonly bool enabledInServer;
        private readonly bool showReleaseNotes;
        private readonly string urlToDocumentation;
        private readonly string defaultLanguageCode;
        private readonly string __value;
        private readonly string __nameResId;

        private RestoLocale(string __value, string code, string cultureName, string language, string country, string name, string comment, bool enabledInFront, bool enabledInOffice, bool enabledInServer, bool showReleaseNotes, string urlToDocumentation, string defaultLanguageCode)
        {
            this.__value = __value;
            this.__nameResId = "RESTOLOCALE_NAME_" + __value;
            this.code = code;
            this.cultureName = cultureName;
            this.language = language;
            this.country = country;
            this.name = name;
            this.comment = comment;
            this.enabledInFront = enabledInFront;
            this.enabledInOffice = enabledInOffice;
            this.enabledInServer = enabledInServer;
            this.showReleaseNotes = showReleaseNotes;
            this.urlToDocumentation = urlToDocumentation;
            this.defaultLanguageCode = defaultLanguageCode;
        }

        public static RestoLocale Parse(string value)
        {
            switch(value)
            {
                case "RU_RU": return RU_RU;
                case "EN_US": return EN_US;
                case "EN_GB": return EN_GB;
                case "DE_DE": return DE_DE;
                case "UK_UA": return UK_UA;
                case "VI_VN": return VI_VN;
                case "CS_CZ": return CS_CZ;
                case "PL_PL": return PL_PL;
                case "FR_FR": return FR_FR;
                case "HY_AM": return HY_AM;
                case "KA_GE": return KA_GE;
                case "RO_RO": return RO_RO;
                case "LV_LV": return LV_LV;
                case "LT_LT": return LT_LT;
                case "KK_KZ": return KK_KZ;
                case "AZ_LATN_AZ": return AZ_LATN_AZ;
                case "BG_BG": return BG_BG;
                case "ID_ID": return ID_ID;
                case "AR_SA": return AR_SA;
                case "ZH_CN": return ZH_CN;
                case "MN_MN": return MN_MN;
                case "IT_IT": return IT_IT;
                case "NL_NL": return NL_NL;
                case "TR_TR": return TR_TR;
                case "ES_ES": return ES_ES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RestoLocale[] VALUES
        {
            get
            {
                return new []
                {
                    RU_RU, 
                    EN_US, 
                    EN_GB, 
                    DE_DE, 
                    UK_UA, 
                    VI_VN, 
                    CS_CZ, 
                    PL_PL, 
                    FR_FR, 
                    HY_AM, 
                    KA_GE, 
                    RO_RO, 
                    LV_LV, 
                    LT_LT, 
                    KK_KZ, 
                    AZ_LATN_AZ, 
                    BG_BG, 
                    ID_ID, 
                    AR_SA, 
                    ZH_CN, 
                    MN_MN, 
                    IT_IT, 
                    NL_NL, 
                    TR_TR, 
                    ES_ES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Code
        {
            get { return code; }
        }

        public string CultureName
        {
            get { return cultureName; }
        }

        public string Language
        {
            get { return language; }
        }

        public string Country
        {
            get { return country; }
        }

        public string Name
        {
            get { return name; }
        }

        public string Comment
        {
            get { return comment; }
        }

        public bool EnabledInFront
        {
            get { return enabledInFront; }
        }

        public bool EnabledInOffice
        {
            get { return enabledInOffice; }
        }

        public bool EnabledInServer
        {
            get { return enabledInServer; }
        }

        public bool ShowReleaseNotes
        {
            get { return showReleaseNotes; }
        }

        public string UrlToDocumentation
        {
            get { return urlToDocumentation; }
        }

        public string DefaultLanguageCode
        {
            get { return defaultLanguageCode; }
        }

    }

    [DataClass("ProxiedRequestDto")]
    public partial class ProxiedRequestDto
    {
        private Guid? requestId;
        private string method;
        private string url;
        private Dictionary<string, List<string>> headers;
        private string body;
        private DateTime? dateCreated;
        private long connectTimeoutMillis;
        private long readTimeoutMillis;

        protected ProxiedRequestDto() {}

        public ProxiedRequestDto(Guid? requestId, string method, string url, string body, DateTime? dateCreated, long connectTimeoutMillis, long readTimeoutMillis)
        {
            this.requestId = requestId;
            this.method = method;
            this.url = url;
            this.body = body;
            this.dateCreated = dateCreated;
            this.connectTimeoutMillis = connectTimeoutMillis;
            this.readTimeoutMillis = readTimeoutMillis;
        }
        public Guid? RequestId
        {
            get { return requestId; }
            set { requestId = value; }
        }

        public string Method
        {
            get { return method; }
            set { method = value; }
        }

        public string Url
        {
            get { return url; }
            set { url = value; }
        }

        public Dictionary<string, List<string>> Headers
        {
            get { return headers; }
            set { headers = value; }
        }

        public string Body
        {
            get { return body; }
            set { body = value; }
        }

        public DateTime? DateCreated
        {
            get { return dateCreated; }
            set { dateCreated = value; }
        }

        public long ConnectTimeoutMillis
        {
            get { return connectTimeoutMillis; }
            set { connectTimeoutMillis = value; }
        }

        public long ReadTimeoutMillis
        {
            get { return readTimeoutMillis; }
            set { readTimeoutMillis = value; }
        }

    }

    [DataClass("ProxiedResponseDto")]
    public partial class ProxiedResponseDto
    {
        private Guid? requestId;
        private int httpStatus;
        private Dictionary<string, List<string>> headers;
        private string body;
        private string internalErrorMessage;
        private string internalErrorStackTrace;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ProxiedResponseDto() {}

        public ProxiedResponseDto(Guid? requestId, int httpStatus, string body, string internalErrorMessage, string internalErrorStackTrace)
        {
            this.requestId = requestId;
            this.httpStatus = httpStatus;
            this.body = body;
            this.internalErrorMessage = internalErrorMessage;
            this.internalErrorStackTrace = internalErrorStackTrace;
        }
        public Guid? RequestId
        {
            get { return requestId; }
            set { requestId = value; }
        }

        public int HttpStatus
        {
            get { return httpStatus; }
            set { httpStatus = value; }
        }

        public Dictionary<string, List<string>> Headers
        {
            get { return headers; }
            set { headers = value; }
        }

        public string Body
        {
            get { return body; }
            set { body = value; }
        }

        public string InternalErrorMessage
        {
            get { return internalErrorMessage; }
            set { internalErrorMessage = value; }
        }

        public string InternalErrorStackTrace
        {
            get { return internalErrorStackTrace; }
            set { internalErrorStackTrace = value; }
        }

    }

    [DataClass("KeepAliveMode")]
    [EnumClass]
    public partial class KeepAliveMode : LocalizableName<KeepAliveMode>
    {
        /// <summary> Не отправлять сигналы поддержания соединения. </summary>
        public static readonly KeepAliveMode NONE = new KeepAliveMode("NONE");
        /// <summary> Отправлять запрос REGISTER для поддержания соединения. </summary>
        public static readonly KeepAliveMode REGISTER = new KeepAliveMode("REGISTER");
        /// <summary> Отправлять запрос OPTIONS для поддержания соединения. </summary>
        public static readonly KeepAliveMode OPTIONS = new KeepAliveMode("OPTIONS");

        private readonly string __value;
        private readonly string __nameResId;

        private KeepAliveMode(string __value)
        {
            this.__value = __value;
            this.__nameResId = "KEEPALIVEMODE_NAME_" + __value;
        }

        public static KeepAliveMode Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "REGISTER": return REGISTER;
                case "OPTIONS": return OPTIONS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static KeepAliveMode[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    REGISTER, 
                    OPTIONS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("NatTraversalMethod")]
    [EnumClass]
    public partial class NatTraversalMethod : LocalizableName<NatTraversalMethod>
    {
        /// <summary> Автоматически определять режим прохождения NAT. </summary>
        public static readonly NatTraversalMethod AUTO = new NatTraversalMethod("AUTO");
        /// <summary> STUN (поиск публичного IP адреса). </summary>
        public static readonly NatTraversalMethod STUN = new NatTraversalMethod("STUN");
        /// <summary> TURN (использование пересылки данных). </summary>
        public static readonly NatTraversalMethod TURN = new NatTraversalMethod("TURN");
        /// <summary> Использование локального IP адреса (без прохождения NAT). </summary>
        public static readonly NatTraversalMethod NONE = new NatTraversalMethod("NONE");

        private readonly string __value;
        private readonly string __nameResId;

        private NatTraversalMethod(string __value)
        {
            this.__value = __value;
            this.__nameResId = "NATTRAVERSALMETHOD_NAME_" + __value;
        }

        public static NatTraversalMethod Parse(string value)
        {
            switch(value)
            {
                case "AUTO": return AUTO;
                case "STUN": return STUN;
                case "TURN": return TURN;
                case "NONE": return NONE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static NatTraversalMethod[] VALUES
        {
            get
            {
                return new []
                {
                    AUTO, 
                    STUN, 
                    TURN, 
                    NONE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("PbxAuthorizationSettings")]
    public partial class PbxAuthorizationSettings
    {
        private string login;
        private string password;
        private string additionalNumber;


        [CanBeNull]
        public string Login
        {
            get { return login; }
            set { login = value; }
        }

        [CanBeNull]
        public string Password
        {
            get { return password; }
            set { password = value; }
        }

        [CanBeNull]
        public string AdditionalNumber
        {
            get { return additionalNumber; }
            set { additionalNumber = value; }
        }

    }

    [DataClass("PbxRmsClient")]
    [EnumClass]
    public partial class PbxRmsClient : LocalizableName<PbxRmsClient>
    {
        /// <summary> Терминал. </summary>
        public static readonly PbxRmsClient IIKO_FRONT_OFFICE = new PbxRmsClient("IIKO_FRONT_OFFICE", 0);
        /// <summary> Office. </summary>
        public static readonly PbxRmsClient IIKO_BACK_OFFICE = new PbxRmsClient("IIKO_BACK_OFFICE", 1);

        private readonly int value;
        private readonly string __value;
        private readonly string __nameResId;

        private PbxRmsClient(string __value, int value)
        {
            this.__value = __value;
            this.__nameResId = "PBXRMSCLIENT_NAME_" + __value;
            this.value = value;
        }

        public static PbxRmsClient Parse(string value)
        {
            switch(value)
            {
                case "IIKO_FRONT_OFFICE": return IIKO_FRONT_OFFICE;
                case "IIKO_BACK_OFFICE": return IIKO_BACK_OFFICE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static PbxRmsClient[] VALUES
        {
            get
            {
                return new []
                {
                    IIKO_FRONT_OFFICE, 
                    IIKO_BACK_OFFICE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Value
        {
            get { return value; }
        }

    }

    [DataClass("PbxSettings")]
    public partial class PbxSettings
    {
        private VoipApplication voipApplication;
        [HasDefaultValue]
        private string serverAddress = "";
        [HasDefaultValue]
        private int serverPort = 5060;
        private TransportProtocol transportProtocol;
        [HasDefaultValue]
        private int serverConnectionTimeout = 5;
        [HasDefaultValue]
        private bool useSpecifiedRangeOfLocalPorts = false;
        [HasDefaultValue]
        private int? minPort = 5700;
        [HasDefaultValue]
        private int? maxPort = 5750;
        private NatTraversalMethod natTraversalMethod;
        [HasDefaultValue]
        private string natTraversalServerAddress = "";
        [HasDefaultValue]
        private int expirationTime = 3600;
        private KeepAliveMode keepAliveMode;
        [HasDefaultValue]
        private int keepAliveInterval = 60;
        [HasDefaultValue]
        private string countryCodeReplacement = "";

        public PbxSettings() {}

        public PbxSettings(VoipApplication voipApplication, TransportProtocol transportProtocol, NatTraversalMethod natTraversalMethod, KeepAliveMode keepAliveMode)
        {
            this.voipApplication = voipApplication;
            this.transportProtocol = transportProtocol;
            this.natTraversalMethod = natTraversalMethod;
            this.keepAliveMode = keepAliveMode;
        }
        public VoipApplication VoipApplication
        {
            get { return voipApplication; }
            set { voipApplication = value; }
        }

        public string ServerAddress
        {
            get { return serverAddress; }
            set { serverAddress = value; }
        }

        public int ServerPort
        {
            get { return serverPort; }
            set { serverPort = value; }
        }

        public TransportProtocol TransportProtocol
        {
            get { return transportProtocol; }
            set { transportProtocol = value; }
        }

        public int ServerConnectionTimeout
        {
            get { return serverConnectionTimeout; }
            set { serverConnectionTimeout = value; }
        }

        public bool UseSpecifiedRangeOfLocalPorts
        {
            get { return useSpecifiedRangeOfLocalPorts; }
            set { useSpecifiedRangeOfLocalPorts = value; }
        }

        public int? MinPort
        {
            get { return minPort; }
            set { minPort = value; }
        }

        public int? MaxPort
        {
            get { return maxPort; }
            set { maxPort = value; }
        }

        public NatTraversalMethod NatTraversalMethod
        {
            get { return natTraversalMethod; }
            set { natTraversalMethod = value; }
        }

        public string NatTraversalServerAddress
        {
            get { return natTraversalServerAddress; }
            set { natTraversalServerAddress = value; }
        }

        public int ExpirationTime
        {
            get { return expirationTime; }
            set { expirationTime = value; }
        }

        public KeepAliveMode KeepAliveMode
        {
            get { return keepAliveMode; }
            set { keepAliveMode = value; }
        }

        public int KeepAliveInterval
        {
            get { return keepAliveInterval; }
            set { keepAliveInterval = value; }
        }

        public string CountryCodeReplacement
        {
            get { return countryCodeReplacement; }
            set { countryCodeReplacement = value; }
        }

    }

    [DataClass("TapiLinesFilterType")]
    [EnumClass]
    public partial class TapiLinesFilterType : LocalizableName<TapiLinesFilterType>
    {
        /// <summary> Маска. </summary>
        public static readonly TapiLinesFilterType REGEX = new TapiLinesFilterType("REGEX");
        /// <summary> Ручной ввод. </summary>
        public static readonly TapiLinesFilterType HARDCODE = new TapiLinesFilterType("HARDCODE");

        private readonly string __value;
        private readonly string __nameResId;

        private TapiLinesFilterType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TAPILINESFILTERTYPE_NAME_" + __value;
        }

        public static TapiLinesFilterType Parse(string value)
        {
            switch(value)
            {
                case "REGEX": return REGEX;
                case "HARDCODE": return HARDCODE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TapiLinesFilterType[] VALUES
        {
            get
            {
                return new []
                {
                    REGEX, 
                    HARDCODE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("TapiSettings")]
    public partial class TapiSettings
    {
        [HasDefaultValue]
        private bool enabled = false;
        private TapiLinesFilterType filterType;
        [HasDefaultValue]
        private string linesFilterRegex = "CO000(\\d+)";
        private Dictionary<string, string> observableLines;
        private string phoneFormat;

        public TapiSettings() {}

        public TapiSettings(TapiLinesFilterType filterType)
        {
            this.filterType = filterType;
        }
        public bool Enabled
        {
            get { return enabled; }
            set { enabled = value; }
        }

        public TapiLinesFilterType FilterType
        {
            get { return filterType; }
            set { filterType = value; }
        }

        public string LinesFilterRegex
        {
            get { return linesFilterRegex; }
            set { linesFilterRegex = value; }
        }

        [CanBeNull]
        public Dictionary<string, string> ObservableLines
        {
            get { return observableLines; }
            set { observableLines = value; }
        }

        [CanBeNull]
        public string PhoneFormat
        {
            get { return phoneFormat; }
            set { phoneFormat = value; }
        }

    }

    [DataClass("TransportProtocol")]
    [EnumClass]
    public partial class TransportProtocol : LocalizableName<TransportProtocol>
    {
        /// <summary> По умолчанию. </summary>
        public static readonly TransportProtocol NONE = new TransportProtocol("NONE");
        /// <summary> UDP. </summary>
        public static readonly TransportProtocol UDP = new TransportProtocol("UDP");
        /// <summary> TCP. </summary>
        public static readonly TransportProtocol TCP = new TransportProtocol("TCP");

        private readonly string __value;
        private readonly string __nameResId;

        private TransportProtocol(string __value)
        {
            this.__value = __value;
            this.__nameResId = "TRANSPORTPROTOCOL_NAME_" + __value;
        }

        public static TransportProtocol Parse(string value)
        {
            switch(value)
            {
                case "NONE": return NONE;
                case "UDP": return UDP;
                case "TCP": return TCP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static TransportProtocol[] VALUES
        {
            get
            {
                return new []
                {
                    NONE, 
                    UDP, 
                    TCP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("VoipApplication")]
    [EnumClass]
    public partial class VoipApplication : LocalizableName<VoipApplication>
    {
        /// <summary> Ozeki. </summary>
        public static readonly VoipApplication OZEKI = new VoipApplication("OZEKI");
        /// <summary> PJSip. </summary>
        public static readonly VoipApplication PJSIP = new VoipApplication("PJSIP");

        private readonly string __value;
        private readonly string __nameResId;

        private VoipApplication(string __value)
        {
            this.__value = __value;
            this.__nameResId = "VOIPAPPLICATION_NAME_" + __value;
        }

        public static VoipApplication Parse(string value)
        {
            switch(value)
            {
                case "OZEKI": return OZEKI;
                case "PJSIP": return PJSIP;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static VoipApplication[] VALUES
        {
            get
            {
                return new []
                {
                    OZEKI, 
                    PJSIP
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("Permission")]
    [EnumClass]
    public partial class Permission : LocalizableName<Permission>
    {
        /// <summary> Выдавать подменные карты. </summary>
        public static readonly Permission CAN_SUBSTITUTE_CARD = new Permission("CAN_SUBSTITUTE_CARD", "F_SC", false, null);
        /// <summary> Просматривать отчеты во фронте. </summary>
        public static readonly Permission CAN_VIEW_FRONT_REPORTS = new Permission("CAN_VIEW_FRONT_REPORTS", "F_VRPT", false, null);
        /// <summary> Открывать заказы в качестве официанта. </summary>
        public static readonly Permission CAN_HAVE_ORDERS = new Permission("CAN_HAVE_ORDERS", "F_CHO", false, null);
        /// <summary> Изменять количество гостей. </summary>
        public static readonly Permission CAN_CHANGE_GUEST_COUNT = new Permission("CAN_CHANGE_GUEST_COUNT", "F_CGC", false, null);
        /// <summary> Удалять отпечатанные блюда из заказа до печати пречека. </summary>
        public static readonly Permission CAN_DELETE_PRINTED = new Permission("CAN_DELETE_PRINTED", "F_DP", false, null);
        /// <summary> Повторно печатать блюда. </summary>
        public static readonly Permission CAN_PRINT_AGAIN = new Permission("CAN_PRINT_AGAIN", "F_PA", false, null);
        /// <summary> Редактировать настройки рабочей станции. </summary>
        public static readonly Permission CAN_EDIT_TERMINAL_SETTINGS = new Permission("CAN_EDIT_TERMINAL_SETTINGS", "F_SET", false, null);
        /// <summary> Закрывать кассовую смену. </summary>
        public static readonly Permission CAN_CLOSE_SESSION = new Permission("CAN_CLOSE_SESSION", "F_CS", false, null);
        /// <summary> Создавать и редактировать заказы других официантов. </summary>
        public static readonly Permission CAN_ACCESS_OTHERS_TABLES = new Permission("CAN_ACCESS_OTHERS_TABLES", "F_AOT", false, null);
        /// <summary> Авторизовывать перенос заказа другому официанту. </summary>
        public static readonly Permission CAN_CHANGE_ORDER_WAITER = new Permission("CAN_CHANGE_ORDER_WAITER", "F_COW", false, null);
        /// <summary> Авторизовывать аварийную отмену операций. </summary>
        public static readonly Permission CAN_AUTHORIZE_EMERGENCY_CANCEL = new Permission("CAN_AUTHORIZE_EMERGENCY_CANCEL", "F_AEC", false, null);
        /// <summary> Аварийно открывать кассовую смену. </summary>
        public static readonly Permission CAN_OPEN_SESSION_IN_EMERGENCY = new Permission("CAN_OPEN_SESSION_IN_EMERGENCY", "F_OSE", false, null);
        /// <summary> Аварийно закрывать кассовую смену. </summary>
        public static readonly Permission CAN_CLOSE_SESSION_IN_EMERGENCY = new Permission("CAN_CLOSE_SESSION_IN_EMERGENCY", "F_CSE", false, null);
        /// <summary> Принимать платежи. </summary>
        public static readonly Permission CAN_AUTH_PAYMENT = new Permission("CAN_AUTH_PAYMENT", "F_CASH", false, null);
        /// <summary> Распечатывать пречек повторно. </summary>
        public static readonly Permission CAN_PRINT_BILL_AGAIN = new Permission("CAN_PRINT_BILL_AGAIN", "F_CPBA", false, null);
        /// <summary> Распечатывать пречек на заказы других официантов. </summary>
        public static readonly Permission CAN_PRINT_OTHERS_TABLES_BILL = new Permission("CAN_PRINT_OTHERS_TABLES_BILL", "F_CPOTB", false, null);
        /// <summary> Устанавливать надбавку и скидку для заказа. </summary>
        public static readonly Permission CAN_INCREASE_AND_DISCOUNT = new Permission("CAN_INCREASE_AND_DISCOUNT", "F_ID", false, null);
        /// <summary> Устанавливать надбавку и скидку по карте гостя. </summary>
        public static readonly Permission CAN_INCREASE_AND_DISCOUNT_BY_GUEST_CARD = new Permission("CAN_INCREASE_AND_DISCOUNT_BY_GUEST_CARD", "F_IDGC", false, null);
        /// <summary> Устанавливать надбавку и скидку по карте гостя без прокатки карты. </summary>
        public static readonly Permission CAN_INCREASE_AND_DISCOUNT_BY_CARD_NUMBER = new Permission("CAN_INCREASE_AND_DISCOUNT_BY_CARD_NUMBER", "F_IDCN", false, null);
        /// <summary> Привязывать заказ к гостю без прокатки карты гостя. </summary>
        public static readonly Permission CAN_BIND_GUEST_BY_CARD_NUMBER = new Permission("CAN_BIND_GUEST_BY_CARD_NUMBER", "F_BGCN", false, null);
        /// <summary> Открывать кассовую смену. </summary>
        public static readonly Permission CAN_OPEN_CAFE_SESSION = new Permission("CAN_OPEN_CAFE_SESSION", "F_OCS", false, null);
        /// <summary> Авторизовывать закрытие заказов в кредит. </summary>
        public static readonly Permission CAN_CLOSE_ON_CREDIT = new Permission("CAN_CLOSE_ON_CREDIT", "F_COC", false, null);
        /// <summary> Подтверждать оплату в кредит без прокатки карты контрагента. </summary>
        public static readonly Permission CAN_CLOSE_ON_CREDIT_WITHOUT_CONTRAGENT_AUTH = new Permission("CAN_CLOSE_ON_CREDIT_WITHOUT_CONTRAGENT_AUTH", "F_CWC", false, null);
        /// <summary> Редактировать заказы без карты клиента. </summary>
        public static readonly Permission CAN_EDIT_ORDER_WITHOUT_CLIENT_CARD = new Permission("CAN_EDIT_ORDER_WITHOUT_CLIENT_CARD", "F_EOWCC", false, null);
        /// <summary> Закрывать заказы за счет заведения. </summary>
        public static readonly Permission CAN_CLOSE_ON_THE_HOUSE = new Permission("CAN_CLOSE_ON_THE_HOUSE", "F_COTH", false, null);
        /// <summary> Создавать кухонные заказы через API. </summary>
        public static readonly Permission CAN_CREATE_KITCHEN_ORDERS = new Permission("CAN_CREATE_KITCHEN_ORDERS", "F_CCKO", false, null);
        /// <summary> Просматривать полный отчет. </summary>
        public static readonly Permission CAN_VIEW_Z_REPORT = new Permission("CAN_VIEW_Z_REPORT", "F_ZREP", false, null);
        /// <summary> Просматривать закрытые заказы. </summary>
        public static readonly Permission CAN_VIEW_CLOSED_ORDERS = new Permission("CAN_VIEW_CLOSED_ORDERS", "F_CLOR", false, null);
        /// <summary> Просматривать суммы в закрытых заказах. </summary>
        public static readonly Permission CAN_VIEW_CLOSED_ORDERS_SUMS = new Permission("CAN_VIEW_CLOSED_ORDERS_SUMS", "F_CLOS", false, null);
        /// <summary> Производить возврат оплаты. </summary>
        public static readonly Permission CAN_STORN_CLOSED_ORDERS = new Permission("CAN_STORN_CLOSED_ORDERS", "F_STRN", false, null);
        /// <summary> Производить возврат оплаты по чеку без возврата на склад. </summary>
        public static readonly Permission CAN_STORN_CLOSED_ORDERS_WITH_WRITEOFF = new Permission("CAN_STORN_CLOSED_ORDERS_WITH_WRITEOFF", "F_SWWOFF", false, null);
        /// <summary> Повторный возврат заказа закрытой кассовой смены. </summary>
        public static readonly Permission CAN_STORN_CLOSED_ORDERS_AGAIN = new Permission("CAN_STORN_CLOSED_ORDERS_AGAIN", "F_STRNA", false, null);
        /// <summary> Удалять закрытые заказы. </summary>
        public static readonly Permission CAN_DELETE_CLOSED_ORDERS = new Permission("CAN_DELETE_CLOSED_ORDERS", "F_DCO", false, null);
        /// <summary> Авторизовывать удаление предоплаты. </summary>
        public static readonly Permission CAN_REMOVE_PREPAY = new Permission("CAN_REMOVE_PREPAY", "F_REP", false, null);
        /// <summary> Проводить предоплату. </summary>
        public static readonly Permission CAN_PROCESS_PREPAY = new Permission("CAN_PROCESS_PREPAY", "F_PRPRE", false, null);
        /// <summary> Просматривать и редактировать предоплаты. </summary>
        public static readonly Permission CAN_VIEW_AND_EDIT_PREPAY = new Permission("CAN_VIEW_AND_EDIT_PREPAY", "F_VP", false, null);
        /// <summary> Начислять штрафы и премии. </summary>
        public static readonly Permission CAN_PROCESS_PENALTY = new Permission("CAN_PROCESS_PENALTY", "F_POB", false, null);
        /// <summary> Принудительно закрывать личные смены. </summary>
        public static readonly Permission CAN_KICK_FROM_SESSION = new Permission("CAN_KICK_FROM_SESSION", "F_KIS", false, null);
        /// <summary> Просматривать явки сотрудников. </summary>
        public static readonly Permission CAN_VIEW_OPENED_SESSIONS = new Permission("CAN_VIEW_OPENED_SESSIONS", "F_VOS", false, null);
        /// <summary> Редактировать стоп-лист и \"быстрое меню\". </summary>
        public static readonly Permission CAN_EDIT_MENU = new Permission("CAN_EDIT_MENU", "F_EM", false, null);
        /// <summary> Удалять неотпечатанные строки. </summary>
        public static readonly Permission CAN_DELETE_NOT_PRINTED_ITEMS = new Permission("CAN_DELETE_NOT_PRINTED_ITEMS", "F_DNPI", false, null);
        /// <summary> Изменять комментарий для отпечатанных блюд. </summary>
        public static readonly Permission CAN_CHANGE_COMMENT_PRINTED = new Permission("CAN_CHANGE_COMMENT_PRINTED", "F_CCCP", false, null);
        /// <summary> Авторизовывать опасные операции вводом ПИН-кода. </summary>
        public static readonly Permission DANGEROUS_OPS_BY_PIN = new Permission("DANGEROUS_OPS_BY_PIN", "F_DOP", false, null);
        /// <summary> Авторизовывать кассовые внесения и изъятия. </summary>
        public static readonly Permission CAN_AUTH_PAY_IN_OUT = new Permission("CAN_AUTH_PAY_IN_OUT", "F_APIO", false, null);
        /// <summary> Редактировать явки сотрудников. </summary>
        public static readonly Permission CAN_EDIT_TIMETABLE = new Permission("CAN_EDIT_TIMETABLE", "F_CVS", false, null);
        /// <summary> Подтверждать открытие и закрытие персональной смены по ПИН-коду. </summary>
        public static readonly Permission CAN_OPEN_PESONAL_SESSION_BY_PIN = new Permission("CAN_OPEN_PESONAL_SESSION_BY_PIN", "F_OPIN", false, null);
        /// <summary> Печатать X-отчет. </summary>
        public static readonly Permission CAN_RECALCULATE_AND_X_REPORT = new Permission("CAN_RECALCULATE_AND_X_REPORT", "F_XR", false, null);
        /// <summary> Работать с командами фискального регистратора. </summary>
        public static readonly Permission CAN_EXECUTE_FISCAL_REGISTER_COMMANDS = new Permission("CAN_EXECUTE_FISCAL_REGISTER_COMMANDS", "F_FRC", false, null);
        /// <summary> Просматривать отчеты по резервам. </summary>
        public static readonly Permission CAN_VIEW_RESERVES_REPORTS = new Permission("CAN_VIEW_RESERVES_REPORTS", "F_VRRP", false, null);
        /// <summary> Открывать денежный ящик. </summary>
        public static readonly Permission CAN_OPEN_DRAWER = new Permission("CAN_OPEN_DRAWER", "F_DR", false, null);
        /// <summary> Просматривать резервы и банкеты. </summary>
        public static readonly Permission CAN_VIEW_RESERVES = new Permission("CAN_VIEW_RESERVES", "F_VRS", false, null);
        /// <summary> Редактировать резервы и банкеты. </summary>
        public static readonly Permission CAN_EDIT_RESERVES = new Permission("CAN_EDIT_RESERVES", "F_ERS", false, null);
        /// <summary> Принимать топливо от бензовоза и управлять ТРК. </summary>
        public static readonly Permission CAN_ACCEPT_PETROL = new Permission("CAN_ACCEPT_PETROL", "F_AP", false, null);
        /// <summary> Выполнять ручные операции с ТРК. </summary>
        public static readonly Permission CAN_PROCESS_MANUAL_PETROL_OPERATIONS = new Permission("CAN_PROCESS_MANUAL_PETROL_OPERATIONS", "F_PMPO", false, null);
        /// <summary> Настраивать штрихкоды фасовок. </summary>
        public static readonly Permission CAN_EDIT_BARCODES = new Permission("CAN_EDIT_BARCODES", "F_EBC", false, null);
        /// <summary> Запускать Office из Терминала. </summary>
        public static readonly Permission CAN_RUN_OFFICE = new Permission("CAN_RUN_OFFICE", "F_RUOFF", false, null);
        /// <summary> Видеть оборот других официантов в экране столов. </summary>
        public static readonly Permission CAN_SEE_WAITERS_AMOUNT = new Permission("CAN_SEE_WAITERS_AMOUNT", "F_SWA", false, null);
        /// <summary> Сменять номер стола с отпечатанными блюдами. </summary>
        public static readonly Permission CAN_MOVE_PRINTED = new Permission("CAN_MOVE_PRINTED", "F_CMP", false, null);
        /// <summary> Открывать несколько заказов на один стол. </summary>
        public static readonly Permission OPEN_MULTIPLE_ORDERS_ON_TABLE = new Permission("OPEN_MULTIPLE_ORDERS_ON_TABLE", "F_OMO", false, null);
        /// <summary> Авторизовывать опасные операции, связанные с отменой пречека. </summary>
        public static readonly Permission CAN_CANCEL_BILL = new Permission("CAN_CANCEL_BILL", "F_CCB", false, null);
        /// <summary> Объединять столы с отпечатанными блюдами. </summary>
        public static readonly Permission CAN_MERGE_PRINTED = new Permission("CAN_MERGE_PRINTED", "F_MPR", false, null);
        /// <summary> Переносить любые заказы на следующую кассовую смену. </summary>
        public static readonly Permission CAN_CLOSE_SESSION_WITH_UNCLOSED_ORDERS = new Permission("CAN_CLOSE_SESSION_WITH_UNCLOSED_ORDERS", "F_CSUO", false, null);
        /// <summary> Переносить заказы без пречека на следующую кассовую смену. </summary>
        public static readonly Permission CAN_CLOSE_SESSION_WITH_UNCLOSED_UNBILLED_ORDERS = new Permission("CAN_CLOSE_SESSION_WITH_UNCLOSED_UNBILLED_ORDERS", "F_CSUUO", false, null);
        /// <summary> Выключать терминал. </summary>
        public static readonly Permission CAN_SHUTDOWN_TERMINAL = new Permission("CAN_SHUTDOWN_TERMINAL", "F_CST", false, null);
        /// <summary> Закрывать приложение. </summary>
        public static readonly Permission CAN_CLOSE_APPLICATION = new Permission("CAN_CLOSE_APPLICATION", "F_CA", false, null);
        /// <summary> Автоматически закрывать заказы в кредит при закрытии смены. </summary>
        public static readonly Permission AUTO_CLOSE_ORDERS_IN_CREDIT = new Permission("AUTO_CLOSE_ORDERS_IN_CREDIT", "F_ACO", false, null);
        /// <summary> Игнорировать лимит суммы чека. </summary>
        public static readonly Permission EXCEED_CHECK_LIMIT = new Permission("EXCEED_CHECK_LIMIT", "F_ECL", false, null);
        /// <summary> Проводить операции с картами бонусно-депозитной системы по номеру карты. </summary>
        public static readonly Permission CAN_DEPOSIT_PAYMENT_BY_CARD_NUMBER = new Permission("CAN_DEPOSIT_PAYMENT_BY_CARD_NUMBER", "D_DOCN", false, null);
        /// <summary> Подтверждать начисление бонусных баллов. </summary>
        public static readonly Permission CAN_APPROVE_POINTS_ACCURAL = new Permission("CAN_APPROVE_POINTS_ACCURAL", "F_APA", false, null);
        /// <summary> Видеть свою заработную плату на личной странице. </summary>
        public static readonly Permission CAN_VIEW_PERSONAL_SALARY_DATA = new Permission("CAN_VIEW_PERSONAL_SALARY_DATA", "F_VPSD", false, null);
        /// <summary> Видеть задолженности всех официантов. </summary>
        public static readonly Permission CAN_SEE_WAITERS_DEBT = new Permission("CAN_SEE_WAITERS_DEBT", "F_SWD", false, null);
        /// <summary> Подтверждать закрытие ЛС, если у сотрудника есть задолженность. </summary>
        public static readonly Permission CAN_CLOCK_OUT_WITH_DEBT = new Permission("CAN_CLOCK_OUT_WITH_DEBT", "F_COWD", false, null);
        /// <summary> Принимать оплату в качестве официанта. </summary>
        public static readonly Permission CAN_PAY_AS_WAITER = new Permission("CAN_PAY_AS_WAITER", "F_PAW", false, null);
        /// <summary> Просматривать расширенный отчет реестра счетов. </summary>
        public static readonly Permission CAN_VIEW_REGISTER_EXT_REPORT = new Permission("CAN_VIEW_REGISTER_EXT_REPORT", "F_REREP", false, null);
        /// <summary> Продавать блюда без учета расписания прейскуранта. </summary>
        public static readonly Permission CAN_IGNORE_PRICE_SCHEDULE = new Permission("CAN_IGNORE_PRICE_SCHEDULE", "F_IPS", false, null);
        /// <summary> Подтверждать работу в должности вне расписания. </summary>
        public static readonly Permission CAN_CONFIRM_WORK_AS_UNSCHEDULED = new Permission("CAN_CONFIRM_WORK_AS_UNSCHEDULED", "F_CWAUS", false, null);
        /// <summary> Разрешать вводить дробное количество товара. </summary>
        public static readonly Permission CAN_ENTER_FRACTIONAL_PRODUCT_AMOUNT = new Permission("CAN_ENTER_FRACTIONAL_PRODUCT_AMOUNT", "F_EFA", false, null);
        /// <summary> Вскрывать тару. </summary>
        public static readonly Permission CAN_UNSEAL_BOTTLE = new Permission("CAN_UNSEAL_BOTTLE", "F_CUB", false, RegionalFeatureId.EGAIS);
        /// <summary> Настраивать оборудование. </summary>
        public static readonly Permission CAN_SETUP_HARDWARE = new Permission("CAN_SETUP_HARDWARE", "F_HS", false, null);
        /// <summary> Просматривать кухонный экран. </summary>
        public static readonly Permission CAN_VIEW_KITCHEN_DISPLAY = new Permission("CAN_VIEW_KITCHEN_DISPLAY", "F_KDS", false, null);
        /// <summary> Редактировать настройки кухонного экрана. </summary>
        public static readonly Permission CAN_EDIT_KITCHEN_SETTINGS = new Permission("CAN_EDIT_KITCHEN_SETTINGS", "F_EKDS", false, null);
        /// <summary> Работа с финансами. </summary>
        public static readonly Permission CAN_ACCESS_FINANCES = new Permission("CAN_ACCESS_FINANCES", "B_FIN", false, null);
        /// <summary> Просматривать план счетов. </summary>
        public static readonly Permission CAN_VIEW_CHART_OF_ACCOUNTS = new Permission("CAN_VIEW_CHART_OF_ACCOUNTS", "B_VCOA", false, null);
        /// <summary> Редактировать план счетов. </summary>
        public static readonly Permission CAN_EDIT_CHART_OF_ACCOUNTS = new Permission("CAN_EDIT_CHART_OF_ACCOUNTS", "B_ECOA", false, null);
        /// <summary> Открывать счет. </summary>
        public static readonly Permission CAN_VIEW_CASH_BOOK = new Permission("CAN_VIEW_CASH_BOOK", "B_MCB", false, null);
        /// <summary> Создавать и менять ручные проводки по счетам. </summary>
        public static readonly Permission CAN_EDIT_CASH_BOOK = new Permission("CAN_EDIT_CASH_BOOK", "B_ECB", false, null);
        /// <summary> Просматривать отчет ДДС. </summary>
        public static readonly Permission CAN_VIEW_CASH_FLOW_REPORT = new Permission("CAN_VIEW_CASH_FLOW_REPORT", "B_VCFR", false, null);
        /// <summary> Просматривать балансовый отчет. </summary>
        public static readonly Permission CAN_VIEW_BALANCE_SHEET_REPORT = new Permission("CAN_VIEW_BALANCE_SHEET_REPORT", "B_VBALR", false, null);
        /// <summary> Просматривать отчет о прибылях и убытках. </summary>
        public static readonly Permission CAN_VIEW_PANDL_REPORT = new Permission("CAN_VIEW_PANDL_REPORT", "B_VPLR", false, null);
        /// <summary> Просматривать OLAP-отчет по проводкам. </summary>
        public static readonly Permission CAN_VIEW_OLAP_TRANSACTIONS_REPORT = new Permission("CAN_VIEW_OLAP_TRANSACTIONS_REPORT", "B_VOTR", false, null);
        /// <summary> Редактировать статьи ДДС. </summary>
        public static readonly Permission CAN_EDIT_CASH_FLOW_ARTICLES = new Permission("CAN_EDIT_CASH_FLOW_ARTICLES", "B_ECFA", false, null);
        /// <summary> Возможность создавать и редактировать услуги. </summary>
        public static readonly Permission CAN_CREATE_AND_EDIT_SERVICES = new Permission("CAN_CREATE_AND_EDIT_SERVICES", "B_ESRV", false, null);
        /// <summary> Просматривать акты приема и оказания услуг. </summary>
        public static readonly Permission CAN_VIEW_SERVICES = new Permission("CAN_VIEW_SERVICES", "B_SRVV", false, null);
        /// <summary> Создавать, редактировать и сохранять без проведения акты приема и оказания услуг. </summary>
        public static readonly Permission CAN_CREATE_AND_EDIT_SERVICES_WITHOUT_PROCESSING = new Permission("CAN_CREATE_AND_EDIT_SERVICES_WITHOUT_PROCESSING", "B_SRVC", false, null);
        /// <summary> Проводить акты приема и оказания услуг. </summary>
        public static readonly Permission CAN_PROCESS_SERVICES = new Permission("CAN_PROCESS_SERVICES", "B_SRVR", false, null);
        /// <summary> Работать с сервисным сбором. </summary>
        public static readonly Permission CAN_WORK_WITH_SERVICE_FEE = new Permission("CAN_WORK_WITH_SERVICE_FEE", "B_SCH", false, null);
        /// <summary> Работа с товарами и складами. </summary>
        public static readonly Permission CAN_ACCESS_INVENTORY = new Permission("CAN_ACCESS_INVENTORY", "B_STO", false, null);
        /// <summary> Редактирование номенклатурных справочников. </summary>
        public static readonly Permission CAN_EDIT_NOMENCLATURE = new Permission("CAN_EDIT_NOMENCLATURE", "B_EN", true, null);
        /// <summary> Просмотр номенклатурных справочников. </summary>
        public static readonly Permission CAN_VIEW_NOMENCLATURE = new Permission("CAN_VIEW_NOMENCLATURE", "B_VN", true, null);
        /// <summary> Создавать категории блюд. </summary>
        public static readonly Permission CAN_CREATE_PRODUCT_CATEGORY = new Permission("CAN_CREATE_PRODUCT_CATEGORY", "B_CPC", true, null);
        /// <summary> Проводить расход с образованием отрицательных остатков. </summary>
        public static readonly Permission CAN_WRITEOFF_TO_NEGATIVE_BALANCES = new Permission("CAN_WRITEOFF_TO_NEGATIVE_BALANCES", "B_WNB", true, null);
        /// <summary> Проводить приход на отрицательные остатки. </summary>
        public static readonly Permission CAN_INCOME_ON_NEGATIVE_BALANCES = new Permission("CAN_INCOME_ON_NEGATIVE_BALANCES", "B_INB", true, null);
        /// <summary> Проводить накладные с отклонением в ценах от прайс-листа, если это запрещено. </summary>
        public static readonly Permission CAN_TRANSACT_INVOICE_WITH_DEVIATED_PRICE = new Permission("CAN_TRANSACT_INVOICE_WITH_DEVIATED_PRICE", "B_TID", false, null);
        /// <summary> Просматривать все типы номенклатуры в документах. </summary>
        public static readonly Permission CAN_VIEW_ALLTYPES_IN_DOCUMENT = new Permission("CAN_VIEW_ALLTYPES_IN_DOCUMENT", "B_CAD", true, null);
        /// <summary> Изменять прайс-листы. </summary>
        public static readonly Permission CAN_CHANGE_PRICE_LISTS = new Permission("CAN_CHANGE_PRICE_LISTS", "B_CHL", false, null);
        /// <summary> Создавать и редактировать акты списания. </summary>
        public static readonly Permission CAN_ACCESS_WRITEOFF_CREATE = new Permission("CAN_ACCESS_WRITEOFF_CREATE", "B_WOFFC", true, null);
        /// <summary> Просматривать акты списания. </summary>
        public static readonly Permission CAN_ACCESS_WRITEOFF_VIEW = new Permission("CAN_ACCESS_WRITEOFF_VIEW", "B_WOFFV", true, null);
        /// <summary> Проводить акты списания. </summary>
        public static readonly Permission CAN_ACCESS_WRITEOFF_REALIZATION = new Permission("CAN_ACCESS_WRITEOFF_REALIZATION", "B_WOFFR", true, null);
        /// <summary> Создавать и редактировать акты переработки. </summary>
        public static readonly Permission CAN_ACCESS_TRANSFORMATION_CREATE = new Permission("CAN_ACCESS_TRANSFORMATION_CREATE", "B_TRANSC", true, null);
        /// <summary> Просматривать акты переработки. </summary>
        public static readonly Permission CAN_ACCESS_TRANSFORMATION_VIEW = new Permission("CAN_ACCESS_TRANSFORMATION_VIEW", "B_TRANSV", true, null);
        /// <summary> Проводить акты переработки. </summary>
        public static readonly Permission CAN_ACCESS_TRANSFORMATION_REALIZATION = new Permission("CAN_ACCESS_TRANSFORMATION_REALIZATION", "B_TRANSR", true, null);
        /// <summary> Создавать и редактировать акты приготовления. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION_CREATE = new Permission("CAN_ACCESS_PRODUCTION_CREATE", "B_PRODNC", true, null);
        /// <summary> Просматривать акты приготовления. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION_VIEW = new Permission("CAN_ACCESS_PRODUCTION_VIEW", "B_PRODNV", true, null);
        /// <summary> Проводить акты приготовления. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION_REALIZATION = new Permission("CAN_ACCESS_PRODUCTION_REALIZATION", "B_PRODNR", true, null);
        /// <summary> Создавать и редактировать акты реализации. </summary>
        public static readonly Permission CAN_ACCESS_SALES_CREATE = new Permission("CAN_ACCESS_SALES_CREATE", "B_SALEC", true, null);
        /// <summary> Просматривать акты реализации. </summary>
        public static readonly Permission CAN_ACCESS_SALES_VIEW = new Permission("CAN_ACCESS_SALES_VIEW", "B_SALEV", true, null);
        /// <summary> Проводить акты реализации. </summary>
        public static readonly Permission CAN_ACCESS_SALES_REALIZATION = new Permission("CAN_ACCESS_SALES_REALIZATION", "B_SALER", true, null);
        /// <summary> Создавать и редактировать внутренние перемещения. </summary>
        public static readonly Permission CAN_ACCESS_INTERNAL_INVOICES_CREATE = new Permission("CAN_ACCESS_INTERNAL_INVOICES_CREATE", "B_INTINVC", true, null);
        /// <summary> Просматривать внутренние перемещения. </summary>
        public static readonly Permission CAN_ACCESS_INTERNAL_INVOICES_VIEW = new Permission("CAN_ACCESS_INTERNAL_INVOICES_VIEW", "B_INTINVV", true, null);
        /// <summary> Проводить внутреннее перемещение. </summary>
        public static readonly Permission CAN_ACCESS_INTERNAL_INVOICES_REALIZATION = new Permission("CAN_ACCESS_INTERNAL_INVOICES_REALIZATION", "B_INTINVR", true, null);
        /// <summary> Разрешать создавать внутренние перемещения со складами из разных торговых предприятий. </summary>
        public static readonly Permission CAN_CREATE_MULTIDEPARTMENT_INTERNAL_INVOICES = new Permission("CAN_CREATE_MULTIDEPARTMENT_INTERNAL_INVOICES", "B_CRMULTII", true, null);
        /// <summary> Создавать и редактировать накладные. </summary>
        public static readonly Permission CAN_ACCESS_INVOICE_CREATE = new Permission("CAN_ACCESS_INVOICE_CREATE", "B_INVC", true, null);
        /// <summary> Просматривать накладные. </summary>
        public static readonly Permission CAN_ACCESS_INVOICE_VIEW = new Permission("CAN_ACCESS_INVOICE_VIEW", "B_INVV", true, null);
        /// <summary> Проводить накладные. </summary>
        public static readonly Permission CAN_ACCESS_INVOICE_REALIZATION = new Permission("CAN_ACCESS_INVOICE_REALIZATION", "B_INVR", true, null);
        /// <summary> Оплачивать накладные. </summary>
        public static readonly Permission CAN_ACCESS_INVOICE_PAYMENT = new Permission("CAN_ACCESS_INVOICE_PAYMENT", "B_INVP", true, null);
        /// <summary> Создавать и редактировать возвратные накладные. </summary>
        public static readonly Permission CAN_ACCESS_RETURNEDINVOICE_CREATE = new Permission("CAN_ACCESS_RETURNEDINVOICE_CREATE", "B_RINVC", true, null);
        /// <summary> Просматривать возвратные накладные. </summary>
        public static readonly Permission CAN_ACCESS_RETURNEDINVOICE_VIEW = new Permission("CAN_ACCESS_RETURNEDINVOICE_VIEW", "B_RINVV", true, null);
        /// <summary> Проводить возвратные накладные. </summary>
        public static readonly Permission CAN_ACCESS_RETURNEDINVOICE_REALIZATION = new Permission("CAN_ACCESS_RETURNEDINVOICE_REALIZATION", "B_RINVR", true, null);
        /// <summary> Редактирование документов задним числом. </summary>
        public static readonly Permission CAN_EDIT_BACKDATE_DOCUMENTS = new Permission("CAN_EDIT_BACKDATE_DOCUMENTS", "B_EBDD", true, null);
        /// <summary> Редактировать номера документов. </summary>
        public static readonly Permission CAN_EDIT_DOCUMENT_NUMBER = new Permission("CAN_EDIT_DOCUMENT_NUMBER", "B_CEDN", true, null);
        /// <summary> Редактировать время документа. </summary>
        public static readonly Permission CAN_EDIT_DOCUMENT_TIME = new Permission("CAN_EDIT_DOCUMENT_TIME", "B_CEDT", true, null);
        /// <summary> Работать с уточненными документами. </summary>
        public static readonly Permission CAN_WORK_WITH_CORRECTED_DOCUMENTS = new Permission("CAN_WORK_WITH_CORRECTED_DOCUMENTS", "B_WWCD", false, null);
        /// <summary> Создавать и редактировать акты разбора. </summary>
        public static readonly Permission CAN_ACCESS_DISASSEMBLES_CREATE = new Permission("CAN_ACCESS_DISASSEMBLES_CREATE", "B_DASMC", true, null);
        /// <summary> Просматривать акты разбора. </summary>
        public static readonly Permission CAN_ACCESS_DISASSEMBLES_VIEW = new Permission("CAN_ACCESS_DISASSEMBLES_VIEW", "B_DASMV", true, null);
        /// <summary> Проводить акты разбора. </summary>
        public static readonly Permission CAN_ACCESS_DISASSEMBLES_REALIZATION = new Permission("CAN_ACCESS_DISASSEMBLES_REALIZATION", "B_DASMR", true, null);
        /// <summary> Создавать и редактировать ведомости полуфабрикатов. </summary>
        public static readonly Permission CAN_ACCESS_PREPAREDREGISTER_CREATE = new Permission("CAN_ACCESS_PREPAREDREGISTER_CREATE", "B_APRC", true, null);
        /// <summary> Просматривать ведомости полуфабрикатов. </summary>
        public static readonly Permission CAN_ACCESS_PREPAREDREGISTER_VIEW = new Permission("CAN_ACCESS_PREPAREDREGISTER_VIEW", "B_APRV", true, null);
        /// <summary> Проводить ведомости полуфабрикатов. </summary>
        public static readonly Permission CAN_ACCESS_PREPAREDREGISTER_REALIZATION = new Permission("CAN_ACCESS_PREPAREDREGISTER_REALIZATION", "B_APRR", true, null);
        /// <summary> Редактировать общие OLAP-отчеты. </summary>
        public static readonly Permission CAN_EDIT_SHARED_OLAP_REPORTS = new Permission("CAN_EDIT_SHARED_OLAP_REPORTS", "B_ESOR", false, null);
        /// <summary> Создавать и редактировать возврат от покупателя. </summary>
        public static readonly Permission CAN_ACCESS_INCOMING_RETURNED_INV_CREATE = new Permission("CAN_ACCESS_INCOMING_RETURNED_INV_CREATE", "B_RPURC", true, null);
        /// <summary> Просматривать возврат от покупателя. </summary>
        public static readonly Permission CAN_ACCESS_INCOMING_RETURNED_INV_VIEW = new Permission("CAN_ACCESS_INCOMING_RETURNED_INV_VIEW", "B_RPURV", true, null);
        /// <summary> Проводить возврат от покупателя. </summary>
        public static readonly Permission CAN_ACCESS_INCOMING_RETURNED_INV_REALIZATION = new Permission("CAN_ACCESS_INCOMING_RETURNED_INV_REALIZATION", "B_RPURR", true, null);
        /// <summary> Просматривать внутренний прайс-лист. </summary>
        public static readonly Permission CAN_VIEW_INDEPENDENT_PRICE_LIST = new Permission("CAN_VIEW_INDEPENDENT_PRICE_LIST", "B_IPLV", false, null);
        /// <summary> Открывать Меркурий.ХС. </summary>
        public static readonly Permission CAN_ACCESS_MERCURY = new Permission("CAN_ACCESS_MERCURY", "B_AMERC", false, RegionalFeatureId.MERCURY);
        /// <summary> Создавать/редактировать заявки платежного календаря. </summary>
        public static readonly Permission CAN_EDIT_SCHEDULED_PAYMENTS_REQUEST = new Permission("CAN_EDIT_SCHEDULED_PAYMENTS_REQUEST", "B_ESPR", false, null);
        /// <summary> Просматривать список заявок платежного календаря. </summary>
        public static readonly Permission CAN_VIEW_SCHEDULED_PAYMENTS_REQUEST = new Permission("CAN_VIEW_SCHEDULED_PAYMENTS_REQUEST", "B_VSPR", false, null);
        /// <summary> Создавать/редактировать платежи. </summary>
        public static readonly Permission CAN_EDIT_SCHEDULED_PAYMENTS = new Permission("CAN_EDIT_SCHEDULED_PAYMENTS", "B_ESP", false, null);
        /// <summary> Просматривать список платежей. </summary>
        public static readonly Permission CAN_VIEW_SCHEDULED_PAYMENTS = new Permission("CAN_VIEW_SCHEDULED_PAYMENTS", "B_VSP", false, null);
        /// <summary> Просматривать платежный календарь. </summary>
        public static readonly Permission CAN_VIEW_SCHEDULED_PAYMENTS_CHART = new Permission("CAN_VIEW_SCHEDULED_PAYMENTS_CHART", "B_VSPC", false, null);
        /// <summary> Создавать/редактировать поступления. </summary>
        public static readonly Permission CAN_EDIT_SCHEDULED_INCOMINGS = new Permission("CAN_EDIT_SCHEDULED_INCOMINGS", "B_ESI", false, null);
        /// <summary> Просматривать список поступлений. </summary>
        public static readonly Permission CAN_VIEW_SCHEDULED_INCOMINGS = new Permission("CAN_VIEW_SCHEDULED_INCOMINGS", "B_VSI", false, null);
        /// <summary> Создавать и редактировать заказы в производство. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTIONORDER_CREATE = new Permission("CAN_ACCESS_PRODUCTIONORDER_CREATE", "B_APOC", true, null);
        /// <summary> Просматривать ведомости заказы в производство. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTIONORDER_VIEW = new Permission("CAN_ACCESS_PRODUCTIONORDER_VIEW", "B_APOV", true, null);
        /// <summary> Проводить ведомости заказы в производство. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTIONORDER_REALIZATION = new Permission("CAN_ACCESS_PRODUCTIONORDER_REALIZATION", "B_APOR", true, null);
        /// <summary> Редактировать заказы в производство после проведения. </summary>
        public static readonly Permission CAN_EDIT_PROCESSED_PRODUCTIONORDER = new Permission("CAN_EDIT_PROCESSED_PRODUCTIONORDER", "B_CEPPO", true, null);
        /// <summary> Просматривать акты приема топлива. </summary>
        public static readonly Permission CAN_VIEW_FUEL_ACCEPTANCE = new Permission("CAN_VIEW_FUEL_ACCEPTANCE", "B_VFAD", true, null);
        /// <summary> Создавать и редактировать акты приема топлива. </summary>
        public static readonly Permission CAN_CREATE_FUEL_ACCEPTANCE = new Permission("CAN_CREATE_FUEL_ACCEPTANCE", "B_CFAD", true, null);
        /// <summary> Ручной ввод в акт приема топлива. </summary>
        public static readonly Permission CAN_MANUAL_EDIT_FUEL_ACCEPTANCE = new Permission("CAN_MANUAL_EDIT_FUEL_ACCEPTANCE", "B_MEFAD", true, null);
        /// <summary> Просматривать акты замера топлива. </summary>
        public static readonly Permission CAN_VIEW_FUEL_GAGING = new Permission("CAN_VIEW_FUEL_GAGING", "B_VFCA", true, null);
        /// <summary> Создавать и редактировать акты замера топлива. </summary>
        public static readonly Permission CAN_CREATE_FUEL_GAGING = new Permission("CAN_CREATE_FUEL_GAGING", "B_VECA", true, null);
        /// <summary> Закрывать период. </summary>
        public static readonly Permission CAN_CLOSE_PERIOD = new Permission("CAN_CLOSE_PERIOD", "B_CCLP", true, null);
        /// <summary> Работать с документами в закрытом периоде. </summary>
        public static readonly Permission CAN_CHANGE_DOCUMENTS_IN_CLOSING_PERIOD = new Permission("CAN_CHANGE_DOCUMENTS_IN_CLOSING_PERIOD", "B_WCP", true, null);
        /// <summary> Создавать документы в кассовой смене вне учетного дня. </summary>
        public static readonly Permission CAN_CREATE_DOCUMENTS_OUT_OF_INVENTORY_DAY = new Permission("CAN_CREATE_DOCUMENTS_OUT_OF_INVENTORY_DAY", "F_CDOID", false, null);
        /// <summary> Редактировать проведенные приходные накладные. </summary>
        public static readonly Permission CAN_EDIT_PROCESSED_INCOMING_INVOICES = new Permission("CAN_EDIT_PROCESSED_INCOMING_INVOICES", "B_INVE", true, null);
        /// <summary> Редактировать проведенные расходные накладные. </summary>
        public static readonly Permission CAN_EDIT_PROCESSED_OUTGOING_INVOICES = new Permission("CAN_EDIT_PROCESSED_OUTGOING_INVOICES", "B_OINVE", true, null);
        /// <summary> Редактировать проведенные внутренние перемещения. </summary>
        public static readonly Permission CAN_EDIT_PROCESSED_INTERNAL_INVOICES = new Permission("CAN_EDIT_PROCESSED_INTERNAL_INVOICES", "B_INTE", true, null);
        /// <summary> Редактировать проведенные акты списания. </summary>
        public static readonly Permission CAN_EDIT_PROCESSED_WRITEOFFS = new Permission("CAN_EDIT_PROCESSED_WRITEOFFS", "B_WOFFE", true, null);
        /// <summary> Работа с производством и логистикой. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION = new Permission("CAN_ACCESS_PRODUCTION", "B_PRO", false, null);
        /// <summary> Создавать заказы от подразделения. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION_ORDERS_FROM = new Permission("CAN_ACCESS_PRODUCTION_ORDERS_FROM", "B_PRORF", true, null);
        /// <summary> Создавать заказы на подразделение. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION_ORDERS_TO = new Permission("CAN_ACCESS_PRODUCTION_ORDERS_TO", "B_PRORT", true, null);
        /// <summary> Работа с бланками заказов. </summary>
        public static readonly Permission CAN_ACCESS_PRODUCTION_BLANKS = new Permission("CAN_ACCESS_PRODUCTION_BLANKS", "B_PRB", true, null);
        /// <summary> Работа со сводными заказами. </summary>
        public static readonly Permission CAN_ACCESS_CONSOLIDATED_ORDERS = new Permission("CAN_ACCESS_CONSOLIDATED_ORDERS", "B_CNOR", true, null);
        /// <summary> Проводить просроченные заказы. </summary>
        public static readonly Permission CAN_ACCESS_OVERDUE_ORDERS = new Permission("CAN_ACCESS_OVERDUE_ORDERS", "B_OVOR", true, null);
        /// <summary> Производить отгрузку заказов. </summary>
        public static readonly Permission CAN_SHIP_ORDERS = new Permission("CAN_SHIP_ORDERS", "B_SHIP", true, null);
        /// <summary> Редактировать прейскуранты. </summary>
        public static readonly Permission CAN_READ_MENU_ORDERS = new Permission("CAN_READ_MENU_ORDERS", "B_ROMENOR", true, null);
        /// <summary> Просматривать прейскуранты. </summary>
        public static readonly Permission CAN_ACCESS_MENU_ORDERS = new Permission("CAN_ACCESS_MENU_ORDERS", "B_MENOR", true, null);
        /// <summary> Проводить приказы об изменении прейскуранта. </summary>
        public static readonly Permission CAN_PROCESS_MENU_ORDERS = new Permission("CAN_PROCESS_MENU_ORDERS", "B_PMENOR", true, null);
        /// <summary> Просматривать быстрое меню. </summary>
        public static readonly Permission CAN_VIEW_QUICK_MENU = new Permission("CAN_VIEW_QUICK_MENU", "B_QMENU", true, null);
        /// <summary> Заполнение инвентаризационной ведомости книжными остатками. </summary>
        public static readonly Permission CAN_FILL_INVENTORY_BY_REMAINS = new Permission("CAN_FILL_INVENTORY_BY_REMAINS", "B_FIBR", true, null);
        /// <summary> Доступ к разделу \"Сотрудники\". </summary>
        public static readonly Permission CAN_ACCESS_PERSONNEL = new Permission("CAN_ACCESS_PERSONNEL", "B_PER", false, null);
        /// <summary> Работа со справочником гостей. </summary>
        public static readonly Permission CAN_ACCESS_GUEST = new Permission("CAN_ACCESS_GUEST", "B_GUEST", false, null);
        /// <summary> Экспорт списка гостей в Excel. </summary>
        public static readonly Permission CAN_EXPORT_GUESTS_LIST = new Permission("CAN_EXPORT_GUESTS_LIST", "B_EGL", false, null);
        /// <summary> Работа с данными о поставщиках. </summary>
        public static readonly Permission CAN_ACCESS_SUPPLIER = new Permission("CAN_ACCESS_SUPPLIER", "B_SUPP", false, null);
        /// <summary> Просматривать финансовые данные сотрудников. </summary>
        public static readonly Permission CAN_READ_EMPLOYEES_PAYMENT = new Permission("CAN_READ_EMPLOYEES_PAYMENT", "B_REP", true, null);
        /// <summary> Редактировать финансовые данные сотрудников. </summary>
        public static readonly Permission CAN_EDIT_EMPLOYEES_PAYMENT = new Permission("CAN_EDIT_EMPLOYEES_PAYMENT", "B_EEP", true, null);
        /// <summary> Редактирование и удаление карточек сотрудников и редактирование контрагентов. </summary>
        public static readonly Permission CAN_EDIT_EMPLOYEES = new Permission("CAN_EDIT_EMPLOYEES", "B_EE", false, null);
        /// <summary> Просмотр списка и карточек сотрудников. </summary>
        public static readonly Permission CAN_VIEW_EMPLOYEES = new Permission("CAN_VIEW_EMPLOYEES", "B_VE", false, null);
        /// <summary> Доступ к разделу \"Основные данные\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_MAIN = new Permission("CAN_ACCESS_USER_CARD_MAIN", "B_UCM", false, null);
        /// <summary> Доступ к разделу \"Дополнительные сведения\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_ADDITIONAL_INFORMATION = new Permission("CAN_ACCESS_USER_CARD_ADDITIONAL_INFORMATION", "B_UCADI", false, null);
        /// <summary> Доступ к разделу \"Паспорт/Лицензия\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_PASSPORT = new Permission("CAN_ACCESS_USER_CARD_PASSPORT", "B_UCDOC", false, null);
        /// <summary> Доступ к разделу \"Фото\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_PHOTO = new Permission("CAN_ACCESS_USER_CARD_PHOTO", "B_UCPH", false, null);
        /// <summary> Доступ к разделу \"Доступность\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_AVAILABILITY = new Permission("CAN_ACCESS_USER_CARD_AVAILABILITY", "B_UCA", false, null);
        /// <summary> Доступ к разделу \"Медкнижки и анализы\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_MEDICAL_ANALYSIS = new Permission("CAN_ACCESS_USER_CARD_MEDICAL_ANALYSIS", "B_UCMB", false, null);
        /// <summary> Доступ к разделу \"Контроль цен\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_PRICE_CONTROL = new Permission("CAN_ACCESS_USER_CARD_PRICE_CONTROL", "B_UCPC", false, null);
        /// <summary> Доступ к разделу \"Юр. лицо\" в карточке контрагента. </summary>
        public static readonly Permission CAN_ACCESS_USER_CARD_JUR_PERSON = new Permission("CAN_ACCESS_USER_CARD_JUR_PERSON", "B_UCLE", false, null);
        /// <summary> Просматривать права. </summary>
        public static readonly Permission CAN_VIEW_PERMISSIONS = new Permission("CAN_VIEW_PERMISSIONS", "B_VP", true, null);
        /// <summary> Редактировать права. </summary>
        public static readonly Permission CAN_EDIT_PERMISSIONS = new Permission("CAN_EDIT_PERMISSIONS", "B_EP", true, null);
        /// <summary> Просматривать роли сотрудников. </summary>
        public static readonly Permission CAN_VIEW_ROLES = new Permission("CAN_VIEW_ROLES", "B_CVR", false, null);
        /// <summary> Просматривать типы смен. </summary>
        public static readonly Permission CAN_VIEW_SESSION_TYPES = new Permission("CAN_VIEW_SESSION_TYPES", "B_CVST", false, null);
        /// <summary> Просматривать типы явок. </summary>
        public static readonly Permission CAN_VIEW_ATTENDANCE_TYPES = new Permission("CAN_VIEW_ATTENDANCE_TYPES", "B_CVAT", false, null);
        /// <summary> Просматривать типы штрафов. </summary>
        public static readonly Permission CAN_VIEW_PENALTIE_TYPES = new Permission("CAN_VIEW_PENALTIE_TYPES", "B_CVPT", false, null);
        /// <summary> Просматривать типы премий. </summary>
        public static readonly Permission CAN_VIEW_BONUS_TYPES = new Permission("CAN_VIEW_BONUS_TYPES", "B_CVBT", false, null);
        /// <summary> Видимость подменю \"Сотрудники\" — \"Журналы\". </summary>
        public static readonly Permission CAN_VIEW_EMPLOYEES_JOURNAL = new Permission("CAN_VIEW_EMPLOYEES_JOURNAL", "B_CVEJ", false, null);
        /// <summary> Изменять ставки оплат, расписание и явки в закрытом периоде. </summary>
        public static readonly Permission CAN_EDIT_EMPLOYEES_JOURNAL_IN_CLOSING_PERIOD = new Permission("CAN_EDIT_EMPLOYEES_JOURNAL_IN_CLOSING_PERIOD", "B_EAP", false, null);
        /// <summary> Планировать смены и расписания. </summary>
        public static readonly Permission CAN_ACCESS_SCHEDULES = new Permission("CAN_ACCESS_SCHEDULES", "B_SCHED", false, null);
        /// <summary> Отмечать явку. </summary>
        public static readonly Permission CAN_ACCESS_ATTENDANCES = new Permission("CAN_ACCESS_ATTENDANCES", "B_TIME", false, null);
        /// <summary> Премировать и штрафовать сотрудников с помощью журналов \"Удержания\" и \"Начисления\". </summary>
        public static readonly Permission CAN_ACCESS_BONUSES_AND_PENALTIES = new Permission("CAN_ACCESS_BONUSES_AND_PENALTIES", "B_BAP", false, null);
        /// <summary> Создавать и редактировать расчетно-платежные ведомости. </summary>
        public static readonly Permission CAN_EDIT_EMPLOYEES_PAYROLL = new Permission("CAN_EDIT_EMPLOYEES_PAYROLL", "B_EPP", true, null);
        /// <summary> Просматривать расчетно-платежные ведомости. </summary>
        public static readonly Permission CAN_VIEW_EMPLOYEES_PAYROLL = new Permission("CAN_VIEW_EMPLOYEES_PAYROLL", "B_VPP", true, null);
        /// <summary> Регистрировать начисления и выплаты сотрудникам. </summary>
        public static readonly Permission CAN_PAY_TO_EMPLOYEES = new Permission("CAN_PAY_TO_EMPLOYEES", "B_PAY", true, null);
        /// <summary> Учет медкнижек и анализов. </summary>
        public static readonly Permission CAN_ACCESS_MEDICAL_ANALYSIS = new Permission("CAN_ACCESS_MEDICAL_ANALYSIS", "B_MED", false, null);
        /// <summary> Работать с дисконтной системой. </summary>
        public static readonly Permission CAN_USE_DISCOUNT_SYSTEM = new Permission("CAN_USE_DISCOUNT_SYSTEM", "B_CUDS", false, null);
        /// <summary> Работа с контрагентами. </summary>
        public static readonly Permission CAN_ACCESS_COUNTERAGENTS = new Permission("CAN_ACCESS_COUNTERAGENTS", "B_CTR", false, null);
        /// <summary> Администрирование системы. </summary>
        public static readonly Permission CAN_ACCESS_ADMINISTRATION = new Permission("CAN_ACCESS_ADMINISTRATION", "B_ADM", false, null);
        /// <summary> Настройки учета (из Администрирования). </summary>
        public static readonly Permission CAN_EDIT_ACCOUNTING_SETTINGS = new Permission("CAN_EDIT_ACCOUNTING_SETTINGS", "B_EAS", false, null);
        /// <summary> Работа с конструктором новостей. </summary>
        public static readonly Permission CAN_EDIT_ANNOUNCEMENTS = new Permission("CAN_EDIT_ANNOUNCEMENTS", "B_EA", false, null);
        /// <summary> Отчет настроек по датам блокировки. </summary>
        public static readonly Permission CAN_VIEW_CLOSE_PERIOD_SETTINGS = new Permission("CAN_VIEW_CLOSE_PERIOD_SETTINGS", "B_VCPS", false, null);
        /// <summary> Доступ к монитору синхронизации. </summary>
        public static readonly Permission CAN_ACCESS_SYNCHRO_MONITOR = new Permission("CAN_ACCESS_SYNCHRO_MONITOR", "B_SYNC_MON", false, null);
        /// <summary> Обмен данными. </summary>
        public static readonly Permission CAN_ACCESS_EXCHANGE = new Permission("CAN_ACCESS_EXCHANGE", "B_EXC", false, null);
        /// <summary> Импортировать данные. </summary>
        public static readonly Permission CAN_IMPORT_FROM_RMS = new Permission("CAN_IMPORT_FROM_RMS", "B_RMS_IMP", false, null);
        /// <summary> Просмотр отчетов. </summary>
        public static readonly Permission CAN_ACCESS_REPORTS = new Permission("CAN_ACCESS_REPORTS", "B_RPT", false, null);
        /// <summary> Работа с розничными продажами. </summary>
        public static readonly Permission CAN_ACCESS_SALES = new Permission("CAN_ACCESS_SALES", "B_SALE", false, null);
        /// <summary> Просматривать кассовые смены. </summary>
        public static readonly Permission CAN_ACCESS_TO_CASH_OPERATIONS = new Permission("CAN_ACCESS_TO_CASH_OPERATIONS", "B_ACO", false, null);
        /// <summary> Просматривать типы внесений/изъятий. </summary>
        public static readonly Permission CAN_ACCESS_TO_PAY_IN_OUT = new Permission("CAN_ACCESS_TO_PAY_IN_OUT", "B_APIO", false, null);
        /// <summary> Просматривать типы оплаты. </summary>
        public static readonly Permission CAN_ACCESS_TO_PAYMENT_TYPES = new Permission("CAN_ACCESS_TO_PAYMENT_TYPES", "B_APT", false, null);
        /// <summary> Просматривать причины удаления. </summary>
        public static readonly Permission CAN_VIEW_DELETIONS_REASONS = new Permission("CAN_VIEW_DELETIONS_REASONS", "B_VDR", false, null);
        /// <summary> Создавать и редактировать типы чаевых. </summary>
        public static readonly Permission CAN_EDIT_TIPS_TYPE = new Permission("CAN_EDIT_TIPS_TYPE", "B_CET", false, null);
        /// <summary> Доступ к видеонаблюдению. </summary>
        public static readonly Permission CAN_VIEW_LIVE_VIDEO = new Permission("CAN_VIEW_LIVE_VIDEO", "B_VLV", false, null);
        /// <summary> Просматривать журнал событий. </summary>
        public static readonly Permission CAN_VIEW_TRANSACTIONS_JOURNAL = new Permission("CAN_VIEW_TRANSACTIONS_JOURNAL", "B_VTJ", false, null);
        /// <summary> Запускать фронт офис из бэк офиса. </summary>
        public static readonly Permission CAN_LAUNCH_FRONT_OFFICE = new Permission("CAN_LAUNCH_FRONT_OFFICE", "B_LFO", false, null);
        /// <summary> Запускать приложение DJ. </summary>
        public static readonly Permission CAN_LAUNCH_IIKO_DJ = new Permission("CAN_LAUNCH_IIKO_DJ", "B_LIDJ", false, null);
        /// <summary> Право просматривать отчеты по продажам. </summary>
        public static readonly Permission CAN_ACCESS_SALES_REPORTS = new Permission("CAN_ACCESS_SALES_REPORTS", "B_CASR", false, null);
        /// <summary> Просматривать инвентаризации. </summary>
        public static readonly Permission CAN_VIEW_INVENTORY = new Permission("CAN_VIEW_INVENTORY", "B_VI", true, null);
        /// <summary> Создавать и редактировать инвентаризации. </summary>
        public static readonly Permission CAN_EDIT_INVENTORY = new Permission("CAN_EDIT_INVENTORY", "B_CI", true, null);
        /// <summary> Устаревшее: Редактировать дату, время и склад сохраненной инвентаризации. </summary>
        public static readonly Permission CAN_EDIT_INVENTORY_DATE_AND_STORE = new Permission("CAN_EDIT_INVENTORY_DATE_AND_STORE", "B_IDS", true, null);
        /// <summary> Проводить инвентаризации. </summary>
        public static readonly Permission CAN_PROCESS_INVENTORY = new Permission("CAN_PROCESS_INVENTORY", "B_PI", true, null);
        /// <summary> Просматривать складские отчеты. </summary>
        public static readonly Permission CAN_VIEW_STORE_REST = new Permission("CAN_VIEW_STORE_REST", "B_VSR", false, null);
        /// <summary> Просматривать отчет по кассовым сменам. </summary>
        public static readonly Permission CAN_VIEW_CASH_SESSIONS = new Permission("CAN_VIEW_CASH_SESSIONS", "B_VCS", false, null);
        /// <summary> Принимать кассовые смены. </summary>
        public static readonly Permission CAN_ACCEPT_CASH_SESSIONS = new Permission("CAN_ACCEPT_CASH_SESSIONS", "B_ACS", false, null);
        /// <summary> Загружать прейскурант из UCS R-keeper. </summary>
        public static readonly Permission CAN_IMPORT_MENU = new Permission("CAN_IMPORT_MENU", "B_IM", false, null);
        /// <summary> Загружать продажи. </summary>
        public static readonly Permission CAN_IMPORT_SALES = new Permission("CAN_IMPORT_SALES", "B_IS", false, null);
        /// <summary> Редактировать схемы залов. </summary>
        public static readonly Permission CAN_EDIT_SCHEME = new Permission("CAN_EDIT_SCHEME", "B_ERS", false, null);
        /// <summary> Просматривать и менять конфигурацию торгового предприятия. </summary>
        public static readonly Permission CAN_EDIT_CONFIGURATION = new Permission("CAN_EDIT_CONFIGURATION", "B_EC", false, null);
        /// <summary> Изменять технологические карты (включая создание, редактирование, удаление). </summary>
        public static readonly Permission CAN_EDIT_ASSEMBLY_CHART = new Permission("CAN_EDIT_ASSEMBLY_CHART", "B_EAC", false, null);
        /// <summary> Обслуживать БД. </summary>
        public static readonly Permission DB_ADMINISTRATOR = new Permission("DB_ADMINISTRATOR", "B_DB", false, null);
        /// <summary> Редактировать пользовательские отчеты. </summary>
        public static readonly Permission CAN_EDIT_USER_REPORTS = new Permission("CAN_EDIT_USER_REPORTS", "B_EREPORT", false, null);
        /// <summary> Просматривать пользовательские отчеты. </summary>
        public static readonly Permission CAN_VIEW_USER_REPORTS = new Permission("CAN_VIEW_USER_REPORTS", "B_VREPORT", false, null);
        /// <summary> Просматривать отчеты о закупках. </summary>
        public static readonly Permission CAN_VIEW_PURCHASES_REPORTS = new Permission("CAN_VIEW_PURCHASES_REPORTS", "B_PREPORT", false, null);
        /// <summary> Создавать внешние заказы. </summary>
        public static readonly Permission CAN_CREATE_EXTERNAL_ORDERS = new Permission("CAN_CREATE_EXTERNAL_ORDERS", "B_CEXORD", false, null);
        /// <summary> Отправлять внешние заказы. </summary>
        public static readonly Permission CAN_SEND_EXTERNAL_ORDERS = new Permission("CAN_SEND_EXTERNAL_ORDERS", "B_SEXORD", false, null);
        /// <summary> Работа с документами ЕГАИС. </summary>
        public static readonly Permission CAN_EDIT_EGAIS_DOCUMENTS = new Permission("CAN_EDIT_EGAIS_DOCUMENTS", "B_EEGAIS", false, RegionalFeatureId.EGAIS);
        /// <summary> Генерировать накладную из накладной ЕГАИС без заполненных производителей/импортеров. </summary>
        public static readonly Permission CAN_CREATE_INVOICE_FROM_EGAIS_WITHOUT_PRODUCER = new Permission("CAN_CREATE_INVOICE_FROM_EGAIS_WITHOUT_PRODUCER", "B_EGAIS_IWOP", false, RegionalFeatureId.EGAIS);
        /// <summary> Работать с системой лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_USE_IIKOCARD = new Permission("IIKOCARD_CAN_USE_IIKOCARD", "B_IC_CUIC", false, null);
        /// <summary> Добавлять карты в систему лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_ADD_CARDS = new Permission("IIKOCARD_CAN_ADD_CARDS", "B_IC_ADD", false, null);
        /// <summary> Осуществлять групповое добавление карт в систему лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_ADD_GROUP_OF_CARDS = new Permission("IIKOCARD_CAN_ADD_GROUP_OF_CARDS", "B_IC_ADG", false, null);
        /// <summary> Осуществлять групповое добавление карт с активацией и пополнением в систему лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_ADD_GROUP_OF_CARDS_WITH_OPERATIONS_PROCESSING = new Permission("IIKOCARD_CAN_ADD_GROUP_OF_CARDS_WITH_OPERATIONS_PROCESSING", "B_IC_ADGOP", false, null);
        /// <summary> Активировать карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_ACTIVATE_CARDS = new Permission("IIKOCARD_CAN_ACTIVATE_CARDS", "B_IC_ACT", false, null);
        /// <summary> Деактивировать карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_DEACTIVATE_CARDS = new Permission("IIKOCARD_CAN_DEACTIVATE_CARDS", "B_IC_DEA", false, null);
        /// <summary> Блокировать карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_BLOCK_CARDS = new Permission("IIKOCARD_CAN_BLOCK_CARDS", "B_IC_BL", false, null);
        /// <summary> Удалять карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_DELETE_CARDS = new Permission("IIKOCARD_CAN_DELETE_CARDS", "B_IC_DELC", false, null);
        /// <summary> Отменять удаление карт в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_UNDO_CARDS_DELETION = new Permission("IIKOCARD_CAN_UNDO_CARDS_DELETION", "B_IC_UDELC", false, null);
        /// <summary> Разблокировать карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_UNBLOCK_CARDS = new Permission("IIKOCARD_CAN_UNBLOCK_CARDS", "B_IC_UBL", false, null);
        /// <summary> Пополнять карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_REPLENISH = new Permission("IIKOCARD_CAN_REPLENISH", "B_IC_REP", false, null);
        /// <summary> Устанавливать начальный баланс в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_SET_INITIAL_BALANCE = new Permission("IIKOCARD_CAN_SET_INITIAL_BALANCE", "B_IC_SIB", false, null);
        /// <summary> Списывать с карты в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_WRITEOFF = new Permission("IIKOCARD_CAN_WRITEOFF", "B_IC_WOF", false, null);
        /// <summary> Делать перевод между организациями в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_TRANSFER_BETWEEN_ORGANIZATIONS = new Permission("IIKOCARD_CAN_TRANSFER_BETWEEN_ORGANIZATIONS", "B_IC_ORGT", false, null);
        /// <summary> Делать импорт из файла в систему лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_IMPORT_FROM_FILE = new Permission("IIKOCARD_CAN_IMPORT_FROM_FILE", "B_IC_IMP", false, null);
        /// <summary> Отменять операцию в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_CANCEL_OPERATION = new Permission("IIKOCARD_CAN_CANCEL_OPERATION", "B_IC_CO", false, null);
        /// <summary> Просматривать отчет по картам в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_CARDS_REPORT = new Permission("IIKOCARD_CAN_VIEW_CARDS_REPORT", "B_IC_RCD", false, null);
        /// <summary> Просматривать отчет по организациям в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_ORGANIZATIONS_REPORT = new Permission("IIKOCARD_CAN_VIEW_ORGANIZATIONS_REPORT", "B_IC_RORG", false, null);
        /// <summary> Просматривать отчет по операциям в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_OPERATIONS_REPORT = new Permission("IIKOCARD_CAN_VIEW_OPERATIONS_REPORT", "B_IC_ROPS", false, null);
        /// <summary> Просматривать отчет по платежам по картам в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_PAYMENTS_PER_CARD_REPORT = new Permission("IIKOCARD_CAN_VIEW_PAYMENTS_PER_CARD_REPORT", "B_IC_RPPC", false, null);
        /// <summary> Просматривать оборотную ведомость в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_TURNOVER_REPORT = new Permission("IIKOCARD_CAN_VIEW_TURNOVER_REPORT", "B_IC_RTOV", false, null);
        /// <summary> Просматривать оборотную ведомость по организациям в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_ORG_TURNOVER_REPORT = new Permission("IIKOCARD_CAN_VIEW_ORG_TURNOVER_REPORT", "B_IC_RORGTOV", false, null);
        /// <summary> Просматривать отчет о движении денежных средств в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_CASH_FLOW_REPORT = new Permission("IIKOCARD_CAN_VIEW_CASH_FLOW_REPORT", "B_IC_RCSHFL", false, null);
        /// <summary> Просматривать отчет по использованию карт в системе лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_CARD_USAGE_REPORT = new Permission("IIKOCARD_CAN_VIEW_CARD_USAGE_REPORT", "B_IC_RCU", false, null);
        /// <summary> Администрировать систему лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_ADMINISTRATE = new Permission("IIKOCARD_CAN_ADMINISTRATE", "B_IC_ADM", false, null);
        /// <summary> Просматривать журнал событий лояльности. </summary>
        public static readonly Permission IIKOCARD_CAN_VIEW_EVENTS_JOURNAL = new Permission("IIKOCARD_CAN_VIEW_EVENTS_JOURNAL", "B_IC_VEJ", false, null);
        /// <summary> Редактировать справочник улиц. </summary>
        public static readonly Permission DELIVERY_EDIT_STREET = new Permission("DELIVERY_EDIT_STREET", "D_EST", false, null);
        /// <summary> Редактирование доставки. </summary>
        public static readonly Permission CAN_EDIT_DELIVERY = new Permission("CAN_EDIT_DELIVERY", "D_ED", false, null);
        /// <summary> Управление доставкой. </summary>
        public static readonly Permission CAN_APPROVE_DELIVERY = new Permission("CAN_APPROVE_DELIVERY", "D_MD", false, null);
        /// <summary> Отменять доставки. </summary>
        public static readonly Permission DELIVERY_CANCEL_DELIVERY_ORDER = new Permission("DELIVERY_CANCEL_DELIVERY_ORDER", "D_CAD", false, null);
        /// <summary> Закрытие доставки. </summary>
        public static readonly Permission CAN_CLOSE_DELIVERY = new Permission("CAN_CLOSE_DELIVERY", "D_CD", false, null);
        /// <summary> Быть курьером для доставки. </summary>
        public static readonly Permission CAN_DELIVERY_COURIER = new Permission("CAN_DELIVERY_COURIER", "D_DCO", false, null);
        /// <summary> Подтверждать доставки. </summary>
        public static readonly Permission CAN_CONFIRM_DELIVERY = new Permission("CAN_CONFIRM_DELIVERY", "D_CND", false, null);
        /// <summary> Удалять внешние платежи. </summary>
        public static readonly Permission CAN_DELETE_EXTERNAL_PAYMENTS = new Permission("CAN_DELETE_EXTERNAL_PAYMENTS", "D_DEP", false, null);
        /// <summary> Обходить ограничения графика и картографии. </summary>
        public static readonly Permission CAN_BYPASS_DELIVERY_RESTRICTIONS = new Permission("CAN_BYPASS_DELIVERY_RESTRICTIONS", "D_BDR", false, null);
        /// <summary> Редактировать фактическое время доставки. </summary>
        public static readonly Permission CAN_SET_ACTUAL_DELIVERY_TIME = new Permission("CAN_SET_ACTUAL_DELIVERY_TIME", "D_SADT", false, null);
        /// <summary> Редактировать отзывы клиентов. </summary>
        public static readonly Permission DELIVERY_RATE = new Permission("DELIVERY_RATE", "D_RATE", false, null);
        /// <summary> Назначать и менять оператора доставки. </summary>
        public static readonly Permission CAN_CHANGE_OPERATOR = new Permission("CAN_CHANGE_OPERATOR", "D_CO", false, null);
        /// <summary> Назначать курьера, если задолженность курьера больше максимальной. </summary>
        public static readonly Permission CAN_APPLY_COURIER_IF_DEBT_MORE_MAXIMUM = new Permission("CAN_APPLY_COURIER_IF_DEBT_MORE_MAXIMUM", "D_ACDMM", false, null);
        /// <summary> Просматривать расположение курьеров. </summary>
        public static readonly Permission CAN_ACCESS_COURIER_LOCATION = new Permission("CAN_ACCESS_COURIER_LOCATION", "D_ACL", false, null);
        /// <summary> Добавлять гостя в список «Высокий риск». </summary>
        public static readonly Permission CAN_ADD_TO_HIGH_RISK = new Permission("CAN_ADD_TO_HIGH_RISK", "D_AHR", false, null);
        /// <summary> Видеть полный номер телефона клиента. </summary>
        public static readonly Permission CAN_SEE_FULL_NUMBER = new Permission("CAN_SEE_FULL_NUMBER", "D_SFN", false, null);
        /// <summary> Системное право: доступ к внешнему API. </summary>
        public static readonly Permission CAN_ACCESS_API = new Permission("CAN_ACCESS_API", "S_API", false, null);
        /// <summary> Проводить административные операции с платежными системами. </summary>
        public static readonly Permission PAYMENT_SYSTEM_ADMINISTRATION = new Permission("PAYMENT_SYSTEM_ADMINISTRATION", "PS_ADM", false, null);
        /// <summary> Системное право: регистрировать рабочие станции. </summary>
        public static readonly Permission CAN_AUTH_TERMINALS = new Permission("CAN_AUTH_TERMINALS", "S_TERM", false, null);
        /// <summary> Может просматривать план-факты. </summary>
        public static readonly Permission CAN_VIEW_BUDGET = new Permission("CAN_VIEW_BUDGET", "B_BUD_VIEW", false, null);
        /// <summary> Может редактировать не закрытые план-факты. </summary>
        public static readonly Permission CAN_EDIT_BUDGET = new Permission("CAN_EDIT_BUDGET", "B_BUD_EDIT", false, null);
        /// <summary> Может изменять статус план-факта. </summary>
        public static readonly Permission CAN_EDIT_STATUS_BUDGET = new Permission("CAN_EDIT_STATUS_BUDGET", "B_BUD_SEDIT", false, null);
        /// <summary> Системное право: редактирование номенклатуры, полученной через Franchise. </summary>
        public static readonly Permission CAN_EDIT_FRANCHISE_NOMENCLATURE = new Permission("CAN_EDIT_FRANCHISE_NOMENCLATURE", "S_FRN_EDIT", false, null);
        /// <summary> Системное право: редактирование шаблонов меню. </summary>
        public static readonly Permission CAN_EDIT_FRANCHISE_MENU = new Permission("CAN_EDIT_FRANCHISE_MENU", "S_FRN_MENU", false, null);
        /// <summary> Загрузка банковских проводок. </summary>
        public static readonly Permission CAN_IMPORT_BANK_TRANSACTIONS = new Permission("CAN_IMPORT_BANK_TRANSACTIONS", "B_BKI", false, null);
        /// <summary> Выгружать платежные поручения. </summary>
        public static readonly Permission CAN_EXPORT_BANK_TRANSACTIONS = new Permission("CAN_EXPORT_BANK_TRANSACTIONS", "B_BKE", false, null);

        private readonly string code;
        private readonly bool responsiblePermission;
        private readonly RegionalFeatureId regionalFeatureId;
        private readonly string __value;
        private readonly string __nameResId;

        private Permission(string __value, string code, bool responsiblePermission, RegionalFeatureId regionalFeatureId)
        {
            this.__value = __value;
            this.__nameResId = "PERMISSION_NAME_" + __value;
            this.code = code;
            this.responsiblePermission = responsiblePermission;
            this.regionalFeatureId = regionalFeatureId;
        }

        public static Permission Parse(string value)
        {
            switch(value)
            {
                case "CAN_SUBSTITUTE_CARD": return CAN_SUBSTITUTE_CARD;
                case "CAN_VIEW_FRONT_REPORTS": return CAN_VIEW_FRONT_REPORTS;
                case "CAN_HAVE_ORDERS": return CAN_HAVE_ORDERS;
                case "CAN_CHANGE_GUEST_COUNT": return CAN_CHANGE_GUEST_COUNT;
                case "CAN_DELETE_PRINTED": return CAN_DELETE_PRINTED;
                case "CAN_PRINT_AGAIN": return CAN_PRINT_AGAIN;
                case "CAN_EDIT_TERMINAL_SETTINGS": return CAN_EDIT_TERMINAL_SETTINGS;
                case "CAN_CLOSE_SESSION": return CAN_CLOSE_SESSION;
                case "CAN_ACCESS_OTHERS_TABLES": return CAN_ACCESS_OTHERS_TABLES;
                case "CAN_CHANGE_ORDER_WAITER": return CAN_CHANGE_ORDER_WAITER;
                case "CAN_AUTHORIZE_EMERGENCY_CANCEL": return CAN_AUTHORIZE_EMERGENCY_CANCEL;
                case "CAN_OPEN_SESSION_IN_EMERGENCY": return CAN_OPEN_SESSION_IN_EMERGENCY;
                case "CAN_CLOSE_SESSION_IN_EMERGENCY": return CAN_CLOSE_SESSION_IN_EMERGENCY;
                case "CAN_AUTH_PAYMENT": return CAN_AUTH_PAYMENT;
                case "CAN_PRINT_BILL_AGAIN": return CAN_PRINT_BILL_AGAIN;
                case "CAN_PRINT_OTHERS_TABLES_BILL": return CAN_PRINT_OTHERS_TABLES_BILL;
                case "CAN_INCREASE_AND_DISCOUNT": return CAN_INCREASE_AND_DISCOUNT;
                case "CAN_INCREASE_AND_DISCOUNT_BY_GUEST_CARD": return CAN_INCREASE_AND_DISCOUNT_BY_GUEST_CARD;
                case "CAN_INCREASE_AND_DISCOUNT_BY_CARD_NUMBER": return CAN_INCREASE_AND_DISCOUNT_BY_CARD_NUMBER;
                case "CAN_BIND_GUEST_BY_CARD_NUMBER": return CAN_BIND_GUEST_BY_CARD_NUMBER;
                case "CAN_OPEN_CAFE_SESSION": return CAN_OPEN_CAFE_SESSION;
                case "CAN_CLOSE_ON_CREDIT": return CAN_CLOSE_ON_CREDIT;
                case "CAN_CLOSE_ON_CREDIT_WITHOUT_CONTRAGENT_AUTH": return CAN_CLOSE_ON_CREDIT_WITHOUT_CONTRAGENT_AUTH;
                case "CAN_EDIT_ORDER_WITHOUT_CLIENT_CARD": return CAN_EDIT_ORDER_WITHOUT_CLIENT_CARD;
                case "CAN_CLOSE_ON_THE_HOUSE": return CAN_CLOSE_ON_THE_HOUSE;
                case "CAN_CREATE_KITCHEN_ORDERS": return CAN_CREATE_KITCHEN_ORDERS;
                case "CAN_VIEW_Z_REPORT": return CAN_VIEW_Z_REPORT;
                case "CAN_VIEW_CLOSED_ORDERS": return CAN_VIEW_CLOSED_ORDERS;
                case "CAN_VIEW_CLOSED_ORDERS_SUMS": return CAN_VIEW_CLOSED_ORDERS_SUMS;
                case "CAN_STORN_CLOSED_ORDERS": return CAN_STORN_CLOSED_ORDERS;
                case "CAN_STORN_CLOSED_ORDERS_WITH_WRITEOFF": return CAN_STORN_CLOSED_ORDERS_WITH_WRITEOFF;
                case "CAN_STORN_CLOSED_ORDERS_AGAIN": return CAN_STORN_CLOSED_ORDERS_AGAIN;
                case "CAN_DELETE_CLOSED_ORDERS": return CAN_DELETE_CLOSED_ORDERS;
                case "CAN_REMOVE_PREPAY": return CAN_REMOVE_PREPAY;
                case "CAN_PROCESS_PREPAY": return CAN_PROCESS_PREPAY;
                case "CAN_VIEW_AND_EDIT_PREPAY": return CAN_VIEW_AND_EDIT_PREPAY;
                case "CAN_PROCESS_PENALTY": return CAN_PROCESS_PENALTY;
                case "CAN_KICK_FROM_SESSION": return CAN_KICK_FROM_SESSION;
                case "CAN_VIEW_OPENED_SESSIONS": return CAN_VIEW_OPENED_SESSIONS;
                case "CAN_EDIT_MENU": return CAN_EDIT_MENU;
                case "CAN_DELETE_NOT_PRINTED_ITEMS": return CAN_DELETE_NOT_PRINTED_ITEMS;
                case "CAN_CHANGE_COMMENT_PRINTED": return CAN_CHANGE_COMMENT_PRINTED;
                case "DANGEROUS_OPS_BY_PIN": return DANGEROUS_OPS_BY_PIN;
                case "CAN_AUTH_PAY_IN_OUT": return CAN_AUTH_PAY_IN_OUT;
                case "CAN_EDIT_TIMETABLE": return CAN_EDIT_TIMETABLE;
                case "CAN_OPEN_PESONAL_SESSION_BY_PIN": return CAN_OPEN_PESONAL_SESSION_BY_PIN;
                case "CAN_RECALCULATE_AND_X_REPORT": return CAN_RECALCULATE_AND_X_REPORT;
                case "CAN_EXECUTE_FISCAL_REGISTER_COMMANDS": return CAN_EXECUTE_FISCAL_REGISTER_COMMANDS;
                case "CAN_VIEW_RESERVES_REPORTS": return CAN_VIEW_RESERVES_REPORTS;
                case "CAN_OPEN_DRAWER": return CAN_OPEN_DRAWER;
                case "CAN_VIEW_RESERVES": return CAN_VIEW_RESERVES;
                case "CAN_EDIT_RESERVES": return CAN_EDIT_RESERVES;
                case "CAN_ACCEPT_PETROL": return CAN_ACCEPT_PETROL;
                case "CAN_PROCESS_MANUAL_PETROL_OPERATIONS": return CAN_PROCESS_MANUAL_PETROL_OPERATIONS;
                case "CAN_EDIT_BARCODES": return CAN_EDIT_BARCODES;
                case "CAN_RUN_OFFICE": return CAN_RUN_OFFICE;
                case "CAN_SEE_WAITERS_AMOUNT": return CAN_SEE_WAITERS_AMOUNT;
                case "CAN_MOVE_PRINTED": return CAN_MOVE_PRINTED;
                case "OPEN_MULTIPLE_ORDERS_ON_TABLE": return OPEN_MULTIPLE_ORDERS_ON_TABLE;
                case "CAN_CANCEL_BILL": return CAN_CANCEL_BILL;
                case "CAN_MERGE_PRINTED": return CAN_MERGE_PRINTED;
                case "CAN_CLOSE_SESSION_WITH_UNCLOSED_ORDERS": return CAN_CLOSE_SESSION_WITH_UNCLOSED_ORDERS;
                case "CAN_CLOSE_SESSION_WITH_UNCLOSED_UNBILLED_ORDERS": return CAN_CLOSE_SESSION_WITH_UNCLOSED_UNBILLED_ORDERS;
                case "CAN_SHUTDOWN_TERMINAL": return CAN_SHUTDOWN_TERMINAL;
                case "CAN_CLOSE_APPLICATION": return CAN_CLOSE_APPLICATION;
                case "AUTO_CLOSE_ORDERS_IN_CREDIT": return AUTO_CLOSE_ORDERS_IN_CREDIT;
                case "EXCEED_CHECK_LIMIT": return EXCEED_CHECK_LIMIT;
                case "CAN_DEPOSIT_PAYMENT_BY_CARD_NUMBER": return CAN_DEPOSIT_PAYMENT_BY_CARD_NUMBER;
                case "CAN_APPROVE_POINTS_ACCURAL": return CAN_APPROVE_POINTS_ACCURAL;
                case "CAN_VIEW_PERSONAL_SALARY_DATA": return CAN_VIEW_PERSONAL_SALARY_DATA;
                case "CAN_SEE_WAITERS_DEBT": return CAN_SEE_WAITERS_DEBT;
                case "CAN_CLOCK_OUT_WITH_DEBT": return CAN_CLOCK_OUT_WITH_DEBT;
                case "CAN_PAY_AS_WAITER": return CAN_PAY_AS_WAITER;
                case "CAN_VIEW_REGISTER_EXT_REPORT": return CAN_VIEW_REGISTER_EXT_REPORT;
                case "CAN_IGNORE_PRICE_SCHEDULE": return CAN_IGNORE_PRICE_SCHEDULE;
                case "CAN_CONFIRM_WORK_AS_UNSCHEDULED": return CAN_CONFIRM_WORK_AS_UNSCHEDULED;
                case "CAN_ENTER_FRACTIONAL_PRODUCT_AMOUNT": return CAN_ENTER_FRACTIONAL_PRODUCT_AMOUNT;
                case "CAN_UNSEAL_BOTTLE": return CAN_UNSEAL_BOTTLE;
                case "CAN_SETUP_HARDWARE": return CAN_SETUP_HARDWARE;
                case "CAN_VIEW_KITCHEN_DISPLAY": return CAN_VIEW_KITCHEN_DISPLAY;
                case "CAN_EDIT_KITCHEN_SETTINGS": return CAN_EDIT_KITCHEN_SETTINGS;
                case "CAN_ACCESS_FINANCES": return CAN_ACCESS_FINANCES;
                case "CAN_VIEW_CHART_OF_ACCOUNTS": return CAN_VIEW_CHART_OF_ACCOUNTS;
                case "CAN_EDIT_CHART_OF_ACCOUNTS": return CAN_EDIT_CHART_OF_ACCOUNTS;
                case "CAN_VIEW_CASH_BOOK": return CAN_VIEW_CASH_BOOK;
                case "CAN_EDIT_CASH_BOOK": return CAN_EDIT_CASH_BOOK;
                case "CAN_VIEW_CASH_FLOW_REPORT": return CAN_VIEW_CASH_FLOW_REPORT;
                case "CAN_VIEW_BALANCE_SHEET_REPORT": return CAN_VIEW_BALANCE_SHEET_REPORT;
                case "CAN_VIEW_PANDL_REPORT": return CAN_VIEW_PANDL_REPORT;
                case "CAN_VIEW_OLAP_TRANSACTIONS_REPORT": return CAN_VIEW_OLAP_TRANSACTIONS_REPORT;
                case "CAN_EDIT_CASH_FLOW_ARTICLES": return CAN_EDIT_CASH_FLOW_ARTICLES;
                case "CAN_CREATE_AND_EDIT_SERVICES": return CAN_CREATE_AND_EDIT_SERVICES;
                case "CAN_VIEW_SERVICES": return CAN_VIEW_SERVICES;
                case "CAN_CREATE_AND_EDIT_SERVICES_WITHOUT_PROCESSING": return CAN_CREATE_AND_EDIT_SERVICES_WITHOUT_PROCESSING;
                case "CAN_PROCESS_SERVICES": return CAN_PROCESS_SERVICES;
                case "CAN_WORK_WITH_SERVICE_FEE": return CAN_WORK_WITH_SERVICE_FEE;
                case "CAN_ACCESS_INVENTORY": return CAN_ACCESS_INVENTORY;
                case "CAN_EDIT_NOMENCLATURE": return CAN_EDIT_NOMENCLATURE;
                case "CAN_VIEW_NOMENCLATURE": return CAN_VIEW_NOMENCLATURE;
                case "CAN_CREATE_PRODUCT_CATEGORY": return CAN_CREATE_PRODUCT_CATEGORY;
                case "CAN_WRITEOFF_TO_NEGATIVE_BALANCES": return CAN_WRITEOFF_TO_NEGATIVE_BALANCES;
                case "CAN_INCOME_ON_NEGATIVE_BALANCES": return CAN_INCOME_ON_NEGATIVE_BALANCES;
                case "CAN_TRANSACT_INVOICE_WITH_DEVIATED_PRICE": return CAN_TRANSACT_INVOICE_WITH_DEVIATED_PRICE;
                case "CAN_VIEW_ALLTYPES_IN_DOCUMENT": return CAN_VIEW_ALLTYPES_IN_DOCUMENT;
                case "CAN_CHANGE_PRICE_LISTS": return CAN_CHANGE_PRICE_LISTS;
                case "CAN_ACCESS_WRITEOFF_CREATE": return CAN_ACCESS_WRITEOFF_CREATE;
                case "CAN_ACCESS_WRITEOFF_VIEW": return CAN_ACCESS_WRITEOFF_VIEW;
                case "CAN_ACCESS_WRITEOFF_REALIZATION": return CAN_ACCESS_WRITEOFF_REALIZATION;
                case "CAN_ACCESS_TRANSFORMATION_CREATE": return CAN_ACCESS_TRANSFORMATION_CREATE;
                case "CAN_ACCESS_TRANSFORMATION_VIEW": return CAN_ACCESS_TRANSFORMATION_VIEW;
                case "CAN_ACCESS_TRANSFORMATION_REALIZATION": return CAN_ACCESS_TRANSFORMATION_REALIZATION;
                case "CAN_ACCESS_PRODUCTION_CREATE": return CAN_ACCESS_PRODUCTION_CREATE;
                case "CAN_ACCESS_PRODUCTION_VIEW": return CAN_ACCESS_PRODUCTION_VIEW;
                case "CAN_ACCESS_PRODUCTION_REALIZATION": return CAN_ACCESS_PRODUCTION_REALIZATION;
                case "CAN_ACCESS_SALES_CREATE": return CAN_ACCESS_SALES_CREATE;
                case "CAN_ACCESS_SALES_VIEW": return CAN_ACCESS_SALES_VIEW;
                case "CAN_ACCESS_SALES_REALIZATION": return CAN_ACCESS_SALES_REALIZATION;
                case "CAN_ACCESS_INTERNAL_INVOICES_CREATE": return CAN_ACCESS_INTERNAL_INVOICES_CREATE;
                case "CAN_ACCESS_INTERNAL_INVOICES_VIEW": return CAN_ACCESS_INTERNAL_INVOICES_VIEW;
                case "CAN_ACCESS_INTERNAL_INVOICES_REALIZATION": return CAN_ACCESS_INTERNAL_INVOICES_REALIZATION;
                case "CAN_CREATE_MULTIDEPARTMENT_INTERNAL_INVOICES": return CAN_CREATE_MULTIDEPARTMENT_INTERNAL_INVOICES;
                case "CAN_ACCESS_INVOICE_CREATE": return CAN_ACCESS_INVOICE_CREATE;
                case "CAN_ACCESS_INVOICE_VIEW": return CAN_ACCESS_INVOICE_VIEW;
                case "CAN_ACCESS_INVOICE_REALIZATION": return CAN_ACCESS_INVOICE_REALIZATION;
                case "CAN_ACCESS_INVOICE_PAYMENT": return CAN_ACCESS_INVOICE_PAYMENT;
                case "CAN_ACCESS_RETURNEDINVOICE_CREATE": return CAN_ACCESS_RETURNEDINVOICE_CREATE;
                case "CAN_ACCESS_RETURNEDINVOICE_VIEW": return CAN_ACCESS_RETURNEDINVOICE_VIEW;
                case "CAN_ACCESS_RETURNEDINVOICE_REALIZATION": return CAN_ACCESS_RETURNEDINVOICE_REALIZATION;
                case "CAN_EDIT_BACKDATE_DOCUMENTS": return CAN_EDIT_BACKDATE_DOCUMENTS;
                case "CAN_EDIT_DOCUMENT_NUMBER": return CAN_EDIT_DOCUMENT_NUMBER;
                case "CAN_EDIT_DOCUMENT_TIME": return CAN_EDIT_DOCUMENT_TIME;
                case "CAN_WORK_WITH_CORRECTED_DOCUMENTS": return CAN_WORK_WITH_CORRECTED_DOCUMENTS;
                case "CAN_ACCESS_DISASSEMBLES_CREATE": return CAN_ACCESS_DISASSEMBLES_CREATE;
                case "CAN_ACCESS_DISASSEMBLES_VIEW": return CAN_ACCESS_DISASSEMBLES_VIEW;
                case "CAN_ACCESS_DISASSEMBLES_REALIZATION": return CAN_ACCESS_DISASSEMBLES_REALIZATION;
                case "CAN_ACCESS_PREPAREDREGISTER_CREATE": return CAN_ACCESS_PREPAREDREGISTER_CREATE;
                case "CAN_ACCESS_PREPAREDREGISTER_VIEW": return CAN_ACCESS_PREPAREDREGISTER_VIEW;
                case "CAN_ACCESS_PREPAREDREGISTER_REALIZATION": return CAN_ACCESS_PREPAREDREGISTER_REALIZATION;
                case "CAN_EDIT_SHARED_OLAP_REPORTS": return CAN_EDIT_SHARED_OLAP_REPORTS;
                case "CAN_ACCESS_INCOMING_RETURNED_INV_CREATE": return CAN_ACCESS_INCOMING_RETURNED_INV_CREATE;
                case "CAN_ACCESS_INCOMING_RETURNED_INV_VIEW": return CAN_ACCESS_INCOMING_RETURNED_INV_VIEW;
                case "CAN_ACCESS_INCOMING_RETURNED_INV_REALIZATION": return CAN_ACCESS_INCOMING_RETURNED_INV_REALIZATION;
                case "CAN_VIEW_INDEPENDENT_PRICE_LIST": return CAN_VIEW_INDEPENDENT_PRICE_LIST;
                case "CAN_ACCESS_MERCURY": return CAN_ACCESS_MERCURY;
                case "CAN_EDIT_SCHEDULED_PAYMENTS_REQUEST": return CAN_EDIT_SCHEDULED_PAYMENTS_REQUEST;
                case "CAN_VIEW_SCHEDULED_PAYMENTS_REQUEST": return CAN_VIEW_SCHEDULED_PAYMENTS_REQUEST;
                case "CAN_EDIT_SCHEDULED_PAYMENTS": return CAN_EDIT_SCHEDULED_PAYMENTS;
                case "CAN_VIEW_SCHEDULED_PAYMENTS": return CAN_VIEW_SCHEDULED_PAYMENTS;
                case "CAN_VIEW_SCHEDULED_PAYMENTS_CHART": return CAN_VIEW_SCHEDULED_PAYMENTS_CHART;
                case "CAN_EDIT_SCHEDULED_INCOMINGS": return CAN_EDIT_SCHEDULED_INCOMINGS;
                case "CAN_VIEW_SCHEDULED_INCOMINGS": return CAN_VIEW_SCHEDULED_INCOMINGS;
                case "CAN_ACCESS_PRODUCTIONORDER_CREATE": return CAN_ACCESS_PRODUCTIONORDER_CREATE;
                case "CAN_ACCESS_PRODUCTIONORDER_VIEW": return CAN_ACCESS_PRODUCTIONORDER_VIEW;
                case "CAN_ACCESS_PRODUCTIONORDER_REALIZATION": return CAN_ACCESS_PRODUCTIONORDER_REALIZATION;
                case "CAN_EDIT_PROCESSED_PRODUCTIONORDER": return CAN_EDIT_PROCESSED_PRODUCTIONORDER;
                case "CAN_VIEW_FUEL_ACCEPTANCE": return CAN_VIEW_FUEL_ACCEPTANCE;
                case "CAN_CREATE_FUEL_ACCEPTANCE": return CAN_CREATE_FUEL_ACCEPTANCE;
                case "CAN_MANUAL_EDIT_FUEL_ACCEPTANCE": return CAN_MANUAL_EDIT_FUEL_ACCEPTANCE;
                case "CAN_VIEW_FUEL_GAGING": return CAN_VIEW_FUEL_GAGING;
                case "CAN_CREATE_FUEL_GAGING": return CAN_CREATE_FUEL_GAGING;
                case "CAN_CLOSE_PERIOD": return CAN_CLOSE_PERIOD;
                case "CAN_CHANGE_DOCUMENTS_IN_CLOSING_PERIOD": return CAN_CHANGE_DOCUMENTS_IN_CLOSING_PERIOD;
                case "CAN_CREATE_DOCUMENTS_OUT_OF_INVENTORY_DAY": return CAN_CREATE_DOCUMENTS_OUT_OF_INVENTORY_DAY;
                case "CAN_EDIT_PROCESSED_INCOMING_INVOICES": return CAN_EDIT_PROCESSED_INCOMING_INVOICES;
                case "CAN_EDIT_PROCESSED_OUTGOING_INVOICES": return CAN_EDIT_PROCESSED_OUTGOING_INVOICES;
                case "CAN_EDIT_PROCESSED_INTERNAL_INVOICES": return CAN_EDIT_PROCESSED_INTERNAL_INVOICES;
                case "CAN_EDIT_PROCESSED_WRITEOFFS": return CAN_EDIT_PROCESSED_WRITEOFFS;
                case "CAN_ACCESS_PRODUCTION": return CAN_ACCESS_PRODUCTION;
                case "CAN_ACCESS_PRODUCTION_ORDERS_FROM": return CAN_ACCESS_PRODUCTION_ORDERS_FROM;
                case "CAN_ACCESS_PRODUCTION_ORDERS_TO": return CAN_ACCESS_PRODUCTION_ORDERS_TO;
                case "CAN_ACCESS_PRODUCTION_BLANKS": return CAN_ACCESS_PRODUCTION_BLANKS;
                case "CAN_ACCESS_CONSOLIDATED_ORDERS": return CAN_ACCESS_CONSOLIDATED_ORDERS;
                case "CAN_ACCESS_OVERDUE_ORDERS": return CAN_ACCESS_OVERDUE_ORDERS;
                case "CAN_SHIP_ORDERS": return CAN_SHIP_ORDERS;
                case "CAN_READ_MENU_ORDERS": return CAN_READ_MENU_ORDERS;
                case "CAN_ACCESS_MENU_ORDERS": return CAN_ACCESS_MENU_ORDERS;
                case "CAN_PROCESS_MENU_ORDERS": return CAN_PROCESS_MENU_ORDERS;
                case "CAN_VIEW_QUICK_MENU": return CAN_VIEW_QUICK_MENU;
                case "CAN_FILL_INVENTORY_BY_REMAINS": return CAN_FILL_INVENTORY_BY_REMAINS;
                case "CAN_ACCESS_PERSONNEL": return CAN_ACCESS_PERSONNEL;
                case "CAN_ACCESS_GUEST": return CAN_ACCESS_GUEST;
                case "CAN_EXPORT_GUESTS_LIST": return CAN_EXPORT_GUESTS_LIST;
                case "CAN_ACCESS_SUPPLIER": return CAN_ACCESS_SUPPLIER;
                case "CAN_READ_EMPLOYEES_PAYMENT": return CAN_READ_EMPLOYEES_PAYMENT;
                case "CAN_EDIT_EMPLOYEES_PAYMENT": return CAN_EDIT_EMPLOYEES_PAYMENT;
                case "CAN_EDIT_EMPLOYEES": return CAN_EDIT_EMPLOYEES;
                case "CAN_VIEW_EMPLOYEES": return CAN_VIEW_EMPLOYEES;
                case "CAN_ACCESS_USER_CARD_MAIN": return CAN_ACCESS_USER_CARD_MAIN;
                case "CAN_ACCESS_USER_CARD_ADDITIONAL_INFORMATION": return CAN_ACCESS_USER_CARD_ADDITIONAL_INFORMATION;
                case "CAN_ACCESS_USER_CARD_PASSPORT": return CAN_ACCESS_USER_CARD_PASSPORT;
                case "CAN_ACCESS_USER_CARD_PHOTO": return CAN_ACCESS_USER_CARD_PHOTO;
                case "CAN_ACCESS_USER_CARD_AVAILABILITY": return CAN_ACCESS_USER_CARD_AVAILABILITY;
                case "CAN_ACCESS_USER_CARD_MEDICAL_ANALYSIS": return CAN_ACCESS_USER_CARD_MEDICAL_ANALYSIS;
                case "CAN_ACCESS_USER_CARD_PRICE_CONTROL": return CAN_ACCESS_USER_CARD_PRICE_CONTROL;
                case "CAN_ACCESS_USER_CARD_JUR_PERSON": return CAN_ACCESS_USER_CARD_JUR_PERSON;
                case "CAN_VIEW_PERMISSIONS": return CAN_VIEW_PERMISSIONS;
                case "CAN_EDIT_PERMISSIONS": return CAN_EDIT_PERMISSIONS;
                case "CAN_VIEW_ROLES": return CAN_VIEW_ROLES;
                case "CAN_VIEW_SESSION_TYPES": return CAN_VIEW_SESSION_TYPES;
                case "CAN_VIEW_ATTENDANCE_TYPES": return CAN_VIEW_ATTENDANCE_TYPES;
                case "CAN_VIEW_PENALTIE_TYPES": return CAN_VIEW_PENALTIE_TYPES;
                case "CAN_VIEW_BONUS_TYPES": return CAN_VIEW_BONUS_TYPES;
                case "CAN_VIEW_EMPLOYEES_JOURNAL": return CAN_VIEW_EMPLOYEES_JOURNAL;
                case "CAN_EDIT_EMPLOYEES_JOURNAL_IN_CLOSING_PERIOD": return CAN_EDIT_EMPLOYEES_JOURNAL_IN_CLOSING_PERIOD;
                case "CAN_ACCESS_SCHEDULES": return CAN_ACCESS_SCHEDULES;
                case "CAN_ACCESS_ATTENDANCES": return CAN_ACCESS_ATTENDANCES;
                case "CAN_ACCESS_BONUSES_AND_PENALTIES": return CAN_ACCESS_BONUSES_AND_PENALTIES;
                case "CAN_EDIT_EMPLOYEES_PAYROLL": return CAN_EDIT_EMPLOYEES_PAYROLL;
                case "CAN_VIEW_EMPLOYEES_PAYROLL": return CAN_VIEW_EMPLOYEES_PAYROLL;
                case "CAN_PAY_TO_EMPLOYEES": return CAN_PAY_TO_EMPLOYEES;
                case "CAN_ACCESS_MEDICAL_ANALYSIS": return CAN_ACCESS_MEDICAL_ANALYSIS;
                case "CAN_USE_DISCOUNT_SYSTEM": return CAN_USE_DISCOUNT_SYSTEM;
                case "CAN_ACCESS_COUNTERAGENTS": return CAN_ACCESS_COUNTERAGENTS;
                case "CAN_ACCESS_ADMINISTRATION": return CAN_ACCESS_ADMINISTRATION;
                case "CAN_EDIT_ACCOUNTING_SETTINGS": return CAN_EDIT_ACCOUNTING_SETTINGS;
                case "CAN_EDIT_ANNOUNCEMENTS": return CAN_EDIT_ANNOUNCEMENTS;
                case "CAN_VIEW_CLOSE_PERIOD_SETTINGS": return CAN_VIEW_CLOSE_PERIOD_SETTINGS;
                case "CAN_ACCESS_SYNCHRO_MONITOR": return CAN_ACCESS_SYNCHRO_MONITOR;
                case "CAN_ACCESS_EXCHANGE": return CAN_ACCESS_EXCHANGE;
                case "CAN_IMPORT_FROM_RMS": return CAN_IMPORT_FROM_RMS;
                case "CAN_ACCESS_REPORTS": return CAN_ACCESS_REPORTS;
                case "CAN_ACCESS_SALES": return CAN_ACCESS_SALES;
                case "CAN_ACCESS_TO_CASH_OPERATIONS": return CAN_ACCESS_TO_CASH_OPERATIONS;
                case "CAN_ACCESS_TO_PAY_IN_OUT": return CAN_ACCESS_TO_PAY_IN_OUT;
                case "CAN_ACCESS_TO_PAYMENT_TYPES": return CAN_ACCESS_TO_PAYMENT_TYPES;
                case "CAN_VIEW_DELETIONS_REASONS": return CAN_VIEW_DELETIONS_REASONS;
                case "CAN_EDIT_TIPS_TYPE": return CAN_EDIT_TIPS_TYPE;
                case "CAN_VIEW_LIVE_VIDEO": return CAN_VIEW_LIVE_VIDEO;
                case "CAN_VIEW_TRANSACTIONS_JOURNAL": return CAN_VIEW_TRANSACTIONS_JOURNAL;
                case "CAN_LAUNCH_FRONT_OFFICE": return CAN_LAUNCH_FRONT_OFFICE;
                case "CAN_LAUNCH_IIKO_DJ": return CAN_LAUNCH_IIKO_DJ;
                case "CAN_ACCESS_SALES_REPORTS": return CAN_ACCESS_SALES_REPORTS;
                case "CAN_VIEW_INVENTORY": return CAN_VIEW_INVENTORY;
                case "CAN_EDIT_INVENTORY": return CAN_EDIT_INVENTORY;
                case "CAN_EDIT_INVENTORY_DATE_AND_STORE": return CAN_EDIT_INVENTORY_DATE_AND_STORE;
                case "CAN_PROCESS_INVENTORY": return CAN_PROCESS_INVENTORY;
                case "CAN_VIEW_STORE_REST": return CAN_VIEW_STORE_REST;
                case "CAN_VIEW_CASH_SESSIONS": return CAN_VIEW_CASH_SESSIONS;
                case "CAN_ACCEPT_CASH_SESSIONS": return CAN_ACCEPT_CASH_SESSIONS;
                case "CAN_IMPORT_MENU": return CAN_IMPORT_MENU;
                case "CAN_IMPORT_SALES": return CAN_IMPORT_SALES;
                case "CAN_EDIT_SCHEME": return CAN_EDIT_SCHEME;
                case "CAN_EDIT_CONFIGURATION": return CAN_EDIT_CONFIGURATION;
                case "CAN_EDIT_ASSEMBLY_CHART": return CAN_EDIT_ASSEMBLY_CHART;
                case "DB_ADMINISTRATOR": return DB_ADMINISTRATOR;
                case "CAN_EDIT_USER_REPORTS": return CAN_EDIT_USER_REPORTS;
                case "CAN_VIEW_USER_REPORTS": return CAN_VIEW_USER_REPORTS;
                case "CAN_VIEW_PURCHASES_REPORTS": return CAN_VIEW_PURCHASES_REPORTS;
                case "CAN_CREATE_EXTERNAL_ORDERS": return CAN_CREATE_EXTERNAL_ORDERS;
                case "CAN_SEND_EXTERNAL_ORDERS": return CAN_SEND_EXTERNAL_ORDERS;
                case "CAN_EDIT_EGAIS_DOCUMENTS": return CAN_EDIT_EGAIS_DOCUMENTS;
                case "CAN_CREATE_INVOICE_FROM_EGAIS_WITHOUT_PRODUCER": return CAN_CREATE_INVOICE_FROM_EGAIS_WITHOUT_PRODUCER;
                case "IIKOCARD_CAN_USE_IIKOCARD": return IIKOCARD_CAN_USE_IIKOCARD;
                case "IIKOCARD_CAN_ADD_CARDS": return IIKOCARD_CAN_ADD_CARDS;
                case "IIKOCARD_CAN_ADD_GROUP_OF_CARDS": return IIKOCARD_CAN_ADD_GROUP_OF_CARDS;
                case "IIKOCARD_CAN_ADD_GROUP_OF_CARDS_WITH_OPERATIONS_PROCESSING": return IIKOCARD_CAN_ADD_GROUP_OF_CARDS_WITH_OPERATIONS_PROCESSING;
                case "IIKOCARD_CAN_ACTIVATE_CARDS": return IIKOCARD_CAN_ACTIVATE_CARDS;
                case "IIKOCARD_CAN_DEACTIVATE_CARDS": return IIKOCARD_CAN_DEACTIVATE_CARDS;
                case "IIKOCARD_CAN_BLOCK_CARDS": return IIKOCARD_CAN_BLOCK_CARDS;
                case "IIKOCARD_CAN_DELETE_CARDS": return IIKOCARD_CAN_DELETE_CARDS;
                case "IIKOCARD_CAN_UNDO_CARDS_DELETION": return IIKOCARD_CAN_UNDO_CARDS_DELETION;
                case "IIKOCARD_CAN_UNBLOCK_CARDS": return IIKOCARD_CAN_UNBLOCK_CARDS;
                case "IIKOCARD_CAN_REPLENISH": return IIKOCARD_CAN_REPLENISH;
                case "IIKOCARD_CAN_SET_INITIAL_BALANCE": return IIKOCARD_CAN_SET_INITIAL_BALANCE;
                case "IIKOCARD_CAN_WRITEOFF": return IIKOCARD_CAN_WRITEOFF;
                case "IIKOCARD_CAN_TRANSFER_BETWEEN_ORGANIZATIONS": return IIKOCARD_CAN_TRANSFER_BETWEEN_ORGANIZATIONS;
                case "IIKOCARD_CAN_IMPORT_FROM_FILE": return IIKOCARD_CAN_IMPORT_FROM_FILE;
                case "IIKOCARD_CAN_CANCEL_OPERATION": return IIKOCARD_CAN_CANCEL_OPERATION;
                case "IIKOCARD_CAN_VIEW_CARDS_REPORT": return IIKOCARD_CAN_VIEW_CARDS_REPORT;
                case "IIKOCARD_CAN_VIEW_ORGANIZATIONS_REPORT": return IIKOCARD_CAN_VIEW_ORGANIZATIONS_REPORT;
                case "IIKOCARD_CAN_VIEW_OPERATIONS_REPORT": return IIKOCARD_CAN_VIEW_OPERATIONS_REPORT;
                case "IIKOCARD_CAN_VIEW_PAYMENTS_PER_CARD_REPORT": return IIKOCARD_CAN_VIEW_PAYMENTS_PER_CARD_REPORT;
                case "IIKOCARD_CAN_VIEW_TURNOVER_REPORT": return IIKOCARD_CAN_VIEW_TURNOVER_REPORT;
                case "IIKOCARD_CAN_VIEW_ORG_TURNOVER_REPORT": return IIKOCARD_CAN_VIEW_ORG_TURNOVER_REPORT;
                case "IIKOCARD_CAN_VIEW_CASH_FLOW_REPORT": return IIKOCARD_CAN_VIEW_CASH_FLOW_REPORT;
                case "IIKOCARD_CAN_VIEW_CARD_USAGE_REPORT": return IIKOCARD_CAN_VIEW_CARD_USAGE_REPORT;
                case "IIKOCARD_CAN_ADMINISTRATE": return IIKOCARD_CAN_ADMINISTRATE;
                case "IIKOCARD_CAN_VIEW_EVENTS_JOURNAL": return IIKOCARD_CAN_VIEW_EVENTS_JOURNAL;
                case "DELIVERY_EDIT_STREET": return DELIVERY_EDIT_STREET;
                case "CAN_EDIT_DELIVERY": return CAN_EDIT_DELIVERY;
                case "CAN_APPROVE_DELIVERY": return CAN_APPROVE_DELIVERY;
                case "DELIVERY_CANCEL_DELIVERY_ORDER": return DELIVERY_CANCEL_DELIVERY_ORDER;
                case "CAN_CLOSE_DELIVERY": return CAN_CLOSE_DELIVERY;
                case "CAN_DELIVERY_COURIER": return CAN_DELIVERY_COURIER;
                case "CAN_CONFIRM_DELIVERY": return CAN_CONFIRM_DELIVERY;
                case "CAN_DELETE_EXTERNAL_PAYMENTS": return CAN_DELETE_EXTERNAL_PAYMENTS;
                case "CAN_BYPASS_DELIVERY_RESTRICTIONS": return CAN_BYPASS_DELIVERY_RESTRICTIONS;
                case "CAN_SET_ACTUAL_DELIVERY_TIME": return CAN_SET_ACTUAL_DELIVERY_TIME;
                case "DELIVERY_RATE": return DELIVERY_RATE;
                case "CAN_CHANGE_OPERATOR": return CAN_CHANGE_OPERATOR;
                case "CAN_APPLY_COURIER_IF_DEBT_MORE_MAXIMUM": return CAN_APPLY_COURIER_IF_DEBT_MORE_MAXIMUM;
                case "CAN_ACCESS_COURIER_LOCATION": return CAN_ACCESS_COURIER_LOCATION;
                case "CAN_ADD_TO_HIGH_RISK": return CAN_ADD_TO_HIGH_RISK;
                case "CAN_SEE_FULL_NUMBER": return CAN_SEE_FULL_NUMBER;
                case "CAN_ACCESS_API": return CAN_ACCESS_API;
                case "PAYMENT_SYSTEM_ADMINISTRATION": return PAYMENT_SYSTEM_ADMINISTRATION;
                case "CAN_AUTH_TERMINALS": return CAN_AUTH_TERMINALS;
                case "CAN_VIEW_BUDGET": return CAN_VIEW_BUDGET;
                case "CAN_EDIT_BUDGET": return CAN_EDIT_BUDGET;
                case "CAN_EDIT_STATUS_BUDGET": return CAN_EDIT_STATUS_BUDGET;
                case "CAN_EDIT_FRANCHISE_NOMENCLATURE": return CAN_EDIT_FRANCHISE_NOMENCLATURE;
                case "CAN_EDIT_FRANCHISE_MENU": return CAN_EDIT_FRANCHISE_MENU;
                case "CAN_IMPORT_BANK_TRANSACTIONS": return CAN_IMPORT_BANK_TRANSACTIONS;
                case "CAN_EXPORT_BANK_TRANSACTIONS": return CAN_EXPORT_BANK_TRANSACTIONS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static Permission[] VALUES
        {
            get
            {
                return new []
                {
                    CAN_SUBSTITUTE_CARD, 
                    CAN_VIEW_FRONT_REPORTS, 
                    CAN_HAVE_ORDERS, 
                    CAN_CHANGE_GUEST_COUNT, 
                    CAN_DELETE_PRINTED, 
                    CAN_PRINT_AGAIN, 
                    CAN_EDIT_TERMINAL_SETTINGS, 
                    CAN_CLOSE_SESSION, 
                    CAN_ACCESS_OTHERS_TABLES, 
                    CAN_CHANGE_ORDER_WAITER, 
                    CAN_AUTHORIZE_EMERGENCY_CANCEL, 
                    CAN_OPEN_SESSION_IN_EMERGENCY, 
                    CAN_CLOSE_SESSION_IN_EMERGENCY, 
                    CAN_AUTH_PAYMENT, 
                    CAN_PRINT_BILL_AGAIN, 
                    CAN_PRINT_OTHERS_TABLES_BILL, 
                    CAN_INCREASE_AND_DISCOUNT, 
                    CAN_INCREASE_AND_DISCOUNT_BY_GUEST_CARD, 
                    CAN_INCREASE_AND_DISCOUNT_BY_CARD_NUMBER, 
                    CAN_BIND_GUEST_BY_CARD_NUMBER, 
                    CAN_OPEN_CAFE_SESSION, 
                    CAN_CLOSE_ON_CREDIT, 
                    CAN_CLOSE_ON_CREDIT_WITHOUT_CONTRAGENT_AUTH, 
                    CAN_EDIT_ORDER_WITHOUT_CLIENT_CARD, 
                    CAN_CLOSE_ON_THE_HOUSE, 
                    CAN_CREATE_KITCHEN_ORDERS, 
                    CAN_VIEW_Z_REPORT, 
                    CAN_VIEW_CLOSED_ORDERS, 
                    CAN_VIEW_CLOSED_ORDERS_SUMS, 
                    CAN_STORN_CLOSED_ORDERS, 
                    CAN_STORN_CLOSED_ORDERS_WITH_WRITEOFF, 
                    CAN_STORN_CLOSED_ORDERS_AGAIN, 
                    CAN_DELETE_CLOSED_ORDERS, 
                    CAN_REMOVE_PREPAY, 
                    CAN_PROCESS_PREPAY, 
                    CAN_VIEW_AND_EDIT_PREPAY, 
                    CAN_PROCESS_PENALTY, 
                    CAN_KICK_FROM_SESSION, 
                    CAN_VIEW_OPENED_SESSIONS, 
                    CAN_EDIT_MENU, 
                    CAN_DELETE_NOT_PRINTED_ITEMS, 
                    CAN_CHANGE_COMMENT_PRINTED, 
                    DANGEROUS_OPS_BY_PIN, 
                    CAN_AUTH_PAY_IN_OUT, 
                    CAN_EDIT_TIMETABLE, 
                    CAN_OPEN_PESONAL_SESSION_BY_PIN, 
                    CAN_RECALCULATE_AND_X_REPORT, 
                    CAN_EXECUTE_FISCAL_REGISTER_COMMANDS, 
                    CAN_VIEW_RESERVES_REPORTS, 
                    CAN_OPEN_DRAWER, 
                    CAN_VIEW_RESERVES, 
                    CAN_EDIT_RESERVES, 
                    CAN_ACCEPT_PETROL, 
                    CAN_PROCESS_MANUAL_PETROL_OPERATIONS, 
                    CAN_EDIT_BARCODES, 
                    CAN_RUN_OFFICE, 
                    CAN_SEE_WAITERS_AMOUNT, 
                    CAN_MOVE_PRINTED, 
                    OPEN_MULTIPLE_ORDERS_ON_TABLE, 
                    CAN_CANCEL_BILL, 
                    CAN_MERGE_PRINTED, 
                    CAN_CLOSE_SESSION_WITH_UNCLOSED_ORDERS, 
                    CAN_CLOSE_SESSION_WITH_UNCLOSED_UNBILLED_ORDERS, 
                    CAN_SHUTDOWN_TERMINAL, 
                    CAN_CLOSE_APPLICATION, 
                    AUTO_CLOSE_ORDERS_IN_CREDIT, 
                    EXCEED_CHECK_LIMIT, 
                    CAN_DEPOSIT_PAYMENT_BY_CARD_NUMBER, 
                    CAN_APPROVE_POINTS_ACCURAL, 
                    CAN_VIEW_PERSONAL_SALARY_DATA, 
                    CAN_SEE_WAITERS_DEBT, 
                    CAN_CLOCK_OUT_WITH_DEBT, 
                    CAN_PAY_AS_WAITER, 
                    CAN_VIEW_REGISTER_EXT_REPORT, 
                    CAN_IGNORE_PRICE_SCHEDULE, 
                    CAN_CONFIRM_WORK_AS_UNSCHEDULED, 
                    CAN_ENTER_FRACTIONAL_PRODUCT_AMOUNT, 
                    CAN_UNSEAL_BOTTLE, 
                    CAN_SETUP_HARDWARE, 
                    CAN_VIEW_KITCHEN_DISPLAY, 
                    CAN_EDIT_KITCHEN_SETTINGS, 
                    CAN_ACCESS_FINANCES, 
                    CAN_VIEW_CHART_OF_ACCOUNTS, 
                    CAN_EDIT_CHART_OF_ACCOUNTS, 
                    CAN_VIEW_CASH_BOOK, 
                    CAN_EDIT_CASH_BOOK, 
                    CAN_VIEW_CASH_FLOW_REPORT, 
                    CAN_VIEW_BALANCE_SHEET_REPORT, 
                    CAN_VIEW_PANDL_REPORT, 
                    CAN_VIEW_OLAP_TRANSACTIONS_REPORT, 
                    CAN_EDIT_CASH_FLOW_ARTICLES, 
                    CAN_CREATE_AND_EDIT_SERVICES, 
                    CAN_VIEW_SERVICES, 
                    CAN_CREATE_AND_EDIT_SERVICES_WITHOUT_PROCESSING, 
                    CAN_PROCESS_SERVICES, 
                    CAN_WORK_WITH_SERVICE_FEE, 
                    CAN_ACCESS_INVENTORY, 
                    CAN_EDIT_NOMENCLATURE, 
                    CAN_VIEW_NOMENCLATURE, 
                    CAN_CREATE_PRODUCT_CATEGORY, 
                    CAN_WRITEOFF_TO_NEGATIVE_BALANCES, 
                    CAN_INCOME_ON_NEGATIVE_BALANCES, 
                    CAN_TRANSACT_INVOICE_WITH_DEVIATED_PRICE, 
                    CAN_VIEW_ALLTYPES_IN_DOCUMENT, 
                    CAN_CHANGE_PRICE_LISTS, 
                    CAN_ACCESS_WRITEOFF_CREATE, 
                    CAN_ACCESS_WRITEOFF_VIEW, 
                    CAN_ACCESS_WRITEOFF_REALIZATION, 
                    CAN_ACCESS_TRANSFORMATION_CREATE, 
                    CAN_ACCESS_TRANSFORMATION_VIEW, 
                    CAN_ACCESS_TRANSFORMATION_REALIZATION, 
                    CAN_ACCESS_PRODUCTION_CREATE, 
                    CAN_ACCESS_PRODUCTION_VIEW, 
                    CAN_ACCESS_PRODUCTION_REALIZATION, 
                    CAN_ACCESS_SALES_CREATE, 
                    CAN_ACCESS_SALES_VIEW, 
                    CAN_ACCESS_SALES_REALIZATION, 
                    CAN_ACCESS_INTERNAL_INVOICES_CREATE, 
                    CAN_ACCESS_INTERNAL_INVOICES_VIEW, 
                    CAN_ACCESS_INTERNAL_INVOICES_REALIZATION, 
                    CAN_CREATE_MULTIDEPARTMENT_INTERNAL_INVOICES, 
                    CAN_ACCESS_INVOICE_CREATE, 
                    CAN_ACCESS_INVOICE_VIEW, 
                    CAN_ACCESS_INVOICE_REALIZATION, 
                    CAN_ACCESS_INVOICE_PAYMENT, 
                    CAN_ACCESS_RETURNEDINVOICE_CREATE, 
                    CAN_ACCESS_RETURNEDINVOICE_VIEW, 
                    CAN_ACCESS_RETURNEDINVOICE_REALIZATION, 
                    CAN_EDIT_BACKDATE_DOCUMENTS, 
                    CAN_EDIT_DOCUMENT_NUMBER, 
                    CAN_EDIT_DOCUMENT_TIME, 
                    CAN_WORK_WITH_CORRECTED_DOCUMENTS, 
                    CAN_ACCESS_DISASSEMBLES_CREATE, 
                    CAN_ACCESS_DISASSEMBLES_VIEW, 
                    CAN_ACCESS_DISASSEMBLES_REALIZATION, 
                    CAN_ACCESS_PREPAREDREGISTER_CREATE, 
                    CAN_ACCESS_PREPAREDREGISTER_VIEW, 
                    CAN_ACCESS_PREPAREDREGISTER_REALIZATION, 
                    CAN_EDIT_SHARED_OLAP_REPORTS, 
                    CAN_ACCESS_INCOMING_RETURNED_INV_CREATE, 
                    CAN_ACCESS_INCOMING_RETURNED_INV_VIEW, 
                    CAN_ACCESS_INCOMING_RETURNED_INV_REALIZATION, 
                    CAN_VIEW_INDEPENDENT_PRICE_LIST, 
                    CAN_ACCESS_MERCURY, 
                    CAN_EDIT_SCHEDULED_PAYMENTS_REQUEST, 
                    CAN_VIEW_SCHEDULED_PAYMENTS_REQUEST, 
                    CAN_EDIT_SCHEDULED_PAYMENTS, 
                    CAN_VIEW_SCHEDULED_PAYMENTS, 
                    CAN_VIEW_SCHEDULED_PAYMENTS_CHART, 
                    CAN_EDIT_SCHEDULED_INCOMINGS, 
                    CAN_VIEW_SCHEDULED_INCOMINGS, 
                    CAN_ACCESS_PRODUCTIONORDER_CREATE, 
                    CAN_ACCESS_PRODUCTIONORDER_VIEW, 
                    CAN_ACCESS_PRODUCTIONORDER_REALIZATION, 
                    CAN_EDIT_PROCESSED_PRODUCTIONORDER, 
                    CAN_VIEW_FUEL_ACCEPTANCE, 
                    CAN_CREATE_FUEL_ACCEPTANCE, 
                    CAN_MANUAL_EDIT_FUEL_ACCEPTANCE, 
                    CAN_VIEW_FUEL_GAGING, 
                    CAN_CREATE_FUEL_GAGING, 
                    CAN_CLOSE_PERIOD, 
                    CAN_CHANGE_DOCUMENTS_IN_CLOSING_PERIOD, 
                    CAN_CREATE_DOCUMENTS_OUT_OF_INVENTORY_DAY, 
                    CAN_EDIT_PROCESSED_INCOMING_INVOICES, 
                    CAN_EDIT_PROCESSED_OUTGOING_INVOICES, 
                    CAN_EDIT_PROCESSED_INTERNAL_INVOICES, 
                    CAN_EDIT_PROCESSED_WRITEOFFS, 
                    CAN_ACCESS_PRODUCTION, 
                    CAN_ACCESS_PRODUCTION_ORDERS_FROM, 
                    CAN_ACCESS_PRODUCTION_ORDERS_TO, 
                    CAN_ACCESS_PRODUCTION_BLANKS, 
                    CAN_ACCESS_CONSOLIDATED_ORDERS, 
                    CAN_ACCESS_OVERDUE_ORDERS, 
                    CAN_SHIP_ORDERS, 
                    CAN_READ_MENU_ORDERS, 
                    CAN_ACCESS_MENU_ORDERS, 
                    CAN_PROCESS_MENU_ORDERS, 
                    CAN_VIEW_QUICK_MENU, 
                    CAN_FILL_INVENTORY_BY_REMAINS, 
                    CAN_ACCESS_PERSONNEL, 
                    CAN_ACCESS_GUEST, 
                    CAN_EXPORT_GUESTS_LIST, 
                    CAN_ACCESS_SUPPLIER, 
                    CAN_READ_EMPLOYEES_PAYMENT, 
                    CAN_EDIT_EMPLOYEES_PAYMENT, 
                    CAN_EDIT_EMPLOYEES, 
                    CAN_VIEW_EMPLOYEES, 
                    CAN_ACCESS_USER_CARD_MAIN, 
                    CAN_ACCESS_USER_CARD_ADDITIONAL_INFORMATION, 
                    CAN_ACCESS_USER_CARD_PASSPORT, 
                    CAN_ACCESS_USER_CARD_PHOTO, 
                    CAN_ACCESS_USER_CARD_AVAILABILITY, 
                    CAN_ACCESS_USER_CARD_MEDICAL_ANALYSIS, 
                    CAN_ACCESS_USER_CARD_PRICE_CONTROL, 
                    CAN_ACCESS_USER_CARD_JUR_PERSON, 
                    CAN_VIEW_PERMISSIONS, 
                    CAN_EDIT_PERMISSIONS, 
                    CAN_VIEW_ROLES, 
                    CAN_VIEW_SESSION_TYPES, 
                    CAN_VIEW_ATTENDANCE_TYPES, 
                    CAN_VIEW_PENALTIE_TYPES, 
                    CAN_VIEW_BONUS_TYPES, 
                    CAN_VIEW_EMPLOYEES_JOURNAL, 
                    CAN_EDIT_EMPLOYEES_JOURNAL_IN_CLOSING_PERIOD, 
                    CAN_ACCESS_SCHEDULES, 
                    CAN_ACCESS_ATTENDANCES, 
                    CAN_ACCESS_BONUSES_AND_PENALTIES, 
                    CAN_EDIT_EMPLOYEES_PAYROLL, 
                    CAN_VIEW_EMPLOYEES_PAYROLL, 
                    CAN_PAY_TO_EMPLOYEES, 
                    CAN_ACCESS_MEDICAL_ANALYSIS, 
                    CAN_USE_DISCOUNT_SYSTEM, 
                    CAN_ACCESS_COUNTERAGENTS, 
                    CAN_ACCESS_ADMINISTRATION, 
                    CAN_EDIT_ACCOUNTING_SETTINGS, 
                    CAN_EDIT_ANNOUNCEMENTS, 
                    CAN_VIEW_CLOSE_PERIOD_SETTINGS, 
                    CAN_ACCESS_SYNCHRO_MONITOR, 
                    CAN_ACCESS_EXCHANGE, 
                    CAN_IMPORT_FROM_RMS, 
                    CAN_ACCESS_REPORTS, 
                    CAN_ACCESS_SALES, 
                    CAN_ACCESS_TO_CASH_OPERATIONS, 
                    CAN_ACCESS_TO_PAY_IN_OUT, 
                    CAN_ACCESS_TO_PAYMENT_TYPES, 
                    CAN_VIEW_DELETIONS_REASONS, 
                    CAN_EDIT_TIPS_TYPE, 
                    CAN_VIEW_LIVE_VIDEO, 
                    CAN_VIEW_TRANSACTIONS_JOURNAL, 
                    CAN_LAUNCH_FRONT_OFFICE, 
                    CAN_LAUNCH_IIKO_DJ, 
                    CAN_ACCESS_SALES_REPORTS, 
                    CAN_VIEW_INVENTORY, 
                    CAN_EDIT_INVENTORY, 
                    CAN_EDIT_INVENTORY_DATE_AND_STORE, 
                    CAN_PROCESS_INVENTORY, 
                    CAN_VIEW_STORE_REST, 
                    CAN_VIEW_CASH_SESSIONS, 
                    CAN_ACCEPT_CASH_SESSIONS, 
                    CAN_IMPORT_MENU, 
                    CAN_IMPORT_SALES, 
                    CAN_EDIT_SCHEME, 
                    CAN_EDIT_CONFIGURATION, 
                    CAN_EDIT_ASSEMBLY_CHART, 
                    DB_ADMINISTRATOR, 
                    CAN_EDIT_USER_REPORTS, 
                    CAN_VIEW_USER_REPORTS, 
                    CAN_VIEW_PURCHASES_REPORTS, 
                    CAN_CREATE_EXTERNAL_ORDERS, 
                    CAN_SEND_EXTERNAL_ORDERS, 
                    CAN_EDIT_EGAIS_DOCUMENTS, 
                    CAN_CREATE_INVOICE_FROM_EGAIS_WITHOUT_PRODUCER, 
                    IIKOCARD_CAN_USE_IIKOCARD, 
                    IIKOCARD_CAN_ADD_CARDS, 
                    IIKOCARD_CAN_ADD_GROUP_OF_CARDS, 
                    IIKOCARD_CAN_ADD_GROUP_OF_CARDS_WITH_OPERATIONS_PROCESSING, 
                    IIKOCARD_CAN_ACTIVATE_CARDS, 
                    IIKOCARD_CAN_DEACTIVATE_CARDS, 
                    IIKOCARD_CAN_BLOCK_CARDS, 
                    IIKOCARD_CAN_DELETE_CARDS, 
                    IIKOCARD_CAN_UNDO_CARDS_DELETION, 
                    IIKOCARD_CAN_UNBLOCK_CARDS, 
                    IIKOCARD_CAN_REPLENISH, 
                    IIKOCARD_CAN_SET_INITIAL_BALANCE, 
                    IIKOCARD_CAN_WRITEOFF, 
                    IIKOCARD_CAN_TRANSFER_BETWEEN_ORGANIZATIONS, 
                    IIKOCARD_CAN_IMPORT_FROM_FILE, 
                    IIKOCARD_CAN_CANCEL_OPERATION, 
                    IIKOCARD_CAN_VIEW_CARDS_REPORT, 
                    IIKOCARD_CAN_VIEW_ORGANIZATIONS_REPORT, 
                    IIKOCARD_CAN_VIEW_OPERATIONS_REPORT, 
                    IIKOCARD_CAN_VIEW_PAYMENTS_PER_CARD_REPORT, 
                    IIKOCARD_CAN_VIEW_TURNOVER_REPORT, 
                    IIKOCARD_CAN_VIEW_ORG_TURNOVER_REPORT, 
                    IIKOCARD_CAN_VIEW_CASH_FLOW_REPORT, 
                    IIKOCARD_CAN_VIEW_CARD_USAGE_REPORT, 
                    IIKOCARD_CAN_ADMINISTRATE, 
                    IIKOCARD_CAN_VIEW_EVENTS_JOURNAL, 
                    DELIVERY_EDIT_STREET, 
                    CAN_EDIT_DELIVERY, 
                    CAN_APPROVE_DELIVERY, 
                    DELIVERY_CANCEL_DELIVERY_ORDER, 
                    CAN_CLOSE_DELIVERY, 
                    CAN_DELIVERY_COURIER, 
                    CAN_CONFIRM_DELIVERY, 
                    CAN_DELETE_EXTERNAL_PAYMENTS, 
                    CAN_BYPASS_DELIVERY_RESTRICTIONS, 
                    CAN_SET_ACTUAL_DELIVERY_TIME, 
                    DELIVERY_RATE, 
                    CAN_CHANGE_OPERATOR, 
                    CAN_APPLY_COURIER_IF_DEBT_MORE_MAXIMUM, 
                    CAN_ACCESS_COURIER_LOCATION, 
                    CAN_ADD_TO_HIGH_RISK, 
                    CAN_SEE_FULL_NUMBER, 
                    CAN_ACCESS_API, 
                    PAYMENT_SYSTEM_ADMINISTRATION, 
                    CAN_AUTH_TERMINALS, 
                    CAN_VIEW_BUDGET, 
                    CAN_EDIT_BUDGET, 
                    CAN_EDIT_STATUS_BUDGET, 
                    CAN_EDIT_FRANCHISE_NOMENCLATURE, 
                    CAN_EDIT_FRANCHISE_MENU, 
                    CAN_IMPORT_BANK_TRANSACTIONS, 
                    CAN_EXPORT_BANK_TRANSACTIONS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string Code
        {
            get { return code; }
        }

        public bool ResponsiblePermission
        {
            get { return responsiblePermission; }
        }

        public RegionalFeatureId RegionalFeatureId
        {
            get { return regionalFeatureId; }
        }

    }

    [DataClass("PermissionState")]
    public enum PermissionState
    {
        ALLOW,
        DENY,
        DEFAULT,
        WHERE_RESPONSIBLE
    }

    [DataClass("SimplePermissionOwner")]
    public abstract partial class SimplePermissionOwner : LocalizableNamePersistedEntity
    {
        [HasDefaultValue]
        private bool administrator = false;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Permission, PermissionState> permissions = new Dictionary<Permission, PermissionState>();

        protected SimplePermissionOwner() {}

        protected SimplePermissionOwner(Guid id, LocalizableValue name)
            : base(id, name)
        {

        }
        public bool Administrator
        {
            get { return administrator; }
            set { administrator = value; }
        }

        [NotNull]
        public Dictionary<Permission, PermissionState> Permissions
        {
            get { return permissions; }
        }

    }

    [DataClass("PrintCallback")]
    public partial class PrintCallback
    {
        private User user;
        private string failedMsg;
        private string failedLogMsg;
        private string resultMsg;

        protected PrintCallback() {}

        public PrintCallback(User user, string failedMsg, string failedLogMsg, string resultMsg)
        {
            this.user = user;
            this.failedMsg = failedMsg;
            this.failedLogMsg = failedLogMsg;
            this.resultMsg = resultMsg;
        }
        public User User
        {
            get { return user; }
            set { user = value; }
        }

        public string FailedMsg
        {
            get { return failedMsg; }
            set { failedMsg = value; }
        }

        public string FailedLogMsg
        {
            get { return failedLogMsg; }
            set { failedLogMsg = value; }
        }

        public string ResultMsg
        {
            get { return resultMsg; }
            set { resultMsg = value; }
        }

    }

    [RootEntity]
    [DataClass("PushSubscriberConfiguration")]
    public partial class PushSubscriberConfiguration : PersistedEntity
    {
        private string subscriberAlias;
        private string subscriberUrl;
        private int notificationPeriodSec;
        private int connectTimeoutMillis;
        private string mediaType;
        private bool forcedDisabled;
        private HashSet<PushSubscriptionEntity> subscriptionEntities;
        private DateTime? expireDateTime;

        protected PushSubscriberConfiguration() {}

        public PushSubscriberConfiguration(Guid id, string subscriberAlias, string subscriberUrl, int notificationPeriodSec, int connectTimeoutMillis, string mediaType, bool forcedDisabled, DateTime? expireDateTime)
            : base(id)
        {
            this.subscriberAlias = subscriberAlias;
            this.subscriberUrl = subscriberUrl;
            this.notificationPeriodSec = notificationPeriodSec;
            this.connectTimeoutMillis = connectTimeoutMillis;
            this.mediaType = mediaType;
            this.forcedDisabled = forcedDisabled;
            this.expireDateTime = expireDateTime;
        }

        public PushSubscriberConfiguration(Guid id)
            : base(id)
        {

        }

        public string SubscriberAlias
        {
            get { return subscriberAlias; }
            set { subscriberAlias = value; }
        }

        public string SubscriberUrl
        {
            get { return subscriberUrl; }
            set { subscriberUrl = value; }
        }

        public int NotificationPeriodSec
        {
            get { return notificationPeriodSec; }
            set { notificationPeriodSec = value; }
        }

        public int ConnectTimeoutMillis
        {
            get { return connectTimeoutMillis; }
            set { connectTimeoutMillis = value; }
        }

        public string MediaType
        {
            get { return mediaType; }
            set { mediaType = value; }
        }

        public bool ForcedDisabled
        {
            get { return forcedDisabled; }
            set { forcedDisabled = value; }
        }

        public HashSet<PushSubscriptionEntity> SubscriptionEntities
        {
            get { return subscriptionEntities; }
            set { subscriptionEntities = value; }
        }

        public DateTime? ExpireDateTime
        {
            get { return expireDateTime; }
            set { expireDateTime = value; }
        }

    }

    [DataClass("PushSubscriptionEntity")]
    public partial class PushSubscriptionEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string entityClassName = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<PushSubscriptionField> fields = new HashSet<PushSubscriptionField>();

        protected PushSubscriptionEntity() {}

        public PushSubscriptionEntity(string entityClassName)
        {
            this.entityClassName = entityClassName;
        }
        [NotNull]
        public string EntityClassName
        {
            get { return entityClassName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  entityClassName = value;
            }
        }

        [NotNull]
        public HashSet<PushSubscriptionField> Fields
        {
            get { return fields; }
        }

    }

    [DataClass("PushSubscriptionField")]
    public partial class PushSubscriptionField
    {
        private string fieldName;

        protected PushSubscriptionField() {}

        public PushSubscriptionField(string fieldName)
        {
            this.fieldName = fieldName;
        }
        public string FieldName
        {
            get { return fieldName; }
            set { fieldName = value; }
        }

    }

    [RootEntity]
    [DataClass("ChainConnectionSettings")]
    public partial class ChainConnectionSettings : PersistedEntity
    {
        private RemoteServerSettings remoteServerSettings;

        protected ChainConnectionSettings() {}

        public ChainConnectionSettings(Guid id, RemoteServerSettings remoteServerSettings)
            : base(id)
        {
            this.remoteServerSettings = remoteServerSettings;
        }

        public ChainConnectionSettings(Guid id)
            : base(id)
        {

        }

        public RemoteServerSettings RemoteServerSettings
        {
            get { return remoteServerSettings; }
            set { remoteServerSettings = value; }
        }

    }

    [DataClass("ClassDescription")]
    public partial class ClassDescription
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string replicatedClassName = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<string> excludedFieldNames = new List<string>();
        [HasDefaultValue]
        private bool onlyNew = false;
        [HasDefaultValue]
        private bool onlyUpdate = false;
        [HasDefaultValue]
        private bool forceReplication = false;

        protected ClassDescription() {}

        public ClassDescription(string replicatedClassName)
        {
            this.replicatedClassName = replicatedClassName;
        }
        [NotNull]
        public string ReplicatedClassName
        {
            get { return replicatedClassName; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  replicatedClassName = value;
            }
        }

        [NotNull]
        public List<string> ExcludedFieldNames
        {
            get { return excludedFieldNames; }
        }

        public bool OnlyNew
        {
            get { return onlyNew; }
            set { onlyNew = value; }
        }

        public bool OnlyUpdate
        {
            get { return onlyUpdate; }
            set { onlyUpdate = value; }
        }

        public bool ForceReplication
        {
            get { return forceReplication; }
            set { forceReplication = value; }
        }

    }

    [DataClass("ForcedReplicationClass")]
    public partial class ForcedReplicationClass : CachedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string className = "";
        private bool? onlyNew;
        private bool? onlyUpdate;
        private string reason;

        protected ForcedReplicationClass() {}

        public ForcedReplicationClass(Guid id, string className, bool? onlyNew, bool? onlyUpdate, string reason)
            : base(id)
        {
            this.className = className;
            this.onlyNew = onlyNew;
            this.onlyUpdate = onlyUpdate;
            this.reason = reason;
        }

        public ForcedReplicationClass(Guid id, string className)
            : base(id)
        {
            this.className = className;
        }

        [NotNull]
        public string ClassName
        {
            get { return className; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  className = value;
            }
        }

        public bool? OnlyNew
        {
            get { return onlyNew; }
            set { onlyNew = value; }
        }

        public bool? OnlyUpdate
        {
            get { return onlyUpdate; }
            set { onlyUpdate = value; }
        }

        public string Reason
        {
            get { return reason; }
            set { reason = value; }
        }

    }

    [DataClass("RemoteServerSettings")]
    public partial class RemoteServerSettings
    {
        private string url;
        private string loginName;
        private string password;

        protected RemoteServerSettings() {}

        public RemoteServerSettings(string url, string loginName, string password)
        {
            this.url = url;
            this.loginName = loginName;
            this.password = password;
        }
        public string Url
        {
            get { return url; }
            set { url = value; }
        }

        public string LoginName
        {
            get { return loginName; }
            set { loginName = value; }
        }

        public string Password
        {
            get { return password; }
            set { password = value; }
        }

    }

    [RootEntity]
    [DataClass("ReplicationConfig")]
    public partial class ReplicationConfig : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string name = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ReplicationConfigDepartmentSpecific> departmentSpecific = new List<ReplicationConfigDepartmentSpecific>();
        private ReplicationMode replicationMode;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ClassDescription> classes = new List<ClassDescription>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<string> eventsToReplicate = new HashSet<string>();
        private ReplicationSchedule replicationSchedule;
        private DateTime? dateFrom;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ReplicationConfig() {}

        public ReplicationConfig(Guid id, string name, ReplicationMode replicationMode, ReplicationSchedule replicationSchedule)
            : base(id)
        {
            this.name = name;
            this.replicationMode = replicationMode;
            this.replicationSchedule = replicationSchedule;
        }

        public ReplicationConfig(Guid id, string name, ReplicationMode replicationMode)
            : base(id)
        {
            this.name = name;
            this.replicationMode = replicationMode;
        }

        [NotNull]
        public string Name
        {
            get { return name; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  name = value;
            }
        }

        [NotNull]
        public List<ReplicationConfigDepartmentSpecific> DepartmentSpecific
        {
            get { return departmentSpecific; }
        }

        public ReplicationMode ReplicationMode
        {
            get { return replicationMode; }
            set { replicationMode = value; }
        }

        [NotNull]
        public List<ClassDescription> Classes
        {
            get { return classes; }
        }

        [NotNull]
        public HashSet<string> EventsToReplicate
        {
            get { return eventsToReplicate; }
        }

        public ReplicationSchedule ReplicationSchedule
        {
            get { return replicationSchedule; }
            set { replicationSchedule = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

    }

    [DataClass("ReplicationConfigDepartmentSpecific")]
    public partial class ReplicationConfigDepartmentSpecific
    {
        private Guid departmentId;
        private TimeSpan? phaseShift;

        protected ReplicationConfigDepartmentSpecific() {}

        public ReplicationConfigDepartmentSpecific(Guid departmentId)
        {
            this.departmentId = departmentId;
        }
        public Guid DepartmentId
        {
            get { return departmentId; }
            set { departmentId = value; }
        }

        public TimeSpan? PhaseShift
        {
            get { return phaseShift; }
            set { phaseShift = value; }
        }

    }

    [DataClass("ReplicationEvent")]
    public partial class ReplicationEvent : RestoEvent
    {
        private ReplicationConfig config;
        private ServerNode source;
        private ServerNode target;
        private ServerNode initiator;
        private int revisionFrom;
        private int revisionTo;
        [HasDefaultValue]
        private int? entitiesCount = 0;
        [HasDefaultValue]
        private int? exchangeTime = 0;
        private bool success;
        private string error;

        protected ReplicationEvent() {}

        public ReplicationEvent(Guid id, DepartmentEntity department, DateTime date, ReplicationConfig config, ServerNode source, ServerNode target, ServerNode initiator, int revisionFrom, int revisionTo, bool success)
            : base(id, department, date)
        {
            this.config = config;
            this.source = source;
            this.target = target;
            this.initiator = initiator;
            this.revisionFrom = revisionFrom;
            this.revisionTo = revisionTo;
            this.success = success;
        }

        public ReplicationEvent(Guid id, DateTime date)
            : base(id, date)
        {

        }

        public ReplicationConfig Config
        {
            get { return config; }
            set { config = value; }
        }

        public ServerNode Source
        {
            get { return source; }
            set { source = value; }
        }

        public ServerNode Target
        {
            get { return target; }
            set { target = value; }
        }

        public ServerNode Initiator
        {
            get { return initiator; }
            set { initiator = value; }
        }

        public int RevisionFrom
        {
            get { return revisionFrom; }
            set { revisionFrom = value; }
        }

        public int RevisionTo
        {
            get { return revisionTo; }
            set { revisionTo = value; }
        }

        public int? EntitiesCount
        {
            get { return entitiesCount; }
            set { entitiesCount = value; }
        }

        public int? ExchangeTime
        {
            get { return exchangeTime; }
            set { exchangeTime = value; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        [CanBeNull]
        public string Error
        {
            get { return error; }
            set { error = value; }
        }

    }

    [DataClass("ReplicationMode")]
    public enum ReplicationMode
    {
        INCOMING,
        OUTGOING
    }

    [DataClass("ReplicationRequest")]
    public partial class ReplicationRequest
    {
        [NotNull, NotNullField]
        private ServerNode serverNode;
        [HasDefaultValue]
        private int revisionFrom = 0;
        private Dictionary<Guid, int> additionalDepartmentsRevisions;
        private ICollection<CachedEntityInfo> missingEntities;
        private ByValue<ReplicationConfig> configByValue;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string installationId = "";
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<string> modelChangeSet = new HashSet<string>();

        protected ReplicationRequest() {}

        public ReplicationRequest(ServerNode serverNode, string installationId)
        {
            this.serverNode = serverNode;
            this.installationId = installationId;
        }
        [NotNull]
        public ServerNode ServerNode
        {
            get { return serverNode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  serverNode = value;
            }
        }

        public int RevisionFrom
        {
            get { return revisionFrom; }
            set { revisionFrom = value; }
        }

        [CanBeNull]
        public Dictionary<Guid, int> AdditionalDepartmentsRevisions
        {
            get { return additionalDepartmentsRevisions; }
            set { additionalDepartmentsRevisions = value; }
        }

        [CanBeNull]
        public ICollection<CachedEntityInfo> MissingEntities
        {
            get { return missingEntities; }
            set { missingEntities = value; }
        }

        [CanBeNull]
        public ByValue<ReplicationConfig> ConfigByValue
        {
            get { return configByValue; }
            set { configByValue = value; }
        }

        [NotNull]
        public string InstallationId
        {
            get { return installationId; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  installationId = value;
            }
        }

        [NotNull]
        public HashSet<string> ModelChangeSet
        {
            get { return modelChangeSet; }
        }

    }

    [DataClass("ReplicationResult")]
    public partial class ReplicationResult
    {
        private int revisionFrom;
        private int revisionTo;
        private DateTime? dateFrom;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<EntitiesUpdateItem> updateItems = new List<EntitiesUpdateItem>();
        private List<EntitiesUpdateItem> missingReferencedItems;
        private ByValue<ReplicationConfig> config;
        [NotNull, NotNullField]
        private SourceTargetPair sourceTargetPair;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<string> modelChangeSet = new HashSet<string>();
        private HashSet<Guid> targetDepartmentsForFiltering;
        private Dictionary<Guid, int> additionalDepartmentsRevisions;

        protected ReplicationResult() {}

        public ReplicationResult(int revisionFrom, int revisionTo, DateTime? dateFrom, ByValue<ReplicationConfig> config, SourceTargetPair sourceTargetPair)
        {
            this.revisionFrom = revisionFrom;
            this.revisionTo = revisionTo;
            this.dateFrom = dateFrom;
            this.config = config;
            this.sourceTargetPair = sourceTargetPair;
        }

        public ReplicationResult(SourceTargetPair sourceTargetPair)
        {
            this.sourceTargetPair = sourceTargetPair;
        }

        public int RevisionFrom
        {
            get { return revisionFrom; }
            set { revisionFrom = value; }
        }

        public int RevisionTo
        {
            get { return revisionTo; }
            set { revisionTo = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        [NotNull]
        public List<EntitiesUpdateItem> UpdateItems
        {
            get { return updateItems; }
        }

        [CanBeNull]
        public List<EntitiesUpdateItem> MissingReferencedItems
        {
            get { return missingReferencedItems; }
            set { missingReferencedItems = value; }
        }

        public ByValue<ReplicationConfig> Config
        {
            get { return config; }
            set { config = value; }
        }

        [NotNull]
        public SourceTargetPair SourceTargetPair
        {
            get { return sourceTargetPair; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  sourceTargetPair = value;
            }
        }

        [NotNull]
        public HashSet<string> ModelChangeSet
        {
            get { return modelChangeSet; }
        }

        public HashSet<Guid> TargetDepartmentsForFiltering
        {
            get { return targetDepartmentsForFiltering; }
            set { targetDepartmentsForFiltering = value; }
        }

        [CanBeNull]
        public Dictionary<Guid, int> AdditionalDepartmentsRevisions
        {
            get { return additionalDepartmentsRevisions; }
            set { additionalDepartmentsRevisions = value; }
        }

    }

    [DataClass("ReplicationSchedule")]
    public partial class ReplicationSchedule
    {
        private bool scheduledByChain;
        private bool runWhenSessionClosed;
        private bool runPeriodically;
        private TimeSpan? runPeriodStart;
        private TimeSpan? runPeriodInterval;
        private bool runAtSpecifiedTime;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<TimeSpan> runAtSpecifiedTimeList = new List<TimeSpan>();
        private TimeSpan? spreadInterval;

        protected ReplicationSchedule() {}

        public ReplicationSchedule(bool scheduledByChain, bool runWhenSessionClosed, bool runPeriodically, TimeSpan? runPeriodStart, TimeSpan? runPeriodInterval, bool runAtSpecifiedTime, TimeSpan? spreadInterval)
        {
            this.scheduledByChain = scheduledByChain;
            this.runWhenSessionClosed = runWhenSessionClosed;
            this.runPeriodically = runPeriodically;
            this.runPeriodStart = runPeriodStart;
            this.runPeriodInterval = runPeriodInterval;
            this.runAtSpecifiedTime = runAtSpecifiedTime;
            this.spreadInterval = spreadInterval;
        }
        public bool ScheduledByChain
        {
            get { return scheduledByChain; }
            set { scheduledByChain = value; }
        }

        public bool RunWhenSessionClosed
        {
            get { return runWhenSessionClosed; }
            set { runWhenSessionClosed = value; }
        }

        public bool RunPeriodically
        {
            get { return runPeriodically; }
            set { runPeriodically = value; }
        }

        public TimeSpan? RunPeriodStart
        {
            get { return runPeriodStart; }
            set { runPeriodStart = value; }
        }

        public TimeSpan? RunPeriodInterval
        {
            get { return runPeriodInterval; }
            set { runPeriodInterval = value; }
        }

        public bool RunAtSpecifiedTime
        {
            get { return runAtSpecifiedTime; }
            set { runAtSpecifiedTime = value; }
        }

        [NotNull]
        public List<TimeSpan> RunAtSpecifiedTimeList
        {
            get { return runAtSpecifiedTimeList; }
        }

        public TimeSpan? SpreadInterval
        {
            get { return spreadInterval; }
            set { spreadInterval = value; }
        }

    }

    [RootEntity]
    [DataClass("ReplicationState")]
    public partial class ReplicationState : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<SourceTargetPair, int> lastRevisions = new Dictionary<SourceTargetPair, int>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, Dictionary<Guid, int>> lastAdditionalDepsRevisions = new Dictionary<Guid, Dictionary<Guid, int>>();

        protected ReplicationState() {}

        public ReplicationState(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<SourceTargetPair, int> LastRevisions
        {
            get { return lastRevisions; }
        }

        [NotNull]
        public Dictionary<Guid, Dictionary<Guid, int>> LastAdditionalDepsRevisions
        {
            get { return lastAdditionalDepsRevisions; }
        }

    }

    [RootEntity]
    [DataClass("ReplicationStateForReserveCopy")]
    public partial class ReplicationStateForReserveCopy : PersistedEntity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, int> lastRevisions = new Dictionary<Guid, int>();

        protected ReplicationStateForReserveCopy() {}

        public ReplicationStateForReserveCopy(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public Dictionary<Guid, int> LastRevisions
        {
            get { return lastRevisions; }
        }

    }

    [RootEntity]
    [DataClass("ReplicationStateSettings")]
    public partial class ReplicationStateSettings : PersistedEntity
    {
        [HasDefaultValue]
        private bool allowSchedules = true;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Guid, OperationInfoCommented> departmentsToReplicateNow = new Dictionary<Guid, OperationInfoCommented>();

        protected ReplicationStateSettings() {}

        public ReplicationStateSettings(Guid id)
            : base(id)
        {

        }
        public bool AllowSchedules
        {
            get { return allowSchedules; }
            set { allowSchedules = value; }
        }

        [NotNull]
        public Dictionary<Guid, OperationInfoCommented> DepartmentsToReplicateNow
        {
            get { return departmentsToReplicateNow; }
        }

    }

    [DataClass("RevisionConfig")]
    public partial class RevisionConfig
    {
        private int mainRevisionFrom;
        private Dictionary<Guid, int> additionalDepartmentsRevisions;

        public RevisionConfig() {}

        public RevisionConfig(int mainRevisionFrom)
        {
            this.mainRevisionFrom = mainRevisionFrom;
        }
        public int MainRevisionFrom
        {
            get { return mainRevisionFrom; }
            set { mainRevisionFrom = value; }
        }

        public Dictionary<Guid, int> AdditionalDepartmentsRevisions
        {
            get { return additionalDepartmentsRevisions; }
            set { additionalDepartmentsRevisions = value; }
        }

    }

    [RootEntity]
    [DataClass("ServerInstance")]
    public partial class ServerInstance : PersistedEntity
    {
        private bool registered;
        [NotNull, NotNullField]
        private ServerNode currentNode;
        private ServerNode chainNode;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DepartmentEntity, ServerNode> departmentToNode = new Dictionary<DepartmentEntity, ServerNode>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DepartmentEntity, ServerNode> departmentToNodeLast = new Dictionary<DepartmentEntity, ServerNode>();

        protected ServerInstance() {}

        public ServerInstance(Guid id, bool registered, ServerNode currentNode)
            : base(id)
        {
            this.registered = registered;
            this.currentNode = currentNode;
        }

        public ServerInstance(Guid id, ServerNode currentNode)
            : base(id)
        {
            this.currentNode = currentNode;
        }

        public bool Registered
        {
            get { return registered; }
            set { registered = value; }
        }

        [NotNull]
        public ServerNode CurrentNode
        {
            get { return currentNode; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  currentNode = value;
            }
        }

        [CanBeNull]
        public ServerNode ChainNode
        {
            get { return chainNode; }
            set { chainNode = value; }
        }

        [NotNull]
        public Dictionary<DepartmentEntity, ServerNode> DepartmentToNode
        {
            get { return departmentToNode; }
        }

        [NotNull]
        public Dictionary<DepartmentEntity, ServerNode> DepartmentToNodeLast
        {
            get { return departmentToNodeLast; }
        }

    }

    [RootEntity]
    [DataClass("ServerNode")]
    public partial class ServerNode : PersistedEntity
    {
        private DepartmentEntity rmsDepartment;
        private Guid installationId;
        private bool chain;
        private string host;
        private string version;
        private List<string> modelChangeSet;

        protected ServerNode() {}

        public ServerNode(Guid id, DepartmentEntity rmsDepartment, Guid installationId, bool chain, string host, string version)
            : base(id)
        {
            this.rmsDepartment = rmsDepartment;
            this.installationId = installationId;
            this.chain = chain;
            this.host = host;
            this.version = version;
        }

        public ServerNode(Guid id, Guid installationId)
            : base(id)
        {
            this.installationId = installationId;
        }

        public DepartmentEntity RmsDepartment
        {
            get { return rmsDepartment; }
            set { rmsDepartment = value; }
        }

        public Guid InstallationId
        {
            get { return installationId; }
            set { installationId = value; }
        }

        public bool Chain
        {
            get { return chain; }
            set { chain = value; }
        }

        public string Host
        {
            get { return host; }
            set { host = value; }
        }

        public string Version
        {
            get { return version; }
            set { version = value; }
        }

        public List<string> ModelChangeSet
        {
            get { return modelChangeSet; }
            set { modelChangeSet = value; }
        }

    }

    [DataClass("ServerNodeInfo")]
    public partial class ServerNodeInfo : CachedEntity
    {
        private int localId;
        private DateTime? created;
        private string installationId;

        protected ServerNodeInfo() {}

        public ServerNodeInfo(Guid id, int localId, DateTime? created, string installationId)
            : base(id)
        {
            this.localId = localId;
            this.created = created;
            this.installationId = installationId;
        }

        public ServerNodeInfo(Guid id)
            : base(id)
        {

        }

        public int LocalId
        {
            get { return localId; }
            set { localId = value; }
        }

        public DateTime? Created
        {
            get { return created; }
            set { created = value; }
        }

        public string InstallationId
        {
            get { return installationId; }
            set { installationId = value; }
        }

    }

    [DataClass("SourceTargetPair")]
    public partial class SourceTargetPair
    {
        [NotNull, NotNullField]
        private ServerNode source;
        [NotNull, NotNullField]
        private ServerNode target;

        protected SourceTargetPair() {}

        public SourceTargetPair(ServerNode source, ServerNode target)
        {
            this.source = source;
            this.target = target;
        }
        [NotNull]
        public ServerNode Source
        {
            get { return source; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  source = value;
            }
        }

        [NotNull]
        public ServerNode Target
        {
            get { return target; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  target = value;
            }
        }

    }

    [RootEntity]
    [DataClass("UocReplicationState")]
    public partial class UocReplicationState : PersistedEntity
    {
        private int lastRevision;
        [HasDefaultValue]
        private int schedulePeriodInMinutes = 10;
        private string iikoWebAddress;

        protected UocReplicationState() {}

        public UocReplicationState(Guid id, int lastRevision)
            : base(id)
        {
            this.lastRevision = lastRevision;
        }
        public int LastRevision
        {
            get { return lastRevision; }
            set { lastRevision = value; }
        }

        public int SchedulePeriodInMinutes
        {
            get { return schedulePeriodInMinutes; }
            set { schedulePeriodInMinutes = value; }
        }

        [CanBeNull]
        public string IikoWebAddress
        {
            get { return iikoWebAddress; }
            set { iikoWebAddress = value; }
        }

    }

    [DataClass("BackRegistrationResult")]
    public partial class BackRegistrationResult
    {
        private SlaveRegistrationStatus status;
        private string errorMsg;

        public BackRegistrationResult() {}

        public BackRegistrationResult(SlaveRegistrationStatus status, string errorMsg)
        {
            this.status = status;
            this.errorMsg = errorMsg;
        }
        public SlaveRegistrationStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public string ErrorMsg
        {
            get { return errorMsg; }
            set { errorMsg = value; }
        }

    }

    [DataClass("RemoteServerStatus")]
    public partial class RemoteServerStatus
    {
        private RemoteServerSettings remoteServerSettings;
        private bool isRegistered;

        public RemoteServerStatus() {}

        public RemoteServerStatus(RemoteServerSettings remoteServerSettings, bool isRegistered)
        {
            this.remoteServerSettings = remoteServerSettings;
            this.isRegistered = isRegistered;
        }
        public RemoteServerSettings RemoteServerSettings
        {
            get { return remoteServerSettings; }
            set { remoteServerSettings = value; }
        }

        public bool IsRegistered
        {
            get { return isRegistered; }
            set { isRegistered = value; }
        }

    }

    [DataClass("ReplicationMasterServerResult")]
    public partial class ReplicationMasterServerResult
    {
        private Guid? regplicationConfigId;
        private bool success;
        private string message;

        protected ReplicationMasterServerResult() {}

        public ReplicationMasterServerResult(Guid? regplicationConfigId, bool success, string message)
        {
            this.regplicationConfigId = regplicationConfigId;
            this.success = success;
            this.message = message;
        }
        public Guid? RegplicationConfigId
        {
            get { return regplicationConfigId; }
            set { regplicationConfigId = value; }
        }

        public bool Success
        {
            get { return success; }
            set { success = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

    }

    [DataClass("ReplicationResultWithException")]
    public partial class ReplicationResultWithException : BackRegistrationResult
    {

        protected ReplicationResultWithException() {}

        public ReplicationResultWithException(SlaveRegistrationStatus status, string errorMsg)
            : base(status, errorMsg)
        {

        }
    }

    [DataClass("SlaveRegistrationStatus")]
    public enum SlaveRegistrationStatus
    {
        SUCCESS,
        ERROR_DEPARTMENT_NOT_FOUND,
        SUCCESS_ALREADY_REGISTERED,
        ERROR_CANT_REREGISTER_NODE,
        ERROR_CANT_REREGISTER_DEPARTMENT,
        ERROR_NODE_NOT_REGISTERED,
        ERROR
    }

    [DataClass("SlaveServerRegistrationResult")]
    public partial class SlaveServerRegistrationResult
    {
        private SlaveRegistrationStatus registrationStatus;
        private string message;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<ReplicationConfig>> replicationConfigs = new List<ByValue<ReplicationConfig>>();
        private ByValue<DepartmentEntity> rmsDepartment;
        private List<ByValue<CorporatedEntity>> corporatedEntities;
        private ByValue<ServerNode> chainNode;
        private ReplicationResult replicationResult;

        protected SlaveServerRegistrationResult() {}

        public SlaveServerRegistrationResult(SlaveRegistrationStatus registrationStatus, string message, ByValue<DepartmentEntity> rmsDepartment, ByValue<ServerNode> chainNode)
        {
            this.registrationStatus = registrationStatus;
            this.message = message;
            this.rmsDepartment = rmsDepartment;
            this.chainNode = chainNode;
        }

        public SlaveServerRegistrationResult(SlaveRegistrationStatus registrationStatus)
        {
            this.registrationStatus = registrationStatus;
        }

        public SlaveRegistrationStatus RegistrationStatus
        {
            get { return registrationStatus; }
            set { registrationStatus = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

        [NotNull]
        public List<ByValue<ReplicationConfig>> ReplicationConfigs
        {
            get { return replicationConfigs; }
        }

        public ByValue<DepartmentEntity> RmsDepartment
        {
            get { return rmsDepartment; }
            set { rmsDepartment = value; }
        }

        public List<ByValue<CorporatedEntity>> CorporatedEntities
        {
            get { return corporatedEntities; }
            set { corporatedEntities = value; }
        }

        public ByValue<ServerNode> ChainNode
        {
            get { return chainNode; }
            set { chainNode = value; }
        }

        [CanBeNull]
        public ReplicationResult ReplicationResult
        {
            get { return replicationResult; }
            set { replicationResult = value; }
        }

    }

    [DataClass("CheckReplicationResponse")]
    public partial class CheckReplicationResponse
    {
        private CheckReplicationStatus status;
        private HashSet<ReplicationMode> replicationModes;

        protected CheckReplicationResponse() {}

        public CheckReplicationResponse(CheckReplicationStatus status)
        {
            this.status = status;
        }
        public CheckReplicationStatus Status
        {
            get { return status; }
            set { status = value; }
        }

        public HashSet<ReplicationMode> ReplicationModes
        {
            get { return replicationModes; }
            set { replicationModes = value; }
        }

    }

    [DataClass("CheckReplicationStatus")]
    [EnumClass]
    public partial class CheckReplicationStatus
    {
        public static readonly CheckReplicationStatus REQUIRED = new CheckReplicationStatus("REQUIRED", "required");
        public static readonly CheckReplicationStatus SCHEDULED = new CheckReplicationStatus("SCHEDULED", "required");
        public static readonly CheckReplicationStatus ALLOWED = new CheckReplicationStatus("ALLOWED", "true");
        public static readonly CheckReplicationStatus DENIED = new CheckReplicationStatus("DENIED", "false");

        private readonly string legacyName;
        private readonly string __value;

        private CheckReplicationStatus(string __value, string legacyName)
        {
            this.__value = __value;
            this.legacyName = legacyName;
        }

        public static CheckReplicationStatus Parse(string value)
        {
            switch(value)
            {
                case "REQUIRED": return REQUIRED;
                case "SCHEDULED": return SCHEDULED;
                case "ALLOWED": return ALLOWED;
                case "DENIED": return DENIED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CheckReplicationStatus[] VALUES
        {
            get
            {
                return new []
                {
                    REQUIRED, 
                    SCHEDULED, 
                    ALLOWED, 
                    DENIED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string LegacyName
        {
            get { return legacyName; }
        }

    }

    [DataClass("RPCHeaders")]
    [EnumClass]
    public partial class RPCHeaders
    {
        public static readonly RPCHeaders LOGIN = new RPCHeaders("LOGIN", "X-Resto-LoginName");
        public static readonly RPCHeaders PASSWORD_HASH = new RPCHeaders("PASSWORD_HASH", "X-Resto-PasswordHash");
        public static readonly RPCHeaders BACK_VERSION = new RPCHeaders("BACK_VERSION", "X-Resto-BackVersion");
        public static readonly RPCHeaders PROTOCOL_VERSION = new RPCHeaders("PROTOCOL_VERSION", "X-Resto-Protocol-Version");
        public static readonly RPCHeaders PROTOCOL_CHANGES = new RPCHeaders("PROTOCOL_CHANGES", "X-Resto-Protocol-Changes");
        public static readonly RPCHeaders GUID_EXPLAIN = new RPCHeaders("GUID_EXPLAIN", "X-Resto-Guid-Explain");
        public static readonly RPCHeaders EDITION = new RPCHeaders("EDITION", "X-Resto-ServerEdition");
        public static readonly RPCHeaders TERMINAL_ID = new RPCHeaders("TERMINAL_ID", "X-Resto-TerminalId");
        public static readonly RPCHeaders TERMINAL_TOKEN = new RPCHeaders("TERMINAL_TOKEN", "X-Resto-TerminalToken");
        public static readonly RPCHeaders AUTH_TYPE = new RPCHeaders("AUTH_TYPE", "X-Resto-AuthType");
        public static readonly RPCHeaders AUTH_RESULT = new RPCHeaders("AUTH_RESULT", "X-Resto-AuthResult");
        public static readonly RPCHeaders FRONT_LOGINED_USER_ID = new RPCHeaders("FRONT_LOGINED_USER_ID", "X-Resto-FrontLoginedUserId");
        public static readonly RPCHeaders FRONT_LOGGED_IN_USER_ID = new RPCHeaders("FRONT_LOGGED_IN_USER_ID", "X-Resto-FrontLoggedInUserId");
        public static readonly RPCHeaders CORRELATION_ID = new RPCHeaders("CORRELATION_ID", "X-Resto-CorrelationId");
        public static readonly RPCHeaders LICENSE_HASH = new RPCHeaders("LICENSE_HASH", "X-Resto-License-Hash");
        public static readonly RPCHeaders RESTRICTIONS_STATE_HASH = new RPCHeaders("RESTRICTIONS_STATE_HASH", "X-Resto-RestrictionsState-Hash");
        public static readonly RPCHeaders OBTAINED_LICENSE_CONNECTIONS_IDS = new RPCHeaders("OBTAINED_LICENSE_CONNECTIONS_IDS", "X-Resto-ConnectionTokens");

        private readonly string name;
        private readonly string __value;

        private RPCHeaders(string __value, string name)
        {
            this.__value = __value;
            this.name = name;
        }

        public static RPCHeaders Parse(string value)
        {
            switch(value)
            {
                case "LOGIN": return LOGIN;
                case "PASSWORD_HASH": return PASSWORD_HASH;
                case "BACK_VERSION": return BACK_VERSION;
                case "PROTOCOL_VERSION": return PROTOCOL_VERSION;
                case "PROTOCOL_CHANGES": return PROTOCOL_CHANGES;
                case "GUID_EXPLAIN": return GUID_EXPLAIN;
                case "EDITION": return EDITION;
                case "TERMINAL_ID": return TERMINAL_ID;
                case "TERMINAL_TOKEN": return TERMINAL_TOKEN;
                case "AUTH_TYPE": return AUTH_TYPE;
                case "AUTH_RESULT": return AUTH_RESULT;
                case "FRONT_LOGINED_USER_ID": return FRONT_LOGINED_USER_ID;
                case "FRONT_LOGGED_IN_USER_ID": return FRONT_LOGGED_IN_USER_ID;
                case "CORRELATION_ID": return CORRELATION_ID;
                case "LICENSE_HASH": return LICENSE_HASH;
                case "RESTRICTIONS_STATE_HASH": return RESTRICTIONS_STATE_HASH;
                case "OBTAINED_LICENSE_CONNECTIONS_IDS": return OBTAINED_LICENSE_CONNECTIONS_IDS;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static RPCHeaders[] VALUES
        {
            get
            {
                return new []
                {
                    LOGIN, 
                    PASSWORD_HASH, 
                    BACK_VERSION, 
                    PROTOCOL_VERSION, 
                    PROTOCOL_CHANGES, 
                    GUID_EXPLAIN, 
                    EDITION, 
                    TERMINAL_ID, 
                    TERMINAL_TOKEN, 
                    AUTH_TYPE, 
                    AUTH_RESULT, 
                    FRONT_LOGINED_USER_ID, 
                    FRONT_LOGGED_IN_USER_ID, 
                    CORRELATION_ID, 
                    LICENSE_HASH, 
                    RESTRICTIONS_STATE_HASH, 
                    OBTAINED_LICENSE_CONNECTIONS_IDS
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Name
        {
            get { return name; }
        }

    }

    [DataClass("ServiceResultStatus")]
    public enum ServiceResultStatus
    {
        SUCCESS,
        RECOVERABLE_WARNING,
        DISPLAYABLE_ERROR,
        SYSTEM_ERROR
    }

    [DataClass("SpecialArg")]
    [EnumClass]
    public partial class SpecialArg
    {
        public static readonly SpecialArg ENTITIES_VERSION = new SpecialArg("ENTITIES_VERSION", "entities-version", typeof(int?), false);
        public static readonly SpecialArg CLIENT_TYPE = new SpecialArg("CLIENT_TYPE", "client-type", typeof(string), true);
        public static readonly SpecialArg ENABLE_WARNINGS = new SpecialArg("ENABLE_WARNINGS", "enable-warnings", typeof(bool?), false);
        public static readonly SpecialArg CLIENT_CALL_ID = new SpecialArg("CLIENT_CALL_ID", "client-call-id", typeof(Guid?), false);
        public static readonly SpecialArg LICENSE_HASH = new SpecialArg("LICENSE_HASH", "license-hash", typeof(int?), false);
        public static readonly SpecialArg RESTRICTIONS_STATE_HASH = new SpecialArg("RESTRICTIONS_STATE_HASH", "restrictions-state-hash", typeof(int?), false);
        public static readonly SpecialArg OBTAINED_LICENSE_CONNECTIONS_IDS = new SpecialArg("OBTAINED_LICENSE_CONNECTIONS_IDS", "obtained-license-connections-ids", typeof(string), false);
        public static readonly SpecialArg REQUEST_WATCHDOG_CHECK_RESULTS = new SpecialArg("REQUEST_WATCHDOG_CHECK_RESULTS", "request-watchdog-check-results", typeof(bool?), false);
        public static readonly SpecialArg USE_RAW_ENTITIES = new SpecialArg("USE_RAW_ENTITIES", "use-raw-entities", typeof(bool?), false);

        private readonly string name;
        private readonly Type type;
        private readonly bool notNull;
        private readonly string __value;

        private SpecialArg(string __value, string name, Type type, bool notNull)
        {
            this.__value = __value;
            this.name = name;
            this.type = type;
            this.notNull = notNull;
        }

        public static SpecialArg Parse(string value)
        {
            switch(value)
            {
                case "ENTITIES_VERSION": return ENTITIES_VERSION;
                case "CLIENT_TYPE": return CLIENT_TYPE;
                case "ENABLE_WARNINGS": return ENABLE_WARNINGS;
                case "CLIENT_CALL_ID": return CLIENT_CALL_ID;
                case "LICENSE_HASH": return LICENSE_HASH;
                case "RESTRICTIONS_STATE_HASH": return RESTRICTIONS_STATE_HASH;
                case "OBTAINED_LICENSE_CONNECTIONS_IDS": return OBTAINED_LICENSE_CONNECTIONS_IDS;
                case "REQUEST_WATCHDOG_CHECK_RESULTS": return REQUEST_WATCHDOG_CHECK_RESULTS;
                case "USE_RAW_ENTITIES": return USE_RAW_ENTITIES;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SpecialArg[] VALUES
        {
            get
            {
                return new []
                {
                    ENTITIES_VERSION, 
                    CLIENT_TYPE, 
                    ENABLE_WARNINGS, 
                    CLIENT_CALL_ID, 
                    LICENSE_HASH, 
                    RESTRICTIONS_STATE_HASH, 
                    OBTAINED_LICENSE_CONNECTIONS_IDS, 
                    REQUEST_WATCHDOG_CHECK_RESULTS, 
                    USE_RAW_ENTITIES
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Name
        {
            get { return name; }
        }

        public Type Type
        {
            get { return type; }
        }

        public bool NotNull
        {
            get { return notNull; }
        }

    }

    [DataClass("CafeSessionSalesData")]
    public partial class CafeSessionSalesData
    {
        private CloseSessionEvent sessionEvent;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<OrderSalesData> orders = new List<OrderSalesData>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PayInOutEvent> payInOutEvents = new List<PayInOutEvent>();

        protected CafeSessionSalesData() {}

        public CafeSessionSalesData(CloseSessionEvent sessionEvent)
        {
            this.sessionEvent = sessionEvent;
        }
        public CloseSessionEvent SessionEvent
        {
            get { return sessionEvent; }
            set { sessionEvent = value; }
        }

        [NotNull]
        public List<OrderSalesData> Orders
        {
            get { return orders; }
        }

        [NotNull]
        public List<PayInOutEvent> PayInOutEvents
        {
            get { return payInOutEvents; }
        }

    }

    [DataClass("OrderSalesData")]
    public partial class OrderSalesData
    {
        [NotNull, NotNullField]
        private OrderPaymentEvent paymentEvent;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ItemSaleEvent> items = new List<ItemSaleEvent>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ItemSaleEventDiscount> discountsAndAdditions = new List<ItemSaleEventDiscount>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<OrderPaymentTransaction> payments = new List<OrderPaymentTransaction>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public OrderSalesData() {}

        public OrderSalesData(OrderPaymentEvent paymentEvent)
        {
            this.paymentEvent = paymentEvent;
        }
        [NotNull]
        public OrderPaymentEvent PaymentEvent
        {
            get { return paymentEvent; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  paymentEvent = value;
            }
        }

        [NotNull]
        public List<ItemSaleEvent> Items
        {
            get { return items; }
        }

        [NotNull]
        public List<ItemSaleEventDiscount> DiscountsAndAdditions
        {
            get { return discountsAndAdditions; }
        }

        [NotNull]
        public List<OrderPaymentTransaction> Payments
        {
            get { return payments; }
        }

    }

    [DataClass("ReferenceData")]
    public partial class ReferenceData
    {
        private DateTime? dateFrom;
        private DateTime? dateUpload;
        private string companyName;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<ProductTreeEntity>> productsAndGroups = new List<ByValue<ProductTreeEntity>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<MeasureUnit>> measureUnits = new List<ByValue<MeasureUnit>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<ProductCategory>> productCategories = new List<ByValue<ProductCategory>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<CookingPlaceType>> cookingPlaceTypes = new List<ByValue<CookingPlaceType>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<Product, ICollection<AssemblyChart>> assemblyCharts = new Dictionary<Product, ICollection<AssemblyChart>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<User>> users = new List<ByValue<User>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<Role>> roles = new List<ByValue<Role>>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<ByValue<Account>> accounts = new List<ByValue<Account>>();

        protected ReferenceData() {}

        public ReferenceData(DateTime? dateFrom, DateTime? dateUpload, string companyName)
        {
            this.dateFrom = dateFrom;
            this.dateUpload = dateUpload;
            this.companyName = companyName;
        }
        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public DateTime? DateUpload
        {
            get { return dateUpload; }
            set { dateUpload = value; }
        }

        public string CompanyName
        {
            get { return companyName; }
            set { companyName = value; }
        }

        [NotNull]
        public List<ByValue<ProductTreeEntity>> ProductsAndGroups
        {
            get { return productsAndGroups; }
        }

        [NotNull]
        public List<ByValue<MeasureUnit>> MeasureUnits
        {
            get { return measureUnits; }
        }

        [NotNull]
        public List<ByValue<ProductCategory>> ProductCategories
        {
            get { return productCategories; }
        }

        [NotNull]
        public List<ByValue<CookingPlaceType>> CookingPlaceTypes
        {
            get { return cookingPlaceTypes; }
        }

        [NotNull]
        public Dictionary<Product, ICollection<AssemblyChart>> AssemblyCharts
        {
            get { return assemblyCharts; }
        }

        [NotNull]
        public List<ByValue<User>> Users
        {
            get { return users; }
        }

        [NotNull]
        public List<ByValue<Role>> Roles
        {
            get { return roles; }
        }

        [NotNull]
        public List<ByValue<Account>> Accounts
        {
            get { return accounts; }
        }

    }

    [DataClass("ServerState")]
    [EnumClass]
    public partial class ServerState : LocalizableName<ServerState>
    {
        /// <summary> Сервер не запускался. </summary>
        public static readonly ServerState NEW = new ServerState("NEW", 11);
        /// <summary> Сервер ожидает ввода лицензии. </summary>
        public static readonly ServerState WAITING_LICENSE = new ServerState("WAITING_LICENSE", 12);
        /// <summary> Сервер запускается. </summary>
        public static readonly ServerState STARTING = new ServerState("STARTING", 2);
        /// <summary> Сервер не стартовал из-за фатальной ошибки. </summary>
        public static readonly ServerState START_FAILED = new ServerState("START_FAILED", 16);
        /// <summary> Сервер успешно запустился и работает. </summary>
        public static readonly ServerState STARTED_SUCCESSFULLY = new ServerState("STARTED_SUCCESSFULLY", 0);
        /// <summary> Сервер находится в аварийном режиме. </summary>
        public static readonly ServerState EMERGENCY = new ServerState("EMERGENCY", 15);
        /// <summary> Сервер останавливается. </summary>
        public static readonly ServerState STOPPING = new ServerState("STOPPING", 5);
        /// <summary> Сервер остановлен. </summary>
        public static readonly ServerState STOPPED = new ServerState("STOPPED", 6);

        private readonly int severity;
        private readonly string __value;
        private readonly string __nameResId;

        private ServerState(string __value, int severity)
        {
            this.__value = __value;
            this.__nameResId = "SERVERSTATE_NAME_" + __value;
            this.severity = severity;
        }

        public static ServerState Parse(string value)
        {
            switch(value)
            {
                case "NEW": return NEW;
                case "WAITING_LICENSE": return WAITING_LICENSE;
                case "STARTING": return STARTING;
                case "START_FAILED": return START_FAILED;
                case "STARTED_SUCCESSFULLY": return STARTED_SUCCESSFULLY;
                case "EMERGENCY": return EMERGENCY;
                case "STOPPING": return STOPPING;
                case "STOPPED": return STOPPED;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ServerState[] VALUES
        {
            get
            {
                return new []
                {
                    NEW, 
                    WAITING_LICENSE, 
                    STARTING, 
                    START_FAILED, 
                    STARTED_SUCCESSFULLY, 
                    EMERGENCY, 
                    STOPPING, 
                    STOPPED
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Severity
        {
            get { return severity; }
        }

    }

    [DataClass("SystemEvent")]
    public partial class SystemEvent : Entity
    {
        private Guid instanceId;
        private DateTime dateTimeServer;
        [NotNull, NotNullField]
        private SystemEventType eventType;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private string description = "";
        private ServerVolatileInfo info;
        private ServerFingerPrintsInfo owner;

        protected SystemEvent() {}

        public SystemEvent(Guid id, Guid instanceId, DateTime dateTimeServer, SystemEventType eventType, string description, ServerVolatileInfo info, ServerFingerPrintsInfo owner)
            : base(id)
        {
            this.instanceId = instanceId;
            this.dateTimeServer = dateTimeServer;
            this.eventType = eventType;
            this.description = description;
            this.info = info;
            this.owner = owner;
        }

        public SystemEvent(Guid id, Guid instanceId, DateTime dateTimeServer, SystemEventType eventType, string description)
            : base(id)
        {
            this.instanceId = instanceId;
            this.dateTimeServer = dateTimeServer;
            this.eventType = eventType;
            this.description = description;
        }

        public Guid InstanceId
        {
            get { return instanceId; }
            set { instanceId = value; }
        }

        public DateTime DateTimeServer
        {
            get { return dateTimeServer; }
            set { dateTimeServer = value; }
        }

        [NotNull]
        public SystemEventType EventType
        {
            get { return eventType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  eventType = value;
            }
        }

        [NotNull]
        public string Description
        {
            get { return description; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  description = value;
            }
        }

        public ServerVolatileInfo Info
        {
            get { return info; }
            set { info = value; }
        }

        public ServerFingerPrintsInfo Owner
        {
            get { return owner; }
            set { owner = value; }
        }

    }

    [DataClass("SystemEventType")]
    [EnumClass]
    public partial class SystemEventType : LocalizableName<SystemEventType>
    {
        /// <summary> Неизвестное событие. </summary>
        public static readonly SystemEventType UNKNOWN = new SystemEventType("UNKNOWN");
        /// <summary> Начало старта сервера. </summary>
        public static readonly SystemEventType SERVER_STARTING = new SystemEventType("SERVER_STARTING");
        /// <summary> Подключились к БД (была свободна). </summary>
        public static readonly SystemEventType DB_LOCK_ACQUIRED = new SystemEventType("DB_LOCK_ACQUIRED");
        /// <summary> Попытка подключения к возможно занятой БД (ждем обновления блокировки). </summary>
        public static readonly SystemEventType DB_LOCK_BREAKING = new SystemEventType("DB_LOCK_BREAKING");
        /// <summary> Обновление БД: запуск скриптов. </summary>
        public static readonly SystemEventType DB_UPGRADE_SCRIPTS = new SystemEventType("DB_UPGRADE_SCRIPTS");
        /// <summary> Обновление БД: синхронизация колонок и индексов. </summary>
        public static readonly SystemEventType DB_UPGRADE_SCHEMA = new SystemEventType("DB_UPGRADE_SCHEMA");
        /// <summary> Сервер успешно стартовал. </summary>
        public static readonly SystemEventType SERVER_STARTED = new SystemEventType("SERVER_STARTED");
        /// <summary> Ошибка старта сервера. </summary>
        public static readonly SystemEventType SERVER_START_FAILED = new SystemEventType("SERVER_START_FAILED");
        /// <summary> Начало остановки сервера. </summary>
        public static readonly SystemEventType SERVER_STOPPING = new SystemEventType("SERVER_STOPPING");
        /// <summary> Сервер остановлен, БД освобождена. </summary>
        public static readonly SystemEventType SERVER_STOPPED = new SystemEventType("SERVER_STOPPED");
        /// <summary> Сервер перешел в аварийный режим работы. </summary>
        public static readonly SystemEventType WATCHDOG_FATAL = new SystemEventType("WATCHDOG_FATAL");
        /// <summary> Сервер перешел в аварийный режим работы: БД занята другим сервером. </summary>
        public static readonly SystemEventType WATCHDOG_DB_LOCK = new SystemEventType("WATCHDOG_DB_LOCK");

        private readonly string __value;
        private readonly string __nameResId;

        private SystemEventType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "SYSTEMEVENTTYPE_NAME_" + __value;
        }

        public static SystemEventType Parse(string value)
        {
            switch(value)
            {
                case "UNKNOWN": return UNKNOWN;
                case "SERVER_STARTING": return SERVER_STARTING;
                case "DB_LOCK_ACQUIRED": return DB_LOCK_ACQUIRED;
                case "DB_LOCK_BREAKING": return DB_LOCK_BREAKING;
                case "DB_UPGRADE_SCRIPTS": return DB_UPGRADE_SCRIPTS;
                case "DB_UPGRADE_SCHEMA": return DB_UPGRADE_SCHEMA;
                case "SERVER_STARTED": return SERVER_STARTED;
                case "SERVER_START_FAILED": return SERVER_START_FAILED;
                case "SERVER_STOPPING": return SERVER_STOPPING;
                case "SERVER_STOPPED": return SERVER_STOPPED;
                case "WATCHDOG_FATAL": return WATCHDOG_FATAL;
                case "WATCHDOG_DB_LOCK": return WATCHDOG_DB_LOCK;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static SystemEventType[] VALUES
        {
            get
            {
                return new []
                {
                    UNKNOWN, 
                    SERVER_STARTING, 
                    DB_LOCK_ACQUIRED, 
                    DB_LOCK_BREAKING, 
                    DB_UPGRADE_SCRIPTS, 
                    DB_UPGRADE_SCHEMA, 
                    SERVER_STARTED, 
                    SERVER_START_FAILED, 
                    SERVER_STOPPING, 
                    SERVER_STOPPED, 
                    WATCHDOG_FATAL, 
                    WATCHDOG_DB_LOCK
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("HandshakeSettings")]
    public partial class HandshakeSettings
    {
        private string rmsVersion;
        private long? timeZoneInMinutes;
        private string transportServiceUrl;
        private string crmId;
        private string hwId;
        private Guid? installationId;
        private string installationPath;

        protected HandshakeSettings() {}

        public HandshakeSettings(string rmsVersion, long? timeZoneInMinutes, string transportServiceUrl, string crmId, string hwId, Guid? installationId, string installationPath)
        {
            this.rmsVersion = rmsVersion;
            this.timeZoneInMinutes = timeZoneInMinutes;
            this.transportServiceUrl = transportServiceUrl;
            this.crmId = crmId;
            this.hwId = hwId;
            this.installationId = installationId;
            this.installationPath = installationPath;
        }
        public string RmsVersion
        {
            get { return rmsVersion; }
            set { rmsVersion = value; }
        }

        public long? TimeZoneInMinutes
        {
            get { return timeZoneInMinutes; }
            set { timeZoneInMinutes = value; }
        }

        public string TransportServiceUrl
        {
            get { return transportServiceUrl; }
            set { transportServiceUrl = value; }
        }

        public string CrmId
        {
            get { return crmId; }
            set { crmId = value; }
        }

        public string HwId
        {
            get { return hwId; }
            set { hwId = value; }
        }

        public Guid? InstallationId
        {
            get { return installationId; }
            set { installationId = value; }
        }

        public string InstallationPath
        {
            get { return installationPath; }
            set { installationPath = value; }
        }

    }

    [DataClass("ColumnType")]
    public enum ColumnType
    {
        STRING,
        ENUM,
        ID,
        ID_STRING,
        MONEY,
        AMOUNT,
        PERCENT,
        INTEGER,
        DATETIME,
        DATE,
        DATE_WITH_DAY,
        MONTH,
        OBJECT,
        YEAR,
        DURATION_IN_SECONDS
    }

    [DataClass("DataSet")]
    public partial class DataSet : Entity
    {
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<DataSetColumn> columns = new List<DataSetColumn>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<DataSetRow> rows = new List<DataSetRow>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DataSetRow, int> rowToIndex = new Dictionary<DataSetRow, int>();
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly Dictionary<DataSetColumn, List<Object>> data = new Dictionary<DataSetColumn, List<Object>>();

        protected DataSet() {}

        public DataSet(Guid id)
            : base(id)
        {

        }
        [NotNull]
        public List<DataSetColumn> Columns
        {
            get { return columns; }
        }

        [NotNull]
        public List<DataSetRow> Rows
        {
            get { return rows; }
        }

        [NotNull]
        public Dictionary<DataSetRow, int> RowToIndex
        {
            get { return rowToIndex; }
        }

        [NotNull]
        public Dictionary<DataSetColumn, List<Object>> Data
        {
            get { return data; }
        }

    }

    [DataClass("DataSetColumn")]
    public partial class DataSetColumn : Entity
    {
        private string name;
        private ColumnType type;

        protected DataSetColumn() {}

        public DataSetColumn(Guid id, string name, ColumnType type)
            : base(id)
        {
            this.name = name;
            this.type = type;
        }

        public DataSetColumn(Guid id)
            : base(id)
        {

        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public ColumnType Type
        {
            get { return type; }
            set { type = value; }
        }

    }

    [DataClass("DataSetRow")]
    public partial class DataSetRow : Entity
    {

        protected DataSetRow() {}

        public DataSetRow(Guid id)
            : base(id)
        {

        }
    }

    [DataClass("DateInfo")]
    public partial class DateInfo
    {
        private int year;
        private int month;
        private int day;

        protected DateInfo() {}

        public DateInfo(int year, int month, int day)
        {
            this.year = year;
            this.month = month;
            this.day = day;
        }
        public int Year
        {
            get { return year; }
            set { year = value; }
        }

        public int Month
        {
            get { return month; }
            set { month = value; }
        }

        public int Day
        {
            get { return day; }
            set { day = value; }
        }

    }

    [DataClass("DateInterval")]
    public partial class DateInterval
    {
        private DateTime? from;
        private DateTime? to;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public DateInterval() {}

        public DateInterval(DateTime? from, DateTime? to)
        {
            this.from = from;
            this.to = to;
        }
        public DateTime? From
        {
            get { return from; }
            set { from = value; }
        }

        public DateTime? To
        {
            get { return to; }
            set { to = value; }
        }

    }

    [DataClass("DayTime")]
    public partial class DayTime
    {
        private int minutes;

        protected DayTime() {}

        public DayTime(int minutes)
        {
            this.minutes = minutes;
        }
        public int Minutes
        {
            get { return minutes; }
            set { minutes = value; }
        }

    }

    [DataClass("EvaluableDecimalValue")]
    public partial class EvaluableDecimalValue
    {
        private decimal? value;
        private bool evaluative;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public EvaluableDecimalValue() {}

        public EvaluableDecimalValue(decimal? value, bool evaluative)
        {
            this.value = value;
            this.evaluative = evaluative;
        }
        public decimal? Value
        {
            get { return value; }
            set { this.value = value; }
        }

        public bool Evaluative
        {
            get { return evaluative; }
            set { evaluative = value; }
        }

    }

    [DataClass("RGBColor")]
    public partial class RGBColor
    {
        private int red;
        private int green;
        private int blue;

        protected RGBColor() {}

        public RGBColor(int red, int green, int blue)
        {
            this.red = red;
            this.green = green;
            this.blue = blue;
        }
        public int Red
        {
            get { return red; }
            set { red = value; }
        }

        public int Green
        {
            get { return green; }
            set { green = value; }
        }

        public int Blue
        {
            get { return blue; }
            set { blue = value; }
        }

    }

    [DataClass("SimpleSwitchable")]
    public partial class SimpleSwitchable<T> : Switchable<T>
    {
        [ForceTypeAttributeInXml]
        private T value;

        protected SimpleSwitchable() {}

        public SimpleSwitchable(bool enabled, T value)
            : base(enabled)
        {
            this.value = value;
        }
        public T Value
        {
            get { return value; }
            set { this.value = value; }
        }

    }

    [DataClass("Switchable")]
    public abstract partial class Switchable<T>
    {
        private bool enabled;

        protected Switchable() {}

        protected Switchable(bool enabled)
        {
            this.enabled = enabled;
        }
        public bool Enabled
        {
            get { return enabled; }
            set { enabled = value; }
        }

    }

    [DataClass("UserInterval")]
    public partial class UserInterval
    {
        private DateTime? dateTo;
        private DateTime? dateFrom;
        private User user;

        protected UserInterval() {}

        public UserInterval(DateTime? dateTo, DateTime? dateFrom, User user)
        {
            this.dateTo = dateTo;
            this.dateFrom = dateFrom;
            this.user = user;
        }
        public DateTime? DateTo
        {
            get { return dateTo; }
            set { dateTo = value; }
        }

        public DateTime? DateFrom
        {
            get { return dateFrom; }
            set { dateFrom = value; }
        }

        public User User
        {
            get { return user; }
            set { user = value; }
        }

    }

    [DataClass("CalcStrategy")]
    public enum CalcStrategy
    {
        PERCENT,
        ABSOLUTE,
        RATE,
        BASE
    }

    [DataClass("CustomSchedule")]
    public partial class CustomSchedule
    {
        [NotNull, NotNullField]
        private CustomScheduleType customScheduleType;
        private LocalTimeInterval localTimeInterval;
        private WeekScheduleInfo weekScheduleInfo;
        private ShiftScheduleInfo shiftScheduleInfo;

        protected CustomSchedule() {}

        public CustomSchedule(CustomScheduleType customScheduleType, LocalTimeInterval localTimeInterval, WeekScheduleInfo weekScheduleInfo, ShiftScheduleInfo shiftScheduleInfo)
        {
            this.customScheduleType = customScheduleType;
            this.localTimeInterval = localTimeInterval;
            this.weekScheduleInfo = weekScheduleInfo;
            this.shiftScheduleInfo = shiftScheduleInfo;
        }

        public CustomSchedule(CustomScheduleType customScheduleType)
        {
            this.customScheduleType = customScheduleType;
        }

        [NotNull]
        public CustomScheduleType CustomScheduleType
        {
            get { return customScheduleType; }
            set
            {
                  if(value == null) throw new ArgumentNullException(nameof(value), "Unable to assign null to property marked as NotNull");
                  customScheduleType = value;
            }
        }

        public LocalTimeInterval LocalTimeInterval
        {
            get { return localTimeInterval; }
            set { localTimeInterval = value; }
        }

        public WeekScheduleInfo WeekScheduleInfo
        {
            get { return weekScheduleInfo; }
            set { weekScheduleInfo = value; }
        }

        public ShiftScheduleInfo ShiftScheduleInfo
        {
            get { return shiftScheduleInfo; }
            set { shiftScheduleInfo = value; }
        }

    }

    [DataClass("CustomScheduleType")]
    [EnumClass]
    public partial class CustomScheduleType : LocalizableName<CustomScheduleType>
    {
        /// <summary> Круглосуточно. </summary>
        public static readonly CustomScheduleType ROUND_THE_CLOCK = new CustomScheduleType("ROUND_THE_CLOCK");
        /// <summary> Ежедневно. </summary>
        public static readonly CustomScheduleType SAME_EVERY_DAY = new CustomScheduleType("SAME_EVERY_DAY");
        /// <summary> По расписанию. </summary>
        public static readonly CustomScheduleType WEEK_SCHEDULE = new CustomScheduleType("WEEK_SCHEDULE");
        /// <summary> Посменно. </summary>
        public static readonly CustomScheduleType SHIFT_SCHEDULE = new CustomScheduleType("SHIFT_SCHEDULE");

        private readonly string __value;
        private readonly string __nameResId;

        private CustomScheduleType(string __value)
        {
            this.__value = __value;
            this.__nameResId = "CUSTOMSCHEDULETYPE_NAME_" + __value;
        }

        public static CustomScheduleType Parse(string value)
        {
            switch(value)
            {
                case "ROUND_THE_CLOCK": return ROUND_THE_CLOCK;
                case "SAME_EVERY_DAY": return SAME_EVERY_DAY;
                case "WEEK_SCHEDULE": return WEEK_SCHEDULE;
                case "SHIFT_SCHEDULE": return SHIFT_SCHEDULE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static CustomScheduleType[] VALUES
        {
            get
            {
                return new []
                {
                    ROUND_THE_CLOCK, 
                    SAME_EVERY_DAY, 
                    WEEK_SCHEDULE, 
                    SHIFT_SCHEDULE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("LocalTimeInterval")]
    public partial class LocalTimeInterval
    {
        private TimeSpan begin;
        private TimeSpan end;

        protected LocalTimeInterval() {}

        public LocalTimeInterval(TimeSpan begin, TimeSpan end)
        {
            this.begin = begin;
            this.end = end;
        }
        public TimeSpan Begin
        {
            get { return begin; }
            set { begin = value; }
        }

        public TimeSpan End
        {
            get { return end; }
            set { end = value; }
        }

    }

    [DataClass("PeriodScheduleInfo")]
    public partial class PeriodScheduleInfo
    {
        private Guid? id;
        private string name;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly List<PeriodScheduleItem> periods = new List<PeriodScheduleItem>();

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public PeriodScheduleInfo() {}

        public PeriodScheduleInfo(Guid? id, string name)
        {
            this.id = id;
            this.name = name;
        }
        public Guid? Id
        {
            get { return id; }
            set { id = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        [NotNull]
        public List<PeriodScheduleItem> Periods
        {
            get { return periods; }
        }

    }

    [DataClass("PeriodScheduleItem")]
    public partial class PeriodScheduleItem
    {
        private TimeSpan begin;
        private TimeSpan end;
        [NotNull, NotNullField]
        [HasDefaultValue]
        private readonly HashSet<WeekDays> daysOfWeek = new HashSet<WeekDays>();

        protected PeriodScheduleItem() {}

        public PeriodScheduleItem(TimeSpan begin, TimeSpan end)
        {
            this.begin = begin;
            this.end = end;
        }
        public TimeSpan Begin
        {
            get { return begin; }
            set { begin = value; }
        }

        public TimeSpan End
        {
            get { return end; }
            set { end = value; }
        }

        [NotNull]
        public HashSet<WeekDays> DaysOfWeek
        {
            get { return daysOfWeek; }
        }

    }

    [DataClass("ShiftScheduleInfo")]
    public partial class ShiftScheduleInfo
    {
        private string name;
        private Object value;
        private List<List<LocalTimeInterval>> days;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public ShiftScheduleInfo() {}

        public ShiftScheduleInfo(string name, Object value)
        {
            this.name = name;
            this.value = value;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Object Value
        {
            get { return value; }
            set { this.value = value; }
        }

        public List<List<LocalTimeInterval>> Days
        {
            get { return days; }
            set { days = value; }
        }

    }

    [DataClass("WeekDays")]
    [EnumClass]
    public partial class WeekDays : LocalizableName<WeekDays>, ILocalizableShortName, ILocalizableDescription
    {
        /// <summary> воскресенье. Вс. 7. Воскресенье. </summary>
        public static readonly WeekDays SUNDAY = new WeekDays("SUNDAY", 1);
        /// <summary> понедельник. Пн. 1. Понедельник. </summary>
        public static readonly WeekDays MONDAY = new WeekDays("MONDAY", 2);
        /// <summary> вторник. Вт. 2. Вторник. </summary>
        public static readonly WeekDays TUESDAY = new WeekDays("TUESDAY", 3);
        /// <summary> среда. Ср. 3. Среда. </summary>
        public static readonly WeekDays WEDNESDAY = new WeekDays("WEDNESDAY", 4);
        /// <summary> четверг. Чт. 4. Четверг. </summary>
        public static readonly WeekDays THURSDAY = new WeekDays("THURSDAY", 5);
        /// <summary> пятница. Пт. 5. Пятница. </summary>
        public static readonly WeekDays FRIDAY = new WeekDays("FRIDAY", 6);
        /// <summary> суббота. Сб. 6. Суббота. </summary>
        public static readonly WeekDays SATURDAY = new WeekDays("SATURDAY", 7);

        private readonly int calendarNumber;
        private readonly string __value;
        private readonly string __nameResId;
        private readonly string __shortNameResId;
        private readonly string __descriptionResId;

        private WeekDays(string __value, int calendarNumber)
        {
            this.__value = __value;
            this.__nameResId = "WEEKDAYS_NAME_" + __value;
            this.__shortNameResId = "WEEKDAYS_SHORTNAME_" + __value;
            this.__descriptionResId = "WEEKDAYS_DESCRIPTION_" + __value;
            this.calendarNumber = calendarNumber;
        }

        public static WeekDays Parse(string value)
        {
            switch(value)
            {
                case "SUNDAY": return SUNDAY;
                case "MONDAY": return MONDAY;
                case "TUESDAY": return TUESDAY;
                case "WEDNESDAY": return WEDNESDAY;
                case "THURSDAY": return THURSDAY;
                case "FRIDAY": return FRIDAY;
                case "SATURDAY": return SATURDAY;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static WeekDays[] VALUES
        {
            get
            {
                return new []
                {
                    SUNDAY, 
                    MONDAY, 
                    TUESDAY, 
                    WEDNESDAY, 
                    THURSDAY, 
                    FRIDAY, 
                    SATURDAY
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public string ShortNameResId
        {
            get { return __shortNameResId; }
        }

        public string DescriptionResId
        {
            get { return __descriptionResId; }
        }

        public int CalendarNumber
        {
            get { return calendarNumber; }
        }

    }

    [DataClass("WeekScheduleInfo")]
    public partial class WeekScheduleInfo
    {
        private string name;
        private Object value;
        private Dictionary<WeekDays, List<LocalTimeInterval>> days;

        [ObsoleteAttribute("Although this constructor is public, it is advisable not to call it in C# code, because it is intended for RPC purposes only.")]
        public WeekScheduleInfo() {}

        public WeekScheduleInfo(string name, Object value)
        {
            this.name = name;
            this.value = value;
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Object Value
        {
            get { return value; }
            set { this.value = value; }
        }

        public Dictionary<WeekDays, List<LocalTimeInterval>> Days
        {
            get { return days; }
            set { days = value; }
        }

    }

    [DataClass("ValidationWarning")]
    [EnumClass]
    public partial class ValidationWarning : LocalizableName<ValidationWarning>
    {
        /// <summary> Цена выходит за допустимый предел, указанный в прайс-листе поставщика.. </summary>
        public static readonly ValidationWarning SUPPLIER_PRICE_DEVIATION_LIMIT_EXCEEDED = new ValidationWarning("SUPPLIER_PRICE_DEVIATION_LIMIT_EXCEEDED");
        /// <summary> Дата приказа не может быть меньше текущей.. </summary>
        public static readonly ValidationWarning TREE_MENU_CHANGE_DOCUMENT_DATE_IS_IN_PAST = new ValidationWarning("TREE_MENU_CHANGE_DOCUMENT_DATE_IS_IN_PAST");

        private readonly string __value;
        private readonly string __nameResId;

        private ValidationWarning(string __value)
        {
            this.__value = __value;
            this.__nameResId = "VALIDATIONWARNING_NAME_" + __value;
        }

        public static ValidationWarning Parse(string value)
        {
            switch(value)
            {
                case "SUPPLIER_PRICE_DEVIATION_LIMIT_EXCEEDED": return SUPPLIER_PRICE_DEVIATION_LIMIT_EXCEEDED;
                case "TREE_MENU_CHANGE_DOCUMENT_DATE_IS_IN_PAST": return TREE_MENU_CHANGE_DOCUMENT_DATE_IS_IN_PAST;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ValidationWarning[] VALUES
        {
            get
            {
                return new []
                {
                    SUPPLIER_PRICE_DEVIATION_LIMIT_EXCEEDED, 
                    TREE_MENU_CHANGE_DOCUMENT_DATE_IS_IN_PAST
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

    }

    [DataClass("CheckResult")]
    public partial class CheckResult
    {
        private ProblemSeverity severity;
        private string message;
        private string checkerId;

        protected CheckResult() {}

        public CheckResult(ProblemSeverity severity, string message, string checkerId)
        {
            this.severity = severity;
            this.message = message;
            this.checkerId = checkerId;
        }
        public ProblemSeverity Severity
        {
            get { return severity; }
            set { severity = value; }
        }

        public string Message
        {
            get { return message; }
            set { message = value; }
        }

        public string CheckerId
        {
            get { return checkerId; }
            set { checkerId = value; }
        }

    }

    [DataClass("LicenseCheckResult")]
    public partial class LicenseCheckResult : CheckResult
    {
        private int? expireSeconds;

        protected LicenseCheckResult() {}

        public LicenseCheckResult(ProblemSeverity severity, string message, string checkerId, int? expireSeconds)
            : base(severity, message, checkerId)
        {
            this.expireSeconds = expireSeconds;
        }
        public int? ExpireSeconds
        {
            get { return expireSeconds; }
            set { expireSeconds = value; }
        }

    }

    [DataClass("ProblemSeverity")]
    [EnumClass]
    public partial class ProblemSeverity : LocalizableName<ProblemSeverity>
    {
        /// <summary> Нормальное состояние. </summary>
        public static readonly ProblemSeverity NORMAL = new ProblemSeverity("NORMAL", 0);
        /// <summary> Предупреждение. </summary>
        public static readonly ProblemSeverity WARNING = new ProblemSeverity("WARNING", 1);
        /// <summary> Ошибка. </summary>
        public static readonly ProblemSeverity ERROR = new ProblemSeverity("ERROR", 2);
        /// <summary> Фатальная ошибка. </summary>
        public static readonly ProblemSeverity FATAL = new ProblemSeverity("FATAL", 3);

        private readonly int priority;
        private readonly string __value;
        private readonly string __nameResId;

        private ProblemSeverity(string __value, int priority)
        {
            this.__value = __value;
            this.__nameResId = "PROBLEMSEVERITY_NAME_" + __value;
            this.priority = priority;
        }

        public static ProblemSeverity Parse(string value)
        {
            switch(value)
            {
                case "NORMAL": return NORMAL;
                case "WARNING": return WARNING;
                case "ERROR": return ERROR;
                case "FATAL": return FATAL;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static ProblemSeverity[] VALUES
        {
            get
            {
                return new []
                {
                    NORMAL, 
                    WARNING, 
                    ERROR, 
                    FATAL
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string NameResId
        {
            get { return __nameResId; }
        }

        public int Priority
        {
            get { return priority; }
        }

    }

    [DataClass("SystemDiagnosticsResult")]
    public partial class SystemDiagnosticsResult
    {
        private bool licenseExpired;
        private List<CheckResult> watchdogErrorsAndWarnings;
        private string userDataDiagnostics;
        private string periodLengthDiagnostics;
        private bool warnSalesDocuments;
        private bool warnWriteOffDocuments;
        private bool warnNegativeBalance;
        private bool warnBalanceLessThanMin;
        private bool warnSoldModifiers;
        private int overdueAttendancesOfDeletedEmployeesCount;
        private int overdueAttendancesOfNotDeletedEmployeesCount;
        private bool warnCafeSetupPrepayNds;

        public SystemDiagnosticsResult() {}

        public SystemDiagnosticsResult(bool licenseExpired, string userDataDiagnostics, string periodLengthDiagnostics, bool warnSalesDocuments, bool warnWriteOffDocuments, bool warnNegativeBalance, bool warnBalanceLessThanMin, bool warnSoldModifiers, int overdueAttendancesOfDeletedEmployeesCount, int overdueAttendancesOfNotDeletedEmployeesCount, bool warnCafeSetupPrepayNds)
        {
            this.licenseExpired = licenseExpired;
            this.userDataDiagnostics = userDataDiagnostics;
            this.periodLengthDiagnostics = periodLengthDiagnostics;
            this.warnSalesDocuments = warnSalesDocuments;
            this.warnWriteOffDocuments = warnWriteOffDocuments;
            this.warnNegativeBalance = warnNegativeBalance;
            this.warnBalanceLessThanMin = warnBalanceLessThanMin;
            this.warnSoldModifiers = warnSoldModifiers;
            this.overdueAttendancesOfDeletedEmployeesCount = overdueAttendancesOfDeletedEmployeesCount;
            this.overdueAttendancesOfNotDeletedEmployeesCount = overdueAttendancesOfNotDeletedEmployeesCount;
            this.warnCafeSetupPrepayNds = warnCafeSetupPrepayNds;
        }
        public bool LicenseExpired
        {
            get { return licenseExpired; }
            set { licenseExpired = value; }
        }

        public List<CheckResult> WatchdogErrorsAndWarnings
        {
            get { return watchdogErrorsAndWarnings; }
            set { watchdogErrorsAndWarnings = value; }
        }

        public string UserDataDiagnostics
        {
            get { return userDataDiagnostics; }
            set { userDataDiagnostics = value; }
        }

        public string PeriodLengthDiagnostics
        {
            get { return periodLengthDiagnostics; }
            set { periodLengthDiagnostics = value; }
        }

        public bool WarnSalesDocuments
        {
            get { return warnSalesDocuments; }
            set { warnSalesDocuments = value; }
        }

        public bool WarnWriteOffDocuments
        {
            get { return warnWriteOffDocuments; }
            set { warnWriteOffDocuments = value; }
        }

        public bool WarnNegativeBalance
        {
            get { return warnNegativeBalance; }
            set { warnNegativeBalance = value; }
        }

        public bool WarnBalanceLessThanMin
        {
            get { return warnBalanceLessThanMin; }
            set { warnBalanceLessThanMin = value; }
        }

        public bool WarnSoldModifiers
        {
            get { return warnSoldModifiers; }
            set { warnSoldModifiers = value; }
        }

        public int OverdueAttendancesOfDeletedEmployeesCount
        {
            get { return overdueAttendancesOfDeletedEmployeesCount; }
            set { overdueAttendancesOfDeletedEmployeesCount = value; }
        }

        public int OverdueAttendancesOfNotDeletedEmployeesCount
        {
            get { return overdueAttendancesOfNotDeletedEmployeesCount; }
            set { overdueAttendancesOfNotDeletedEmployeesCount = value; }
        }

        public bool WarnCafeSetupPrepayNds
        {
            get { return warnCafeSetupPrepayNds; }
            set { warnCafeSetupPrepayNds = value; }
        }

    }

    [RootEntity]
    [DataClass("NotificationConfiguration")]
    public partial class NotificationConfiguration : PersistedEntity
    {
        private int smtpPort;
        private string smtpHost;
        private bool auth;
        private string smtpUser;
        private string smtpPassword;
        private string to;
        private string subject;
        private string cc;
        private bool useSSL;
        [HasDefaultValue]
        private bool emailNotificationEnabled = false;
        [HasDefaultValue]
        private bool httpNotificationEnabled = true;
        [HasDefaultValue]
        private string httpNotificationAddress = "https://report-bug.iiko.ru/crash.php";
        private Dictionary<ProblemSeverity, long> minimumPeriod;
        private Dictionary<ProblemSeverity, int> maximumNotificationsPerDay;
        private Dictionary<DepartmentEntity, int> daysWithoutSalesLimits;

        protected NotificationConfiguration() {}

        public NotificationConfiguration(Guid id, int smtpPort, string smtpHost, bool auth, string smtpUser, string smtpPassword, string to, string subject, string cc, bool useSSL)
            : base(id)
        {
            this.smtpPort = smtpPort;
            this.smtpHost = smtpHost;
            this.auth = auth;
            this.smtpUser = smtpUser;
            this.smtpPassword = smtpPassword;
            this.to = to;
            this.subject = subject;
            this.cc = cc;
            this.useSSL = useSSL;
        }

        public NotificationConfiguration(Guid id)
            : base(id)
        {

        }

        public int SmtpPort
        {
            get { return smtpPort; }
            set { smtpPort = value; }
        }

        public string SmtpHost
        {
            get { return smtpHost; }
            set { smtpHost = value; }
        }

        public bool Auth
        {
            get { return auth; }
            set { auth = value; }
        }

        public string SmtpUser
        {
            get { return smtpUser; }
            set { smtpUser = value; }
        }

        public string SmtpPassword
        {
            get { return smtpPassword; }
            set { smtpPassword = value; }
        }

        public string To
        {
            get { return to; }
            set { to = value; }
        }

        public string Subject
        {
            get { return subject; }
            set { subject = value; }
        }

        public string Cc
        {
            get { return cc; }
            set { cc = value; }
        }

        public bool UseSSL
        {
            get { return useSSL; }
            set { useSSL = value; }
        }

        public bool EmailNotificationEnabled
        {
            get { return emailNotificationEnabled; }
            set { emailNotificationEnabled = value; }
        }

        public bool HttpNotificationEnabled
        {
            get { return httpNotificationEnabled; }
            set { httpNotificationEnabled = value; }
        }

        public string HttpNotificationAddress
        {
            get { return httpNotificationAddress; }
            set { httpNotificationAddress = value; }
        }

        public Dictionary<ProblemSeverity, long> MinimumPeriod
        {
            get { return minimumPeriod; }
            set { minimumPeriod = value; }
        }

        public Dictionary<ProblemSeverity, int> MaximumNotificationsPerDay
        {
            get { return maximumNotificationsPerDay; }
            set { maximumNotificationsPerDay = value; }
        }

        public Dictionary<DepartmentEntity, int> DaysWithoutSalesLimits
        {
            get { return daysWithoutSalesLimits; }
            set { daysWithoutSalesLimits = value; }
        }

    }

    [DataClass("BanquetDeliveryDishesReportInfo")]
    public partial class BanquetDeliveryDishesReportInfo
    {
        private Dictionary<DeliveryDto, List<ItemSaleEvent>> deliveries;
        private Dictionary<ReserveDto, List<ItemSaleEvent>> banquets;


        public Dictionary<DeliveryDto, List<ItemSaleEvent>> Deliveries
        {
            get { return deliveries; }
            set { deliveries = value; }
        }

        public Dictionary<ReserveDto, List<ItemSaleEvent>> Banquets
        {
            get { return banquets; }
            set { banquets = value; }
        }

    }

    [DataClass("LauncherServletAuthFailureReasonCode")]
    public enum LauncherServletAuthFailureReasonCode
    {
        TERMINAL_NOT_REGISTERED,
        TERMINAL_LOCKED,
        LOGIN_OR_PASSWORD_INCORRECT,
        TERMINAL_TOKEN_INVALID
    }

    [DataClass("LauncherServletResponseHttpHeaders")]
    [EnumClass]
    public partial class LauncherServletResponseHttpHeaders
    {
        public static readonly LauncherServletResponseHttpHeaders AUTH_FAILURE_REASON_CODE = new LauncherServletResponseHttpHeaders("AUTH_FAILURE_REASON_CODE", "X-Resto-AuthFailureReasonCode");

        private readonly string name;
        private readonly string __value;

        private LauncherServletResponseHttpHeaders(string __value, string name)
        {
            this.__value = __value;
            this.name = name;
        }

        public static LauncherServletResponseHttpHeaders Parse(string value)
        {
            switch(value)
            {
                case "AUTH_FAILURE_REASON_CODE": return AUTH_FAILURE_REASON_CODE;
                default: throw new ArgumentException("Undefined enum constant:" + value);
            }
        }

        public static LauncherServletResponseHttpHeaders[] VALUES
        {
            get
            {
                return new []
                {
                    AUTH_FAILURE_REASON_CODE
                };
            }
        }

        public string _Value
        {
            get { return __value; }
        }

        public override string ToString()
        {
            return this.__value;
        }

        public string Name
        {
            get { return name; }
        }

    }

    [DataClass("OrderAndSessionDto")]
    public partial class OrderAndSessionDto
    {
        private Dictionary<Guid, ICollection<RestoEvent>> transactionMap;
        private ICollection<CloseSessionEvent> closeSessionEvents;
        private Dictionary<Guid, OrderVatInvoiceCustomerDto> orderInvoices;


        public Dictionary<Guid, ICollection<RestoEvent>> TransactionMap
        {
            get { return transactionMap; }
            set { transactionMap = value; }
        }

        public ICollection<CloseSessionEvent> CloseSessionEvents
        {
            get { return closeSessionEvents; }
            set { closeSessionEvents = value; }
        }

        public Dictionary<Guid, OrderVatInvoiceCustomerDto> OrderInvoices
        {
            get { return orderInvoices; }
            set { orderInvoices = value; }
        }

    }

    public class EntitiesRegistry : EntitiesRegistryBase
    {
        public static void RegisterClasses()
        {
            AddType(typeof(void), "java.lang.Void");
            AddType(typeof(string), "java.lang.String");
            AddType(typeof(Type), "java.lang.Class");
            AddType(typeof(System.Reflection.FieldInfo), "java.lang.reflect.Field");
            AddType(typeof(int), "java.lang.Integer");
            AddType(typeof(long), "java.lang.Long");
            AddType(typeof(short), "java.lang.Short");
            AddType(typeof(sbyte), "java.lang.Byte");
            AddType(typeof(bool), "java.lang.Boolean");
            AddType(typeof(char), "java.lang.Character");
            AddType(typeof(double), "java.lang.Double");
            AddType(typeof(float), "java.lang.Float");
            AddType(typeof(decimal), "java.math.BigDecimal");
            AddType(typeof(decimal), "java.math.BigDecimal");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(DateTime), "java.util.Date");
            AddType(typeof(TimeSpan), "java.sql.Time");
            AddType(typeof(TimeSpan), "java.sql.Time");
            AddType(typeof(TimeSpan), "java.sql.Time");
            AddType(typeof(Object), "java.lang.Object");
            AddType(typeof(Guid), "resto.db.Guid");
            AddType(typeof(PersistedEntity), "resto.db.PersistedEntity");
            AddType(typeof(Entity), "resto.db.Entity");
            AddType(typeof(CachedEntity), "resto.db.CachedEntity");
            AddType(typeof(EntityList<>), "resto.db.EntityList");
            AddType(typeof(ByValue<>), "resto.db.ByValue");
            AddType(typeof(Pair<,>), "resto.utils.Pair");
            AddType(typeof(ByValue<>), "resto.db.ByValue");
            AddType(typeof(XmlAsValue), "resto.db.XmlAsValue");
            AddType(typeof(EntitiesUpdate), "resto.back.cache.EntitiesUpdate");
            AddType(typeof(EntitiesUpdateItem), "resto.db.EntitiesUpdateItem");
            AddType(typeof(HashSet<>), "java.util.HashSet");
            AddType(typeof(HashSet<>), "java.util.HashSet");
            AddType(typeof(List<>), "java.util.ArrayList");
            AddType(typeof(List<>), "java.util.ArrayList");
            AddType(typeof(List<>), "java.util.ArrayList");
            AddType(typeof(List<>), "java.util.ArrayList");
            AddType(typeof(List<>), "java.util.ArrayList");
            AddType(typeof(Dictionary<,>), "java.util.HashMap");
            AddType(typeof(Dictionary<,>), "java.util.HashMap");
            AddType(typeof(Dictionary<,>), "java.util.HashMap");
            AddType(typeof(Exception), "java.lang.Exception");
            AddType(typeof(CachedEntityInfo));
            AddType(typeof(MissingReference));
            AddType(typeof(PrivillegedOp));
            AddType(typeof(ATransactionSumSession));
            AddType(typeof(ATransactionSumSessionKey));
            AddType(typeof(AbstractDocumentPaymentItem));
            AddType(typeof(Account));
            AddType(typeof(AccountRecordList));
            AddType(typeof(AccountRegisterRecord));
            AddType(typeof(AccountType));
            AddType(typeof(AccountTypeGroup));
            AddType(typeof(AccountingTransaction));
            AddType(typeof(AccountingTransactionAccount));
            AddType(typeof(AccountingTransactionAnalytics));
            AddType(typeof(AccountingTransactionCashFlow));
            AddType(typeof(AccountingTransactionPart));
            AddType(typeof(AccountingTransactionPartType));
            AddType(typeof(AccountingTransactionSide));
            AddType(typeof(BankStatementTransaction));
            AddType(typeof(CafeSessionTransaction));
            AddType(typeof(CardOrderTransaction));
            AddType(typeof(CashFlowCategory));
            AddType(typeof(CashFlowReportDTO));
            AddType(typeof(CashFlowType));
            AddType(typeof(CashOrderTransaction));
            AddType(typeof(ChartOfAccounts));
            AddType(typeof(CounteragentType));
            AddType(typeof(CreditOrderTransaction));
            AddType(typeof(CustomAccountingTransaction));
            AddType(typeof(DocumentPaymentInfo));
            AddType(typeof(FiscalOperationType));
            AddType(typeof(IncomingCashOrder));
            AddType(typeof(OpeningBalanceTransaction));
            AddType(typeof(OrderDiscountTransaction));
            AddType(typeof(OrderPaymentTransaction));
            AddType(typeof(OrderPrepayClosedTransaction));
            AddType(typeof(OrderPrepayTransaction));
            AddType(typeof(OutgoingCashOrder));
            AddType(typeof(PayInOutType));
            AddType(typeof(TipsPaymentInfo));
            AddType(typeof(TipsPaymentTransaction));
            AddType(typeof(TipsType));
            AddType(typeof(TransactionInfo));
            AddType(typeof(TransactionType));
            AddType(typeof(TransactionTypeOperation));
            AddType(typeof(VoucherOrderTransaction));
            AddType(typeof(DateDepartmentConceptionStructure));
            AddType(typeof(PnLSelectionType));
            AddType(typeof(BackOfficeNomenclatureUpdate));
            AddType(typeof(FrontCompositeUpdate));
            AddType(typeof(AbstractChangeDocumentListRecord));
            AddType(typeof(AbstractDocument));
            AddType(typeof(AbstractDocumentListRecord));
            AddType(typeof(AccountingDocumentListRecord));
            AddType(typeof(CachedSwitchable<>));
            AddType(typeof(DocumentStatus));
            AddType(typeof(DocumentType));
            AddType(typeof(DocumentValidationResult));
            AddType(typeof(EditableDocumentListRecord));
            AddType(typeof(IncomingInvoiceListRecord));
            AddType(typeof(IncomingReturnedInvoiceListRecord));
            AddType(typeof(InventoryDocumentListRecord));
            AddType(typeof(InvoiceDocumentSimpleListRecord));
            AddType(typeof(OutgoingDocumentListRecord));
            AddType(typeof(ProcessableDocument));
            AddType(typeof(ReturnedInvoiceListRecord));
            AddType(typeof(SalesDocumentListRecord));
            AddType(typeof(SingleProductProcessingDocumentListRecord));
            AddType(typeof(StoresMapping));
            AddType(typeof(WriteoffDocumentListRecord));
            AddType(typeof(DocumentNumberTemplateElement));
            AddType(typeof(DocumentNumberingAutoincrementValues));
            AddType(typeof(DocumentNumberingSettings));
            AddType(typeof(DocumentNumberingState));
            AddType(typeof(BaseServiceListRecord));
            AddType(typeof(IncomingServiceListRecord));
            AddType(typeof(StubDocument));
            AddType(typeof(StubDocumentItem));
            AddType(typeof(AttendanceType));
            AddType(typeof(AutoPenaltyType));
            AddType(typeof(CounteragentTransaction));
            AddType(typeof(CreateAttendanceForScheduleOperationType));
            AddType(typeof(EmployeeAttendanceEntry));
            AddType(typeof(EmployeeIntervalEntry));
            AddType(typeof(EmployeePercentPayment));
            AddType(typeof(EmployeeScheduleItem));
            AddType(typeof(EmployeeTransactionsAggregatedInfo));
            AddType(typeof(IncentivePayment));
            AddType(typeof(JurPersonDepartmentPair));
            AddType(typeof(MedicalAnalysis));
            AddType(typeof(MedicalAnalysisType));
            AddType(typeof(MissPenalty));
            AddType(typeof(OperationInfoCommented));
            AddType(typeof(PayInOutEvent));
            AddType(typeof(PayInOutTransaction));
            AddType(typeof(PaymentHistoryItem));
            AddType(typeof(PaymentStrategy));
            AddType(typeof(PaymentStrategyItemsToSave));
            AddType(typeof(PaymentStrategySpecification));
            AddType(typeof(PaymentStrategySpecificationItem));
            AddType(typeof(PenaltyOrBonus));
            AddType(typeof(PenaltyOrBonusCancelEvent));
            AddType(typeof(PenaltyOrBonusEvent));
            AddType(typeof(PenaltyOrBonusInfo));
            AddType(typeof(PenaltyOrBonusInfoExtended));
            AddType(typeof(PenaltyOrBonusTransaction));
            AddType(typeof(PenaltyOrBonusType));
            AddType(typeof(PenaltyOverride));
            AddType(typeof(PersonalSessionClosedEvent));
            AddType(typeof(PersonalSessionClosedPayment));
            AddType(typeof(SalarySettings));
            AddType(typeof(ScheduleItemState));
            AddType(typeof(SchedulePenalty));
            AddType(typeof(SchedulePenaltyType));
            AddType(typeof(ScheduleTariffType));
            AddType(typeof(ScheduleType));
            AddType(typeof(SessionClosePenaltyType));
            AddType(typeof(UserAdvanceEvent));
            AddType(typeof(UserAdvanceTransaction));
            AddType(typeof(UserMask));
            AddType(typeof(Payroll));
            AddType(typeof(PayrollDocumentListRecord));
            AddType(typeof(PayrollItem));
            AddType(typeof(RoleScheduleType));
            AddType(typeof(EmployeesPlanningReport));
            AddType(typeof(EmployeeAvailabilityEntry));
            AddType(typeof(EmployeeAvailabilityEntryStatus));
            AddType(typeof(EmployeeAvailabilitySchedule));
            AddType(typeof(RoleRequirementItem));
            AddType(typeof(RoleRequirementKey));
            AddType(typeof(AttendanceInfoForDay));
            AddType(typeof(AttendanceInfoForPeriod));
            AddType(typeof(DurationInMinutes));
            AddType(typeof(EmployeeReport));
            AddType(typeof(EmployeeReportColumn));
            AddType(typeof(EmployeeReportColumnDefinition));
            AddType(typeof(EmployeeReportColumnGroup));
            AddType(typeof(EmployeeTransactionInfo));
            AddType(typeof(LaborCostsAggregatedInfo));
            AddType(typeof(PersonalReport));
            AddType(typeof(PersonalReportRow));
            AddType(typeof(SalaryReport));
            AddType(typeof(IikoCardSettings));
            AddType(typeof(IikoNewsItem));
            AddType(typeof(SavedImageInfo));
            AddType(typeof(SavedImageRequest));
            AddType(typeof(Notice));
            AddType(typeof(NoticeType));
            AddType(typeof(NoticesState));
            AddType(typeof(AbstractScheduledPayment));
            AddType(typeof(AbstractScheduledPaymentRequest));
            AddType(typeof(OperationResult));
            AddType(typeof(ScheduledIncoming));
            AddType(typeof(ScheduledIncomingRequest));
            AddType(typeof(ScheduledPayment));
            AddType(typeof(ScheduledPaymentRequest));
            AddType(typeof(ScheduledPaymentTransaction));
            AddType(typeof(ScheduledPaymentType));
            AddType(typeof(ScheduledPeriod));
            AddType(typeof(ScheduledPeriodType));
            AddType(typeof(ChangePaymentStatusResult));
            AddType(typeof(CreateTransactionResult));
            AddType(typeof(DeletePaymentResult));
            AddType(typeof(GeneratePaymentsResult));
            AddType(typeof(GetTransactionResult));
            AddType(typeof(AbsoluteValuePricingStrategy));
            AddType(typeof(ClientPriceCategory));
            AddType(typeof(PercentPricingStrategy));
            AddType(typeof(PricingInfo));
            AddType(typeof(PricingParameters));
            AddType(typeof(PricingStrategy));
            AddType(typeof(RoundingPricingStrategy));
            AddType(typeof(VatValueSource));
            AddType(typeof(AccountingReportColumn));
            AddType(typeof(BusinessDateSettings));
            AddType(typeof(DateDetalization));
            AddType(typeof(Divider));
            AddType(typeof(OlapBoolean));
            AddType(typeof(OperationalDaySettings));
            AddType(typeof(OrderDeletionStatus));
            AddType(typeof(ReportBand));
            AddType(typeof(ReportColumn));
            AddType(typeof(ReportColumnOrder));
            AddType(typeof(ReportRow));
            AddType(typeof(ReportRowType));
            AddType(typeof(RestoReport));
            AddType(typeof(RowAnchor));
            AddType(typeof(StoreDataDirection));
            AddType(typeof(StoreProductPair));
            AddType(typeof(TextAligment));
            AddType(typeof(TreeReport));
            AddType(typeof(AlcoholIncomeReport));
            AddType(typeof(AlcoholIncomeReportItem));
            AddType(typeof(AlcoholReport));
            AddType(typeof(AlcoholReturnReport));
            AddType(typeof(AlcoholReturnReportItem));
            AddType(typeof(AlcoholSalesReport));
            AddType(typeof(AlcoholSalesReportItem));
            AddType(typeof(AlcoholTransactionInfoItem));
            AddType(typeof(AlcoholTransactionJournalItem));
            AddType(typeof(AlcoholTurnoverReport));
            AddType(typeof(AlcoholTurnoverReportItem));
            AddType(typeof(BalanceDataColumn));
            AddType(typeof(BalanceReport));
            AddType(typeof(BudgetPlan));
            AddType(typeof(BudgetPlanAccountHierarchy));
            AddType(typeof(BudgetPlanAccountHierarchyNode));
            AddType(typeof(BudgetPlanDocumentItemListRecord));
            AddType(typeof(BudgetPlanDocumentListRecord));
            AddType(typeof(BudgetPlanItem));
            AddType(typeof(BudgetPlanItemAccount));
            AddType(typeof(BudgetPlanItemValueType));
            AddType(typeof(BudgetPlanNodeType));
            AddType(typeof(BudgetType));
            AddType(typeof(ChequeReport));
            AddType(typeof(ChequeReportDateDetalization));
            AddType(typeof(ChequeReportDetalizationType));
            AddType(typeof(ChequeReportOrderType));
            AddType(typeof(ChequeReportSessionsDetalization));
            AddType(typeof(CounteragentReport));
            AddType(typeof(CounteragentSummaryReport));
            AddType(typeof(CounteragentSummaryReportColumn));
            AddType(typeof(CounteragentSummaryReportRow));
            AddType(typeof(Export1CMapping));
            AddType(typeof(Export1COperationMapping));
            AddType(typeof(Export1COperationType));
            AddType(typeof(Export1CReport));
            AddType(typeof(FoodcostCouldSaveData));
            AddType(typeof(FoodcostCouldSaveRecord));
            AddType(typeof(FoodcostMinPriceInfo));
            AddType(typeof(FoodcostPriceDynamicsData));
            AddType(typeof(FoodcostPriceDynamicsRecord));
            AddType(typeof(FoodcostPricesSource));
            AddType(typeof(FoodcostRecommendation));
            AddType(typeof(FoodcostReentranceRecord));
            AddType(typeof(FoodcostTransactionSource));
            AddType(typeof(FoodcostWhatIfData));
            AddType(typeof(FoodcostWhatIfDishRecord));
            AddType(typeof(FoodcostWhatIfRecord));
            AddType(typeof(GoodMoveReportData));
            AddType(typeof(ProductMoveItem));
            AddType(typeof(InvoiceReport));
            AddType(typeof(InvoiceReportGroupType));
            AddType(typeof(DatePeriod));
            AddType(typeof(OlapReportColumn));
            AddType(typeof(OlapReports));
            AddType(typeof(FilterCriteria));
            AddType(typeof(OlapReportSetting));
            AddType(typeof(Report));
            AddType(typeof(FilterDateRangeCriteria));
            AddType(typeof(FilterExcludeValuesCriteria));
            AddType(typeof(FilterIncludeValuesCriteria));
            AddType(typeof(FilterRangeCriteria));
            AddType(typeof(FilterSingleValueCriteria));
            AddType(typeof(FilterValuesSetCriteria));
            AddType(typeof(OP1AssemblyChartItemProperties));
            AddType(typeof(OP1AssemblyChartProperties));
            AddType(typeof(OP1ReportData));
            AddType(typeof(ProfitAndLossDataColumn));
            AddType(typeof(ProfitAndLossReport));
            AddType(typeof(PurchasingReportRecord));
            AddType(typeof(DishSale));
            AddType(typeof(DishSaleKey));
            AddType(typeof(NotSoldItemRecord));
            AddType(typeof(StoreOperationsBaseItem));
            AddType(typeof(StoreOperationsColumnNames));
            AddType(typeof(StoreOperationsDetalization));
            AddType(typeof(StoreOperationsReport));
            AddType(typeof(StoreOperationsReportFilter));
            AddType(typeof(StoreOperationsReportGrouping));
            AddType(typeof(StoreOperationsReportItem));
            AddType(typeof(StoreTurnoverItem));
            AddType(typeof(StoreTurnoverReport));
            AddType(typeof(BanquetSaleItem));
            AddType(typeof(CloseSessionEvent));
            AddType(typeof(ClosedSessionDocument));
            AddType(typeof(ClosedSessionDocumentItem));
            AddType(typeof(ClosedSessionStatus));
            AddType(typeof(ClosedSessionTransactionGroup));
            AddType(typeof(ClosedSessionTransactionInfo));
            AddType(typeof(DeliveryFlag));
            AddType(typeof(DeliverySaleItem));
            AddType(typeof(DeliveryType));
            AddType(typeof(DiscountSums));
            AddType(typeof(DishDeletionStatus));
            AddType(typeof(ItemSaleEvent));
            AddType(typeof(OrderCloseInfo));
            AddType(typeof(OrderCustomer));
            AddType(typeof(OrderCustomerKey));
            AddType(typeof(OrderPaymentEvent));
            AddType(typeof(OrderServiceType));
            AddType(typeof(OrderType));
            AddType(typeof(SaleItem));
            AddType(typeof(SalesVersionCompatibility));
            AddType(typeof(AnalysisFactorType));
            AddType(typeof(SalesAnalysisDto));
            AddType(typeof(SalesAnalysisReport));
            AddType(typeof(XyzAnalysisInterval));
            AddType(typeof(ItemCookingEvent));
            AddType(typeof(AuthResultDto));
            AddType(typeof(ConnectionResult));
            AddType(typeof(ProductStockCookingEvent));
            AddType(typeof(ProductStockEvent));
            AddType(typeof(ProductStockEventType));
            AddType(typeof(ProductStockSoldExpiredEvent));
            AddType(typeof(ProductStockWriteoffEvent));
            AddType(typeof(DataItemDTO));
            AddType(typeof(AbstractAssemblyWriteoffOutgoingDocument));
            AddType(typeof(AbstractAssemblyWriteoffOutgoingItem));
            AddType(typeof(AbstractIncomingDocument));
            AddType(typeof(AbstractIncomingInventoryItem));
            AddType(typeof(AbstractInvoiceDocument));
            AddType(typeof(AbstractInvoiceItem));
            AddType(typeof(AbstractOutgoingDocument));
            AddType(typeof(AbstractProductChart));
            AddType(typeof(AbstractProductChartItem));
            AddType(typeof(AbstractProductDocumentItem));
            AddType(typeof(AbstractProductWithUnitDocumentItem));
            AddType(typeof(AbstractProductsWriteoffDocument));
            AddType(typeof(AbstractProductsWriteoffDocumentItem));
            AddType(typeof(AbstractSalesDocument));
            AddType(typeof(AbstractSingleProductProcessingDocument));
            AddType(typeof(AbstractStoreDocument));
            AddType(typeof(AbstractStorePairDocument));
            AddType(typeof(AbstractVatTransaction));
            AddType(typeof(AccountingCategory));
            AddType(typeof(AllergenGroup));
            AddType(typeof(AssemblyChart));
            AddType(typeof(AssemblyChartItem));
            AddType(typeof(AssemblyChartItemNode));
            AddType(typeof(AssemblyChartItemTree));
            AddType(typeof(AssemblyChartNode));
            AddType(typeof(AssemblyChartSaveResult));
            AddType(typeof(AssemblyChartSaveStatus));
            AddType(typeof(AssemblyChartVersionCompatibility));
            AddType(typeof(AssemblyChartVersionWarning));
            AddType(typeof(AssemblyChartsTree));
            AddType(typeof(AssemblyWriteoffItem));
            AddType(typeof(AssemblyWriteoffItemInfo));
            AddType(typeof(BarcodeContainer));
            AddType(typeof(Certificate));
            AddType(typeof(CertificateOfQuality));
            AddType(typeof(Container));
            AddType(typeof(CookingType));
            AddType(typeof(CostPriceChangeItem));
            AddType(typeof(CustomCategoryList));
            AddType(typeof(CustomCategoryValue));
            AddType(typeof(DefaultDocumentTime));
            AddType(typeof(DisassembleDocument));
            AddType(typeof(DisassembleDocumentItem));
            AddType(typeof(DocumentSettings));
            AddType(typeof(DocumentTimeType));
            AddType(typeof(GoodRecordBase));
            AddType(typeof(InOutGoodsMove));
            AddType(typeof(InOutItem));
            AddType(typeof(IncomingInventory));
            AddType(typeof(IncomingInventoryFirstStepItem));
            AddType(typeof(IncomingInventoryItem));
            AddType(typeof(IncomingInventoryStep));
            AddType(typeof(IncomingInvoice));
            AddType(typeof(IncomingInvoiceItem));
            AddType(typeof(IncomingReturnedInvoice));
            AddType(typeof(IncomingReturnedInvoiceItem));
            AddType(typeof(IncomingReturnedInvoiceProcessingMode));
            AddType(typeof(InternalTransfer));
            AddType(typeof(InternalTransferItem));
            AddType(typeof(InventoryItemStatus));
            AddType(typeof(InvoicePaymentItem));
            AddType(typeof(InvoiceReportItem));
            AddType(typeof(ManualOrAutomaticDocument));
            AddType(typeof(MeasureUnit));
            AddType(typeof(ModifierSchema));
            AddType(typeof(NegativeStoreBalanceItem));
            AddType(typeof(NutritionValue));
            AddType(typeof(OutgoingDocumentPaymentItem));
            AddType(typeof(OutgoingInvoice));
            AddType(typeof(OutgoingInvoiceItem));
            AddType(typeof(PeriodType));
            AddType(typeof(Product));
            AddType(typeof(ProductAwareKey));
            AddType(typeof(ProductCategory));
            AddType(typeof(ProductCookingExpenses));
            AddType(typeof(ProductCostAndOutput));
            AddType(typeof(ProductEntryReport));
            AddType(typeof(ProductGroup));
            AddType(typeof(ProductGroupChildrenFillInfo));
            AddType(typeof(ProductGroupType));
            AddType(typeof(ProductImage));
            AddType(typeof(ProductImageType));
            AddType(typeof(ProductIncomeTransaction));
            AddType(typeof(ProductInventoryCorrection));
            AddType(typeof(ProductInventoryEvent));
            AddType(typeof(ProductItemCategory));
            AddType(typeof(ProductMarkupSettings));
            AddType(typeof(ProductPriceMarkupOptions));
            AddType(typeof(ProductPriceMarkupPriceSourceKind));
            AddType(typeof(ProductReplacementDocument));
            AddType(typeof(ProductReplacementItem));
            AddType(typeof(ProductScale));
            AddType(typeof(ProductSize));
            AddType(typeof(ProductSizeDocumentItem));
            AddType(typeof(ProductSizeFactors));
            AddType(typeof(ProductSizeKey));
            AddType(typeof(ProductSizeServerConstants));
            AddType(typeof(ProductSizeStoreKey));
            AddType(typeof(ProductStockWriteoffDocument));
            AddType(typeof(ProductTag));
            AddType(typeof(ProductTagGroup));
            AddType(typeof(ProductTransferType));
            AddType(typeof(ProductTreeEntity));
            AddType(typeof(ProductTreeEntityFieldName));
            AddType(typeof(ProductTreeWarning));
            AddType(typeof(ProductType));
            AddType(typeof(ProductTypeForCooking));
            AddType(typeof(ProductWriteoffEvent));
            AddType(typeof(ProductWriteoffStrategy));
            AddType(typeof(ProductWriteoffTransaction));
            AddType(typeof(ProductionDocument));
            AddType(typeof(ProductionDocumentItem));
            AddType(typeof(Rate));
            AddType(typeof(RateInterval));
            AddType(typeof(RateSchedule));
            AddType(typeof(ReportOfQualitySettings));
            AddType(typeof(ReturnedInvoice));
            AddType(typeof(ReturnedInvoiceItem));
            AddType(typeof(SalesDocument));
            AddType(typeof(SalesDocumentItem));
            AddType(typeof(SourceNature));
            AddType(typeof(StationChart));
            AddType(typeof(StationChartExtended));
            AddType(typeof(StationChartItem));
            AddType(typeof(StationChartItemExtended));
            AddType(typeof(Store));
            AddType(typeof(StoreBalance));
            AddType(typeof(StoreInfo));
            AddType(typeof(StoreLevelValue));
            AddType(typeof(StoreReportManagerSetup));
            AddType(typeof(StoreReportManagerSetupList));
            AddType(typeof(StoreReportManagerSetupType));
            AddType(typeof(StoreSpecification));
            AddType(typeof(StoreSpecificationEntity));
            AddType(typeof(StoreSummaryReportSettings));
            AddType(typeof(StoreTransactionInfo));
            AddType(typeof(SupplierInfo));
            AddType(typeof(SystemMeasureUnit));
            AddType(typeof(TaxCategory));
            AddType(typeof(TimePeakInterval));
            AddType(typeof(TopIngredientDto));
            AddType(typeof(TransformationDocument));
            AddType(typeof(TransformationDocumentItem));
            AddType(typeof(VerificationActAccountsFilter));
            AddType(typeof(WithProductSize));
            AddType(typeof(WithSplitVat));
            AddType(typeof(WriteoffDocument));
            AddType(typeof(WriteoffDocumentItem));
            AddType(typeof(AlcoholClass));
            AddType(typeof(AlcoholClassGroup));
            AddType(typeof(AlcoholType));
            AddType(typeof(CustomerImporterResult));
            AddType(typeof(ExternalHierarchy));
            AddType(typeof(ExternalHierarchyGroup));
            AddType(typeof(ExternalHierarchyProduct));
            AddType(typeof(ExternalHierarchyTreeEntity));
            AddType(typeof(ExternalHierarchyTreeEntityImage));
            AddType(typeof(StoresProductsBalance));
            AddType(typeof(AbstractIncomingPriceListItem));
            AddType(typeof(IndependentPriceList));
            AddType(typeof(IndependentPriceListItem));
            AddType(typeof(IndependentPriceListKey));
            AddType(typeof(PriceListSaveResult));
            AddType(typeof(SupplierPriceList));
            AddType(typeof(SupplierPriceListItem));
            AddType(typeof(ProducerDocument));
            AddType(typeof(WithProducer));
            AddType(typeof(AbstractPriceTableItem));
            AddType(typeof(AccountingMethod));
            AddType(typeof(PreparedAssemblyChart));
            AddType(typeof(PreparedAssemblyChartItem));
            AddType(typeof(PriceTableAllIncomeItem));
            AddType(typeof(PriceTableInvoiceIncomeItem));
            AddType(typeof(PriceTableItem));
            AddType(typeof(ProductSizeAssemblyStrategy));
            AddType(typeof(ProductValue));
            AddType(typeof(VatAccounting));
            AddType(typeof(CostCorrectionSettings));
            AddType(typeof(CostCorrectionType));
            AddType(typeof(AverageAlgorithmParameters));
            AddType(typeof(StoreReplenishmentAlgorithmType));
            AddType(typeof(BaseService));
            AddType(typeof(DistributionAlgorithmType));
            AddType(typeof(IncomingService));
            AddType(typeof(IncomingServiceItem));
            AddType(typeof(OutgoingService));
            AddType(typeof(OutgoingServiceItem));
            AddType(typeof(ServiceItem));
            AddType(typeof(TemplateReportItem));
            AddType(typeof(TemplateReportModelType));
            AddType(typeof(AbstractKeyedTimeTableItem));
            AddType(typeof(DetailedVatInvoiceReportItem));
            AddType(typeof(OrderVatInvoiceCustomerDto));
            AddType(typeof(OrderVatInvoiceData));
            AddType(typeof(VatInvoiceData));
            AddType(typeof(VatInvoicePrintData));
            AddType(typeof(VatInvoiceReportData));
            AddType(typeof(VatInvoiceReportItem));
            AddType(typeof(AbstractVatInvoice));
            AddType(typeof(AbstractVatInvoiceItem));
            AddType(typeof(ConsolidatedVatInvoiceItem));
            AddType(typeof(DetailedVatInvoice));
            AddType(typeof(DetailedVatInvoiceItem));
            AddType(typeof(PaCompanyDocumentType));
            AddType(typeof(VatInvoice));
            AddType(typeof(OperationInfo));
            AddType(typeof(AddressShowType));
            AddType(typeof(AddressShowTypeSettings));
            AddType(typeof(CashSystem));
            AddType(typeof(CentralOffice));
            AddType(typeof(CentralStore));
            AddType(typeof(CorporatedEntity));
            AddType(typeof(CorporatedEntityType));
            AddType(typeof(CorporatedHierarchy));
            AddType(typeof(Corporation));
            AddType(typeof(CustomerDataTransferType));
            AddType(typeof(DateFormatSettings));
            AddType(typeof(Department));
            AddType(typeof(DepartmentCategory));
            AddType(typeof(DepartmentEntity));
            AddType(typeof(DepartmentFilter));
            AddType(typeof(FrontCorporatedProperties));
            AddType(typeof(JurPerson));
            AddType(typeof(LegalAddress));
            AddType(typeof(Manufacture));
            AddType(typeof(OfficialEmployee));
            AddType(typeof(OfficialEmployeeRole));
            AddType(typeof(OrgDevelopment));
            AddType(typeof(PersonalDataProcessingSettings));
            AddType(typeof(SalePoint));
            AddType(typeof(SimpleDepartmentableEntity));
            AddType(typeof(StoreAccountingSettings));
            AddType(typeof(CorporationSettingsRequest));
            AddType(typeof(ImageChangeRequest));
            AddType(typeof(MenuChangeDocumentListRecord));
            AddType(typeof(MenuChangeField));
            AddType(typeof(MenuOrder));
            AddType(typeof(MenuOrderItem));
            AddType(typeof(MenuOrderType));
            AddType(typeof(MenuTemplate));
            AddType(typeof(MenuTemplateItem));
            AddType(typeof(PriceListItem));
            AddType(typeof(PriceListItemKey));
            AddType(typeof(RoundMode));
            AddType(typeof(RoundRule));
            AddType(typeof(TreeMenuChangeDocument));
            AddType(typeof(TreeMenuChangeDocumentItem));
            AddType(typeof(DocumentBasedTimeTableItem));
            AddType(typeof(PriceListDto));
            AddType(typeof(PriceListItemDto));
            AddType(typeof(PriceListItemKeyDto));
            AddType(typeof(PriceListUpdateDto));
            AddType(typeof(PriceListUpdateType));
            AddType(typeof(TreeMenuChangeDocumentHeaderDto));
            AddType(typeof(SynchroEntity));
            AddType(typeof(SynchroEntityStatus));
            AddType(typeof(ConsolidatedOrder));
            AddType(typeof(ConsolidatedOrderDocument));
            AddType(typeof(ConsolidatedOrderField));
            AddType(typeof(ConsolidatedOrderItem));
            AddType(typeof(ConsolidatedOrderStatus));
            AddType(typeof(GoodRecord));
            AddType(typeof(IntegratedProductionOrder));
            AddType(typeof(OrderTimeLimit));
            AddType(typeof(PeriodModeParams));
            AddType(typeof(PreparedRegisterCache));
            AddType(typeof(PreparedRegisterCacheItem));
            AddType(typeof(PreparedRegisterDocument));
            AddType(typeof(PreparedRegisterItem));
            AddType(typeof(ProductContainerKey));
            AddType(typeof(ProductionListRecord));
            AddType(typeof(ProductionOrderBlank));
            AddType(typeof(ProductionOrderBlankItem));
            AddType(typeof(ProductionOrderBlankTab));
            AddType(typeof(ProductionOrderDocument));
            AddType(typeof(ProductionOrderItem));
            AddType(typeof(AgentConfigTask));
            AddType(typeof(AutoServicePrintTimeOption));
            AddType(typeof(ChequeReceiveType));
            AddType(typeof(Conception));
            AddType(typeof(CookingPlaceType));
            AddType(typeof(CookingPlaceTypeSettings));
            AddType(typeof(CustomerSearchMode));
            AddType(typeof(DeliveryBillPrintTimeOption));
            AddType(typeof(DeliveryConfirmationAddressComparsionMode));
            AddType(typeof(DeliveryNumberGenerationOption));
            AddType(typeof(DeliveryServicePrintTimeOption));
            AddType(typeof(DeliveryStickerPrintTimeOption));
            AddType(typeof(ExternalTerminalSettings));
            AddType(typeof(FiscalGroupOverrideType));
            AddType(typeof(GetDeviceListTask));
            AddType(typeof(GetFontsListTask));
            AddType(typeof(GetOposDeviceListTask));
            AddType(typeof(GetPrinterListTask));
            AddType(typeof(GetVideoDeviceListTask));
            AddType(typeof(Group));
            AddType(typeof(GroupLocation));
            AddType(typeof(GroupServiceMode));
            AddType(typeof(IikoNetAutomationOption));
            AddType(typeof(KitchenProductCookingScenario));
            AddType(typeof(KitchenProductCookingStatus));
            AddType(typeof(KitchenProductCookingStatusSettings));
            AddType(typeof(OrderAlertSettings));
            AddType(typeof(OrderItemsGroupingType));
            AddType(typeof(PaymentTypeDiscountConstraint));
            AddType(typeof(PointOfSale));
            AddType(typeof(PrintKitchenBarcodeType));
            AddType(typeof(RestaurantSection));
            AddType(typeof(ServerInfo));
            AddType(typeof(Table));
            AddType(typeof(TableServiceSettings));
            AddType(typeof(TaxationSystemsSettings));
            AddType(typeof(TerminalsSettings));
            AddType(typeof(ClosePeriodSchedulerPeriods));
            AddType(typeof(CronScheduledTask));
            AddType(typeof(DepartmentPeriodCloseTask));
            AddType(typeof(ReprocessDocumentsTask));
            AddType(typeof(ReprocessIncomingServicesTask));
            AddType(typeof(ScheduledTaskEntity));
            AddType(typeof(SimpleContinuousScheduledTask));
            AddType(typeof(SqlStatementTask));
            AddType(typeof(TaskEntity));
            AddType(typeof(TaxCategoryVatPercentUpdateTask));
            AddType(typeof(ItemType));
            AddType(typeof(RestaurantSectionImage));
            AddType(typeof(RestaurantSectionItem));
            AddType(typeof(RestaurantSectionMark));
            AddType(typeof(RestaurantSectionObject));
            AddType(typeof(RestaurantSectionResizableObject));
            AddType(typeof(RestaurantSectionSchema));
            AddType(typeof(RestaurantSectionTable));
            AddType(typeof(TableType));
            AddType(typeof(DateTimeServerConstants));
            AddType(typeof(CustomerOrganizationDetailsFullAddressDto));
            AddType(typeof(CustomerOrganizationDetailsInfoDto));
            AddType(typeof(CustomerPublicOrganizationDetailsInfoDto));
            AddType(typeof(CustomerSearchRequest));
            AddType(typeof(DBVersion));
            AddType(typeof(IsolatedEntitiesContext));
            AddType(typeof(LocalizableNamePersistedEntity));
            AddType(typeof(LocalizableValue));
            AddType(typeof(OrderedHibernateEntity));
            AddType(typeof(PredefinedGuids));
            AddType(typeof(RestoTemp));
            AddType(typeof(CleanEventsDefaults));
            AddType(typeof(CleanEventsSettings));
            AddType(typeof(DeletedEntity));
            AddType(typeof(QueryRewriteRule));
            AddType(typeof(ServerFingerPrintsInfo));
            AddType(typeof(ServerVolatileInfo));
            AddType(typeof(BackupMode));
            AddType(typeof(BackupSettings));
            AddType(typeof(BackupTimerSchedule));
            AddType(typeof(DBBackupInfo));
            AddType(typeof(DBInfoParameter));
            AddType(typeof(DBMaintenanceTaskType));
            AddType(typeof(DbLastBackupStatus));
            AddType(typeof(DatabaseBackupType));
            AddType(typeof(IncrementalBackupSchedule));
            AddType(typeof(IncrementalBackupState));
            AddType(typeof(MetricType));
            AddType(typeof(DeliveryRegionReport));
            AddType(typeof(DeliveryRegionReportRow));
            AddType(typeof(ConsolidatedReportRow));
            AddType(typeof(DeliveryConsolidatedReport));
            AddType(typeof(DeliveryCourierMetricRow));
            AddType(typeof(DeliveryCourierReport));
            AddType(typeof(DeliveryCourierReportRow));
            AddType(typeof(HalfHourMetricRow));
            AddType(typeof(HalfHourReport));
            AddType(typeof(HalfHourReportRow));
            AddType(typeof(DeliveryLoyaltyRegionRow));
            AddType(typeof(DeliveryLoyaltyReport));
            AddType(typeof(DeliveryLoyaltyReportRow));
            AddType(typeof(DeliveryOrderCycleMetricRow));
            AddType(typeof(DeliveryOrderCycleReport));
            AddType(typeof(DeliveryPluginProtocol));
            AddType(typeof(DeliveryTerminal));
            AddType(typeof(DeliveryTerminalExchangeState));
            AddType(typeof(DeliveryTerminalSettings));
            AddType(typeof(DeliveryTerminalTimeZoneCheckInfo));
            AddType(typeof(DeliveryTerminalTimeZoneInfo));
            AddType(typeof(AgentDevice));
            AddType(typeof(AgentDocument));
            AddType(typeof(AgentDriver));
            AddType(typeof(Camera));
            AddType(typeof(CameraDriver));
            AddType(typeof(CashRegister));
            AddType(typeof(CashRegisterConnectingStatus));
            AddType(typeof(FiscalRegisterPaymentItem));
            AddType(typeof(FiscalRegisterPaymentTypeInfo));
            AddType(typeof(FiscalRegisterTaxItem));
            AddType(typeof(IPCameraDriver));
            AddType(typeof(IPrinterDevice));
            AddType(typeof(PaymentTypeToRegisterIdMapping));
            AddType(typeof(PowerDevice));
            AddType(typeof(PowerDeviceDriver));
            AddType(typeof(PrinterDevice));
            AddType(typeof(RestaurantSectionSet));
            AddType(typeof(SettlementPlace));
            AddType(typeof(TaxCategoryToTaxItemMapping));
            AddType(typeof(Terminal));
            AddType(typeof(TerminalDriver));
            AddType(typeof(Agent));
            AddType(typeof(AgentDeviceInfo));
            AddType(typeof(AgentDeviceMessage));
            AddType(typeof(AgentErrorDeviceResult));
            AddType(typeof(AgentErrorResult));
            AddType(typeof(AgentGetTask));
            AddType(typeof(AgentInfo));
            AddType(typeof(AgentMessage));
            AddType(typeof(AgentMsgPause));
            AddType(typeof(AgentMsgResume));
            AddType(typeof(AgentMsgStart));
            AddType(typeof(AgentMsgStop));
            AddType(typeof(AgentOkDeviceResult));
            AddType(typeof(AgentOkNeedStartDeviceResult));
            AddType(typeof(AgentOkResult));
            AddType(typeof(AgentPostResult));
            AddType(typeof(AgentPrintErrorResult));
            AddType(typeof(AgentPrintOkResult));
            AddType(typeof(AgentRequest));
            AddType(typeof(AgentTask));
            AddType(typeof(AlposAf01DriverSettings));
            AddType(typeof(ArtSoftFiscalRegisterDriverSettings));
            AddType(typeof(AtolDriverSettings));
            AddType(typeof(AzimuthFnPrimDriverSettings));
            AddType(typeof(AzimuthPrimDriverSettings));
            AddType(typeof(BrioFisFm32DriverSettings));
            AddType(typeof(CashDrawerDriverSettings));
            AddType(typeof(CashServerDriverSettings));
            AddType(typeof(CheckboxDriverSettings));
            AddType(typeof(DatecsDriverSettings));
            AddType(typeof(DeviceSettings));
            AddType(typeof(EmpirijaDriverSettings));
            AddType(typeof(ErrorResponse));
            AddType(typeof(EscPosPrinterDriverSettings));
            AddType(typeof(ExternalCashRegisterSettings));
            AddType(typeof(ExternalDeviceBooleanSetting));
            AddType(typeof(ExternalDeviceCustomEnumSetting));
            AddType(typeof(ExternalDeviceCustomEnumSettingValue));
            AddType(typeof(ExternalDeviceNumberSetting));
            AddType(typeof(ExternalDeviceNumberSettingKind));
            AddType(typeof(ExternalDeviceSetting));
            AddType(typeof(ExternalDeviceSettings));
            AddType(typeof(ExternalDeviceStringSetting));
            AddType(typeof(FontsList));
            AddType(typeof(HrsDriverSettings));
            AddType(typeof(IPCameraSettings));
            AddType(typeof(IcsDriverSettings));
            AddType(typeof(IksSpsDriverSettings));
            AddType(typeof(InternalCustomerDisplaySettings));
            AddType(typeof(Maria301DriverSettings));
            AddType(typeof(Mercury130DriverSettings));
            AddType(typeof(MercuryDriverSettings));
            AddType(typeof(OPOSPrinterDriverSettings));
            AddType(typeof(OPOSRegisterDriverSettings));
            AddType(typeof(OposDeviceList));
            AddType(typeof(PilotFP410KDriverSettings));
            AddType(typeof(PiritDriverSettings));
            AddType(typeof(PiritFnDriverSettings));
            AddType(typeof(PortWriterDriverSettings));
            AddType(typeof(PosnetDriverSettings));
            AddType(typeof(PosnetThermalDriverSettings));
            AddType(typeof(PowerDeviceDriverSettings));
            AddType(typeof(PrimFRDriverSettings));
            AddType(typeof(PrinterInfo));
            AddType(typeof(PrinterList));
            AddType(typeof(QueryInfoResult));
            AddType(typeof(QueryInfoTask));
            AddType(typeof(RequiredParameter));
            AddType(typeof(ScaleDriverSettings));
            AddType(typeof(ServerResponse));
            AddType(typeof(ShtrihDriverSettings));
            AddType(typeof(SparkDriverSettings));
            AddType(typeof(SparkFnDriverSettings));
            AddType(typeof(SupportedCommand));
            AddType(typeof(TimeoutResponse));
            AddType(typeof(UnisystemDriverSettings));
            AddType(typeof(VideoDeviceInfo));
            AddType(typeof(VideoDeviceList));
            AddType(typeof(VideoDriverSettings));
            AddType(typeof(UpgradeDeviceSettingsContainer));
            AddType(typeof(OrderDeviationType));
            AddType(typeof(PurchasesDeviationsReportInternalItem));
            AddType(typeof(PurchasesDeviationsReportItem));
            AddType(typeof(PurchasesDeviationsReportReceivedItem));
            AddType(typeof(DocumentReplenishmentDto));
            AddType(typeof(EdiAdditionalItem));
            AddType(typeof(EdiDocumentIdentifier));
            AddType(typeof(EdiIncomingInvoice));
            AddType(typeof(EdiIncomingInvoiceListRecord));
            AddType(typeof(EdiInvoiceStatus));
            AddType(typeof(EdiOrderDocument));
            AddType(typeof(EdiOrderDocumentListRecord));
            AddType(typeof(EdiOrderItem));
            AddType(typeof(EdiOrderItemStatus));
            AddType(typeof(EdiOrderStatus));
            AddType(typeof(InvoiceDeliveryInfo));
            AddType(typeof(ProductReplenishmentDto));
            AddType(typeof(EdiSystem));
            AddType(typeof(EdiSystemType));
            AddType(typeof(EventAttributeMetadata));
            AddType(typeof(EventValueType));
            AddType(typeof(EventGroupMetadata));
            AddType(typeof(EventMetadata));
            AddType(typeof(EventTypeMetadata));
            AddType(typeof(EventsJournalPreset));
            AddType(typeof(EventsJournalPresetTimeFilter));
            AddType(typeof(RestoEvent));
            AddType(typeof(UserActionEvent));
            AddType(typeof(UserActionEventType));
            AddType(typeof(UserEvent));
            AddType(typeof(UserEventAttribute));
            AddType(typeof(UserEventAttributeId));
            AddType(typeof(UserEventSeverity));
            AddType(typeof(AbstractExternalDocument));
            AddType(typeof(AbstractExternalDocumentItem));
            AddType(typeof(ExternalDocumentTypeInfo));
            AddType(typeof(ExternalDocumentTypes));
            AddType(typeof(EgaisDocumentTypes));
            AddType(typeof(EgaisIntConstants));
            AddType(typeof(EgaisTimeConstants));
            AddType(typeof(EgaisMarkState));
            AddType(typeof(EgaisMarkStateUpdate));
            AddType(typeof(EgaisMarkTableItem));
            AddType(typeof(EgaisMarkTableItemKey));
            AddType(typeof(EgaisAbstractDocument));
            AddType(typeof(EgaisAbstractDocumentItem));
            AddType(typeof(EgaisAbstractInternalDocument));
            AddType(typeof(EgaisAbstractInvoice));
            AddType(typeof(EgaisAbstractInvoiceItem));
            AddType(typeof(EgaisAddress));
            AddType(typeof(EgaisApiVersion));
            AddType(typeof(EgaisBTicket));
            AddType(typeof(EgaisBTicketItem));
            AddType(typeof(EgaisConstraints));
            AddType(typeof(EgaisEditableStatus));
            AddType(typeof(EgaisEntitiesUpdate));
            AddType(typeof(EgaisInternalDocumentStatus));
            AddType(typeof(EgaisOrganizationInfo));
            AddType(typeof(EgaisOrganizationType));
            AddType(typeof(EgaisProductInfo));
            AddType(typeof(EgaisProductType));
            AddType(typeof(EgaisRegister));
            AddType(typeof(EgaisTransportInfo));
            AddType(typeof(EgaisTransportOwnership));
            AddType(typeof(EgaisTransportType));
            AddType(typeof(EgaisBalanceDocument));
            AddType(typeof(EgaisBalanceDocumentItem));
            AddType(typeof(EgaisBalanceDocumentStatus));
            AddType(typeof(EgaisBalanceDocumentType));
            AddType(typeof(EgaisBalanceStubDocument));
            AddType(typeof(EgaisAbstractQuery));
            AddType(typeof(EgaisOrganizationEntity));
            AddType(typeof(EgaisProductEntity));
            AddType(typeof(EgaisQueryFormA));
            AddType(typeof(EgaisQueryFormAItem));
            AddType(typeof(EgaisQueryFormAStubDocument));
            AddType(typeof(EgaisQueryNotAnsweredInvoices));
            AddType(typeof(EgaisQueryNotAnsweredInvoicesItem));
            AddType(typeof(EgaisQueryOrganization));
            AddType(typeof(EgaisQueryOrganizationItem));
            AddType(typeof(EgaisQueryOrganizationStubDocument));
            AddType(typeof(EgaisQueryOrganizationType));
            AddType(typeof(EgaisQueryParameter));
            AddType(typeof(EgaisQueryProduct));
            AddType(typeof(EgaisQueryProductItem));
            AddType(typeof(EgaisQueryProductStubDocument));
            AddType(typeof(EgaisQueryResendInvoice));
            AddType(typeof(EgaisQueryResendInvoiceItem));
            AddType(typeof(EgaisReplyFormA));
            AddType(typeof(EgaisIncomingInvoice));
            AddType(typeof(EgaisIncomingInvoiceConfirmStatus));
            AddType(typeof(EgaisIncomingInvoiceItem));
            AddType(typeof(EgaisIncomingInvoiceStatus));
            AddType(typeof(AlcoholJournal));
            AddType(typeof(AlcoholJournalItem));
            AddType(typeof(EgaisAbstractMarkDocument));
            AddType(typeof(EgaisAbstractMarkDocumentItem));
            AddType(typeof(EgaisMark));
            AddType(typeof(EgaisMarkBalanceQuery));
            AddType(typeof(EgaisMarkBalanceQueryItem));
            AddType(typeof(EgaisMarkBox));
            AddType(typeof(EgaisMarkConfirm));
            AddType(typeof(EgaisMarkConfirmItem));
            AddType(typeof(EgaisMarkConfirmStatus));
            AddType(typeof(EgaisMarkFix));
            AddType(typeof(EgaisMarkFixItem));
            AddType(typeof(EgaisMarkFixStubDocument));
            AddType(typeof(EgaisMarkUnFix));
            AddType(typeof(EgaisMarkUnFixItem));
            AddType(typeof(EgaisMarkUnFixStubDocument));
            AddType(typeof(EgaisTerminalLockable));
            AddType(typeof(EgaisUnsealEvent));
            AddType(typeof(EgaisUnsealEventAction));
            AddType(typeof(EgaisUnsealEventStatus));
            AddType(typeof(EgaisAbstractStubDocument));
            AddType(typeof(EgaisDocumentLink));
            AddType(typeof(EgaisOutgoingInvoice));
            AddType(typeof(EgaisOutgoingInvoiceConfirmStatus));
            AddType(typeof(EgaisOutgoingInvoiceItem));
            AddType(typeof(EgaisOutgoingInvoiceStatus));
            AddType(typeof(EgaisOutgoingInvoiceStubDocument));
            AddType(typeof(EgaisOutgoingInvoiceType));
            AddType(typeof(EgaisRequestRepeal));
            AddType(typeof(EgaisRequestRepealInfo));
            AddType(typeof(EgaisRequestRepealItem));
            AddType(typeof(EgaisRequestRepealStatus));
            AddType(typeof(WithRequestRepealIncoming));
            AddType(typeof(WithRequestRepealOutgoing));
            AddType(typeof(EgaisRequestRepealStubDocument));
            AddType(typeof(EgaisShopIncoming));
            AddType(typeof(EgaisShopIncomingItem));
            AddType(typeof(EgaisShopIncomingLink));
            AddType(typeof(EgaisShopIncomingStubDocument));
            AddType(typeof(EgaisShopIncomingType));
            AddType(typeof(EgaisShopTransfer));
            AddType(typeof(EgaisShopTransferDirection));
            AddType(typeof(EgaisShopTransferItem));
            AddType(typeof(EgaisShopTransferStubDocument));
            AddType(typeof(EgaisShopWriteoff));
            AddType(typeof(EgaisShopWriteoffItem));
            AddType(typeof(EgaisShopWriteoffLink));
            AddType(typeof(EgaisShopWriteoffStubDocument));
            AddType(typeof(EgaisShopWriteoffType));
            AddType(typeof(EgaisConfirmData));
            AddType(typeof(EgaisConfirmTicketData));
            AddType(typeof(EgaisDocType));
            AddType(typeof(EgaisOperationName));
            AddType(typeof(EgaisResultData));
            AddType(typeof(EgaisResultStatus));
            AddType(typeof(EgaisFifoSortValue));
            AddType(typeof(EgaisTransactionPart));
            AddType(typeof(EgaisTransactionPartKey));
            AddType(typeof(EgaisInventoryReport));
            AddType(typeof(EgaisInventoryReportInternalItem));
            AddType(typeof(EgaisInvoiceCreateResult));
            AddType(typeof(EgaisInvoiceSaveResult));
            AddType(typeof(EgaisResendInvoiceSendResult));
            AddType(typeof(EgaisConnectionSettings));
            AddType(typeof(EgaisConnectionsSettings));
            AddType(typeof(UtmDocumentStatus));
            AddType(typeof(UtmDocumentPresence));
            AddType(typeof(UtmDocumentState));
            AddType(typeof(UtmDocumentType));
            AddType(typeof(ConnectionGroup));
            AddType(typeof(FranchiseOuterEntityType));
            AddType(typeof(PingMessageRecord));
            AddType(typeof(ProductDisabledField));
            AddType(typeof(PingMessageType));
            AddType(typeof(AbstractChoiceBinding));
            AddType(typeof(ActionAfterPaymentType));
            AddType(typeof(ActionAfterPrintType));
            AddType(typeof(AllergenGroupsFrontDto));
            AddType(typeof(AllowableDeviationAction));
            AddType(typeof(BlockPageType));
            AddType(typeof(CafeSessionInfo));
            AddType(typeof(CafeSessionProperties));
            AddType(typeof(CafeSetup));
            AddType(typeof(CafeState));
            AddType(typeof(ChoiceBinding));
            AddType(typeof(ChoiceBindingRedefinition));
            AddType(typeof(CookingPlaceSource));
            AddType(typeof(CourseDishesCookingMode));
            AddType(typeof(DeviceType));
            AddType(typeof(DishesSelectionMode));
            AddType(typeof(DriverType));
            AddType(typeof(FractionalProductAmountMode));
            AddType(typeof(FrontSessionsProperties));
            AddType(typeof(Gender));
            AddType(typeof(ICafeSession));
            AddType(typeof(InputRequisitesType));
            AddType(typeof(OrderTypeFillRequirements));
            AddType(typeof(PassportInfo));
            AddType(typeof(PreferencesStorage));
            AddType(typeof(RecalculateInfo));
            AddType(typeof(Role));
            AddType(typeof(ServiceFee));
            AddType(typeof(ServiceFeeDiscountType));
            AddType(typeof(ServiceFeeStrategy));
            AddType(typeof(SettingsItem));
            AddType(typeof(SettingsItemType));
            AddType(typeof(StopList));
            AddType(typeof(SupplierType));
            AddType(typeof(UncompleteRecalculateInfo));
            AddType(typeof(User));
            AddType(typeof(UserValidationInfo));
            AddType(typeof(UserValidationType));
            AddType(typeof(UserWithValidationInfo));
            AddType(typeof(WaiterDebtSettings));
            AddType(typeof(Address));
            AddType(typeof(City));
            AddType(typeof(DeliveryAddress));
            AddType(typeof(Street));
            AddType(typeof(KladrObject));
            AddType(typeof(KladrSynchronizationResult));
            AddType(typeof(StreetSearchRequest));
            AddType(typeof(Announcement));
            AddType(typeof(AnnouncementProperties));
            AddType(typeof(AutoAdditionSettings));
            AddType(typeof(AutoAdditionSettingsItem));
            AddType(typeof(AutoAdditionType));
            AddType(typeof(OuterEconomicActivityNomenclatureCode));
            AddType(typeof(AuthCardInfo));
            AddType(typeof(AuthData));
            AddType(typeof(Card));
            AddType(typeof(DiscountCard));
            AddType(typeof(DiscountCardMode));
            AddType(typeof(DiscountCardType));
            AddType(typeof(DiscountCardWay));
            AddType(typeof(BaseCard));
            AddType(typeof(CardOperationOrderItem));
            AddType(typeof(CardPaymentItem));
            AddType(typeof(CardProcessingDevice));
            AddType(typeof(CardProcessingDriver));
            AddType(typeof(CardProcessingMapping));
            AddType(typeof(CardSystemMapping));
            AddType(typeof(CardTransaction));
            AddType(typeof(CardTransactionType));
            AddType(typeof(Cheque));
            AddType(typeof(MagnetTrackData));
            AddType(typeof(OrderBonusEvent));
            AddType(typeof(PlastekOrderItem));
            AddType(typeof(EdelweissCard));
            AddType(typeof(EdelweissCardTransaction));
            AddType(typeof(EdelweissDriver));
            AddType(typeof(EdelweissDriverSettings));
            AddType(typeof(EdelweissMapping));
            AddType(typeof(EdelweissTransaction));
            AddType(typeof(EpitomeCard));
            AddType(typeof(EpitomeCardTransaction));
            AddType(typeof(EpitomeDriver));
            AddType(typeof(EpitomeDriverSettings));
            AddType(typeof(EpitomeGuestInfoHeaders));
            AddType(typeof(EpitomeMapping));
            AddType(typeof(EpitomeTransaction));
            AddType(typeof(HoistCard));
            AddType(typeof(HoistCardTransaction));
            AddType(typeof(HoistDriver));
            AddType(typeof(HoistInquiryArgs));
            AddType(typeof(HoistInquiryResult));
            AddType(typeof(HoistMapping));
            AddType(typeof(HoistPaymentItem));
            AddType(typeof(HoistRequestArgs));
            AddType(typeof(HoistRequestResult));
            AddType(typeof(HoistResultBase));
            AddType(typeof(HoistSettings));
            AddType(typeof(HoistTransaction));
            AddType(typeof(HrsCardTransaction));
            AddType(typeof(IikoCard5DepartmentSettings));
            AddType(typeof(IikoCard5MarketingCampaign));
            AddType(typeof(IikoCard5Settings));
            AddType(typeof(IikoCard51DepartmentSettings));
            AddType(typeof(IikoCard51MarketingCampaign));
            AddType(typeof(IikoCard51PosServerLocation));
            AddType(typeof(IikoCard51Settings));
            AddType(typeof(IikoCard51Transaction));
            AddType(typeof(IikoNetDepartmentSettings));
            AddType(typeof(IikoNetSettings));
            AddType(typeof(IikoNetTransaction));
            AddType(typeof(JettonCard));
            AddType(typeof(JettonCardTransaction));
            AddType(typeof(PetrolPlusCardTransaction));
            AddType(typeof(PlastekActivateBonusResult));
            AddType(typeof(PlastekActivateBonusTask));
            AddType(typeof(PlastekActivateCardResult));
            AddType(typeof(PlastekActivateCardTask));
            AddType(typeof(PlastekActivationOrderItem));
            AddType(typeof(PlastekAuthorizationResult));
            AddType(typeof(PlastekAuthorizationTask));
            AddType(typeof(PlastekCard));
            AddType(typeof(PlastekCardInfoResult));
            AddType(typeof(PlastekCardInfoTask));
            AddType(typeof(PlastekCardReportItem));
            AddType(typeof(PlastekCardReportResult));
            AddType(typeof(PlastekCardReportTask));
            AddType(typeof(PlastekCardStatus));
            AddType(typeof(PlastekCardTransaction));
            AddType(typeof(PlastekCheque));
            AddType(typeof(PlastekCloseSessionResult));
            AddType(typeof(PlastekCloseSessionTask));
            AddType(typeof(PlastekConfirmAuthorizationResult));
            AddType(typeof(PlastekConfirmAuthorizationTask));
            AddType(typeof(PlastekDriver));
            AddType(typeof(PlastekLockCardResult));
            AddType(typeof(PlastekLockCardTask));
            AddType(typeof(PlastekMapping));
            AddType(typeof(PlastekOpenSessionResult));
            AddType(typeof(PlastekOpenSessionTask));
            AddType(typeof(PlastekOperationTaskResult));
            AddType(typeof(PlastekOperationsReportItem));
            AddType(typeof(PlastekOperationsReportResult));
            AddType(typeof(PlastekOperationsReportTask));
            AddType(typeof(PlastekPayInBonusResult));
            AddType(typeof(PlastekPayInBonusTask));
            AddType(typeof(PlastekPayInResult));
            AddType(typeof(PlastekPayInTask));
            AddType(typeof(PlastekPayOutResult));
            AddType(typeof(PlastekPayOutTask));
            AddType(typeof(PlastekPaymentItem));
            AddType(typeof(PlastekReplaceCardResult));
            AddType(typeof(PlastekReplaceCardTask));
            AddType(typeof(PlastekReplenishmentOrderItem));
            AddType(typeof(PlastekReportTaskResult));
            AddType(typeof(PlastekReturnDepositPaymentTask));
            AddType(typeof(PlastekReturnPaymentResult));
            AddType(typeof(PlastekReturnPaymentTask));
            AddType(typeof(PlastekSettings));
            AddType(typeof(PlastekSummaryReportItem));
            AddType(typeof(PlastekSummaryReportResult));
            AddType(typeof(PlastekSummaryReportTask));
            AddType(typeof(PlastekTask));
            AddType(typeof(PlastekTaskResult));
            AddType(typeof(PlastekTerminalSettings));
            AddType(typeof(PlastekUnlockCardResult));
            AddType(typeof(PlastekUnlockCardTask));
            AddType(typeof(PlastekVerifyResult));
            AddType(typeof(PlastekVerifySum));
            AddType(typeof(PlastekVoidAuthorizationTask));
            AddType(typeof(PlastekVoidTransactionResult));
            AddType(typeof(PlastekVoidTransactionTask));
            AddType(typeof(VirtualPlastekDriver));
            AddType(typeof(VirtualPlastekSettings));
            AddType(typeof(PulsarAbortOperationTask));
            AddType(typeof(PulsarCardTransaction));
            AddType(typeof(PulsarCheque));
            AddType(typeof(PulsarDriver));
            AddType(typeof(PulsarMapping));
            AddType(typeof(PulsarOperationData));
            AddType(typeof(PulsarOperationResult));
            AddType(typeof(PulsarPayOutTask));
            AddType(typeof(PulsarPaymentItem));
            AddType(typeof(PulsarSettings));
            AddType(typeof(PulsarTask));
            AddType(typeof(PulsarTerminalSettings));
            AddType(typeof(PulsarTestTask));
            AddType(typeof(PulsarUploadOperationTask));
            AddType(typeof(PulsarVerifyCheque));
            AddType(typeof(PulsarVerifyParameters));
            AddType(typeof(PulsarVerifySummaryResult));
            AddType(typeof(PulsarVerifySummaryTask));
            AddType(typeof(PulsarVerifyTask));
            AddType(typeof(PulsarVoidOperationTask));
            AddType(typeof(SbrfCardTransaction));
            AddType(typeof(SmartSaleDriver));
            AddType(typeof(TrposCardTransaction));
            AddType(typeof(TrposDriver));
            AddType(typeof(CashDrawerDevice));
            AddType(typeof(CashDrawerDeviceDriver));
            AddType(typeof(CashDrawerHolder));
            AddType(typeof(CashDrawerRegisterTask));
            AddType(typeof(CashDrawerResult));
            AddType(typeof(CheckCashDrawerTask));
            AddType(typeof(ICashDrawerCommonTask));
            AddType(typeof(OpenCashDrawerTask));
            AddType(typeof(OpenDrawerResult));
            AddType(typeof(OPOSCashDrawerDriver));
            AddType(typeof(SessionCloseInfo));
            AddType(typeof(SessionCloseParameters));
            AddType(typeof(SessionRotation));
            AddType(typeof(OrderCustomerPersistentBuffer));
            AddType(typeof(Currency));
            AddType(typeof(CurrencyEntity));
            AddType(typeof(CurrencyInfo));
            AddType(typeof(CurrencyRate));
            AddType(typeof(CurrencyRateDto));
            AddType(typeof(CurrencyRateInfo));
            AddType(typeof(CurrencyServerConstants));
            AddType(typeof(SumInCurrency));
            AddType(typeof(SumInCurrencyPerOrder));
            AddType(typeof(BlackListAddressInfo));
            AddType(typeof(BlackListInfo));
            AddType(typeof(Customer));
            AddType(typeof(CustomerEmail));
            AddType(typeof(CustomerIikoNetInfo));
            AddType(typeof(CustomerOrganizationDetailsFullAddress));
            AddType(typeof(CustomerOrganizationDetailsInfo));
            AddType(typeof(CustomerPhone));
            AddType(typeof(CustomerPublicOrganizationDetailsInfo));
            AddType(typeof(PersonalDataConsent));
            AddType(typeof(PersonalDataStatus));
            AddType(typeof(WithAnonymized));
            AddType(typeof(CustomerIdsFilterInfo));
            AddType(typeof(CustomerDisplayDevice));
            AddType(typeof(CustomerDisplayDriver));
            AddType(typeof(CustomerDisplaySettings));
            AddType(typeof(CustomerDisplayTask));
            AddType(typeof(DisplayIdleTask));
            AddType(typeof(DisplayTextTask));
            AddType(typeof(FV2029Driver));
            AddType(typeof(FV2029Settings));
            AddType(typeof(OposCustomerDisplayDriver));
            AddType(typeof(OposCustomerDisplaySettings));
            AddType(typeof(ActionOnValidationRejection));
            AddType(typeof(AutoAssignDeliveryTerminalSettings));
            AddType(typeof(Delivery));
            AddType(typeof(DeliveryAppearanceSetting));
            AddType(typeof(DeliveryAppearanceSettings));
            AddType(typeof(DeliveryAppearanceStatus));
            AddType(typeof(DeliveryCancelCause));
            AddType(typeof(DeliveryConfirmationSettings));
            AddType(typeof(DeliveryDto));
            AddType(typeof(DeliveryExternalCourierServiceData));
            AddType(typeof(DeliveryInvoiceFormat));
            AddType(typeof(DeliveryPaymentTimeOption));
            AddType(typeof(DeliveryProblem));
            AddType(typeof(DeliveryRestrictionItem));
            AddType(typeof(DeliveryRestrictions));
            AddType(typeof(DeliveryRestrictionsMode));
            AddType(typeof(DeliveryServerConstants));
            AddType(typeof(DeliverySettings));
            AddType(typeof(DeliverySettingsServiceType));
            AddType(typeof(DeliverySmsSendingEventType));
            AddType(typeof(DeliverySmsSendingMode));
            AddType(typeof(DeliverySmsSendingSetting));
            AddType(typeof(DeliverySmsSendingSettings));
            AddType(typeof(DeliveryStatus));
            AddType(typeof(DeliveryGeocodeResponse));
            AddType(typeof(DeliveryGeocodeServiceType));
            AddType(typeof(DeliveryZone));
            AddType(typeof(DeliveryZoneAddressBinding));
            AddType(typeof(DeliveryZonePoint));
            AddType(typeof(HousesRange));
            AddType(typeof(HousesRangeType));
            AddType(typeof(DeliveryHeatMapInfo));
            AddType(typeof(DeliveryHeatMapPolygonSize));
            AddType(typeof(DeliveryHeatMapReportType));
            AddType(typeof(DeliveryPolygon));
            AddType(typeof(BrdDataLoadingRequest));
            AddType(typeof(BrdDataLoadingResponse));
            AddType(typeof(TerminalDeliveryDuration));
            AddType(typeof(CourierWorkload));
            AddType(typeof(DeliveryTerminalWorkload));
            AddType(typeof(KitchenWorkload));
            AddType(typeof(AssignationAddress));
            AddType(typeof(AssignationOrderItem));
            AddType(typeof(AssignationOrderItemModifier));
            AddType(typeof(AssignationRequest));
            AddType(typeof(AssignationResponse));
            AddType(typeof(LogisticsSettings));
            AddType(typeof(LogisticsSettingsItem));
            AddType(typeof(Strategy));
            AddType(typeof(OrderErrorType));
            AddType(typeof(RequestErrorType));
            AddType(typeof(AssignCouriersToOrdersRequestDto));
            AddType(typeof(AssignCouriersToOrdersResponseDto));
            AddType(typeof(CourierComeBackTimeDto));
            AddType(typeof(CourierComeBackTimeRequestDto));
            AddType(typeof(CourierComeBackTimeResponseDto));
            AddType(typeof(CourierDto));
            AddType(typeof(LegDto));
            AddType(typeof(LogisticAddressDto));
            AddType(typeof(OrderDto));
            AddType(typeof(OrderErrorDto));
            AddType(typeof(RouteDto));
            AddType(typeof(MarketingSource));
            AddType(typeof(AbstractOrderGroupSourceInfo));
            AddType(typeof(BanquetInfo));
            AddType(typeof(CafeDeletionMethod));
            AddType(typeof(CashPaymentItem));
            AddType(typeof(ChoiceOrderItem));
            AddType(typeof(CookingCourse));
            AddType(typeof(CreditPaymentItem));
            AddType(typeof(ManualCardPaymentItem));
            AddType(typeof(MultiDiscount));
            AddType(typeof(NowriteoffDeletionMethod));
            AddType(typeof(OrderCouponInfo));
            AddType(typeof(OrderDeletionMethod));
            AddType(typeof(OrderEntry));
            AddType(typeof(OrderGroupInfo));
            AddType(typeof(OrderGroupSourceInfo));
            AddType(typeof(OrderGuest));
            AddType(typeof(OrderIncrease));
            AddType(typeof(OrderInfo));
            AddType(typeof(OrderItem));
            AddType(typeof(OrderItemStatus));
            AddType(typeof(OrderSourceInfo));
            AddType(typeof(OrderSumCorrection));
            AddType(typeof(PaymentItem));
            AddType(typeof(PaymentItemStatus));
            AddType(typeof(PriceCategoryInfo));
            AddType(typeof(RemovalType));
            AddType(typeof(ServiceOrderItem));
            AddType(typeof(SimplePaymentItem));
            AddType(typeof(SimpleServiceOrderItem));
            AddType(typeof(UserDeletionMethod));
            AddType(typeof(VoucherPaymentItem));
            AddType(typeof(WriteoffPaymentItem));
            AddType(typeof(Discount));
            AddType(typeof(DiscountCardDriver));
            AddType(typeof(DiscountCardItem));
            AddType(typeof(DiscountDevice));
            AddType(typeof(DiscountDriver));
            AddType(typeof(DiscountItem));
            AddType(typeof(DiscountItemStatus));
            AddType(typeof(DiscountPeriod));
            AddType(typeof(DiscountRights));
            AddType(typeof(DiscountServiceResult));
            AddType(typeof(DiscountType));
            AddType(typeof(ItemSaleEventDiscount));
            AddType(typeof(FlyerDiscountItem));
            AddType(typeof(FlyerDiscountType));
            AddType(typeof(LuckyTickedBaseCardInfo));
            AddType(typeof(LuckyTicketCardTransaction));
            AddType(typeof(LuckyTicketCheque));
            AddType(typeof(LuckyTicketChequeInfo));
            AddType(typeof(LuckyTicketChequeStub));
            AddType(typeof(LuckyTicketDiscountData));
            AddType(typeof(LuckyTicketDiscountInfo));
            AddType(typeof(LuckyTicketDiscountType));
            AddType(typeof(LuckyTicketDriver));
            AddType(typeof(LuckyTicketOrderData));
            AddType(typeof(LuckyTicketPaymentItemInfo));
            AddType(typeof(LuckyTicketPaymentItemStub));
            AddType(typeof(LuckyTicketPaymentMethod));
            AddType(typeof(LuckyTicketPointRule));
            AddType(typeof(LuckyTicketRuleType));
            AddType(typeof(PastOrder));
            AddType(typeof(PastOrderGroupInfo));
            AddType(typeof(PastOrderGroupSourceInfo));
            AddType(typeof(PastOrderHrsTransaction));
            AddType(typeof(PastOrderItem));
            AddType(typeof(PastOrderPayment));
            AddType(typeof(PastOrderSourceInfo));
            AddType(typeof(OrdermanSettings));
            AddType(typeof(CashPaymentType));
            AddType(typeof(ConfigurablePaymentType));
            AddType(typeof(CreditPaymentType));
            AddType(typeof(ExternalApiPaymentType));
            AddType(typeof(IikoCard51PaymentType));
            AddType(typeof(NonCashPaymentType));
            AddType(typeof(PaymentAuthorizationType));
            AddType(typeof(PaymentGroup));
            AddType(typeof(PaymentMethod));
            AddType(typeof(PaymentProcessingType));
            AddType(typeof(PaymentSystem));
            AddType(typeof(PaymentSystemNames));
            AddType(typeof(PaymentType));
            AddType(typeof(SessionFullReport));
            AddType(typeof(VoucherPaymentType));
            AddType(typeof(WriteoffPaymentType));
            AddType(typeof(PluginSettings));
            AddType(typeof(PowerDeviceChannelStateResult));
            AddType(typeof(PowerDeviceRegisterTask));
            AddType(typeof(SetChannelStateTask));
            AddType(typeof(AlposAf01Driver));
            AddType(typeof(ArtSoftFiscalRegisterDriver));
            AddType(typeof(AtolDriver));
            AddType(typeof(AtolPrinterDriver));
            AddType(typeof(AzimuthFnPrimDriver));
            AddType(typeof(AzimuthPrimDriver));
            AddType(typeof(BP21PrinterDriver));
            AddType(typeof(BP41PrinterDriver));
            AddType(typeof(BrioFisFm32Driver));
            AddType(typeof(BtpR580IIDriver));
            AddType(typeof(CashServerDriver));
            AddType(typeof(CheckboxDriver));
            AddType(typeof(CheckwayDriver));
            AddType(typeof(CheckwayProduct));
            AddType(typeof(ChequePrinterDriver));
            AddType(typeof(ChequePrinterNullDriver));
            AddType(typeof(ChequePrinterStub));
            AddType(typeof(CitizenCTSxxxDriver));
            AddType(typeof(ComstarDriver));
            AddType(typeof(ConnectionInterface));
            AddType(typeof(DatecsDriver));
            AddType(typeof(EmpirijaDriver));
            AddType(typeof(EpsonT88Driver));
            AddType(typeof(EpsonTMU220Driver));
            AddType(typeof(EpsonTMU295Driver));
            AddType(typeof(EscPosPrinterDriver));
            AddType(typeof(ExternalCashRegisterDriver));
            AddType(typeof(HrsDriver));
            AddType(typeof(IcsDriver));
            AddType(typeof(IksSpsDriver));
            AddType(typeof(Maria301Driver));
            AddType(typeof(Mercury130Driver));
            AddType(typeof(MercuryDriver));
            AddType(typeof(MstarTKDriver));
            AddType(typeof(OPOSPrinterDriver));
            AddType(typeof(OPOSRegisterDriver));
            AddType(typeof(PilotFP410KDriver));
            AddType(typeof(PiritDriver));
            AddType(typeof(PiritFnDriver));
            AddType(typeof(PortWriterDriver));
            AddType(typeof(PortWriterDriverTask));
            AddType(typeof(PoscenterDriver));
            AddType(typeof(PosiflexDriver));
            AddType(typeof(PosnetDriver));
            AddType(typeof(PosnetThermalDriver));
            AddType(typeof(PrimFRDriver));
            AddType(typeof(PrintItemInfo));
            AddType(typeof(PrintOrientation));
            AddType(typeof(PrinterDriver));
            AddType(typeof(PrinterNullDriver));
            AddType(typeof(PrinterOpenDrawerTask));
            AddType(typeof(PulsePrinterDriver));
            AddType(typeof(RestaurantPrintOption));
            AddType(typeof(SMxxxDriver));
            AddType(typeof(SP298Driver));
            AddType(typeof(SPrintTM200Driver));
            AddType(typeof(SPrintTM200SimpleDriver));
            AddType(typeof(SPxxxDriver));
            AddType(typeof(SerialPortFlowControl));
            AddType(typeof(Shtrih600Driver));
            AddType(typeof(Shtrih700Driver));
            AddType(typeof(ShtrihDriver));
            AddType(typeof(ShtrihFRFDriver));
            AddType(typeof(SparkDriver));
            AddType(typeof(SparkFnDriver));
            AddType(typeof(TSPxxxDriver));
            AddType(typeof(TaxationSystem));
            AddType(typeof(TsplPrinterDriver));
            AddType(typeof(UnisystemDriver));
            AddType(typeof(WindowsPrinterDriver));
            AddType(typeof(ZebraEplDriver));
            AddType(typeof(CashRegisterResult));
            AddType(typeof(CashRegisterTask));
            AddType(typeof(ChequeCardPayment));
            AddType(typeof(ChequePrintSettings));
            AddType(typeof(ChequeSale));
            AddType(typeof(ChequeTemplate));
            AddType(typeof(ChequeType));
            AddType(typeof(PrintTextTask));
            AddType(typeof(XReportTask));
            AddType(typeof(ChequeTemplateUpdateDto));
            AddType(typeof(BooleanReportParameter));
            AddType(typeof(CounteragentsReportParameter));
            AddType(typeof(CounteragentsReportParameterKind));
            AddType(typeof(CustomEnumReportParameter));
            AddType(typeof(CustomEnumReportParameterValue));
            AddType(typeof(DateTimePeriodReportParameter));
            AddType(typeof(DateTimePeriodReportParameterValue));
            AddType(typeof(FrontReport));
            AddType(typeof(NumberReportParameter));
            AddType(typeof(NumberReportParameterKind));
            AddType(typeof(ReportCategory));
            AddType(typeof(ReportParameter));
            AddType(typeof(ReportParametersPage));
            AddType(typeof(ReportRequirements));
            AddType(typeof(ReportSource));
            AddType(typeof(ReportType));
            AddType(typeof(StringReportParameter));
            AddType(typeof(TerminalsScopeReportParameter));
            AddType(typeof(TerminalsScopeReportParameterValue));
            AddType(typeof(StiReportTemplate));
            AddType(typeof(StiReportType));
            AddType(typeof(PlastekProblemOp));
            AddType(typeof(ProblemOpType));
            AddType(typeof(AbstractDocumentProcessor));
            AddType(typeof(AbstractSalesDocumentProcessor));
            AddType(typeof(AbstractSalesProcessor));
            AddType(typeof(AbstractStoreDocumentProcessor));
            AddType(typeof(AbstractStorePairDocumentProcessor));
            AddType(typeof(AbstractWriteoffDocumentProcessor));
            AddType(typeof(DocumentProcessor));
            AddType(typeof(IncomingInventoryDocumentProcessor));
            AddType(typeof(IncomingInvoiceProcessor));
            AddType(typeof(IncomingReturnedInvoiceProcessor));
            AddType(typeof(IncomingServiceDocumentProcessor));
            AddType(typeof(InternalTransferProcessor));
            AddType(typeof(ItemOperation));
            AddType(typeof(OutgoingInvoiceDocumentProcessor));
            AddType(typeof(PartiallyProcessableDocument));
            AddType(typeof(ProductionDocumentProcessor));
            AddType(typeof(SalesDocumentProcessor));
            AddType(typeof(TransformationDocumentProcessor));
            AddType(typeof(WriteoffDocumentProcessor));
            AddType(typeof(Region));
            AddType(typeof(Reserve));
            AddType(typeof(ReserveCancelCause));
            AddType(typeof(ReserveDeliveryDto));
            AddType(typeof(ReserveDto));
            AddType(typeof(ReserveStatus));
            AddType(typeof(ClearPluTask));
            AddType(typeof(GetWeightTask));
            AddType(typeof(PluStatus));
            AddType(typeof(ScaleDevice));
            AddType(typeof(ScaleDeviceDriver));
            AddType(typeof(ScalePluResult));
            AddType(typeof(ScaleRegisterTask));
            AddType(typeof(ScaleWeightResult));
            AddType(typeof(SendPluItem));
            AddType(typeof(SendPluItemResult));
            AddType(typeof(SendPluResult));
            AddType(typeof(SendPluTask));
            AddType(typeof(CASScaleDriver));
            AddType(typeof(DigiScaleDriver));
            AddType(typeof(ExternalScaleDriver));
            AddType(typeof(MassaScaleDriver));
            AddType(typeof(NciEcrScaleDriver));
            AddType(typeof(ScaleNullDriver));
            AddType(typeof(ShtrihPrintScaleDriver));
            AddType(typeof(ShtrihScaleDriver));
            AddType(typeof(CafeSessionCanDeleteOrdersOutOfSessionSetup));
            AddType(typeof(CafeSessionCloseEncashmentSetup));
            AddType(typeof(CafeSessionCloseOpenOrdersSetup));
            AddType(typeof(CafeSessionClosePersonalSessionsVerificationSetup));
            AddType(typeof(CafeSessionClosePromisedDeliveryTimeSetup));
            AddType(typeof(CafeSessionCloseRecalculationSetup));
            AddType(typeof(CafeSessionCloseShutdownSetup));
            AddType(typeof(CafeSessionOpenOnAuthSetup));
            AddType(typeof(CafeSessionOpenPayInSetup));
            AddType(typeof(CafeSessionSettings));
            AddType(typeof(CashRegisterCloseEncashmentSetup));
            AddType(typeof(PreliminaryCookedProductsSettings));
            AddType(typeof(QuickLabels));
            AddType(typeof(LabelPosition));
            AddType(typeof(ReservesSettings));
            AddType(typeof(CustomerOpinion));
            AddType(typeof(SurveyItem));
            AddType(typeof(SurveyItemResponse));
            AddType(typeof(SurveyType));
            AddType(typeof(ServerUpgradeReport));
            AddType(typeof(ServerUpgradeReportItem));
            AddType(typeof(TerminalCountsInfo));
            AddType(typeof(TerminalExchangeState));
            AddType(typeof(TerminalUpgradeState));
            AddType(typeof(TerminalUpgradeStatus));
            AddType(typeof(FileDownloadBatch));
            AddType(typeof(FileDownloadItem));
            AddType(typeof(ServerUpgradeSettings));
            AddType(typeof(ServerUpgradeState));
            AddType(typeof(ServerUpgradeStatus));
            AddType(typeof(OverrideTaxCategory));
            AddType(typeof(WaiterTeam));
            AddType(typeof(WaiterTeamAssignments));
            AddType(typeof(ByValueSaveOrUpdateEntity));
            AddType(typeof(CafeSessionCloseInfoContainer));
            AddType(typeof(EmployeeAttendanceCreator));
            AddType(typeof(FrontBalanceSetter));
            AddType(typeof(FrontBalances));
            AddType(typeof(FrontBalancesKey));
            AddType(typeof(ObjectCreatorEntity));
            AddType(typeof(ObjectType));
            AddType(typeof(OrderSalesDataContainer));
            AddType(typeof(StopListItem));
            AddType(typeof(FrontEntitiesBackup));
            AddType(typeof(FrontEntitiesBackupRequest));
            AddType(typeof(EmailSendingRequest));
            AddType(typeof(EmailSendingResultDto));
            AddType(typeof(SmsSendingRequest));
            AddType(typeof(SmsSendingResultDto));
            AddType(typeof(CheckExchange));
            AddType(typeof(IikoBizRegistrationDto));
            AddType(typeof(IikoBizRegistrationStatus));
            AddType(typeof(ConnectionFailReason));
            AddType(typeof(ConnectionTest));
            AddType(typeof(ConnectionTestDto));
            AddType(typeof(ConnectionTestType));
            AddType(typeof(AmountPercent));
            AddType(typeof(CalculationType));
            AddType(typeof(CompensationType));
            AddType(typeof(DistributionType));
            AddType(typeof(IncentiveProgram));
            AddType(typeof(IncentiveType));
            AddType(typeof(RevenueCalculationType));
            AddType(typeof(RevenueKpiType));
            AddType(typeof(SearchInfo));
            AddType(typeof(SearchType));
            AddType(typeof(SessionRevenueEntry));
            AddType(typeof(TimeConstraintType));
            AddType(typeof(ProgramDescription));
            AddType(typeof(GetConnectionResult));
            AddType(typeof(IikoBizRegistrationInfo));
            AddType(typeof(LicenseConnectionRequest));
            AddType(typeof(LicenseConnectionResponse));
            AddType(typeof(LicenseConnectionResultType));
            AddType(typeof(LicenseInfoResult));
            AddType(typeof(LicenseStatus));
            AddType(typeof(LicensingState));
            AddType(typeof(RegionalFeatureId));
            AddType(typeof(OnlineLicensingResponse));
            AddType(typeof(OnlineLicensingState));
            AddType(typeof(OnlineLicensingStatus));
            AddType(typeof(LocalizedMessage));
            AddType(typeof(RestoLocale));
            AddType(typeof(ProxiedRequestDto));
            AddType(typeof(ProxiedResponseDto));
            AddType(typeof(KeepAliveMode));
            AddType(typeof(NatTraversalMethod));
            AddType(typeof(PbxAuthorizationSettings));
            AddType(typeof(PbxRmsClient));
            AddType(typeof(PbxSettings));
            AddType(typeof(TapiLinesFilterType));
            AddType(typeof(TapiSettings));
            AddType(typeof(TransportProtocol));
            AddType(typeof(VoipApplication));
            AddType(typeof(Permission));
            AddType(typeof(PermissionState));
            AddType(typeof(SimplePermissionOwner));
            AddType(typeof(PrintCallback));
            AddType(typeof(PushSubscriberConfiguration));
            AddType(typeof(PushSubscriptionEntity));
            AddType(typeof(PushSubscriptionField));
            AddType(typeof(ChainConnectionSettings));
            AddType(typeof(ClassDescription));
            AddType(typeof(ForcedReplicationClass));
            AddType(typeof(RemoteServerSettings));
            AddType(typeof(ReplicationConfig));
            AddType(typeof(ReplicationConfigDepartmentSpecific));
            AddType(typeof(ReplicationEvent));
            AddType(typeof(ReplicationMode));
            AddType(typeof(ReplicationRequest));
            AddType(typeof(ReplicationResult));
            AddType(typeof(ReplicationSchedule));
            AddType(typeof(ReplicationState));
            AddType(typeof(ReplicationStateForReserveCopy));
            AddType(typeof(ReplicationStateSettings));
            AddType(typeof(RevisionConfig));
            AddType(typeof(ServerInstance));
            AddType(typeof(ServerNode));
            AddType(typeof(ServerNodeInfo));
            AddType(typeof(SourceTargetPair));
            AddType(typeof(UocReplicationState));
            AddType(typeof(BackRegistrationResult));
            AddType(typeof(RemoteServerStatus));
            AddType(typeof(ReplicationMasterServerResult));
            AddType(typeof(ReplicationResultWithException));
            AddType(typeof(SlaveRegistrationStatus));
            AddType(typeof(SlaveServerRegistrationResult));
            AddType(typeof(CheckReplicationResponse));
            AddType(typeof(CheckReplicationStatus));
            AddType(typeof(RPCHeaders));
            AddType(typeof(ServiceResultStatus));
            AddType(typeof(SpecialArg));
            AddType(typeof(CafeSessionSalesData));
            AddType(typeof(OrderSalesData));
            AddType(typeof(ReferenceData));
            AddType(typeof(ServerState));
            AddType(typeof(SystemEvent));
            AddType(typeof(SystemEventType));
            AddType(typeof(HandshakeSettings));
            AddType(typeof(ColumnType));
            AddType(typeof(DataSet));
            AddType(typeof(DataSetColumn));
            AddType(typeof(DataSetRow));
            AddType(typeof(DateInfo));
            AddType(typeof(DateInterval));
            AddType(typeof(DayTime));
            AddType(typeof(EvaluableDecimalValue));
            AddType(typeof(RGBColor));
            AddType(typeof(SimpleSwitchable<>));
            AddType(typeof(UserInterval));
            AddType(typeof(CalcStrategy));
            AddType(typeof(CustomSchedule));
            AddType(typeof(CustomScheduleType));
            AddType(typeof(LocalTimeInterval));
            AddType(typeof(PeriodScheduleInfo));
            AddType(typeof(PeriodScheduleItem));
            AddType(typeof(ShiftScheduleInfo));
            AddType(typeof(WeekDays));
            AddType(typeof(WeekScheduleInfo));
            AddType(typeof(ValidationWarning));
            AddType(typeof(CheckResult));
            AddType(typeof(LicenseCheckResult));
            AddType(typeof(ProblemSeverity));
            AddType(typeof(SystemDiagnosticsResult));
            AddType(typeof(NotificationConfiguration));
            AddType(typeof(BanquetDeliveryDishesReportInfo));
            AddType(typeof(LauncherServletAuthFailureReasonCode));
            AddType(typeof(LauncherServletResponseHttpHeaders));
            AddType(typeof(OrderAndSessionDto));
        }
    }
}

// ReSharper restore PartialTypeWithSinglePart
// ReSharper restore ConvertToAutoProperty
