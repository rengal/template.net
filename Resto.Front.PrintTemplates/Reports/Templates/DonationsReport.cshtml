@using System
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@using Resto.Front.PrintTemplates.Reports.TemplateModels
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 054 Отчет по чаевым *@
@inherits Resto.Front.PrintTemplates.Reports.TemplateBase
@{
    if (Model.CafeSession == null)
    {
        <doc><center>@Resources.CafeSessionIsClosed</center></doc>
        return;
    }
    FillData();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);

    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }

    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" />

    if (Model.CafeSession != null)
    {
        <pair left="@Resources.HeadCashRegisterShift" right="@Model.CafeSession.Number" />
        <pair left="@Resources.HeadCashRegisterShiftOpened" right="@FormatLongDateTime(Model.CafeSession.OpenTime)" />
    }

    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth="" />
            <column align="right" />
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table>
}

@helper Footer()
{
    <np />
    <np />
}

@helper Body()
{
    foreach (var donation in allDonations)
    {
        <np/>
        <pair fit="left" left="@Resources.CreditPaymentTypesSummaryName:" right="@donation.Key.DonationType.Name" />
        <pair fit="left" left="@Resources.PaymentType:" right="@donation.Key.PaymentType.Name" />
        <line/>
        <table>
            <columns>
                <column autowidth=""/>
                <column formatter="split"/>
                <column align="right" autowidth=""/>
            </columns>
            <cells>
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.OrderColumn</ct>
                <ct>@Resources.Sum</ct>
                <linecell/>
                @foreach (var info in donation.Value)
                {
                    <ct>@FormatTime(info.Date)</ct>
                    <ct>@string.Format(Resources.OrderNumberFormat, info.OrderNumber)</ct>
                    if (donation.Key.Currency == null)
                    {
                        <ct>@FormatPrice(info.DonationSum)</ct>
                    }
                    else
                    {
                        <ct>@string.Format("{0} {1}", FormatPrice(info.DonationSum), donation.Key.Currency.ShortNameForGui)</ct>
                    }
                }
                <linecell/>
                <c colspan="2">@Resources.Total</c>
                @if (donation.Key.Currency == null)
                {
                    <ct>@FormatPrice(donation.Value.Sum(i => i.DonationSum))</ct>
                }
                else
                {
                    <ct>@string.Format("{0} {1}", FormatPrice(donation.Value.Sum(i => i.DonationSum)), donation.Key.Currency.ShortNameForGui)</ct>
                }
            </cells>
        </table>
    }
    if (allDonations.Count > 1)
    {
        <np/>
        <line/>
        if (allDonations.Any(d => d.Key.Currency != null))
        {
            var totalStr = string.Format("{0} {1}", FormatPrice(allDonations.Where(d => d.Key.Currency == null).SelectMany(d => d.Value.Select(i => i.DonationSum)).Sum()), Model.CafeSetup.ShortCurrencyName);
            
            <pair left="@Resources.SectionTotal" right="@totalStr" />

            foreach (var currency in allDonations.Where(d => d.Key.Currency != null).GroupBy(d => d.Key.Currency))
            {
                <right>@string.Format("{0} {1}", FormatPrice(currency.SelectMany(d => d.Value.Select(i => i.DonationSum)).Sum()), currency.Key.ShortNameForGui)</right>
            }
        }
        else
        {
            <pair left="@Resources.SectionTotal" right="@FormatPrice(allDonations.SelectMany(d => d.Value.Select(i => i.DonationSum)).Sum())" />
        }
    }
}

@functions
{
    private List<KeyValuePair<DonationTypeAndPaymentType, List<DonationAndOrderInfo>>> allDonations = null;

    /// <summary>
    /// Заполнение данных
    /// </summary>
    private void FillData()
    {
        var session = Model.CafeSession;
        Debug.Assert(session != null);

        allDonations = Model.Transactions.GetOrderDonationTransactionsBySession(session)
            .Where(tr => tr.Order != null)
            .Select(tr => new KeyValuePair<DonationTypeAndPaymentType, DonationAndOrderInfo>(
                new DonationTypeAndPaymentType(tr.DonationType, tr.PaymentType, tr.CurrencyInfo),
                new DonationAndOrderInfo(tr.Order.Number, tr.CurrencyInfo == null ? tr.Sum : tr.CurrencyInfo.Sum, tr.Date)))
            .GroupBy(kvp => kvp.Key, kvp => kvp.Value)
            .ToDictionary(
                group => group.Key,
                group => group.OrderBy(o => o.Date).ToList())
            .OrderBy(kvp => kvp.Key.DonationType.Name)
            .ThenBy(kvp => !(kvp.Key.PaymentType is ICashPaymentType))
            .ThenBy(kvp => kvp.Key.Currency != null)
            .ThenBy(kvp => kvp.Key.PaymentType.Name)
            .ToList();
    }

    public class DonationAndOrderInfo
    {
        private readonly int orderNumber;
        private readonly decimal donationSum;
        private readonly DateTime date;

        public DonationAndOrderInfo(int num, decimal sum, DateTime date)
        {
            orderNumber = num;
            donationSum = sum;
            this.date = date;
        }

        public int OrderNumber
        {
            get { return orderNumber; }
        }

        public decimal DonationSum
        {
            get { return donationSum; }
        }

        public DateTime Date
        {
            get { return date; }
        }
    }

    public class DonationTypeAndPaymentType : IEquatable<DonationTypeAndPaymentType>
    {
        private readonly IDonationType donationType;
        private readonly IPaymentType paymentType;
        private readonly IAdditionalCurrency currency;

        public DonationTypeAndPaymentType(IDonationType donationType, IPaymentType paymentType, ICurrencyInfo currencyInfo)
        {
            if (donationType == null)
                throw new ArgumentNullException("donationType");
            if (paymentType == null)
                throw new ArgumentNullException("paymentType");

            this.donationType = donationType;
            this.paymentType = paymentType;
            this.currency = currencyInfo == null ? null : currencyInfo.Currency;
        }

        public IDonationType DonationType
        {
            get { return donationType; }
        }

        public IPaymentType PaymentType
        {
            get { return paymentType; }
        }

        public IAdditionalCurrency Currency
        {
            get { return currency; }
        }

        public bool Equals(DonationTypeAndPaymentType other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;
            return Equals(donationType, other.donationType) && Equals(paymentType, other.paymentType) && Equals(currency, other.currency);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj is DonationTypeAndPaymentType && Equals((DonationTypeAndPaymentType)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (donationType.GetHashCode() * 397) ^ (paymentType.GetHashCode() * 397) ^ (currency != null ? currency.GetHashCode() * 397 : 0);
            }
        }

        public static bool operator ==(DonationTypeAndPaymentType left, DonationTypeAndPaymentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DonationTypeAndPaymentType left, DonationTypeAndPaymentType right)
        {
            return !Equals(left, right);
        }
    }
}
