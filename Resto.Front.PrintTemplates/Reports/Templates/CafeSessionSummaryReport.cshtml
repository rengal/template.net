@using System
@using System.Collections.Generic
@using System.Linq
@using Resto.Front.PrintTemplates.Reports
@using Resto.Front.PrintTemplates.Reports.TemplateModels
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 048 Итого по смене *@
@inherits TemplateBase
@{
    if (Model.CafeSession == null)
    {
        <doc><center>@Resources.CafeSessionIsClosed</center></doc>
        return;
    }
    FillData();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);

    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }

    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" />

    if (Model.CafeSession != null)
    {
        <pair left="@Resources.HeadCashRegisterShift" right="@Model.CafeSession.Number" />
        <pair left="@Resources.HeadCashRegisterShiftOpened" right="@FormatLongDateTime(Model.CafeSession.OpenTime)" />
    }

    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth="" />
            <column align="right" />
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table>
}

@helper Body()
{
    @PaymentTypeGroupsByCloseTypes()
    @SessionStatistics()
    @CloseTypesByPaymentTypes()
}

@helper PaymentTypeGroupsByCloseTypes()
{
    if (!allPayments.Any())
    {
        return;
    }

    var writeoffPaymentsSum = allPayments.Where(x => x.PaymentType.Group == PaymentGroup.Writeoff).Sum(x => x.Sum);
    var writeoffsTotal = deletedItemsSum + writeoffPaymentsSum;

    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <linecell symbols="=" />
            @foreach (var closeTypeGroup in allPayments.Where(x => x.PaymentType.Group != PaymentGroup.Writeoff).GroupBy(x => x.CloseType))
            {
                <c colspan="2">@GetOrderCloseTypeSummaryName(closeTypeGroup.Key)</c>
                <linecell symbols="-" />
                foreach (var paymentTypeGroup in closeTypeGroup.GroupBy(x => x.PaymentType.Group))
                {
                    <ct><whitespace-preserve>@string.Format(" {0}", paymentTypeGroup.Key.GetLocalName())</whitespace-preserve></ct>
                    <ct>@FormatPrice(paymentTypeGroup.Sum(x => x.Sum))</ct>
                }
                <linecell symbols="-" />
                <ct>@string.Format(Resources.PaymentTypeGroupSummary, GetOrderCloseTypeSummaryName(closeTypeGroup.Key))</ct>
                <ct>@FormatPrice(closeTypeGroup.Sum(x => x.Sum))</ct>
                <linecell symbols=" " />
            }
            <c colspan="2">@Resources.Writeoffs</c>
            <linecell symbols="-" />
            <ct>
                <whitespace-preserve>@Resources.PaymentTypeGroupWriteoffName</whitespace-preserve>
            </ct>
            <ct>@FormatPrice(writeoffPaymentsSum)</ct>
            <ct>
                <whitespace-preserve>@Resources.DeletedItems</whitespace-preserve>
            </ct>
            <ct>@FormatPrice(deletedItemsSum)</ct>
            <linecell symbols="-" />
            <ct>@string.Format(Resources.PaymentTypeGroupSummary, Resources.Writeoffs)</ct>
            <ct>@FormatPrice(writeoffsTotal)</ct>
            <linecell symbols=" " />
        </cells>
    </table>
}

@helper SessionStatistics()
{
    var session = Model.CafeSession;
    var transactionsBySession = Model.Transactions.GetOrderPaymentTransactionsBySession(session).ToList();
    var payInOutTransactions = Model.Transactions.GetPayInOutFiscalTransactionsBySession(session).ToList();
    var payCollectionTransactions = payInOutTransactions.Where(tr => tr.TransactionType == PayInOutTransactionType.PayCollection).ToList();

    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <ct>@Resources.OpenOrdersTitle</ct>
            <ct>@FormatPrice(openOrdersSum)</ct>
            <linecell symbols=" " />

            <c colspan="2">@Resources.CafeSessionSummaryTitle</c>
            <linecell symbols="-" />
            <ct>@Resources.SessionOpeningCashSum</ct>
            <ct>@FormatPrice(session.StartCash)</ct>
            <linecell symbols="-" />
            <c colspan="2">@Resources.CafeSessionStatisticsTitle</c>

            <ct>@Resources.CafeSessionStatisticsCashSaleTitle</ct>
            <ct>
                @(FormatPrice(transactionsBySession
                        .Where(tr => !(tr is IOrderPrepayTransaction) && !(tr is IOrderPrepayClosedTransaction) &&
                            tr.TransactionType == OrderPaymentTransactionType.Cash && tr.Sum > 0)
                        .Sum(tr => tr.Sum)))
            </ct>
            <ct>@Resources.CafeSessionStatisticsCashStornoTitle</ct>
            <ct>
                @FormatPrice(transactionsBySession
                    .Where(tr => !(tr is IOrderPrepayTransaction)
                                 && !(tr is IOrderPrepayClosedTransaction)
                                 && (tr.TransactionType == OrderPaymentTransactionType.Cash || (tr.TransactionType == OrderPaymentTransactionType.RevenueReturn && tr is ICashPaymentTransaction))
                                 && tr.Sum < 0)
                    .Sum(tr => tr.Sum))
            </ct>
            <ct>@Resources.CafeSessionStatisticsCashPrepayTitle</ct>
            <ct>
                @(FormatPrice(transactionsBySession.OfType<IOrderPrepayTransaction>()
                        .Where(x => x is ICashPaymentTransaction && x.TransactionType == OrderPaymentTransactionType.Prepay)
                        .Sum(x => x.Sum)))
            </ct>
            <ct>@Resources.CafeSessionStatisticsCashPrepayReturnTitle</ct>
            <ct>
                @(FormatPrice(transactionsBySession.OfType<IOrderPrepayTransaction>()
                              .Where(x => x is ICashPaymentTransaction && x.TransactionType == OrderPaymentTransactionType.PrepayReturn)
                              .Sum(x => x.Sum)))
            </ct>
            <ct>@Resources.CafeSessionStatisticsPayInTitle</ct>
            <ct>@(FormatPrice(payInOutTransactions.Where(x => x.TransactionType == PayInOutTransactionType.PayIn).Sum(x => x.Sum)))</ct>
            <ct>@Resources.CafeSessionStatisticsPayOutTitle</ct>
            <ct>@(FormatPrice(payInOutTransactions.Where(x => x.TransactionType == PayInOutTransactionType.PayOut).Sum(x => x.Sum)))</ct>
            <ct>@Resources.CafeSessionStatisticsCurrentCash</ct>
            <ct>@FormatPrice(session.CalculatedBookCash - payCollectionTransactions.Sum(x => x.Sum))</ct>

            @if (payCollectionTransactions.Any())
            {
                <linecell symbols=" " />
                <ct>@Resources.CafeSessionStatisticsPayCollectionTitle</ct>
                <ct>@FormatPrice(payCollectionTransactions.Sum(x => x.Sum))</ct>
                <ct>@Resources.CafeSessionStatisticsCashAfterPayCollection</ct>
                <ct>@FormatPrice(session.CalculatedBookCash)</ct>
            }
        </cells>
    </table>
}

@helper CloseTypesByPaymentTypes()
{
    if (!allPayments.Any())
    {
        return;
    }

    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <linecell symbols="=" />
            <c colspan="3">@Resources.CloseTypesByPaymentTypesHeader</c>
            <linecell symbols="=" />
            @foreach (var paymentTypeGroup in allPayments.GroupBy(x => x.PaymentType.Group))
            {
                <linecell symbols=" " />
                <c colspan="3">@paymentTypeGroup.Key.GetLocalName()</c>
                <linecell symbols="-" />
                <ct>@Resources.OrderCloseType</ct>
                <ct>@Resources.Cheques</ct>
                <ct>@Resources.SumTitle</ct>
                <linecell symbols="-" />
                foreach (var paymentType in paymentTypeGroup.GroupBy(x => x.PaymentType))
                {
                    <c colspan="3">@paymentType.Key.Name</c>
                    foreach (var closeType in paymentType.GroupBy(x => x.CloseType))
                    {
                        <ct>@GetOrderCloseTypeName(closeType.Key)</ct>
                        <ct>@closeType.Count()</ct>
                        <ct>@FormatPrice(closeType.Sum(x => x.Sum))</ct>
                    }
                    <linecell symbols="-" />
                    <ct>@string.Format(Resources.PaymentTypeGroupSummary, paymentType.Key.Name)</ct>
                    <ct>@paymentType.Count()</ct>
                    <ct>@FormatPrice(paymentType.Sum(x => x.Sum))</ct>
                    <linecell symbols=" " />
                }
                <linecell symbols="-" />
                <ct>@string.Format(Resources.PaymentTypeGroupSummary, paymentTypeGroup.Key.GetLocalName())</ct>
                <ct>@paymentTypeGroup.Count()</ct>
                <ct>@FormatPrice(paymentTypeGroup.Sum(x => x.Sum))</ct>
            }
        </cells>
    </table>
}

@helper Footer()
{
    <np />
    <center>
        @string.Format(Resources.AllSumsInFormat, Model.CafeSetup.CurrencyName)
    </center>
    <np />
}

@functions
{
    /// <summary>
    /// Все оплаты заказов, включая предоплаты
    /// </summary>
    private List<ClosedOrderPayment> allPayments;

    /// <summary>
    /// Сумма удаленных со списанием блюд
    /// </summary>
    private decimal deletedItemsSum;

    /// <summary>
    /// Сумма открытых заказов, не связанных с неначавшимися резервами
    /// </summary>
    private decimal openOrdersSum;

    /// <summary>
    /// Заполнение данных
    /// </summary>
    private void FillData()
    {
        var session = Model.CafeSession;

        var allTransactions = Model.Transactions.GetOrderPaymentTransactionsBySession(session).ToList();
        // получить все транзакции оплаты, сгруппированные по заказам
        var transactions = allTransactions
            .Where(tr => tr.Order != null)
            .GroupBy(tr => tr.Order)
            .ToDictionary(g => g.Key, g => (ICollection<IOrderPaymentTransaction>)g.ToArray());

        var revenueReturntransactions = allTransactions
            .Where(tr => tr.TransactionType == OrderPaymentTransactionType.RevenueReturn).ToArray();

        // Транзакции предоплат, внесённых в заказ до его разделения на 2ФР на другом фронте
        // (при делении заказа на другом фронте, отличном от фронта, где была внесена предоплата, транзакции предоплат не перепривязываются к новым заказам).
        var withoutOrderPrepayTransactions = allTransactions
            .Where(tr => tr.Order == null)
            .Where(tr => tr.TransactionType == OrderPaymentTransactionType.Prepay || tr.TransactionType == OrderPaymentTransactionType.PrepayReturn)
            .ToArray();

        allPayments = session.ClosedOrders
            .Except(transactions.Keys)
            .SelectMany(order => BuildClosedOrderPaymentList(order, Array.Empty<IOrderPaymentTransaction>()))
            .Concat(transactions.SelectMany(tr => BuildClosedOrderPaymentList(tr.Key, tr.Value)))
            .Concat(withoutOrderPrepayTransactions.Select(tr => new ClosedOrderPayment(tr)))
            .Concat(revenueReturntransactions.Select(tr => new ClosedOrderPayment(tr)))
            .ToList();

        deletedItemsSum = Model.Events.GetItemSaleEventsBySession(session)
            .Where(evnt => evnt.DeletedWithWriteoff.HasValue && evnt.DeletedWithWriteoff.Value && evnt.RemovalType != null && evnt.RemovalType.Account != null)
            .Sum(evnt => evnt.Sum);

        openOrdersSum = Model.Entities.GetAllNotDeletedNotBoundToNonStartedReservesOrdersBySession(session)
            .Where(order => order.Status == OrderStatus.New || order.Status == OrderStatus.Bill || order.Status == OrderStatus.Closing)
            .Sum(order => order.GetResultSum());
    }

    private static IEnumerable<ClosedOrderPayment> BuildClosedOrderPaymentList(IOrder order, ICollection<IOrderPaymentTransaction> cachedTransactions)
    {
        var closedOrderPayments = new List<ClosedOrderPayment>();

        var transactions = cachedTransactions.Where(transaction => !(transaction is IOrderPrepayTransaction) && !(transaction is IOrderPrepayClosedTransaction));

        // добавить транзакции оплаты заказа
        closedOrderPayments.AddRange(transactions.Select(payment => new ClosedOrderPayment(payment, order)));

        if (order.CloseInfo != null && order.CloseInfo.WriteoffItem != null)
        {
            // создать фейковую транзакцию для типа оплаты "Без выручки" и добавить в список
            closedOrderPayments.Add(new ClosedOrderPayment(order.CloseInfo.WriteoffItem, false, order));

            if (order.Status == OrderStatus.Deleted)
            {
                // создать фейковую транзакцию для сторнированного заказа (показывать с отриц.суммами) с типом оплаты "Без выручки" и добавить в список
                closedOrderPayments.Add(new ClosedOrderPayment(order.CloseInfo.WriteoffItem, true, order));
            }
        }

        var prepays = cachedTransactions.OfType<IOrderPrepayTransaction>().Where(x => x.TransactionType == OrderPaymentTransactionType.Prepay);
        closedOrderPayments.AddRange(prepays.Select(ppt => new ClosedOrderPayment(ppt)));
        var returnPrepays = cachedTransactions.OfType<IOrderPrepayTransaction>().Where(x => x.TransactionType == OrderPaymentTransactionType.PrepayReturn);
        closedOrderPayments.AddRange(returnPrepays.Select(ppt => new ClosedOrderPayment(ppt)));

        return closedOrderPayments;
    }

    private sealed class ClosedOrderPayment
    {
        public readonly IPaymentType PaymentType;
        public readonly OrderCloseType CloseType;
        public readonly decimal Sum;

        public ClosedOrderPayment(IOrderPaymentTransaction paymentTransaction, IOrder order = null)
            : this(paymentTransaction.PaymentType, paymentTransaction.TransactionType, paymentTransaction.Sum, order)
        { }

        public ClosedOrderPayment(IWriteoffPaymentItem paymentItem, bool isViewOrderAsStorned, IOrder order)
            : this(paymentItem.Type, OrderPaymentTransactionType.OnTheHouse, isViewOrderAsStorned ? -paymentItem.Sum : paymentItem.Sum, order)
        { }

        private ClosedOrderPayment(IPaymentType paymentType, OrderPaymentTransactionType transactionType, decimal sum, IOrder order)
        {
            PaymentType = paymentType;
            Sum = sum;
            // если заказ сторнирован и показывается с отрицательной суммой, присваиваем OrderCloseType = Storno
            // все потому что для сторнирования не предусмотрен отдельный тип транзакции
            // поэтому различаем сторнирование от продажи с помощью знаков суммы транзакции
            CloseType = order != null && order.Status == OrderStatus.Deleted
                ? Sum > 0 ? OrderCloseType.Sale : OrderCloseType.Storno
                : ParseCloseType(transactionType);
        }
    }

    private static OrderCloseType ParseCloseType(OrderPaymentTransactionType transactionType)
    {
        switch (transactionType)
        {
            case OrderPaymentTransactionType.Cash:
            case OrderPaymentTransactionType.Card:
            case OrderPaymentTransactionType.Credit:
            case OrderPaymentTransactionType.OnTheHouse:
                return OrderCloseType.Sale;
            case OrderPaymentTransactionType.RevenueReturn:
                return OrderCloseType.Storno;
            case OrderPaymentTransactionType.Prepay:
                return OrderCloseType.Prepay;
            case OrderPaymentTransactionType.PrepayReturn:
                return OrderCloseType.PrepayReturn;
            default:
                throw new ArgumentOutOfRangeException("transactionType", transactionType, "Transaction type is not supported");
        }
    }

    private enum OrderCloseType
    {
        /// <summary>
        /// Продажа
        /// </summary>
        Sale,
        /// <summary>
        /// Возврат заказа
        /// </summary>
        Storno,
        /// <summary>
        /// Внесение предоплаты
        /// </summary>
        Prepay,
        /// <summary>
        /// Возврат предоплаты
        /// </summary>
        PrepayReturn
    };

    /// <summary>
    /// Возвращает название операции (для заголовка, в единственном числе)
    /// </summary>
    private static string GetOrderCloseTypeName(OrderCloseType closeType)
    {
        switch (closeType)
        {
            case OrderCloseType.Sale:
                return Resources.OrderCloseTypeSell;
            case OrderCloseType.Prepay:
                return Resources.OrderCloseTypePrepay;
            case OrderCloseType.Storno:
                return Resources.OrderCloseTypeStorno;
            case OrderCloseType.PrepayReturn:
                return Resources.OrderCloseTypePrepayReturn;
            default:
                throw new ArgumentOutOfRangeException("closeType");
        }
    }

    /// <summary>
    /// Возвращает название операции (для итогов, во множественном числе)
    /// </summary>
    private static string GetOrderCloseTypeSummaryName(OrderCloseType closeType)
    {
        switch (closeType)
        {
            case OrderCloseType.Sale:
                return Resources.OrderCloseTypeSummarySell;
            case OrderCloseType.Prepay:
                return Resources.OrderCloseTypeSummaryPrepay;
            case OrderCloseType.Storno:
                return Resources.OrderCloseTypeSummaryStorno;
            case OrderCloseType.PrepayReturn:
                return Resources.OrderCloseTypeSummaryPrepayReturn;
            default:
                throw new ArgumentOutOfRangeException("closeType");
        }
    }
}
