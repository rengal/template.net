<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SelectProductAndShowAsemblyChartButtonText" xml:space="preserve">
    <value>Тех карта</value>
    <comment>Текст на кнопке, по нажатию на которую вызывается диалог выбора блюда, а затем показ технологической карты выбранного блюда.</comment>
  </data>
  <data name="ShowProductAssemblyChartButtonText" xml:space="preserve">
    <value>Тех. карта</value>
    <comment>Текст на кнопке, по нажатию на которую вызывается показ технологической карты блюда.</comment>
  </data>
  <data name="ServerUnavailableMessage" xml:space="preserve">
    <value>Нет связи с сервером.
Просмотр технологической карты невозможен.</value>
  </data>
  <data name="AssemblyChartPageName" xml:space="preserve">
    <value>Технологическая карта</value>
  </data>
  <data name="PhotoPageName" xml:space="preserve">
    <value>Фото</value>
  </data>
  <data name="RetrievingAssemblyChartFromServer" xml:space="preserve">
    <value>Получение технологической карты с сервера...</value>
  </data>
  <data name="RetrievingAssemblyChartFromServerFailedMessage" xml:space="preserve">
    <value>При получении технологической карты с сервера произошла ошибка.</value>
  </data>
  <data name="AssemblyChartForProductNotExistsMessageTemplate" xml:space="preserve">
    <value>У блюда «{0}» нет технологической карты.</value>
    <comment>В сообщение подставляется название блюда.</comment>
  </data>
  <data name="SummaryLabelText" xml:space="preserve">
    <value>Итого:</value>
  </data>
  <data name="WeightOfFinishedDishTemplate" xml:space="preserve">
    <value>Вес готового блюда (изделия) в расчете на {0:0.000} {1}: {2:0.0000} кг.</value>
    <comment>
            0 — норма закладки, число, количество в единицах измерения блюда.
            1 — название единицы измерения блюда.
            2 — вес готового блюда, число.
            Пример: «Вес готового блюда (изделия) в расчете на 1,000 порц: 0,2450 кг.»
        </comment>
  </data>
  <data name="ProductOutputTemplate" xml:space="preserve">
    <value>Суммарный выход продукта: {0}.</value>
    <comment>0 — суммарный выход продукта, например, «240/5».</comment>
  </data>
  <data name="ExpirationPeriodSectionTitle" xml:space="preserve">
    <value>Срок хранения:</value>
  </data>
  <data name="CookingTimeSectionTitle" xml:space="preserve">
    <value>Норматив времени приготовления:</value>
  </data>
  <data name="OrganolepticSectionTitle" xml:space="preserve">
    <value>Органолептические показатели качества:</value>
  </data>
  <data name="TechnologyDescriptionSectionTitle" xml:space="preserve">
    <value>Технология приготовления:</value>
  </data>
  <data name="AppearanceSectionTitle" xml:space="preserve">
    <value>Требования к оформлению, подаче и реализации:</value>
  </data>
  <data name="ExpirationPeriodTemplate" xml:space="preserve">
    <value>{0} ч. {1:d2} мин.</value>
  </data>
  <data name="CookingTimeTemplate" xml:space="preserve">
    <value>{0} мин. {1:d2} сек.</value>
  </data>
  <data name="NormalCookingTimeStandartName" xml:space="preserve">
    <value>Норма</value>
    <comment>Название норматива времени приготовления «Норма».</comment>
  </data>
  <data name="PeakCookingTimeStandartName" xml:space="preserve">
    <value>Пик</value>
    <comment>Название норматива времени приготовления «Пик».</comment>
  </data>
  <data name="ItemsTableItemLineNumberColumnHeaderText" xml:space="preserve">
    <value>#</value>
    <comment>Заголовок колонки с порядковым номером</comment>
  </data>
  <data name="ItemsTableItemProductNameColumnHeaderText" xml:space="preserve">
    <value>Наименование продукта</value>
  </data>
  <data name="ItemsTableItemMeasureUnitColumnHeaderText" xml:space="preserve">
    <value>Ед. изм.</value>
  </data>
  <data name="ItemsTableItemGrossAmountColumnHeaderText" xml:space="preserve">
    <value>Брутто
в ед. изм.</value>
  </data>
  <data name="ItemsTableItemGrossWeightColumnHeaderText" xml:space="preserve">
    <value>Вес брутто
(кг)</value>
  </data>
  <data name="ItemsTableItemNetWeightColumnHeaderText" xml:space="preserve">
    <value>Вес нетто
(кг)</value>
  </data>
  <data name="ItemsTableItemOutNetWeightColumnHeaderText" xml:space="preserve">
    <value>Вес готового
продукта (кг)</value>
  </data>
  <data name="NotPhotoText" xml:space="preserve">
    <value>Нет фотографии</value>
  </data>
</root>