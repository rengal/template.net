@using System
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@using Resto.Front.PrintTemplates.Reports
@using Resto.Front.PrintTemplates.Reports.TemplateModels
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 038 Расчет сотрудникам *@
@inherits TemplateBase
@{
    if (Model.CafeSession == null)
    {
        <doc><center>@Resources.CafeSessionIsClosed</center></doc>
        return;
    }
    settings = Model.ReportSettings;
    FillData();
    ClearZeroDebts();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);

    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }

    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" />

    if (Model.CafeSession != null)
    {
        <pair left="@Resources.HeadCashRegisterShift" right="@Model.CafeSession.Number" />
        <pair left="@Resources.HeadCashRegisterShiftOpened" right="@FormatLongDateTime(Model.CafeSession.OpenTime)" />
    }

    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth="" />
            <column align="right" />
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table>
}

@helper Body()
{
    @TableForWaiterDebts()
}

@helper Footer()
{
    <np />
    <center>
        @string.Format(Resources.AllSumsInFormat, Model.CafeSetup.CurrencyName)
    </center>
    <np />
}

@helper TableForWaiterDebts()
{
    if (userInfos.Count == 1)
    {
        if (userInfos.First().Value.InitialDebtSum == 0 &&
            userInfos.First().Value.SalesSum == 0 &&
            userInfos.First().Value.PayInfos.Count == 0)
        {
            <np />
            <center>@string.Format(Resources.EmployeeHasNoDebt, userInfos.First().Key.Name)</center>
            return;
        }
        if (settings.GetBool("OnlyNonZeroDebt") && userInfos.First().Value.DebtSum == 0)
        {
            <np />
            <center>@string.Format(Resources.EmployeeHasZeroDebt, userInfos.First().Key.Name)</center>
            return;
        }
    }

    foreach (var userInfo in userInfos)
    {
        var debt = settings.GetBool("DetailByOrders")
            ? userInfo.Value.InitialDebtSum
            : userInfo.Value.InitialDebtSum + userInfo.Value.SalesSum;

        <table>
            <columns>
                <column autowidth="" />
                <column formatter="split" />
                <column align="right" autowidth="" />
                <column align="right" autowidth="" />
            </columns>
            <cells>
                <c colspan="4"><np /></c>
                <c colspan="4">@string.Format("{0}: {1}", Resources.EmployeeTitle, userInfo.Key.Name)</c>

                <linecell symbols="-" />
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.Type</ct>
                <ct>@Resources.Sum</ct>
                <ct>@Resources.Debt</ct>
                <linecell symbols="-" />

                @if (userInfo.Value.InitialDebtSum != 0m)
                {
                    <ct />
                    <ct>@Resources.InitialDebt</ct>
                    <ct />
                    <ct>@FormatPrice(userInfo.Value.InitialDebtSum)</ct>
                }
                @if (!settings.GetBool("DetailByOrders"))
                {
                    <ct />
                    <ct>@Resources.Sales</ct>
                    <ct />
                    <ct>@FormatPrice(userInfo.Value.SalesSum)</ct>
                }

                @foreach (var payInfo in userInfo.Value.PayInfos.OrderBy(pi => pi.Time))
                {
                    debt += payInfo.Sum;
                    <ct>@FormatTime(payInfo.Time)</ct>
                    <ct>@payInfo.Text</ct>
                    <ct>@FormatPrice(payInfo.Sum)</ct>
                    <ct>@FormatPrice(debt)</ct>

                    if (payInfo.AuthUser != null)
                    {
                        <ct />
                        <c colspan="3">@string.Format(Resources.AuthUserFormat, payInfo.AuthUser.Name)</c>
                    }
                }
                <linecell symbols="-" />

                @if (settings.GetBool("DetailByOrders"))
                {
                    <c colspan="3">@string.Format(Resources.TotalForCategoryPattern, Resources.Sales)</c>
                    <ct>@FormatPrice(userInfo.Value.SalesSum)</ct>
                    <c colspan="3">@string.Format(Resources.TotalForCategoryPattern, Resources.ChangeMoney)</c>
                    <ct>@FormatPrice(userInfo.Value.ChangeMoneySum)</ct>
                }
                <c colspan="3">@string.Format(Resources.TotalForCategoryPattern, Resources.Debt)</c>
                <ct>@FormatPrice(userInfo.Value.DebtSum)</ct>
            </cells>
        </table>
    }

    if (userInfos.Count > 1)
    {
        <np />
        <line symbols="-" />
        <pair left="@Resources.TotalSales" right="@FormatPrice(userInfos.Sum(info => info.Value.SalesSum))" />
        <pair left="@Resources.TotalDebts" right="@FormatPrice(userInfos.Sum(info => info.Value.DebtSum))" />
    }
}

@functions
{
    private ISettings settings;
    private Dictionary<IUser, UserInfo> userInfos;

    private void FillData()
    {
        var session = Model.CafeSession;
        Debug.Assert(session != null);

        // заполняем словарь доступными сотрудниками.
        userInfos = settings.GetCounteragents("Employees").ToDictionary(user => user, user => new UserInfo());

        var orderPaymentTransactions = Model.Transactions.GetOrderPaymentTransactionsBySession(session).ToList();
        var payInOutEvents = Model.Events.GetPayInOutEventsBySession(session).ToList();

        // добаляем информацию о продажах за счет официанта.
        orderPaymentTransactions.Where(tr => tr.IsWaiterDebt && !tr.IsDeliveryOrder && userInfos.ContainsKey(tr.Cashier))
            .ForEach(tr =>
            {
                if (settings.GetBool("DetailByOrders"))
                    userInfos[tr.Cashier].PayInfos.Add(new PayInfo(tr.Date, tr.Sum, string.Format(Resources.OrderNumberFormat, tr.Order != null ? tr.Order.Number.ToString() : string.Empty), null));

                userInfos[tr.Cashier].SalesSum += tr.Sum;
                userInfos[tr.Cashier].DebtSum += tr.Sum;
            });

        // добаляем информацию о продажах за счет курьера.
        orderPaymentTransactions.Where(tr => tr.IsWaiterDebt && tr.IsDeliveryOrder)
            .ForEach(tr =>
            {
                var payInOutEvent = payInOutEvents.FirstOrDefault(evt => evt.OrderId == tr.OrderId && userInfos.ContainsKey(evt.CounterAgent));
                if (payInOutEvent != null)
                {
                    var user = payInOutEvent.CounterAgent;
                    if (settings.GetBool("DetailByOrders"))
                        userInfos[user].PayInfos.Add(new PayInfo(payInOutEvent.Date, tr.Sum, string.Format(Resources.DeliveryNumberFormat, tr.Order != null ? tr.Order.Number.ToString() : string.Empty), null));

                    userInfos[user].SalesSum += tr.Sum;
                    userInfos[user].DebtSum += tr.Sum;
                }
            });

        // добавляем информацию о внесения/изъятиях сотрудника.
        payInOutEvents.Where(evt => evt.IsWaiterDebt && userInfos.ContainsKey(evt.CounterAgent))
            .ForEach(evt =>
            {
                userInfos[evt.CounterAgent].PayInfos.Add(new PayInfo(evt.Date, -evt.PaymentSum, evt.PayInOutType.Name, evt.Auth != null ? evt.Auth.User : null));

                //Деньги на сдачу.
                if (evt.IsPayOutForCourierChange)
                    userInfos[evt.CounterAgent].ChangeMoneySum += -evt.PaymentSum;

                userInfos[evt.CounterAgent].DebtSum += -evt.PaymentSum;
            });

        Debug.Assert(Model.CashRegister != null);
        // получаем текущую задолженность официантов из инструмента подсчета задолженностей
        var currentDebtsFromService = Model.Entities.GetAllWaiterDebtItemsByCashRegister(Model.CashRegister)
            .Where(item => userInfos.ContainsKey(item.User))
            .ToList();

        // для каждого официанта рассчитываем его начальную задолженность
        userInfos
            .ForEach(info =>
            {
                var userWithCurDebt = currentDebtsFromService.SingleOrDefault(item => item.User.Equals(info.Key));
                if (userWithCurDebt == null)
                    info.Value.InitialDebtSum = 0 - info.Value.DebtSum;
                else
                    info.Value.InitialDebtSum = userWithCurDebt.Debt - info.Value.DebtSum;

                info.Value.DebtSum += info.Value.InitialDebtSum;
            });
    }

    private void ClearZeroDebts()
    {
        if (userInfos.Count <= 1)
            return;

        if (settings.GetBool("OnlyNonZeroDebt"))
            Remove(userInfos, info => info.Value.DebtSum == 0);
        else
            Remove(userInfos, info => info.Value.InitialDebtSum == 0 && info.Value.SalesSum == 0 && info.Value.PayInfos.Count == 0);
    }

    private sealed class UserInfo
    {
        public decimal InitialDebtSum { get; set; }
        public decimal SalesSum { get; set; }
        public decimal DebtSum { get; set; }
        public decimal ChangeMoneySum { get; set; }
        public List<PayInfo> PayInfos { get; private set; }

        public UserInfo()
        {
            PayInfos = new List<PayInfo>();
        }
    }

    private sealed class PayInfo
    {
        private readonly DateTime time;
        private readonly decimal sum;
        private readonly string text;
        private readonly IUser authUser;

        public PayInfo(DateTime time, decimal sum, string text, IUser authUser)
        {
            this.time = time;
            this.text = text;
            this.sum = sum;
            this.authUser = authUser;
        }

        public DateTime Time
        {
            get { return time; }
        }

        public decimal Sum
        {
            get { return sum; }
        }

        public string Text
        {
            get { return text; }
        }

        public IUser AuthUser
        {
            get { return authUser; }
        }
    }

    private static void Remove<TKey, TValue>(Dictionary<TKey, TValue> dic, Func<KeyValuePair<TKey, TValue>, bool> predicate)
    {
        foreach (var key in dic.Where(predicate).Select(pair => pair.Key).ToList())
        {
            dic.Remove(key);
        }
    }
}
