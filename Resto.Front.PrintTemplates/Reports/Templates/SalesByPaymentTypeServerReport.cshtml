@using System
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions
@using Resto.Front.PrintTemplates.Reports
@using Resto.Front.PrintTemplates.Reports.OlapReports
@using Resto.Front.PrintTemplates.Reports.TemplateModels
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 016 Чеки по типам оплаты *@
@* Парный к 047-му отчет по серверным данным *@
@inherits TemplateBase
@{
    settings = Model.ReportSettings;

    FillData();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);

    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }

    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" />

    <pair left="@Resources.From" right="@FormatDate(settings.GetPeriodBegin())" />
    <pair left="@Resources.To" right="@FormatDate(settings.GetPeriodEnd())" />

    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth="" />
            <column align="right" />
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table>
}

@helper Body()
{
    var payments = closedOrdersSource.Values.SelectMany(order => order.Payments).ToList();

    @GetCashSalesMarkup(payments.Where(p => p.PaymentGroup == PaymentGroup.Cash).ToList())
    @GetCardSalesMarkup(payments.Where(p => p.PaymentGroup == PaymentGroup.Card).ToList())
    @GetCreditSalesMarkup(payments.Where(p => p.PaymentGroup == PaymentGroup.NonCash && p.PaymentType.IsCreditPaymentType()).ToList())
    @GetWriteoffSalesMarkup(payments.Where(p => p.PaymentGroup == PaymentGroup.Writeoff).ToList())
    @GetNonCashSalesMarkup(payments.Where(p => p.PaymentGroup == PaymentGroup.NonCash && !p.PaymentType.IsCreditPaymentType()).ToList())
}

@* Вернуть заголовок подраздела *@
@helper GetSalesHeaderMarkup(string paymentTypeGroupTitle)
{
    <table>
        <columns>
            <column formatter="split" />
        </columns>
        <cells>
            <linecell symbols="=" />
            <ct>@paymentTypeGroupTitle</ct>
        </cells>
    </table>
}

@* Возвращает итоги по типам платежей внутри группы типов платежей (например, для группы платежей по банковским картам: MasterCard, Visa и т.п.) *@
@helper GetPaymentTypesSummary(IEnumerable<ClosedOrderPayment> closedPayments, string paymentTypesSummaryName)
{
    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <linecell symbols="-" />
            <ct>@paymentTypesSummaryName</ct>
            <ct>@Resources.Cheques</ct>
            <ct>@Resources.Sum</ct>
            <linecell symbols="-" />
            @foreach (var group in closedPayments.GroupBy(x => x.PaymentTypeName))
            {
                <ct>@group.Key</ct>
                <ct>@group.Count()</ct>
                <ct>@FormatPrice(group.Sum(x => x.Sum))</ct>
            }
        </cells>
    </table>
}

@* Возвращает итоги по типам операций *@
@helper GetOperationTypesSummary(List<ClosedOrderPayment> closedPayments, string operationTypeSummaryName)
{
    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <linecell symbols="-" />
            <c>@Resources.OrderCloseType</c>
            <ct>@Resources.Cheques</ct>
            <ct>@Resources.Sum</ct>
            <linecell symbols="-" />
            @foreach (var group in closedPayments.GroupBy(x => x.CloseType))
            {
                <ct>@GetOrderCloseTypeSummaryName(group.Key)</ct>
                <ct>@group.Count()</ct>
                <ct>@FormatPrice(group.Sum(x => x.Sum))</ct>
            }
            <linecell symbols="-" />
            <ct>@string.Format(Resources.PaymentTypeGroupSummary, operationTypeSummaryName)</ct>
            <ct>@closedPayments.Count</ct>
            <ct>@FormatPrice(closedPayments.Sum(order => order.Sum))</ct>
        </cells>
    </table>
}

@* Возвращает итоги по контрагентам *@
@helper GetCreditUsersSummary(IEnumerable<ClosedOrderPayment> closedPayments)
{
    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <linecell symbols="-" />
            <ct>@Resources.CreditUsersSummaryName</ct>
            <ct>@Resources.Cheques</ct>
            <ct>@Resources.Sum</ct>
            <linecell symbols="-" />
            @foreach (var group in closedPayments.GroupBy(x => x.CreditUserName))
            {
                <ct>@group.Key</ct>
                <ct>@group.Count()</ct>
                <ct>@FormatPrice(group.Sum(x => x.Sum))</ct>
            }
        </cells>
    </table>
}

@* Создаёт разметку для подраздела "Продажи за наличные" *@
@helper GetCashSalesMarkup(List<ClosedOrderPayment> closedPayments)
{
    @GetSalesHeaderMarkup(Resources.PaymentTypeGroupCashTitle)

    foreach (var closedPaymentsGroup in closedPayments.GroupBy(x => x.Timestamp.Date))
    {
        <table>
            <columns>
                <column autowidth="" />
                <column formatter="split" />
                <column formatter="split" />
                <column align="right" autowidth="" />
            </columns>
            <cells>
                <linecell symbols="-" />
                <c colspan="4">@closedPaymentsGroup.Key.Date.ToShortDateString()</c>
                <linecell symbols="-" />
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.OrderAndTableNumbersTitle</ct>
                <ct>@Resources.WaiterColumn</ct>
                <ct>@Resources.SumTitle</ct>
                <linecell symbols="-" />

                @foreach (var closedPayment in closedPaymentsGroup.OrderBy(x => x.Timestamp))
                {
                    <ct>@FormatTime(closedPayment.Timestamp)</ct>
                    <ct>@string.Format(Resources.OrderAndTableNumbersFormat, closedPayment.Order.Number, closedPayment.Order.TableNumber)</ct>
                    switch (closedPayment.CloseType)
                    {
                        case OrderCloseType.Sale:
                        {
                            <ct>@closedPayment.Order.WaiterName</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @DiscountsLines(closedPayment.Order.Discounts)
                            @CombinedPaymentsLines(closedPayment)
                            break;
                        }
                        case OrderCloseType.Storno:
                        {
                            <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @CombinedPaymentsLines(closedPayment)
                            @AuthUserNameLine(closedPayment.AuthUserName)
                            break;
                        }
                        case OrderCloseType.Prepay:
                        {
                            <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @CombinedPaymentsLines(closedPayment)
                            @CashierNameLine(closedPayment)
                            break;
                        }
                        case OrderCloseType.PrepayReturn:
                        {
                            <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @CombinedPaymentsLines(closedPayment)
                            @AuthUserNameLine(closedPayment.AuthUserName)
                            break;
                        }
                        default:
                            throw new NotSupportedException();
                    }
                }
            </cells>
        </table>
    }

    @GetOperationTypesSummary(closedPayments, Resources.PaymentTypeGroupCashSummaryName)
}

@* Создаёт разметку для подраздела "Продажи по банковским картам" *@
@helper GetCardSalesMarkup(List<ClosedOrderPayment> closedPayments)
{
    @GetSalesHeaderMarkup(Resources.PaymentTypeGroupCardTitle)

    foreach (var closedPaymentsGroup in closedPayments.GroupBy(x => x.Timestamp.Date))
    {
        <table>
            <columns>
                <column autowidth="" />
                <column formatter="split" />
                <column formatter="split" />
                <column align="right" autowidth="" />
            </columns>
            <cells>
                <linecell symbols="-" />
                <c colspan="4">@closedPaymentsGroup.Key.Date.ToShortDateString()</c>
                <linecell symbols="-" />
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.OrderAndTableNumbersTitle</ct>
                <ct>@Resources.WaiterColumn</ct>
                <ct>@Resources.SumTitle</ct>
                <linecell symbols="-" />

                @foreach (var closedPayment in closedPaymentsGroup.OrderBy(x => x.Timestamp))
                {
                    <ct>@FormatTime(closedPayment.Timestamp)</ct>
                    <ct>@string.Format(Resources.OrderAndTableNumbersFormat, closedPayment.Order.Number, closedPayment.Order.TableNumber)</ct>
                    switch (closedPayment.CloseType)
                    {
                        case OrderCloseType.Sale:
                        {
                            <ct>@closedPayment.Order.WaiterName</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @DiscountsLines(closedPayment.Order.Discounts)
                            @CombinedPaymentsLines(closedPayment)
                            @CardNameLine(closedPayment.PaymentTypeName, closedPayment.CardNumber)
                            @CashierNameLine(closedPayment)
                            break;
                        }
                        case OrderCloseType.Storno:
                        {
                            <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @CombinedPaymentsLines(closedPayment)
                            @AuthUserNameLine(closedPayment.AuthUserName)
                            @CardNameLine(closedPayment.PaymentTypeName, closedPayment.CardNumber)
                            break;
                        }
                        case OrderCloseType.Prepay:
                        {
                            <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @CombinedPaymentsLines(closedPayment)
                            @CardNameLine(closedPayment.PaymentTypeName, closedPayment.CardNumber)
                            @CashierNameLine(closedPayment)
                            break;
                        }
                        case OrderCloseType.PrepayReturn:
                        {
                            <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                            <ct>@FormatPrice(closedPayment.Sum)</ct>
                            @CombinedPaymentsLines(closedPayment)
                            @AuthUserNameLine(closedPayment.AuthUserName)
                            @CardNameLine(closedPayment.PaymentTypeName, closedPayment.CardNumber)
                            break;
                        }
                        default:
                            throw new NotSupportedException();
                    }
                }
            </cells>
        </table>
    }

    @GetPaymentTypesSummary(closedPayments, Resources.CardPaymentType)
    @GetOperationTypesSummary(closedPayments, Resources.PaymentTypeGroupCardSummaryName)
}

@* Создаёт разметку для подраздела "Продажи за счёт заведения" ("Без выручки") *@
@helper GetWriteoffSalesMarkup(List<ClosedOrderPayment> closedPayments)
{
    @GetSalesHeaderMarkup(Resources.PaymentTypeGroupWriteoffTitle)

    foreach (var closedPaymentsGroup in closedPayments.GroupBy(x => x.Timestamp.Date))
    {
        <table>
            <columns>
                <column autowidth="" />
                <column formatter="split" />
                <column formatter="split" />
                <column align="right" autowidth="" />
            </columns>
            <cells>
                <linecell symbols="-" />
                <c colspan="4">@closedPaymentsGroup.Key.Date.ToShortDateString()</c>
                <linecell symbols="-" />
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.OrderAndTableNumbersTitle</ct>
                <ct>@Resources.WaiterColumn</ct>
                <ct>@Resources.SumTitle</ct>

                @foreach (var ordersGroup in closedPaymentsGroup.GroupBy(x => x.PaymentTypeName))
                {
                    <linecell symbols="-" />
                    <c colspan="4">@ordersGroup.Key</c>
                    <linecell symbols="-" />

                    foreach (var closedPayment in ordersGroup.OrderBy(x => x.Timestamp))
                    {
                        <ct>@FormatTime(closedPayment.Timestamp)</ct>
                        <ct>@string.Format(Resources.OrderAndTableNumbersFormat, closedPayment.Order.Number, closedPayment.Order.TableNumber)</ct>
                        switch (closedPayment.CloseType)
                        {
                            case OrderCloseType.Sale:
                            {
                                <ct>@closedPayment.Order.WaiterName</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                
                                foreach (var item in closedPayment.Order.Items)
                                {
                                    <c colspan="3">@string.Format(Resources.ItemAmountAndNameFormat, FormatAmount(item.Amount), item.Name)</c>
                                    <ct>@FormatPrice(item.Sum)</ct>
                                }
                                
                                <c colspan="4">
                                    <whitespace-preserve>@string.Format(Resources.PaymentTypeAccountName, GetWriteoffPaymentTypeAccountName(closedPayment.PaymentType))</whitespace-preserve>
                                </c>
                    
                                @DiscountsLines(closedPayment.Order.Discounts)
                                @CashierNameLine(closedPayment)

                                if (!string.IsNullOrEmpty(closedPayment.WriteoffReason))
                                {
                                    <c colspan="4">
                                        <whitespace-preserve>@string.Format(Resources.WriteoffReasonFormat, closedPayment.WriteoffReason)</whitespace-preserve>
                                    </c>
                                }
                                break;
                            }
                            case OrderCloseType.Storno:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CashierNameLine(closedPayment)
                                break;
                            }
                            // предоплат и их возврата с типом оплаты "без выручки" не существует!
                            default:
                                throw new NotSupportedException();
                        }
                    }
                }
            </cells>
        </table>
    }

    @GetPaymentTypesSummary(closedPayments, Resources.WriteoffPaymentTypesSummaryName)
    @GetOperationTypesSummary(closedPayments, Resources.PaymentTypeGroupWriteoffSummaryName)
}

@* Создаёт разметку для подраздела "Продажи в кредит" *@
@helper GetCreditSalesMarkup(List<ClosedOrderPayment> closedPayments)
{
    @GetSalesHeaderMarkup(Resources.PaymentTypeGroupCreditTitle)

    foreach (var closedPaymentsGroup in closedPayments.GroupBy(x => x.Timestamp.Date))
    {
        <table>
            <columns>
                <column autowidth="" />
                <column formatter="split" />
                <column formatter="split" />
                <column align="right" autowidth="" />
            </columns>
            <cells>
                <linecell symbols="-" />
                <c colspan="4">@closedPaymentsGroup.Key.Date.ToShortDateString()</c>
                <linecell symbols="-" />
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.OrderAndTableNumbersTitle</ct>
                <ct>@Resources.WaiterColumn</ct>
                <ct>@Resources.SumTitle</ct>

                @foreach (var ordersGroup in closedPayments.GroupBy(x => x.CreditUserName))
                {
                    <linecell symbols="-" />
                    <c colspan="4">
                        @(string.Format(Resources.CreditUserNameFormat, ordersGroup.Key)
                              + ordersGroup.Select(og => og.CreditUserMaskedCardNumber).FirstOrDefault(s => !string.IsNullOrEmpty(s)))
                    </c>
                    <linecell symbols="-" />

                    foreach (var closedPayment in ordersGroup.OrderBy(x => x.Timestamp))
                    {
                        <ct>@FormatTime(closedPayment.Timestamp)</ct>
                        <ct>@string.Format(Resources.OrderAndTableNumbersFormat, closedPayment.Order.Number, closedPayment.Order.TableNumber)</ct>
                        switch (closedPayment.CloseType)
                        {
                            case OrderCloseType.Sale:
                            {
                                <ct>@closedPayment.Order.WaiterName</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                foreach (var item in closedPayment.Order.Items)
                                {
                                    <c colspan="3">@string.Format(Resources.ItemAmountAndNameFormat, FormatAmount(item.Amount), item.Name)</c>
                                    <ct>@FormatPrice(item.Sum)</ct>
                                }
                                <c colspan="4">
                                    <whitespace-preserve>@string.Format(Resources.CreditPaymentTypeNameFormat, closedPayment.PaymentTypeName)</whitespace-preserve>
                                </c>
                                @DiscountsLines(closedPayment.Order.Discounts)
                                @CombinedPaymentsLines(closedPayment)
                                @CashierNameLine(closedPayment)
                                break;
                            }
                            case OrderCloseType.Storno:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CombinedPaymentsLines(closedPayment)
                                @AuthUserNameLine(closedPayment.AuthUserName)
                                break;
                            }
                            case OrderCloseType.Prepay:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CombinedPaymentsLines(closedPayment)
                                @CashierNameLine(closedPayment)
                                break;
                            }
                            case OrderCloseType.PrepayReturn:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CombinedPaymentsLines(closedPayment)
                                @AuthUserNameLine(closedPayment.AuthUserName)
                                break;
                            }
                            default:
                                throw new NotSupportedException();
                        }
                    }
                }
            </cells>
        </table>
    }

    @GetCreditUsersSummary(closedPayments)
    @GetPaymentTypesSummary(closedPayments, Resources.CreditPaymentTypesSummaryName)
    @GetOperationTypesSummary(closedPayments, Resources.PaymentTypeGroupCreditSummaryName)
}

@* Создаёт разметку для подраздела "Продажи по безналичным типам оплат" *@
@helper GetNonCashSalesMarkup(List<ClosedOrderPayment> closedPayments)
{
    @GetSalesHeaderMarkup(Resources.PaymentTypeGroupNonCashTitle)

    foreach (var closedPaymentsGroup in closedPayments.GroupBy(x => x.Timestamp.Date))
    {
        <table>
            <columns>
                <column autowidth="" />
                <column formatter="split" />
                <column formatter="split" />
                <column align="right" autowidth="" />
            </columns>
            <cells>
                <linecell symbols="-" />
                <c colspan="4">@closedPaymentsGroup.Key.Date.ToShortDateString()</c>
                <linecell symbols="-" />
                <ct>@Resources.TimeColumn</ct>
                <ct>@Resources.OrderAndTableNumbersTitle</ct>
                <ct>@Resources.WaiterColumn</ct>
                <ct>@Resources.SumTitle</ct>

                @foreach (var ordersGroup in closedPayments.GroupBy(x => x.PaymentTypeName))
                {
                    <linecell symbols="-" />
                    <c colspan="4">@ordersGroup.Key</c>
                    <linecell symbols="-" />

                    foreach (var closedPayment in ordersGroup.OrderBy(x => x.Timestamp))
                    {
                        <ct>@FormatTime(closedPayment.Timestamp)</ct>
                        <ct>@string.Format(Resources.OrderAndTableNumbersFormat, closedPayment.Order.Number, closedPayment.Order.TableNumber)</ct>
                        switch (closedPayment.CloseType)
                        {
                            case OrderCloseType.Sale:
                            {
                                <ct>@closedPayment.Order.WaiterName</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                foreach (var item in closedPayment.Order.Items)
                                {
                                    <c colspan="3">@string.Format(Resources.ItemAmountAndNameFormat, FormatAmount(item.Amount), item.Name)</c>
                                    <ct>@FormatPrice(item.Sum)</ct>
                                }
                                @DiscountsLines(closedPayment.Order.Discounts)
                                @CombinedPaymentsLines(closedPayment)
                                @CashierNameLine(closedPayment)
                                break;
                            }
                            case OrderCloseType.Storno:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CombinedPaymentsLines(closedPayment)
                                @AuthUserNameLine(closedPayment.AuthUserName)
                                break;
                            }
                            case OrderCloseType.Prepay:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CombinedPaymentsLines(closedPayment)
                                @CashierNameLine(closedPayment)
                                break;
                            }
                            case OrderCloseType.PrepayReturn:
                            {
                                <ct>@GetOrderCloseTypeName(closedPayment.CloseType)</ct>
                                <ct>@FormatPrice(closedPayment.Sum)</ct>
                                @CombinedPaymentsLines(closedPayment)
                                @AuthUserNameLine(closedPayment.AuthUserName)
                                break;
                            }
                            default:
                                throw new NotSupportedException();
                        }
                    }
                }
            </cells>
        </table>
    }

    @GetPaymentTypesSummary(closedPayments, Resources.NonCashPaymentTypesSummaryName)
    @GetOperationTypesSummary(closedPayments, Resources.PaymentTypeGroupNonCashSummaryName)
}

@* Показать строку о скидке/надбавке *@
@helper DiscountsLines(IEnumerable<ClosedOrderDiscountItem> discountItems)
{
    foreach (var discountItem in discountItems.OrderByDescending(d => d.DiscountPercent))
    {
        if (discountItem.DiscountPercent == 0)
        {
            return;
        }
        <c colspan="2"><whitespace-preserve>@string.Format(Resources.SumCorrectionFormat, discountItem.DiscountTypesNames, Math.Abs(discountItem.DiscountPercent))</whitespace-preserve></c>
        if (!string.IsNullOrEmpty(discountItem.GuestCardTracks))
        {
            <c colspan="2"><whitespace-preserve>@string.Format("{0}: {1} ({2})", Resources.Guests, discountItem.GuestNames, discountItem.GuestCardTracks)</whitespace-preserve></c>
        }
        else
        {
            <c colspan="2"><np /></c>
        }
    }
}

@* Для заказа, оплаченного несколькими типами оплат, показать комбинированные с указанным типом оплаты *@
@helper CombinedPaymentsLines(ClosedOrderPayment closedPayment)
{
    foreach (var combinedPayment in closedPayment.Order.Payments.Where(x => x != closedPayment && x.PaymentTypeName != closedPayment.PaymentTypeName).Select(x => x.PaymentTypeName).Distinct())
    {
        <c colspan="4"><whitespace-preserve>@string.Format(Resources.CombinedPaymentTypeNameFormat, combinedPayment)</whitespace-preserve></c>
    }
}

@* Вставить строку с именем пользователя, авторизовавшего операцию *@
@helper AuthUserNameLine(string authUserName)
{
    if (string.IsNullOrEmpty(authUserName))
    {
        return;
    }
    <c colspan="4"><whitespace-preserve>@(string.Format(Resources.AuthUserFormat, authUserName))</whitespace-preserve></c>
}

@* Вставить строку с именем кассира *@
@helper CashierNameLine(ClosedOrderPayment closedOrderPayment)
{
    <c colspan="4"><whitespace-preserve>@string.Format("   " + Resources.CashierNameFormat, closedOrderPayment.CashierName)</whitespace-preserve></c>
}

@* Вставить строку с названием карты *@
@helper CardNameLine(string cardName, string cardNumber)
{
    <c colspan="4"><whitespace-preserve>@string.Format(Resources.PaymentNameAndCardNumber, cardName, cardNumber)</whitespace-preserve></c>
}

@helper Footer()
{
    <np />
    <center>
        @string.Format(Resources.AllSumsInFormat, Model.CafeSetup.CurrencyName)
    </center>
    <np />
}

@functions
{
    private ISettings settings;

    private Dictionary<Triplet<int, int, DateTime>, ClosedOrder> closedOrdersSource;

    /// <summary>
    /// Заполнение данных о всех оплатах
    /// </summary>
    private void FillData()
    {
        // Отдельный OLAP-отчёт с основными полями заказа
        var ordersOlapReport = new OlapReportSettings(OlapReportType.Sales,
            new List<string>
            {
                OlapField.CloseTime, OlapField.OrderNum, OlapField.TableNum, // ключевые поля заказа
                OlapField.PayTypesId, OlapField.PayTypes, OlapField.PayTypesTransactionType, OlapField.NonCashPaymentTypeId, OlapField.NonCashPaymentType, OlapField.IsStorned,
                OlapField.OrderWaiterName, OlapField.CashierName, OlapField.CreditUser, OlapField.AuthUser, OlapField.WriteoffReason,
                OlapField.CardOwner, OlapField.OrderDiscountGuestCard, OlapField.OrderDiscountType, OlapField.CardNumber
            },
            new List<string>(),
            new List<string> { OlapField.DiscountPercent, OlapField.IncreasePercent, OlapField.DishDiscountSum, OlapField.DishReturnSum, OlapField.DishSum, OlapField.DishAmount },
            new Dictionary<string, OlapReportFilterCriteria>
            {
                { OlapField.SessionIdOperDay, new OlapReportFilterRangeCriteria(settings.GetPeriodBegin(), true, settings.GetPeriodEnd(), true) },
                // Включаем только неудаленные блюда
                { OlapField.DeletedWithWriteoff, new OlapReportFilterIncludeValuesCriteria(new object[] { Resto.Data.DishDeletionStatus.NOT_DELETED }) },
                // Исключаем транзакции внесения / возврата чаевых
                { OlapField.PayTypesTransactionType, new OlapReportFilterExcludeValuesCriteria(new object[] { "TIPS" }) }
            });

        // Отдельный OLAP-отчёт с блюдами заказа
        var orderItemsOlapReport = new OlapReportSettings(OlapReportType.Sales,
            new List<string>
            {
                OlapField.CloseTime, OlapField.OrderNum, OlapField.TableNum, // ключевые поля заказа
                OlapField.PayTypesId, OlapField.NonCashPaymentTypeId, OlapField.WriteoffReason, OlapField.IsStorned, OlapField.DishName
            },
            new List<string>(),
            new List<string> { OlapField.DiscountPercent, OlapField.IncreasePercent, OlapField.DishDiscountSum, OlapField.DishReturnSum, OlapField.DishSum, OlapField.DishAmount },
            new Dictionary<string, OlapReportFilterCriteria>
            {
                { OlapField.SessionIdOperDay, new OlapReportFilterRangeCriteria(settings.GetPeriodBegin(), true, settings.GetPeriodEnd(), true) },
                // Включаем только неудаленные блюда
                { OlapField.DeletedWithWriteoff, new OlapReportFilterIncludeValuesCriteria(new object[] { Resto.Data.DishDeletionStatus.NOT_DELETED }) },
                // Исключаем транзакции внесения / возврата чаевых
                { OlapField.PayTypesTransactionType, new OlapReportFilterExcludeValuesCriteria(new object[] { "TIPS" }) }
            });

        var reports = Model.OlapReports.BuildReports(new List<OlapReportSettings> { ordersOlapReport, orderItemsOlapReport });

        // Будем группировать информацию о продажах по ключевым полям заказа
        closedOrdersSource = new Dictionary<Triplet<int, int, DateTime>, ClosedOrder>();

        foreach (var data in reports[0].Data)
        {
            // Приспосабливаемся жить с RMS-48559.
            // НЕ Пропускаем транзакции продаж с предоплатой и возвратов продаж с предоплатой
            //var transactionType = data.GetValue<OrderPaymentTransactionType?>(OlapField.PayTypesTransactionType);
            //if (transactionType == OrderPaymentTransactionType.PrepayClosed ||
            //    transactionType == OrderPaymentTransactionType.PrepayClosedReturn)
            //    continue;

            var number = data.GetValue<int>(OlapField.OrderNum);
            var tableNumber = data.GetValue<int>(OlapField.TableNum);
            var closedTime = data.GetValue<DateTime>(OlapField.CloseTime);
            var closedOrderKey = new Triplet<int, int, DateTime>(number, tableNumber, closedTime);

            // Если заказа с указанными полями нет, создаем его
            if (!closedOrdersSource.ContainsKey(closedOrderKey))
            {
                var waiterName = data.GetValue<string>(OlapField.OrderWaiterName);
                var discounts = new[] { new ClosedOrderDiscountItem(data) }.ToList();
                var closedOrder = new ClosedOrder(number, tableNumber, waiterName, discounts);
                closedOrdersSource.Add(closedOrderKey, closedOrder);
            }

            var paymentType = data.GetValue<IPaymentType>(OlapField.PayTypesId);
            var paymentTypeName = data.GetValue<string>(OlapField.PayTypes);
            if (paymentType == null)
            {
                paymentType = data.GetValue<IPaymentType>(OlapField.NonCashPaymentTypeId);
                paymentTypeName = data.GetValue<string>(OlapField.NonCashPaymentType);
            }

            var transactionType = data.GetValue<OrderPaymentTransactionType?>(OlapField.PayTypesTransactionType);
            if (transactionType == null)
            {
                // Проводка оплаты заказа типом "Без выручки" не генерируется фронтом.
                if (paymentType.IsWriteoffPaymentType())
                    transactionType = OrderPaymentTransactionType.OnTheHouse;
                // Проводка оплаты доставки типом "В кредит на юр. лицо" отбрасывается сервером: см. RMS-51916 и RMS-36075.
                if (paymentType.IsCreditPaymentType())
                    transactionType = OrderPaymentTransactionType.Credit;
            }

            // Если тип оплаты null, то, вероятно, это оплата как скидка, а она к выручке не относится
            if (paymentType != null && transactionType.HasValue)
                closedOrdersSource[closedOrderKey].AddPayment(new ClosedOrderPayment(data, closedTime, closedOrdersSource[closedOrderKey], paymentType, paymentTypeName, transactionType.Value));
        }

        foreach (var data in reports[1].Data)
        {
            var number = data.GetValue<int>(OlapField.OrderNum);
            var tableNumber = data.GetValue<int>(OlapField.TableNum);
            var closedTime = data.GetValue<DateTime>(OlapField.CloseTime);
            var closedOrderKey = new Triplet<int, int, DateTime>(number, tableNumber, closedTime);

            var paymentType = data.GetValue<IPaymentType>(OlapField.PayTypesId);
            if (paymentType == null)
                paymentType = data.GetValue<IPaymentType>(OlapField.NonCashPaymentTypeId);

            // Если тип оплаты null, то, вероятно, это оплата как скидка, а она к выручке не относится
            if (paymentType != null)
                closedOrdersSource[closedOrderKey].AddItem(new OrderItem(data, paymentType.Group));
        }
    }

    public sealed class ClosedOrder
    {
        public readonly int Number;
        public readonly int TableNumber;
        public readonly string WaiterName;

        /// <summary>
        /// Оплаты (включая предоплаты)
        /// </summary>
        public readonly List<ClosedOrderPayment> Payments = new List<ClosedOrderPayment>();

        /// <summary>
        /// Скидки и надбавки
        /// </summary>
        public readonly List<ClosedOrderDiscountItem> Discounts;

        /// <summary>
        /// Оплаченные элементы заказа
        /// </summary>
        public readonly List<OrderItem> Items = new List<OrderItem>();

        public ClosedOrder(int number, int tableNumber, string waiterName, List<ClosedOrderDiscountItem> discounts)
        {
            Number = number;
            TableNumber = tableNumber;
            WaiterName = waiterName;
            Discounts = discounts;
        }

        public void AddPayment(ClosedOrderPayment payment)
        {
            Payments.Add(payment);
        }

        public void AddItem(OrderItem orderItem)
        {
            Items.Add(orderItem);
        }
    }

    public sealed class ClosedOrderPayment
    {
        public readonly IPaymentType PaymentType;

        public readonly string PaymentTypeName;

        public readonly PaymentGroup PaymentGroup;

        /// <summary>
        /// Номер платёжной банковской карты для типа оплаты "Банковские карты".
        /// Во фронте нет возможности узнать номер платёжной банковской карты
        /// </summary>
        public readonly string CardNumber = string.Empty;

        /// <summary>
        /// Контрагент для типа оплаты "В кредит"
        /// </summary>
        public readonly string CreditUserName;

        /// <summary>
        /// Карта контрагента для типа оплаты "В кредит"
        /// </summary>
        public readonly string CreditUserMaskedCardNumber;

        /// <summary>
        /// Причина оплаты "За счет заведения" (Без выручки)
        /// </summary>
        public readonly string WriteoffReason;

        /// <summary>
        /// Кассир оплаты заказа
        /// </summary>
        public readonly string CashierName;

        /// <summary>
        /// Кем авторизована оплата заказа
        /// </summary>
        public readonly string AuthUserName;

        /// <summary>
        /// Родительский заказ
        /// </summary>
        public readonly ClosedOrder Order;

        public OrderCloseType CloseType;
        public decimal Sum;
        // Время закрытия заказа, а не время соответстувующей оплаты :(
        public readonly DateTime Timestamp;

        public ClosedOrderPayment(IOlapReportItem source, DateTime closedTime, ClosedOrder closedOrder,
            IPaymentType paymentType, string paymentTypeName, OrderPaymentTransactionType transactionType)
        {
            PaymentType = paymentType;
            PaymentGroup = paymentType.Group;
            PaymentTypeName = paymentTypeName;
            FillCloseTypeAndSum(source, transactionType, paymentType.Group);
            Timestamp = closedTime;
            CashierName = source.GetValue<string>(OlapField.CashierName);
            Order = closedOrder;

            // Для типа оплаты "В кредит"
            CreditUserName = source.GetValue<string>(OlapField.CreditUser);
            CreditUserMaskedCardNumber = ParseCreditUserCardNumber(source.GetValue<string>(OlapField.CardNumber));

            // Для типа оплаты "Без выручки"
            WriteoffReason = source.GetValue<string>(OlapField.WriteoffReason);

            AuthUserName = source.GetValue<string>(OlapField.AuthUser);
        }

        private void FillCloseTypeAndSum(IOlapReportItem source, OrderPaymentTransactionType transactionType, PaymentGroup paymentGroup)
        {
            var isStorned = source.GetValue<bool>(OlapField.IsStorned);
            var sumFieldName = paymentGroup == PaymentGroup.Writeoff
                ? OlapField.DishSum
                : isStorned
                    ? OlapField.DishReturnSum
                    : OlapField.DishDiscountSum;
            var sing = isStorned ? -1 : 1;

            switch (transactionType)
            {
                case OrderPaymentTransactionType.Cash:
                case OrderPaymentTransactionType.Card:
                case OrderPaymentTransactionType.Credit:
                case OrderPaymentTransactionType.OnTheHouse:
                    {
                        CloseType = isStorned
                            ? source.GetValue<decimal>(OlapField.DishAmount) > 0
                                ? OrderCloseType.Sale
                                : OrderCloseType.Storno
                            : OrderCloseType.Sale;
                        Sum = sing * source.GetValue<decimal>(sumFieldName);
                        break;
                    }
                case OrderPaymentTransactionType.RevenueReturn:
                    {
                        CloseType = OrderCloseType.Storno;
                        Sum = sing * source.GetValue<decimal>(sumFieldName);
                        break;
                    }
                case OrderPaymentTransactionType.Prepay:
                    {
                        CloseType = OrderCloseType.Prepay;
                        Sum = sing * source.GetValue<decimal>(sumFieldName);
                        break;
                    }
                case OrderPaymentTransactionType.PrepayClosed: // приспосабливаемся жить с RMS-48559
                    {
                        CloseType = OrderCloseType.Prepay;
                        Sum = -sing * source.GetValue<decimal>(sumFieldName);
                        break;
                    }
                case OrderPaymentTransactionType.PrepayReturn:
                    {
                        CloseType = OrderCloseType.PrepayReturn;
                        Sum = -source.GetValue<decimal>(sumFieldName);
                        break;
                    }
                case OrderPaymentTransactionType.PrepayClosedReturn: // приспосабливаемся жить с RMS-48559
                    {
                        CloseType = OrderCloseType.PrepayReturn;
                        Sum = source.GetValue<decimal>(sumFieldName);
                        break;
                    }
                default:
                    throw new NotSupportedException(string.Format("Order payment transaction of type {0} is not supported", transactionType));
            }
        }
    }

    public sealed class ClosedOrderDiscountItem
    {
        /// <summary>
        /// Типы скидок или надбавок
        /// </summary>
        public readonly string DiscountTypesNames;

        /// <summary>
        /// Процент скидки или надбавки
        /// </summary>
        public readonly decimal DiscountPercent;

        /// <summary>
        /// Имена гостей, если скидки по карте
        /// </summary>
        public readonly string GuestNames;

        /// <summary>
        /// Треки гостевых карт, если скидки по карте
        /// </summary>
        public readonly string GuestCardTracks;

        // В олапах нет подробной информации по каждой скидке заказа, данные по ним не группируются.
        // Поэтому названия примененных к заказу скидок приходят единой строкой. Аналогично имена гостей и треки их карт
        public ClosedOrderDiscountItem(IOlapReportItem source)
        {
            DiscountTypesNames = source.GetValue<string>(OlapField.OrderDiscountType);
            DiscountPercent = source.GetValue<decimal>(OlapField.DiscountPercent) * 100m;
            if (DiscountPercent == 0)
                DiscountPercent = source.GetValue<decimal>(OlapField.IncreasePercent) * 100m;
            GuestNames = source.GetValue<string>(OlapField.CardOwner);
            GuestCardTracks = source.GetValue<string>(OlapField.OrderDiscountGuestCard);
        }
    }

    /// <summary>
    /// Отдельная позиция закрытого заказа (блюдо)
    /// </summary>
    public sealed class OrderItem
    {
        public readonly string Name;
        public readonly decimal Amount;
        public readonly decimal Sum;

        public OrderItem(IOlapReportItem source, PaymentGroup paymentGroup)
        {
            Amount = source.GetValue<decimal>(OlapField.DishAmount);
            Name = source.GetValue<string>(OlapField.DishName);
            Sum = ParseSum(source, paymentGroup);
        }

        private static decimal ParseSum(IOlapReportItem source, PaymentGroup paymentGroup)
        {
            // Если оплата является типом "Без выручки", берем полную сумму, иначе - с учетом скидок
            var fieldName = paymentGroup == PaymentGroup.Writeoff ? OlapField.DishSum : OlapField.DishDiscountSum;

            switch (source.GetValue<bool>(OlapField.IsStorned) ? OrderCloseType.Storno : OrderCloseType.Sale)
            {
                case OrderCloseType.Sale:
                case OrderCloseType.Prepay: return source.GetValue<decimal>(fieldName);
                case OrderCloseType.PrepayReturn: return -source.GetValue<decimal>(fieldName);
                case OrderCloseType.Storno: return -source.GetValue<decimal>(OlapField.DishReturnSum);
                default: throw new NotSupportedException();
            }
        }
    }

    public enum OrderCloseType
    {
        /// <summary>
        /// Продажа
        /// </summary>
        Sale,
        /// <summary>
        /// Возврат заказа
        /// </summary>
        Storno,
        /// <summary>
        /// Внесение предоплаты
        /// </summary>
        Prepay,
        /// <summary>
        /// Возврат предоплаты
        /// </summary>
        PrepayReturn
    };

    private static string ParseCreditUserCardNumber(string number)
    {
        // Когда нет карты, есть локализованное дефолтное значение "(нет карты)", "(no card)", ...
        var emptyValuePattern = @"^\(([\w ]+)\)$";
        return string.IsNullOrEmpty(number) || Regex.IsMatch(number, emptyValuePattern)
            ? string.Empty
            : MaskCardNumber(number, 3);
    }

    /// <summary>
    /// Возвращает название операции (для заголовка, в единственном числе)
    /// </summary>
    private static string GetOrderCloseTypeName(OrderCloseType closeType)
    {
        switch (closeType)
        {
            case OrderCloseType.Sale:
                return Resources.OrderCloseTypeSell;
            case OrderCloseType.Prepay:
                return Resources.OrderCloseTypePrepay;
            case OrderCloseType.Storno:
                return Resources.OrderCloseTypeStorno;
            case OrderCloseType.PrepayReturn:
                return Resources.OrderCloseTypePrepayReturn;
            default:
                throw new ArgumentOutOfRangeException("closeType");
        }
    }

    /// <summary>
    /// Возвращает название операции (для итогов, во множественном числе)
    /// </summary>
    private static string GetOrderCloseTypeSummaryName(OrderCloseType closeType)
    {
        switch (closeType)
        {
            case OrderCloseType.Sale:
                return Resources.OrderCloseTypeSummarySell;
            case OrderCloseType.Prepay:
                return Resources.OrderCloseTypeSummaryPrepay;
            case OrderCloseType.Storno:
                return Resources.OrderCloseTypeSummaryStorno;
            case OrderCloseType.PrepayReturn:
                return Resources.OrderCloseTypeSummaryPrepayReturn;
            default:
                throw new ArgumentOutOfRangeException("closeType");
        }
    }

    private static string GetWriteoffPaymentTypeAccountName(IPaymentType paymentType)
    {
        if (paymentType == null)
            return string.Empty;

        var cpt = paymentType as IConfigurablePaymentType;
        if (cpt != null)
            paymentType = cpt.BasePaymentType;
        return ((IWriteoffPaymentType)paymentType).Account.Name;
    }

    private static string MaskCardNumber(string cardTrack, int visibleDigitsCount)
    {
        if (string.IsNullOrEmpty(cardTrack))
            throw new ArgumentException("Card track must contain at least one digit", "cardTrack");

        if (visibleDigitsCount < 0)
            throw new ArgumentOutOfRangeException("visibleDigitsCount", "Visible digits count must be greater than or equal to zero.");

        if (visibleDigitsCount == 0)
            return string.Empty;

        return cardTrack.Length > visibleDigitsCount
            ? string.Format(Resources.GuestCardMaskFormat, cardTrack.Substring(cardTrack.Length - visibleDigitsCount))
            : string.Format(Resources.GuestCardFormat, cardTrack);
    }

    public struct Triplet<T1, T2, T3> : IEquatable<Triplet<T1, T2, T3>>
    {
        private readonly T1 first;
        private readonly T2 second;
        private readonly T3 third;

        public Triplet(T1 first, T2 second, T3 third)
        {
            this.first = first;
            this.second = second;
            this.third = third;
        }

        public bool Equals(Triplet<T1, T2, T3> other)
        {
            return Equals(other.first, first) && Equals(other.second, second) && Equals(other.third, third);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (obj.GetType() != typeof(Triplet<T1, T2, T3>))
                return false;
            return Equals((Triplet<T1, T2, T3>)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                // ReSharper disable CompareNonConstrainedGenericWithNull
                var result = (first != null ? first.GetHashCode() : 0);
                result = (result * 397) ^ (second != null ? second.GetHashCode() : 0);
                result = (result * 397) ^ (third != null ? third.GetHashCode() : 0);
                // ReSharper restore CompareNonConstrainedGenericWithNull
                return result;
            }
        }

        public static bool operator ==(Triplet<T1, T2, T3> left, Triplet<T1, T2, T3> right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(Triplet<T1, T2, T3> left, Triplet<T1, T2, T3> right)
        {
            return !left.Equals(right);
        }
    }
}
