using Resto.Framework.Data;
using Resto.Framework.Attributes.JetBrains;
using Microsoft.Extensions.DependencyInjection;

// **
// * Этот класс генерируются ClassConverter'ом по соответствующим Java-файлам,
// * помеченным аннотациями, перечисленными в TypesUtils.java#isDataClass.
// * Например, в front\address\Address.java есть аннотация @DataClassEntityField,
// * на её основе в этом файле создаётся класс Address.
// * Особенность: поля, помеченные @DefaultNull, в конструкторе класса не присутствуют.
// **

// ReSharper disable ConvertToAutoProperty
// ReSharper disable PartialTypeWithSinglePart

namespace Resto.Data
{
    public interface IServiceClientFactory
    {
        IAccountingService AccountingService { get; } 
        ICashFlowService CashFlowService { get; } 
        IUnpaidDocumentsService UnpaidDocumentsService { get; } 
        IEntitiesService EntitiesService { get; } 
        IUpdateService UpdateService { get; } 
        ICompositeUpdateService CompositeUpdateService { get; } 
        IDocumentGroupOperationService DocumentGroupOperationService { get; } 
        IDocumentService DocumentService { get; } 
        IEmployeesService EmployeesService { get; } 
        IPayrollService PayrollService { get; } 
        IEmployeesPlanningService EmployeesPlanningService { get; } 
        IEmployeesReportsService EmployeesReportsService { get; } 
        IIikoCardService IikoCardService { get; } 
        IIikoNewsService IikoNewsService { get; } 
        IImageService ImageService { get; } 
        INoticeService NoticeService { get; } 
        IScheduledPaymentService ScheduledPaymentService { get; } 
        IClientPriceCategoryService ClientPriceCategoryService { get; } 
        IPricingService PricingService { get; } 
        IAccountingReportsService AccountingReportsService { get; } 
        IFrontReportsService FrontReportsService { get; } 
        IAnnualPnLBudgetService AnnualPnLBudgetService { get; } 
        IMonthlyPnLBudgetService MonthlyPnLBudgetService { get; } 
        ICashFlowReportService CashFlowReportService { get; } 
        ICounteragentSummaryReportsService CounteragentSummaryReportsService { get; } 
        IExport1CService Export1CService { get; } 
        IFoodcostAnalysisService FoodcostAnalysisService { get; } 
        IGoodMoveReportService GoodMoveReportService { get; } 
        IOlapReportService OlapReportService { get; } 
        IPurchasingReportService PurchasingReportService { get; } 
        ISalesReportService SalesReportService { get; } 
        IReservesService ReservesService { get; } 
        ISessionsService SessionsService { get; } 
        ISalesAnalysisService SalesAnalysisService { get; } 
        IAuthorizationService AuthorizationService { get; } 
        IBinaryStorageService BinaryStorageService { get; } 
        IModifierSchemasService ModifierSchemasService { get; } 
        IProductPriceFixedMarkupService ProductPriceFixedMarkupService { get; } 
        IProductsAssemblyChartService ProductsAssemblyChartService { get; } 
        IProductsAssemblyInfoService ProductsAssemblyInfoService { get; } 
        IProductsService ProductsService { get; } 
        IStoreReportsService StoreReportsService { get; } 
        IStoreService StoreService { get; } 
        IAlcoholService AlcoholService { get; } 
        IExternalHierarchyService ExternalHierarchyService { get; } 
        IIncomingReturnedInvoiceService IncomingReturnedInvoiceService { get; } 
        IOutgoingInvoiceService OutgoingInvoiceService { get; } 
        IIndependentPriceListService IndependentPriceListService { get; } 
        ISupplierPriceListService SupplierPriceListService { get; } 
        IStoreReplenishmentService StoreReplenishmentService { get; } 
        ITemplateReportService TemplateReportService { get; } 
        IVatInvoiceService VatInvoiceService { get; } 
        ICorporationService CorporationService { get; } 
        ICorporationSettingsService CorporationSettingsService { get; } 
        IDepartmentService DepartmentService { get; } 
        IMenuService MenuService { get; } 
        IPriceListUpdateService PriceListUpdateService { get; } 
        ISynchroEntityService SynchroEntityService { get; } 
        IConsolidatedOrderService ConsolidatedOrderService { get; } 
        IPreparedRegisterService PreparedRegisterService { get; } 
        IProductionOrderBlankService ProductionOrderBlankService { get; } 
        IProductionService ProductionService { get; } 
        IAgentService AgentService { get; } 
        IPaymentConstraintsManager PaymentConstraintsManager { get; } 
        IRestoSetupService RestoSetupService { get; } 
        ITablesEditorService TablesEditorService { get; } 
        IDBMaintenanceService DBMaintenanceService { get; } 
        IDeliveryTerminalService DeliveryTerminalService { get; } 
        IEdiService EdiService { get; } 
        IEgaisBalanceService EgaisBalanceService { get; } 
        IEgaisDeclarationService EgaisDeclarationService { get; } 
        IEgaisDocumentsFrontService EgaisDocumentsFrontService { get; } 
        IEgaisDocumentsService EgaisDocumentsService { get; } 
        IEgaisEntitiesService EgaisEntitiesService { get; } 
        IEgaisIncomingInvoicesService EgaisIncomingInvoicesService { get; } 
        IEgaisInventoryService EgaisInventoryService { get; } 
        IEgaisInvoicesService EgaisInvoicesService { get; } 
        IEgaisOutgoingInvoicesService EgaisOutgoingInvoicesService { get; } 
        IEgaisRepealService EgaisRepealService { get; } 
        IEgaisService EgaisService { get; } 
        IEgaisUnsealService EgaisUnsealService { get; } 
        IFranchiseService FranchiseService { get; } 
        IServiceFeeService ServiceFeeService { get; } 
        IKladrService KladrService { get; } 
        ICityService CityService { get; } 
        IStreetService StreetService { get; } 
        IAnnouncementService AnnouncementService { get; } 
        ICardProcessingService CardProcessingService { get; } 
        IEdelweissConfigurationService EdelweissConfigurationService { get; } 
        IEpitomeConfigurationService EpitomeConfigurationService { get; } 
        IHoistConfigurationService HoistConfigurationService { get; } 
        IIikoCard5SettingsService IikoCard5SettingsService { get; } 
        IIikoNetService IikoNetService { get; } 
        ICurrencyRateService CurrencyRateService { get; } 
        ICurrencyService CurrencyService { get; } 
        ICustomerEvents CustomerEvents { get; } 
        ICustomerService CustomerService { get; } 
        IDeliveryService DeliveryService { get; } 
        IDeliveryOrderGeocodeService DeliveryOrderGeocodeService { get; } 
        IDeliveryHeatMapService DeliveryHeatMapService { get; } 
        IBrdDataLoadingService BrdDataLoadingService { get; } 
        ITerminalDeliveryDurationService TerminalDeliveryDurationService { get; } 
        IDeliveryTerminalWorkloadService DeliveryTerminalWorkloadService { get; } 
        IDeliveryExternalAssignationService DeliveryExternalAssignationService { get; } 
        IDeliveryLogisticsService DeliveryLogisticsService { get; } 
        IMarketingSourceService MarketingSourceService { get; } 
        IDiscountService DiscountService { get; } 
        ILuckyTicketService LuckyTicketService { get; } 
        IPastOrdersService PastOrdersService { get; } 
        IChequeTemplateService ChequeTemplateService { get; } 
        IStiReportService StiReportService { get; } 
        IRegionsService RegionsService { get; } 
        IQuickLabelsHelper QuickLabelsHelper { get; } 
        ISurveyItemsService SurveyItemsService { get; } 
        IServerUpgradeService ServerUpgradeService { get; } 
        IFrontBalancesService FrontBalancesService { get; } 
        IFrontUpdateService FrontUpdateService { get; } 
        IEmailSendingService EmailSendingService { get; } 
        IFindFaceService FindFaceService { get; } 
        ISmsSendingService SmsSendingService { get; } 
        IIikoBizService IikoBizService { get; } 
        IIikoBizRegistrationService IikoBizRegistrationService { get; } 
        IIikoBizConnectionService IikoBizConnectionService { get; } 
        IIncentiveService IncentiveService { get; } 
        ILicenseService LicenseService { get; } 
        IHttpReverseTunnelProxyService HttpReverseTunnelProxyService { get; } 
        IPbxService PbxService { get; } 
        IPermissionService PermissionService { get; } 
        IReplicationService ReplicationService { get; } 
        IReplicationMasterServerService ReplicationMasterServerService { get; } 
        IReplicationSlaveServerService ReplicationSlaveServerService { get; } 
        ITestSalesGeneratorService TestSalesGeneratorService { get; } 
        ISystemService SystemService { get; } 
        ILockTestService LockTestService { get; } 
        IHandshakeSettingsService HandshakeSettingsService { get; } 
        IDiagnosticsService DiagnosticsService { get; } 
        IWatchDogService WatchDogService { get; } 
        IEventsService EventsService { get; } 
        IInformationService InformationService { get; } 
        IUsersService UsersService { get; } 
    }

    internal class ServiceClientFactoryInternal : IServiceClientFactory
    {
        private readonly Lazy<IAccountingService> accountingService = new Lazy<IAccountingService>(() => new AccountingService());
        private readonly Lazy<ICashFlowService> cashFlowService = new Lazy<ICashFlowService>(() => new CashFlowService());
        private readonly Lazy<IUnpaidDocumentsService> unpaidDocumentsService = new Lazy<IUnpaidDocumentsService>(() => new UnpaidDocumentsService());
        private readonly Lazy<IEntitiesService> entitiesService = new Lazy<IEntitiesService>(() => new EntitiesService());
        private readonly Lazy<IUpdateService> updateService = new Lazy<IUpdateService>(() => new UpdateService());
        private readonly Lazy<ICompositeUpdateService> compositeUpdateService = new Lazy<ICompositeUpdateService>(() => new CompositeUpdateService());
        private readonly Lazy<IDocumentGroupOperationService> documentGroupOperationService = new Lazy<IDocumentGroupOperationService>(() => new DocumentGroupOperationService());
        private readonly Lazy<IDocumentService> documentService = new Lazy<IDocumentService>(() => new DocumentService());
        private readonly Lazy<IEmployeesService> employeesService = new Lazy<IEmployeesService>(() => new EmployeesService());
        private readonly Lazy<IPayrollService> payrollService = new Lazy<IPayrollService>(() => new PayrollService());
        private readonly Lazy<IEmployeesPlanningService> employeesPlanningService = new Lazy<IEmployeesPlanningService>(() => new EmployeesPlanningService());
        private readonly Lazy<IEmployeesReportsService> employeesReportsService = new Lazy<IEmployeesReportsService>(() => new EmployeesReportsService());
        private readonly Lazy<IIikoCardService> iikoCardService = new Lazy<IIikoCardService>(() => new IikoCardService());
        private readonly Lazy<IIikoNewsService> iikoNewsService = new Lazy<IIikoNewsService>(() => new IikoNewsService());
        private readonly Lazy<IImageService> imageService = new Lazy<IImageService>(() => new ImageService());
        private readonly Lazy<INoticeService> noticeService = new Lazy<INoticeService>(() => new NoticeService());
        private readonly Lazy<IScheduledPaymentService> scheduledPaymentService = new Lazy<IScheduledPaymentService>(() => new ScheduledPaymentService());
        private readonly Lazy<IClientPriceCategoryService> clientPriceCategoryService = new Lazy<IClientPriceCategoryService>(() => new ClientPriceCategoryService());
        private readonly Lazy<IPricingService> pricingService = new Lazy<IPricingService>(() => new PricingService());
        private readonly Lazy<IAccountingReportsService> accountingReportsService = new Lazy<IAccountingReportsService>(() => new AccountingReportsService());
        private readonly Lazy<IFrontReportsService> frontReportsService = new Lazy<IFrontReportsService>(() => new FrontReportsService());
        private readonly Lazy<IAnnualPnLBudgetService> annualPnLBudgetService = new Lazy<IAnnualPnLBudgetService>(() => new AnnualPnLBudgetService());
        private readonly Lazy<IMonthlyPnLBudgetService> monthlyPnLBudgetService = new Lazy<IMonthlyPnLBudgetService>(() => new MonthlyPnLBudgetService());
        private readonly Lazy<ICashFlowReportService> cashFlowReportService = new Lazy<ICashFlowReportService>(() => new CashFlowReportService());
        private readonly Lazy<ICounteragentSummaryReportsService> counteragentSummaryReportsService = new Lazy<ICounteragentSummaryReportsService>(() => new CounteragentSummaryReportsService());
        private readonly Lazy<IExport1CService> export1CService = new Lazy<IExport1CService>(() => new Export1CService());
        private readonly Lazy<IFoodcostAnalysisService> foodcostAnalysisService = new Lazy<IFoodcostAnalysisService>(() => new FoodcostAnalysisService());
        private readonly Lazy<IGoodMoveReportService> goodMoveReportService = new Lazy<IGoodMoveReportService>(() => new GoodMoveReportService());
        private readonly Lazy<IOlapReportService> olapReportService = new Lazy<IOlapReportService>(() => new OlapReportService());
        private readonly Lazy<IPurchasingReportService> purchasingReportService = new Lazy<IPurchasingReportService>(() => new PurchasingReportService());
        private readonly Lazy<ISalesReportService> salesReportService = new Lazy<ISalesReportService>(() => new SalesReportService());
        private readonly Lazy<IReservesService> reservesService = new Lazy<IReservesService>(() => new ReservesService());
        private readonly Lazy<ISessionsService> sessionsService = new Lazy<ISessionsService>(() => new SessionsService());
        private readonly Lazy<ISalesAnalysisService> salesAnalysisService = new Lazy<ISalesAnalysisService>(() => new SalesAnalysisService());
        private readonly Lazy<IAuthorizationService> authorizationService = new Lazy<IAuthorizationService>(() => new AuthorizationService());
        private readonly Lazy<IBinaryStorageService> binaryStorageService = new Lazy<IBinaryStorageService>(() => new BinaryStorageService());
        private readonly Lazy<IModifierSchemasService> modifierSchemasService = new Lazy<IModifierSchemasService>(() => new ModifierSchemasService());
        private readonly Lazy<IProductPriceFixedMarkupService> productPriceFixedMarkupService = new Lazy<IProductPriceFixedMarkupService>(() => new ProductPriceFixedMarkupService());
        private readonly Lazy<IProductsAssemblyChartService> productsAssemblyChartService = new Lazy<IProductsAssemblyChartService>(() => new ProductsAssemblyChartService());
        private readonly Lazy<IProductsAssemblyInfoService> productsAssemblyInfoService = new Lazy<IProductsAssemblyInfoService>(() => new ProductsAssemblyInfoService());
        private readonly Lazy<IProductsService> productsService = new Lazy<IProductsService>(() => new ProductsService());
        private readonly Lazy<IStoreReportsService> storeReportsService = new Lazy<IStoreReportsService>(() => new StoreReportsService());
        private readonly Lazy<IStoreService> storeService = new Lazy<IStoreService>(() => new StoreService());
        private readonly Lazy<IAlcoholService> alcoholService = new Lazy<IAlcoholService>(() => new AlcoholService());
        private readonly Lazy<IExternalHierarchyService> externalHierarchyService = new Lazy<IExternalHierarchyService>(() => new ExternalHierarchyService());
        private readonly Lazy<IIncomingReturnedInvoiceService> incomingReturnedInvoiceService = new Lazy<IIncomingReturnedInvoiceService>(() => new IncomingReturnedInvoiceService());
        private readonly Lazy<IOutgoingInvoiceService> outgoingInvoiceService = new Lazy<IOutgoingInvoiceService>(() => new OutgoingInvoiceService());
        private readonly Lazy<IIndependentPriceListService> independentPriceListService = new Lazy<IIndependentPriceListService>(() => new IndependentPriceListService());
        private readonly Lazy<ISupplierPriceListService> supplierPriceListService = new Lazy<ISupplierPriceListService>(() => new SupplierPriceListService());
        private readonly Lazy<IStoreReplenishmentService> storeReplenishmentService = new Lazy<IStoreReplenishmentService>(() => new StoreReplenishmentService());
        private readonly Lazy<ITemplateReportService> templateReportService = new Lazy<ITemplateReportService>(() => new TemplateReportService());
        private readonly Lazy<IVatInvoiceService> vatInvoiceService = new Lazy<IVatInvoiceService>(() => new VatInvoiceService());
        private readonly Lazy<ICorporationService> corporationService = new Lazy<ICorporationService>(() => new CorporationService());
        private readonly Lazy<ICorporationSettingsService> corporationSettingsService = new Lazy<ICorporationSettingsService>(() => new CorporationSettingsService());
        private readonly Lazy<IDepartmentService> departmentService = new Lazy<IDepartmentService>(() => new DepartmentService());
        private readonly Lazy<IMenuService> menuService = new Lazy<IMenuService>(() => new MenuService());
        private readonly Lazy<IPriceListUpdateService> priceListUpdateService = new Lazy<IPriceListUpdateService>(() => new PriceListUpdateService());
        private readonly Lazy<ISynchroEntityService> synchroEntityService = new Lazy<ISynchroEntityService>(() => new SynchroEntityService());
        private readonly Lazy<IConsolidatedOrderService> consolidatedOrderService = new Lazy<IConsolidatedOrderService>(() => new ConsolidatedOrderService());
        private readonly Lazy<IPreparedRegisterService> preparedRegisterService = new Lazy<IPreparedRegisterService>(() => new PreparedRegisterService());
        private readonly Lazy<IProductionOrderBlankService> productionOrderBlankService = new Lazy<IProductionOrderBlankService>(() => new ProductionOrderBlankService());
        private readonly Lazy<IProductionService> productionService = new Lazy<IProductionService>(() => new ProductionService());
        private readonly Lazy<IAgentService> agentService = new Lazy<IAgentService>(() => new AgentService());
        private readonly Lazy<IPaymentConstraintsManager> paymentConstraintsManager = new Lazy<IPaymentConstraintsManager>(() => new PaymentConstraintsManager());
        private readonly Lazy<IRestoSetupService> restoSetupService = new Lazy<IRestoSetupService>(() => new RestoSetupService());
        private readonly Lazy<ITablesEditorService> tablesEditorService = new Lazy<ITablesEditorService>(() => new TablesEditorService());
        private readonly Lazy<IDBMaintenanceService> dBMaintenanceService = new Lazy<IDBMaintenanceService>(() => new DBMaintenanceService());
        private readonly Lazy<IDeliveryTerminalService> deliveryTerminalService = new Lazy<IDeliveryTerminalService>(() => new DeliveryTerminalService());
        private readonly Lazy<IEdiService> ediService = new Lazy<IEdiService>(() => new EdiService());
        private readonly Lazy<IEgaisBalanceService> egaisBalanceService = new Lazy<IEgaisBalanceService>(() => new EgaisBalanceService());
        private readonly Lazy<IEgaisDeclarationService> egaisDeclarationService = new Lazy<IEgaisDeclarationService>(() => new EgaisDeclarationService());
        private readonly Lazy<IEgaisDocumentsFrontService> egaisDocumentsFrontService = new Lazy<IEgaisDocumentsFrontService>(() => new EgaisDocumentsFrontService());
        private readonly Lazy<IEgaisDocumentsService> egaisDocumentsService = new Lazy<IEgaisDocumentsService>(() => new EgaisDocumentsService());
        private readonly Lazy<IEgaisEntitiesService> egaisEntitiesService = new Lazy<IEgaisEntitiesService>(() => new EgaisEntitiesService());
        private readonly Lazy<IEgaisIncomingInvoicesService> egaisIncomingInvoicesService = new Lazy<IEgaisIncomingInvoicesService>(() => new EgaisIncomingInvoicesService());
        private readonly Lazy<IEgaisInventoryService> egaisInventoryService = new Lazy<IEgaisInventoryService>(() => new EgaisInventoryService());
        private readonly Lazy<IEgaisInvoicesService> egaisInvoicesService = new Lazy<IEgaisInvoicesService>(() => new EgaisInvoicesService());
        private readonly Lazy<IEgaisOutgoingInvoicesService> egaisOutgoingInvoicesService = new Lazy<IEgaisOutgoingInvoicesService>(() => new EgaisOutgoingInvoicesService());
        private readonly Lazy<IEgaisRepealService> egaisRepealService = new Lazy<IEgaisRepealService>(() => new EgaisRepealService());
        private readonly Lazy<IEgaisService> egaisService = new Lazy<IEgaisService>(() => new EgaisService());
        private readonly Lazy<IEgaisUnsealService> egaisUnsealService = new Lazy<IEgaisUnsealService>(() => new EgaisUnsealService());
        private readonly Lazy<IFranchiseService> franchiseService = new Lazy<IFranchiseService>(() => new FranchiseService());
        private readonly Lazy<IServiceFeeService> serviceFeeService = new Lazy<IServiceFeeService>(() => new ServiceFeeService());
        private readonly Lazy<IKladrService> kladrService = new Lazy<IKladrService>(() => new KladrService());
        private readonly Lazy<ICityService> cityService = new Lazy<ICityService>(() => new CityService());
        private readonly Lazy<IStreetService> streetService = new Lazy<IStreetService>(() => new StreetService());
        private readonly Lazy<IAnnouncementService> announcementService = new Lazy<IAnnouncementService>(() => new AnnouncementService());
        private readonly Lazy<ICardProcessingService> cardProcessingService = new Lazy<ICardProcessingService>(() => new CardProcessingService());
        private readonly Lazy<IEdelweissConfigurationService> edelweissConfigurationService = new Lazy<IEdelweissConfigurationService>(() => new EdelweissConfigurationService());
        private readonly Lazy<IEpitomeConfigurationService> epitomeConfigurationService = new Lazy<IEpitomeConfigurationService>(() => new EpitomeConfigurationService());
        private readonly Lazy<IHoistConfigurationService> hoistConfigurationService = new Lazy<IHoistConfigurationService>(() => new HoistConfigurationService());
        private readonly Lazy<IIikoCard5SettingsService> iikoCard5SettingsService = new Lazy<IIikoCard5SettingsService>(() => new IikoCard5SettingsService());
        private readonly Lazy<IIikoNetService> iikoNetService = new Lazy<IIikoNetService>(() => new IikoNetService());
        private readonly Lazy<ICurrencyRateService> currencyRateService = new Lazy<ICurrencyRateService>(() => new CurrencyRateService());
        private readonly Lazy<ICurrencyService> currencyService = new Lazy<ICurrencyService>(() => new CurrencyService());
        private readonly Lazy<ICustomerEvents> customerEvents = new Lazy<ICustomerEvents>(() => new CustomerEvents());
        private readonly Lazy<ICustomerService> customerService = new Lazy<ICustomerService>(() => new CustomerService());
        private readonly Lazy<IDeliveryService> deliveryService = new Lazy<IDeliveryService>(() => new DeliveryService());
        private readonly Lazy<IDeliveryOrderGeocodeService> deliveryOrderGeocodeService = new Lazy<IDeliveryOrderGeocodeService>(() => new DeliveryOrderGeocodeService());
        private readonly Lazy<IDeliveryHeatMapService> deliveryHeatMapService = new Lazy<IDeliveryHeatMapService>(() => new DeliveryHeatMapService());
        private readonly Lazy<IBrdDataLoadingService> brdDataLoadingService = new Lazy<IBrdDataLoadingService>(() => new BrdDataLoadingService());
        private readonly Lazy<ITerminalDeliveryDurationService> terminalDeliveryDurationService = new Lazy<ITerminalDeliveryDurationService>(() => new TerminalDeliveryDurationService());
        private readonly Lazy<IDeliveryTerminalWorkloadService> deliveryTerminalWorkloadService = new Lazy<IDeliveryTerminalWorkloadService>(() => new DeliveryTerminalWorkloadService());
        private readonly Lazy<IDeliveryExternalAssignationService> deliveryExternalAssignationService = new Lazy<IDeliveryExternalAssignationService>(() => new DeliveryExternalAssignationService());
        private readonly Lazy<IDeliveryLogisticsService> deliveryLogisticsService = new Lazy<IDeliveryLogisticsService>(() => new DeliveryLogisticsService());
        private readonly Lazy<IMarketingSourceService> marketingSourceService = new Lazy<IMarketingSourceService>(() => new MarketingSourceService());
        private readonly Lazy<IDiscountService> discountService = new Lazy<IDiscountService>(() => new DiscountService());
        private readonly Lazy<ILuckyTicketService> luckyTicketService = new Lazy<ILuckyTicketService>(() => new LuckyTicketService());
        private readonly Lazy<IPastOrdersService> pastOrdersService = new Lazy<IPastOrdersService>(() => new PastOrdersService());
        private readonly Lazy<IChequeTemplateService> chequeTemplateService = new Lazy<IChequeTemplateService>(() => new ChequeTemplateService());
        private readonly Lazy<IStiReportService> stiReportService = new Lazy<IStiReportService>(() => new StiReportService());
        private readonly Lazy<IRegionsService> regionsService = new Lazy<IRegionsService>(() => new RegionsService());
        private readonly Lazy<IQuickLabelsHelper> quickLabelsHelper = new Lazy<IQuickLabelsHelper>(() => new QuickLabelsHelper());
        private readonly Lazy<ISurveyItemsService> surveyItemsService = new Lazy<ISurveyItemsService>(() => new SurveyItemsService());
        private readonly Lazy<IServerUpgradeService> serverUpgradeService = new Lazy<IServerUpgradeService>(() => new ServerUpgradeService());
        private readonly Lazy<IFrontBalancesService> frontBalancesService = new Lazy<IFrontBalancesService>(() => new FrontBalancesService());
        private readonly Lazy<IFrontUpdateService> frontUpdateService = new Lazy<IFrontUpdateService>(() => new FrontUpdateService());
        private readonly Lazy<IEmailSendingService> emailSendingService = new Lazy<IEmailSendingService>(() => new EmailSendingService());
        private readonly Lazy<IFindFaceService> findFaceService = new Lazy<IFindFaceService>(() => new FindFaceService());
        private readonly Lazy<ISmsSendingService> smsSendingService = new Lazy<ISmsSendingService>(() => new SmsSendingService());
        private readonly Lazy<IIikoBizService> iikoBizService = new Lazy<IIikoBizService>(() => new IikoBizService());
        private readonly Lazy<IIikoBizRegistrationService> iikoBizRegistrationService = new Lazy<IIikoBizRegistrationService>(() => new IikoBizRegistrationService());
        private readonly Lazy<IIikoBizConnectionService> iikoBizConnectionService = new Lazy<IIikoBizConnectionService>(() => new IikoBizConnectionService());
        private readonly Lazy<IIncentiveService> incentiveService = new Lazy<IIncentiveService>(() => new IncentiveService());
        private readonly Lazy<ILicenseService> licenseService = new Lazy<ILicenseService>(() => new LicenseService());
        private readonly Lazy<IHttpReverseTunnelProxyService> httpReverseTunnelProxyService = new Lazy<IHttpReverseTunnelProxyService>(() => new HttpReverseTunnelProxyService());
        private readonly Lazy<IPbxService> pbxService = new Lazy<IPbxService>(() => new PbxService());
        private readonly Lazy<IPermissionService> permissionService = new Lazy<IPermissionService>(() => new PermissionService());
        private readonly Lazy<IReplicationService> replicationService = new Lazy<IReplicationService>(() => new ReplicationService());
        private readonly Lazy<IReplicationMasterServerService> replicationMasterServerService = new Lazy<IReplicationMasterServerService>(() => new ReplicationMasterServerService());
        private readonly Lazy<IReplicationSlaveServerService> replicationSlaveServerService = new Lazy<IReplicationSlaveServerService>(() => new ReplicationSlaveServerService());
        private readonly Lazy<ITestSalesGeneratorService> testSalesGeneratorService = new Lazy<ITestSalesGeneratorService>(() => new TestSalesGeneratorService());
        private readonly Lazy<ISystemService> systemService = new Lazy<ISystemService>(() => new SystemService());
        private readonly Lazy<ILockTestService> lockTestService = new Lazy<ILockTestService>(() => new LockTestService());
        private readonly Lazy<IHandshakeSettingsService> handshakeSettingsService = new Lazy<IHandshakeSettingsService>(() => new HandshakeSettingsService());
        private readonly Lazy<IDiagnosticsService> diagnosticsService = new Lazy<IDiagnosticsService>(() => new DiagnosticsService());
        private readonly Lazy<IWatchDogService> watchDogService = new Lazy<IWatchDogService>(() => new WatchDogService());
        private readonly Lazy<IEventsService> eventsService = new Lazy<IEventsService>(() => new EventsService());
        private readonly Lazy<IInformationService> informationService = new Lazy<IInformationService>(() => new InformationService());
        private readonly Lazy<IUsersService> usersService = new Lazy<IUsersService>(() => new UsersService());
        public IAccountingService AccountingService => accountingService.Value;
        public ICashFlowService CashFlowService => cashFlowService.Value;
        public IUnpaidDocumentsService UnpaidDocumentsService => unpaidDocumentsService.Value;
        public IEntitiesService EntitiesService => entitiesService.Value;
        public IUpdateService UpdateService => updateService.Value;
        public ICompositeUpdateService CompositeUpdateService => compositeUpdateService.Value;
        public IDocumentGroupOperationService DocumentGroupOperationService => documentGroupOperationService.Value;
        public IDocumentService DocumentService => documentService.Value;
        public IEmployeesService EmployeesService => employeesService.Value;
        public IPayrollService PayrollService => payrollService.Value;
        public IEmployeesPlanningService EmployeesPlanningService => employeesPlanningService.Value;
        public IEmployeesReportsService EmployeesReportsService => employeesReportsService.Value;
        public IIikoCardService IikoCardService => iikoCardService.Value;
        public IIikoNewsService IikoNewsService => iikoNewsService.Value;
        public IImageService ImageService => imageService.Value;
        public INoticeService NoticeService => noticeService.Value;
        public IScheduledPaymentService ScheduledPaymentService => scheduledPaymentService.Value;
        public IClientPriceCategoryService ClientPriceCategoryService => clientPriceCategoryService.Value;
        public IPricingService PricingService => pricingService.Value;
        public IAccountingReportsService AccountingReportsService => accountingReportsService.Value;
        public IFrontReportsService FrontReportsService => frontReportsService.Value;
        public IAnnualPnLBudgetService AnnualPnLBudgetService => annualPnLBudgetService.Value;
        public IMonthlyPnLBudgetService MonthlyPnLBudgetService => monthlyPnLBudgetService.Value;
        public ICashFlowReportService CashFlowReportService => cashFlowReportService.Value;
        public ICounteragentSummaryReportsService CounteragentSummaryReportsService => counteragentSummaryReportsService.Value;
        public IExport1CService Export1CService => export1CService.Value;
        public IFoodcostAnalysisService FoodcostAnalysisService => foodcostAnalysisService.Value;
        public IGoodMoveReportService GoodMoveReportService => goodMoveReportService.Value;
        public IOlapReportService OlapReportService => olapReportService.Value;
        public IPurchasingReportService PurchasingReportService => purchasingReportService.Value;
        public ISalesReportService SalesReportService => salesReportService.Value;
        public IReservesService ReservesService => reservesService.Value;
        public ISessionsService SessionsService => sessionsService.Value;
        public ISalesAnalysisService SalesAnalysisService => salesAnalysisService.Value;
        public IAuthorizationService AuthorizationService => authorizationService.Value;
        public IBinaryStorageService BinaryStorageService => binaryStorageService.Value;
        public IModifierSchemasService ModifierSchemasService => modifierSchemasService.Value;
        public IProductPriceFixedMarkupService ProductPriceFixedMarkupService => productPriceFixedMarkupService.Value;
        public IProductsAssemblyChartService ProductsAssemblyChartService => productsAssemblyChartService.Value;
        public IProductsAssemblyInfoService ProductsAssemblyInfoService => productsAssemblyInfoService.Value;
        public IProductsService ProductsService => productsService.Value;
        public IStoreReportsService StoreReportsService => storeReportsService.Value;
        public IStoreService StoreService => storeService.Value;
        public IAlcoholService AlcoholService => alcoholService.Value;
        public IExternalHierarchyService ExternalHierarchyService => externalHierarchyService.Value;
        public IIncomingReturnedInvoiceService IncomingReturnedInvoiceService => incomingReturnedInvoiceService.Value;
        public IOutgoingInvoiceService OutgoingInvoiceService => outgoingInvoiceService.Value;
        public IIndependentPriceListService IndependentPriceListService => independentPriceListService.Value;
        public ISupplierPriceListService SupplierPriceListService => supplierPriceListService.Value;
        public IStoreReplenishmentService StoreReplenishmentService => storeReplenishmentService.Value;
        public ITemplateReportService TemplateReportService => templateReportService.Value;
        public IVatInvoiceService VatInvoiceService => vatInvoiceService.Value;
        public ICorporationService CorporationService => corporationService.Value;
        public ICorporationSettingsService CorporationSettingsService => corporationSettingsService.Value;
        public IDepartmentService DepartmentService => departmentService.Value;
        public IMenuService MenuService => menuService.Value;
        public IPriceListUpdateService PriceListUpdateService => priceListUpdateService.Value;
        public ISynchroEntityService SynchroEntityService => synchroEntityService.Value;
        public IConsolidatedOrderService ConsolidatedOrderService => consolidatedOrderService.Value;
        public IPreparedRegisterService PreparedRegisterService => preparedRegisterService.Value;
        public IProductionOrderBlankService ProductionOrderBlankService => productionOrderBlankService.Value;
        public IProductionService ProductionService => productionService.Value;
        public IAgentService AgentService => agentService.Value;
        public IPaymentConstraintsManager PaymentConstraintsManager => paymentConstraintsManager.Value;
        public IRestoSetupService RestoSetupService => restoSetupService.Value;
        public ITablesEditorService TablesEditorService => tablesEditorService.Value;
        public IDBMaintenanceService DBMaintenanceService => dBMaintenanceService.Value;
        public IDeliveryTerminalService DeliveryTerminalService => deliveryTerminalService.Value;
        public IEdiService EdiService => ediService.Value;
        public IEgaisBalanceService EgaisBalanceService => egaisBalanceService.Value;
        public IEgaisDeclarationService EgaisDeclarationService => egaisDeclarationService.Value;
        public IEgaisDocumentsFrontService EgaisDocumentsFrontService => egaisDocumentsFrontService.Value;
        public IEgaisDocumentsService EgaisDocumentsService => egaisDocumentsService.Value;
        public IEgaisEntitiesService EgaisEntitiesService => egaisEntitiesService.Value;
        public IEgaisIncomingInvoicesService EgaisIncomingInvoicesService => egaisIncomingInvoicesService.Value;
        public IEgaisInventoryService EgaisInventoryService => egaisInventoryService.Value;
        public IEgaisInvoicesService EgaisInvoicesService => egaisInvoicesService.Value;
        public IEgaisOutgoingInvoicesService EgaisOutgoingInvoicesService => egaisOutgoingInvoicesService.Value;
        public IEgaisRepealService EgaisRepealService => egaisRepealService.Value;
        public IEgaisService EgaisService => egaisService.Value;
        public IEgaisUnsealService EgaisUnsealService => egaisUnsealService.Value;
        public IFranchiseService FranchiseService => franchiseService.Value;
        public IServiceFeeService ServiceFeeService => serviceFeeService.Value;
        public IKladrService KladrService => kladrService.Value;
        public ICityService CityService => cityService.Value;
        public IStreetService StreetService => streetService.Value;
        public IAnnouncementService AnnouncementService => announcementService.Value;
        public ICardProcessingService CardProcessingService => cardProcessingService.Value;
        public IEdelweissConfigurationService EdelweissConfigurationService => edelweissConfigurationService.Value;
        public IEpitomeConfigurationService EpitomeConfigurationService => epitomeConfigurationService.Value;
        public IHoistConfigurationService HoistConfigurationService => hoistConfigurationService.Value;
        public IIikoCard5SettingsService IikoCard5SettingsService => iikoCard5SettingsService.Value;
        public IIikoNetService IikoNetService => iikoNetService.Value;
        public ICurrencyRateService CurrencyRateService => currencyRateService.Value;
        public ICurrencyService CurrencyService => currencyService.Value;
        public ICustomerEvents CustomerEvents => customerEvents.Value;
        public ICustomerService CustomerService => customerService.Value;
        public IDeliveryService DeliveryService => deliveryService.Value;
        public IDeliveryOrderGeocodeService DeliveryOrderGeocodeService => deliveryOrderGeocodeService.Value;
        public IDeliveryHeatMapService DeliveryHeatMapService => deliveryHeatMapService.Value;
        public IBrdDataLoadingService BrdDataLoadingService => brdDataLoadingService.Value;
        public ITerminalDeliveryDurationService TerminalDeliveryDurationService => terminalDeliveryDurationService.Value;
        public IDeliveryTerminalWorkloadService DeliveryTerminalWorkloadService => deliveryTerminalWorkloadService.Value;
        public IDeliveryExternalAssignationService DeliveryExternalAssignationService => deliveryExternalAssignationService.Value;
        public IDeliveryLogisticsService DeliveryLogisticsService => deliveryLogisticsService.Value;
        public IMarketingSourceService MarketingSourceService => marketingSourceService.Value;
        public IDiscountService DiscountService => discountService.Value;
        public ILuckyTicketService LuckyTicketService => luckyTicketService.Value;
        public IPastOrdersService PastOrdersService => pastOrdersService.Value;
        public IChequeTemplateService ChequeTemplateService => chequeTemplateService.Value;
        public IStiReportService StiReportService => stiReportService.Value;
        public IRegionsService RegionsService => regionsService.Value;
        public IQuickLabelsHelper QuickLabelsHelper => quickLabelsHelper.Value;
        public ISurveyItemsService SurveyItemsService => surveyItemsService.Value;
        public IServerUpgradeService ServerUpgradeService => serverUpgradeService.Value;
        public IFrontBalancesService FrontBalancesService => frontBalancesService.Value;
        public IFrontUpdateService FrontUpdateService => frontUpdateService.Value;
        public IEmailSendingService EmailSendingService => emailSendingService.Value;
        public IFindFaceService FindFaceService => findFaceService.Value;
        public ISmsSendingService SmsSendingService => smsSendingService.Value;
        public IIikoBizService IikoBizService => iikoBizService.Value;
        public IIikoBizRegistrationService IikoBizRegistrationService => iikoBizRegistrationService.Value;
        public IIikoBizConnectionService IikoBizConnectionService => iikoBizConnectionService.Value;
        public IIncentiveService IncentiveService => incentiveService.Value;
        public ILicenseService LicenseService => licenseService.Value;
        public IHttpReverseTunnelProxyService HttpReverseTunnelProxyService => httpReverseTunnelProxyService.Value;
        public IPbxService PbxService => pbxService.Value;
        public IPermissionService PermissionService => permissionService.Value;
        public IReplicationService ReplicationService => replicationService.Value;
        public IReplicationMasterServerService ReplicationMasterServerService => replicationMasterServerService.Value;
        public IReplicationSlaveServerService ReplicationSlaveServerService => replicationSlaveServerService.Value;
        public ITestSalesGeneratorService TestSalesGeneratorService => testSalesGeneratorService.Value;
        public ISystemService SystemService => systemService.Value;
        public ILockTestService LockTestService => lockTestService.Value;
        public IHandshakeSettingsService HandshakeSettingsService => handshakeSettingsService.Value;
        public IDiagnosticsService DiagnosticsService => diagnosticsService.Value;
        public IWatchDogService WatchDogService => watchDogService.Value;
        public IEventsService EventsService => eventsService.Value;
        public IInformationService InformationService => informationService.Value;
        public IUsersService UsersService => usersService.Value;
    }

    public static class ServiceClientFactory
    {
        private static IServiceClientFactory? instance;
        private static IServiceClientFactory Instance
        {
            get
            {
                if (instance != null)
                    return instance;
                var services = new ServiceCollection();
                var serviceProvider = services.BuildServiceProvider();
                instance = serviceProvider.GetService<IServiceClientFactory>();
                return instance;
            }
        }

        public static IAccountingService AccountingService 
        {
            get { return Instance.AccountingService; } 
        }
        public static ICashFlowService CashFlowService 
        {
            get { return Instance.CashFlowService; } 
        }
        public static IUnpaidDocumentsService UnpaidDocumentsService 
        {
            get { return Instance.UnpaidDocumentsService; } 
        }
        public static IEntitiesService EntitiesService 
        {
            get { return Instance.EntitiesService; } 
        }
        public static IUpdateService UpdateService 
        {
            get { return Instance.UpdateService; } 
        }
        public static ICompositeUpdateService CompositeUpdateService 
        {
            get { return Instance.CompositeUpdateService; } 
        }
        public static IDocumentGroupOperationService DocumentGroupOperationService 
        {
            get { return Instance.DocumentGroupOperationService; } 
        }
        public static IDocumentService DocumentService 
        {
            get { return Instance.DocumentService; } 
        }
        public static IEmployeesService EmployeesService 
        {
            get { return Instance.EmployeesService; } 
        }
        public static IPayrollService PayrollService 
        {
            get { return Instance.PayrollService; } 
        }
        public static IEmployeesPlanningService EmployeesPlanningService 
        {
            get { return Instance.EmployeesPlanningService; } 
        }
        public static IEmployeesReportsService EmployeesReportsService 
        {
            get { return Instance.EmployeesReportsService; } 
        }
        public static IIikoCardService IikoCardService 
        {
            get { return Instance.IikoCardService; } 
        }
        public static IIikoNewsService IikoNewsService 
        {
            get { return Instance.IikoNewsService; } 
        }
        public static IImageService ImageService 
        {
            get { return Instance.ImageService; } 
        }
        public static INoticeService NoticeService 
        {
            get { return Instance.NoticeService; } 
        }
        public static IScheduledPaymentService ScheduledPaymentService 
        {
            get { return Instance.ScheduledPaymentService; } 
        }
        public static IClientPriceCategoryService ClientPriceCategoryService 
        {
            get { return Instance.ClientPriceCategoryService; } 
        }
        public static IPricingService PricingService 
        {
            get { return Instance.PricingService; } 
        }
        public static IAccountingReportsService AccountingReportsService 
        {
            get { return Instance.AccountingReportsService; } 
        }
        public static IFrontReportsService FrontReportsService 
        {
            get { return Instance.FrontReportsService; } 
        }
        public static IAnnualPnLBudgetService AnnualPnLBudgetService 
        {
            get { return Instance.AnnualPnLBudgetService; } 
        }
        public static IMonthlyPnLBudgetService MonthlyPnLBudgetService 
        {
            get { return Instance.MonthlyPnLBudgetService; } 
        }
        public static ICashFlowReportService CashFlowReportService 
        {
            get { return Instance.CashFlowReportService; } 
        }
        public static ICounteragentSummaryReportsService CounteragentSummaryReportsService 
        {
            get { return Instance.CounteragentSummaryReportsService; } 
        }
        public static IExport1CService Export1CService 
        {
            get { return Instance.Export1CService; } 
        }
        public static IFoodcostAnalysisService FoodcostAnalysisService 
        {
            get { return Instance.FoodcostAnalysisService; } 
        }
        public static IGoodMoveReportService GoodMoveReportService 
        {
            get { return Instance.GoodMoveReportService; } 
        }
        public static IOlapReportService OlapReportService 
        {
            get { return Instance.OlapReportService; } 
        }
        public static IPurchasingReportService PurchasingReportService 
        {
            get { return Instance.PurchasingReportService; } 
        }
        public static ISalesReportService SalesReportService 
        {
            get { return Instance.SalesReportService; } 
        }
        public static IReservesService ReservesService 
        {
            get { return Instance.ReservesService; } 
        }
        public static ISessionsService SessionsService 
        {
            get { return Instance.SessionsService; } 
        }
        public static ISalesAnalysisService SalesAnalysisService 
        {
            get { return Instance.SalesAnalysisService; } 
        }
        public static IAuthorizationService AuthorizationService 
        {
            get { return Instance.AuthorizationService; } 
        }
        public static IBinaryStorageService BinaryStorageService 
        {
            get { return Instance.BinaryStorageService; } 
        }
        public static IModifierSchemasService ModifierSchemasService 
        {
            get { return Instance.ModifierSchemasService; } 
        }
        public static IProductPriceFixedMarkupService ProductPriceFixedMarkupService 
        {
            get { return Instance.ProductPriceFixedMarkupService; } 
        }
        public static IProductsAssemblyChartService ProductsAssemblyChartService 
        {
            get { return Instance.ProductsAssemblyChartService; } 
        }
        public static IProductsAssemblyInfoService ProductsAssemblyInfoService 
        {
            get { return Instance.ProductsAssemblyInfoService; } 
        }
        public static IProductsService ProductsService 
        {
            get { return Instance.ProductsService; } 
        }
        public static IStoreReportsService StoreReportsService 
        {
            get { return Instance.StoreReportsService; } 
        }
        public static IStoreService StoreService 
        {
            get { return Instance.StoreService; } 
        }
        public static IAlcoholService AlcoholService 
        {
            get { return Instance.AlcoholService; } 
        }
        public static IExternalHierarchyService ExternalHierarchyService 
        {
            get { return Instance.ExternalHierarchyService; } 
        }
        public static IIncomingReturnedInvoiceService IncomingReturnedInvoiceService 
        {
            get { return Instance.IncomingReturnedInvoiceService; } 
        }
        public static IOutgoingInvoiceService OutgoingInvoiceService 
        {
            get { return Instance.OutgoingInvoiceService; } 
        }
        public static IIndependentPriceListService IndependentPriceListService 
        {
            get { return Instance.IndependentPriceListService; } 
        }
        public static ISupplierPriceListService SupplierPriceListService 
        {
            get { return Instance.SupplierPriceListService; } 
        }
        public static IStoreReplenishmentService StoreReplenishmentService 
        {
            get { return Instance.StoreReplenishmentService; } 
        }
        public static ITemplateReportService TemplateReportService 
        {
            get { return Instance.TemplateReportService; } 
        }
        public static IVatInvoiceService VatInvoiceService 
        {
            get { return Instance.VatInvoiceService; } 
        }
        public static ICorporationService CorporationService 
        {
            get { return Instance.CorporationService; } 
        }
        public static ICorporationSettingsService CorporationSettingsService 
        {
            get { return Instance.CorporationSettingsService; } 
        }
        public static IDepartmentService DepartmentService 
        {
            get { return Instance.DepartmentService; } 
        }
        public static IMenuService MenuService 
        {
            get { return Instance.MenuService; } 
        }
        public static IPriceListUpdateService PriceListUpdateService 
        {
            get { return Instance.PriceListUpdateService; } 
        }
        public static ISynchroEntityService SynchroEntityService 
        {
            get { return Instance.SynchroEntityService; } 
        }
        public static IConsolidatedOrderService ConsolidatedOrderService 
        {
            get { return Instance.ConsolidatedOrderService; } 
        }
        public static IPreparedRegisterService PreparedRegisterService 
        {
            get { return Instance.PreparedRegisterService; } 
        }
        public static IProductionOrderBlankService ProductionOrderBlankService 
        {
            get { return Instance.ProductionOrderBlankService; } 
        }
        public static IProductionService ProductionService 
        {
            get { return Instance.ProductionService; } 
        }
        public static IAgentService AgentService 
        {
            get { return Instance.AgentService; } 
        }
        public static IPaymentConstraintsManager PaymentConstraintsManager 
        {
            get { return Instance.PaymentConstraintsManager; } 
        }
        public static IRestoSetupService RestoSetupService 
        {
            get { return Instance.RestoSetupService; } 
        }
        public static ITablesEditorService TablesEditorService 
        {
            get { return Instance.TablesEditorService; } 
        }
        public static IDBMaintenanceService DBMaintenanceService 
        {
            get { return Instance.DBMaintenanceService; } 
        }
        public static IDeliveryTerminalService DeliveryTerminalService 
        {
            get { return Instance.DeliveryTerminalService; } 
        }
        public static IEdiService EdiService 
        {
            get { return Instance.EdiService; } 
        }
        public static IEgaisBalanceService EgaisBalanceService 
        {
            get { return Instance.EgaisBalanceService; } 
        }
        public static IEgaisDeclarationService EgaisDeclarationService 
        {
            get { return Instance.EgaisDeclarationService; } 
        }
        public static IEgaisDocumentsFrontService EgaisDocumentsFrontService 
        {
            get { return Instance.EgaisDocumentsFrontService; } 
        }
        public static IEgaisDocumentsService EgaisDocumentsService 
        {
            get { return Instance.EgaisDocumentsService; } 
        }
        public static IEgaisEntitiesService EgaisEntitiesService 
        {
            get { return Instance.EgaisEntitiesService; } 
        }
        public static IEgaisIncomingInvoicesService EgaisIncomingInvoicesService 
        {
            get { return Instance.EgaisIncomingInvoicesService; } 
        }
        public static IEgaisInventoryService EgaisInventoryService 
        {
            get { return Instance.EgaisInventoryService; } 
        }
        public static IEgaisInvoicesService EgaisInvoicesService 
        {
            get { return Instance.EgaisInvoicesService; } 
        }
        public static IEgaisOutgoingInvoicesService EgaisOutgoingInvoicesService 
        {
            get { return Instance.EgaisOutgoingInvoicesService; } 
        }
        public static IEgaisRepealService EgaisRepealService 
        {
            get { return Instance.EgaisRepealService; } 
        }
        public static IEgaisService EgaisService 
        {
            get { return Instance.EgaisService; } 
        }
        public static IEgaisUnsealService EgaisUnsealService 
        {
            get { return Instance.EgaisUnsealService; } 
        }
        public static IFranchiseService FranchiseService 
        {
            get { return Instance.FranchiseService; } 
        }
        public static IServiceFeeService ServiceFeeService 
        {
            get { return Instance.ServiceFeeService; } 
        }
        public static IKladrService KladrService 
        {
            get { return Instance.KladrService; } 
        }
        public static ICityService CityService 
        {
            get { return Instance.CityService; } 
        }
        public static IStreetService StreetService 
        {
            get { return Instance.StreetService; } 
        }
        public static IAnnouncementService AnnouncementService 
        {
            get { return Instance.AnnouncementService; } 
        }
        public static ICardProcessingService CardProcessingService 
        {
            get { return Instance.CardProcessingService; } 
        }
        public static IEdelweissConfigurationService EdelweissConfigurationService 
        {
            get { return Instance.EdelweissConfigurationService; } 
        }
        public static IEpitomeConfigurationService EpitomeConfigurationService 
        {
            get { return Instance.EpitomeConfigurationService; } 
        }
        public static IHoistConfigurationService HoistConfigurationService 
        {
            get { return Instance.HoistConfigurationService; } 
        }
        public static IIikoCard5SettingsService IikoCard5SettingsService 
        {
            get { return Instance.IikoCard5SettingsService; } 
        }
        public static IIikoNetService IikoNetService 
        {
            get { return Instance.IikoNetService; } 
        }
        public static ICurrencyRateService CurrencyRateService 
        {
            get { return Instance.CurrencyRateService; } 
        }
        public static ICurrencyService CurrencyService 
        {
            get { return Instance.CurrencyService; } 
        }
        public static ICustomerEvents CustomerEvents 
        {
            get { return Instance.CustomerEvents; } 
        }
        public static ICustomerService CustomerService 
        {
            get { return Instance.CustomerService; } 
        }
        public static IDeliveryService DeliveryService 
        {
            get { return Instance.DeliveryService; } 
        }
        public static IDeliveryOrderGeocodeService DeliveryOrderGeocodeService 
        {
            get { return Instance.DeliveryOrderGeocodeService; } 
        }
        public static IDeliveryHeatMapService DeliveryHeatMapService 
        {
            get { return Instance.DeliveryHeatMapService; } 
        }
        public static IBrdDataLoadingService BrdDataLoadingService 
        {
            get { return Instance.BrdDataLoadingService; } 
        }
        public static ITerminalDeliveryDurationService TerminalDeliveryDurationService 
        {
            get { return Instance.TerminalDeliveryDurationService; } 
        }
        public static IDeliveryTerminalWorkloadService DeliveryTerminalWorkloadService 
        {
            get { return Instance.DeliveryTerminalWorkloadService; } 
        }
        public static IDeliveryExternalAssignationService DeliveryExternalAssignationService 
        {
            get { return Instance.DeliveryExternalAssignationService; } 
        }
        public static IDeliveryLogisticsService DeliveryLogisticsService 
        {
            get { return Instance.DeliveryLogisticsService; } 
        }
        public static IMarketingSourceService MarketingSourceService 
        {
            get { return Instance.MarketingSourceService; } 
        }
        public static IDiscountService DiscountService 
        {
            get { return Instance.DiscountService; } 
        }
        public static ILuckyTicketService LuckyTicketService 
        {
            get { return Instance.LuckyTicketService; } 
        }
        public static IPastOrdersService PastOrdersService 
        {
            get { return Instance.PastOrdersService; } 
        }
        public static IChequeTemplateService ChequeTemplateService 
        {
            get { return Instance.ChequeTemplateService; } 
        }
        public static IStiReportService StiReportService 
        {
            get { return Instance.StiReportService; } 
        }
        public static IRegionsService RegionsService 
        {
            get { return Instance.RegionsService; } 
        }
        public static IQuickLabelsHelper QuickLabelsHelper 
        {
            get { return Instance.QuickLabelsHelper; } 
        }
        public static ISurveyItemsService SurveyItemsService 
        {
            get { return Instance.SurveyItemsService; } 
        }
        public static IServerUpgradeService ServerUpgradeService 
        {
            get { return Instance.ServerUpgradeService; } 
        }
        public static IFrontBalancesService FrontBalancesService 
        {
            get { return Instance.FrontBalancesService; } 
        }
        public static IFrontUpdateService FrontUpdateService 
        {
            get { return Instance.FrontUpdateService; } 
        }
        public static IEmailSendingService EmailSendingService 
        {
            get { return Instance.EmailSendingService; } 
        }
        public static IFindFaceService FindFaceService 
        {
            get { return Instance.FindFaceService; } 
        }
        public static ISmsSendingService SmsSendingService 
        {
            get { return Instance.SmsSendingService; } 
        }
        public static IIikoBizService IikoBizService 
        {
            get { return Instance.IikoBizService; } 
        }
        public static IIikoBizRegistrationService IikoBizRegistrationService 
        {
            get { return Instance.IikoBizRegistrationService; } 
        }
        public static IIikoBizConnectionService IikoBizConnectionService 
        {
            get { return Instance.IikoBizConnectionService; } 
        }
        public static IIncentiveService IncentiveService 
        {
            get { return Instance.IncentiveService; } 
        }
        public static ILicenseService LicenseService 
        {
            get { return Instance.LicenseService; } 
        }
        public static IHttpReverseTunnelProxyService HttpReverseTunnelProxyService 
        {
            get { return Instance.HttpReverseTunnelProxyService; } 
        }
        public static IPbxService PbxService 
        {
            get { return Instance.PbxService; } 
        }
        public static IPermissionService PermissionService 
        {
            get { return Instance.PermissionService; } 
        }
        public static IReplicationService ReplicationService 
        {
            get { return Instance.ReplicationService; } 
        }
        public static IReplicationMasterServerService ReplicationMasterServerService 
        {
            get { return Instance.ReplicationMasterServerService; } 
        }
        public static IReplicationSlaveServerService ReplicationSlaveServerService 
        {
            get { return Instance.ReplicationSlaveServerService; } 
        }
        public static ITestSalesGeneratorService TestSalesGeneratorService 
        {
            get { return Instance.TestSalesGeneratorService; } 
        }
        public static ISystemService SystemService 
        {
            get { return Instance.SystemService; } 
        }
        public static ILockTestService LockTestService 
        {
            get { return Instance.LockTestService; } 
        }
        public static IHandshakeSettingsService HandshakeSettingsService 
        {
            get { return Instance.HandshakeSettingsService; } 
        }
        public static IDiagnosticsService DiagnosticsService 
        {
            get { return Instance.DiagnosticsService; } 
        }
        public static IWatchDogService WatchDogService 
        {
            get { return Instance.WatchDogService; } 
        }
        public static IEventsService EventsService 
        {
            get { return Instance.EventsService; } 
        }
        public static IInformationService InformationService 
        {
            get { return Instance.InformationService; } 
        }
        public static IUsersService UsersService 
        {
            get { return Instance.UsersService; } 
        }
    }
    public interface IAccountingService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddOrderType(ByValue<OrderType> orderType);
        IServiceMethodCall<ICollection<AccountingTransaction>> AddPayInOrOutByDepartments(Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, User counterAgent, Account corrAccount, Dictionary<DepartmentEntity, decimal> departmentSumMap, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment);
        IServiceMethodCall<Dictionary<User, AccountingTransaction>> AddPayInOrOutForListEmployees(Dictionary<User, decimal> userPays, Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, Account corrAccount, DepartmentEntity department, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment);
        IServiceMethodCall<object> AddPayInOutType(ByValue<PayInOutType> payInOutType);
        IServiceMethodCall<object> AddPaymentType(ByValue<PaymentType> paymentType, int? LocalId);
        IServiceMethodCall<object> AddRemovalType(ByValue<RemovalType> removalType, int? LocalId);
        IServiceMethodCall<Account> CreateAccount(ByValue<Account> account, bool deleted, DateTime? openingDate, decimal? openingBalance);
        IServiceMethodCall<object> CreateOrUpdatePaymentTypes(List<ByValue<PaymentType>> paymentType);
        IServiceMethodCall<object> DeleteOrderType(OrderType orderType);
        IServiceMethodCall<object> DeletePayInOutType(PayInOutType payInOutType);
        IServiceMethodCall<object> DeletePaymentType(PaymentType paymentType, bool delete);
        IServiceMethodCall<object> DeleteRegisterRecord(Guid? id);
        IServiceMethodCall<object> DeleteRegisterRecords(HashSet<Guid> records);
        IServiceMethodCall<object> DeleteRemovalType(RemovalType removalType, bool delete);
        IServiceMethodCall<decimal?> GetAccountBalanceForCounteragent(DateTime? dateAt, Account account, User counteragent);
        IServiceMethodCall<decimal?> GetAccountBalanceForDepartment(DateTime? dateAt, Account account, DepartmentEntity department);
        IServiceMethodCall<decimal?> GetAccountBalanceForDepartmentAndCounteragent(DateTime? dateAt, Account account, DepartmentEntity department, User counteragent);
        IServiceMethodCall<Dictionary<Account, decimal>> GetAccountsBalanceForDepartments(DateTime? dateAt, List<DepartmentEntity> department);
        IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>> GetCashAccountsBalanceByDepartments(DateTime? dateAt, List<DepartmentEntity> departments);
        IServiceMethodCall<DateTime?> GetLastAccountUpdate(Account account, User counteragent);
        IServiceMethodCall<List<AccountRecordList>> GetRegisterRecordLists(HashSet<Account> accounts, DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, HashSet<Conception> conceptions);
        IServiceMethodCall<AccountRecordList> GetRegisterRecordsByDepartments(Account account, DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments);
        IServiceMethodCall<AccountRecordList> GetRegisterRecordsByPayroll(Guid? payrollId, ICollection<User> employees);
        IServiceMethodCall<ICollection<AccountingTransaction>> GetTransactionsByDocumentId(Guid? documentId);
        IServiceMethodCall<ICollection<AccountingTransaction>> GetTransactionsById(List<Guid> transactionIds);
        IServiceMethodCall<AccountRecordList> GetVerificationActRecordList(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments);
        IServiceMethodCall<object> ImportBankStatements(List<BankStatementTransaction> bankStatementTransaction);
        IServiceMethodCall<object> SetAccountDeleted(Account account, bool deleted, bool undoDelete);
        IServiceMethodCall<object> UndeleteOrderType(OrderType orderType);
        IServiceMethodCall<object> UndeletePayInOutType(PayInOutType payInOutType);
        IServiceMethodCall<object> UpdateAccount(ByValue<Account> account, decimal? startBalanceSum, DateTime? startBalanceDate, bool? startBalanceChanged);
        IServiceMethodCall<object> UpdateOrderType(ByValue<OrderType> orderType);
        IServiceMethodCall<object> UpdatePayInOutType(ByValue<PayInOutType> payInOutType);
        IServiceMethodCall<object> UpdatePaymentSystem(ByValue<PaymentSystem> paymentSystem);
        IServiceMethodCall<object> UpdatePaymentType(ByValue<PaymentType> paymentType, int? LocalId);
        IServiceMethodCall<object> UpdateRegisterRecords(Account account, List<AccountRegisterRecord> recordsToUpdate, List<AccountRegisterRecord> recordsToAdd);
        IServiceMethodCall<object> UpdateRemovalType(ByValue<RemovalType> removalType, int? LocalId);
        #endregion

        #region asynchronous version
        void AddOrderType(ByValue<OrderType> orderType, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddPayInOrOutByDepartments(Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, User counterAgent, Account corrAccount, Dictionary<DepartmentEntity, decimal> departmentSumMap, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, AsyncErrorHandler errorHandler, Action<ICollection<AccountingTransaction>> resultHandler);
        void AddPayInOrOutForListEmployees(Dictionary<User, decimal> userPays, Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, Account corrAccount, DepartmentEntity department, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, AsyncErrorHandler errorHandler, Action<Dictionary<User, AccountingTransaction>> resultHandler);
        void AddPayInOutType(ByValue<PayInOutType> payInOutType, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddPaymentType(ByValue<PaymentType> paymentType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddRemovalType(ByValue<RemovalType> removalType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateAccount(ByValue<Account> account, bool deleted, DateTime? openingDate, decimal? openingBalance, AsyncErrorHandler errorHandler, Action<Account> resultHandler);
        void CreateOrUpdatePaymentTypes(List<ByValue<PaymentType>> paymentType, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteOrderType(OrderType orderType, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeletePayInOutType(PayInOutType payInOutType, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeletePaymentType(PaymentType paymentType, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteRegisterRecord(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteRegisterRecords(HashSet<Guid> records, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteRemovalType(RemovalType removalType, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetAccountBalanceForCounteragent(DateTime? dateAt, Account account, User counteragent, AsyncErrorHandler errorHandler, Action<decimal?> resultHandler);
        void GetAccountBalanceForDepartment(DateTime? dateAt, Account account, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<decimal?> resultHandler);
        void GetAccountBalanceForDepartmentAndCounteragent(DateTime? dateAt, Account account, DepartmentEntity department, User counteragent, AsyncErrorHandler errorHandler, Action<decimal?> resultHandler);
        void GetAccountsBalanceForDepartments(DateTime? dateAt, List<DepartmentEntity> department, AsyncErrorHandler errorHandler, Action<Dictionary<Account, decimal>> resultHandler);
        void GetCashAccountsBalanceByDepartments(DateTime? dateAt, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>> resultHandler);
        void GetLastAccountUpdate(Account account, User counteragent, AsyncErrorHandler errorHandler, Action<DateTime?> resultHandler);
        void GetRegisterRecordLists(HashSet<Account> accounts, DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, HashSet<Conception> conceptions, AsyncErrorHandler errorHandler, Action<List<AccountRecordList>> resultHandler);
        void GetRegisterRecordsByDepartments(Account account, DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<AccountRecordList> resultHandler);
        void GetRegisterRecordsByPayroll(Guid? payrollId, ICollection<User> employees, AsyncErrorHandler errorHandler, Action<AccountRecordList> resultHandler);
        void GetTransactionsByDocumentId(Guid? documentId, AsyncErrorHandler errorHandler, Action<ICollection<AccountingTransaction>> resultHandler);
        void GetTransactionsById(List<Guid> transactionIds, AsyncErrorHandler errorHandler, Action<ICollection<AccountingTransaction>> resultHandler);
        void GetVerificationActRecordList(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<AccountRecordList> resultHandler);
        void ImportBankStatements(List<BankStatementTransaction> bankStatementTransaction, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetAccountDeleted(Account account, bool deleted, bool undoDelete, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeleteOrderType(OrderType orderType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeletePayInOutType(PayInOutType payInOutType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateAccount(ByValue<Account> account, decimal? startBalanceSum, DateTime? startBalanceDate, bool? startBalanceChanged, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateOrderType(ByValue<OrderType> orderType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdatePayInOutType(ByValue<PayInOutType> payInOutType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdatePaymentSystem(ByValue<PaymentSystem> paymentSystem, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdatePaymentType(ByValue<PaymentType> paymentType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateRegisterRecords(Account account, List<AccountRegisterRecord> recordsToUpdate, List<AccountRegisterRecord> recordsToAdd, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateRemovalType(ByValue<RemovalType> removalType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AddOrderType(ByValue<OrderType> orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<AccountingTransaction>> AddPayInOrOutByDepartments(Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, User counterAgent, Account corrAccount, Dictionary<DepartmentEntity, decimal> departmentSumMap, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<User, AccountingTransaction>> AddPayInOrOutForListEmployees(Dictionary<User, decimal> userPays, Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, Account corrAccount, DepartmentEntity department, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddPayInOutType(ByValue<PayInOutType> payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddPaymentType(ByValue<PaymentType> paymentType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddRemovalType(ByValue<RemovalType> removalType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Account> CreateAccount(ByValue<Account> account, bool deleted, DateTime? openingDate, decimal? openingBalance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdatePaymentTypes(List<ByValue<PaymentType>> paymentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteOrderType(OrderType orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeletePayInOutType(PayInOutType payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeletePaymentType(PaymentType paymentType, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteRegisterRecord(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteRegisterRecords(HashSet<Guid> records, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteRemovalType(RemovalType removalType, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<decimal?> GetAccountBalanceForCounteragent(DateTime? dateAt, Account account, User counteragent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<decimal?> GetAccountBalanceForDepartment(DateTime? dateAt, Account account, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<decimal?> GetAccountBalanceForDepartmentAndCounteragent(DateTime? dateAt, Account account, DepartmentEntity department, User counteragent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Account, decimal>> GetAccountsBalanceForDepartments(DateTime? dateAt, List<DepartmentEntity> department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>> GetCashAccountsBalanceByDepartments(DateTime? dateAt, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DateTime?> GetLastAccountUpdate(Account account, User counteragent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AccountRecordList>> GetRegisterRecordLists(HashSet<Account> accounts, DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, HashSet<Conception> conceptions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AccountRecordList> GetRegisterRecordsByDepartments(Account account, DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AccountRecordList> GetRegisterRecordsByPayroll(Guid? payrollId, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<AccountingTransaction>> GetTransactionsByDocumentId(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<AccountingTransaction>> GetTransactionsById(List<Guid> transactionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AccountRecordList> GetVerificationActRecordList(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ImportBankStatements(List<BankStatementTransaction> bankStatementTransaction, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetAccountDeleted(Account account, bool deleted, bool undoDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteOrderType(OrderType orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeletePayInOutType(PayInOutType payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateAccount(ByValue<Account> account, decimal? startBalanceSum, DateTime? startBalanceDate, bool? startBalanceChanged, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateOrderType(ByValue<OrderType> orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdatePayInOutType(ByValue<PayInOutType> payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdatePaymentSystem(ByValue<PaymentSystem> paymentSystem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdatePaymentType(ByValue<PaymentType> paymentType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateRegisterRecords(Account account, List<AccountRegisterRecord> recordsToUpdate, List<AccountRegisterRecord> recordsToAdd, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateRemovalType(ByValue<RemovalType> removalType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICashFlowService
    {
        #region Synchronous versions
        IServiceMethodCall<CashFlowCategory> CreateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue);
        IServiceMethodCall<object> SetCashFlowCategoriesDeleted(ICollection<CashFlowCategory> categories, bool deleted);
        IServiceMethodCall<CashFlowCategory> UpdateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue);
        #endregion

        #region asynchronous version
        void CreateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, AsyncErrorHandler errorHandler, Action<CashFlowCategory> resultHandler);
        void SetCashFlowCategoriesDeleted(ICollection<CashFlowCategory> categories, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, AsyncErrorHandler errorHandler, Action<CashFlowCategory> resultHandler);
        #endregion
        #region task version
        Task<CashFlowCategory> CreateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCashFlowCategoriesDeleted(ICollection<CashFlowCategory> categories, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CashFlowCategory> UpdateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IUnpaidDocumentsService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetAllUnpaidDocuments(DateTime? dateFrom, DateTime? dateTo, User counterparty, HashSet<DepartmentEntity> departmentsSet, bool useDueDate);
        IServiceMethodCall<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>> GetAvailableUnpaidDocuments(HashSet<User> counterparties, HashSet<DepartmentEntity> departmentsSet, DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<Dictionary<Account, DateInterval>> GetPaymentTransactionsFilter(Guid? documentId, DocumentType docType);
        IServiceMethodCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidInvoicesByDepartments(DateTime? dateFrom, DateTime? dateTo, User user, HashSet<DepartmentEntity> departmentsSet, bool useDueDate);
        IServiceMethodCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidOutgoingDocuments(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departmentsSet, bool useDueDate);
        IServiceMethodCall<DocumentPaymentInfo> GetUnpaidSumForAGivenInvoice(User user, Guid? documentId, DocumentType docmentType);
        IServiceMethodCall<List<AccountingTransaction>> SetPaymentsForInvoices(List<InvoicePaymentItem> invoices, bool isConsolidatedReport);
        IServiceMethodCall<List<AccountingTransaction>> SetPaymentsForOutgoingDocuments(List<OutgoingDocumentPaymentItem> payments, bool isConsolidatedReport);
        #endregion

        #region asynchronous version
        void GetAllUnpaidDocuments(DateTime? dateFrom, DateTime? dateTo, User counterparty, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, AsyncErrorHandler errorHandler, Action<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> resultHandler);
        void GetAvailableUnpaidDocuments(HashSet<User> counterparties, HashSet<DepartmentEntity> departmentsSet, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>> resultHandler);
        void GetPaymentTransactionsFilter(Guid? documentId, DocumentType docType, AsyncErrorHandler errorHandler, Action<Dictionary<Account, DateInterval>> resultHandler);
        void GetUnpaidInvoicesByDepartments(DateTime? dateFrom, DateTime? dateTo, User user, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, AsyncErrorHandler errorHandler, Action<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> resultHandler);
        void GetUnpaidOutgoingDocuments(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, AsyncErrorHandler errorHandler, Action<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> resultHandler);
        void GetUnpaidSumForAGivenInvoice(User user, Guid? documentId, DocumentType docmentType, AsyncErrorHandler errorHandler, Action<DocumentPaymentInfo> resultHandler);
        void SetPaymentsForInvoices(List<InvoicePaymentItem> invoices, bool isConsolidatedReport, AsyncErrorHandler errorHandler, Action<List<AccountingTransaction>> resultHandler);
        void SetPaymentsForOutgoingDocuments(List<OutgoingDocumentPaymentItem> payments, bool isConsolidatedReport, AsyncErrorHandler errorHandler, Action<List<AccountingTransaction>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetAllUnpaidDocuments(DateTime? dateFrom, DateTime? dateTo, User counterparty, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>> GetAvailableUnpaidDocuments(HashSet<User> counterparties, HashSet<DepartmentEntity> departmentsSet, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Account, DateInterval>> GetPaymentTransactionsFilter(Guid? documentId, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidInvoicesByDepartments(DateTime? dateFrom, DateTime? dateTo, User user, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidOutgoingDocuments(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentPaymentInfo> GetUnpaidSumForAGivenInvoice(User user, Guid? documentId, DocumentType docmentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AccountingTransaction>> SetPaymentsForInvoices(List<InvoicePaymentItem> invoices, bool isConsolidatedReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AccountingTransaction>> SetPaymentsForOutgoingDocuments(List<OutgoingDocumentPaymentItem> payments, bool isConsolidatedReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEntitiesService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<ByValue<PersistedEntity>>> GetEntitiesByIds(List<Guid> ids);
        IServiceMethodCall<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, List<string> classNames);
        IServiceMethodCall<EntitiesUpdate> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, List<string> classNames);
        #endregion

        #region asynchronous version
        void GetEntitiesByIds(List<Guid> ids, AsyncErrorHandler errorHandler, Action<ICollection<ByValue<PersistedEntity>>> resultHandler);
        void GetEntitiesUpdate(int fromRevision, List<string> classNames, AsyncErrorHandler errorHandler, Action<EntitiesUpdate> resultHandler);
        void WaitEntitiesUpdate(int fromRevision, int timeoutMillis, List<string> classNames, AsyncErrorHandler errorHandler, Action<EntitiesUpdate> resultHandler);
        #endregion
        #region task version
        Task<ICollection<ByValue<PersistedEntity>>> GetEntitiesByIds(List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, List<string> classNames, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EntitiesUpdate> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, List<string> classNames, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IUpdateService
    {
        #region Synchronous versions
        IServiceMethodCall<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities);
        IServiceMethodCall<object> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities);
        #endregion

        #region asynchronous version
        void GetEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, AsyncErrorHandler errorHandler, Action<EntitiesUpdate> resultHandler);
        void WaitEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICompositeUpdateService
    {
        #region Synchronous versions
        IServiceMethodCall<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateCached(int revision, DepartmentEntity department);
        IServiceMethodCall<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateForced(int revision, DepartmentEntity department);
        IServiceMethodCall<FrontCompositeUpdate> GetFrontCompositeUpdateCached(int revision);
        #endregion

        #region asynchronous version
        void GetBackOfficeNomenclatureUpdateCached(int revision, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<BackOfficeNomenclatureUpdate> resultHandler);
        void GetBackOfficeNomenclatureUpdateForced(int revision, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<BackOfficeNomenclatureUpdate> resultHandler);
        void GetFrontCompositeUpdateCached(int revision, AsyncErrorHandler errorHandler, Action<FrontCompositeUpdate> resultHandler);
        #endregion
        #region task version
        Task<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateCached(int revision, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateForced(int revision, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<FrontCompositeUpdate> GetFrontCompositeUpdateCached(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDocumentGroupOperationService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> DeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> ProcessDocuments(Dictionary<Guid, DocumentType> documentIds);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UnDeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UndoProcessDocuments(Dictionary<Guid, DocumentType> documentIds);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UpdateDocuments(List<AbstractDocument> documents);
        #endregion

        #region asynchronous version
        void DeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        void ProcessDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        void UnDeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        void UndoProcessDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        void UpdateDocuments(List<AbstractDocument> documents, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<Guid, DocumentValidationResult>> DeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> ProcessDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> UnDeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> UndoProcessDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> UpdateDocuments(List<AbstractDocument> documents, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDocumentService
    {
        #region Synchronous versions
        IServiceMethodCall<bool?> DeleteIncomingDocument(Guid? documentId, DocumentType docType);
        IServiceMethodCall<object> DuplicateAndProcessNontypedDocumentsByIds(ICollection<Guid> oldDocuments, Dictionary<Store, Store> storesMapping);
        IServiceMethodCall<AbstractDocument> DuplicateDocument(DocumentType type, Guid? documentId);
        IServiceMethodCall<bool> ExistUnprocessedSalesDocuments(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores);
        IServiceMethodCall<ICollection<PartiallyProcessableDocument>> GenerateDocumentsForSessions(ICollection<Guid> sessionIds);
        IServiceMethodCall<AbstractDocument> GetAbstractDocument(Guid? id);
        IServiceMethodCall<ICollection<AbstractDocument>> GetAbstractDocuments(ICollection<Guid> documentIds);
        IServiceMethodCall<Dictionary<Guid, string>> GetDeliveryAddresses(ICollection<Guid> outgoingInvoices);
        IServiceMethodCall<AbstractDocument> GetDocument(DocumentType docType, Guid? id);
        IServiceMethodCall<Dictionary<Guid, decimal>> GetDocumentItemsCosts(Guid? documentId);
        IServiceMethodCall<Dictionary<Guid, PricingInfo>> GetDocumentItemsPricing(Guid? documentId, PricingParameters pricingParameters);
        IServiceMethodCall<List<StoreTransactionInfo>> GetDocumentTransactions(Guid? documentId, HashSet<Guid> documentItemIds);
        IServiceMethodCall<List<AbstractDocument>> GetDocuments(DocumentType docType, List<Guid> ids);
        IServiceMethodCall<ICollection<AbstractStoreDocument>> GetDocumentsByIds(ICollection<Guid> oldDocuments);
        IServiceMethodCall<List<AbstractDocument>> GetDocumentsByTypeList(List<DocumentType> docTypes, List<Guid> ids);
        IServiceMethodCall<Dictionary<DocumentType, List<AbstractDocument>>> GetDocumentsByTypes(Dictionary<DocumentType, List<Guid>> typeIds);
        IServiceMethodCall<Dictionary<Guid, decimal>> GetDocumentsItemsCosts(List<Guid> documentsIds);
        IServiceMethodCall<ICollection<Store>> GetDocumentsStoresByIds(ICollection<Guid> documents);
        IServiceMethodCall<Dictionary<Guid, List<StoreTransactionInfo>>> GetDocumentsTransactions(ICollection<Guid> documentIds);
        IServiceMethodCall<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType docType);
        IServiceMethodCall<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByDepartments(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, HashSet<DepartmentEntity> departmentsSet);
        IServiceMethodCall<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByIds(DocumentType docType, List<Guid> ids);
        IServiceMethodCall<Dictionary<DocumentType, List<AbstractDocumentListRecord>>> GetIncomingDocumentsRecordsByParams(DateTime? dateFrom, DateTime? dateTo, HashSet<DocumentType> docType, HashSet<DepartmentEntity> departments, HashSet<DocumentStatus> statuses, bool withAlcoholClassOnly);
        IServiceMethodCall<List<InvoiceDocumentSimpleListRecord>> GetInvoiceDocumentSimpleRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType documentType, ICollection<DocumentStatus> statuses, HashSet<DepartmentEntity> departments, bool onlyWithSupplier);
        IServiceMethodCall<Guid?> GetLinkedOutgoingInvoiceIdByIncoming(Guid? incomingInvoiceId);
        IServiceMethodCall<string> GetNewDocumentNumber(AbstractDocument document);
        IServiceMethodCall<string> GetNextDocumentNumber(DocumentType documentType);
        IServiceMethodCall<List<string>> GetNextDocumentNumbers(DocumentType documentType, int documentCount);
        IServiceMethodCall<ICollection<DocumentNumberingAutoincrementValues>> GetNumberingAutoIncrementValues();
        IServiceMethodCall<bool> IsAccountingOnlyInChain();
        IServiceMethodCall<DocumentValidationResult> SaveDocumentNumberWithValidation(StubDocument stubDocument);
        IServiceMethodCall<DocumentValidationResult> SaveOrUpdateDocument(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings);
        IServiceMethodCall<DocumentValidationResult> SaveOrUpdateDocumentWithValidation(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings);
        IServiceMethodCall<object> SaveOrUpdateNumberingSettings(ICollection<ByValue<DocumentNumberingSettings>> settings);
        IServiceMethodCall<object> SetNumberingAutoIncrementValues(ICollection<DocumentNumberingAutoincrementValues> Values);
        IServiceMethodCall<object> UnDeleteIncomingDocument(Guid? documentId, DocumentType docType);
        IServiceMethodCall<object> UndoProcessDocument(Guid? documentId, DocumentType documentType);
        IServiceMethodCall<object> UpdateDefaultInvoiceAccounts(Account revenueAccount, Account accountTo);
        IServiceMethodCall<object> UpdateReportOfQualitySettings(ReportOfQualitySettings setting);
        IServiceMethodCall<DocumentValidationResult> ValidateAutomaticNotProcessedDocumentsAbsence(DateTime? dateFrom);
        IServiceMethodCall<DocumentValidationResult> ValidateDocumentNumber(AbstractDocument document);
        #endregion

        #region asynchronous version
        void DeleteIncomingDocument(Guid? documentId, DocumentType docType, AsyncErrorHandler errorHandler, Action<bool?> resultHandler);
        void DuplicateAndProcessNontypedDocumentsByIds(ICollection<Guid> oldDocuments, Dictionary<Store, Store> storesMapping, AsyncErrorHandler errorHandler, Action resultHandler);
        void DuplicateDocument(DocumentType type, Guid? documentId, AsyncErrorHandler errorHandler, Action<AbstractDocument> resultHandler);
        void ExistUnprocessedSalesDocuments(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void GenerateDocumentsForSessions(ICollection<Guid> sessionIds, AsyncErrorHandler errorHandler, Action<ICollection<PartiallyProcessableDocument>> resultHandler);
        void GetAbstractDocument(Guid? id, AsyncErrorHandler errorHandler, Action<AbstractDocument> resultHandler);
        void GetAbstractDocuments(ICollection<Guid> documentIds, AsyncErrorHandler errorHandler, Action<ICollection<AbstractDocument>> resultHandler);
        void GetDeliveryAddresses(ICollection<Guid> outgoingInvoices, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, string>> resultHandler);
        void GetDocument(DocumentType docType, Guid? id, AsyncErrorHandler errorHandler, Action<AbstractDocument> resultHandler);
        void GetDocumentItemsCosts(Guid? documentId, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, decimal>> resultHandler);
        void GetDocumentItemsPricing(Guid? documentId, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, PricingInfo>> resultHandler);
        void GetDocumentTransactions(Guid? documentId, HashSet<Guid> documentItemIds, AsyncErrorHandler errorHandler, Action<List<StoreTransactionInfo>> resultHandler);
        void GetDocuments(DocumentType docType, List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler);
        void GetDocumentsByIds(ICollection<Guid> oldDocuments, AsyncErrorHandler errorHandler, Action<ICollection<AbstractStoreDocument>> resultHandler);
        void GetDocumentsByTypeList(List<DocumentType> docTypes, List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler);
        void GetDocumentsByTypes(Dictionary<DocumentType, List<Guid>> typeIds, AsyncErrorHandler errorHandler, Action<Dictionary<DocumentType, List<AbstractDocument>>> resultHandler);
        void GetDocumentsItemsCosts(List<Guid> documentsIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, decimal>> resultHandler);
        void GetDocumentsStoresByIds(ICollection<Guid> documents, AsyncErrorHandler errorHandler, Action<ICollection<Store>> resultHandler);
        void GetDocumentsTransactions(ICollection<Guid> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, List<StoreTransactionInfo>>> resultHandler);
        void GetIncomingDocumentsRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, AsyncErrorHandler errorHandler, Action<List<AbstractDocumentListRecord>> resultHandler);
        void GetIncomingDocumentsRecordsByDepartments(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, HashSet<DepartmentEntity> departmentsSet, AsyncErrorHandler errorHandler, Action<List<AbstractDocumentListRecord>> resultHandler);
        void GetIncomingDocumentsRecordsByIds(DocumentType docType, List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<AbstractDocumentListRecord>> resultHandler);
        void GetIncomingDocumentsRecordsByParams(DateTime? dateFrom, DateTime? dateTo, HashSet<DocumentType> docType, HashSet<DepartmentEntity> departments, HashSet<DocumentStatus> statuses, bool withAlcoholClassOnly, AsyncErrorHandler errorHandler, Action<Dictionary<DocumentType, List<AbstractDocumentListRecord>>> resultHandler);
        void GetInvoiceDocumentSimpleRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType documentType, ICollection<DocumentStatus> statuses, HashSet<DepartmentEntity> departments, bool onlyWithSupplier, AsyncErrorHandler errorHandler, Action<List<InvoiceDocumentSimpleListRecord>> resultHandler);
        void GetLinkedOutgoingInvoiceIdByIncoming(Guid? incomingInvoiceId, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        void GetNewDocumentNumber(AbstractDocument document, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetNextDocumentNumber(DocumentType documentType, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetNextDocumentNumbers(DocumentType documentType, int documentCount, AsyncErrorHandler errorHandler, Action<List<string>> resultHandler);
        void GetNumberingAutoIncrementValues(AsyncErrorHandler errorHandler, Action<ICollection<DocumentNumberingAutoincrementValues>> resultHandler);
        void IsAccountingOnlyInChain(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void SaveDocumentNumberWithValidation(StubDocument stubDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        void SaveOrUpdateDocument(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        void SaveOrUpdateDocumentWithValidation(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        void SaveOrUpdateNumberingSettings(ICollection<ByValue<DocumentNumberingSettings>> settings, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetNumberingAutoIncrementValues(ICollection<DocumentNumberingAutoincrementValues> Values, AsyncErrorHandler errorHandler, Action resultHandler);
        void UnDeleteIncomingDocument(Guid? documentId, DocumentType docType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndoProcessDocument(Guid? documentId, DocumentType documentType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDefaultInvoiceAccounts(Account revenueAccount, Account accountTo, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateReportOfQualitySettings(ReportOfQualitySettings setting, AsyncErrorHandler errorHandler, Action resultHandler);
        void ValidateAutomaticNotProcessedDocumentsAbsence(DateTime? dateFrom, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        void ValidateDocumentNumber(AbstractDocument document, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        #endregion
        #region task version
        Task<bool?> DeleteIncomingDocument(Guid? documentId, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DuplicateAndProcessNontypedDocumentsByIds(ICollection<Guid> oldDocuments, Dictionary<Store, Store> storesMapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AbstractDocument> DuplicateDocument(DocumentType type, Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> ExistUnprocessedSalesDocuments(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PartiallyProcessableDocument>> GenerateDocumentsForSessions(ICollection<Guid> sessionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AbstractDocument> GetAbstractDocument(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<AbstractDocument>> GetAbstractDocuments(ICollection<Guid> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, string>> GetDeliveryAddresses(ICollection<Guid> outgoingInvoices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AbstractDocument> GetDocument(DocumentType docType, Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, decimal>> GetDocumentItemsCosts(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, PricingInfo>> GetDocumentItemsPricing(Guid? documentId, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<StoreTransactionInfo>> GetDocumentTransactions(Guid? documentId, HashSet<Guid> documentItemIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractDocument>> GetDocuments(DocumentType docType, List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<AbstractStoreDocument>> GetDocumentsByIds(ICollection<Guid> oldDocuments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractDocument>> GetDocumentsByTypeList(List<DocumentType> docTypes, List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DocumentType, List<AbstractDocument>>> GetDocumentsByTypes(Dictionary<DocumentType, List<Guid>> typeIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, decimal>> GetDocumentsItemsCosts(List<Guid> documentsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<Store>> GetDocumentsStoresByIds(ICollection<Guid> documents, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, List<StoreTransactionInfo>>> GetDocumentsTransactions(ICollection<Guid> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByDepartments(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, HashSet<DepartmentEntity> departmentsSet, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByIds(DocumentType docType, List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DocumentType, List<AbstractDocumentListRecord>>> GetIncomingDocumentsRecordsByParams(DateTime? dateFrom, DateTime? dateTo, HashSet<DocumentType> docType, HashSet<DepartmentEntity> departments, HashSet<DocumentStatus> statuses, bool withAlcoholClassOnly, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<InvoiceDocumentSimpleListRecord>> GetInvoiceDocumentSimpleRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType documentType, ICollection<DocumentStatus> statuses, HashSet<DepartmentEntity> departments, bool onlyWithSupplier, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Guid?> GetLinkedOutgoingInvoiceIdByIncoming(Guid? incomingInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetNewDocumentNumber(AbstractDocument document, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetNextDocumentNumber(DocumentType documentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<string>> GetNextDocumentNumbers(DocumentType documentType, int documentCount, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<DocumentNumberingAutoincrementValues>> GetNumberingAutoIncrementValues([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsAccountingOnlyInChain([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> SaveDocumentNumberWithValidation(StubDocument stubDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> SaveOrUpdateDocument(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> SaveOrUpdateDocumentWithValidation(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateNumberingSettings(ICollection<ByValue<DocumentNumberingSettings>> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetNumberingAutoIncrementValues(ICollection<DocumentNumberingAutoincrementValues> Values, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UnDeleteIncomingDocument(Guid? documentId, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndoProcessDocument(Guid? documentId, DocumentType documentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDefaultInvoiceAccounts(Account revenueAccount, Account accountTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateReportOfQualitySettings(ReportOfQualitySettings setting, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> ValidateAutomaticNotProcessedDocumentsAbsence(DateTime? dateFrom, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> ValidateDocumentNumber(AbstractDocument document, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEmployeesService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<User, AccountingTransaction>> AddAdvanceForListEmployees(Dictionary<User, decimal> userAdvances, DateTime? date, Account account, User counteragent, DepartmentEntity department, string comment, CashFlowCategory cashFlowCategory, Guid? payrollId);
        IServiceMethodCall<object> AddAttendanceEntry(EmployeeAttendanceEntry attendanceEntry);
        IServiceMethodCall<object> AddAttendanceType(ByValue<AttendanceType> removalType);
        IServiceMethodCall<object> AddOrUpdateScheduleItems(Dictionary<EmployeeScheduleItem, bool> items);
        IServiceMethodCall<PenaltyOrBonusInfo> AddPenaltyOrBonusTransaction(User user, DateInfo date, PenaltyOrBonusType type, decimal? sum, string comment, DepartmentEntity department);
        IServiceMethodCall<object> AddPenaltyOrBonusTransactionForListEmployees(Dictionary<User, decimal> userPays, DateInfo date, PenaltyOrBonusType type, string comment, DepartmentEntity department);
        IServiceMethodCall<object> AddPenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType);
        IServiceMethodCall<Role> AddRole(ByValue<Role> role);
        IServiceMethodCall<EmployeeScheduleItem> AddScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance);
        IServiceMethodCall<EmployeeScheduleItem> AddScheduleItemByType(Guid? itemId, ScheduleType type, User user, DateInfo scheduleDate, DepartmentEntity department, bool createAttendance);
        IServiceMethodCall<ScheduleType> AddSessionTimetable(ByValue<ScheduleType> product);
        IServiceMethodCall<PenaltyOrBonusInfo> CancelPenaltyOrBonusTransaction(Guid? id, string comment);
        IServiceMethodCall<object> CreateMedicalAnalysis(ByValue<MedicalAnalysisType> entity);
        IServiceMethodCall<object> DeleteAttendanceEntry(Guid? attendanceEntryId);
        IServiceMethodCall<object> DeleteAttendanceType(AttendanceType attendanceType, bool delete);
        IServiceMethodCall<object> DeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType);
        IServiceMethodCall<object> DeleteRole(Role role);
        IServiceMethodCall<object> DeleteScheduleItem(Guid? id);
        IServiceMethodCall<object> DeleteScheduleItems(ICollection<Guid> delete);
        IServiceMethodCall<object> DeleteSessionTimetable(ScheduleType timetable);
        IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntries(DateTime? dateFrom, DateTime? dateTo, bool? includeAll);
        IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee);
        IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<ICollection<EmployeeScheduleItem>> GetAllScheduleItems(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee);
        IServiceMethodCall<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployees(DateTime? dateFrom, DateTime? dateTo, ICollection<User> employees);
        IServiceMethodCall<AttendanceType> GetDefaultAttendanceTypeFor(DateTime? dateFrom, DateTime? dateTo, User employee);
        IServiceMethodCall<Dictionary<User, decimal>> GetDepositsForUsers(DateTime? date, HashSet<User> users);
        IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetEmployeeAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, User employee);
        IServiceMethodCall<ICollection<PaymentStrategy>> GetPaymentStrategies(DateTime? date, ICollection<User> users);
        IServiceMethodCall<Dictionary<User, PaymentStrategy>> GetPaymentStrategiesForDepartment(DateTime? date, DepartmentEntity department);
        IServiceMethodCall<ICollection<PaymentStrategy>> GetPaymentStrategiesHistory(Guid? user);
        IServiceMethodCall<List<PenaltyOrBonusInfo>> GetPenaltyOrBonusTransactions(User user, DateInfo dateFrom, DateInfo dateTo, ICollection<DepartmentEntity> departments, HashSet<PenaltyOrBonus> types);
        IServiceMethodCall<object> GroupedUpdatePaymentStrategies(HashSet<User> employees, DateTime? dateFrom, List<PaymentStrategyItemsToSave> strategyItemsToSave, HashSet<Role> excludedRoles);
        IServiceMethodCall<object> PostSalaryForListEmployees(Dictionary<User, decimal> userPays, DateTime? date, DepartmentEntity department);
        IServiceMethodCall<object> RecomputeAll(DateTime? dateFrom, DateTime? dateTo, User user);
        IServiceMethodCall<Dictionary<User, decimal>> SelectAllUsersBalances(DateTime? dateAt, Account account);
        IServiceMethodCall<object> SetDeletedMedicalAnalysis(MedicalAnalysisType entity, bool deleted);
        IServiceMethodCall<object> SetPaymentStrategies(List<PaymentStrategy> strategies);
        IServiceMethodCall<object> UndeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType);
        IServiceMethodCall<object> UndeleteRole(Role role);
        IServiceMethodCall<object> UndeleteSessionTimetable(ScheduleType timetable);
        IServiceMethodCall<EmployeeAttendanceEntry> UpdateAttendanceEntry(Guid? id, DateTime? dateFrom, DateTime? dateTo, string comment, Guid? attendanceTypeId, DepartmentEntity department, Role role, bool confirmedManually);
        IServiceMethodCall<object> UpdateAttendanceType(ByValue<AttendanceType> attendanceType);
        IServiceMethodCall<object> UpdateMedicalAnalysis(ByValue<MedicalAnalysisType> entity);
        IServiceMethodCall<PenaltyOrBonusInfo> UpdatePenaltyOrBonusTransaction(Guid? id, decimal? sum, string comment, DepartmentEntity department);
        IServiceMethodCall<object> UpdatePenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType);
        IServiceMethodCall<object> UpdateRole(ByValue<Role> role);
        IServiceMethodCall<object> UpdateSalarySettings(ByValue<SalarySettings> settings);
        IServiceMethodCall<EmployeeScheduleItem> UpdateScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance);
        IServiceMethodCall<object> UpdateSessionTimetable(ByValue<ScheduleType> product);
        #endregion

        #region asynchronous version
        void AddAdvanceForListEmployees(Dictionary<User, decimal> userAdvances, DateTime? date, Account account, User counteragent, DepartmentEntity department, string comment, CashFlowCategory cashFlowCategory, Guid? payrollId, AsyncErrorHandler errorHandler, Action<Dictionary<User, AccountingTransaction>> resultHandler);
        void AddAttendanceEntry(EmployeeAttendanceEntry attendanceEntry, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddAttendanceType(ByValue<AttendanceType> removalType, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddOrUpdateScheduleItems(Dictionary<EmployeeScheduleItem, bool> items, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddPenaltyOrBonusTransaction(User user, DateInfo date, PenaltyOrBonusType type, decimal? sum, string comment, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<PenaltyOrBonusInfo> resultHandler);
        void AddPenaltyOrBonusTransactionForListEmployees(Dictionary<User, decimal> userPays, DateInfo date, PenaltyOrBonusType type, string comment, DepartmentEntity department, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddPenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddRole(ByValue<Role> role, AsyncErrorHandler errorHandler, Action<Role> resultHandler);
        void AddScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, AsyncErrorHandler errorHandler, Action<EmployeeScheduleItem> resultHandler);
        void AddScheduleItemByType(Guid? itemId, ScheduleType type, User user, DateInfo scheduleDate, DepartmentEntity department, bool createAttendance, AsyncErrorHandler errorHandler, Action<EmployeeScheduleItem> resultHandler);
        void AddSessionTimetable(ByValue<ScheduleType> product, AsyncErrorHandler errorHandler, Action<ScheduleType> resultHandler);
        void CancelPenaltyOrBonusTransaction(Guid? id, string comment, AsyncErrorHandler errorHandler, Action<PenaltyOrBonusInfo> resultHandler);
        void CreateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteAttendanceEntry(Guid? attendanceEntryId, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteAttendanceType(AttendanceType attendanceType, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteRole(Role role, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteScheduleItem(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteScheduleItems(ICollection<Guid> delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteSessionTimetable(ScheduleType timetable, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetAllAttendanceEntries(DateTime? dateFrom, DateTime? dateTo, bool? includeAll, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler);
        void GetAllAttendanceEntriesByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler);
        void GetAllAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler);
        void GetAllScheduleItems(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeScheduleItem>> resultHandler);
        void GetAllScheduleItemsByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeScheduleItem>> resultHandler);
        void GetAllScheduleItemsByEmployees(DateTime? dateFrom, DateTime? dateTo, ICollection<User> employees, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeScheduleItem>> resultHandler);
        void GetDefaultAttendanceTypeFor(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<AttendanceType> resultHandler);
        void GetDepositsForUsers(DateTime? date, HashSet<User> users, AsyncErrorHandler errorHandler, Action<Dictionary<User, decimal>> resultHandler);
        void GetEmployeeAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler);
        void GetPaymentStrategies(DateTime? date, ICollection<User> users, AsyncErrorHandler errorHandler, Action<ICollection<PaymentStrategy>> resultHandler);
        void GetPaymentStrategiesForDepartment(DateTime? date, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<User, PaymentStrategy>> resultHandler);
        void GetPaymentStrategiesHistory(Guid? user, AsyncErrorHandler errorHandler, Action<ICollection<PaymentStrategy>> resultHandler);
        void GetPenaltyOrBonusTransactions(User user, DateInfo dateFrom, DateInfo dateTo, ICollection<DepartmentEntity> departments, HashSet<PenaltyOrBonus> types, AsyncErrorHandler errorHandler, Action<List<PenaltyOrBonusInfo>> resultHandler);
        void GroupedUpdatePaymentStrategies(HashSet<User> employees, DateTime? dateFrom, List<PaymentStrategyItemsToSave> strategyItemsToSave, HashSet<Role> excludedRoles, AsyncErrorHandler errorHandler, Action resultHandler);
        void PostSalaryForListEmployees(Dictionary<User, decimal> userPays, DateTime? date, DepartmentEntity department, AsyncErrorHandler errorHandler, Action resultHandler);
        void RecomputeAll(DateTime? dateFrom, DateTime? dateTo, User user, AsyncErrorHandler errorHandler, Action resultHandler);
        void SelectAllUsersBalances(DateTime? dateAt, Account account, AsyncErrorHandler errorHandler, Action<Dictionary<User, decimal>> resultHandler);
        void SetDeletedMedicalAnalysis(MedicalAnalysisType entity, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPaymentStrategies(List<PaymentStrategy> strategies, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeleteRole(Role role, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeleteSessionTimetable(ScheduleType timetable, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateAttendanceEntry(Guid? id, DateTime? dateFrom, DateTime? dateTo, string comment, Guid? attendanceTypeId, DepartmentEntity department, Role role, bool confirmedManually, AsyncErrorHandler errorHandler, Action<EmployeeAttendanceEntry> resultHandler);
        void UpdateAttendanceType(ByValue<AttendanceType> attendanceType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdatePenaltyOrBonusTransaction(Guid? id, decimal? sum, string comment, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<PenaltyOrBonusInfo> resultHandler);
        void UpdatePenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateRole(ByValue<Role> role, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateSalarySettings(ByValue<SalarySettings> settings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, AsyncErrorHandler errorHandler, Action<EmployeeScheduleItem> resultHandler);
        void UpdateSessionTimetable(ByValue<ScheduleType> product, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<Dictionary<User, AccountingTransaction>> AddAdvanceForListEmployees(Dictionary<User, decimal> userAdvances, DateTime? date, Account account, User counteragent, DepartmentEntity department, string comment, CashFlowCategory cashFlowCategory, Guid? payrollId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddAttendanceEntry(EmployeeAttendanceEntry attendanceEntry, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddAttendanceType(ByValue<AttendanceType> removalType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddOrUpdateScheduleItems(Dictionary<EmployeeScheduleItem, bool> items, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PenaltyOrBonusInfo> AddPenaltyOrBonusTransaction(User user, DateInfo date, PenaltyOrBonusType type, decimal? sum, string comment, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddPenaltyOrBonusTransactionForListEmployees(Dictionary<User, decimal> userPays, DateInfo date, PenaltyOrBonusType type, string comment, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddPenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Role> AddRole(ByValue<Role> role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EmployeeScheduleItem> AddScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EmployeeScheduleItem> AddScheduleItemByType(Guid? itemId, ScheduleType type, User user, DateInfo scheduleDate, DepartmentEntity department, bool createAttendance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ScheduleType> AddSessionTimetable(ByValue<ScheduleType> product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PenaltyOrBonusInfo> CancelPenaltyOrBonusTransaction(Guid? id, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteAttendanceEntry(Guid? attendanceEntryId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteAttendanceType(AttendanceType attendanceType, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteRole(Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteScheduleItem(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteScheduleItems(ICollection<Guid> delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteSessionTimetable(ScheduleType timetable, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntries(DateTime? dateFrom, DateTime? dateTo, bool? includeAll, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeScheduleItem>> GetAllScheduleItems(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployees(DateTime? dateFrom, DateTime? dateTo, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AttendanceType> GetDefaultAttendanceTypeFor(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<User, decimal>> GetDepositsForUsers(DateTime? date, HashSet<User> users, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EmployeeAttendanceEntry>> GetEmployeeAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PaymentStrategy>> GetPaymentStrategies(DateTime? date, ICollection<User> users, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<User, PaymentStrategy>> GetPaymentStrategiesForDepartment(DateTime? date, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PaymentStrategy>> GetPaymentStrategiesHistory(Guid? user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PenaltyOrBonusInfo>> GetPenaltyOrBonusTransactions(User user, DateInfo dateFrom, DateInfo dateTo, ICollection<DepartmentEntity> departments, HashSet<PenaltyOrBonus> types, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> GroupedUpdatePaymentStrategies(HashSet<User> employees, DateTime? dateFrom, List<PaymentStrategyItemsToSave> strategyItemsToSave, HashSet<Role> excludedRoles, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> PostSalaryForListEmployees(Dictionary<User, decimal> userPays, DateTime? date, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RecomputeAll(DateTime? dateFrom, DateTime? dateTo, User user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<User, decimal>> SelectAllUsersBalances(DateTime? dateAt, Account account, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedMedicalAnalysis(MedicalAnalysisType entity, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPaymentStrategies(List<PaymentStrategy> strategies, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteRole(Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteSessionTimetable(ScheduleType timetable, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EmployeeAttendanceEntry> UpdateAttendanceEntry(Guid? id, DateTime? dateFrom, DateTime? dateTo, string comment, Guid? attendanceTypeId, DepartmentEntity department, Role role, bool confirmedManually, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateAttendanceType(ByValue<AttendanceType> attendanceType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PenaltyOrBonusInfo> UpdatePenaltyOrBonusTransaction(Guid? id, decimal? sum, string comment, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdatePenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateRole(ByValue<Role> role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateSalarySettings(ByValue<SalarySettings> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EmployeeScheduleItem> UpdateScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateSessionTimetable(ByValue<ScheduleType> product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPayrollService
    {
        #region Synchronous versions
        IServiceMethodCall<List<PayrollDocumentListRecord>> GetBriefPayrollList();
        IServiceMethodCall<List<PayrollItem>> GetPayrollItems(Guid? payrollId);
        IServiceMethodCall<List<PayrollItem>> GetPayrollItemsForPeriod(DateInterval period, DepartmentEntity department);
        #endregion

        #region asynchronous version
        void GetBriefPayrollList(AsyncErrorHandler errorHandler, Action<List<PayrollDocumentListRecord>> resultHandler);
        void GetPayrollItems(Guid? payrollId, AsyncErrorHandler errorHandler, Action<List<PayrollItem>> resultHandler);
        void GetPayrollItemsForPeriod(DateInterval period, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<List<PayrollItem>> resultHandler);
        #endregion
        #region task version
        Task<List<PayrollDocumentListRecord>> GetBriefPayrollList([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PayrollItem>> GetPayrollItems(Guid? payrollId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PayrollItem>> GetPayrollItemsForPeriod(DateInterval period, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEmployeesPlanningService
    {
        #region Synchronous versions
        IServiceMethodCall<EmployeesPlanningReport> GetEmployeesPlanningReport(DateTime? dateFrom, DateTime? dateToAvailability, DateTime? dateToTimeline, DateTime? dateToRequirements, ICollection<DepartmentEntity> departments, ICollection<Role> roles, ICollection<User> employees);
        IServiceMethodCall<object> SaveOrUpdateEmployeeAvailabilityEntries(ICollection<EmployeeAvailabilityEntry> entries);
        IServiceMethodCall<object> SaveOrUpdateEmployeeAvailabilitySchedule(ICollection<EmployeeAvailabilitySchedule> schedules, ICollection<Guid> delete);
        IServiceMethodCall<object> SaveOrUpdateRoleRequirementItems(ICollection<RoleRequirementItem> items, ICollection<Guid> delete);
        #endregion

        #region asynchronous version
        void GetEmployeesPlanningReport(DateTime? dateFrom, DateTime? dateToAvailability, DateTime? dateToTimeline, DateTime? dateToRequirements, ICollection<DepartmentEntity> departments, ICollection<Role> roles, ICollection<User> employees, AsyncErrorHandler errorHandler, Action<EmployeesPlanningReport> resultHandler);
        void SaveOrUpdateEmployeeAvailabilityEntries(ICollection<EmployeeAvailabilityEntry> entries, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveOrUpdateEmployeeAvailabilitySchedule(ICollection<EmployeeAvailabilitySchedule> schedules, ICollection<Guid> delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveOrUpdateRoleRequirementItems(ICollection<RoleRequirementItem> items, ICollection<Guid> delete, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<EmployeesPlanningReport> GetEmployeesPlanningReport(DateTime? dateFrom, DateTime? dateToAvailability, DateTime? dateToTimeline, DateTime? dateToRequirements, ICollection<DepartmentEntity> departments, ICollection<Role> roles, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateEmployeeAvailabilityEntries(ICollection<EmployeeAvailabilityEntry> entries, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateEmployeeAvailabilitySchedule(ICollection<EmployeeAvailabilitySchedule> schedules, ICollection<Guid> delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateRoleRequirementItems(ICollection<RoleRequirementItem> items, ICollection<Guid> delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEmployeesReportsService
    {
        #region Synchronous versions
        IServiceMethodCall<EmployeeTransactionsAggregatedInfo> GetEmployeeTransactionTotalsOnDate(User employee, DateInterval interval);
        IServiceMethodCall<LaborCostsAggregatedInfo> GetEmployeesCost(List<User> users, DateInfo dateFrom, DateInfo dateTo);
        IServiceMethodCall<Dictionary<User, List<AttendanceInfoForDay>>> GetEmployerAttendanceInfosForRoles(List<Role> roles, DateInterval dateInterval);
        IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>> GetEmployerAttendanceInfosForRolesByDepartments(List<Role> roles, List<DepartmentEntity> departments, DateInterval dateInterval);
        IServiceMethodCall<List<EmployeeTransactionInfo>> GetLastUserTransactionsInfo(User employee, int maxResults);
        IServiceMethodCall<HashSet<User>> GetUsersWorkedInPeriod(DateInfo dateFrom, DateInfo dateTo);
        IServiceMethodCall<PersonalReport> SelectPersonalReport(User user, DateInterval dateInterval, HashSet<DepartmentEntity> departments);
        IServiceMethodCall<List<PersonalReportRow>> SelectPersonalReportRows(User user, DateInterval dateInterval);
        IServiceMethodCall<SalaryReport> SelectSalaryReportByDepartments(DateInterval dateInterval, HashSet<DepartmentEntity> departmentsSet, bool showAllEmployees);
        #endregion

        #region asynchronous version
        void GetEmployeeTransactionTotalsOnDate(User employee, DateInterval interval, AsyncErrorHandler errorHandler, Action<EmployeeTransactionsAggregatedInfo> resultHandler);
        void GetEmployeesCost(List<User> users, DateInfo dateFrom, DateInfo dateTo, AsyncErrorHandler errorHandler, Action<LaborCostsAggregatedInfo> resultHandler);
        void GetEmployerAttendanceInfosForRoles(List<Role> roles, DateInterval dateInterval, AsyncErrorHandler errorHandler, Action<Dictionary<User, List<AttendanceInfoForDay>>> resultHandler);
        void GetEmployerAttendanceInfosForRolesByDepartments(List<Role> roles, List<DepartmentEntity> departments, DateInterval dateInterval, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>> resultHandler);
        void GetLastUserTransactionsInfo(User employee, int maxResults, AsyncErrorHandler errorHandler, Action<List<EmployeeTransactionInfo>> resultHandler);
        void GetUsersWorkedInPeriod(DateInfo dateFrom, DateInfo dateTo, AsyncErrorHandler errorHandler, Action<HashSet<User>> resultHandler);
        void SelectPersonalReport(User user, DateInterval dateInterval, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<PersonalReport> resultHandler);
        void SelectPersonalReportRows(User user, DateInterval dateInterval, AsyncErrorHandler errorHandler, Action<List<PersonalReportRow>> resultHandler);
        void SelectSalaryReportByDepartments(DateInterval dateInterval, HashSet<DepartmentEntity> departmentsSet, bool showAllEmployees, AsyncErrorHandler errorHandler, Action<SalaryReport> resultHandler);
        #endregion
        #region task version
        Task<EmployeeTransactionsAggregatedInfo> GetEmployeeTransactionTotalsOnDate(User employee, DateInterval interval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LaborCostsAggregatedInfo> GetEmployeesCost(List<User> users, DateInfo dateFrom, DateInfo dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<User, List<AttendanceInfoForDay>>> GetEmployerAttendanceInfosForRoles(List<Role> roles, DateInterval dateInterval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>> GetEmployerAttendanceInfosForRolesByDepartments(List<Role> roles, List<DepartmentEntity> departments, DateInterval dateInterval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<EmployeeTransactionInfo>> GetLastUserTransactionsInfo(User employee, int maxResults, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<HashSet<User>> GetUsersWorkedInPeriod(DateInfo dateFrom, DateInfo dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PersonalReport> SelectPersonalReport(User user, DateInterval dateInterval, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PersonalReportRow>> SelectPersonalReportRows(User user, DateInterval dateInterval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<SalaryReport> SelectSalaryReportByDepartments(DateInterval dateInterval, HashSet<DepartmentEntity> departmentsSet, bool showAllEmployees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoCardService
    {
        #region Synchronous versions
        IServiceMethodCall<object> FireIikoCardObjectCreated(string comment);
        IServiceMethodCall<object> FireIikoCardObjectDeleted(string comment);
        IServiceMethodCall<object> FireIikoCardObjectModified(string comment);
        IServiceMethodCall<object> UpdateIikoCardSettings(ByValue<IikoCardSettings> iikoCardSettings);
        #endregion

        #region asynchronous version
        void FireIikoCardObjectCreated(string comment, AsyncErrorHandler errorHandler, Action resultHandler);
        void FireIikoCardObjectDeleted(string comment, AsyncErrorHandler errorHandler, Action resultHandler);
        void FireIikoCardObjectModified(string comment, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateIikoCardSettings(ByValue<IikoCardSettings> iikoCardSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> FireIikoCardObjectCreated(string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FireIikoCardObjectDeleted(string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FireIikoCardObjectModified(string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateIikoCardSettings(ByValue<IikoCardSettings> iikoCardSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoNewsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> SaveNews(List<ByValue<IikoNewsItem>> iikoNewsItems);
        #endregion

        #region asynchronous version
        void SaveNews(List<ByValue<IikoNewsItem>> iikoNewsItems, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> SaveNews(List<ByValue<IikoNewsItem>> iikoNewsItems, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IImageService
    {
        #region Synchronous versions
        IServiceMethodCall<object> DeleteImage(Guid? imageID);
        IServiceMethodCall<string> LoadImageAsBase64(Guid? imageID);
        IServiceMethodCall<object> SaveOrUpdateImage(SavedImageRequest imageDto);
        IServiceMethodCall<string> TryLoadImageByIdRevisionCheckSum(Guid? imageID, int revision, string checkSum);
        #endregion

        #region asynchronous version
        void DeleteImage(Guid? imageID, AsyncErrorHandler errorHandler, Action resultHandler);
        void LoadImageAsBase64(Guid? imageID, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void SaveOrUpdateImage(SavedImageRequest imageDto, AsyncErrorHandler errorHandler, Action resultHandler);
        void TryLoadImageByIdRevisionCheckSum(Guid? imageID, int revision, string checkSum, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        #endregion
        #region task version
        Task<object> DeleteImage(Guid? imageID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> LoadImageAsBase64(Guid? imageID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateImage(SavedImageRequest imageDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> TryLoadImageByIdRevisionCheckSum(Guid? imageID, int revision, string checkSum, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface INoticeService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<Notice>> GetNoticesByRevision(int revision);
        #endregion

        #region asynchronous version
        void GetNoticesByRevision(int revision, AsyncErrorHandler errorHandler, Action<ICollection<Notice>> resultHandler);
        #endregion
        #region task version
        Task<ICollection<Notice>> GetNoticesByRevision(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IScheduledPaymentService
    {
        #region Synchronous versions
        IServiceMethodCall<List<ChangePaymentStatusResult>> ChangePaidStatusOfScheduledPayments(List<AbstractScheduledPayment> payments, bool isPaid);
        IServiceMethodCall<List<CreateTransactionResult>> CreateScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments);
        IServiceMethodCall<List<DeletePaymentResult>> DeleteScheduledPayments(List<Guid> paymentsIds);
        IServiceMethodCall<object> DeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds);
        IServiceMethodCall<List<GeneratePaymentsResult>> GenerateScheduledPayments(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<List<GetTransactionResult>> GetExistsScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments);
        IServiceMethodCall<int> GetGenerateScheduledPaymentsCount(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<List<AbstractScheduledPayment>> GetScheduledPayments(DateTime? from, DateTime? to, ScheduledPaymentType type, bool? isPaid, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<List<AbstractScheduledPaymentRequest>> GetScheduledPaymentsRequests(DateTime? from, DateTime? to, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<AbstractScheduledPayment> SaveScheduledPayment(AbstractScheduledPayment payment);
        IServiceMethodCall<AbstractScheduledPaymentRequest> SaveScheduledPaymentRequest(AbstractScheduledPaymentRequest paymentRequest);
        IServiceMethodCall<object> UndeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds);
        #endregion

        #region asynchronous version
        void ChangePaidStatusOfScheduledPayments(List<AbstractScheduledPayment> payments, bool isPaid, AsyncErrorHandler errorHandler, Action<List<ChangePaymentStatusResult>> resultHandler);
        void CreateScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, AsyncErrorHandler errorHandler, Action<List<CreateTransactionResult>> resultHandler);
        void DeleteScheduledPayments(List<Guid> paymentsIds, AsyncErrorHandler errorHandler, Action<List<DeletePaymentResult>> resultHandler);
        void DeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, AsyncErrorHandler errorHandler, Action resultHandler);
        void GenerateScheduledPayments(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<GeneratePaymentsResult>> resultHandler);
        void GetExistsScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, AsyncErrorHandler errorHandler, Action<List<GetTransactionResult>> resultHandler);
        void GetGenerateScheduledPaymentsCount(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void GetScheduledPayments(DateTime? from, DateTime? to, ScheduledPaymentType type, bool? isPaid, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<AbstractScheduledPayment>> resultHandler);
        void GetScheduledPaymentsRequests(DateTime? from, DateTime? to, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<AbstractScheduledPaymentRequest>> resultHandler);
        void SaveScheduledPayment(AbstractScheduledPayment payment, AsyncErrorHandler errorHandler, Action<AbstractScheduledPayment> resultHandler);
        void SaveScheduledPaymentRequest(AbstractScheduledPaymentRequest paymentRequest, AsyncErrorHandler errorHandler, Action<AbstractScheduledPaymentRequest> resultHandler);
        void UndeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<List<ChangePaymentStatusResult>> ChangePaidStatusOfScheduledPayments(List<AbstractScheduledPayment> payments, bool isPaid, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<CreateTransactionResult>> CreateScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<DeletePaymentResult>> DeleteScheduledPayments(List<Guid> paymentsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<GeneratePaymentsResult>> GenerateScheduledPayments(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<GetTransactionResult>> GetExistsScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> GetGenerateScheduledPaymentsCount(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractScheduledPayment>> GetScheduledPayments(DateTime? from, DateTime? to, ScheduledPaymentType type, bool? isPaid, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractScheduledPaymentRequest>> GetScheduledPaymentsRequests(DateTime? from, DateTime? to, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AbstractScheduledPayment> SaveScheduledPayment(AbstractScheduledPayment payment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AbstractScheduledPaymentRequest> SaveScheduledPaymentRequest(AbstractScheduledPaymentRequest paymentRequest, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IClientPriceCategoryService
    {
        #region Synchronous versions
        IServiceMethodCall<ClientPriceCategory> CreateCategory(ByValue<ClientPriceCategory> category);
        IServiceMethodCall<string> GenerateNextCode();
        IServiceMethodCall<object> SetCategoriesDeleted(ICollection<ClientPriceCategory> categories, bool deleted);
        IServiceMethodCall<ClientPriceCategory> UpdateCategory(ByValue<ClientPriceCategory> category);
        #endregion

        #region asynchronous version
        void CreateCategory(ByValue<ClientPriceCategory> category, AsyncErrorHandler errorHandler, Action<ClientPriceCategory> resultHandler);
        void GenerateNextCode(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void SetCategoriesDeleted(ICollection<ClientPriceCategory> categories, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateCategory(ByValue<ClientPriceCategory> category, AsyncErrorHandler errorHandler, Action<ClientPriceCategory> resultHandler);
        #endregion
        #region task version
        Task<ClientPriceCategory> CreateCategory(ByValue<ClientPriceCategory> category, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GenerateNextCode([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCategoriesDeleted(ICollection<ClientPriceCategory> categories, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ClientPriceCategory> UpdateCategory(ByValue<ClientPriceCategory> category, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPricingService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForDepartment(DepartmentEntity department, PricingParameters pricingParams);
        IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForDepartments(ICollection<DepartmentEntity> departments, PricingParameters pricingParams);
        IServiceMethodCall<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForStore(Store store, PricingParameters pricingParams);
        IServiceMethodCall<Dictionary<Store, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForStores(Dictionary<Store, PricingParameters> pricingParamsByStores);
        IServiceMethodCall<Dictionary<PriceListItemKey, decimal>> CalculatePricesForCategory(Dictionary<PriceListItemKey, decimal> basePrices, PricingStrategy strategy);
        IServiceMethodCall<Dictionary<ProductSizeKey, decimal>> CalculatePricesForCategoryForMenuTemplate(Dictionary<ProductSizeKey, decimal> basePrices, PricingStrategy strategy);
        #endregion

        #region asynchronous version
        void CalculatePriceMarkupsForDepartment(DepartmentEntity department, PricingParameters pricingParams, AsyncErrorHandler errorHandler, Action<Dictionary<Product, PricingInfo>> resultHandler);
        void CalculatePriceMarkupsForDepartments(ICollection<DepartmentEntity> departments, PricingParameters pricingParams, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>> resultHandler);
        void CalculatePriceMarkupsForStore(Store store, PricingParameters pricingParams, AsyncErrorHandler errorHandler, Action<Dictionary<Product, PricingInfo>> resultHandler);
        void CalculatePriceMarkupsForStores(Dictionary<Store, PricingParameters> pricingParamsByStores, AsyncErrorHandler errorHandler, Action<Dictionary<Store, Dictionary<Product, PricingInfo>>> resultHandler);
        void CalculatePricesForCategory(Dictionary<PriceListItemKey, decimal> basePrices, PricingStrategy strategy, AsyncErrorHandler errorHandler, Action<Dictionary<PriceListItemKey, decimal>> resultHandler);
        void CalculatePricesForCategoryForMenuTemplate(Dictionary<ProductSizeKey, decimal> basePrices, PricingStrategy strategy, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeKey, decimal>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForDepartment(DepartmentEntity department, PricingParameters pricingParams, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForDepartments(ICollection<DepartmentEntity> departments, PricingParameters pricingParams, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForStore(Store store, PricingParameters pricingParams, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Store, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForStores(Dictionary<Store, PricingParameters> pricingParamsByStores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<PriceListItemKey, decimal>> CalculatePricesForCategory(Dictionary<PriceListItemKey, decimal> basePrices, PricingStrategy strategy, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<ProductSizeKey, decimal>> CalculatePricesForCategoryForMenuTemplate(Dictionary<ProductSizeKey, decimal> basePrices, PricingStrategy strategy, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IAccountingReportsService
    {
        #region Synchronous versions
        IServiceMethodCall<BalanceReport> SelectBalance(DateInfo dateAt, ICollection<DepartmentEntity> department, DateDetalization detalization, DateInfo detalizationFrom);
        IServiceMethodCall<ProfitAndLossReport> SelectProfitAndLossByDateDepartmentConception(DateInfo dateFrom, DateInfo dateTo, DateDetalization detalization, BusinessDateSettings businessDateSettings, HashSet<DepartmentEntity> departments, ICollection<Conception> conceptions, bool spreadNullConception, bool includeRevenuePercent, bool includeNullConception, bool mergeEmptyConceptions, List<PnLSelectionType> selection);
        #endregion

        #region asynchronous version
        void SelectBalance(DateInfo dateAt, ICollection<DepartmentEntity> department, DateDetalization detalization, DateInfo detalizationFrom, AsyncErrorHandler errorHandler, Action<BalanceReport> resultHandler);
        void SelectProfitAndLossByDateDepartmentConception(DateInfo dateFrom, DateInfo dateTo, DateDetalization detalization, BusinessDateSettings businessDateSettings, HashSet<DepartmentEntity> departments, ICollection<Conception> conceptions, bool spreadNullConception, bool includeRevenuePercent, bool includeNullConception, bool mergeEmptyConceptions, List<PnLSelectionType> selection, AsyncErrorHandler errorHandler, Action<ProfitAndLossReport> resultHandler);
        #endregion
        #region task version
        Task<BalanceReport> SelectBalance(DateInfo dateAt, ICollection<DepartmentEntity> department, DateDetalization detalization, DateInfo detalizationFrom, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ProfitAndLossReport> SelectProfitAndLossByDateDepartmentConception(DateInfo dateFrom, DateInfo dateTo, DateDetalization detalization, BusinessDateSettings businessDateSettings, HashSet<DepartmentEntity> departments, ICollection<Conception> conceptions, bool spreadNullConception, bool includeRevenuePercent, bool includeNullConception, bool mergeEmptyConceptions, List<PnLSelectionType> selection, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IFrontReportsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddFrontReport(ByValue<FrontReport> frontReport);
        IServiceMethodCall<object> DeleteFrontReport(FrontReport frontReport);
        IServiceMethodCall<object> SetPrintOnCafeSessionCloseFlag(Dictionary<FrontReport, bool> frontReportsWithPrintOnCafeSessionCloseFlags);
        IServiceMethodCall<object> UndeleteFrontReport(FrontReport frontReport);
        IServiceMethodCall<object> UpdateFrontReport(ByValue<FrontReport> frontReport);
        #endregion

        #region asynchronous version
        void AddFrontReport(ByValue<FrontReport> frontReport, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteFrontReport(FrontReport frontReport, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPrintOnCafeSessionCloseFlag(Dictionary<FrontReport, bool> frontReportsWithPrintOnCafeSessionCloseFlags, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeleteFrontReport(FrontReport frontReport, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateFrontReport(ByValue<FrontReport> frontReport, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AddFrontReport(ByValue<FrontReport> frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteFrontReport(FrontReport frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPrintOnCafeSessionCloseFlag(Dictionary<FrontReport, bool> frontReportsWithPrintOnCafeSessionCloseFlags, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteFrontReport(FrontReport frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateFrontReport(ByValue<FrontReport> frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IAnnualPnLBudgetService
    {
        #region Synchronous versions
        IServiceMethodCall<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<BudgetPlanDocumentListRecord> CreateBudgetPlan(int date, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<BudgetPlanDocumentListRecord> FillBudgetPlanWithFacts(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillWithLastYearFacts);
        IServiceMethodCall<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(int? yearFrom, int? yearTo);
        IServiceMethodCall<BudgetPlanAccountHierarchy> GetFullHierarchy();
        IServiceMethodCall<BudgetPlanAccountHierarchy> GetHierarchy();
        IServiceMethodCall<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan);
        IServiceMethodCall<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted);
        IServiceMethodCall<object> UpdateHierarchyUsage(List<Guid> disable);
        #endregion

        #region asynchronous version
        void CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void CreateBudgetPlan(int date, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void FillBudgetPlanWithFacts(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillWithLastYearFacts, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void GetBudgetPlanList(int? yearFrom, int? yearTo, AsyncErrorHandler errorHandler, Action<ICollection<BudgetPlanDocumentListRecord>> resultHandler);
        void GetFullHierarchy(AsyncErrorHandler errorHandler, Action<BudgetPlanAccountHierarchy> resultHandler);
        void GetHierarchy(AsyncErrorHandler errorHandler, Action<BudgetPlanAccountHierarchy> resultHandler);
        void SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateHierarchyUsage(List<Guid> disable, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanDocumentListRecord> CreateBudgetPlan(int date, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanDocumentListRecord> FillBudgetPlanWithFacts(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillWithLastYearFacts, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(int? yearFrom, int? yearTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanAccountHierarchy> GetFullHierarchy([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanAccountHierarchy> GetHierarchy([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateHierarchyUsage(List<Guid> disable, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IMonthlyPnLBudgetService
    {
        #region Synchronous versions
        IServiceMethodCall<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<BudgetPlanDocumentListRecord> CreateBudgetPlan(DateTime? date, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<BudgetPlanDocumentListRecord> FillBudgetPlanWithFactsNew(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillPrevYear);
        IServiceMethodCall<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan);
        IServiceMethodCall<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted);
        #endregion

        #region asynchronous version
        void CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void CreateBudgetPlan(DateTime? date, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void FillBudgetPlanWithFactsNew(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillPrevYear, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler);
        void GetBudgetPlanList(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<BudgetPlanDocumentListRecord>> resultHandler);
        void SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanDocumentListRecord> CreateBudgetPlan(DateTime? date, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanDocumentListRecord> FillBudgetPlanWithFactsNew(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillPrevYear, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICashFlowReportService
    {
        #region Synchronous versions
        IServiceMethodCall<Report> BuildCashFlowReport(DateTime? dateFrom, DateTime? dateTo, ICollection<DepartmentEntity> departments);
        #endregion

        #region asynchronous version
        void BuildCashFlowReport(DateTime? dateFrom, DateTime? dateTo, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<Report> resultHandler);
        #endregion
        #region task version
        Task<Report> BuildCashFlowReport(DateTime? dateFrom, DateTime? dateTo, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICounteragentSummaryReportsService
    {
        #region Synchronous versions
        IServiceMethodCall<CounteragentSummaryReport> SelectClientSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments);
        IServiceMethodCall<CounteragentSummaryReport> SelectEmployeeSummaryReport(DateTime? dateAt, HashSet<Role> roles, bool group, List<DepartmentEntity> departments);
        IServiceMethodCall<CounteragentSummaryReport> SelectSupplierSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments);
        #endregion

        #region asynchronous version
        void SelectClientSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<CounteragentSummaryReport> resultHandler);
        void SelectEmployeeSummaryReport(DateTime? dateAt, HashSet<Role> roles, bool group, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<CounteragentSummaryReport> resultHandler);
        void SelectSupplierSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<CounteragentSummaryReport> resultHandler);
        #endregion
        #region task version
        Task<CounteragentSummaryReport> SelectClientSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CounteragentSummaryReport> SelectEmployeeSummaryReport(DateTime? dateAt, HashSet<Role> roles, bool group, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CounteragentSummaryReport> SelectSupplierSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IExport1CService
    {
        #region Synchronous versions
        IServiceMethodCall<Export1CReport> BuildExport1CReport(ByValue<Export1CMapping> mapping, DateTime? from, DateTime? to);
        IServiceMethodCall<ByValue<Export1CMapping>> GetDefaultMapping();
        #endregion

        #region asynchronous version
        void BuildExport1CReport(ByValue<Export1CMapping> mapping, DateTime? from, DateTime? to, AsyncErrorHandler errorHandler, Action<Export1CReport> resultHandler);
        void GetDefaultMapping(AsyncErrorHandler errorHandler, Action<ByValue<Export1CMapping>> resultHandler);
        #endregion
        #region task version
        Task<Export1CReport> BuildExport1CReport(ByValue<Export1CMapping> mapping, DateTime? from, DateTime? to, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ByValue<Export1CMapping>> GetDefaultMapping([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IFoodcostAnalysisService
    {
        #region Synchronous versions
        IServiceMethodCall<FoodcostCouldSaveData> CouldSave(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, FoodcostPricesSource basePricesSource);
        IServiceMethodCall<FoodcostPriceDynamicsData> PriceDynamics(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, decimal? expectedLossesPercent);
        IServiceMethodCall<FoodcostWhatIfData> WhatIf(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, List<Guid> productFilter, List<Guid> dishFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources);
        #endregion

        #region asynchronous version
        void CouldSave(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, FoodcostPricesSource basePricesSource, AsyncErrorHandler errorHandler, Action<FoodcostCouldSaveData> resultHandler);
        void PriceDynamics(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, decimal? expectedLossesPercent, AsyncErrorHandler errorHandler, Action<FoodcostPriceDynamicsData> resultHandler);
        void WhatIf(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, List<Guid> productFilter, List<Guid> dishFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, AsyncErrorHandler errorHandler, Action<FoodcostWhatIfData> resultHandler);
        #endregion
        #region task version
        Task<FoodcostCouldSaveData> CouldSave(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, FoodcostPricesSource basePricesSource, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<FoodcostPriceDynamicsData> PriceDynamics(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, decimal? expectedLossesPercent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<FoodcostWhatIfData> WhatIf(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, List<Guid> productFilter, List<Guid> dishFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IGoodMoveReportService
    {
        #region Synchronous versions
        IServiceMethodCall<GoodMoveReportData> GetProductMoveReport(Product product, ICollection<Store> stores, DateTime? dateFrom, DateTime? dateTo, bool includeCostDetalization);
        #endregion

        #region asynchronous version
        void GetProductMoveReport(Product product, ICollection<Store> stores, DateTime? dateFrom, DateTime? dateTo, bool includeCostDetalization, AsyncErrorHandler errorHandler, Action<GoodMoveReportData> resultHandler);
        #endregion
        #region task version
        Task<GoodMoveReportData> GetProductMoveReport(Product product, ICollection<Store> stores, DateTime? dateFrom, DateTime? dateTo, bool includeCostDetalization, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IOlapReportService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<string, ICollection<Object>>> ActualUniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters);
        IServiceMethodCall<Report> BuildReport(OlapReports olapReportType, bool? buildSummary, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters);
        IServiceMethodCall<Report> BuildReportLocalized(OlapReports olapReportType, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters);
        IServiceMethodCall<List<Report>> BuildReports(ICollection<ByValue<OlapReportSetting>> reportsSettings);
        IServiceMethodCall<Dictionary<string, OlapReportColumn>> GetAvailableColumns(OlapReports olapReportType);
        IServiceMethodCall<object> SaveOrUpdateOlapReportPreset(ByValue<OlapReportSetting> preset);
        IServiceMethodCall<Dictionary<string, ICollection<Object>>> UniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters);
        #endregion

        #region asynchronous version
        void ActualUniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Dictionary<string, ICollection<Object>>> resultHandler);
        void BuildReport(OlapReports olapReportType, bool? buildSummary, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Report> resultHandler);
        void BuildReportLocalized(OlapReports olapReportType, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Report> resultHandler);
        void BuildReports(ICollection<ByValue<OlapReportSetting>> reportsSettings, AsyncErrorHandler errorHandler, Action<List<Report>> resultHandler);
        void GetAvailableColumns(OlapReports olapReportType, AsyncErrorHandler errorHandler, Action<Dictionary<string, OlapReportColumn>> resultHandler);
        void SaveOrUpdateOlapReportPreset(ByValue<OlapReportSetting> preset, AsyncErrorHandler errorHandler, Action resultHandler);
        void UniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Dictionary<string, ICollection<Object>>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<string, ICollection<Object>>> ActualUniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Report> BuildReport(OlapReports olapReportType, bool? buildSummary, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Report> BuildReportLocalized(OlapReports olapReportType, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<Report>> BuildReports(ICollection<ByValue<OlapReportSetting>> reportsSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, OlapReportColumn>> GetAvailableColumns(OlapReports olapReportType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateOlapReportPreset(ByValue<OlapReportSetting> preset, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, ICollection<Object>>> UniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPurchasingReportService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<PurchasingReportRecord>> BuildReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> suppliers, HashSet<Store> stores);
        #endregion

        #region asynchronous version
        void BuildReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> suppliers, HashSet<Store> stores, AsyncErrorHandler errorHandler, Action<ICollection<PurchasingReportRecord>> resultHandler);
        #endregion
        #region task version
        Task<ICollection<PurchasingReportRecord>> BuildReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> suppliers, HashSet<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISalesReportService
    {
        #region Synchronous versions
        IServiceMethodCall<List<NotSoldItemRecord>> GetNotSoldItemsByPeriod(ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<List<DishSale>> GetPeriodSalesByDepartments(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, List<Store> stores, List<DocumentType> documentTypes, bool includeModifiers, bool groupByDay);
        IServiceMethodCall<List<DishSale>> GetSalesByDocumentIds(List<Guid> ids);
        IServiceMethodCall<List<DishSale>> GetSalesBySessionIdsByDepartments(ICollection<Guid> sessionIds, List<DepartmentEntity> departments, ICollection<Store> stores, List<DocumentType> documentTypes);
        #endregion

        #region asynchronous version
        void GetNotSoldItemsByPeriod(ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<NotSoldItemRecord>> resultHandler);
        void GetPeriodSalesByDepartments(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, List<Store> stores, List<DocumentType> documentTypes, bool includeModifiers, bool groupByDay, AsyncErrorHandler errorHandler, Action<List<DishSale>> resultHandler);
        void GetSalesByDocumentIds(List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<DishSale>> resultHandler);
        void GetSalesBySessionIdsByDepartments(ICollection<Guid> sessionIds, List<DepartmentEntity> departments, ICollection<Store> stores, List<DocumentType> documentTypes, AsyncErrorHandler errorHandler, Action<List<DishSale>> resultHandler);
        #endregion
        #region task version
        Task<List<NotSoldItemRecord>> GetNotSoldItemsByPeriod(ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<DishSale>> GetPeriodSalesByDepartments(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, List<Store> stores, List<DocumentType> documentTypes, bool includeModifiers, bool groupByDay, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<DishSale>> GetSalesByDocumentIds(List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<DishSale>> GetSalesBySessionIdsByDepartments(ICollection<Guid> sessionIds, List<DepartmentEntity> departments, ICollection<Store> stores, List<DocumentType> documentTypes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IReservesService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<ReserveDeliveryDto>> GetReservesAndDeliveries(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments);
        #endregion

        #region asynchronous version
        void GetReservesAndDeliveries(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ICollection<ReserveDeliveryDto>> resultHandler);
        #endregion
        #region task version
        Task<ICollection<ReserveDeliveryDto>> GetReservesAndDeliveries(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISessionsService
    {
        #region Synchronous versions
        IServiceMethodCall<bool> CanAcceptSession(Guid? sessionId);
        IServiceMethodCall<ClosedSessionDocument> GetClosedSessionDocument(CafeSessionProperties session);
        IServiceMethodCall<ICollection<ClosedSessionTransactionInfo>> GetSessionTransactions(Guid? sessionId);
        IServiceMethodCall<List<CafeSessionInfo>> GetSessionsByOperDay(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<bool> IsClosedEvent(Guid? sessionId);
        IServiceMethodCall<bool> IsSessionOpen(DateTime? date);
        IServiceMethodCall<ClosedSessionStatus> SaveClosedSessionDocument(ClosedSessionDocument document, bool withProcessing);
        #endregion

        #region asynchronous version
        void CanAcceptSession(Guid? sessionId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void GetClosedSessionDocument(CafeSessionProperties session, AsyncErrorHandler errorHandler, Action<ClosedSessionDocument> resultHandler);
        void GetSessionTransactions(Guid? sessionId, AsyncErrorHandler errorHandler, Action<ICollection<ClosedSessionTransactionInfo>> resultHandler);
        void GetSessionsByOperDay(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<CafeSessionInfo>> resultHandler);
        void IsClosedEvent(Guid? sessionId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void IsSessionOpen(DateTime? date, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void SaveClosedSessionDocument(ClosedSessionDocument document, bool withProcessing, AsyncErrorHandler errorHandler, Action<ClosedSessionStatus> resultHandler);
        #endregion
        #region task version
        Task<bool> CanAcceptSession(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ClosedSessionDocument> GetClosedSessionDocument(CafeSessionProperties session, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<ClosedSessionTransactionInfo>> GetSessionTransactions(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<CafeSessionInfo>> GetSessionsByOperDay(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsClosedEvent(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsSessionOpen(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ClosedSessionStatus> SaveClosedSessionDocument(ClosedSessionDocument document, bool withProcessing, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISalesAnalysisService
    {
        #region Synchronous versions
        IServiceMethodCall<SalesAnalysisReport> Build(DateTime? dateFrom, DateTime? dateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport);
        IServiceMethodCall<List<SalesAnalysisReport>> BuildReports(DateTime? dateFrom, DateTime? dateTo, DateTime? baseDateFrom, DateTime? baseDateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport);
        #endregion

        #region asynchronous version
        void Build(DateTime? dateFrom, DateTime? dateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, AsyncErrorHandler errorHandler, Action<SalesAnalysisReport> resultHandler);
        void BuildReports(DateTime? dateFrom, DateTime? dateTo, DateTime? baseDateFrom, DateTime? baseDateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, AsyncErrorHandler errorHandler, Action<List<SalesAnalysisReport>> resultHandler);
        #endregion
        #region task version
        Task<SalesAnalysisReport> Build(DateTime? dateFrom, DateTime? dateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<SalesAnalysisReport>> BuildReports(DateTime? dateFrom, DateTime? dateTo, DateTime? baseDateFrom, DateTime? baseDateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IAuthorizationService
    {
        #region Synchronous versions
        IServiceMethodCall<Guid?> Authorize();
        IServiceMethodCall<AuthResultDto> GetCurrentAuthInfo();
        IServiceMethodCall<ServerFingerPrintsInfo> GetCurrentFingerPrints();
        IServiceMethodCall<object> SaveLogoutEvent();
        #endregion

        #region asynchronous version
        void Authorize(AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        void GetCurrentAuthInfo(AsyncErrorHandler errorHandler, Action<AuthResultDto> resultHandler);
        void GetCurrentFingerPrints(AsyncErrorHandler errorHandler, Action<ServerFingerPrintsInfo> resultHandler);
        void SaveLogoutEvent(AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<Guid?> Authorize([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AuthResultDto> GetCurrentAuthInfo([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ServerFingerPrintsInfo> GetCurrentFingerPrints([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveLogoutEvent([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IBinaryStorageService
    {
        #region Synchronous versions
        IServiceMethodCall<object> Delete(string uri);
        IServiceMethodCall<DataItemDTO> Load(string uri);
        IServiceMethodCall<DataItemDTO> LoadInfo(string uri);
        IServiceMethodCall<Guid?> Save(string uri, string data);
        #endregion

        #region asynchronous version
        void Delete(string uri, AsyncErrorHandler errorHandler, Action resultHandler);
        void Load(string uri, AsyncErrorHandler errorHandler, Action<DataItemDTO> resultHandler);
        void LoadInfo(string uri, AsyncErrorHandler errorHandler, Action<DataItemDTO> resultHandler);
        void Save(string uri, string data, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        #endregion
        #region task version
        Task<object> Delete(string uri, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DataItemDTO> Load(string uri, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DataItemDTO> LoadInfo(string uri, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Guid?> Save(string uri, string data, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IModifierSchemasService
    {
        #region Synchronous versions
        IServiceMethodCall<ModifierSchema> CreateOrUpdateModifierSchema(ByValue<ModifierSchema> modifierSchema);
        IServiceMethodCall<object> DeleteOrRestoreModifierSchema(ModifierSchema modifierSchema, bool delete);
        #endregion

        #region asynchronous version
        void CreateOrUpdateModifierSchema(ByValue<ModifierSchema> modifierSchema, AsyncErrorHandler errorHandler, Action<ModifierSchema> resultHandler);
        void DeleteOrRestoreModifierSchema(ModifierSchema modifierSchema, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<ModifierSchema> CreateOrUpdateModifierSchema(ByValue<ModifierSchema> modifierSchema, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteOrRestoreModifierSchema(ModifierSchema modifierSchema, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IProductPriceFixedMarkupService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<ProductSizeKey, decimal>> AutoGenerateNewProductPrices(DepartmentEntity department, decimal? thresholdPercent, Guid? productionDocumentId, RoundRule roundRule);
        IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>> CalculatePricesWithFixedMarkupAndThresholdForDepartments(HashSet<ProductSizeKey> products, ICollection<DepartmentEntity> departments, DateTime? date, ProductPriceMarkupOptions markupOptions, ClientPriceCategory priceCategory);
        #endregion

        #region asynchronous version
        void AutoGenerateNewProductPrices(DepartmentEntity department, decimal? thresholdPercent, Guid? productionDocumentId, RoundRule roundRule, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeKey, decimal>> resultHandler);
        void CalculatePricesWithFixedMarkupAndThresholdForDepartments(HashSet<ProductSizeKey> products, ICollection<DepartmentEntity> departments, DateTime? date, ProductPriceMarkupOptions markupOptions, ClientPriceCategory priceCategory, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<ProductSizeKey, decimal>> AutoGenerateNewProductPrices(DepartmentEntity department, decimal? thresholdPercent, Guid? productionDocumentId, RoundRule roundRule, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>> CalculatePricesWithFixedMarkupAndThresholdForDepartments(HashSet<ProductSizeKey> products, ICollection<DepartmentEntity> departments, DateTime? date, ProductPriceMarkupOptions markupOptions, ClientPriceCategory priceCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IProductsAssemblyChartService
    {
        #region Synchronous versions
        IServiceMethodCall<object> DeleteAssemblyChart(Guid? chartId);
        IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyCharts(DateTime? dateFrom, DepartmentEntity department);
        IServiceMethodCall<Dictionary<AssemblyChart, AssemblyChartVersionWarning>> GetAllAssemblyChartsForProduct(Product product);
        IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyChartsForProducts(DateTime? dateFrom, List<Product> products);
        IServiceMethodCall<AssemblyChartsTree> GetAllAssemblyChartsRecursive(AssemblyChart assemblyChart);
        IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetAssemblyChartsIntersection(DateTime? dateFrom, DateTime? dateTo, List<Product> dishes);
        IServiceMethodCall<Dictionary<Product, AssemblyChartsTree>> GetAssemblyChartsTree(DateTime? dateFrom, List<Product> products, DepartmentEntity department);
        IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetLoadedAssemblyCharts(List<Product> dishes);
        IServiceMethodCall<bool> IsAssemblyChartsEditable();
        IServiceMethodCall<AssemblyChartSaveResult> SaveAssemblyChart(AssemblyChart chart, bool overwrite);
        IServiceMethodCall<object> SaveAssemblyChartList(ICollection<AssemblyChart> charts);
        #endregion

        #region asynchronous version
        void DeleteAssemblyChart(Guid? chartId, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetAllAssemblyCharts(DateTime? dateFrom, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler);
        void GetAllAssemblyChartsForProduct(Product product, AsyncErrorHandler errorHandler, Action<Dictionary<AssemblyChart, AssemblyChartVersionWarning>> resultHandler);
        void GetAllAssemblyChartsForProducts(DateTime? dateFrom, List<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler);
        void GetAllAssemblyChartsRecursive(AssemblyChart assemblyChart, AsyncErrorHandler errorHandler, Action<AssemblyChartsTree> resultHandler);
        void GetAssemblyChartsIntersection(DateTime? dateFrom, DateTime? dateTo, List<Product> dishes, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler);
        void GetAssemblyChartsTree(DateTime? dateFrom, List<Product> products, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<Product, AssemblyChartsTree>> resultHandler);
        void GetLoadedAssemblyCharts(List<Product> dishes, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler);
        void IsAssemblyChartsEditable(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void SaveAssemblyChart(AssemblyChart chart, bool overwrite, AsyncErrorHandler errorHandler, Action<AssemblyChartSaveResult> resultHandler);
        void SaveAssemblyChartList(ICollection<AssemblyChart> charts, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> DeleteAssemblyChart(Guid? chartId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyCharts(DateTime? dateFrom, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<AssemblyChart, AssemblyChartVersionWarning>> GetAllAssemblyChartsForProduct(Product product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyChartsForProducts(DateTime? dateFrom, List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AssemblyChartsTree> GetAllAssemblyChartsRecursive(AssemblyChart assemblyChart, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, ICollection<AssemblyChart>>> GetAssemblyChartsIntersection(DateTime? dateFrom, DateTime? dateTo, List<Product> dishes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, AssemblyChartsTree>> GetAssemblyChartsTree(DateTime? dateFrom, List<Product> products, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, ICollection<AssemblyChart>>> GetLoadedAssemblyCharts(List<Product> dishes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsAssemblyChartsEditable([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AssemblyChartSaveResult> SaveAssemblyChart(AssemblyChart chart, bool overwrite, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveAssemblyChartList(ICollection<AssemblyChart> charts, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IProductsAssemblyInfoService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<Product, HashSet<AllergenGroup>>> GetAllergenGroups(DepartmentEntity department, List<Product> products, DateTime? date);
        IServiceMethodCall<Dictionary<Product, decimal>> GetDisassembledAmounts(Dictionary<ProductSizeKey, decimal> productSizeSet, DateTime? date, Store store);
        IServiceMethodCall<ICollection<string>> GetModifiersContainingProduct(List<Product> modifiers, Product product, DepartmentEntity department);
        IServiceMethodCall<Dictionary<Product, decimal>> GetProductOutcomes(DateTime? date);
        IServiceMethodCall<Dictionary<Product, string>> GetProductOutputComments(DateTime? date, ICollection<Product> products);
        IServiceMethodCall<List<string>> GetProductsFromModifierAssemblyChartContainingThatSameModifier(Product modifier, List<Product> modifierProducts, DepartmentEntity department);
        IServiceMethodCall<HashSet<string>> GetProductsWithDeprecatedProductScale(DateTime? date, List<Product> products);
        #endregion

        #region asynchronous version
        void GetAllergenGroups(DepartmentEntity department, List<Product> products, DateTime? date, AsyncErrorHandler errorHandler, Action<Dictionary<Product, HashSet<AllergenGroup>>> resultHandler);
        void GetDisassembledAmounts(Dictionary<ProductSizeKey, decimal> productSizeSet, DateTime? date, Store store, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler);
        void GetModifiersContainingProduct(List<Product> modifiers, Product product, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<ICollection<string>> resultHandler);
        void GetProductOutcomes(DateTime? date, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler);
        void GetProductOutputComments(DateTime? date, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<Product, string>> resultHandler);
        void GetProductsFromModifierAssemblyChartContainingThatSameModifier(Product modifier, List<Product> modifierProducts, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<List<string>> resultHandler);
        void GetProductsWithDeprecatedProductScale(DateTime? date, List<Product> products, AsyncErrorHandler errorHandler, Action<HashSet<string>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<Product, HashSet<AllergenGroup>>> GetAllergenGroups(DepartmentEntity department, List<Product> products, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, decimal>> GetDisassembledAmounts(Dictionary<ProductSizeKey, decimal> productSizeSet, DateTime? date, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<string>> GetModifiersContainingProduct(List<Product> modifiers, Product product, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, decimal>> GetProductOutcomes(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, string>> GetProductOutputComments(DateTime? date, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<string>> GetProductsFromModifierAssemblyChartContainingThatSameModifier(Product modifier, List<Product> modifierProducts, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<HashSet<string>> GetProductsWithDeprecatedProductScale(DateTime? date, List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IProductsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddOrUpdateSourceNature(ByValue<SourceNature> sourceNature);
        IServiceMethodCall<bool?> CreateOrUpdateAccountingCategory(ByValue<AccountingCategory> category, bool deleted);
        IServiceMethodCall<object> CreateOrUpdateAllergen(ByValue<AllergenGroup> allergenGroup);
        IServiceMethodCall<object> CreateOrUpdateItemCategory(ByValue<ProductItemCategory> itemCategory);
        IServiceMethodCall<object> CreateOrUpdateMeasureUnit(ByValue<MeasureUnit> unit, bool deleted);
        IServiceMethodCall<object> CreateOrUpdateOuterEconomicActivityNomenclatureCode(ByValue<OuterEconomicActivityNomenclatureCode> outerEanProduct);
        IServiceMethodCall<object> CreateOrUpdateProductScale(ByValue<ProductScale> productScale, List<ByValue<ProductSize>> sizes);
        IServiceMethodCall<object> CreateOrUpdateProductTagGroup(ByValue<ProductTagGroup> productTagGroup, HashSet<ByValue<ProductTag>> productTags);
        IServiceMethodCall<Product> CreateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode);
        IServiceMethodCall<Product> CreateProductApiV3(ByValue<Product> product, bool overrideFastCode, bool overrideCode);
        IServiceMethodCall<ProductCategory> CreateProductCategory(string name);
        IServiceMethodCall<ProductGroup> CreateProductGroup(ByValue<ProductGroup> productGroup);
        IServiceMethodCall<object> DeleteProductScales(List<ProductScale> productScales, bool delete);
        IServiceMethodCall<object> DeleteProductTagGroups(List<ProductTagGroup> productTagGroups, bool delete);
        IServiceMethodCall<object> DeleteProducts(List<Product> products);
        IServiceMethodCall<object> DeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups);
        IServiceMethodCall<object> FillProductGroupChildrenRecursive(ProductGroup group, HashSet<ProductGroupChildrenFillInfo> dataFillInfos, bool replaceValues);
        IServiceMethodCall<Dictionary<StoreProductPair, decimal>> GetExpiredProducts(DateTime? date, HashSet<Store> stores, HashSet<Product> products);
        IServiceMethodCall<int> GetNomenclatureUpdateInterval();
        IServiceMethodCall<Dictionary<PriceListItemKey, List<PriceListItem>>> GetPriceListItems(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, bool includeItemsWithSchedules);
        IServiceMethodCall<Dictionary<ProductSizeKey, PriceListItem>> GetPriceListItemsByDepartment(DateTime? date, DepartmentEntity department);
        IServiceMethodCall<Dictionary<DateTime, HashSet<PriceListItem>>> GetSalePricesByPeriod(DateTime? dateFrom, DateTime? dateTo, DateDetalization detalization, DepartmentEntity department);
        IServiceMethodCall<HashSet<Product>> GetTopIngredients(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<ICollection<TopIngredientDto>> GetTopIngredientsWithLevels(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<List<NutritionValue>> MergeNutritionValues(List<NutritionValue> values, NutritionValue value);
        IServiceMethodCall<object> MoveProductsAndGroups(List<Product> products, List<ProductGroup> groups, ProductGroup group);
        IServiceMethodCall<object> SaveCustomProductCategories(ByValue<CustomCategoryList> categoryList, ICollection<ByValue<CustomCategoryValue>> categoryValues);
        IServiceMethodCall<object> SaveOrUpdateQuickLabels(ICollection<ByValue<QuickLabels>> labels);
        IServiceMethodCall<object> SetChoicesForProducts(Dictionary<Product, List<ChoiceBinding>> product);
        IServiceMethodCall<object> SetDeletedAllergen(AllergenGroup allergenGroup, bool deletedFlag);
        IServiceMethodCall<object> SetDeletedItemCategory(ProductItemCategory itemCategory, bool deletedFlag);
        IServiceMethodCall<object> SetDeletedOuterEconomicActivityNomenclatureCode(OuterEconomicActivityNomenclatureCode outerEanProduct, bool deletedFlag);
        IServiceMethodCall<object> SetModificatorsUnSaleableByChangeDocuments();
        IServiceMethodCall<object> SetModifierSchemaRedefinitionsForProducts(Dictionary<Product, List<ChoiceBindingRedefinition>> schemaRedefinitions);
        IServiceMethodCall<object> SetProductsTags(HashSet<Product> products, Dictionary<ProductTag, bool> tags);
        IServiceMethodCall<object> UndeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, bool recursively);
        IServiceMethodCall<object> UpdateFoodValueForProductByCookingType(Product product, CookingType cookingType, DepartmentEntity department, ProductSize productSize);
        IServiceMethodCall<object> UpdateFoodValueForProductCollection(List<Product> products);
        IServiceMethodCall<object> UpdateOuterEconomicActivityNomenclatureCodes(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>> outerEanProducts);
        IServiceMethodCall<Product> UpdateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode);
        IServiceMethodCall<object> UpdateProductCategoryList(List<string> listCreate, List<ByValue<ProductCategory>> listUpdate, List<ProductCategory> listDelete);
        IServiceMethodCall<ProductGroup> UpdateProductGroup(ByValue<ProductGroup> productGroup);
        IServiceMethodCall<object> UpdateProducts(List<ByValue<Product>> products);
        IServiceMethodCall<object> UpdateProductsAndGroups(List<ByValue<ProductCategory>> categoriesToCreateOrUpdate, List<ProductCategory> categoriesToDelete, List<ProductCategory> categoriesToUnDelete, List<ByValue<Product>> productsToCreateOrUpdate, List<Product> productsToDelete, List<Product> productsToUnDelete, List<ByValue<ProductGroup>> groupsToCreateOrUpdate, List<ProductGroup> groupsToDelete, List<ProductGroup> groupsToUnDelete);
        IServiceMethodCall<object> UpdateProductsCookingPlaceType(HashSet<Product> productSet, CookingPlaceType type);
        IServiceMethodCall<object> UpdateProductsPositions(List<ProductTreeEntity> list);
        IServiceMethodCall<object> UpdateSupplierInfos(List<ByValue<SupplierInfo>> supplierInfoList);
        IServiceMethodCall<object> UpdateSupplierProduct(ByValue<Product> supplierProduct);
        IServiceMethodCall<object> UpdateTaxCategoryList(ICollection<ByValue<TaxCategory>> taxCategoriesToCreateOrUpdate, ICollection<TaxCategory> taxCategoriesToDelete, ICollection<TaxCategory> taxCategoriesToUnDelete);
        #endregion

        #region asynchronous version
        void AddOrUpdateSourceNature(ByValue<SourceNature> sourceNature, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateOrUpdateAccountingCategory(ByValue<AccountingCategory> category, bool deleted, AsyncErrorHandler errorHandler, Action<bool?> resultHandler);
        void CreateOrUpdateAllergen(ByValue<AllergenGroup> allergenGroup, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateOrUpdateItemCategory(ByValue<ProductItemCategory> itemCategory, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateOrUpdateMeasureUnit(ByValue<MeasureUnit> unit, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateOrUpdateOuterEconomicActivityNomenclatureCode(ByValue<OuterEconomicActivityNomenclatureCode> outerEanProduct, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateOrUpdateProductScale(ByValue<ProductScale> productScale, List<ByValue<ProductSize>> sizes, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateOrUpdateProductTagGroup(ByValue<ProductTagGroup> productTagGroup, HashSet<ByValue<ProductTag>> productTags, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, AsyncErrorHandler errorHandler, Action<Product> resultHandler);
        void CreateProductApiV3(ByValue<Product> product, bool overrideFastCode, bool overrideCode, AsyncErrorHandler errorHandler, Action<Product> resultHandler);
        void CreateProductCategory(string name, AsyncErrorHandler errorHandler, Action<ProductCategory> resultHandler);
        void CreateProductGroup(ByValue<ProductGroup> productGroup, AsyncErrorHandler errorHandler, Action<ProductGroup> resultHandler);
        void DeleteProductScales(List<ProductScale> productScales, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteProductTagGroups(List<ProductTagGroup> productTagGroups, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteProducts(List<Product> products, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, AsyncErrorHandler errorHandler, Action resultHandler);
        void FillProductGroupChildrenRecursive(ProductGroup group, HashSet<ProductGroupChildrenFillInfo> dataFillInfos, bool replaceValues, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetExpiredProducts(DateTime? date, HashSet<Store> stores, HashSet<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<StoreProductPair, decimal>> resultHandler);
        void GetNomenclatureUpdateInterval(AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void GetPriceListItems(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, bool includeItemsWithSchedules, AsyncErrorHandler errorHandler, Action<Dictionary<PriceListItemKey, List<PriceListItem>>> resultHandler);
        void GetPriceListItemsByDepartment(DateTime? date, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeKey, PriceListItem>> resultHandler);
        void GetSalePricesByPeriod(DateTime? dateFrom, DateTime? dateTo, DateDetalization detalization, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<DateTime, HashSet<PriceListItem>>> resultHandler);
        void GetTopIngredients(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<HashSet<Product>> resultHandler);
        void GetTopIngredientsWithLevels(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<TopIngredientDto>> resultHandler);
        void MergeNutritionValues(List<NutritionValue> values, NutritionValue value, AsyncErrorHandler errorHandler, Action<List<NutritionValue>> resultHandler);
        void MoveProductsAndGroups(List<Product> products, List<ProductGroup> groups, ProductGroup group, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveCustomProductCategories(ByValue<CustomCategoryList> categoryList, ICollection<ByValue<CustomCategoryValue>> categoryValues, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveOrUpdateQuickLabels(ICollection<ByValue<QuickLabels>> labels, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetChoicesForProducts(Dictionary<Product, List<ChoiceBinding>> product, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeletedAllergen(AllergenGroup allergenGroup, bool deletedFlag, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeletedItemCategory(ProductItemCategory itemCategory, bool deletedFlag, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeletedOuterEconomicActivityNomenclatureCode(OuterEconomicActivityNomenclatureCode outerEanProduct, bool deletedFlag, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetModificatorsUnSaleableByChangeDocuments(AsyncErrorHandler errorHandler, Action resultHandler);
        void SetModifierSchemaRedefinitionsForProducts(Dictionary<Product, List<ChoiceBindingRedefinition>> schemaRedefinitions, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetProductsTags(HashSet<Product> products, Dictionary<ProductTag, bool> tags, AsyncErrorHandler errorHandler, Action resultHandler);
        void UndeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, bool recursively, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateFoodValueForProductByCookingType(Product product, CookingType cookingType, DepartmentEntity department, ProductSize productSize, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateFoodValueForProductCollection(List<Product> products, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateOuterEconomicActivityNomenclatureCodes(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>> outerEanProducts, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, AsyncErrorHandler errorHandler, Action<Product> resultHandler);
        void UpdateProductCategoryList(List<string> listCreate, List<ByValue<ProductCategory>> listUpdate, List<ProductCategory> listDelete, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateProductGroup(ByValue<ProductGroup> productGroup, AsyncErrorHandler errorHandler, Action<ProductGroup> resultHandler);
        void UpdateProducts(List<ByValue<Product>> products, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateProductsAndGroups(List<ByValue<ProductCategory>> categoriesToCreateOrUpdate, List<ProductCategory> categoriesToDelete, List<ProductCategory> categoriesToUnDelete, List<ByValue<Product>> productsToCreateOrUpdate, List<Product> productsToDelete, List<Product> productsToUnDelete, List<ByValue<ProductGroup>> groupsToCreateOrUpdate, List<ProductGroup> groupsToDelete, List<ProductGroup> groupsToUnDelete, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateProductsCookingPlaceType(HashSet<Product> productSet, CookingPlaceType type, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateProductsPositions(List<ProductTreeEntity> list, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateSupplierInfos(List<ByValue<SupplierInfo>> supplierInfoList, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateSupplierProduct(ByValue<Product> supplierProduct, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateTaxCategoryList(ICollection<ByValue<TaxCategory>> taxCategoriesToCreateOrUpdate, ICollection<TaxCategory> taxCategoriesToDelete, ICollection<TaxCategory> taxCategoriesToUnDelete, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AddOrUpdateSourceNature(ByValue<SourceNature> sourceNature, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool?> CreateOrUpdateAccountingCategory(ByValue<AccountingCategory> category, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateAllergen(ByValue<AllergenGroup> allergenGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateItemCategory(ByValue<ProductItemCategory> itemCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateMeasureUnit(ByValue<MeasureUnit> unit, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateOuterEconomicActivityNomenclatureCode(ByValue<OuterEconomicActivityNomenclatureCode> outerEanProduct, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateProductScale(ByValue<ProductScale> productScale, List<ByValue<ProductSize>> sizes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateProductTagGroup(ByValue<ProductTagGroup> productTagGroup, HashSet<ByValue<ProductTag>> productTags, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Product> CreateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Product> CreateProductApiV3(ByValue<Product> product, bool overrideFastCode, bool overrideCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ProductCategory> CreateProductCategory(string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ProductGroup> CreateProductGroup(ByValue<ProductGroup> productGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteProductScales(List<ProductScale> productScales, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteProductTagGroups(List<ProductTagGroup> productTagGroups, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteProducts(List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FillProductGroupChildrenRecursive(ProductGroup group, HashSet<ProductGroupChildrenFillInfo> dataFillInfos, bool replaceValues, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<StoreProductPair, decimal>> GetExpiredProducts(DateTime? date, HashSet<Store> stores, HashSet<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> GetNomenclatureUpdateInterval([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<PriceListItemKey, List<PriceListItem>>> GetPriceListItems(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, bool includeItemsWithSchedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<ProductSizeKey, PriceListItem>> GetPriceListItemsByDepartment(DateTime? date, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DateTime, HashSet<PriceListItem>>> GetSalePricesByPeriod(DateTime? dateFrom, DateTime? dateTo, DateDetalization detalization, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<HashSet<Product>> GetTopIngredients(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<TopIngredientDto>> GetTopIngredientsWithLevels(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<NutritionValue>> MergeNutritionValues(List<NutritionValue> values, NutritionValue value, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> MoveProductsAndGroups(List<Product> products, List<ProductGroup> groups, ProductGroup group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCustomProductCategories(ByValue<CustomCategoryList> categoryList, ICollection<ByValue<CustomCategoryValue>> categoryValues, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateQuickLabels(ICollection<ByValue<QuickLabels>> labels, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetChoicesForProducts(Dictionary<Product, List<ChoiceBinding>> product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedAllergen(AllergenGroup allergenGroup, bool deletedFlag, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedItemCategory(ProductItemCategory itemCategory, bool deletedFlag, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedOuterEconomicActivityNomenclatureCode(OuterEconomicActivityNomenclatureCode outerEanProduct, bool deletedFlag, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetModificatorsUnSaleableByChangeDocuments([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetModifierSchemaRedefinitionsForProducts(Dictionary<Product, List<ChoiceBindingRedefinition>> schemaRedefinitions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetProductsTags(HashSet<Product> products, Dictionary<ProductTag, bool> tags, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, bool recursively, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateFoodValueForProductByCookingType(Product product, CookingType cookingType, DepartmentEntity department, ProductSize productSize, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateFoodValueForProductCollection(List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateOuterEconomicActivityNomenclatureCodes(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>> outerEanProducts, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Product> UpdateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateProductCategoryList(List<string> listCreate, List<ByValue<ProductCategory>> listUpdate, List<ProductCategory> listDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ProductGroup> UpdateProductGroup(ByValue<ProductGroup> productGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateProducts(List<ByValue<Product>> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateProductsAndGroups(List<ByValue<ProductCategory>> categoriesToCreateOrUpdate, List<ProductCategory> categoriesToDelete, List<ProductCategory> categoriesToUnDelete, List<ByValue<Product>> productsToCreateOrUpdate, List<Product> productsToDelete, List<Product> productsToUnDelete, List<ByValue<ProductGroup>> groupsToCreateOrUpdate, List<ProductGroup> groupsToDelete, List<ProductGroup> groupsToUnDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateProductsCookingPlaceType(HashSet<Product> productSet, CookingPlaceType type, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateProductsPositions(List<ProductTreeEntity> list, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateSupplierInfos(List<ByValue<SupplierInfo>> supplierInfoList, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateSupplierProduct(ByValue<Product> supplierProduct, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateTaxCategoryList(ICollection<ByValue<TaxCategory>> taxCategoriesToCreateOrUpdate, ICollection<TaxCategory> taxCategoriesToDelete, ICollection<TaxCategory> taxCategoriesToUnDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IStoreReportsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddCustomSummaryReportSettings(ByValue<StoreSummaryReportSettings> reportSettings);
        IServiceMethodCall<object> AddStoreReportManagerSetup(string name, string layout, User user, bool shared, StoreReportManagerSetupType type);
        IServiceMethodCall<List<OP1ReportData>> GetCalculationCardReports(DepartmentEntity department, List<Product> productList, DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<ChequeReport> GetChequeReport(DateInterval dateInterval, ChequeReportDetalizationType detalization, ChequeReportOrderType ordersType, HashSet<Group> groups);
        IServiceMethodCall<CounteragentReport> GetCounteragentReport(DateTime? dateFrom, DateTime? dateTo, User user);
        IServiceMethodCall<StoreOperationsReport> GetCustomStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, StoreOperationsReportFilter filter, StoreOperationsReportGrouping grouping);
        IServiceMethodCall<InvoiceReport> GetIncomingInvoiceReport(DateInterval dateInterval, ICollection<Store> stores, InvoiceReportGroupType groupType);
        IServiceMethodCall<StoreOperationsReport> GetStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, List<DocumentType> documentTypes, bool productDetalization, bool showCostCorrections);
        IServiceMethodCall<StoreTurnoverReport> GetStoreTurnoverReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Store> stores, ICollection<User> counteragents, ProductCategory category, bool extendReport);
        IServiceMethodCall<object> RemoveCustomReportSettings(StoreSummaryReportSettings reportSettings);
        IServiceMethodCall<object> RemoveStoreReportManagerSetup(string name, StoreReportManagerSetupType type);
        #endregion

        #region asynchronous version
        void AddCustomSummaryReportSettings(ByValue<StoreSummaryReportSettings> reportSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void AddStoreReportManagerSetup(string name, string layout, User user, bool shared, StoreReportManagerSetupType type, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetCalculationCardReports(DepartmentEntity department, List<Product> productList, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<OP1ReportData>> resultHandler);
        void GetChequeReport(DateInterval dateInterval, ChequeReportDetalizationType detalization, ChequeReportOrderType ordersType, HashSet<Group> groups, AsyncErrorHandler errorHandler, Action<ChequeReport> resultHandler);
        void GetCounteragentReport(DateTime? dateFrom, DateTime? dateTo, User user, AsyncErrorHandler errorHandler, Action<CounteragentReport> resultHandler);
        void GetCustomStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, StoreOperationsReportFilter filter, StoreOperationsReportGrouping grouping, AsyncErrorHandler errorHandler, Action<StoreOperationsReport> resultHandler);
        void GetIncomingInvoiceReport(DateInterval dateInterval, ICollection<Store> stores, InvoiceReportGroupType groupType, AsyncErrorHandler errorHandler, Action<InvoiceReport> resultHandler);
        void GetStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, List<DocumentType> documentTypes, bool productDetalization, bool showCostCorrections, AsyncErrorHandler errorHandler, Action<StoreOperationsReport> resultHandler);
        void GetStoreTurnoverReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Store> stores, ICollection<User> counteragents, ProductCategory category, bool extendReport, AsyncErrorHandler errorHandler, Action<StoreTurnoverReport> resultHandler);
        void RemoveCustomReportSettings(StoreSummaryReportSettings reportSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void RemoveStoreReportManagerSetup(string name, StoreReportManagerSetupType type, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AddCustomSummaryReportSettings(ByValue<StoreSummaryReportSettings> reportSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> AddStoreReportManagerSetup(string name, string layout, User user, bool shared, StoreReportManagerSetupType type, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<OP1ReportData>> GetCalculationCardReports(DepartmentEntity department, List<Product> productList, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ChequeReport> GetChequeReport(DateInterval dateInterval, ChequeReportDetalizationType detalization, ChequeReportOrderType ordersType, HashSet<Group> groups, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CounteragentReport> GetCounteragentReport(DateTime? dateFrom, DateTime? dateTo, User user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoreOperationsReport> GetCustomStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, StoreOperationsReportFilter filter, StoreOperationsReportGrouping grouping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<InvoiceReport> GetIncomingInvoiceReport(DateInterval dateInterval, ICollection<Store> stores, InvoiceReportGroupType groupType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoreOperationsReport> GetStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, List<DocumentType> documentTypes, bool productDetalization, bool showCostCorrections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoreTurnoverReport> GetStoreTurnoverReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Store> stores, ICollection<User> counteragents, ProductCategory category, bool extendReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RemoveCustomReportSettings(StoreSummaryReportSettings reportSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RemoveStoreReportManagerSetup(string name, StoreReportManagerSetupType type, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IStoreService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<Product, ProductCostAndOutput>> ComputeProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices);
        IServiceMethodCall<Dictionary<Store, InternalTransfer>> CreateInternalTransfersForStores(List<GoodRecord> goodRecords, DepartmentEntity department, Store defaultStore);
        IServiceMethodCall<object> CreateOrUpdateCertificate(ByValue<Certificate> certificate);
        IServiceMethodCall<object> DeleteCertificate(Certificate certificate, bool delete);
        IServiceMethodCall<object> DeleteStore(Store store);
        IServiceMethodCall<object> DistributeInventoryShortage(Guid? inventoryId, Dictionary<User, decimal> users, string comment);
        IServiceMethodCall<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>> GetCostPricesByDateForPairs(HashSet<ProductSizeStoreKey> keys, DateTime? date, bool withEstimatedPurchasePrices);
        IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetCostPricesByDateForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices);
        IServiceMethodCall<List<Dictionary<Product, CostPriceChangeItem>>> GetCostPricesByDepartments(DateTime? dateOne, DateTime? dateTwo, HashSet<DepartmentEntity> departments, bool withEstimatedPurchasePrices);
        IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetIngredientWiseProductCostsForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices);
        IServiceMethodCall<List<PenaltyOrBonusTransaction>> GetInventoryPenalties(Guid? inventoryId);
        IServiceMethodCall<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>> GetLastProductCostsByStores(DateTime? date, ICollection<Store> stores);
        IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetNonEstimatedProductsCost(DateTime? date);
        IServiceMethodCall<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCosts(DateTime? date, ICollection<Store> stores);
        IServiceMethodCall<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products);
        IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetOperatingCostsForDateAndDepartments(DateTime? date, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<HashSet<Product>> GetPreparedProductsOnStore(DateTime? date, Store store);
        IServiceMethodCall<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByAssemblyChartsAndDate(DepartmentEntity department, AssemblyChart assemblyChart, DateTime? date, bool withEstimatedPurchasePrices);
        IServiceMethodCall<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices);
        IServiceMethodCall<ICollection<Product>> GetProductUsages(DateTime? date, ICollection<Product> products, HashSet<DepartmentEntity> departments);
        IServiceMethodCall<ProductEntryReport> GetProductUsagesByProduct(DateInfo date, Product product, HashSet<DepartmentEntity> departments);
        IServiceMethodCall<Dictionary<Product, decimal>> GetProductsBalanceForDate(DateInfo date);
        IServiceMethodCall<HashSet<Product>> GetProductsOnStore(DateTime? date, Store store);
        IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCosts(DateTime? date, ICollection<Store> stores, bool withEstimatedPurchasePrices);
        IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, bool withEstimatedPurchasePrices);
        IServiceMethodCall<StoreBalance> GetStoreBalance(DateTime? timestamp, Store store);
        IServiceMethodCall<StoreBalance> GetStoreProductsBalance(DateTime? timestamp, Store store, ICollection<Product> products);
        IServiceMethodCall<Dictionary<Product, decimal>> GetStoreTurnoverForProductsExceptDocument(DateTime? dateFrom, Store store, ICollection<Product> products, Guid? excludedDocumentId);
        IServiceMethodCall<StoresProductsBalance> GetStoresBalanceExceptDocument(DateTime? timestamp, Guid? documentId);
        IServiceMethodCall<StoresProductsBalance> GetStoresBalanceExceptDocumentForProducts(DateTime? timestamp, Guid? documentId, ICollection<Store> stores, ICollection<Product> products);
        IServiceMethodCall<StoresProductsBalance> GetStoresProductsBalance(DateTime? timestamp);
        IServiceMethodCall<StoresProductsBalance> GetStoresProductsBalanceForStoresProducts(DateTime? timestamp, ICollection<Store> stores, ICollection<Product> products);
        IServiceMethodCall<StoresProductsBalance> GetStoresProductsBalanceReportForDate(DateInfo date);
        IServiceMethodCall<StoreInfo> SaveOrUpdateStoreInfo(StoreInfo storeInfo);
        IServiceMethodCall<object> UndeleteStore(Store store);
        #endregion

        #region asynchronous version
        void ComputeProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductCostAndOutput>> resultHandler);
        void CreateInternalTransfersForStores(List<GoodRecord> goodRecords, DepartmentEntity department, Store defaultStore, AsyncErrorHandler errorHandler, Action<Dictionary<Store, InternalTransfer>> resultHandler);
        void CreateOrUpdateCertificate(ByValue<Certificate> certificate, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteCertificate(Certificate certificate, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteStore(Store store, AsyncErrorHandler errorHandler, Action resultHandler);
        void DistributeInventoryShortage(Guid? inventoryId, Dictionary<User, decimal> users, string comment, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetCostPricesByDateForPairs(HashSet<ProductSizeStoreKey> keys, DateTime? date, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>> resultHandler);
        void GetCostPricesByDateForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler);
        void GetCostPricesByDepartments(DateTime? dateOne, DateTime? dateTwo, HashSet<DepartmentEntity> departments, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<List<Dictionary<Product, CostPriceChangeItem>>> resultHandler);
        void GetIngredientWiseProductCostsForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler);
        void GetInventoryPenalties(Guid? inventoryId, AsyncErrorHandler errorHandler, Action<List<PenaltyOrBonusTransaction>> resultHandler);
        void GetLastProductCostsByStores(DateTime? date, ICollection<Store> stores, AsyncErrorHandler errorHandler, Action<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>> resultHandler);
        void GetNonEstimatedProductsCost(DateTime? date, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> resultHandler);
        void GetNonEstimatedSlidingProductCosts(DateTime? date, ICollection<Store> stores, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler);
        void GetNonEstimatedSlidingProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler);
        void GetOperatingCostsForDateAndDepartments(DateTime? date, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> resultHandler);
        void GetPreparedProductsOnStore(DateTime? date, Store store, AsyncErrorHandler errorHandler, Action<HashSet<Product>> resultHandler);
        void GetProductCostPricesByAssemblyChartsAndDate(DepartmentEntity department, AssemblyChart assemblyChart, DateTime? date, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductCostAndOutput>> resultHandler);
        void GetProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductCostAndOutput>> resultHandler);
        void GetProductUsages(DateTime? date, ICollection<Product> products, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ICollection<Product>> resultHandler);
        void GetProductUsagesByProduct(DateInfo date, Product product, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ProductEntryReport> resultHandler);
        void GetProductsBalanceForDate(DateInfo date, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler);
        void GetProductsOnStore(DateTime? date, Store store, AsyncErrorHandler errorHandler, Action<HashSet<Product>> resultHandler);
        void GetSlidingAvgProductCosts(DateTime? date, ICollection<Store> stores, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler);
        void GetSlidingAvgProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler);
        void GetStoreBalance(DateTime? timestamp, Store store, AsyncErrorHandler errorHandler, Action<StoreBalance> resultHandler);
        void GetStoreProductsBalance(DateTime? timestamp, Store store, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<StoreBalance> resultHandler);
        void GetStoreTurnoverForProductsExceptDocument(DateTime? dateFrom, Store store, ICollection<Product> products, Guid? excludedDocumentId, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler);
        void GetStoresBalanceExceptDocument(DateTime? timestamp, Guid? documentId, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler);
        void GetStoresBalanceExceptDocumentForProducts(DateTime? timestamp, Guid? documentId, ICollection<Store> stores, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler);
        void GetStoresProductsBalance(DateTime? timestamp, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler);
        void GetStoresProductsBalanceForStoresProducts(DateTime? timestamp, ICollection<Store> stores, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler);
        void GetStoresProductsBalanceReportForDate(DateInfo date, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler);
        void SaveOrUpdateStoreInfo(StoreInfo storeInfo, AsyncErrorHandler errorHandler, Action<StoreInfo> resultHandler);
        void UndeleteStore(Store store, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<Dictionary<Product, ProductCostAndOutput>> ComputeProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Store, InternalTransfer>> CreateInternalTransfersForStores(List<GoodRecord> goodRecords, DepartmentEntity department, Store defaultStore, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateCertificate(ByValue<Certificate> certificate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteCertificate(Certificate certificate, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteStore(Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DistributeInventoryShortage(Guid? inventoryId, Dictionary<User, decimal> users, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>> GetCostPricesByDateForPairs(HashSet<ProductSizeStoreKey> keys, DateTime? date, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, EvaluableDecimalValue>> GetCostPricesByDateForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<Dictionary<Product, CostPriceChangeItem>>> GetCostPricesByDepartments(DateTime? dateOne, DateTime? dateTwo, HashSet<DepartmentEntity> departments, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, EvaluableDecimalValue>> GetIngredientWiseProductCostsForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PenaltyOrBonusTransaction>> GetInventoryPenalties(Guid? inventoryId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>> GetLastProductCostsByStores(DateTime? date, ICollection<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetNonEstimatedProductsCost(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCosts(DateTime? date, ICollection<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetOperatingCostsForDateAndDepartments(DateTime? date, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<HashSet<Product>> GetPreparedProductsOnStore(DateTime? date, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByAssemblyChartsAndDate(DepartmentEntity department, AssemblyChart assemblyChart, DateTime? date, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<Product>> GetProductUsages(DateTime? date, ICollection<Product> products, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ProductEntryReport> GetProductUsagesByProduct(DateInfo date, Product product, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, decimal>> GetProductsBalanceForDate(DateInfo date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<HashSet<Product>> GetProductsOnStore(DateTime? date, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCosts(DateTime? date, ICollection<Store> stores, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoreBalance> GetStoreBalance(DateTime? timestamp, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoreBalance> GetStoreProductsBalance(DateTime? timestamp, Store store, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Product, decimal>> GetStoreTurnoverForProductsExceptDocument(DateTime? dateFrom, Store store, ICollection<Product> products, Guid? excludedDocumentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoresProductsBalance> GetStoresBalanceExceptDocument(DateTime? timestamp, Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoresProductsBalance> GetStoresBalanceExceptDocumentForProducts(DateTime? timestamp, Guid? documentId, ICollection<Store> stores, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoresProductsBalance> GetStoresProductsBalance(DateTime? timestamp, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoresProductsBalance> GetStoresProductsBalanceForStoresProducts(DateTime? timestamp, ICollection<Store> stores, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoresProductsBalance> GetStoresProductsBalanceReportForDate(DateInfo date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StoreInfo> SaveOrUpdateStoreInfo(StoreInfo storeInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteStore(Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IAlcoholService
    {
        #region Synchronous versions
        IServiceMethodCall<AlcoholReport> BuildAlcoholReport(DateInfo from, DateInfo to, ICollection<TransactionType> usedTurnoverTransactions, ICollection<TransactionType> usedIncomeTransactions, ICollection<TransactionType> usedReturnTransactions, ICollection<Store> stores, HashSet<AlcoholType> alcoholTypes);
        IServiceMethodCall<AlcoholSalesReport> BuildAlcoholSalesReportByPercentageOfAlcohol(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> storeIds, HashSet<Guid> saleDocumentIds);
        #endregion

        #region asynchronous version
        void BuildAlcoholReport(DateInfo from, DateInfo to, ICollection<TransactionType> usedTurnoverTransactions, ICollection<TransactionType> usedIncomeTransactions, ICollection<TransactionType> usedReturnTransactions, ICollection<Store> stores, HashSet<AlcoholType> alcoholTypes, AsyncErrorHandler errorHandler, Action<AlcoholReport> resultHandler);
        void BuildAlcoholSalesReportByPercentageOfAlcohol(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> storeIds, HashSet<Guid> saleDocumentIds, AsyncErrorHandler errorHandler, Action<AlcoholSalesReport> resultHandler);
        #endregion
        #region task version
        Task<AlcoholReport> BuildAlcoholReport(DateInfo from, DateInfo to, ICollection<TransactionType> usedTurnoverTransactions, ICollection<TransactionType> usedIncomeTransactions, ICollection<TransactionType> usedReturnTransactions, ICollection<Store> stores, HashSet<AlcoholType> alcoholTypes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AlcoholSalesReport> BuildAlcoholSalesReportByPercentageOfAlcohol(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> storeIds, HashSet<Guid> saleDocumentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IExternalHierarchyService
    {
        #region Synchronous versions
        IServiceMethodCall<object> ForceUploadToIikoBiz();
        IServiceMethodCall<object> UpdateExternalHierarchy(ByValue<ExternalHierarchy> externalHierachy);
        #endregion

        #region asynchronous version
        void ForceUploadToIikoBiz(AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateExternalHierarchy(ByValue<ExternalHierarchy> externalHierachy, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> ForceUploadToIikoBiz([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateExternalHierarchy(ByValue<ExternalHierarchy> externalHierachy, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIncomingReturnedInvoiceService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<Product, ProductValue>> GetCostPricesByDocument(Guid? outgoingInvoiceId);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UpdateCostPrices(ICollection<Guid> incomingReturnedInvoicesIds);
        #endregion

        #region asynchronous version
        void GetCostPricesByDocument(Guid? outgoingInvoiceId, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductValue>> resultHandler);
        void UpdateCostPrices(ICollection<Guid> incomingReturnedInvoicesIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<Product, ProductValue>> GetCostPricesByDocument(Guid? outgoingInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> UpdateCostPrices(ICollection<Guid> incomingReturnedInvoicesIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IOutgoingInvoiceService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> SellByCostPrices(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> SellByLastShipment(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters);
        IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> SellByPriceList(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters);
        #endregion

        #region asynchronous version
        void SellByCostPrices(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        void SellByLastShipment(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        void SellByPriceList(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<Guid, DocumentValidationResult>> SellByCostPrices(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> SellByLastShipment(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DocumentValidationResult>> SellByPriceList(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIndependentPriceListService
    {
        #region Synchronous versions
        IServiceMethodCall<object> DeletePriceList(Guid? priceListId);
        IServiceMethodCall<IndependentPriceList> GetIndependentPriceListByDate(DateTime? date);
        IServiceMethodCall<ICollection<IndependentPriceList>> GetIndependentPriceListsAll();
        IServiceMethodCall<PriceListSaveResult> UpdatePriceListWithSettings(ICollection<IndependentPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AllowableDeviationAction defaultDeviationAction);
        #endregion

        #region asynchronous version
        void DeletePriceList(Guid? priceListId, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetIndependentPriceListByDate(DateTime? date, AsyncErrorHandler errorHandler, Action<IndependentPriceList> resultHandler);
        void GetIndependentPriceListsAll(AsyncErrorHandler errorHandler, Action<ICollection<IndependentPriceList>> resultHandler);
        void UpdatePriceListWithSettings(ICollection<IndependentPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AllowableDeviationAction defaultDeviationAction, AsyncErrorHandler errorHandler, Action<PriceListSaveResult> resultHandler);
        #endregion
        #region task version
        Task<object> DeletePriceList(Guid? priceListId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<IndependentPriceList> GetIndependentPriceListByDate(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<IndependentPriceList>> GetIndependentPriceListsAll([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PriceListSaveResult> UpdatePriceListWithSettings(ICollection<IndependentPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AllowableDeviationAction defaultDeviationAction, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISupplierPriceListService
    {
        #region Synchronous versions
        IServiceMethodCall<object> DeletePriceList(Guid? priceListId);
        IServiceMethodCall<ICollection<SupplierPriceList>> GetBySuppliersAndDate(ICollection<Guid> supplierIds, DateTime? date);
        IServiceMethodCall<ICollection<SupplierPriceList>> GetSupplierPriceLists(Guid? supplierId);
        IServiceMethodCall<PriceListSaveResult> UpdatePriceLists(ICollection<SupplierPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors);
        #endregion

        #region asynchronous version
        void DeletePriceList(Guid? priceListId, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetBySuppliersAndDate(ICollection<Guid> supplierIds, DateTime? date, AsyncErrorHandler errorHandler, Action<ICollection<SupplierPriceList>> resultHandler);
        void GetSupplierPriceLists(Guid? supplierId, AsyncErrorHandler errorHandler, Action<ICollection<SupplierPriceList>> resultHandler);
        void UpdatePriceLists(ICollection<SupplierPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AsyncErrorHandler errorHandler, Action<PriceListSaveResult> resultHandler);
        #endregion
        #region task version
        Task<object> DeletePriceList(Guid? priceListId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<SupplierPriceList>> GetBySuppliersAndDate(ICollection<Guid> supplierIds, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<SupplierPriceList>> GetSupplierPriceLists(Guid? supplierId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PriceListSaveResult> UpdatePriceLists(ICollection<SupplierPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IStoreReplenishmentService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<DocumentReplenishmentDto>> CalculateReplenishments(DateTime? date, User supplier, ICollection<Pair> productsAndStores, bool excludeZeroAmounts, bool useSupplierPrices, bool groupByStore, bool groupBySupplier, StoreReplenishmentAlgorithmType type, AverageAlgorithmParameters averageAlgorithmParameters, bool includeStoreRemains);
        #endregion

        #region asynchronous version
        void CalculateReplenishments(DateTime? date, User supplier, ICollection<Pair> productsAndStores, bool excludeZeroAmounts, bool useSupplierPrices, bool groupByStore, bool groupBySupplier, StoreReplenishmentAlgorithmType type, AverageAlgorithmParameters averageAlgorithmParameters, bool includeStoreRemains, AsyncErrorHandler errorHandler, Action<ICollection<DocumentReplenishmentDto>> resultHandler);
        #endregion
        #region task version
        Task<ICollection<DocumentReplenishmentDto>> CalculateReplenishments(DateTime? date, User supplier, ICollection<Pair> productsAndStores, bool excludeZeroAmounts, bool useSupplierPrices, bool groupByStore, bool groupBySupplier, StoreReplenishmentAlgorithmType type, AverageAlgorithmParameters averageAlgorithmParameters, bool includeStoreRemains, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ITemplateReportService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CreateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem);
        IServiceMethodCall<object> SetDeletedTemplateReportItem(TemplateReportItem templateReportItem, bool deleted);
        IServiceMethodCall<object> UpdateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem);
        #endregion

        #region asynchronous version
        void CreateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeletedTemplateReportItem(TemplateReportItem templateReportItem, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> CreateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeletedTemplateReportItem(TemplateReportItem templateReportItem, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IVatInvoiceService
    {
        #region Synchronous versions
        IServiceMethodCall<VatInvoicePrintData> CreateAndPrintInvoice(Dictionary<Guid, Customer> ordersWithCustomers, bool invoicePerOrder);
        IServiceMethodCall<VatInvoiceReportData> CreateInvoicesReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> customers, ICollection<DepartmentEntity> departments, bool groupByVat);
        IServiceMethodCall<ICollection<OrderVatInvoiceData>> GetOrdersWithVatInvoiceData(List<Guid> sessions);
        IServiceMethodCall<VatInvoicePrintData> PrintInvoiceDuplicate(ICollection<Guid> invoiceIds);
        #endregion

        #region asynchronous version
        void CreateAndPrintInvoice(Dictionary<Guid, Customer> ordersWithCustomers, bool invoicePerOrder, AsyncErrorHandler errorHandler, Action<VatInvoicePrintData> resultHandler);
        void CreateInvoicesReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> customers, ICollection<DepartmentEntity> departments, bool groupByVat, AsyncErrorHandler errorHandler, Action<VatInvoiceReportData> resultHandler);
        void GetOrdersWithVatInvoiceData(List<Guid> sessions, AsyncErrorHandler errorHandler, Action<ICollection<OrderVatInvoiceData>> resultHandler);
        void PrintInvoiceDuplicate(ICollection<Guid> invoiceIds, AsyncErrorHandler errorHandler, Action<VatInvoicePrintData> resultHandler);
        #endregion
        #region task version
        Task<VatInvoicePrintData> CreateAndPrintInvoice(Dictionary<Guid, Customer> ordersWithCustomers, bool invoicePerOrder, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<VatInvoiceReportData> CreateInvoicesReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> customers, ICollection<DepartmentEntity> departments, bool groupByVat, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<OrderVatInvoiceData>> GetOrdersWithVatInvoiceData(List<Guid> sessions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<VatInvoicePrintData> PrintInvoiceDuplicate(ICollection<Guid> invoiceIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICorporationService
    {
        #region Synchronous versions
        IServiceMethodCall<DepartmentCategory> CreateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory);
        IServiceMethodCall<DepartmentEntity> GetDepartmentById(string departmentId);
        IServiceMethodCall<string> GetDepartmentUnCode(List<string> clientCodes);
        IServiceMethodCall<Dictionary<string, Pair>> GetDepartmentsAndStoresIds();
        IServiceMethodCall<CorporatedHierarchy> GetRMSCorporatedHierarchy();
        IServiceMethodCall<ICollection<DepartmentPeriodCloseTask>> GetScheduledPeriodChanges();
        IServiceMethodCall<List<Store>> GetStores(DepartmentEntity department);
        IServiceMethodCall<object> RemoveSchedules(ICollection<Guid> tasks);
        IServiceMethodCall<object> SaveCookingPlaceTypes(List<ByValue<CookingPlaceType>> types);
        IServiceMethodCall<object> SaveCorporatedEntities(List<ByValue<CorporatedEntity>> entities, List<StoreInfo> stores, Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap);
        IServiceMethodCall<object> SchedulePeriodChanges(ICollection<DepartmentPeriodCloseTask> tasks);
        IServiceMethodCall<object> SetUnloadNow(ICollection<Department> departments, bool unloadNow);
        IServiceMethodCall<DepartmentCategory> UpdateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory);
        IServiceMethodCall<object> UpdateRMSCorporatedHierarchy(ByValue<Corporation> corporation, ByValue<JurPerson> jurPerson, ByValue<DepartmentEntity> department);
        #endregion

        #region asynchronous version
        void CreateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, AsyncErrorHandler errorHandler, Action<DepartmentCategory> resultHandler);
        void GetDepartmentById(string departmentId, AsyncErrorHandler errorHandler, Action<DepartmentEntity> resultHandler);
        void GetDepartmentUnCode(List<string> clientCodes, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetDepartmentsAndStoresIds(AsyncErrorHandler errorHandler, Action<Dictionary<string, Pair>> resultHandler);
        void GetRMSCorporatedHierarchy(AsyncErrorHandler errorHandler, Action<CorporatedHierarchy> resultHandler);
        void GetScheduledPeriodChanges(AsyncErrorHandler errorHandler, Action<ICollection<DepartmentPeriodCloseTask>> resultHandler);
        void GetStores(DepartmentEntity department, AsyncErrorHandler errorHandler, Action<List<Store>> resultHandler);
        void RemoveSchedules(ICollection<Guid> tasks, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveCookingPlaceTypes(List<ByValue<CookingPlaceType>> types, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveCorporatedEntities(List<ByValue<CorporatedEntity>> entities, List<StoreInfo> stores, Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap, AsyncErrorHandler errorHandler, Action resultHandler);
        void SchedulePeriodChanges(ICollection<DepartmentPeriodCloseTask> tasks, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetUnloadNow(ICollection<Department> departments, bool unloadNow, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, AsyncErrorHandler errorHandler, Action<DepartmentCategory> resultHandler);
        void UpdateRMSCorporatedHierarchy(ByValue<Corporation> corporation, ByValue<JurPerson> jurPerson, ByValue<DepartmentEntity> department, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<DepartmentCategory> CreateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DepartmentEntity> GetDepartmentById(string departmentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetDepartmentUnCode(List<string> clientCodes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, Pair>> GetDepartmentsAndStoresIds([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CorporatedHierarchy> GetRMSCorporatedHierarchy([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<DepartmentPeriodCloseTask>> GetScheduledPeriodChanges([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<Store>> GetStores(DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RemoveSchedules(ICollection<Guid> tasks, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCookingPlaceTypes(List<ByValue<CookingPlaceType>> types, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCorporatedEntities(List<ByValue<CorporatedEntity>> entities, List<StoreInfo> stores, Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SchedulePeriodChanges(ICollection<DepartmentPeriodCloseTask> tasks, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetUnloadNow(ICollection<Department> departments, bool unloadNow, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DepartmentCategory> UpdateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateRMSCorporatedHierarchy(ByValue<Corporation> corporation, ByValue<JurPerson> jurPerson, ByValue<DepartmentEntity> department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICorporationSettingsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> SaveCorporationSettings(CorporationSettingsRequest settingsDto);
        #endregion

        #region asynchronous version
        void SaveCorporationSettings(CorporationSettingsRequest settingsDto, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> SaveCorporationSettings(CorporationSettingsRequest settingsDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDepartmentService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<TreeMenuChangeDocument>> GetMenuChangeDocumentsByDepartmentAndDate(DateInterval dateInterval, HashSet<DepartmentEntity> departments);
        #endregion

        #region asynchronous version
        void GetMenuChangeDocumentsByDepartmentAndDate(DateInterval dateInterval, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ICollection<TreeMenuChangeDocument>> resultHandler);
        #endregion
        #region task version
        Task<ICollection<TreeMenuChangeDocument>> GetMenuChangeDocumentsByDepartmentAndDate(DateInterval dateInterval, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IMenuService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CreateMenuChangeDocuments(Guid? templateId, ICollection<Guid> departmentIds, DateTime? beginDate, DateTime? endDate, bool deletePreviousMenu);
        IServiceMethodCall<Dictionary<MenuOrder, ICollection<MenuOrderItem>>> GetMenuOrders(ICollection<MenuChangeField> changed, DateTime? date, ClientPriceCategory category);
        IServiceMethodCall<MenuTemplate> GetMenuTemplate(Guid? templateId);
        IServiceMethodCall<List<MenuTemplate>> GetMenuTemplates(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<bool> IsLimitMenuRightsByDepartments();
        IServiceMethodCall<object> SaveOrUpdateMenuTemplate(ByValue<MenuTemplate> menuTemplate);
        IServiceMethodCall<object> SetMenuTemplateDeleted(Guid? templateId, bool deleted);
        #endregion

        #region asynchronous version
        void CreateMenuChangeDocuments(Guid? templateId, ICollection<Guid> departmentIds, DateTime? beginDate, DateTime? endDate, bool deletePreviousMenu, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetMenuOrders(ICollection<MenuChangeField> changed, DateTime? date, ClientPriceCategory category, AsyncErrorHandler errorHandler, Action<Dictionary<MenuOrder, ICollection<MenuOrderItem>>> resultHandler);
        void GetMenuTemplate(Guid? templateId, AsyncErrorHandler errorHandler, Action<MenuTemplate> resultHandler);
        void GetMenuTemplates(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<MenuTemplate>> resultHandler);
        void IsLimitMenuRightsByDepartments(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void SaveOrUpdateMenuTemplate(ByValue<MenuTemplate> menuTemplate, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetMenuTemplateDeleted(Guid? templateId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> CreateMenuChangeDocuments(Guid? templateId, ICollection<Guid> departmentIds, DateTime? beginDate, DateTime? endDate, bool deletePreviousMenu, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<MenuOrder, ICollection<MenuOrderItem>>> GetMenuOrders(ICollection<MenuChangeField> changed, DateTime? date, ClientPriceCategory category, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<MenuTemplate> GetMenuTemplate(Guid? templateId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<MenuTemplate>> GetMenuTemplates(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsLimitMenuRightsByDepartments([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateMenuTemplate(ByValue<MenuTemplate> menuTemplate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetMenuTemplateDeleted(Guid? templateId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPriceListUpdateService
    {
        #region Synchronous versions
        IServiceMethodCall<PriceListUpdateDto> GetPriceListUpdate(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules);
        IServiceMethodCall<List<PriceListUpdateDto>> GetPriceListUpdateByKnownRevisions(Dictionary<DateTime, int> knownRevisionsByDates, HashSet<DepartmentEntity> knownDepartments);
        IServiceMethodCall<PriceListUpdateDto> GetPriceListUpdateFlushed(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules);
        #endregion

        #region asynchronous version
        void GetPriceListUpdate(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, AsyncErrorHandler errorHandler, Action<PriceListUpdateDto> resultHandler);
        void GetPriceListUpdateByKnownRevisions(Dictionary<DateTime, int> knownRevisionsByDates, HashSet<DepartmentEntity> knownDepartments, AsyncErrorHandler errorHandler, Action<List<PriceListUpdateDto>> resultHandler);
        void GetPriceListUpdateFlushed(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, AsyncErrorHandler errorHandler, Action<PriceListUpdateDto> resultHandler);
        #endregion
        #region task version
        Task<PriceListUpdateDto> GetPriceListUpdate(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PriceListUpdateDto>> GetPriceListUpdateByKnownRevisions(Dictionary<DateTime, int> knownRevisionsByDates, HashSet<DepartmentEntity> knownDepartments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PriceListUpdateDto> GetPriceListUpdateFlushed(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISynchroEntityService
    {
        #region Synchronous versions
        IServiceMethodCall<SynchroEntity> CreateSynchroEntity(ByValue<SynchroEntity> synchroEntity);
        #endregion

        #region asynchronous version
        void CreateSynchroEntity(ByValue<SynchroEntity> synchroEntity, AsyncErrorHandler errorHandler, Action<SynchroEntity> resultHandler);
        #endregion
        #region task version
        Task<SynchroEntity> CreateSynchroEntity(ByValue<SynchroEntity> synchroEntity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IConsolidatedOrderService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<DocumentType, List<Guid>>> GetConsolidatedOrderLinkedDocumentsIds(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, bool includeDeleted, bool processedOnly);
        IServiceMethodCall<object> SaveConsolidatedOrderDocument(ConsolidatedOrderDocument document, bool deleteOnly);
        IServiceMethodCall<ConsolidatedOrderDocument> SelectConsolidatedOrder(DateTime? date, DepartmentEntity departmentTo);
        IServiceMethodCall<List<ConsolidatedOrderField>> SelectConsolidatedOrderFields(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId);
        IServiceMethodCall<List<IntegratedProductionOrder>> SelectIntegratedOrders(DateTime? dateFrom, DateTime? dateTo, BusinessDateSettings dateSettings);
        #endregion

        #region asynchronous version
        void GetConsolidatedOrderLinkedDocumentsIds(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, bool includeDeleted, bool processedOnly, AsyncErrorHandler errorHandler, Action<Dictionary<DocumentType, List<Guid>>> resultHandler);
        void SaveConsolidatedOrderDocument(ConsolidatedOrderDocument document, bool deleteOnly, AsyncErrorHandler errorHandler, Action resultHandler);
        void SelectConsolidatedOrder(DateTime? date, DepartmentEntity departmentTo, AsyncErrorHandler errorHandler, Action<ConsolidatedOrderDocument> resultHandler);
        void SelectConsolidatedOrderFields(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, AsyncErrorHandler errorHandler, Action<List<ConsolidatedOrderField>> resultHandler);
        void SelectIntegratedOrders(DateTime? dateFrom, DateTime? dateTo, BusinessDateSettings dateSettings, AsyncErrorHandler errorHandler, Action<List<IntegratedProductionOrder>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<DocumentType, List<Guid>>> GetConsolidatedOrderLinkedDocumentsIds(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, bool includeDeleted, bool processedOnly, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveConsolidatedOrderDocument(ConsolidatedOrderDocument document, bool deleteOnly, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ConsolidatedOrderDocument> SelectConsolidatedOrder(DateTime? date, DepartmentEntity departmentTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<ConsolidatedOrderField>> SelectConsolidatedOrderFields(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<IntegratedProductionOrder>> SelectIntegratedOrders(DateTime? dateFrom, DateTime? dateTo, BusinessDateSettings dateSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPreparedRegisterService
    {
        #region Synchronous versions
        IServiceMethodCall<InternalTransfer> CreateInternalTransfer(Guid? preparedRegisterId, ICollection<Guid> itemsIds);
        IServiceMethodCall<PreparedRegisterDocument> CreatePreparedRegisterDocument(DateTime? date, DepartmentEntity departmentTo, Dictionary<Product, decimal> incomingMap);
        IServiceMethodCall<ICollection<PreparedRegisterDocument>> CreatePreparedRegisterForDocuments(ICollection<Guid> documentIds, DateTime? date);
        #endregion

        #region asynchronous version
        void CreateInternalTransfer(Guid? preparedRegisterId, ICollection<Guid> itemsIds, AsyncErrorHandler errorHandler, Action<InternalTransfer> resultHandler);
        void CreatePreparedRegisterDocument(DateTime? date, DepartmentEntity departmentTo, Dictionary<Product, decimal> incomingMap, AsyncErrorHandler errorHandler, Action<PreparedRegisterDocument> resultHandler);
        void CreatePreparedRegisterForDocuments(ICollection<Guid> documentIds, DateTime? date, AsyncErrorHandler errorHandler, Action<ICollection<PreparedRegisterDocument>> resultHandler);
        #endregion
        #region task version
        Task<InternalTransfer> CreateInternalTransfer(Guid? preparedRegisterId, ICollection<Guid> itemsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<PreparedRegisterDocument> CreatePreparedRegisterDocument(DateTime? date, DepartmentEntity departmentTo, Dictionary<Product, decimal> incomingMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PreparedRegisterDocument>> CreatePreparedRegisterForDocuments(ICollection<Guid> documentIds, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IProductionOrderBlankService
    {
        #region Synchronous versions
        IServiceMethodCall<ProductionOrderBlank> CreateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank);
        IServiceMethodCall<object> DeleteProductionOrderBlank(ProductionOrderBlank productionOrderBlank);
        IServiceMethodCall<object> UpdateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank);
        #endregion

        #region asynchronous version
        void CreateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, AsyncErrorHandler errorHandler, Action<ProductionOrderBlank> resultHandler);
        void DeleteProductionOrderBlank(ProductionOrderBlank productionOrderBlank, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<ProductionOrderBlank> CreateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteProductionOrderBlank(ProductionOrderBlank productionOrderBlank, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IProductionService
    {
        #region Synchronous versions
        IServiceMethodCall<List<AbstractDocument>> CreateDocumentsByProductionOrder(Guid? documentId);
        IServiceMethodCall<List<ProductionDocument>> CreateProductionDocumentByList(List<ConsolidatedOrder> consolidatedOrderlist);
        IServiceMethodCall<List<GoodRecord>> GetGoodsList(DateTime? date, Dictionary<Product, decimal> orderMap, Store store);
        IServiceMethodCall<List<GoodRecord>> GetGoodsListConsideringWriteoffStrategy(DateTime? date, Dictionary<Product, decimal> orderMap, Store store);
        IServiceMethodCall<List<AbstractDocument>> GetLinkedDocumentsByProductionOrders(List<Guid> documentIds);
        IServiceMethodCall<List<StationChartExtended>> GetStationCardList(DateTime? date, List<Pair> orderMap);
        IServiceMethodCall<object> ShipProduction(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId);
        #endregion

        #region asynchronous version
        void CreateDocumentsByProductionOrder(Guid? documentId, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler);
        void CreateProductionDocumentByList(List<ConsolidatedOrder> consolidatedOrderlist, AsyncErrorHandler errorHandler, Action<List<ProductionDocument>> resultHandler);
        void GetGoodsList(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, AsyncErrorHandler errorHandler, Action<List<GoodRecord>> resultHandler);
        void GetGoodsListConsideringWriteoffStrategy(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, AsyncErrorHandler errorHandler, Action<List<GoodRecord>> resultHandler);
        void GetLinkedDocumentsByProductionOrders(List<Guid> documentIds, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler);
        void GetStationCardList(DateTime? date, List<Pair> orderMap, AsyncErrorHandler errorHandler, Action<List<StationChartExtended>> resultHandler);
        void ShipProduction(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<List<AbstractDocument>> CreateDocumentsByProductionOrder(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<ProductionDocument>> CreateProductionDocumentByList(List<ConsolidatedOrder> consolidatedOrderlist, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<GoodRecord>> GetGoodsList(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<GoodRecord>> GetGoodsListConsideringWriteoffStrategy(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<AbstractDocument>> GetLinkedDocumentsByProductionOrders(List<Guid> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<StationChartExtended>> GetStationCardList(DateTime? date, List<Pair> orderMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ShipProduction(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IAgentService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddDevice(ByValue<AgentDevice> device);
        IServiceMethodCall<bool> AttachDevice(Guid? agentId, AgentDeviceInfo deviceInfo);
        IServiceMethodCall<bool> CreateAgentAndTerminal(Guid? agentId, string agentName, Guid? terminalId, string terminalName, string terminalDescription);
        IServiceMethodCall<object> CreateOrUpdateTerminalToken(Terminal terminal, string connectionCode);
        IServiceMethodCall<object> DeleteCashRegisterToken(CashRegister cashRegister);
        IServiceMethodCall<AgentPostResult> ExecuteDeviceTask(Guid? agentId, AgentTask task);
        IServiceMethodCall<AgentPostResult> ExecuteDeviceTaskWithTimeout(Guid? agentId, AgentTask task, int timeoutMillis);
        IServiceMethodCall<AgentPostResult> ExecuteDeviceTest(Guid? deviceId);
        IServiceMethodCall<AgentPostResult> ExecutePowerDeviceTest(int channel, bool enable, Guid? deviceId);
        IServiceMethodCall<ICollection<AgentInfo>> GetAgentInfo(HashSet<Guid> agentIds);
        IServiceMethodCall<AgentPostResult> GetFontNamesForPrinting(Guid? agentId);
        IServiceMethodCall<AgentPostResult> GetPrinterList(Guid? agentId);
        IServiceMethodCall<Dictionary<CashRegister, Pair>> GetTokens(ICollection<CashRegister> cashRegisters);
        IServiceMethodCall<AgentPostResult> GetVideoDeviceList(Guid? agentId);
        IServiceMethodCall<ServerResponse> ProcessRequest(AgentRequest request);
        IServiceMethodCall<Pair> RefreshCashRegisterToken(CashRegister cashRegister);
        IServiceMethodCall<bool> RemoveDeviceIfRequired(Guid? deviceId);
        IServiceMethodCall<Dictionary<Guid, bool>> RemoveDevices(HashSet<Guid> devices);
        IServiceMethodCall<object> RevokeTerminalTokens(ICollection<Terminal> terminal);
        IServiceMethodCall<object> SetTerminalsAccessAllowed(ICollection<Terminal> terminal, bool accessAllowed);
        IServiceMethodCall<object> SetupDevice(ByValue<AgentDevice> device);
        IServiceMethodCall<AgentPostResult> StartDeviceAgent(Guid? agentId, Guid? deviceId);
        IServiceMethodCall<AgentPostResult> StopDeviceAgent(Guid? agentId, Guid? deviceId);
        #endregion

        #region asynchronous version
        void AddDevice(ByValue<AgentDevice> device, AsyncErrorHandler errorHandler, Action resultHandler);
        void AttachDevice(Guid? agentId, AgentDeviceInfo deviceInfo, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void CreateAgentAndTerminal(Guid? agentId, string agentName, Guid? terminalId, string terminalName, string terminalDescription, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void CreateOrUpdateTerminalToken(Terminal terminal, string connectionCode, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteCashRegisterToken(CashRegister cashRegister, AsyncErrorHandler errorHandler, Action resultHandler);
        void ExecuteDeviceTask(Guid? agentId, AgentTask task, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void ExecuteDeviceTaskWithTimeout(Guid? agentId, AgentTask task, int timeoutMillis, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void ExecuteDeviceTest(Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void ExecutePowerDeviceTest(int channel, bool enable, Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void GetAgentInfo(HashSet<Guid> agentIds, AsyncErrorHandler errorHandler, Action<ICollection<AgentInfo>> resultHandler);
        void GetFontNamesForPrinting(Guid? agentId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void GetPrinterList(Guid? agentId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void GetTokens(ICollection<CashRegister> cashRegisters, AsyncErrorHandler errorHandler, Action<Dictionary<CashRegister, Pair>> resultHandler);
        void GetVideoDeviceList(Guid? agentId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void ProcessRequest(AgentRequest request, AsyncErrorHandler errorHandler, Action<ServerResponse> resultHandler);
        void RefreshCashRegisterToken(CashRegister cashRegister, AsyncErrorHandler errorHandler, Action<Pair> resultHandler);
        void RemoveDeviceIfRequired(Guid? deviceId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RemoveDevices(HashSet<Guid> devices, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, bool>> resultHandler);
        void RevokeTerminalTokens(ICollection<Terminal> terminal, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetTerminalsAccessAllowed(ICollection<Terminal> terminal, bool accessAllowed, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetupDevice(ByValue<AgentDevice> device, AsyncErrorHandler errorHandler, Action resultHandler);
        void StartDeviceAgent(Guid? agentId, Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        void StopDeviceAgent(Guid? agentId, Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler);
        #endregion
        #region task version
        Task<object> AddDevice(ByValue<AgentDevice> device, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> AttachDevice(Guid? agentId, AgentDeviceInfo deviceInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> CreateAgentAndTerminal(Guid? agentId, string agentName, Guid? terminalId, string terminalName, string terminalDescription, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateOrUpdateTerminalToken(Terminal terminal, string connectionCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteCashRegisterToken(CashRegister cashRegister, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> ExecuteDeviceTask(Guid? agentId, AgentTask task, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> ExecuteDeviceTaskWithTimeout(Guid? agentId, AgentTask task, int timeoutMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> ExecuteDeviceTest(Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> ExecutePowerDeviceTest(int channel, bool enable, Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<AgentInfo>> GetAgentInfo(HashSet<Guid> agentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> GetFontNamesForPrinting(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> GetPrinterList(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<CashRegister, Pair>> GetTokens(ICollection<CashRegister> cashRegisters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> GetVideoDeviceList(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ServerResponse> ProcessRequest(AgentRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Pair> RefreshCashRegisterToken(CashRegister cashRegister, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RemoveDeviceIfRequired(Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, bool>> RemoveDevices(HashSet<Guid> devices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RevokeTerminalTokens(ICollection<Terminal> terminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetTerminalsAccessAllowed(ICollection<Terminal> terminal, bool accessAllowed, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetupDevice(ByValue<AgentDevice> device, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> StartDeviceAgent(Guid? agentId, Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<AgentPostResult> StopDeviceAgent(Guid? agentId, Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPaymentConstraintsManager
    {
        #region Synchronous versions
        IServiceMethodCall<PaymentTypeDiscountConstraint> SetConstraint(PaymentType paymentType, DiscountType discountType, bool isUnbound);
        #endregion

        #region asynchronous version
        void SetConstraint(PaymentType paymentType, DiscountType discountType, bool isUnbound, AsyncErrorHandler errorHandler, Action<PaymentTypeDiscountConstraint> resultHandler);
        #endregion
        #region task version
        Task<PaymentTypeDiscountConstraint> SetConstraint(PaymentType paymentType, DiscountType discountType, bool isUnbound, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IRestoSetupService
    {
        #region Synchronous versions
        IServiceMethodCall<bool> AddGroup(ByValue<Group> group);
        IServiceMethodCall<bool> AddRestorauntSection(Guid? groupId, ByValue<RestaurantSection> restorauntSection);
        IServiceMethodCall<object> ClearRestoImage();
        IServiceMethodCall<object> CreateAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem);
        IServiceMethodCall<object> DeleteAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem);
        IServiceMethodCall<bool> DeleteGroup(Group group);
        IServiceMethodCall<bool> DeleteSection(RestaurantSection section);
        IServiceMethodCall<object> EditAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem);
        IServiceMethodCall<int> GetDeliveryListUpdateCooldownSec();
        IServiceMethodCall<string> GetDepartmentId();
        IServiceMethodCall<GroupServiceMode> GetMajorServiceMode();
        IServiceMethodCall<string> GetRestoImage(Guid? imageId);
        IServiceMethodCall<string> GetSavedServerProperty(string name, bool loadFromMemory);
        IServiceMethodCall<Dictionary<string, string>> GetServerProperties(List<string> propertyNames);
        IServiceMethodCall<string> GetServerProperty(string name);
        IServiceMethodCall<List<SettingsItem>> GetSettingsMetaData();
        IServiceMethodCall<bool> IsEnableManualDeliveryZones();
        IServiceMethodCall<bool> IsEnableToCreateDeliveryWithoutCustomer();
        IServiceMethodCall<bool> IsEnableToSaveDeliveryWithoutTerminal();
        IServiceMethodCall<bool> RefreshGroupProperties(ByValue<Group> valGroup, List<CookingPlaceType> deletedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> newCpt, List<PointOfSale> deletedPos, List<ByValue<PointOfSale>> changedPos, List<ByValue<PointOfSale>> newPos, List<PointOfSale> restoredPos);
        IServiceMethodCall<bool> RefreshSectionProperties(ByValue<RestaurantSection> valSection, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, List<Table> deletedTbl, List<ByValue<Table>> changedTbl, List<ByValue<Table>> newTbl, List<Table> restoredTbl, bool waiterCanOpenOthersOrders, bool roundTablesInSectionSchema);
        IServiceMethodCall<object> RestoreGroup(Group group);
        IServiceMethodCall<object> RestoreRestaurantSection(RestaurantSection restaurantSection);
        IServiceMethodCall<object> SetCostCorrectionSettings(bool isDistributeCostCorrections, string costCorrectionCronExpression);
        IServiceMethodCall<Guid?> SetRestoImage(SavedImageRequest imageDto);
        IServiceMethodCall<object> SetServerProperties(Dictionary<string, string> properties, bool applyImmediate, bool saveToFile);
        IServiceMethodCall<object> SetServerProperty(string name, string value, bool applyImmediate, bool saveToFile);
        IServiceMethodCall<object> SwapGroupMainTerminal(Group group, Terminal newMainTerminal);
        IServiceMethodCall<object> UpdateCafeSetup(ByValue<CafeSetup> cafeSetup);
        IServiceMethodCall<object> UpdateConception(ByValue<Conception> conception);
        IServiceMethodCall<object> UpdateDeliveryAppearanceSettings(ByValue<DeliveryAppearanceSettings> deliveryAppearanceSettings);
        IServiceMethodCall<object> UpdateDeliveryConfirmationSettings(ByValue<DeliveryConfirmationSettings> deliveryConfirmationSettings);
        IServiceMethodCall<object> UpdateDeliveryRestrictions(ByValue<DeliveryRestrictions> deliveryRestrictions, ByValue<AutoAssignDeliveryTerminalSettings> autoAssignSettings);
        IServiceMethodCall<object> UpdateDeliverySettings(ByValue<DeliverySettings> deliverySettings);
        IServiceMethodCall<object> UpdateDeliverySmsSendingSettings(ByValue<DeliverySmsSendingSettings> deliverySmsSendingSettings);
        IServiceMethodCall<object> UpdateErrorNotificationConfiguration(ByValue<NotificationConfiguration> config);
        IServiceMethodCall<object> UpdateFrontSessionsProperties(ByValue<FrontSessionsProperties> sessionsProperties);
        IServiceMethodCall<object> UpdateGroupLocation(List<ByValue<GroupLocation>> items);
        IServiceMethodCall<object> UpdateIikoCard51Settings(ByValue<IikoCard51Settings> iikoCard51Settings);
        IServiceMethodCall<object> UpdateLogisticsSettings(ByValue<LogisticsSettings> logisticsSettings);
        #endregion

        #region asynchronous version
        void AddGroup(ByValue<Group> group, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void AddRestorauntSection(Guid? groupId, ByValue<RestaurantSection> restorauntSection, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void ClearRestoImage(AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteGroup(Group group, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void DeleteSection(RestaurantSection section, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void EditAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetDeliveryListUpdateCooldownSec(AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void GetDepartmentId(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetMajorServiceMode(AsyncErrorHandler errorHandler, Action<GroupServiceMode> resultHandler);
        void GetRestoImage(Guid? imageId, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetSavedServerProperty(string name, bool loadFromMemory, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetServerProperties(List<string> propertyNames, AsyncErrorHandler errorHandler, Action<Dictionary<string, string>> resultHandler);
        void GetServerProperty(string name, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetSettingsMetaData(AsyncErrorHandler errorHandler, Action<List<SettingsItem>> resultHandler);
        void IsEnableManualDeliveryZones(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void IsEnableToCreateDeliveryWithoutCustomer(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void IsEnableToSaveDeliveryWithoutTerminal(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RefreshGroupProperties(ByValue<Group> valGroup, List<CookingPlaceType> deletedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> newCpt, List<PointOfSale> deletedPos, List<ByValue<PointOfSale>> changedPos, List<ByValue<PointOfSale>> newPos, List<PointOfSale> restoredPos, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RefreshSectionProperties(ByValue<RestaurantSection> valSection, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, List<Table> deletedTbl, List<ByValue<Table>> changedTbl, List<ByValue<Table>> newTbl, List<Table> restoredTbl, bool waiterCanOpenOthersOrders, bool roundTablesInSectionSchema, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RestoreGroup(Group group, AsyncErrorHandler errorHandler, Action resultHandler);
        void RestoreRestaurantSection(RestaurantSection restaurantSection, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetCostCorrectionSettings(bool isDistributeCostCorrections, string costCorrectionCronExpression, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetRestoImage(SavedImageRequest imageDto, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        void SetServerProperties(Dictionary<string, string> properties, bool applyImmediate, bool saveToFile, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetServerProperty(string name, string value, bool applyImmediate, bool saveToFile, AsyncErrorHandler errorHandler, Action resultHandler);
        void SwapGroupMainTerminal(Group group, Terminal newMainTerminal, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateCafeSetup(ByValue<CafeSetup> cafeSetup, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateConception(ByValue<Conception> conception, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDeliveryAppearanceSettings(ByValue<DeliveryAppearanceSettings> deliveryAppearanceSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDeliveryConfirmationSettings(ByValue<DeliveryConfirmationSettings> deliveryConfirmationSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDeliveryRestrictions(ByValue<DeliveryRestrictions> deliveryRestrictions, ByValue<AutoAssignDeliveryTerminalSettings> autoAssignSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDeliverySettings(ByValue<DeliverySettings> deliverySettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDeliverySmsSendingSettings(ByValue<DeliverySmsSendingSettings> deliverySmsSendingSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateErrorNotificationConfiguration(ByValue<NotificationConfiguration> config, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateFrontSessionsProperties(ByValue<FrontSessionsProperties> sessionsProperties, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateGroupLocation(List<ByValue<GroupLocation>> items, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateIikoCard51Settings(ByValue<IikoCard51Settings> iikoCard51Settings, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateLogisticsSettings(ByValue<LogisticsSettings> logisticsSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<bool> AddGroup(ByValue<Group> group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> AddRestorauntSection(Guid? groupId, ByValue<RestaurantSection> restorauntSection, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ClearRestoImage([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> DeleteGroup(Group group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> DeleteSection(RestaurantSection section, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> EditAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> GetDeliveryListUpdateCooldownSec([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetDepartmentId([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<GroupServiceMode> GetMajorServiceMode([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetRestoImage(Guid? imageId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetSavedServerProperty(string name, bool loadFromMemory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, string>> GetServerProperties(List<string> propertyNames, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetServerProperty(string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<SettingsItem>> GetSettingsMetaData([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsEnableManualDeliveryZones([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsEnableToCreateDeliveryWithoutCustomer([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsEnableToSaveDeliveryWithoutTerminal([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RefreshGroupProperties(ByValue<Group> valGroup, List<CookingPlaceType> deletedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> newCpt, List<PointOfSale> deletedPos, List<ByValue<PointOfSale>> changedPos, List<ByValue<PointOfSale>> newPos, List<PointOfSale> restoredPos, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RefreshSectionProperties(ByValue<RestaurantSection> valSection, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, List<Table> deletedTbl, List<ByValue<Table>> changedTbl, List<ByValue<Table>> newTbl, List<Table> restoredTbl, bool waiterCanOpenOthersOrders, bool roundTablesInSectionSchema, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RestoreGroup(Group group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RestoreRestaurantSection(RestaurantSection restaurantSection, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCostCorrectionSettings(bool isDistributeCostCorrections, string costCorrectionCronExpression, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Guid?> SetRestoImage(SavedImageRequest imageDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetServerProperties(Dictionary<string, string> properties, bool applyImmediate, bool saveToFile, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetServerProperty(string name, string value, bool applyImmediate, bool saveToFile, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SwapGroupMainTerminal(Group group, Terminal newMainTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateCafeSetup(ByValue<CafeSetup> cafeSetup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateConception(ByValue<Conception> conception, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDeliveryAppearanceSettings(ByValue<DeliveryAppearanceSettings> deliveryAppearanceSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDeliveryConfirmationSettings(ByValue<DeliveryConfirmationSettings> deliveryConfirmationSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDeliveryRestrictions(ByValue<DeliveryRestrictions> deliveryRestrictions, ByValue<AutoAssignDeliveryTerminalSettings> autoAssignSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDeliverySettings(ByValue<DeliverySettings> deliverySettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDeliverySmsSendingSettings(ByValue<DeliverySmsSendingSettings> deliverySmsSendingSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateErrorNotificationConfiguration(ByValue<NotificationConfiguration> config, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateFrontSessionsProperties(ByValue<FrontSessionsProperties> sessionsProperties, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateGroupLocation(List<ByValue<GroupLocation>> items, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateIikoCard51Settings(ByValue<IikoCard51Settings> iikoCard51Settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateLogisticsSettings(ByValue<LogisticsSettings> logisticsSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ITablesEditorService
    {
        #region Synchronous versions
        IServiceMethodCall<Guid?> CreateSchema(string name, Guid? sectionID);
        IServiceMethodCall<Guid?> CreateSchemaCopy(Guid? id, string name);
        IServiceMethodCall<object> DeleteSchema(Guid? id);
        IServiceMethodCall<string> GetSectionObjectImage(Guid? imageID);
        IServiceMethodCall<object> SetSectionImage(Guid? schemaID, string data);
        IServiceMethodCall<object> SetSectionName(Guid? schemaID, string name);
        IServiceMethodCall<object> SetSectionObjectImage(Guid? imageID, string data);
        IServiceMethodCall<object> SetSectionObjects(Guid? schemaID, HashSet<RestaurantSectionObject> objects);
        IServiceMethodCall<object> SetSectionSchema(Guid? sectionID, Guid? schemaID);
        IServiceMethodCall<object> SetSectionSize(Guid? schemaID, int width, int height);
        #endregion

        #region asynchronous version
        void CreateSchema(string name, Guid? sectionID, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        void CreateSchemaCopy(Guid? id, string name, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        void DeleteSchema(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetSectionObjectImage(Guid? imageID, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void SetSectionImage(Guid? schemaID, string data, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetSectionName(Guid? schemaID, string name, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetSectionObjectImage(Guid? imageID, string data, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetSectionObjects(Guid? schemaID, HashSet<RestaurantSectionObject> objects, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetSectionSchema(Guid? sectionID, Guid? schemaID, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetSectionSize(Guid? schemaID, int width, int height, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<Guid?> CreateSchema(string name, Guid? sectionID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Guid?> CreateSchemaCopy(Guid? id, string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteSchema(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetSectionObjectImage(Guid? imageID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSectionImage(Guid? schemaID, string data, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSectionName(Guid? schemaID, string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSectionObjectImage(Guid? imageID, string data, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSectionObjects(Guid? schemaID, HashSet<RestaurantSectionObject> objects, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSectionSchema(Guid? sectionID, Guid? schemaID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSectionSize(Guid? schemaID, int width, int height, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDBMaintenanceService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AutoBackupNow();
        IServiceMethodCall<object> CleanEvents();
        IServiceMethodCall<object> ClearDb();
        IServiceMethodCall<object> ClearLog(bool simpleRecoveryModel);
        IServiceMethodCall<Dictionary<string, DBBackupInfo>> GetBackupsList();
        IServiceMethodCall<Dictionary<DBInfoParameter, string>> GetDBInfo();
        IServiceMethodCall<DBMaintenanceTaskType> GetDBMaintenanceCurrentTask();
        IServiceMethodCall<DbLastBackupStatus> GetLastBackupStatus();
        IServiceMethodCall<bool> IsAutobackupsEnabled();
        IServiceMethodCall<object> ManualBackupNow();
        IServiceMethodCall<object> RebuildIndexes(bool runInBulkLoggedRecoveryModel);
        IServiceMethodCall<object> RemoveBackup(string name);
        IServiceMethodCall<object> RestartDB();
        IServiceMethodCall<object> SetDbMaintenanceSettings(BackupSettings backupSettings, CleanEventsSettings cleanEventsSettings);
        #endregion

        #region asynchronous version
        void AutoBackupNow(AsyncErrorHandler errorHandler, Action resultHandler);
        void CleanEvents(AsyncErrorHandler errorHandler, Action resultHandler);
        void ClearDb(AsyncErrorHandler errorHandler, Action resultHandler);
        void ClearLog(bool simpleRecoveryModel, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetBackupsList(AsyncErrorHandler errorHandler, Action<Dictionary<string, DBBackupInfo>> resultHandler);
        void GetDBInfo(AsyncErrorHandler errorHandler, Action<Dictionary<DBInfoParameter, string>> resultHandler);
        void GetDBMaintenanceCurrentTask(AsyncErrorHandler errorHandler, Action<DBMaintenanceTaskType> resultHandler);
        void GetLastBackupStatus(AsyncErrorHandler errorHandler, Action<DbLastBackupStatus> resultHandler);
        void IsAutobackupsEnabled(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void ManualBackupNow(AsyncErrorHandler errorHandler, Action resultHandler);
        void RebuildIndexes(bool runInBulkLoggedRecoveryModel, AsyncErrorHandler errorHandler, Action resultHandler);
        void RemoveBackup(string name, AsyncErrorHandler errorHandler, Action resultHandler);
        void RestartDB(AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDbMaintenanceSettings(BackupSettings backupSettings, CleanEventsSettings cleanEventsSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AutoBackupNow([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CleanEvents([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ClearDb([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ClearLog(bool simpleRecoveryModel, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, DBBackupInfo>> GetBackupsList([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<DBInfoParameter, string>> GetDBInfo([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DBMaintenanceTaskType> GetDBMaintenanceCurrentTask([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DbLastBackupStatus> GetLastBackupStatus([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsAutobackupsEnabled([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ManualBackupNow([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RebuildIndexes(bool runInBulkLoggedRecoveryModel, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RemoveBackup(string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RestartDB([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDbMaintenanceSettings(BackupSettings backupSettings, CleanEventsSettings cleanEventsSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryTerminalService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<DeliveryTerminal>> GetAllDeliveryTerminals(int revision);
        IServiceMethodCall<object> SaveDeliveryTerminal(ByValue<DeliveryTerminal> terminal);
        IServiceMethodCall<object> SetDeliveryTerminalDeleted(Guid? deliveryTerminalId, bool deleted);
        IServiceMethodCall<object> SetDeliveryTerminalRegistered(Guid? deliveryTerminalId, bool registered);
        #endregion

        #region asynchronous version
        void GetAllDeliveryTerminals(int revision, AsyncErrorHandler errorHandler, Action<ICollection<DeliveryTerminal>> resultHandler);
        void SaveDeliveryTerminal(ByValue<DeliveryTerminal> terminal, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeliveryTerminalDeleted(Guid? deliveryTerminalId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeliveryTerminalRegistered(Guid? deliveryTerminalId, bool registered, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<ICollection<DeliveryTerminal>> GetAllDeliveryTerminals(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveDeliveryTerminal(ByValue<DeliveryTerminal> terminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeliveryTerminalDeleted(Guid? deliveryTerminalId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeliveryTerminalRegistered(Guid? deliveryTerminalId, bool registered, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEdiService
    {
        #region Synchronous versions
        IServiceMethodCall<List<PurchasesDeviationsReportInternalItem>> BuildInternalPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> supplierFilter, HashSet<Store> storeFilter, HashSet<User> franchiseSuppliers, HashSet<OrderDeviationType> deviationFilter);
        IServiceMethodCall<ICollection<PurchasesDeviationsReportItem>> BuildPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> supplierFilter, HashSet<Store> storeFilter, HashSet<OrderDeviationType> deviationFilter);
        IServiceMethodCall<object> CancelOrders(ICollection<EdiOrderDocument> orders);
        IServiceMethodCall<object> ConfirmOrdersManually(ICollection<EdiOrderDocument> orders);
        IServiceMethodCall<object> CreateExternalEdiSystem(Guid? id, string name);
        IServiceMethodCall<EdiIncomingInvoice> CreateInvoice(EdiOrderDocument ediOrder);
        IServiceMethodCall<object> DeleteOrRestoreEdiSystems(ICollection<Guid> ediSystems, bool delete);
        IServiceMethodCall<object> DespatchOrdersManually(ICollection<EdiOrderDocument> orders, bool createInvoice);
        IServiceMethodCall<object> ExecuteOrdersManually(ICollection<EdiOrderDocument> orders);
        IServiceMethodCall<object> SendOrders(ICollection<EdiOrderDocument> orders);
        IServiceMethodCall<object> TestKonturFtpConnection(string host, int? port, string user, string passwd);
        IServiceMethodCall<object> UpdateExternalEdiSystem(Guid? id, string name, bool delete);
        #endregion

        #region asynchronous version
        void BuildInternalPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> supplierFilter, HashSet<Store> storeFilter, HashSet<User> franchiseSuppliers, HashSet<OrderDeviationType> deviationFilter, AsyncErrorHandler errorHandler, Action<List<PurchasesDeviationsReportInternalItem>> resultHandler);
        void BuildPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> supplierFilter, HashSet<Store> storeFilter, HashSet<OrderDeviationType> deviationFilter, AsyncErrorHandler errorHandler, Action<ICollection<PurchasesDeviationsReportItem>> resultHandler);
        void CancelOrders(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler);
        void ConfirmOrdersManually(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateExternalEdiSystem(Guid? id, string name, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateInvoice(EdiOrderDocument ediOrder, AsyncErrorHandler errorHandler, Action<EdiIncomingInvoice> resultHandler);
        void DeleteOrRestoreEdiSystems(ICollection<Guid> ediSystems, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void DespatchOrdersManually(ICollection<EdiOrderDocument> orders, bool createInvoice, AsyncErrorHandler errorHandler, Action resultHandler);
        void ExecuteOrdersManually(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler);
        void SendOrders(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler);
        void TestKonturFtpConnection(string host, int? port, string user, string passwd, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateExternalEdiSystem(Guid? id, string name, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<List<PurchasesDeviationsReportInternalItem>> BuildInternalPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> supplierFilter, HashSet<Store> storeFilter, HashSet<User> franchiseSuppliers, HashSet<OrderDeviationType> deviationFilter, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PurchasesDeviationsReportItem>> BuildPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> supplierFilter, HashSet<Store> storeFilter, HashSet<OrderDeviationType> deviationFilter, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CancelOrders(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ConfirmOrdersManually(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateExternalEdiSystem(Guid? id, string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EdiIncomingInvoice> CreateInvoice(EdiOrderDocument ediOrder, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteOrRestoreEdiSystems(ICollection<Guid> ediSystems, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DespatchOrdersManually(ICollection<EdiOrderDocument> orders, bool createInvoice, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ExecuteOrdersManually(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SendOrders(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> TestKonturFtpConnection(string host, int? port, string user, string passwd, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateExternalEdiSystem(Guid? id, string name, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisBalanceService
    {
        #region Synchronous versions
        IServiceMethodCall<DocumentValidationResult> SaveNewBalanceRequest(EgaisBalanceDocument newDocument);
        IServiceMethodCall<object> SendBalanceRequest(Guid? documentId);
        #endregion

        #region asynchronous version
        void SaveNewBalanceRequest(EgaisBalanceDocument newDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        void SendBalanceRequest(Guid? documentId, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<DocumentValidationResult> SaveNewBalanceRequest(EgaisBalanceDocument newDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SendBalanceRequest(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisDeclarationService
    {
        #region Synchronous versions
        IServiceMethodCall<AlcoholJournal> BuildAlcoholSalesReportFromEgaisShopWriteoff(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> egaisShopWriteoffIds);
        #endregion

        #region asynchronous version
        void BuildAlcoholSalesReportFromEgaisShopWriteoff(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> egaisShopWriteoffIds, AsyncErrorHandler errorHandler, Action<AlcoholJournal> resultHandler);
        #endregion
        #region task version
        Task<AlcoholJournal> BuildAlcoholSalesReportFromEgaisShopWriteoff(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> egaisShopWriteoffIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisDocumentsFrontService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<EgaisAbstractDocument>> GetEgaisDocumentForFront(EgaisDocumentTypes documentType, Guid? id);
        IServiceMethodCall<List<EgaisAbstractDocument>> GetEgaisDocumentsForFront(ICollection<string> connections);
        IServiceMethodCall<DocumentValidationResult> SaveOrUpdateEgaisMarkConfirmFromFront(EgaisMarkConfirm newDocument);
        #endregion

        #region asynchronous version
        void GetEgaisDocumentForFront(EgaisDocumentTypes documentType, Guid? id, AsyncErrorHandler errorHandler, Action<ICollection<EgaisAbstractDocument>> resultHandler);
        void GetEgaisDocumentsForFront(ICollection<string> connections, AsyncErrorHandler errorHandler, Action<List<EgaisAbstractDocument>> resultHandler);
        void SaveOrUpdateEgaisMarkConfirmFromFront(EgaisMarkConfirm newDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        #endregion
        #region task version
        Task<ICollection<EgaisAbstractDocument>> GetEgaisDocumentForFront(EgaisDocumentTypes documentType, Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<EgaisAbstractDocument>> GetEgaisDocumentsForFront(ICollection<string> connections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> SaveOrUpdateEgaisMarkConfirmFromFront(EgaisMarkConfirm newDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisDocumentsService
    {
        #region Synchronous versions
        IServiceMethodCall<EgaisResendInvoiceSendResult> CreateAndSendQueryResendInvoices(string sourceRarId, HashSet<string> wbRegIds, bool skipValidation);
        IServiceMethodCall<bool> DeleteDocument(Guid? documentId);
        IServiceMethodCall<EgaisAbstractDocument> GetEgaisDocument(EgaisDocumentTypes documentType, Guid? id);
        IServiceMethodCall<EgaisAbstractDocument> GetEgaisDocumentByRegId(EgaisDocumentTypes documentType, string id);
        IServiceMethodCall<List<EgaisAbstractDocument>> GetEgaisDocuments(DateTime? dateFrom, DateTime? dateTo, bool includeDeleted, ICollection<Guid> departmentIds, ICollection<EgaisConnectionSettings> connections);
        IServiceMethodCall<ICollection<EgaisMarkConfirm>> GetEgaisMarkConfirmByInvoiceId(Guid? id);
        IServiceMethodCall<DocumentValidationResult> SaveOrUpdateDocument(EgaisAbstractInternalDocument newDocument);
        IServiceMethodCall<object> SendDocument(Guid? documentId);
        IServiceMethodCall<EgaisQueryOrganization> SendNewQueryOrganizationRequest(string sourceRarId, EgaisApiVersion apiVersion, Dictionary<string, string> parameters);
        IServiceMethodCall<EgaisQueryOrganization> SendNewSetTtnVersionRequest(string sourceRarId, EgaisApiVersion newWayBillVersion);
        IServiceMethodCall<EgaisResendInvoiceSendResult> SendQueryResendInvoiceDocument(Guid? documentId, bool skipValidation);
        IServiceMethodCall<bool> StartDocumentUpdates(Guid? documentId, bool breakLock);
        IServiceMethodCall<bool> StopDocumentUpdates(Guid? documentId);
        IServiceMethodCall<bool> UnDeleteDocument(Guid? documentId);
        #endregion

        #region asynchronous version
        void CreateAndSendQueryResendInvoices(string sourceRarId, HashSet<string> wbRegIds, bool skipValidation, AsyncErrorHandler errorHandler, Action<EgaisResendInvoiceSendResult> resultHandler);
        void DeleteDocument(Guid? documentId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void GetEgaisDocument(EgaisDocumentTypes documentType, Guid? id, AsyncErrorHandler errorHandler, Action<EgaisAbstractDocument> resultHandler);
        void GetEgaisDocumentByRegId(EgaisDocumentTypes documentType, string id, AsyncErrorHandler errorHandler, Action<EgaisAbstractDocument> resultHandler);
        void GetEgaisDocuments(DateTime? dateFrom, DateTime? dateTo, bool includeDeleted, ICollection<Guid> departmentIds, ICollection<EgaisConnectionSettings> connections, AsyncErrorHandler errorHandler, Action<List<EgaisAbstractDocument>> resultHandler);
        void GetEgaisMarkConfirmByInvoiceId(Guid? id, AsyncErrorHandler errorHandler, Action<ICollection<EgaisMarkConfirm>> resultHandler);
        void SaveOrUpdateDocument(EgaisAbstractInternalDocument newDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler);
        void SendDocument(Guid? documentId, AsyncErrorHandler errorHandler, Action resultHandler);
        void SendNewQueryOrganizationRequest(string sourceRarId, EgaisApiVersion apiVersion, Dictionary<string, string> parameters, AsyncErrorHandler errorHandler, Action<EgaisQueryOrganization> resultHandler);
        void SendNewSetTtnVersionRequest(string sourceRarId, EgaisApiVersion newWayBillVersion, AsyncErrorHandler errorHandler, Action<EgaisQueryOrganization> resultHandler);
        void SendQueryResendInvoiceDocument(Guid? documentId, bool skipValidation, AsyncErrorHandler errorHandler, Action<EgaisResendInvoiceSendResult> resultHandler);
        void StartDocumentUpdates(Guid? documentId, bool breakLock, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void StopDocumentUpdates(Guid? documentId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void UnDeleteDocument(Guid? documentId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        #endregion
        #region task version
        Task<EgaisResendInvoiceSendResult> CreateAndSendQueryResendInvoices(string sourceRarId, HashSet<string> wbRegIds, bool skipValidation, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> DeleteDocument(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisAbstractDocument> GetEgaisDocument(EgaisDocumentTypes documentType, Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisAbstractDocument> GetEgaisDocumentByRegId(EgaisDocumentTypes documentType, string id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<EgaisAbstractDocument>> GetEgaisDocuments(DateTime? dateFrom, DateTime? dateTo, bool includeDeleted, ICollection<Guid> departmentIds, ICollection<EgaisConnectionSettings> connections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EgaisMarkConfirm>> GetEgaisMarkConfirmByInvoiceId(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DocumentValidationResult> SaveOrUpdateDocument(EgaisAbstractInternalDocument newDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SendDocument(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisQueryOrganization> SendNewQueryOrganizationRequest(string sourceRarId, EgaisApiVersion apiVersion, Dictionary<string, string> parameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisQueryOrganization> SendNewSetTtnVersionRequest(string sourceRarId, EgaisApiVersion newWayBillVersion, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisResendInvoiceSendResult> SendQueryResendInvoiceDocument(Guid? documentId, bool skipValidation, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> StartDocumentUpdates(Guid? documentId, bool breakLock, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> StopDocumentUpdates(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> UnDeleteDocument(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisEntitiesService
    {
        #region Synchronous versions
        IServiceMethodCall<int> DeleteEgaisOrganizationEntities(ICollection<Guid> ids);
        IServiceMethodCall<int> DeleteEgaisProductEntities(ICollection<Guid> ids);
        IServiceMethodCall<EgaisEntitiesUpdate> GetEgaisEntitiesUpdate(int revisionFrom, DateTime? dateFrom);
        IServiceMethodCall<int> UnDeleteEgaisOrganizationEntities(ICollection<Guid> ids);
        IServiceMethodCall<int> UnDeleteEgaisProductEntities(ICollection<Guid> ids);
        IServiceMethodCall<object> UpdateEgaisOrganizationEntity(ByValue<EgaisOrganizationEntity> newEntity);
        IServiceMethodCall<object> UpdateEgaisProductEntity(ICollection<ByValue<EgaisProductEntity>> newEntities);
        #endregion

        #region asynchronous version
        void DeleteEgaisOrganizationEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void DeleteEgaisProductEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void GetEgaisEntitiesUpdate(int revisionFrom, DateTime? dateFrom, AsyncErrorHandler errorHandler, Action<EgaisEntitiesUpdate> resultHandler);
        void UnDeleteEgaisOrganizationEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void UnDeleteEgaisProductEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void UpdateEgaisOrganizationEntity(ByValue<EgaisOrganizationEntity> newEntity, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateEgaisProductEntity(ICollection<ByValue<EgaisProductEntity>> newEntities, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<int> DeleteEgaisOrganizationEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> DeleteEgaisProductEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisEntitiesUpdate> GetEgaisEntitiesUpdate(int revisionFrom, DateTime? dateFrom, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> UnDeleteEgaisOrganizationEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> UnDeleteEgaisProductEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateEgaisOrganizationEntity(ByValue<EgaisOrganizationEntity> newEntity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateEgaisProductEntity(ICollection<ByValue<EgaisProductEntity>> newEntities, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisIncomingInvoicesService
    {
        #region Synchronous versions
        IServiceMethodCall<EgaisIncomingInvoice> ConfirmEgaisInvoice(Guid? egaisInvoiceId);
        IServiceMethodCall<IncomingInvoice> CreateInvoice(EgaisIncomingInvoice egaisInvoice);
        IServiceMethodCall<EgaisIncomingInvoice> EditEgaisInvoice(Guid? egaisInvoiceId);
        IServiceMethodCall<EgaisIncomingInvoice> RejectEgaisInvoice(Guid? egaisInvoiceId);
        IServiceMethodCall<EgaisInvoiceSaveResult> SaveEgaisIncomingInvoice(EgaisIncomingInvoice egaisInvoice, bool updateSupplierProducts, bool allowSupplierProductsUpdate);
        #endregion

        #region asynchronous version
        void ConfirmEgaisInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisIncomingInvoice> resultHandler);
        void CreateInvoice(EgaisIncomingInvoice egaisInvoice, AsyncErrorHandler errorHandler, Action<IncomingInvoice> resultHandler);
        void EditEgaisInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisIncomingInvoice> resultHandler);
        void RejectEgaisInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisIncomingInvoice> resultHandler);
        void SaveEgaisIncomingInvoice(EgaisIncomingInvoice egaisInvoice, bool updateSupplierProducts, bool allowSupplierProductsUpdate, AsyncErrorHandler errorHandler, Action<EgaisInvoiceSaveResult> resultHandler);
        #endregion
        #region task version
        Task<EgaisIncomingInvoice> ConfirmEgaisInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<IncomingInvoice> CreateInvoice(EgaisIncomingInvoice egaisInvoice, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisIncomingInvoice> EditEgaisInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisIncomingInvoice> RejectEgaisInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisInvoiceSaveResult> SaveEgaisIncomingInvoice(EgaisIncomingInvoice egaisInvoice, bool updateSupplierProducts, bool allowSupplierProductsUpdate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisInventoryService
    {
        #region Synchronous versions
        IServiceMethodCall<EgaisInventoryReport> BuildInventoryReport(bool computeInternalBalances, bool computeInternalMovement, bool computeEgaisBalances, string fsRarId, ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> iikoDocumentIds);
        #endregion

        #region asynchronous version
        void BuildInventoryReport(bool computeInternalBalances, bool computeInternalMovement, bool computeEgaisBalances, string fsRarId, ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> iikoDocumentIds, AsyncErrorHandler errorHandler, Action<EgaisInventoryReport> resultHandler);
        #endregion
        #region task version
        Task<EgaisInventoryReport> BuildInventoryReport(bool computeInternalBalances, bool computeInternalMovement, bool computeEgaisBalances, string fsRarId, ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> iikoDocumentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisInvoicesService
    {
        #region Synchronous versions
        IServiceMethodCall<EgaisAbstractInvoice> GetEgaisInvoice(Guid? id);
        IServiceMethodCall<EgaisAbstractInvoice> LinkProductsBySupplierPriceList(EgaisAbstractInvoice egaisInvoice, DateTime? date);
        #endregion

        #region asynchronous version
        void GetEgaisInvoice(Guid? id, AsyncErrorHandler errorHandler, Action<EgaisAbstractInvoice> resultHandler);
        void LinkProductsBySupplierPriceList(EgaisAbstractInvoice egaisInvoice, DateTime? date, AsyncErrorHandler errorHandler, Action<EgaisAbstractInvoice> resultHandler);
        #endregion
        #region task version
        Task<EgaisAbstractInvoice> GetEgaisInvoice(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisAbstractInvoice> LinkProductsBySupplierPriceList(EgaisAbstractInvoice egaisInvoice, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisOutgoingInvoicesService
    {
        #region Synchronous versions
        IServiceMethodCall<object> ConfirmRecipientActWithChanges(Guid? egaisInvoiceId);
        IServiceMethodCall<EgaisInvoiceCreateResult> CreateReturnedOutgoingInvoice(Guid? egaisInvoiceId);
        IServiceMethodCall<object> RejectRecipientActWithChanges(Guid? egaisInvoiceId);
        IServiceMethodCall<EgaisInvoiceSaveResult> SaveEgaisOutgoingInvoice(EgaisOutgoingInvoice egaisInvoice);
        IServiceMethodCall<object> SendEgaisOutgoingInvoice(Guid? egaisInvoiceId);
        #endregion

        #region asynchronous version
        void ConfirmRecipientActWithChanges(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateReturnedOutgoingInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisInvoiceCreateResult> resultHandler);
        void RejectRecipientActWithChanges(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveEgaisOutgoingInvoice(EgaisOutgoingInvoice egaisInvoice, AsyncErrorHandler errorHandler, Action<EgaisInvoiceSaveResult> resultHandler);
        void SendEgaisOutgoingInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> ConfirmRecipientActWithChanges(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisInvoiceCreateResult> CreateReturnedOutgoingInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RejectRecipientActWithChanges(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisInvoiceSaveResult> SaveEgaisOutgoingInvoice(EgaisOutgoingInvoice egaisInvoice, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SendEgaisOutgoingInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisRepealService
    {
        #region Synchronous versions
        IServiceMethodCall<EgaisRequestRepeal> ConfirmRequestRepeal(Guid? repealId);
        IServiceMethodCall<EgaisRequestRepeal> RejectRequestRepeal(Guid? repealId);
        IServiceMethodCall<EgaisRequestRepeal> SendRequestRepeal(Guid? documentId);
        #endregion

        #region asynchronous version
        void ConfirmRequestRepeal(Guid? repealId, AsyncErrorHandler errorHandler, Action<EgaisRequestRepeal> resultHandler);
        void RejectRequestRepeal(Guid? repealId, AsyncErrorHandler errorHandler, Action<EgaisRequestRepeal> resultHandler);
        void SendRequestRepeal(Guid? documentId, AsyncErrorHandler errorHandler, Action<EgaisRequestRepeal> resultHandler);
        #endregion
        #region task version
        Task<EgaisRequestRepeal> ConfirmRequestRepeal(Guid? repealId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisRequestRepeal> RejectRequestRepeal(Guid? repealId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisRequestRepeal> SendRequestRepeal(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CheckUtmConnection(string fsRarId, string url, Guid? terminalId, string terminalName);
        IServiceMethodCall<object> ForceRefreshUtmData(Guid? departmentId, string connectionRarId);
        #endregion

        #region asynchronous version
        void CheckUtmConnection(string fsRarId, string url, Guid? terminalId, string terminalName, AsyncErrorHandler errorHandler, Action resultHandler);
        void ForceRefreshUtmData(Guid? departmentId, string connectionRarId, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> CheckUtmConnection(string fsRarId, string url, Guid? terminalId, string terminalName, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ForceRefreshUtmData(Guid? departmentId, string connectionRarId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEgaisUnsealService
    {
        #region Synchronous versions
        IServiceMethodCall<bool> CanBeCancelledNow(string fsRarId, string egaisAlcCode, string egaisMarkCode);
        IServiceMethodCall<int> DeleteUnsealEvents(ICollection<Guid> ids);
        IServiceMethodCall<EgaisMarkStateUpdate> GetEgaisMarkStateUpdate(int knownRevision, ICollection<string> fsRarIds);
        IServiceMethodCall<List<EgaisUnsealEvent>> GetUnsealEvents(ICollection<string> fsRarId, DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<int> RenewUnsealEvents(ICollection<Guid> ids);
        IServiceMethodCall<int> UnDeleteUnsealEvents(ICollection<Guid> ids);
        #endregion

        #region asynchronous version
        void CanBeCancelledNow(string fsRarId, string egaisAlcCode, string egaisMarkCode, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void DeleteUnsealEvents(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void GetEgaisMarkStateUpdate(int knownRevision, ICollection<string> fsRarIds, AsyncErrorHandler errorHandler, Action<EgaisMarkStateUpdate> resultHandler);
        void GetUnsealEvents(ICollection<string> fsRarId, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<EgaisUnsealEvent>> resultHandler);
        void RenewUnsealEvents(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void UnDeleteUnsealEvents(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        #endregion
        #region task version
        Task<bool> CanBeCancelledNow(string fsRarId, string egaisAlcCode, string egaisMarkCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> DeleteUnsealEvents(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<EgaisMarkStateUpdate> GetEgaisMarkStateUpdate(int knownRevision, ICollection<string> fsRarIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<EgaisUnsealEvent>> GetUnsealEvents(ICollection<string> fsRarId, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> RenewUnsealEvents(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> UnDeleteUnsealEvents(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IFranchiseService
    {
        #region Synchronous versions
        IServiceMethodCall<ConnectionGroup> CreateOrUpdateConnectionGroup(ByValue<ConnectionGroup> connectionGroup);
        IServiceMethodCall<object> DeleteOrRestoreConnectionGroup(Guid? connectionGroupId, bool delete);
        IServiceMethodCall<List<PingMessageRecord>> GetPingMessages(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<object> Ping(Guid? sourceConnectionGroupId);
        #endregion

        #region asynchronous version
        void CreateOrUpdateConnectionGroup(ByValue<ConnectionGroup> connectionGroup, AsyncErrorHandler errorHandler, Action<ConnectionGroup> resultHandler);
        void DeleteOrRestoreConnectionGroup(Guid? connectionGroupId, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetPingMessages(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<PingMessageRecord>> resultHandler);
        void Ping(Guid? sourceConnectionGroupId, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<ConnectionGroup> CreateOrUpdateConnectionGroup(ByValue<ConnectionGroup> connectionGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteOrRestoreConnectionGroup(Guid? connectionGroupId, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<PingMessageRecord>> GetPingMessages(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> Ping(Guid? sourceConnectionGroupId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IServiceFeeService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddServiceFee(ByValue<ServiceFee> serviceFee);
        IServiceMethodCall<object> DeleteServiceFees(List<ServiceFee> products);
        IServiceMethodCall<List<ServiceFee>> GetServiceFees();
        IServiceMethodCall<object> UndeleteServiceFees(List<ServiceFee> products);
        IServiceMethodCall<object> UpdateServiceFee(ByValue<ServiceFee> serviceFee);
        #endregion

        #region asynchronous version
        void AddServiceFee(ByValue<ServiceFee> serviceFee, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteServiceFees(List<ServiceFee> products, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetServiceFees(AsyncErrorHandler errorHandler, Action<List<ServiceFee>> resultHandler);
        void UndeleteServiceFees(List<ServiceFee> products, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateServiceFee(ByValue<ServiceFee> serviceFee, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AddServiceFee(ByValue<ServiceFee> serviceFee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteServiceFees(List<ServiceFee> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<ServiceFee>> GetServiceFees([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteServiceFees(List<ServiceFee> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateServiceFee(ByValue<ServiceFee> serviceFee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IKladrService
    {
        #region Synchronous versions
        IServiceMethodCall<KladrSynchronizationResult> ConfirmSynchronizeCityWithKladr(Guid? cityId, string kladrCityId);
        IServiceMethodCall<Dictionary<string, KladrObject>> GetAllCities();
        IServiceMethodCall<Dictionary<string, KladrObject>> GetCitiesByName(string cityName);
        IServiceMethodCall<KladrSynchronizationResult> SynchronizeCityWithKladr(Guid? cityId, string kladrCityId);
        #endregion

        #region asynchronous version
        void ConfirmSynchronizeCityWithKladr(Guid? cityId, string kladrCityId, AsyncErrorHandler errorHandler, Action<KladrSynchronizationResult> resultHandler);
        void GetAllCities(AsyncErrorHandler errorHandler, Action<Dictionary<string, KladrObject>> resultHandler);
        void GetCitiesByName(string cityName, AsyncErrorHandler errorHandler, Action<Dictionary<string, KladrObject>> resultHandler);
        void SynchronizeCityWithKladr(Guid? cityId, string kladrCityId, AsyncErrorHandler errorHandler, Action<KladrSynchronizationResult> resultHandler);
        #endregion
        #region task version
        Task<KladrSynchronizationResult> ConfirmSynchronizeCityWithKladr(Guid? cityId, string kladrCityId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, KladrObject>> GetAllCities([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<string, KladrObject>> GetCitiesByName(string cityName, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<KladrSynchronizationResult> SynchronizeCityWithKladr(Guid? cityId, string kladrCityId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICityService
    {
        #region Synchronous versions
        IServiceMethodCall<object> ForceCitiesExportToIikoNet();
        IServiceMethodCall<object> SaveCity(ByValue<City> city);
        IServiceMethodCall<object> SetCitiesDeleted(ICollection<Guid> citiesIds, bool deleted);
        IServiceMethodCall<object> SetCityDeleted(Guid? cityId, bool deleted);
        #endregion

        #region asynchronous version
        void ForceCitiesExportToIikoNet(AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveCity(ByValue<City> city, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetCitiesDeleted(ICollection<Guid> citiesIds, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetCityDeleted(Guid? cityId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> ForceCitiesExportToIikoNet([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCity(ByValue<City> city, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCitiesDeleted(ICollection<Guid> citiesIds, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCityDeleted(Guid? cityId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IStreetService
    {
        #region Synchronous versions
        IServiceMethodCall<Street> GetStreet(Guid? streetId);
        IServiceMethodCall<ICollection<Street>> GetStreets(int revision);
        IServiceMethodCall<object> SaveStreet(Street street);
        IServiceMethodCall<Street> SearchStreet(StreetSearchRequest request);
        IServiceMethodCall<object> SetStreetDeleted(Guid? streetId, bool deleted);
        IServiceMethodCall<object> SetStreetsDeleted(ICollection<Guid> streetId, bool deleted);
        #endregion

        #region asynchronous version
        void GetStreet(Guid? streetId, AsyncErrorHandler errorHandler, Action<Street> resultHandler);
        void GetStreets(int revision, AsyncErrorHandler errorHandler, Action<ICollection<Street>> resultHandler);
        void SaveStreet(Street street, AsyncErrorHandler errorHandler, Action resultHandler);
        void SearchStreet(StreetSearchRequest request, AsyncErrorHandler errorHandler, Action<Street> resultHandler);
        void SetStreetDeleted(Guid? streetId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetStreetsDeleted(ICollection<Guid> streetId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<Street> GetStreet(Guid? streetId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<Street>> GetStreets(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveStreet(Street street, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Street> SearchStreet(StreetSearchRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetStreetDeleted(Guid? streetId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetStreetsDeleted(ICollection<Guid> streetId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IAnnouncementService
    {
        #region Synchronous versions
        IServiceMethodCall<List<Announcement>> GetAllAnnouncements(User user, HashSet<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, bool? visibleInFront, bool? visibleInOffice, bool includeDeleted, bool includeExpired);
        IServiceMethodCall<List<Announcement>> GetAnnouncementsFront(User user);
        IServiceMethodCall<List<Announcement>> GetAnnouncementsOffice();
        IServiceMethodCall<object> SaveOrUpdateAnnouncements(ICollection<Announcement> announcements);
        #endregion

        #region asynchronous version
        void GetAllAnnouncements(User user, HashSet<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, bool? visibleInFront, bool? visibleInOffice, bool includeDeleted, bool includeExpired, AsyncErrorHandler errorHandler, Action<List<Announcement>> resultHandler);
        void GetAnnouncementsFront(User user, AsyncErrorHandler errorHandler, Action<List<Announcement>> resultHandler);
        void GetAnnouncementsOffice(AsyncErrorHandler errorHandler, Action<List<Announcement>> resultHandler);
        void SaveOrUpdateAnnouncements(ICollection<Announcement> announcements, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<List<Announcement>> GetAllAnnouncements(User user, HashSet<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, bool? visibleInFront, bool? visibleInOffice, bool includeDeleted, bool includeExpired, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<Announcement>> GetAnnouncementsFront(User user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<Announcement>> GetAnnouncementsOffice([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateAnnouncements(ICollection<Announcement> announcements, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICardProcessingService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateMapping(ByValue<CardProcessingMapping> mapping);
        #endregion

        #region asynchronous version
        void UpdateMapping(ByValue<CardProcessingMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateMapping(ByValue<CardProcessingMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEdelweissConfigurationService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateMapping(ByValue<EdelweissMapping> mapping);
        #endregion

        #region asynchronous version
        void UpdateMapping(ByValue<EdelweissMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateMapping(ByValue<EdelweissMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEpitomeConfigurationService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateMapping(ByValue<EpitomeMapping> mapping);
        #endregion

        #region asynchronous version
        void UpdateMapping(ByValue<EpitomeMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateMapping(ByValue<EpitomeMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IHoistConfigurationService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateMapping(ByValue<HoistMapping> mapping);
        #endregion

        #region asynchronous version
        void UpdateMapping(ByValue<HoistMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateMapping(ByValue<HoistMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoCard5SettingsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateOrCreateIikoCard5Settings(ByValue<IikoCard5Settings> iikoCard5Settings);
        #endregion

        #region asynchronous version
        void UpdateOrCreateIikoCard5Settings(ByValue<IikoCard5Settings> iikoCard5Settings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateOrCreateIikoCard5Settings(ByValue<IikoCard5Settings> iikoCard5Settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoNetService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateOrCreateIikoNetSettings(ByValue<IikoNetSettings> iikoNetSettings);
        #endregion

        #region asynchronous version
        void UpdateOrCreateIikoNetSettings(ByValue<IikoNetSettings> iikoNetSettings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateOrCreateIikoNetSettings(ByValue<IikoNetSettings> iikoNetSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICurrencyRateService
    {
        #region Synchronous versions
        IServiceMethodCall<object> ApplyChanges(List<CurrencyRate> ratesToInsert, List<CurrencyRate> ratesToUpdate, List<CurrencyRate> ratesToDelete);
        IServiceMethodCall<ICollection<CurrencyRate>> GetRates(DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency);
        #endregion

        #region asynchronous version
        void ApplyChanges(List<CurrencyRate> ratesToInsert, List<CurrencyRate> ratesToUpdate, List<CurrencyRate> ratesToDelete, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetRates(DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency, AsyncErrorHandler errorHandler, Action<ICollection<CurrencyRate>> resultHandler);
        #endregion
        #region task version
        Task<object> ApplyChanges(List<CurrencyRate> ratesToInsert, List<CurrencyRate> ratesToUpdate, List<CurrencyRate> ratesToDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<CurrencyRate>> GetRates(DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICurrencyService
    {
        #region Synchronous versions
        IServiceMethodCall<object> DeleteOrRestore(CurrencyEntity currency, bool delete);
        IServiceMethodCall<object> SaveCurrency(Currency currency);
        IServiceMethodCall<object> SaveCurrencyEntity(ByValue<CurrencyEntity> currency);
        #endregion

        #region asynchronous version
        void DeleteOrRestore(CurrencyEntity currency, bool delete, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveCurrency(Currency currency, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveCurrencyEntity(ByValue<CurrencyEntity> currency, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> DeleteOrRestore(CurrencyEntity currency, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCurrency(Currency currency, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCurrencyEntity(ByValue<CurrencyEntity> currency, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICustomerEvents
    {
        #region Synchronous versions
        IServiceMethodCall<object> FireCustomersListExcelExported();
        #endregion

        #region asynchronous version
        void FireCustomersListExcelExported(AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> FireCustomersListExcelExported([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ICustomerService
    {
        #region Synchronous versions
        IServiceMethodCall<CustomerImporterResult> ForceExchangeIikoBiz();
        IServiceMethodCall<BrdDataLoadingResponse> GetCustomerById(Guid? customerId, BrdDataLoadingRequest request);
        IServiceMethodCall<List<Customer>> GetCustomers(List<Guid> customersIds);
        IServiceMethodCall<object> SaveCustomer(Customer customer);
        IServiceMethodCall<Customer> SearchCustomer(CustomerSearchRequest request);
        IServiceMethodCall<int> SetCustomerConsentDates(CustomerIdsFilterInfo customerIdsFilterInfo, DateTime? consentDateFrom, DateTime? consentDateTo);
        IServiceMethodCall<int> SetCustomerConsentDatesByCreated(CustomerIdsFilterInfo customerIdsFilterInfo, int daysAfterCreated);
        IServiceMethodCall<object> SetCustomerDeleted(Guid? customerId, bool deleted);
        IServiceMethodCall<int> SetCustomerProcessingDates(CustomerIdsFilterInfo customerIdsFilterInfo, bool? newConsent, DateTime? processingDateFrom, DateTime? processingDateTo);
        IServiceMethodCall<object> SetCustomersDeleted(ICollection<Guid> customerId, bool deleted);
        #endregion

        #region asynchronous version
        void ForceExchangeIikoBiz(AsyncErrorHandler errorHandler, Action<CustomerImporterResult> resultHandler);
        void GetCustomerById(Guid? customerId, BrdDataLoadingRequest request, AsyncErrorHandler errorHandler, Action<BrdDataLoadingResponse> resultHandler);
        void GetCustomers(List<Guid> customersIds, AsyncErrorHandler errorHandler, Action<List<Customer>> resultHandler);
        void SaveCustomer(Customer customer, AsyncErrorHandler errorHandler, Action resultHandler);
        void SearchCustomer(CustomerSearchRequest request, AsyncErrorHandler errorHandler, Action<Customer> resultHandler);
        void SetCustomerConsentDates(CustomerIdsFilterInfo customerIdsFilterInfo, DateTime? consentDateFrom, DateTime? consentDateTo, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void SetCustomerConsentDatesByCreated(CustomerIdsFilterInfo customerIdsFilterInfo, int daysAfterCreated, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void SetCustomerDeleted(Guid? customerId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetCustomerProcessingDates(CustomerIdsFilterInfo customerIdsFilterInfo, bool? newConsent, DateTime? processingDateFrom, DateTime? processingDateTo, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void SetCustomersDeleted(ICollection<Guid> customerId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<CustomerImporterResult> ForceExchangeIikoBiz([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BrdDataLoadingResponse> GetCustomerById(Guid? customerId, BrdDataLoadingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<Customer>> GetCustomers(List<Guid> customersIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveCustomer(Customer customer, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Customer> SearchCustomer(CustomerSearchRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> SetCustomerConsentDates(CustomerIdsFilterInfo customerIdsFilterInfo, DateTime? consentDateFrom, DateTime? consentDateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> SetCustomerConsentDatesByCreated(CustomerIdsFilterInfo customerIdsFilterInfo, int daysAfterCreated, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCustomerDeleted(Guid? customerId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> SetCustomerProcessingDates(CustomerIdsFilterInfo customerIdsFilterInfo, bool? newConsent, DateTime? processingDateFrom, DateTime? processingDateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetCustomersDeleted(ICollection<Guid> customerId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateDeliveryCancelCauses(List<ByValue<DeliveryCancelCause>> causes);
        #endregion

        #region asynchronous version
        void UpdateDeliveryCancelCauses(List<ByValue<DeliveryCancelCause>> causes, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateDeliveryCancelCauses(List<ByValue<DeliveryCancelCause>> causes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryOrderGeocodeService
    {
        #region Synchronous versions
        IServiceMethodCall<DeliveryGeocodeResponse> FindDeliveryZones(string deliveryAddress, DeliveryZonePoint deliveryAddressPoint);
        IServiceMethodCall<DeliveryGeocodeResponse> GetSinglePoint(string deliveryAddress);
        #endregion

        #region asynchronous version
        void FindDeliveryZones(string deliveryAddress, DeliveryZonePoint deliveryAddressPoint, AsyncErrorHandler errorHandler, Action<DeliveryGeocodeResponse> resultHandler);
        void GetSinglePoint(string deliveryAddress, AsyncErrorHandler errorHandler, Action<DeliveryGeocodeResponse> resultHandler);
        #endregion
        #region task version
        Task<DeliveryGeocodeResponse> FindDeliveryZones(string deliveryAddress, DeliveryZonePoint deliveryAddressPoint, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DeliveryGeocodeResponse> GetSinglePoint(string deliveryAddress, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryHeatMapService
    {
        #region Synchronous versions
        IServiceMethodCall<DeliveryHeatMapInfo> GetDeliveryHeatMap(DateTime? dateFrom, DateTime? dateTo, int polygonSideInMeters, DeliveryHeatMapReportType heatMapReportType, MarketingSource marketingSource);
        #endregion

        #region asynchronous version
        void GetDeliveryHeatMap(DateTime? dateFrom, DateTime? dateTo, int polygonSideInMeters, DeliveryHeatMapReportType heatMapReportType, MarketingSource marketingSource, AsyncErrorHandler errorHandler, Action<DeliveryHeatMapInfo> resultHandler);
        #endregion
        #region task version
        Task<DeliveryHeatMapInfo> GetDeliveryHeatMap(DateTime? dateFrom, DateTime? dateTo, int polygonSideInMeters, DeliveryHeatMapReportType heatMapReportType, MarketingSource marketingSource, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IBrdDataLoadingService
    {
        #region Synchronous versions
        IServiceMethodCall<BrdDataLoadingResponse> GetAllBrdData(BrdDataLoadingRequest request);
        #endregion

        #region asynchronous version
        void GetAllBrdData(BrdDataLoadingRequest request, AsyncErrorHandler errorHandler, Action<BrdDataLoadingResponse> resultHandler);
        #endregion
        #region task version
        Task<BrdDataLoadingResponse> GetAllBrdData(BrdDataLoadingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ITerminalDeliveryDurationService
    {
        #region Synchronous versions
        IServiceMethodCall<long?> GetCourierDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal);
        IServiceMethodCall<Dictionary<Guid, TerminalDeliveryDuration>> GetDeliveryTerminalsDurationInMinutes(ICollection<DeliveryTerminal> deliveryTerminals);
        IServiceMethodCall<long?> GetSelfServiceDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal);
        #endregion

        #region asynchronous version
        void GetCourierDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, AsyncErrorHandler errorHandler, Action<long?> resultHandler);
        void GetDeliveryTerminalsDurationInMinutes(ICollection<DeliveryTerminal> deliveryTerminals, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, TerminalDeliveryDuration>> resultHandler);
        void GetSelfServiceDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, AsyncErrorHandler errorHandler, Action<long?> resultHandler);
        #endregion
        #region task version
        Task<long?> GetCourierDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, TerminalDeliveryDuration>> GetDeliveryTerminalsDurationInMinutes(ICollection<DeliveryTerminal> deliveryTerminals, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<long?> GetSelfServiceDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryTerminalWorkloadService
    {
        #region Synchronous versions
        IServiceMethodCall<DeliveryTerminalWorkload> GetDeliveryTerminalWorkload(DeliveryTerminal deliveryTerminal);
        IServiceMethodCall<Dictionary<Guid, DeliveryTerminalWorkload>> GetDeliveryTerminalsWorkload(ICollection<DeliveryTerminal> deliveryTerminals);
        #endregion

        #region asynchronous version
        void GetDeliveryTerminalWorkload(DeliveryTerminal deliveryTerminal, AsyncErrorHandler errorHandler, Action<DeliveryTerminalWorkload> resultHandler);
        void GetDeliveryTerminalsWorkload(ICollection<DeliveryTerminal> deliveryTerminals, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DeliveryTerminalWorkload>> resultHandler);
        #endregion
        #region task version
        Task<DeliveryTerminalWorkload> GetDeliveryTerminalWorkload(DeliveryTerminal deliveryTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, DeliveryTerminalWorkload>> GetDeliveryTerminalsWorkload(ICollection<DeliveryTerminal> deliveryTerminals, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryExternalAssignationService
    {
        #region Synchronous versions
        IServiceMethodCall<AssignationResponse> AssignDeliveryToTerminal(AssignationRequest request);
        IServiceMethodCall<bool> IsEnabled();
        #endregion

        #region asynchronous version
        void AssignDeliveryToTerminal(AssignationRequest request, AsyncErrorHandler errorHandler, Action<AssignationResponse> resultHandler);
        void IsEnabled(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        #endregion
        #region task version
        Task<AssignationResponse> AssignDeliveryToTerminal(AssignationRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsEnabled([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDeliveryLogisticsService
    {
        #region Synchronous versions
        IServiceMethodCall<AssignCouriersToOrdersResponseDto> AssignCouriersToOrders(AssignCouriersToOrdersRequestDto serviceRequestDto);
        IServiceMethodCall<CourierComeBackTimeResponseDto> CalculateCourierComeBackTime(CourierComeBackTimeRequestDto request);
        #endregion

        #region asynchronous version
        void AssignCouriersToOrders(AssignCouriersToOrdersRequestDto serviceRequestDto, AsyncErrorHandler errorHandler, Action<AssignCouriersToOrdersResponseDto> resultHandler);
        void CalculateCourierComeBackTime(CourierComeBackTimeRequestDto request, AsyncErrorHandler errorHandler, Action<CourierComeBackTimeResponseDto> resultHandler);
        #endregion
        #region task version
        Task<AssignCouriersToOrdersResponseDto> AssignCouriersToOrders(AssignCouriersToOrdersRequestDto serviceRequestDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CourierComeBackTimeResponseDto> CalculateCourierComeBackTime(CourierComeBackTimeRequestDto request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IMarketingSourceService
    {
        #region Synchronous versions
        IServiceMethodCall<object> SaveMarketingSource(ByValue<MarketingSource> marketingSource);
        IServiceMethodCall<object> SetMarketingSourceDeleted(Guid? marketingSourceId, bool deleted);
        #endregion

        #region asynchronous version
        void SaveMarketingSource(ByValue<MarketingSource> marketingSource, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetMarketingSourceDeleted(Guid? marketingSourceId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> SaveMarketingSource(ByValue<MarketingSource> marketingSource, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetMarketingSourceDeleted(Guid? marketingSourceId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDiscountService
    {
        #region Synchronous versions
        IServiceMethodCall<DiscountServiceResult> AddDiscountPeriod(ByValue<DiscountPeriod> discountPeriod);
        IServiceMethodCall<DiscountServiceResult> AddDiscountType(ByValue<DiscountType> discountType);
        IServiceMethodCall<DiscountCardType> CreateIikoCard5Discount(string name, string shortName, bool applyBeforeExcludedVat);
        IServiceMethodCall<DiscountServiceResult> CreateOrUpdateDiscountPeriod(ByValue<DiscountPeriod> discountPeriod);
        IServiceMethodCall<bool> RemoveDiscountPeriod(Guid? discountPeriodId);
        IServiceMethodCall<bool> RemoveDiscountType(Guid? discountTypeId);
        IServiceMethodCall<bool> RestoreDiscountPeriod(Guid? discountPeriodId);
        IServiceMethodCall<bool> RestoreDiscountType(Guid? discountTypeId);
        IServiceMethodCall<DiscountServiceResult> UpdateDiscountType(ByValue<DiscountType> discountType);
        #endregion

        #region asynchronous version
        void AddDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler);
        void AddDiscountType(ByValue<DiscountType> discountType, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler);
        void CreateIikoCard5Discount(string name, string shortName, bool applyBeforeExcludedVat, AsyncErrorHandler errorHandler, Action<DiscountCardType> resultHandler);
        void CreateOrUpdateDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler);
        void RemoveDiscountPeriod(Guid? discountPeriodId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RemoveDiscountType(Guid? discountTypeId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RestoreDiscountPeriod(Guid? discountPeriodId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RestoreDiscountType(Guid? discountTypeId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void UpdateDiscountType(ByValue<DiscountType> discountType, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler);
        #endregion
        #region task version
        Task<DiscountServiceResult> AddDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DiscountServiceResult> AddDiscountType(ByValue<DiscountType> discountType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DiscountCardType> CreateIikoCard5Discount(string name, string shortName, bool applyBeforeExcludedVat, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DiscountServiceResult> CreateOrUpdateDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RemoveDiscountPeriod(Guid? discountPeriodId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RemoveDiscountType(Guid? discountTypeId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RestoreDiscountPeriod(Guid? discountPeriodId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RestoreDiscountType(Guid? discountTypeId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<DiscountServiceResult> UpdateDiscountType(ByValue<DiscountType> discountType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ILuckyTicketService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CancelDicount(LuckyTicketDiscountInfo discountInfo);
        IServiceMethodCall<LuckyTickedBaseCardInfo> GetLuckyTicketCardInfo(MagnetTrackData trackData);
        IServiceMethodCall<LuckyTicketChequeInfo> ProcessCancelPayment(string transaction, LuckyTicketChequeInfo chequeInfo);
        IServiceMethodCall<string> ProcessDicount(OrderInfo orderInfo, LuckyTicketDiscountInfo discountInfo);
        IServiceMethodCall<LuckyTicketChequeInfo> ProcessPayment(OrderInfo orderInfo, LuckyTicketPaymentItemInfo paymentInfo, LuckyTicketChequeInfo chequeInfo);
        #endregion

        #region asynchronous version
        void CancelDicount(LuckyTicketDiscountInfo discountInfo, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetLuckyTicketCardInfo(MagnetTrackData trackData, AsyncErrorHandler errorHandler, Action<LuckyTickedBaseCardInfo> resultHandler);
        void ProcessCancelPayment(string transaction, LuckyTicketChequeInfo chequeInfo, AsyncErrorHandler errorHandler, Action<LuckyTicketChequeInfo> resultHandler);
        void ProcessDicount(OrderInfo orderInfo, LuckyTicketDiscountInfo discountInfo, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void ProcessPayment(OrderInfo orderInfo, LuckyTicketPaymentItemInfo paymentInfo, LuckyTicketChequeInfo chequeInfo, AsyncErrorHandler errorHandler, Action<LuckyTicketChequeInfo> resultHandler);
        #endregion
        #region task version
        Task<object> CancelDicount(LuckyTicketDiscountInfo discountInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LuckyTickedBaseCardInfo> GetLuckyTicketCardInfo(MagnetTrackData trackData, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LuckyTicketChequeInfo> ProcessCancelPayment(string transaction, LuckyTicketChequeInfo chequeInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> ProcessDicount(OrderInfo orderInfo, LuckyTicketDiscountInfo discountInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LuckyTicketChequeInfo> ProcessPayment(OrderInfo orderInfo, LuckyTicketPaymentItemInfo paymentInfo, LuckyTicketChequeInfo chequeInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPastOrdersService
    {
        #region Synchronous versions
        IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersByCloseTimeInterval(DateTime? minCloseTime, DateTime? maxCloseTime);
        IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersById(Guid? orderId);
        IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersByNumber(int searchNumber, DateTime? minCloseTime, DateTime? maxCloseTime, bool isNumberPartial);
        IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersByPaymentSum(decimal? minSum, decimal? maxSum, DateTime? minCloseTime, DateTime? maxCloseTime);
        #endregion

        #region asynchronous version
        void GetPastOrdersByCloseTimeInterval(DateTime? minCloseTime, DateTime? maxCloseTime, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler);
        void GetPastOrdersById(Guid? orderId, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler);
        void GetPastOrdersByNumber(int searchNumber, DateTime? minCloseTime, DateTime? maxCloseTime, bool isNumberPartial, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler);
        void GetPastOrdersByPaymentSum(decimal? minSum, decimal? maxSum, DateTime? minCloseTime, DateTime? maxCloseTime, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler);
        #endregion
        #region task version
        Task<ICollection<PastOrder>> GetPastOrdersByCloseTimeInterval(DateTime? minCloseTime, DateTime? maxCloseTime, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PastOrder>> GetPastOrdersById(Guid? orderId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PastOrder>> GetPastOrdersByNumber(int searchNumber, DateTime? minCloseTime, DateTime? maxCloseTime, bool isNumberPartial, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PastOrder>> GetPastOrdersByPaymentSum(decimal? minSum, decimal? maxSum, DateTime? minCloseTime, DateTime? maxCloseTime, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IChequeTemplateService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CreateOrUpdateTemplates(ICollection<ChequeTemplateUpdateDto> templates, string billFooter, string billHeader, string reportHeader);
        #endregion

        #region asynchronous version
        void CreateOrUpdateTemplates(ICollection<ChequeTemplateUpdateDto> templates, string billFooter, string billHeader, string reportHeader, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> CreateOrUpdateTemplates(ICollection<ChequeTemplateUpdateDto> templates, string billFooter, string billHeader, string reportHeader, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IStiReportService
    {
        #region Synchronous versions
        IServiceMethodCall<object> DeleteTemplate(StiReportTemplate template);
        IServiceMethodCall<object> SaveOrUpdateTemplate(ByValue<StiReportTemplate> template);
        IServiceMethodCall<StiReportTemplate> TryGetStiReportTemplate(StiReportType reportType);
        #endregion

        #region asynchronous version
        void DeleteTemplate(StiReportTemplate template, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveOrUpdateTemplate(ByValue<StiReportTemplate> template, AsyncErrorHandler errorHandler, Action resultHandler);
        void TryGetStiReportTemplate(StiReportType reportType, AsyncErrorHandler errorHandler, Action<StiReportTemplate> resultHandler);
        #endregion
        #region task version
        Task<object> DeleteTemplate(StiReportTemplate template, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdateTemplate(ByValue<StiReportTemplate> template, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<StiReportTemplate> TryGetStiReportTemplate(StiReportType reportType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IRegionsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> UpdateRegions(List<ByValue<Region>> regions);
        #endregion

        #region asynchronous version
        void UpdateRegions(List<ByValue<Region>> regions, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> UpdateRegions(List<ByValue<Region>> regions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IQuickLabelsHelper
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<DepartmentEntity, List<QuickLabels>>> GetAllNotDeletedQuickLabels(List<DepartmentEntity> departmentList);
        #endregion

        #region asynchronous version
        void GetAllNotDeletedQuickLabels(List<DepartmentEntity> departmentList, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, List<QuickLabels>>> resultHandler);
        #endregion
        #region task version
        Task<Dictionary<DepartmentEntity, List<QuickLabels>>> GetAllNotDeletedQuickLabels(List<DepartmentEntity> departmentList, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISurveyItemsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> SaveSurveyItem(ByValue<SurveyItem> city);
        IServiceMethodCall<object> SetSurveyItemDeleted(Guid? cityId, bool deleted);
        #endregion

        #region asynchronous version
        void SaveSurveyItem(ByValue<SurveyItem> city, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetSurveyItemDeleted(Guid? cityId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> SaveSurveyItem(ByValue<SurveyItem> city, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetSurveyItemDeleted(Guid? cityId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IServerUpgradeService
    {
        #region Synchronous versions
        IServiceMethodCall<ServerUpgradeReport> BuildUpgradeReport();
        IServiceMethodCall<object> UpdateTerminalUpgradeState(TerminalUpgradeState state);
        IServiceMethodCall<object> UpdateUpgradeSettings(ByValue<ServerUpgradeState> state, ByValue<ServerUpgradeSettings> settings);
        #endregion

        #region asynchronous version
        void BuildUpgradeReport(AsyncErrorHandler errorHandler, Action<ServerUpgradeReport> resultHandler);
        void UpdateTerminalUpgradeState(TerminalUpgradeState state, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateUpgradeSettings(ByValue<ServerUpgradeState> state, ByValue<ServerUpgradeSettings> settings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<ServerUpgradeReport> BuildUpgradeReport([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateTerminalUpgradeState(TerminalUpgradeState state, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateUpgradeSettings(ByValue<ServerUpgradeState> state, ByValue<ServerUpgradeSettings> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IFrontBalancesService
    {
        #region Synchronous versions
        IServiceMethodCall<object> SetStopListMode(bool useStopListForGroup);
        #endregion

        #region asynchronous version
        void SetStopListMode(bool useStopListForGroup, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> SetStopListMode(bool useStopListForGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IFrontUpdateService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CancelDeliveriesOnESClear(ICollection<Guid> deliveries);
        IServiceMethodCall<FrontEntitiesBackup> GetBackup(FrontEntitiesBackupRequest backupRequest);
        IServiceMethodCall<ICollection<PlastekCardTransaction>> GetPlastekTransactionsForVerify(string terminalId);
        IServiceMethodCall<object> ImportFrontData(EntitiesUpdate update, int pendingItemsCount);
        IServiceMethodCall<object> ImportFrontDataV3(IsolatedEntitiesContext update);
        IServiceMethodCall<object> MarkCardTransactionsVerified(ICollection<Guid> transactionIds);
        IServiceMethodCall<bool> PerformBatchUpdate(List<CachedEntity> update);
        IServiceMethodCall<bool> RegisterPaymentSystem(string name, string friendlyName);
        IServiceMethodCall<object> UpdatePluginSettings(ICollection<ByValue<PluginSettings>> settings);
        #endregion

        #region asynchronous version
        void CancelDeliveriesOnESClear(ICollection<Guid> deliveries, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetBackup(FrontEntitiesBackupRequest backupRequest, AsyncErrorHandler errorHandler, Action<FrontEntitiesBackup> resultHandler);
        void GetPlastekTransactionsForVerify(string terminalId, AsyncErrorHandler errorHandler, Action<ICollection<PlastekCardTransaction>> resultHandler);
        void ImportFrontData(EntitiesUpdate update, int pendingItemsCount, AsyncErrorHandler errorHandler, Action resultHandler);
        void ImportFrontDataV3(IsolatedEntitiesContext update, AsyncErrorHandler errorHandler, Action resultHandler);
        void MarkCardTransactionsVerified(ICollection<Guid> transactionIds, AsyncErrorHandler errorHandler, Action resultHandler);
        void PerformBatchUpdate(List<CachedEntity> update, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RegisterPaymentSystem(string name, string friendlyName, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void UpdatePluginSettings(ICollection<ByValue<PluginSettings>> settings, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> CancelDeliveriesOnESClear(ICollection<Guid> deliveries, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<FrontEntitiesBackup> GetBackup(FrontEntitiesBackupRequest backupRequest, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<PlastekCardTransaction>> GetPlastekTransactionsForVerify(string terminalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ImportFrontData(EntitiesUpdate update, int pendingItemsCount, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ImportFrontDataV3(IsolatedEntitiesContext update, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> MarkCardTransactionsVerified(ICollection<Guid> transactionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> PerformBatchUpdate(List<CachedEntity> update, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RegisterPaymentSystem(string name, string friendlyName, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdatePluginSettings(ICollection<ByValue<PluginSettings>> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEmailSendingService
    {
        #region Synchronous versions
        IServiceMethodCall<EmailSendingResultDto> SendEmail(EmailSendingRequest request);
        #endregion

        #region asynchronous version
        void SendEmail(EmailSendingRequest request, AsyncErrorHandler errorHandler, Action<EmailSendingResultDto> resultHandler);
        #endregion
        #region task version
        Task<EmailSendingResultDto> SendEmail(EmailSendingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IFindFaceService
    {
        #region Synchronous versions
        IServiceMethodCall<string> IdentifyPhoto(string imageData);
        IServiceMethodCall<string> RegisterGuestPhoto(string imageData);
        #endregion

        #region asynchronous version
        void IdentifyPhoto(string imageData, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void RegisterGuestPhoto(string imageData, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        #endregion
        #region task version
        Task<string> IdentifyPhoto(string imageData, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> RegisterGuestPhoto(string imageData, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ISmsSendingService
    {
        #region Synchronous versions
        IServiceMethodCall<SmsSendingResultDto> SendSms(SmsSendingRequest request);
        #endregion

        #region asynchronous version
        void SendSms(SmsSendingRequest request, AsyncErrorHandler errorHandler, Action<SmsSendingResultDto> resultHandler);
        #endregion
        #region task version
        Task<SmsSendingResultDto> SendSms(SmsSendingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoBizService
    {
        #region Synchronous versions
        IServiceMethodCall<CheckExchange> GetCheckExchange();
        #endregion

        #region asynchronous version
        void GetCheckExchange(AsyncErrorHandler errorHandler, Action<CheckExchange> resultHandler);
        #endregion
        #region task version
        Task<CheckExchange> GetCheckExchange([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoBizRegistrationService
    {
        #region Synchronous versions
        IServiceMethodCall<IikoBizRegistrationStatus> SendRegistrationRequest(IikoBizRegistrationDto iikoBizRegistrationDto);
        #endregion

        #region asynchronous version
        void SendRegistrationRequest(IikoBizRegistrationDto iikoBizRegistrationDto, AsyncErrorHandler errorHandler, Action<IikoBizRegistrationStatus> resultHandler);
        #endregion
        #region task version
        Task<IikoBizRegistrationStatus> SendRegistrationRequest(IikoBizRegistrationDto iikoBizRegistrationDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIikoBizConnectionService
    {
        #region Synchronous versions
        IServiceMethodCall<ConnectionTestDto> IsIikoBizConnectionEstablished();
        IServiceMethodCall<object> ResetConsumers();
        IServiceMethodCall<ConnectionTestDto> RunAllTests();
        #endregion

        #region asynchronous version
        void IsIikoBizConnectionEstablished(AsyncErrorHandler errorHandler, Action<ConnectionTestDto> resultHandler);
        void ResetConsumers(AsyncErrorHandler errorHandler, Action resultHandler);
        void RunAllTests(AsyncErrorHandler errorHandler, Action<ConnectionTestDto> resultHandler);
        #endregion
        #region task version
        Task<ConnectionTestDto> IsIikoBizConnectionEstablished([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ResetConsumers([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ConnectionTestDto> RunAllTests([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IIncentiveService
    {
        #region Synchronous versions
        IServiceMethodCall<Dictionary<DateInterval, ICollection<ProgramDescription>>> GetProgramDescriptions(User employee, List<DateInterval> intervals);
        IServiceMethodCall<ICollection<IncentiveProgram>> GetPrograms();
        IServiceMethodCall<object> RecalculateIncentivePrograms(ICollection<Guid> sessionIds, ICollection<User> employees);
        IServiceMethodCall<object> SaveOrUpdate(ByValue<IncentiveProgram> program);
        IServiceMethodCall<object> SetDeleted(Guid? program, bool deleted);
        #endregion

        #region asynchronous version
        void GetProgramDescriptions(User employee, List<DateInterval> intervals, AsyncErrorHandler errorHandler, Action<Dictionary<DateInterval, ICollection<ProgramDescription>>> resultHandler);
        void GetPrograms(AsyncErrorHandler errorHandler, Action<ICollection<IncentiveProgram>> resultHandler);
        void RecalculateIncentivePrograms(ICollection<Guid> sessionIds, ICollection<User> employees, AsyncErrorHandler errorHandler, Action resultHandler);
        void SaveOrUpdate(ByValue<IncentiveProgram> program, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetDeleted(Guid? program, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<Dictionary<DateInterval, ICollection<ProgramDescription>>> GetProgramDescriptions(User employee, List<DateInterval> intervals, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<IncentiveProgram>> GetPrograms([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RecalculateIncentivePrograms(ICollection<Guid> sessionIds, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SaveOrUpdate(ByValue<IncentiveProgram> program, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetDeleted(Guid? program, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ILicenseService
    {
        #region Synchronous versions
        IServiceMethodCall<LicensingState> FetchAndInstallLicense(string serialNumber);
        IServiceMethodCall<GetConnectionResult> GetConnection(Guid? connectionId, int? moduleId);
        IServiceMethodCall<LicenseConnectionResponse> GetConnections(List<LicenseConnectionRequest> connections);
        IServiceMethodCall<Guid?> GetCurrentLicenseId();
        IServiceMethodCall<bool> GetForceDeveloperSandboxModeInfo();
        IServiceMethodCall<string> GetIikoBizServicesUrl();
        IServiceMethodCall<string> GetIikoBizWebUrl();
        IServiceMethodCall<LicensingState> GetLicensingState();
        IServiceMethodCall<string> GetProductId();
        IServiceMethodCall<LicenseStatus> InstallOrUpdateLicense(string licenseDataBase64, IikoBizRegistrationInfo info);
        IServiceMethodCall<bool> IsValidConnectionIdForModule(Guid? connectionId, int? moduleId);
        IServiceMethodCall<object> ReleaseConnection(Guid? connectionId);
        IServiceMethodCall<object> ReleaseConnections(ICollection<Guid> connectionIds);
        #endregion

        #region asynchronous version
        void FetchAndInstallLicense(string serialNumber, AsyncErrorHandler errorHandler, Action<LicensingState> resultHandler);
        void GetConnection(Guid? connectionId, int? moduleId, AsyncErrorHandler errorHandler, Action<GetConnectionResult> resultHandler);
        void GetConnections(List<LicenseConnectionRequest> connections, AsyncErrorHandler errorHandler, Action<LicenseConnectionResponse> resultHandler);
        void GetCurrentLicenseId(AsyncErrorHandler errorHandler, Action<Guid?> resultHandler);
        void GetForceDeveloperSandboxModeInfo(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void GetIikoBizServicesUrl(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetIikoBizWebUrl(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GetLicensingState(AsyncErrorHandler errorHandler, Action<LicensingState> resultHandler);
        void GetProductId(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void InstallOrUpdateLicense(string licenseDataBase64, IikoBizRegistrationInfo info, AsyncErrorHandler errorHandler, Action<LicenseStatus> resultHandler);
        void IsValidConnectionIdForModule(Guid? connectionId, int? moduleId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void ReleaseConnection(Guid? connectionId, AsyncErrorHandler errorHandler, Action resultHandler);
        void ReleaseConnections(ICollection<Guid> connectionIds, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<LicensingState> FetchAndInstallLicense(string serialNumber, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<GetConnectionResult> GetConnection(Guid? connectionId, int? moduleId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LicenseConnectionResponse> GetConnections(List<LicenseConnectionRequest> connections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Guid?> GetCurrentLicenseId([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> GetForceDeveloperSandboxModeInfo([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetIikoBizServicesUrl([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetIikoBizWebUrl([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LicensingState> GetLicensingState([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GetProductId([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<LicenseStatus> InstallOrUpdateLicense(string licenseDataBase64, IikoBizRegistrationInfo info, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsValidConnectionIdForModule(Guid? connectionId, int? moduleId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ReleaseConnection(Guid? connectionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ReleaseConnections(ICollection<Guid> connectionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IHttpReverseTunnelProxyService
    {
        #region Synchronous versions
        IServiceMethodCall<object> ReportHttpResponse(ProxiedResponseDto httpResponse);
        IServiceMethodCall<ProxiedRequestDto> WaitHttpRequest(int timeoutMillis);
        #endregion

        #region asynchronous version
        void ReportHttpResponse(ProxiedResponseDto httpResponse, AsyncErrorHandler errorHandler, Action resultHandler);
        void WaitHttpRequest(int timeoutMillis, AsyncErrorHandler errorHandler, Action<ProxiedRequestDto> resultHandler);
        #endregion
        #region task version
        Task<object> ReportHttpResponse(ProxiedResponseDto httpResponse, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ProxiedRequestDto> WaitHttpRequest(int timeoutMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPbxService
    {
        #region Synchronous versions
        IServiceMethodCall<object> FirePbxCallAccepted(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware);
        IServiceMethodCall<object> FirePbxCallHungUp(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware);
        IServiceMethodCall<object> FirePbxCallIncoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware);
        IServiceMethodCall<object> FirePbxCallOutcoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware);
        IServiceMethodCall<object> FirePbxCallRejected(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware);
        #endregion

        #region asynchronous version
        void FirePbxCallAccepted(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler);
        void FirePbxCallHungUp(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler);
        void FirePbxCallIncoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler);
        void FirePbxCallOutcoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler);
        void FirePbxCallRejected(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> FirePbxCallAccepted(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FirePbxCallHungUp(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FirePbxCallIncoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FirePbxCallOutcoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FirePbxCallRejected(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IPermissionService
    {
        #region Synchronous versions
        IServiceMethodCall<object> AddRole(User user, Role role);
        IServiceMethodCall<object> RemoveRole(User user, Role role);
        IServiceMethodCall<object> SetMainRole(User user, Role role);
        IServiceMethodCall<object> SetPasswordForUser(User user, string passwordHash);
        IServiceMethodCall<object> SetPermissionForRole(Role role, Permission permission, PermissionState state);
        IServiceMethodCall<object> SetPermissionForUser(User user, Permission permission, PermissionState state);
        IServiceMethodCall<object> SetPermissionsForRole(Role role, Dictionary<Permission, PermissionState> permissionsMap);
        IServiceMethodCall<object> SetPermissionsForUser(User user, Dictionary<Permission, PermissionState> permissionsMap);
        #endregion

        #region asynchronous version
        void AddRole(User user, Role role, AsyncErrorHandler errorHandler, Action resultHandler);
        void RemoveRole(User user, Role role, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetMainRole(User user, Role role, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPasswordForUser(User user, string passwordHash, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPermissionForRole(Role role, Permission permission, PermissionState state, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPermissionForUser(User user, Permission permission, PermissionState state, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPermissionsForRole(Role role, Dictionary<Permission, PermissionState> permissionsMap, AsyncErrorHandler errorHandler, Action resultHandler);
        void SetPermissionsForUser(User user, Dictionary<Permission, PermissionState> permissionsMap, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> AddRole(User user, Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> RemoveRole(User user, Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetMainRole(User user, Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPasswordForUser(User user, string passwordHash, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPermissionForRole(Role role, Permission permission, PermissionState state, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPermissionForUser(User user, Permission permission, PermissionState state, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPermissionsForRole(Role role, Dictionary<Permission, PermissionState> permissionsMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> SetPermissionsForUser(User user, Dictionary<Permission, PermissionState> permissionsMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IReplicationService
    {
        #region Synchronous versions
        IServiceMethodCall<CheckReplicationResponse> CheckReplicationPull(Guid? remoteRMS);
        IServiceMethodCall<BackRegistrationResult> CheckReplicationPush(CheckReplicationResponse check);
        IServiceMethodCall<string> CheckReplicationRequiredPossible(Guid? remoteRMS);
        IServiceMethodCall<ReplicationResult> ExportEntitiesUpdate(ReplicationRequest exportRequest);
        IServiceMethodCall<ReplicationResult> GetEntitiesCustomUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, ByValue<ReplicationConfig> config, string installationId);
        IServiceMethodCall<ReplicationResult> GetEntitiesUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, string installationId);
        IServiceMethodCall<XmlAsValue> GetExportConfigForNode(ServerNode node);
        IServiceMethodCall<ByValue<ReplicationConfig>> GetExportConfigForServerNode(ServerNode node);
        IServiceMethodCall<int> GetLastRevision(ServerNode sourceNode, ServerNode targetNode);
        IServiceMethodCall<RevisionConfig> GetLastRevisions(ServerNode sourceNode, ServerNode targetNode);
        IServiceMethodCall<object> ImportEntitiesUpdate(ReplicationResult update, string installationId);
        IServiceMethodCall<object> ReportRmsImportError(DepartmentEntity department, int? importDurationMillis, string error);
        IServiceMethodCall<object> ReportRmsImportSuccess(DepartmentEntity department, int? importDurationMillis);
        #endregion

        #region asynchronous version
        void CheckReplicationPull(Guid? remoteRMS, AsyncErrorHandler errorHandler, Action<CheckReplicationResponse> resultHandler);
        void CheckReplicationPush(CheckReplicationResponse check, AsyncErrorHandler errorHandler, Action<BackRegistrationResult> resultHandler);
        void CheckReplicationRequiredPossible(Guid? remoteRMS, AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void ExportEntitiesUpdate(ReplicationRequest exportRequest, AsyncErrorHandler errorHandler, Action<ReplicationResult> resultHandler);
        void GetEntitiesCustomUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, ByValue<ReplicationConfig> config, string installationId, AsyncErrorHandler errorHandler, Action<ReplicationResult> resultHandler);
        void GetEntitiesUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, string installationId, AsyncErrorHandler errorHandler, Action<ReplicationResult> resultHandler);
        void GetExportConfigForNode(ServerNode node, AsyncErrorHandler errorHandler, Action<XmlAsValue> resultHandler);
        void GetExportConfigForServerNode(ServerNode node, AsyncErrorHandler errorHandler, Action<ByValue<ReplicationConfig>> resultHandler);
        void GetLastRevision(ServerNode sourceNode, ServerNode targetNode, AsyncErrorHandler errorHandler, Action<int> resultHandler);
        void GetLastRevisions(ServerNode sourceNode, ServerNode targetNode, AsyncErrorHandler errorHandler, Action<RevisionConfig> resultHandler);
        void ImportEntitiesUpdate(ReplicationResult update, string installationId, AsyncErrorHandler errorHandler, Action resultHandler);
        void ReportRmsImportError(DepartmentEntity department, int? importDurationMillis, string error, AsyncErrorHandler errorHandler, Action resultHandler);
        void ReportRmsImportSuccess(DepartmentEntity department, int? importDurationMillis, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<CheckReplicationResponse> CheckReplicationPull(Guid? remoteRMS, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BackRegistrationResult> CheckReplicationPush(CheckReplicationResponse check, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> CheckReplicationRequiredPossible(Guid? remoteRMS, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ReplicationResult> ExportEntitiesUpdate(ReplicationRequest exportRequest, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ReplicationResult> GetEntitiesCustomUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, ByValue<ReplicationConfig> config, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ReplicationResult> GetEntitiesUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<XmlAsValue> GetExportConfigForNode(ServerNode node, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ByValue<ReplicationConfig>> GetExportConfigForServerNode(ServerNode node, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<int> GetLastRevision(ServerNode sourceNode, ServerNode targetNode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<RevisionConfig> GetLastRevisions(ServerNode sourceNode, ServerNode targetNode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ImportEntitiesUpdate(ReplicationResult update, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ReportRmsImportError(DepartmentEntity department, int? importDurationMillis, string error, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> ReportRmsImportSuccess(DepartmentEntity department, int? importDurationMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IReplicationMasterServerService
    {
        #region Synchronous versions
        IServiceMethodCall<ReplicationMasterServerResult> AddReplicationConfig(ByValue<ReplicationConfig> replicationConfig);
        IServiceMethodCall<SlaveRegistrationStatus> ForcedUnregistedDepartment(DepartmentEntity departments);
        IServiceMethodCall<List<ReplicationEvent>> GetReplicationLog(DepartmentEntity departmentNode);
        IServiceMethodCall<XmlAsValue> RegisterSlaveServer(ByValue<ServerNodeInfo> serverNode, string departmentCode);
        IServiceMethodCall<SlaveServerRegistrationResult> RegisterSlaveServerNode(ByValue<ServerNodeInfo> serverNode, string departmentCode);
        IServiceMethodCall<bool> RemoveReplicationConfig(Guid? replicationConfigId);
        IServiceMethodCall<bool> RestoreReplicationConfig(Guid? replicationConfigId);
        IServiceMethodCall<SlaveRegistrationStatus> UnregistedServerNode(Guid? serverNodeId, string installationId);
        IServiceMethodCall<object> UpdateAllowReplicationSchedules(bool allowReplicationSchedules);
        IServiceMethodCall<object> UpdateRMSInstanceToForceReplication(ICollection<DepartmentEntity> departmentId, bool isForcedReplication);
        IServiceMethodCall<ReplicationMasterServerResult> UpdateReplicationConfig(ByValue<ReplicationConfig> replicationConfig);
        #endregion

        #region asynchronous version
        void AddReplicationConfig(ByValue<ReplicationConfig> replicationConfig, AsyncErrorHandler errorHandler, Action<ReplicationMasterServerResult> resultHandler);
        void ForcedUnregistedDepartment(DepartmentEntity departments, AsyncErrorHandler errorHandler, Action<SlaveRegistrationStatus> resultHandler);
        void GetReplicationLog(DepartmentEntity departmentNode, AsyncErrorHandler errorHandler, Action<List<ReplicationEvent>> resultHandler);
        void RegisterSlaveServer(ByValue<ServerNodeInfo> serverNode, string departmentCode, AsyncErrorHandler errorHandler, Action<XmlAsValue> resultHandler);
        void RegisterSlaveServerNode(ByValue<ServerNodeInfo> serverNode, string departmentCode, AsyncErrorHandler errorHandler, Action<SlaveServerRegistrationResult> resultHandler);
        void RemoveReplicationConfig(Guid? replicationConfigId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RestoreReplicationConfig(Guid? replicationConfigId, AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void UnregistedServerNode(Guid? serverNodeId, string installationId, AsyncErrorHandler errorHandler, Action<SlaveRegistrationStatus> resultHandler);
        void UpdateAllowReplicationSchedules(bool allowReplicationSchedules, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateRMSInstanceToForceReplication(ICollection<DepartmentEntity> departmentId, bool isForcedReplication, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateReplicationConfig(ByValue<ReplicationConfig> replicationConfig, AsyncErrorHandler errorHandler, Action<ReplicationMasterServerResult> resultHandler);
        #endregion
        #region task version
        Task<ReplicationMasterServerResult> AddReplicationConfig(ByValue<ReplicationConfig> replicationConfig, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<SlaveRegistrationStatus> ForcedUnregistedDepartment(DepartmentEntity departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<ReplicationEvent>> GetReplicationLog(DepartmentEntity departmentNode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<XmlAsValue> RegisterSlaveServer(ByValue<ServerNodeInfo> serverNode, string departmentCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<SlaveServerRegistrationResult> RegisterSlaveServerNode(ByValue<ServerNodeInfo> serverNode, string departmentCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RemoveReplicationConfig(Guid? replicationConfigId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> RestoreReplicationConfig(Guid? replicationConfigId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<SlaveRegistrationStatus> UnregistedServerNode(Guid? serverNodeId, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateAllowReplicationSchedules(bool allowReplicationSchedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateRMSInstanceToForceReplication(ICollection<DepartmentEntity> departmentId, bool isForcedReplication, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ReplicationMasterServerResult> UpdateReplicationConfig(ByValue<ReplicationConfig> replicationConfig, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IReplicationSlaveServerService
    {
        #region Synchronous versions
        IServiceMethodCall<SlaveServerRegistrationResult> ConnectToMasterServer(RemoteServerSettings settings, string departmentId);
        IServiceMethodCall<SlaveServerRegistrationResult> DisconnectFromMasterServer();
        IServiceMethodCall<RemoteServerStatus> GetRemoteServerSettings();
        IServiceMethodCall<bool> IsReplicatingRMS();
        IServiceMethodCall<bool> IsReplicationEnabled();
        IServiceMethodCall<BackRegistrationResult> RunForcedReplication();
        #endregion

        #region asynchronous version
        void ConnectToMasterServer(RemoteServerSettings settings, string departmentId, AsyncErrorHandler errorHandler, Action<SlaveServerRegistrationResult> resultHandler);
        void DisconnectFromMasterServer(AsyncErrorHandler errorHandler, Action<SlaveServerRegistrationResult> resultHandler);
        void GetRemoteServerSettings(AsyncErrorHandler errorHandler, Action<RemoteServerStatus> resultHandler);
        void IsReplicatingRMS(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void IsReplicationEnabled(AsyncErrorHandler errorHandler, Action<bool> resultHandler);
        void RunForcedReplication(AsyncErrorHandler errorHandler, Action<BackRegistrationResult> resultHandler);
        #endregion
        #region task version
        Task<SlaveServerRegistrationResult> ConnectToMasterServer(RemoteServerSettings settings, string departmentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<SlaveServerRegistrationResult> DisconnectFromMasterServer([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<RemoteServerStatus> GetRemoteServerSettings([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsReplicatingRMS([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<bool> IsReplicationEnabled([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BackRegistrationResult> RunForcedReplication([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ITestSalesGeneratorService
    {
        #region Synchronous versions
        #endregion

        #region asynchronous version
        #endregion
        #region task version
        #endregion
    }
    public interface ISystemService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CancelRequestById(Guid? id);
        IServiceMethodCall<ICollection<SystemEvent>> GetSystemEvents(DateTime? dateFrom, DateTime? dateTo);
        IServiceMethodCall<ICollection<CheckResult>> GetWatchdogCheckResults();
        #endregion

        #region asynchronous version
        void CancelRequestById(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetSystemEvents(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<SystemEvent>> resultHandler);
        void GetWatchdogCheckResults(AsyncErrorHandler errorHandler, Action<ICollection<CheckResult>> resultHandler);
        #endregion
        #region task version
        Task<object> CancelRequestById(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<SystemEvent>> GetSystemEvents(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<CheckResult>> GetWatchdogCheckResults([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface ILockTestService
    {
        #region Synchronous versions
        IServiceMethodCall<object> LockRestoExecutor(int lockTimeMillis);
        #endregion

        #region asynchronous version
        void LockRestoExecutor(int lockTimeMillis, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> LockRestoExecutor(int lockTimeMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IHandshakeSettingsService
    {
        #region Synchronous versions
        IServiceMethodCall<HandshakeSettings> GetHandshakeSettings();
        #endregion

        #region asynchronous version
        void GetHandshakeSettings(AsyncErrorHandler errorHandler, Action<HandshakeSettings> resultHandler);
        #endregion
        #region task version
        Task<HandshakeSettings> GetHandshakeSettings([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IDiagnosticsService
    {
        #region Synchronous versions
        IServiceMethodCall<SystemDiagnosticsResult> GetSystemDiagnostics(bool checkSoldModifiers, DateTime? attendanceDateFrom, ICollection<Store> stores);
        #endregion

        #region asynchronous version
        void GetSystemDiagnostics(bool checkSoldModifiers, DateTime? attendanceDateFrom, ICollection<Store> stores, AsyncErrorHandler errorHandler, Action<SystemDiagnosticsResult> resultHandler);
        #endregion
        #region task version
        Task<SystemDiagnosticsResult> GetSystemDiagnostics(bool checkSoldModifiers, DateTime? attendanceDateFrom, ICollection<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IWatchDogService
    {
        #region Synchronous versions
        IServiceMethodCall<object> Notify(CheckResult checkResult);
        #endregion

        #region asynchronous version
        void Notify(CheckResult checkResult, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> Notify(CheckResult checkResult, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IEventsService
    {
        #region Synchronous versions
        IServiceMethodCall<object> CreateExportedTo1CEvent(string path);
        IServiceMethodCall<object> CreateExportedToKUTZUPEvent(bool? success, string comment);
        IServiceMethodCall<object> CreateExportedToStoreHouseEvent(string exportPath);
        IServiceMethodCall<object> FireGetConnectionCode(AgentDevice device);
        IServiceMethodCall<BanquetDeliveryDishesReportInfo> GetBanquetDeliveryDishesReportInfo(List<Guid> orderIds);
        IServiceMethodCall<CloseSessionEvent> GetCloseEventBySessionId(Guid? session);
        IServiceMethodCall<List<CloseSessionEvent>> GetCloseSessionEvents(DateTime? fromDate, DateTime? toDate, ICollection<Group> groups, ICollection<DepartmentEntity> departments);
        IServiceMethodCall<List<UserEvent>> GetEventsByRevision(int fromRevision);
        IServiceMethodCall<List<ItemSaleEvent>> GetItemSaleEvents(List<Guid> orderIds);
        IServiceMethodCall<List<ItemSaleEvent>> GetItemSaleEventsBySessions(List<Guid> sessionIds, bool planned);
        IServiceMethodCall<OrderAndSessionDto> GetOrderEvents(List<Guid> orderIds);
        IServiceMethodCall<OrderAndSessionDto> GetOrderPaymentAndTransactionsAndPayInOutEvents(List<Guid> sessionIds, bool planned);
        IServiceMethodCall<List<OrderPaymentEvent>> GetOrderPaymentEvents(List<Guid> sessionIds, bool planned);
        IServiceMethodCall<Dictionary<Guid, ICollection<OrderPaymentTransaction>>> GetOrderPaymentTransactions(ICollection<Guid> sessionIds, bool planned);
        IServiceMethodCall<SessionFullReport> GetSessionFullReport(Guid? sessionId);
        IServiceMethodCall<ICollection<EventAttributeMetadata>> GetUserEventAttributes();
        IServiceMethodCall<ICollection<EventGroupMetadata>> GetUserEventGroups();
        IServiceMethodCall<ICollection<EventTypeMetadata>> GetUserEventTypes();
        IServiceMethodCall<List<UserEvent>> GetUserEventsList(DateTime? fromTime, DateTime? toTime, HashSet<DepartmentEntity> departments, HashSet<string> eventTypes, UserEventSeverity eventSeverity, Dictionary<string, Object> fieldValues);
        IServiceMethodCall<object> UpdateEventsJournalPresets(List<ByValue<EventsJournalPreset>> presetsList);
        IServiceMethodCall<object> UpdateOrderPaymentTransactions(ICollection<OrderPaymentTransaction> paymentTransactions);
        #endregion

        #region asynchronous version
        void CreateExportedTo1CEvent(string path, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateExportedToKUTZUPEvent(bool? success, string comment, AsyncErrorHandler errorHandler, Action resultHandler);
        void CreateExportedToStoreHouseEvent(string exportPath, AsyncErrorHandler errorHandler, Action resultHandler);
        void FireGetConnectionCode(AgentDevice device, AsyncErrorHandler errorHandler, Action resultHandler);
        void GetBanquetDeliveryDishesReportInfo(List<Guid> orderIds, AsyncErrorHandler errorHandler, Action<BanquetDeliveryDishesReportInfo> resultHandler);
        void GetCloseEventBySessionId(Guid? session, AsyncErrorHandler errorHandler, Action<CloseSessionEvent> resultHandler);
        void GetCloseSessionEvents(DateTime? fromDate, DateTime? toDate, ICollection<Group> groups, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<CloseSessionEvent>> resultHandler);
        void GetEventsByRevision(int fromRevision, AsyncErrorHandler errorHandler, Action<List<UserEvent>> resultHandler);
        void GetItemSaleEvents(List<Guid> orderIds, AsyncErrorHandler errorHandler, Action<List<ItemSaleEvent>> resultHandler);
        void GetItemSaleEventsBySessions(List<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<List<ItemSaleEvent>> resultHandler);
        void GetOrderEvents(List<Guid> orderIds, AsyncErrorHandler errorHandler, Action<OrderAndSessionDto> resultHandler);
        void GetOrderPaymentAndTransactionsAndPayInOutEvents(List<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<OrderAndSessionDto> resultHandler);
        void GetOrderPaymentEvents(List<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<List<OrderPaymentEvent>> resultHandler);
        void GetOrderPaymentTransactions(ICollection<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, ICollection<OrderPaymentTransaction>>> resultHandler);
        void GetSessionFullReport(Guid? sessionId, AsyncErrorHandler errorHandler, Action<SessionFullReport> resultHandler);
        void GetUserEventAttributes(AsyncErrorHandler errorHandler, Action<ICollection<EventAttributeMetadata>> resultHandler);
        void GetUserEventGroups(AsyncErrorHandler errorHandler, Action<ICollection<EventGroupMetadata>> resultHandler);
        void GetUserEventTypes(AsyncErrorHandler errorHandler, Action<ICollection<EventTypeMetadata>> resultHandler);
        void GetUserEventsList(DateTime? fromTime, DateTime? toTime, HashSet<DepartmentEntity> departments, HashSet<string> eventTypes, UserEventSeverity eventSeverity, Dictionary<string, Object> fieldValues, AsyncErrorHandler errorHandler, Action<List<UserEvent>> resultHandler);
        void UpdateEventsJournalPresets(List<ByValue<EventsJournalPreset>> presetsList, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateOrderPaymentTransactions(ICollection<OrderPaymentTransaction> paymentTransactions, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<object> CreateExportedTo1CEvent(string path, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateExportedToKUTZUPEvent(bool? success, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> CreateExportedToStoreHouseEvent(string exportPath, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> FireGetConnectionCode(AgentDevice device, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<BanquetDeliveryDishesReportInfo> GetBanquetDeliveryDishesReportInfo(List<Guid> orderIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<CloseSessionEvent> GetCloseEventBySessionId(Guid? session, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<CloseSessionEvent>> GetCloseSessionEvents(DateTime? fromDate, DateTime? toDate, ICollection<Group> groups, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<UserEvent>> GetEventsByRevision(int fromRevision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<ItemSaleEvent>> GetItemSaleEvents(List<Guid> orderIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<ItemSaleEvent>> GetItemSaleEventsBySessions(List<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<OrderAndSessionDto> GetOrderEvents(List<Guid> orderIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<OrderAndSessionDto> GetOrderPaymentAndTransactionsAndPayInOutEvents(List<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<OrderPaymentEvent>> GetOrderPaymentEvents(List<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<Dictionary<Guid, ICollection<OrderPaymentTransaction>>> GetOrderPaymentTransactions(ICollection<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<SessionFullReport> GetSessionFullReport(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EventAttributeMetadata>> GetUserEventAttributes([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EventGroupMetadata>> GetUserEventGroups([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<ICollection<EventTypeMetadata>> GetUserEventTypes([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<List<UserEvent>> GetUserEventsList(DateTime? fromTime, DateTime? toTime, HashSet<DepartmentEntity> departments, HashSet<string> eventTypes, UserEventSeverity eventSeverity, Dictionary<string, Object> fieldValues, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateEventsJournalPresets(List<ByValue<EventsJournalPreset>> presetsList, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateOrderPaymentTransactions(ICollection<OrderPaymentTransaction> paymentTransactions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IInformationService
    {
        #region Synchronous versions
        IServiceMethodCall<long> GetAgentDelta(Guid? agentId);
        IServiceMethodCall<long> GetServerUnixTimeInMillis();
        IServiceMethodCall<object> WriteTimeDiagnosticsToServerLog(long delta, long responseDuration);
        #endregion

        #region asynchronous version
        void GetAgentDelta(Guid? agentId, AsyncErrorHandler errorHandler, Action<long> resultHandler);
        void GetServerUnixTimeInMillis(AsyncErrorHandler errorHandler, Action<long> resultHandler);
        void WriteTimeDiagnosticsToServerLog(long delta, long responseDuration, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<long> GetAgentDelta(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<long> GetServerUnixTimeInMillis([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> WriteTimeDiagnosticsToServerLog(long delta, long responseDuration, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    public interface IUsersService
    {
        #region Synchronous versions
        IServiceMethodCall<DiscountCard> CreateDiscountCard(ByValue<DiscountCard> card);
        IServiceMethodCall<UserWithValidationInfo> CreateUser(ByValue<User> user);
        IServiceMethodCall<object> DeleteDiscountCard(DiscountCard card);
        IServiceMethodCall<object> DeleteDiscountCards(List<DiscountCard> cards);
        IServiceMethodCall<string> GenerateExternalPin();
        IServiceMethodCall<string> GeneratePinCode();
        IServiceMethodCall<UserValidationInfo> SetUserDeleted(User user, bool deleted);
        IServiceMethodCall<object> UndeleteDiscountCard(DiscountCard card);
        IServiceMethodCall<object> UpdateDiscountCard(ByValue<DiscountCard> card);
        IServiceMethodCall<UserWithValidationInfo> UpdateUser(ByValue<User> user);
        IServiceMethodCall<object> UpdateUsers(List<ByValue<User>> users);
        #endregion

        #region asynchronous version
        void CreateDiscountCard(ByValue<DiscountCard> card, AsyncErrorHandler errorHandler, Action<DiscountCard> resultHandler);
        void CreateUser(ByValue<User> user, AsyncErrorHandler errorHandler, Action<UserWithValidationInfo> resultHandler);
        void DeleteDiscountCard(DiscountCard card, AsyncErrorHandler errorHandler, Action resultHandler);
        void DeleteDiscountCards(List<DiscountCard> cards, AsyncErrorHandler errorHandler, Action resultHandler);
        void GenerateExternalPin(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void GeneratePinCode(AsyncErrorHandler errorHandler, Action<string> resultHandler);
        void SetUserDeleted(User user, bool deleted, AsyncErrorHandler errorHandler, Action<UserValidationInfo> resultHandler);
        void UndeleteDiscountCard(DiscountCard card, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateDiscountCard(ByValue<DiscountCard> card, AsyncErrorHandler errorHandler, Action resultHandler);
        void UpdateUser(ByValue<User> user, AsyncErrorHandler errorHandler, Action<UserWithValidationInfo> resultHandler);
        void UpdateUsers(List<ByValue<User>> users, AsyncErrorHandler errorHandler, Action resultHandler);
        #endregion
        #region task version
        Task<DiscountCard> CreateDiscountCard(ByValue<DiscountCard> card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<UserWithValidationInfo> CreateUser(ByValue<User> user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteDiscountCard(DiscountCard card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> DeleteDiscountCards(List<DiscountCard> cards, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GenerateExternalPin([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<string> GeneratePinCode([CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<UserValidationInfo> SetUserDeleted(User user, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UndeleteDiscountCard(DiscountCard card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateDiscountCard(ByValue<DiscountCard> card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<UserWithValidationInfo> UpdateUser(ByValue<User> user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        Task<object> UpdateUsers(List<ByValue<User>> users, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null);
        #endregion
    }
    internal class AccountingService : IAccountingService
    {
        private readonly RemoteMethodCaller addOrderTypeCaller;
        private readonly RemoteMethodCaller addPayInOrOutByDepartmentsCaller;
        private readonly RemoteMethodCaller addPayInOrOutForListEmployeesCaller;
        private readonly RemoteMethodCaller addPayInOutTypeCaller;
        private readonly RemoteMethodCaller addPaymentTypeCaller;
        private readonly RemoteMethodCaller addRemovalTypeCaller;
        private readonly RemoteMethodCaller createAccountCaller;
        private readonly RemoteMethodCaller createOrUpdatePaymentTypesCaller;
        private readonly RemoteMethodCaller deleteOrderTypeCaller;
        private readonly RemoteMethodCaller deletePayInOutTypeCaller;
        private readonly RemoteMethodCaller deletePaymentTypeCaller;
        private readonly RemoteMethodCaller deleteRegisterRecordCaller;
        private readonly RemoteMethodCaller deleteRegisterRecordsCaller;
        private readonly RemoteMethodCaller deleteRemovalTypeCaller;
        private readonly RemoteMethodCaller getAccountBalanceForCounteragentCaller;
        private readonly RemoteMethodCaller getAccountBalanceForDepartmentCaller;
        private readonly RemoteMethodCaller getAccountBalanceForDepartmentAndCounteragentCaller;
        private readonly RemoteMethodCaller getAccountsBalanceForDepartmentsCaller;
        private readonly RemoteMethodCaller getCashAccountsBalanceByDepartmentsCaller;
        private readonly RemoteMethodCaller getLastAccountUpdateCaller;
        private readonly RemoteMethodCaller getRegisterRecordListsCaller;
        private readonly RemoteMethodCaller getRegisterRecordsByDepartmentsCaller;
        private readonly RemoteMethodCaller getRegisterRecordsByPayrollCaller;
        private readonly RemoteMethodCaller getTransactionsByDocumentIdCaller;
        private readonly RemoteMethodCaller getTransactionsByIdCaller;
        private readonly RemoteMethodCaller getVerificationActRecordListCaller;
        private readonly RemoteMethodCaller importBankStatementsCaller;
        private readonly RemoteMethodCaller setAccountDeletedCaller;
        private readonly RemoteMethodCaller undeleteOrderTypeCaller;
        private readonly RemoteMethodCaller undeletePayInOutTypeCaller;
        private readonly RemoteMethodCaller updateAccountCaller;
        private readonly RemoteMethodCaller updateOrderTypeCaller;
        private readonly RemoteMethodCaller updatePayInOutTypeCaller;
        private readonly RemoteMethodCaller updatePaymentSystemCaller;
        private readonly RemoteMethodCaller updatePaymentTypeCaller;
        private readonly RemoteMethodCaller updateRegisterRecordsCaller;
        private readonly RemoteMethodCaller updateRemovalTypeCaller;

        internal AccountingService()
        {

            addOrderTypeCaller = new RemoteMethodCaller("accounts", "addOrderType");
            addOrderTypeCaller.AddArg("orderType", typeof(ByValue<OrderType>));

            addPayInOrOutByDepartmentsCaller = new RemoteMethodCaller("accounts", "addPayInOrOutByDepartments");
            addPayInOrOutByDepartmentsCaller.AddArg("account", typeof(Account));
            addPayInOrOutByDepartmentsCaller.AddArg("counterAgentTo", typeof(User));
            addPayInOrOutByDepartmentsCaller.AddArg("payInOutType", typeof(PayInOutType));
            addPayInOrOutByDepartmentsCaller.AddArg("date", typeof(DateTime?));
            addPayInOrOutByDepartmentsCaller.AddArg("counterAgent", typeof(User));
            addPayInOrOutByDepartmentsCaller.AddArg("corrAccount", typeof(Account));
            addPayInOrOutByDepartmentsCaller.AddArg("departmentSumMap", typeof(Dictionary<DepartmentEntity, decimal>));
            addPayInOrOutByDepartmentsCaller.AddArg("cashFlowCategory", typeof(CashFlowCategory));
            addPayInOrOutByDepartmentsCaller.AddArg("conception", typeof(Conception));
            addPayInOrOutByDepartmentsCaller.AddArg("payrollId", typeof(Guid?));
            addPayInOrOutByDepartmentsCaller.AddArg("cashOrderNumber", typeof(string));
            addPayInOrOutByDepartmentsCaller.AddArg("comment", typeof(string));

            addPayInOrOutForListEmployeesCaller = new RemoteMethodCaller("accounts", "addPayInOrOutForListEmployees");
            addPayInOrOutForListEmployeesCaller.AddArg("userPays", typeof(Dictionary<User, decimal>));
            addPayInOrOutForListEmployeesCaller.AddArg("account", typeof(Account));
            addPayInOrOutForListEmployeesCaller.AddArg("counterAgentTo", typeof(User));
            addPayInOrOutForListEmployeesCaller.AddArg("payInOutType", typeof(PayInOutType));
            addPayInOrOutForListEmployeesCaller.AddArg("date", typeof(DateTime?));
            addPayInOrOutForListEmployeesCaller.AddArg("corrAccount", typeof(Account));
            addPayInOrOutForListEmployeesCaller.AddArg("department", typeof(DepartmentEntity));
            addPayInOrOutForListEmployeesCaller.AddArg("cashFlowCategory", typeof(CashFlowCategory));
            addPayInOrOutForListEmployeesCaller.AddArg("conception", typeof(Conception));
            addPayInOrOutForListEmployeesCaller.AddArg("payrollId", typeof(Guid?));
            addPayInOrOutForListEmployeesCaller.AddArg("cashOrderNumber", typeof(string));
            addPayInOrOutForListEmployeesCaller.AddArg("comment", typeof(string));

            addPayInOutTypeCaller = new RemoteMethodCaller("accounts", "addPayInOutType");
            addPayInOutTypeCaller.AddArg("payInOutType", typeof(ByValue<PayInOutType>));

            addPaymentTypeCaller = new RemoteMethodCaller("accounts", "addPaymentType");
            addPaymentTypeCaller.AddArg("paymentType", typeof(ByValue<PaymentType>));
            addPaymentTypeCaller.AddArg("LocalId", typeof(int?));

            addRemovalTypeCaller = new RemoteMethodCaller("accounts", "addRemovalType");
            addRemovalTypeCaller.AddArg("removalType", typeof(ByValue<RemovalType>));
            addRemovalTypeCaller.AddArg("LocalId", typeof(int?));

            createAccountCaller = new RemoteMethodCaller("accounts", "createAccount");
            createAccountCaller.AddArg("account", typeof(ByValue<Account>));
            createAccountCaller.AddArg("deleted", typeof(bool));
            createAccountCaller.AddArg("openingDate", typeof(DateTime?));
            createAccountCaller.AddArg("openingBalance", typeof(decimal?));

            createOrUpdatePaymentTypesCaller = new RemoteMethodCaller("accounts", "createOrUpdatePaymentTypes");
            createOrUpdatePaymentTypesCaller.AddArg("paymentType", typeof(List<ByValue<PaymentType>>));

            deleteOrderTypeCaller = new RemoteMethodCaller("accounts", "deleteOrderType");
            deleteOrderTypeCaller.AddArg("orderType", typeof(OrderType));

            deletePayInOutTypeCaller = new RemoteMethodCaller("accounts", "deletePayInOutType");
            deletePayInOutTypeCaller.AddArg("payInOutType", typeof(PayInOutType));

            deletePaymentTypeCaller = new RemoteMethodCaller("accounts", "deletePaymentType");
            deletePaymentTypeCaller.AddArg("paymentType", typeof(PaymentType));
            deletePaymentTypeCaller.AddArg("delete", typeof(bool));

            deleteRegisterRecordCaller = new RemoteMethodCaller("accounts", "deleteRegisterRecord");
            deleteRegisterRecordCaller.AddArg("id", typeof(Guid?));

            deleteRegisterRecordsCaller = new RemoteMethodCaller("accounts", "deleteRegisterRecords");
            deleteRegisterRecordsCaller.AddArg("records", typeof(HashSet<Guid>));

            deleteRemovalTypeCaller = new RemoteMethodCaller("accounts", "deleteRemovalType");
            deleteRemovalTypeCaller.AddArg("removalType", typeof(RemovalType));
            deleteRemovalTypeCaller.AddArg("delete", typeof(bool));

            getAccountBalanceForCounteragentCaller = new RemoteMethodCaller("accounts", "getAccountBalanceForCounteragent");
            getAccountBalanceForCounteragentCaller.AddArg("dateAt", typeof(DateTime?));
            getAccountBalanceForCounteragentCaller.AddArg("account", typeof(Account));
            getAccountBalanceForCounteragentCaller.AddArg("counteragent", typeof(User));

            getAccountBalanceForDepartmentCaller = new RemoteMethodCaller("accounts", "getAccountBalanceForDepartment");
            getAccountBalanceForDepartmentCaller.AddArg("dateAt", typeof(DateTime?));
            getAccountBalanceForDepartmentCaller.AddArg("account", typeof(Account));
            getAccountBalanceForDepartmentCaller.AddArg("department", typeof(DepartmentEntity));

            getAccountBalanceForDepartmentAndCounteragentCaller = new RemoteMethodCaller("accounts", "getAccountBalanceForDepartmentAndCounteragent");
            getAccountBalanceForDepartmentAndCounteragentCaller.AddArg("dateAt", typeof(DateTime?));
            getAccountBalanceForDepartmentAndCounteragentCaller.AddArg("account", typeof(Account));
            getAccountBalanceForDepartmentAndCounteragentCaller.AddArg("department", typeof(DepartmentEntity));
            getAccountBalanceForDepartmentAndCounteragentCaller.AddArg("counteragent", typeof(User));

            getAccountsBalanceForDepartmentsCaller = new RemoteMethodCaller("accounts", "getAccountsBalanceForDepartments");
            getAccountsBalanceForDepartmentsCaller.AddArg("dateAt", typeof(DateTime?));
            getAccountsBalanceForDepartmentsCaller.AddArg("department", typeof(List<DepartmentEntity>));

            getCashAccountsBalanceByDepartmentsCaller = new RemoteMethodCaller("accounts", "getCashAccountsBalanceByDepartments");
            getCashAccountsBalanceByDepartmentsCaller.AddArg("dateAt", typeof(DateTime?));
            getCashAccountsBalanceByDepartmentsCaller.AddArg("departments", typeof(List<DepartmentEntity>));

            getLastAccountUpdateCaller = new RemoteMethodCaller("accounts", "getLastAccountUpdate");
            getLastAccountUpdateCaller.AddArg("account", typeof(Account));
            getLastAccountUpdateCaller.AddArg("counteragent", typeof(User));

            getRegisterRecordListsCaller = new RemoteMethodCaller("accounts", "getRegisterRecordLists");
            getRegisterRecordListsCaller.AddArg("accounts", typeof(HashSet<Account>));
            getRegisterRecordListsCaller.AddArg("dateFrom", typeof(DateTime?));
            getRegisterRecordListsCaller.AddArg("dateTo", typeof(DateTime?));
            getRegisterRecordListsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getRegisterRecordListsCaller.AddArg("conceptions", typeof(HashSet<Conception>));

            getRegisterRecordsByDepartmentsCaller = new RemoteMethodCaller("accounts", "getRegisterRecordsByDepartments");
            getRegisterRecordsByDepartmentsCaller.AddArg("account", typeof(Account));
            getRegisterRecordsByDepartmentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getRegisterRecordsByDepartmentsCaller.AddArg("dateTo", typeof(DateTime?));
            getRegisterRecordsByDepartmentsCaller.AddArg("counteragent", typeof(User));
            getRegisterRecordsByDepartmentsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));

            getRegisterRecordsByPayrollCaller = new RemoteMethodCaller("accounts", "getRegisterRecordsByPayroll");
            getRegisterRecordsByPayrollCaller.AddArg("payrollId", typeof(Guid?));
            getRegisterRecordsByPayrollCaller.AddArg("employees", typeof(ICollection<User>));

            getTransactionsByDocumentIdCaller = new RemoteMethodCaller("accounts", "getTransactionsByDocumentId");
            getTransactionsByDocumentIdCaller.AddArg("documentId", typeof(Guid?));

            getTransactionsByIdCaller = new RemoteMethodCaller("accounts", "getTransactionsById");
            getTransactionsByIdCaller.AddArg("transactionIds", typeof(List<Guid>));

            getVerificationActRecordListCaller = new RemoteMethodCaller("accounts", "getVerificationActRecordList");
            getVerificationActRecordListCaller.AddArg("dateFrom", typeof(DateTime?));
            getVerificationActRecordListCaller.AddArg("dateTo", typeof(DateTime?));
            getVerificationActRecordListCaller.AddArg("counteragent", typeof(User));
            getVerificationActRecordListCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));

            importBankStatementsCaller = new RemoteMethodCaller("accounts", "importBankStatements");
            importBankStatementsCaller.AddArg("bankStatementTransaction", typeof(List<BankStatementTransaction>));

            setAccountDeletedCaller = new RemoteMethodCaller("accounts", "setAccountDeleted");
            setAccountDeletedCaller.AddArg("account", typeof(Account));
            setAccountDeletedCaller.AddArg("deleted", typeof(bool));
            setAccountDeletedCaller.AddArg("undoDelete", typeof(bool));

            undeleteOrderTypeCaller = new RemoteMethodCaller("accounts", "undeleteOrderType");
            undeleteOrderTypeCaller.AddArg("orderType", typeof(OrderType));

            undeletePayInOutTypeCaller = new RemoteMethodCaller("accounts", "undeletePayInOutType");
            undeletePayInOutTypeCaller.AddArg("payInOutType", typeof(PayInOutType));

            updateAccountCaller = new RemoteMethodCaller("accounts", "updateAccount");
            updateAccountCaller.AddArg("account", typeof(ByValue<Account>));
            updateAccountCaller.AddArg("startBalanceSum", typeof(decimal?));
            updateAccountCaller.AddArg("startBalanceDate", typeof(DateTime?));
            updateAccountCaller.AddArg("startBalanceChanged", typeof(bool?));

            updateOrderTypeCaller = new RemoteMethodCaller("accounts", "updateOrderType");
            updateOrderTypeCaller.AddArg("orderType", typeof(ByValue<OrderType>));

            updatePayInOutTypeCaller = new RemoteMethodCaller("accounts", "updatePayInOutType");
            updatePayInOutTypeCaller.AddArg("payInOutType", typeof(ByValue<PayInOutType>));

            updatePaymentSystemCaller = new RemoteMethodCaller("accounts", "updatePaymentSystem");
            updatePaymentSystemCaller.AddArg("paymentSystem", typeof(ByValue<PaymentSystem>));

            updatePaymentTypeCaller = new RemoteMethodCaller("accounts", "updatePaymentType");
            updatePaymentTypeCaller.AddArg("paymentType", typeof(ByValue<PaymentType>));
            updatePaymentTypeCaller.AddArg("LocalId", typeof(int?));

            updateRegisterRecordsCaller = new RemoteMethodCaller("accounts", "updateRegisterRecords");
            updateRegisterRecordsCaller.AddArg("account", typeof(Account));
            updateRegisterRecordsCaller.AddArg("recordsToUpdate", typeof(List<AccountRegisterRecord>));
            updateRegisterRecordsCaller.AddArg("recordsToAdd", typeof(List<AccountRegisterRecord>));

            updateRemovalTypeCaller = new RemoteMethodCaller("accounts", "updateRemovalType");
            updateRemovalTypeCaller.AddArg("removalType", typeof(ByValue<RemovalType>));
            updateRemovalTypeCaller.AddArg("LocalId", typeof(int?));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddOrderType(ByValue<OrderType> orderType)
        {
            return addOrderTypeCaller.CreateCall<object>(new object[] { orderType });
        }

        public IServiceMethodCall<ICollection<AccountingTransaction>> AddPayInOrOutByDepartments(Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, User counterAgent, Account corrAccount, Dictionary<DepartmentEntity, decimal> departmentSumMap, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment)
        {
            return addPayInOrOutByDepartmentsCaller.CreateCall<ICollection<AccountingTransaction>>(new object[] { account, counterAgentTo, payInOutType, date, counterAgent, corrAccount, departmentSumMap, cashFlowCategory, conception, payrollId, cashOrderNumber, comment });
        }

        public IServiceMethodCall<Dictionary<User, AccountingTransaction>> AddPayInOrOutForListEmployees(Dictionary<User, decimal> userPays, Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, Account corrAccount, DepartmentEntity department, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment)
        {
            return addPayInOrOutForListEmployeesCaller.CreateCall<Dictionary<User, AccountingTransaction>>(new object[] { userPays, account, counterAgentTo, payInOutType, date, corrAccount, department, cashFlowCategory, conception, payrollId, cashOrderNumber, comment });
        }

        public IServiceMethodCall<object> AddPayInOutType(ByValue<PayInOutType> payInOutType)
        {
            return addPayInOutTypeCaller.CreateCall<object>(new object[] { payInOutType });
        }

        public IServiceMethodCall<object> AddPaymentType(ByValue<PaymentType> paymentType, int? LocalId)
        {
            return addPaymentTypeCaller.CreateCall<object>(new object[] { paymentType, LocalId });
        }

        public IServiceMethodCall<object> AddRemovalType(ByValue<RemovalType> removalType, int? LocalId)
        {
            return addRemovalTypeCaller.CreateCall<object>(new object[] { removalType, LocalId });
        }

        public IServiceMethodCall<Account> CreateAccount(ByValue<Account> account, bool deleted, DateTime? openingDate, decimal? openingBalance)
        {
            return createAccountCaller.CreateCall<Account>(new object[] { account, deleted, openingDate, openingBalance });
        }

        public IServiceMethodCall<object> CreateOrUpdatePaymentTypes(List<ByValue<PaymentType>> paymentType)
        {
            return createOrUpdatePaymentTypesCaller.CreateCall<object>(new object[] { paymentType });
        }

        public IServiceMethodCall<object> DeleteOrderType(OrderType orderType)
        {
            return deleteOrderTypeCaller.CreateCall<object>(new object[] { orderType });
        }

        public IServiceMethodCall<object> DeletePayInOutType(PayInOutType payInOutType)
        {
            return deletePayInOutTypeCaller.CreateCall<object>(new object[] { payInOutType });
        }

        public IServiceMethodCall<object> DeletePaymentType(PaymentType paymentType, bool delete)
        {
            return deletePaymentTypeCaller.CreateCall<object>(new object[] { paymentType, delete });
        }

        public IServiceMethodCall<object> DeleteRegisterRecord(Guid? id)
        {
            return deleteRegisterRecordCaller.CreateCall<object>(new object[] { id });
        }

        public IServiceMethodCall<object> DeleteRegisterRecords(HashSet<Guid> records)
        {
            return deleteRegisterRecordsCaller.CreateCall<object>(new object[] { records });
        }

        public IServiceMethodCall<object> DeleteRemovalType(RemovalType removalType, bool delete)
        {
            return deleteRemovalTypeCaller.CreateCall<object>(new object[] { removalType, delete });
        }

        public IServiceMethodCall<decimal?> GetAccountBalanceForCounteragent(DateTime? dateAt, Account account, User counteragent)
        {
            return getAccountBalanceForCounteragentCaller.CreateCall<decimal?>(new object[] { dateAt, account, counteragent });
        }

        public IServiceMethodCall<decimal?> GetAccountBalanceForDepartment(DateTime? dateAt, Account account, DepartmentEntity department)
        {
            return getAccountBalanceForDepartmentCaller.CreateCall<decimal?>(new object[] { dateAt, account, department });
        }

        public IServiceMethodCall<decimal?> GetAccountBalanceForDepartmentAndCounteragent(DateTime? dateAt, Account account, DepartmentEntity department, User counteragent)
        {
            return getAccountBalanceForDepartmentAndCounteragentCaller.CreateCall<decimal?>(new object[] { dateAt, account, department, counteragent });
        }

        public IServiceMethodCall<Dictionary<Account, decimal>> GetAccountsBalanceForDepartments(DateTime? dateAt, List<DepartmentEntity> department)
        {
            return getAccountsBalanceForDepartmentsCaller.CreateCall<Dictionary<Account, decimal>>(new object[] { dateAt, department });
        }

        public IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>> GetCashAccountsBalanceByDepartments(DateTime? dateAt, List<DepartmentEntity> departments)
        {
            return getCashAccountsBalanceByDepartmentsCaller.CreateCall<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>>(new object[] { dateAt, departments });
        }

        public IServiceMethodCall<DateTime?> GetLastAccountUpdate(Account account, User counteragent)
        {
            return getLastAccountUpdateCaller.CreateCall<DateTime?>(new object[] { account, counteragent });
        }

        public IServiceMethodCall<List<AccountRecordList>> GetRegisterRecordLists(HashSet<Account> accounts, DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, HashSet<Conception> conceptions)
        {
            return getRegisterRecordListsCaller.CreateCall<List<AccountRecordList>>(new object[] { accounts, dateFrom, dateTo, departments, conceptions });
        }

        public IServiceMethodCall<AccountRecordList> GetRegisterRecordsByDepartments(Account account, DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments)
        {
            return getRegisterRecordsByDepartmentsCaller.CreateCall<AccountRecordList>(new object[] { account, dateFrom, dateTo, counteragent, departments });
        }

        public IServiceMethodCall<AccountRecordList> GetRegisterRecordsByPayroll(Guid? payrollId, ICollection<User> employees)
        {
            return getRegisterRecordsByPayrollCaller.CreateCall<AccountRecordList>(new object[] { payrollId, employees });
        }

        public IServiceMethodCall<ICollection<AccountingTransaction>> GetTransactionsByDocumentId(Guid? documentId)
        {
            return getTransactionsByDocumentIdCaller.CreateCall<ICollection<AccountingTransaction>>(new object[] { documentId });
        }

        public IServiceMethodCall<ICollection<AccountingTransaction>> GetTransactionsById(List<Guid> transactionIds)
        {
            return getTransactionsByIdCaller.CreateCall<ICollection<AccountingTransaction>>(new object[] { transactionIds });
        }

        public IServiceMethodCall<AccountRecordList> GetVerificationActRecordList(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments)
        {
            return getVerificationActRecordListCaller.CreateCall<AccountRecordList>(new object[] { dateFrom, dateTo, counteragent, departments });
        }

        public IServiceMethodCall<object> ImportBankStatements(List<BankStatementTransaction> bankStatementTransaction)
        {
            return importBankStatementsCaller.CreateCall<object>(new object[] { bankStatementTransaction });
        }

        public IServiceMethodCall<object> SetAccountDeleted(Account account, bool deleted, bool undoDelete)
        {
            return setAccountDeletedCaller.CreateCall<object>(new object[] { account, deleted, undoDelete });
        }

        public IServiceMethodCall<object> UndeleteOrderType(OrderType orderType)
        {
            return undeleteOrderTypeCaller.CreateCall<object>(new object[] { orderType });
        }

        public IServiceMethodCall<object> UndeletePayInOutType(PayInOutType payInOutType)
        {
            return undeletePayInOutTypeCaller.CreateCall<object>(new object[] { payInOutType });
        }

        public IServiceMethodCall<object> UpdateAccount(ByValue<Account> account, decimal? startBalanceSum, DateTime? startBalanceDate, bool? startBalanceChanged)
        {
            return updateAccountCaller.CreateCall<object>(new object[] { account, startBalanceSum, startBalanceDate, startBalanceChanged });
        }

        public IServiceMethodCall<object> UpdateOrderType(ByValue<OrderType> orderType)
        {
            return updateOrderTypeCaller.CreateCall<object>(new object[] { orderType });
        }

        public IServiceMethodCall<object> UpdatePayInOutType(ByValue<PayInOutType> payInOutType)
        {
            return updatePayInOutTypeCaller.CreateCall<object>(new object[] { payInOutType });
        }

        public IServiceMethodCall<object> UpdatePaymentSystem(ByValue<PaymentSystem> paymentSystem)
        {
            return updatePaymentSystemCaller.CreateCall<object>(new object[] { paymentSystem });
        }

        public IServiceMethodCall<object> UpdatePaymentType(ByValue<PaymentType> paymentType, int? LocalId)
        {
            return updatePaymentTypeCaller.CreateCall<object>(new object[] { paymentType, LocalId });
        }

        public IServiceMethodCall<object> UpdateRegisterRecords(Account account, List<AccountRegisterRecord> recordsToUpdate, List<AccountRegisterRecord> recordsToAdd)
        {
            return updateRegisterRecordsCaller.CreateCall<object>(new object[] { account, recordsToUpdate, recordsToAdd });
        }

        public IServiceMethodCall<object> UpdateRemovalType(ByValue<RemovalType> removalType, int? LocalId)
        {
            return updateRemovalTypeCaller.CreateCall<object>(new object[] { removalType, LocalId });
        }

        #endregion

        #region asynchronous version
        public void AddOrderType(ByValue<OrderType> orderType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addOrderTypeCaller.CallAsync(new object[] {orderType}, resultHandler, errorHandler);
        }

        public void AddPayInOrOutByDepartments(Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, User counterAgent, Account corrAccount, Dictionary<DepartmentEntity, decimal> departmentSumMap, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, AsyncErrorHandler errorHandler, Action<ICollection<AccountingTransaction>> resultHandler)
        {
            addPayInOrOutByDepartmentsCaller.CallAsync(new object[] {account, counterAgentTo, payInOutType, date, counterAgent, corrAccount, departmentSumMap, cashFlowCategory, conception, payrollId, cashOrderNumber, comment}, resultHandler, errorHandler);
        }

        public void AddPayInOrOutForListEmployees(Dictionary<User, decimal> userPays, Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, Account corrAccount, DepartmentEntity department, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, AsyncErrorHandler errorHandler, Action<Dictionary<User, AccountingTransaction>> resultHandler)
        {
            addPayInOrOutForListEmployeesCaller.CallAsync(new object[] {userPays, account, counterAgentTo, payInOutType, date, corrAccount, department, cashFlowCategory, conception, payrollId, cashOrderNumber, comment}, resultHandler, errorHandler);
        }

        public void AddPayInOutType(ByValue<PayInOutType> payInOutType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addPayInOutTypeCaller.CallAsync(new object[] {payInOutType}, resultHandler, errorHandler);
        }

        public void AddPaymentType(ByValue<PaymentType> paymentType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addPaymentTypeCaller.CallAsync(new object[] {paymentType, LocalId}, resultHandler, errorHandler);
        }

        public void AddRemovalType(ByValue<RemovalType> removalType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addRemovalTypeCaller.CallAsync(new object[] {removalType, LocalId}, resultHandler, errorHandler);
        }

        public void CreateAccount(ByValue<Account> account, bool deleted, DateTime? openingDate, decimal? openingBalance, AsyncErrorHandler errorHandler, Action<Account> resultHandler)
        {
            createAccountCaller.CallAsync(new object[] {account, deleted, openingDate, openingBalance}, resultHandler, errorHandler);
        }

        public void CreateOrUpdatePaymentTypes(List<ByValue<PaymentType>> paymentType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdatePaymentTypesCaller.CallAsync(new object[] {paymentType}, resultHandler, errorHandler);
        }

        public void DeleteOrderType(OrderType orderType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteOrderTypeCaller.CallAsync(new object[] {orderType}, resultHandler, errorHandler);
        }

        public void DeletePayInOutType(PayInOutType payInOutType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deletePayInOutTypeCaller.CallAsync(new object[] {payInOutType}, resultHandler, errorHandler);
        }

        public void DeletePaymentType(PaymentType paymentType, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deletePaymentTypeCaller.CallAsync(new object[] {paymentType, delete}, resultHandler, errorHandler);
        }

        public void DeleteRegisterRecord(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteRegisterRecordCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void DeleteRegisterRecords(HashSet<Guid> records, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteRegisterRecordsCaller.CallAsync(new object[] {records}, resultHandler, errorHandler);
        }

        public void DeleteRemovalType(RemovalType removalType, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteRemovalTypeCaller.CallAsync(new object[] {removalType, delete}, resultHandler, errorHandler);
        }

        public void GetAccountBalanceForCounteragent(DateTime? dateAt, Account account, User counteragent, AsyncErrorHandler errorHandler, Action<decimal?> resultHandler)
        {
            getAccountBalanceForCounteragentCaller.CallAsync(new object[] {dateAt, account, counteragent}, resultHandler, errorHandler);
        }

        public void GetAccountBalanceForDepartment(DateTime? dateAt, Account account, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<decimal?> resultHandler)
        {
            getAccountBalanceForDepartmentCaller.CallAsync(new object[] {dateAt, account, department}, resultHandler, errorHandler);
        }

        public void GetAccountBalanceForDepartmentAndCounteragent(DateTime? dateAt, Account account, DepartmentEntity department, User counteragent, AsyncErrorHandler errorHandler, Action<decimal?> resultHandler)
        {
            getAccountBalanceForDepartmentAndCounteragentCaller.CallAsync(new object[] {dateAt, account, department, counteragent}, resultHandler, errorHandler);
        }

        public void GetAccountsBalanceForDepartments(DateTime? dateAt, List<DepartmentEntity> department, AsyncErrorHandler errorHandler, Action<Dictionary<Account, decimal>> resultHandler)
        {
            getAccountsBalanceForDepartmentsCaller.CallAsync(new object[] {dateAt, department}, resultHandler, errorHandler);
        }

        public void GetCashAccountsBalanceByDepartments(DateTime? dateAt, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>> resultHandler)
        {
            getCashAccountsBalanceByDepartmentsCaller.CallAsync(new object[] {dateAt, departments}, resultHandler, errorHandler);
        }

        public void GetLastAccountUpdate(Account account, User counteragent, AsyncErrorHandler errorHandler, Action<DateTime?> resultHandler)
        {
            getLastAccountUpdateCaller.CallAsync(new object[] {account, counteragent}, resultHandler, errorHandler);
        }

        public void GetRegisterRecordLists(HashSet<Account> accounts, DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, HashSet<Conception> conceptions, AsyncErrorHandler errorHandler, Action<List<AccountRecordList>> resultHandler)
        {
            getRegisterRecordListsCaller.CallAsync(new object[] {accounts, dateFrom, dateTo, departments, conceptions}, resultHandler, errorHandler);
        }

        public void GetRegisterRecordsByDepartments(Account account, DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<AccountRecordList> resultHandler)
        {
            getRegisterRecordsByDepartmentsCaller.CallAsync(new object[] {account, dateFrom, dateTo, counteragent, departments}, resultHandler, errorHandler);
        }

        public void GetRegisterRecordsByPayroll(Guid? payrollId, ICollection<User> employees, AsyncErrorHandler errorHandler, Action<AccountRecordList> resultHandler)
        {
            getRegisterRecordsByPayrollCaller.CallAsync(new object[] {payrollId, employees}, resultHandler, errorHandler);
        }

        public void GetTransactionsByDocumentId(Guid? documentId, AsyncErrorHandler errorHandler, Action<ICollection<AccountingTransaction>> resultHandler)
        {
            getTransactionsByDocumentIdCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        public void GetTransactionsById(List<Guid> transactionIds, AsyncErrorHandler errorHandler, Action<ICollection<AccountingTransaction>> resultHandler)
        {
            getTransactionsByIdCaller.CallAsync(new object[] {transactionIds}, resultHandler, errorHandler);
        }

        public void GetVerificationActRecordList(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<AccountRecordList> resultHandler)
        {
            getVerificationActRecordListCaller.CallAsync(new object[] {dateFrom, dateTo, counteragent, departments}, resultHandler, errorHandler);
        }

        public void ImportBankStatements(List<BankStatementTransaction> bankStatementTransaction, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            importBankStatementsCaller.CallAsync(new object[] {bankStatementTransaction}, resultHandler, errorHandler);
        }

        public void SetAccountDeleted(Account account, bool deleted, bool undoDelete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setAccountDeletedCaller.CallAsync(new object[] {account, deleted, undoDelete}, resultHandler, errorHandler);
        }

        public void UndeleteOrderType(OrderType orderType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteOrderTypeCaller.CallAsync(new object[] {orderType}, resultHandler, errorHandler);
        }

        public void UndeletePayInOutType(PayInOutType payInOutType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeletePayInOutTypeCaller.CallAsync(new object[] {payInOutType}, resultHandler, errorHandler);
        }

        public void UpdateAccount(ByValue<Account> account, decimal? startBalanceSum, DateTime? startBalanceDate, bool? startBalanceChanged, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateAccountCaller.CallAsync(new object[] {account, startBalanceSum, startBalanceDate, startBalanceChanged}, resultHandler, errorHandler);
        }

        public void UpdateOrderType(ByValue<OrderType> orderType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateOrderTypeCaller.CallAsync(new object[] {orderType}, resultHandler, errorHandler);
        }

        public void UpdatePayInOutType(ByValue<PayInOutType> payInOutType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updatePayInOutTypeCaller.CallAsync(new object[] {payInOutType}, resultHandler, errorHandler);
        }

        public void UpdatePaymentSystem(ByValue<PaymentSystem> paymentSystem, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updatePaymentSystemCaller.CallAsync(new object[] {paymentSystem}, resultHandler, errorHandler);
        }

        public void UpdatePaymentType(ByValue<PaymentType> paymentType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updatePaymentTypeCaller.CallAsync(new object[] {paymentType, LocalId}, resultHandler, errorHandler);
        }

        public void UpdateRegisterRecords(Account account, List<AccountRegisterRecord> recordsToUpdate, List<AccountRegisterRecord> recordsToAdd, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateRegisterRecordsCaller.CallAsync(new object[] {account, recordsToUpdate, recordsToAdd}, resultHandler, errorHandler);
        }

        public void UpdateRemovalType(ByValue<RemovalType> removalType, int? LocalId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateRemovalTypeCaller.CallAsync(new object[] {removalType, LocalId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddOrderType(ByValue<OrderType> orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addOrderTypeCaller.Call<object>(new object[] { orderType }, asyncState, requestTimeout);
        }

        public Task<ICollection<AccountingTransaction>> AddPayInOrOutByDepartments(Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, User counterAgent, Account corrAccount, Dictionary<DepartmentEntity, decimal> departmentSumMap, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPayInOrOutByDepartmentsCaller.Call<ICollection<AccountingTransaction>>(new object[] { account, counterAgentTo, payInOutType, date, counterAgent, corrAccount, departmentSumMap, cashFlowCategory, conception, payrollId, cashOrderNumber, comment }, asyncState, requestTimeout);
        }

        public Task<Dictionary<User, AccountingTransaction>> AddPayInOrOutForListEmployees(Dictionary<User, decimal> userPays, Account account, User counterAgentTo, PayInOutType payInOutType, DateTime? date, Account corrAccount, DepartmentEntity department, CashFlowCategory cashFlowCategory, Conception conception, Guid? payrollId, string cashOrderNumber, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPayInOrOutForListEmployeesCaller.Call<Dictionary<User, AccountingTransaction>>(new object[] { userPays, account, counterAgentTo, payInOutType, date, corrAccount, department, cashFlowCategory, conception, payrollId, cashOrderNumber, comment }, asyncState, requestTimeout);
        }

        public Task<object> AddPayInOutType(ByValue<PayInOutType> payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPayInOutTypeCaller.Call<object>(new object[] { payInOutType }, asyncState, requestTimeout);
        }

        public Task<object> AddPaymentType(ByValue<PaymentType> paymentType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPaymentTypeCaller.Call<object>(new object[] { paymentType, LocalId }, asyncState, requestTimeout);
        }

        public Task<object> AddRemovalType(ByValue<RemovalType> removalType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addRemovalTypeCaller.Call<object>(new object[] { removalType, LocalId }, asyncState, requestTimeout);
        }

        public Task<Account> CreateAccount(ByValue<Account> account, bool deleted, DateTime? openingDate, decimal? openingBalance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createAccountCaller.Call<Account>(new object[] { account, deleted, openingDate, openingBalance }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdatePaymentTypes(List<ByValue<PaymentType>> paymentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdatePaymentTypesCaller.Call<object>(new object[] { paymentType }, asyncState, requestTimeout);
        }

        public Task<object> DeleteOrderType(OrderType orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteOrderTypeCaller.Call<object>(new object[] { orderType }, asyncState, requestTimeout);
        }

        public Task<object> DeletePayInOutType(PayInOutType payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deletePayInOutTypeCaller.Call<object>(new object[] { payInOutType }, asyncState, requestTimeout);
        }

        public Task<object> DeletePaymentType(PaymentType paymentType, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deletePaymentTypeCaller.Call<object>(new object[] { paymentType, delete }, asyncState, requestTimeout);
        }

        public Task<object> DeleteRegisterRecord(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteRegisterRecordCaller.Call<object>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<object> DeleteRegisterRecords(HashSet<Guid> records, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteRegisterRecordsCaller.Call<object>(new object[] { records }, asyncState, requestTimeout);
        }

        public Task<object> DeleteRemovalType(RemovalType removalType, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteRemovalTypeCaller.Call<object>(new object[] { removalType, delete }, asyncState, requestTimeout);
        }

        public Task<decimal?> GetAccountBalanceForCounteragent(DateTime? dateAt, Account account, User counteragent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAccountBalanceForCounteragentCaller.Call<decimal?>(new object[] { dateAt, account, counteragent }, asyncState, requestTimeout);
        }

        public Task<decimal?> GetAccountBalanceForDepartment(DateTime? dateAt, Account account, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAccountBalanceForDepartmentCaller.Call<decimal?>(new object[] { dateAt, account, department }, asyncState, requestTimeout);
        }

        public Task<decimal?> GetAccountBalanceForDepartmentAndCounteragent(DateTime? dateAt, Account account, DepartmentEntity department, User counteragent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAccountBalanceForDepartmentAndCounteragentCaller.Call<decimal?>(new object[] { dateAt, account, department, counteragent }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Account, decimal>> GetAccountsBalanceForDepartments(DateTime? dateAt, List<DepartmentEntity> department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAccountsBalanceForDepartmentsCaller.Call<Dictionary<Account, decimal>>(new object[] { dateAt, department }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>> GetCashAccountsBalanceByDepartments(DateTime? dateAt, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCashAccountsBalanceByDepartmentsCaller.Call<Dictionary<DepartmentEntity, Dictionary<Account, decimal>>>(new object[] { dateAt, departments }, asyncState, requestTimeout);
        }

        public Task<DateTime?> GetLastAccountUpdate(Account account, User counteragent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLastAccountUpdateCaller.Call<DateTime?>(new object[] { account, counteragent }, asyncState, requestTimeout);
        }

        public Task<List<AccountRecordList>> GetRegisterRecordLists(HashSet<Account> accounts, DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, HashSet<Conception> conceptions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRegisterRecordListsCaller.Call<List<AccountRecordList>>(new object[] { accounts, dateFrom, dateTo, departments, conceptions }, asyncState, requestTimeout);
        }

        public Task<AccountRecordList> GetRegisterRecordsByDepartments(Account account, DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRegisterRecordsByDepartmentsCaller.Call<AccountRecordList>(new object[] { account, dateFrom, dateTo, counteragent, departments }, asyncState, requestTimeout);
        }

        public Task<AccountRecordList> GetRegisterRecordsByPayroll(Guid? payrollId, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRegisterRecordsByPayrollCaller.Call<AccountRecordList>(new object[] { payrollId, employees }, asyncState, requestTimeout);
        }

        public Task<ICollection<AccountingTransaction>> GetTransactionsByDocumentId(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getTransactionsByDocumentIdCaller.Call<ICollection<AccountingTransaction>>(new object[] { documentId }, asyncState, requestTimeout);
        }

        public Task<ICollection<AccountingTransaction>> GetTransactionsById(List<Guid> transactionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getTransactionsByIdCaller.Call<ICollection<AccountingTransaction>>(new object[] { transactionIds }, asyncState, requestTimeout);
        }

        public Task<AccountRecordList> GetVerificationActRecordList(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getVerificationActRecordListCaller.Call<AccountRecordList>(new object[] { dateFrom, dateTo, counteragent, departments }, asyncState, requestTimeout);
        }

        public Task<object> ImportBankStatements(List<BankStatementTransaction> bankStatementTransaction, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return importBankStatementsCaller.Call<object>(new object[] { bankStatementTransaction }, asyncState, requestTimeout);
        }

        public Task<object> SetAccountDeleted(Account account, bool deleted, bool undoDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setAccountDeletedCaller.Call<object>(new object[] { account, deleted, undoDelete }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteOrderType(OrderType orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteOrderTypeCaller.Call<object>(new object[] { orderType }, asyncState, requestTimeout);
        }

        public Task<object> UndeletePayInOutType(PayInOutType payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeletePayInOutTypeCaller.Call<object>(new object[] { payInOutType }, asyncState, requestTimeout);
        }

        public Task<object> UpdateAccount(ByValue<Account> account, decimal? startBalanceSum, DateTime? startBalanceDate, bool? startBalanceChanged, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateAccountCaller.Call<object>(new object[] { account, startBalanceSum, startBalanceDate, startBalanceChanged }, asyncState, requestTimeout);
        }

        public Task<object> UpdateOrderType(ByValue<OrderType> orderType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateOrderTypeCaller.Call<object>(new object[] { orderType }, asyncState, requestTimeout);
        }

        public Task<object> UpdatePayInOutType(ByValue<PayInOutType> payInOutType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePayInOutTypeCaller.Call<object>(new object[] { payInOutType }, asyncState, requestTimeout);
        }

        public Task<object> UpdatePaymentSystem(ByValue<PaymentSystem> paymentSystem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePaymentSystemCaller.Call<object>(new object[] { paymentSystem }, asyncState, requestTimeout);
        }

        public Task<object> UpdatePaymentType(ByValue<PaymentType> paymentType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePaymentTypeCaller.Call<object>(new object[] { paymentType, LocalId }, asyncState, requestTimeout);
        }

        public Task<object> UpdateRegisterRecords(Account account, List<AccountRegisterRecord> recordsToUpdate, List<AccountRegisterRecord> recordsToAdd, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateRegisterRecordsCaller.Call<object>(new object[] { account, recordsToUpdate, recordsToAdd }, asyncState, requestTimeout);
        }

        public Task<object> UpdateRemovalType(ByValue<RemovalType> removalType, int? LocalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateRemovalTypeCaller.Call<object>(new object[] { removalType, LocalId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CashFlowService : ICashFlowService
    {
        private readonly RemoteMethodCaller createCashFlowCategoryCaller;
        private readonly RemoteMethodCaller setCashFlowCategoriesDeletedCaller;
        private readonly RemoteMethodCaller updateCashFlowCategoryCaller;

        internal CashFlowService()
        {

            createCashFlowCategoryCaller = new RemoteMethodCaller("CashFlowService", "createCashFlowCategory");
            createCashFlowCategoryCaller.AddArg("categoryByValue", typeof(ByValue<CashFlowCategory>));

            setCashFlowCategoriesDeletedCaller = new RemoteMethodCaller("CashFlowService", "setCashFlowCategoriesDeleted");
            setCashFlowCategoriesDeletedCaller.AddArg("categories", typeof(ICollection<CashFlowCategory>));
            setCashFlowCategoriesDeletedCaller.AddArg("deleted", typeof(bool));

            updateCashFlowCategoryCaller = new RemoteMethodCaller("CashFlowService", "updateCashFlowCategory");
            updateCashFlowCategoryCaller.AddArg("categoryByValue", typeof(ByValue<CashFlowCategory>));
        }

        #region Synchronous versions
        public IServiceMethodCall<CashFlowCategory> CreateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue)
        {
            return createCashFlowCategoryCaller.CreateCall<CashFlowCategory>(new object[] { categoryByValue });
        }

        public IServiceMethodCall<object> SetCashFlowCategoriesDeleted(ICollection<CashFlowCategory> categories, bool deleted)
        {
            return setCashFlowCategoriesDeletedCaller.CreateCall<object>(new object[] { categories, deleted });
        }

        public IServiceMethodCall<CashFlowCategory> UpdateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue)
        {
            return updateCashFlowCategoryCaller.CreateCall<CashFlowCategory>(new object[] { categoryByValue });
        }

        #endregion

        #region asynchronous version
        public void CreateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, AsyncErrorHandler errorHandler, Action<CashFlowCategory> resultHandler)
        {
            createCashFlowCategoryCaller.CallAsync(new object[] {categoryByValue}, resultHandler, errorHandler);
        }

        public void SetCashFlowCategoriesDeleted(ICollection<CashFlowCategory> categories, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCashFlowCategoriesDeletedCaller.CallAsync(new object[] {categories, deleted}, resultHandler, errorHandler);
        }

        public void UpdateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, AsyncErrorHandler errorHandler, Action<CashFlowCategory> resultHandler)
        {
            updateCashFlowCategoryCaller.CallAsync(new object[] {categoryByValue}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<CashFlowCategory> CreateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createCashFlowCategoryCaller.Call<CashFlowCategory>(new object[] { categoryByValue }, asyncState, requestTimeout);
        }

        public Task<object> SetCashFlowCategoriesDeleted(ICollection<CashFlowCategory> categories, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCashFlowCategoriesDeletedCaller.Call<object>(new object[] { categories, deleted }, asyncState, requestTimeout);
        }

        public Task<CashFlowCategory> UpdateCashFlowCategory(ByValue<CashFlowCategory> categoryByValue, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateCashFlowCategoryCaller.Call<CashFlowCategory>(new object[] { categoryByValue }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class UnpaidDocumentsService : IUnpaidDocumentsService
    {
        private readonly RemoteMethodCaller getAllUnpaidDocumentsCaller;
        private readonly RemoteMethodCaller getAvailableUnpaidDocumentsCaller;
        private readonly RemoteMethodCaller getPaymentTransactionsFilterCaller;
        private readonly RemoteMethodCaller getUnpaidInvoicesByDepartmentsCaller;
        private readonly RemoteMethodCaller getUnpaidOutgoingDocumentsCaller;
        private readonly RemoteMethodCaller getUnpaidSumForAGivenInvoiceCaller;
        private readonly RemoteMethodCaller setPaymentsForInvoicesCaller;
        private readonly RemoteMethodCaller setPaymentsForOutgoingDocumentsCaller;

        internal UnpaidDocumentsService()
        {

            getAllUnpaidDocumentsCaller = new RemoteMethodCaller("UnpaidDocuments", "getAllUnpaidDocuments");
            getAllUnpaidDocumentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllUnpaidDocumentsCaller.AddArg("dateTo", typeof(DateTime?));
            getAllUnpaidDocumentsCaller.AddArg("counterparty", typeof(User));
            getAllUnpaidDocumentsCaller.AddArg("departmentsSet", typeof(HashSet<DepartmentEntity>));
            getAllUnpaidDocumentsCaller.AddArg("useDueDate", typeof(bool));

            getAvailableUnpaidDocumentsCaller = new RemoteMethodCaller("UnpaidDocuments", "getAvailableUnpaidDocuments");
            getAvailableUnpaidDocumentsCaller.AddArg("counterparties", typeof(HashSet<User>));
            getAvailableUnpaidDocumentsCaller.AddArg("departmentsSet", typeof(HashSet<DepartmentEntity>));
            getAvailableUnpaidDocumentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getAvailableUnpaidDocumentsCaller.AddArg("dateTo", typeof(DateTime?));

            getPaymentTransactionsFilterCaller = new RemoteMethodCaller("UnpaidDocuments", "getPaymentTransactionsFilter");
            getPaymentTransactionsFilterCaller.AddArg("documentId", typeof(Guid?));
            getPaymentTransactionsFilterCaller.AddArg("docType", typeof(DocumentType));

            getUnpaidInvoicesByDepartmentsCaller = new RemoteMethodCaller("UnpaidDocuments", "getUnpaidInvoicesByDepartments");
            getUnpaidInvoicesByDepartmentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getUnpaidInvoicesByDepartmentsCaller.AddArg("dateTo", typeof(DateTime?));
            getUnpaidInvoicesByDepartmentsCaller.AddArg("user", typeof(User));
            getUnpaidInvoicesByDepartmentsCaller.AddArg("departmentsSet", typeof(HashSet<DepartmentEntity>));
            getUnpaidInvoicesByDepartmentsCaller.AddArg("useDueDate", typeof(bool));

            getUnpaidOutgoingDocumentsCaller = new RemoteMethodCaller("UnpaidDocuments", "getUnpaidOutgoingDocuments");
            getUnpaidOutgoingDocumentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getUnpaidOutgoingDocumentsCaller.AddArg("dateTo", typeof(DateTime?));
            getUnpaidOutgoingDocumentsCaller.AddArg("counteragent", typeof(User));
            getUnpaidOutgoingDocumentsCaller.AddArg("departmentsSet", typeof(HashSet<DepartmentEntity>));
            getUnpaidOutgoingDocumentsCaller.AddArg("useDueDate", typeof(bool));

            getUnpaidSumForAGivenInvoiceCaller = new RemoteMethodCaller("UnpaidDocuments", "getUnpaidSumForAGivenInvoice");
            getUnpaidSumForAGivenInvoiceCaller.AddArg("user", typeof(User));
            getUnpaidSumForAGivenInvoiceCaller.AddArg("documentId", typeof(Guid?));
            getUnpaidSumForAGivenInvoiceCaller.AddArg("docmentType", typeof(DocumentType));

            setPaymentsForInvoicesCaller = new RemoteMethodCaller("UnpaidDocuments", "setPaymentsForInvoices");
            setPaymentsForInvoicesCaller.AddArg("invoices", typeof(List<InvoicePaymentItem>));
            setPaymentsForInvoicesCaller.AddArg("isConsolidatedReport", typeof(bool));

            setPaymentsForOutgoingDocumentsCaller = new RemoteMethodCaller("UnpaidDocuments", "setPaymentsForOutgoingDocuments");
            setPaymentsForOutgoingDocumentsCaller.AddArg("payments", typeof(List<OutgoingDocumentPaymentItem>));
            setPaymentsForOutgoingDocumentsCaller.AddArg("isConsolidatedReport", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetAllUnpaidDocuments(DateTime? dateFrom, DateTime? dateTo, User counterparty, HashSet<DepartmentEntity> departmentsSet, bool useDueDate)
        {
            return getAllUnpaidDocumentsCaller.CreateCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>(new object[] { dateFrom, dateTo, counterparty, departmentsSet, useDueDate });
        }

        public IServiceMethodCall<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>> GetAvailableUnpaidDocuments(HashSet<User> counterparties, HashSet<DepartmentEntity> departmentsSet, DateTime? dateFrom, DateTime? dateTo)
        {
            return getAvailableUnpaidDocumentsCaller.CreateCall<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>>(new object[] { counterparties, departmentsSet, dateFrom, dateTo });
        }

        public IServiceMethodCall<Dictionary<Account, DateInterval>> GetPaymentTransactionsFilter(Guid? documentId, DocumentType docType)
        {
            return getPaymentTransactionsFilterCaller.CreateCall<Dictionary<Account, DateInterval>>(new object[] { documentId, docType });
        }

        public IServiceMethodCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidInvoicesByDepartments(DateTime? dateFrom, DateTime? dateTo, User user, HashSet<DepartmentEntity> departmentsSet, bool useDueDate)
        {
            return getUnpaidInvoicesByDepartmentsCaller.CreateCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>(new object[] { dateFrom, dateTo, user, departmentsSet, useDueDate });
        }

        public IServiceMethodCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidOutgoingDocuments(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departmentsSet, bool useDueDate)
        {
            return getUnpaidOutgoingDocumentsCaller.CreateCall<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>(new object[] { dateFrom, dateTo, counteragent, departmentsSet, useDueDate });
        }

        public IServiceMethodCall<DocumentPaymentInfo> GetUnpaidSumForAGivenInvoice(User user, Guid? documentId, DocumentType docmentType)
        {
            return getUnpaidSumForAGivenInvoiceCaller.CreateCall<DocumentPaymentInfo>(new object[] { user, documentId, docmentType });
        }

        public IServiceMethodCall<List<AccountingTransaction>> SetPaymentsForInvoices(List<InvoicePaymentItem> invoices, bool isConsolidatedReport)
        {
            return setPaymentsForInvoicesCaller.CreateCall<List<AccountingTransaction>>(new object[] { invoices, isConsolidatedReport });
        }

        public IServiceMethodCall<List<AccountingTransaction>> SetPaymentsForOutgoingDocuments(List<OutgoingDocumentPaymentItem> payments, bool isConsolidatedReport)
        {
            return setPaymentsForOutgoingDocumentsCaller.CreateCall<List<AccountingTransaction>>(new object[] { payments, isConsolidatedReport });
        }

        #endregion

        #region asynchronous version
        public void GetAllUnpaidDocuments(DateTime? dateFrom, DateTime? dateTo, User counterparty, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, AsyncErrorHandler errorHandler, Action<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> resultHandler)
        {
            getAllUnpaidDocumentsCaller.CallAsync(new object[] {dateFrom, dateTo, counterparty, departmentsSet, useDueDate}, resultHandler, errorHandler);
        }

        public void GetAvailableUnpaidDocuments(HashSet<User> counterparties, HashSet<DepartmentEntity> departmentsSet, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>> resultHandler)
        {
            getAvailableUnpaidDocumentsCaller.CallAsync(new object[] {counterparties, departmentsSet, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetPaymentTransactionsFilter(Guid? documentId, DocumentType docType, AsyncErrorHandler errorHandler, Action<Dictionary<Account, DateInterval>> resultHandler)
        {
            getPaymentTransactionsFilterCaller.CallAsync(new object[] {documentId, docType}, resultHandler, errorHandler);
        }

        public void GetUnpaidInvoicesByDepartments(DateTime? dateFrom, DateTime? dateTo, User user, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, AsyncErrorHandler errorHandler, Action<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> resultHandler)
        {
            getUnpaidInvoicesByDepartmentsCaller.CallAsync(new object[] {dateFrom, dateTo, user, departmentsSet, useDueDate}, resultHandler, errorHandler);
        }

        public void GetUnpaidOutgoingDocuments(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, AsyncErrorHandler errorHandler, Action<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> resultHandler)
        {
            getUnpaidOutgoingDocumentsCaller.CallAsync(new object[] {dateFrom, dateTo, counteragent, departmentsSet, useDueDate}, resultHandler, errorHandler);
        }

        public void GetUnpaidSumForAGivenInvoice(User user, Guid? documentId, DocumentType docmentType, AsyncErrorHandler errorHandler, Action<DocumentPaymentInfo> resultHandler)
        {
            getUnpaidSumForAGivenInvoiceCaller.CallAsync(new object[] {user, documentId, docmentType}, resultHandler, errorHandler);
        }

        public void SetPaymentsForInvoices(List<InvoicePaymentItem> invoices, bool isConsolidatedReport, AsyncErrorHandler errorHandler, Action<List<AccountingTransaction>> resultHandler)
        {
            setPaymentsForInvoicesCaller.CallAsync(new object[] {invoices, isConsolidatedReport}, resultHandler, errorHandler);
        }

        public void SetPaymentsForOutgoingDocuments(List<OutgoingDocumentPaymentItem> payments, bool isConsolidatedReport, AsyncErrorHandler errorHandler, Action<List<AccountingTransaction>> resultHandler)
        {
            setPaymentsForOutgoingDocumentsCaller.CallAsync(new object[] {payments, isConsolidatedReport}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetAllUnpaidDocuments(DateTime? dateFrom, DateTime? dateTo, User counterparty, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllUnpaidDocumentsCaller.Call<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>(new object[] { dateFrom, dateTo, counterparty, departmentsSet, useDueDate }, asyncState, requestTimeout);
        }

        public Task<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>> GetAvailableUnpaidDocuments(HashSet<User> counterparties, HashSet<DepartmentEntity> departmentsSet, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAvailableUnpaidDocumentsCaller.Call<Dictionary<User, Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>>(new object[] { counterparties, departmentsSet, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Account, DateInterval>> GetPaymentTransactionsFilter(Guid? documentId, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPaymentTransactionsFilterCaller.Call<Dictionary<Account, DateInterval>>(new object[] { documentId, docType }, asyncState, requestTimeout);
        }

        public Task<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidInvoicesByDepartments(DateTime? dateFrom, DateTime? dateTo, User user, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUnpaidInvoicesByDepartmentsCaller.Call<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>(new object[] { dateFrom, dateTo, user, departmentsSet, useDueDate }, asyncState, requestTimeout);
        }

        public Task<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>> GetUnpaidOutgoingDocuments(DateTime? dateFrom, DateTime? dateTo, User counteragent, HashSet<DepartmentEntity> departmentsSet, bool useDueDate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUnpaidOutgoingDocumentsCaller.Call<Dictionary<AbstractInvoiceDocument, DocumentPaymentInfo>>(new object[] { dateFrom, dateTo, counteragent, departmentsSet, useDueDate }, asyncState, requestTimeout);
        }

        public Task<DocumentPaymentInfo> GetUnpaidSumForAGivenInvoice(User user, Guid? documentId, DocumentType docmentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUnpaidSumForAGivenInvoiceCaller.Call<DocumentPaymentInfo>(new object[] { user, documentId, docmentType }, asyncState, requestTimeout);
        }

        public Task<List<AccountingTransaction>> SetPaymentsForInvoices(List<InvoicePaymentItem> invoices, bool isConsolidatedReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPaymentsForInvoicesCaller.Call<List<AccountingTransaction>>(new object[] { invoices, isConsolidatedReport }, asyncState, requestTimeout);
        }

        public Task<List<AccountingTransaction>> SetPaymentsForOutgoingDocuments(List<OutgoingDocumentPaymentItem> payments, bool isConsolidatedReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPaymentsForOutgoingDocumentsCaller.Call<List<AccountingTransaction>>(new object[] { payments, isConsolidatedReport }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EntitiesService : IEntitiesService
    {
        private readonly RemoteMethodCaller getEntitiesByIdsCaller;
        private readonly RemoteMethodCaller getEntitiesUpdateCaller;
        private readonly RemoteMethodCaller waitEntitiesUpdateCaller;

        internal EntitiesService()
        {

            getEntitiesByIdsCaller = new RemoteMethodCaller("entities", "getEntitiesByIds");
            getEntitiesByIdsCaller.AddArg("ids", typeof(List<Guid>));

            getEntitiesUpdateCaller = new RemoteMethodCaller("entities", "getEntitiesUpdate");
            getEntitiesUpdateCaller.AddArg("fromRevision", typeof(int));
            getEntitiesUpdateCaller.AddArg("classNames", typeof(List<string>));

            waitEntitiesUpdateCaller = new RemoteMethodCaller("entities", "waitEntitiesUpdate");
            waitEntitiesUpdateCaller.AddArg("fromRevision", typeof(int));
            waitEntitiesUpdateCaller.AddArg("timeoutMillis", typeof(int));
            waitEntitiesUpdateCaller.AddArg("classNames", typeof(List<string>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<ByValue<PersistedEntity>>> GetEntitiesByIds(List<Guid> ids)
        {
            return getEntitiesByIdsCaller.CreateCall<ICollection<ByValue<PersistedEntity>>>(new object[] { ids });
        }

        public IServiceMethodCall<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, List<string> classNames)
        {
            return getEntitiesUpdateCaller.CreateCall<EntitiesUpdate>(new object[] { fromRevision, classNames });
        }

        public IServiceMethodCall<EntitiesUpdate> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, List<string> classNames)
        {
            return waitEntitiesUpdateCaller.CreateCall<EntitiesUpdate>(new object[] { fromRevision, timeoutMillis, classNames });
        }

        #endregion

        #region asynchronous version
        public void GetEntitiesByIds(List<Guid> ids, AsyncErrorHandler errorHandler, Action<ICollection<ByValue<PersistedEntity>>> resultHandler)
        {
            getEntitiesByIdsCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void GetEntitiesUpdate(int fromRevision, List<string> classNames, AsyncErrorHandler errorHandler, Action<EntitiesUpdate> resultHandler)
        {
            getEntitiesUpdateCaller.CallAsync(new object[] {fromRevision, classNames}, resultHandler, errorHandler);
        }

        public void WaitEntitiesUpdate(int fromRevision, int timeoutMillis, List<string> classNames, AsyncErrorHandler errorHandler, Action<EntitiesUpdate> resultHandler)
        {
            waitEntitiesUpdateCaller.CallAsync(new object[] {fromRevision, timeoutMillis, classNames}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<ByValue<PersistedEntity>>> GetEntitiesByIds(List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEntitiesByIdsCaller.Call<ICollection<ByValue<PersistedEntity>>>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, List<string> classNames, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEntitiesUpdateCaller.Call<EntitiesUpdate>(new object[] { fromRevision, classNames }, asyncState, requestTimeout);
        }

        public Task<EntitiesUpdate> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, List<string> classNames, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return waitEntitiesUpdateCaller.Call<EntitiesUpdate>(new object[] { fromRevision, timeoutMillis, classNames }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class UpdateService : IUpdateService
    {
        private readonly RemoteMethodCaller getEntitiesUpdateCaller;
        private readonly RemoteMethodCaller waitEntitiesUpdateCaller;

        internal UpdateService()
        {

            getEntitiesUpdateCaller = new RemoteMethodCaller("update", "getEntitiesUpdate");
            getEntitiesUpdateCaller.AddArg("fromRevision", typeof(int));
            getEntitiesUpdateCaller.AddArg("timeoutMillis", typeof(int));
            getEntitiesUpdateCaller.AddArg("useRawEntities", typeof(bool?));

            waitEntitiesUpdateCaller = new RemoteMethodCaller("update", "waitEntitiesUpdate");
            waitEntitiesUpdateCaller.AddArg("fromRevision", typeof(int));
            waitEntitiesUpdateCaller.AddArg("timeoutMillis", typeof(int));
            waitEntitiesUpdateCaller.AddArg("useRawEntities", typeof(bool?));
        }

        #region Synchronous versions
        public IServiceMethodCall<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities)
        {
            return getEntitiesUpdateCaller.CreateCall<EntitiesUpdate>(new object[] { fromRevision, timeoutMillis, useRawEntities });
        }

        public IServiceMethodCall<object> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities)
        {
            return waitEntitiesUpdateCaller.CreateCall<object>(new object[] { fromRevision, timeoutMillis, useRawEntities });
        }

        #endregion

        #region asynchronous version
        public void GetEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, AsyncErrorHandler errorHandler, Action<EntitiesUpdate> resultHandler)
        {
            getEntitiesUpdateCaller.CallAsync(new object[] {fromRevision, timeoutMillis, useRawEntities}, resultHandler, errorHandler);
        }

        public void WaitEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            waitEntitiesUpdateCaller.CallAsync(new object[] {fromRevision, timeoutMillis, useRawEntities}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EntitiesUpdate> GetEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEntitiesUpdateCaller.Call<EntitiesUpdate>(new object[] { fromRevision, timeoutMillis, useRawEntities }, asyncState, requestTimeout);
        }

        public Task<object> WaitEntitiesUpdate(int fromRevision, int timeoutMillis, bool? useRawEntities, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return waitEntitiesUpdateCaller.Call<object>(new object[] { fromRevision, timeoutMillis, useRawEntities }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CompositeUpdateService : ICompositeUpdateService
    {
        private readonly RemoteMethodCaller getBackOfficeNomenclatureUpdateCachedCaller;
        private readonly RemoteMethodCaller getBackOfficeNomenclatureUpdateForcedCaller;
        private readonly RemoteMethodCaller getFrontCompositeUpdateCachedCaller;

        internal CompositeUpdateService()
        {

            getBackOfficeNomenclatureUpdateCachedCaller = new RemoteMethodCaller("compositeUpdate", "getBackOfficeNomenclatureUpdateCached");
            getBackOfficeNomenclatureUpdateCachedCaller.AddArg("revision", typeof(int));
            getBackOfficeNomenclatureUpdateCachedCaller.AddArg("department", typeof(DepartmentEntity));

            getBackOfficeNomenclatureUpdateForcedCaller = new RemoteMethodCaller("compositeUpdate", "getBackOfficeNomenclatureUpdateForced");
            getBackOfficeNomenclatureUpdateForcedCaller.AddArg("revision", typeof(int));
            getBackOfficeNomenclatureUpdateForcedCaller.AddArg("department", typeof(DepartmentEntity));

            getFrontCompositeUpdateCachedCaller = new RemoteMethodCaller("compositeUpdate", "getFrontCompositeUpdateCached");
            getFrontCompositeUpdateCachedCaller.AddArg("revision", typeof(int));
        }

        #region Synchronous versions
        public IServiceMethodCall<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateCached(int revision, DepartmentEntity department)
        {
            return getBackOfficeNomenclatureUpdateCachedCaller.CreateCall<BackOfficeNomenclatureUpdate>(new object[] { revision, department });
        }

        public IServiceMethodCall<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateForced(int revision, DepartmentEntity department)
        {
            return getBackOfficeNomenclatureUpdateForcedCaller.CreateCall<BackOfficeNomenclatureUpdate>(new object[] { revision, department });
        }

        public IServiceMethodCall<FrontCompositeUpdate> GetFrontCompositeUpdateCached(int revision)
        {
            return getFrontCompositeUpdateCachedCaller.CreateCall<FrontCompositeUpdate>(new object[] { revision });
        }

        #endregion

        #region asynchronous version
        public void GetBackOfficeNomenclatureUpdateCached(int revision, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<BackOfficeNomenclatureUpdate> resultHandler)
        {
            getBackOfficeNomenclatureUpdateCachedCaller.CallAsync(new object[] {revision, department}, resultHandler, errorHandler);
        }

        public void GetBackOfficeNomenclatureUpdateForced(int revision, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<BackOfficeNomenclatureUpdate> resultHandler)
        {
            getBackOfficeNomenclatureUpdateForcedCaller.CallAsync(new object[] {revision, department}, resultHandler, errorHandler);
        }

        public void GetFrontCompositeUpdateCached(int revision, AsyncErrorHandler errorHandler, Action<FrontCompositeUpdate> resultHandler)
        {
            getFrontCompositeUpdateCachedCaller.CallAsync(new object[] {revision}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateCached(int revision, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBackOfficeNomenclatureUpdateCachedCaller.Call<BackOfficeNomenclatureUpdate>(new object[] { revision, department }, asyncState, requestTimeout);
        }

        public Task<BackOfficeNomenclatureUpdate> GetBackOfficeNomenclatureUpdateForced(int revision, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBackOfficeNomenclatureUpdateForcedCaller.Call<BackOfficeNomenclatureUpdate>(new object[] { revision, department }, asyncState, requestTimeout);
        }

        public Task<FrontCompositeUpdate> GetFrontCompositeUpdateCached(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getFrontCompositeUpdateCachedCaller.Call<FrontCompositeUpdate>(new object[] { revision }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DocumentGroupOperationService : IDocumentGroupOperationService
    {
        private readonly RemoteMethodCaller deleteIncomingDocumentsCaller;
        private readonly RemoteMethodCaller processDocumentsCaller;
        private readonly RemoteMethodCaller unDeleteIncomingDocumentsCaller;
        private readonly RemoteMethodCaller undoProcessDocumentsCaller;
        private readonly RemoteMethodCaller updateDocumentsCaller;

        internal DocumentGroupOperationService()
        {

            deleteIncomingDocumentsCaller = new RemoteMethodCaller("documentGroupOperation", "deleteIncomingDocuments");
            deleteIncomingDocumentsCaller.AddArg("documentIds", typeof(Dictionary<Guid, DocumentType>));

            processDocumentsCaller = new RemoteMethodCaller("documentGroupOperation", "processDocuments");
            processDocumentsCaller.AddArg("documentIds", typeof(Dictionary<Guid, DocumentType>));

            unDeleteIncomingDocumentsCaller = new RemoteMethodCaller("documentGroupOperation", "unDeleteIncomingDocuments");
            unDeleteIncomingDocumentsCaller.AddArg("documentIds", typeof(Dictionary<Guid, DocumentType>));

            undoProcessDocumentsCaller = new RemoteMethodCaller("documentGroupOperation", "undoProcessDocuments");
            undoProcessDocumentsCaller.AddArg("documentIds", typeof(Dictionary<Guid, DocumentType>));

            updateDocumentsCaller = new RemoteMethodCaller("documentGroupOperation", "updateDocuments");
            updateDocumentsCaller.AddArg("documents", typeof(List<AbstractDocument>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> DeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds)
        {
            return deleteIncomingDocumentsCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> ProcessDocuments(Dictionary<Guid, DocumentType> documentIds)
        {
            return processDocumentsCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UnDeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds)
        {
            return unDeleteIncomingDocumentsCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UndoProcessDocuments(Dictionary<Guid, DocumentType> documentIds)
        {
            return undoProcessDocumentsCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UpdateDocuments(List<AbstractDocument> documents)
        {
            return updateDocumentsCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { documents });
        }

        #endregion

        #region asynchronous version
        public void DeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            deleteIncomingDocumentsCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void ProcessDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            processDocumentsCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void UnDeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            unDeleteIncomingDocumentsCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void UndoProcessDocuments(Dictionary<Guid, DocumentType> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            undoProcessDocumentsCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void UpdateDocuments(List<AbstractDocument> documents, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            updateDocumentsCaller.CallAsync(new object[] {documents}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<Guid, DocumentValidationResult>> DeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteIncomingDocumentsCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> ProcessDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return processDocumentsCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> UnDeleteIncomingDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unDeleteIncomingDocumentsCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> UndoProcessDocuments(Dictionary<Guid, DocumentType> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undoProcessDocumentsCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> UpdateDocuments(List<AbstractDocument> documents, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDocumentsCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { documents }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DocumentService : IDocumentService
    {
        private readonly RemoteMethodCaller deleteIncomingDocumentCaller;
        private readonly RemoteMethodCaller duplicateAndProcessNontypedDocumentsByIdsCaller;
        private readonly RemoteMethodCaller duplicateDocumentCaller;
        private readonly RemoteMethodCaller existUnprocessedSalesDocumentsCaller;
        private readonly RemoteMethodCaller generateDocumentsForSessionsCaller;
        private readonly RemoteMethodCaller getAbstractDocumentCaller;
        private readonly RemoteMethodCaller getAbstractDocumentsCaller;
        private readonly RemoteMethodCaller getDeliveryAddressesCaller;
        private readonly RemoteMethodCaller getDocumentCaller;
        private readonly RemoteMethodCaller getDocumentItemsCostsCaller;
        private readonly RemoteMethodCaller getDocumentItemsPricingCaller;
        private readonly RemoteMethodCaller getDocumentTransactionsCaller;
        private readonly RemoteMethodCaller getDocumentsCaller;
        private readonly RemoteMethodCaller getDocumentsByIdsCaller;
        private readonly RemoteMethodCaller getDocumentsByTypeListCaller;
        private readonly RemoteMethodCaller getDocumentsByTypesCaller;
        private readonly RemoteMethodCaller getDocumentsItemsCostsCaller;
        private readonly RemoteMethodCaller getDocumentsStoresByIdsCaller;
        private readonly RemoteMethodCaller getDocumentsTransactionsCaller;
        private readonly RemoteMethodCaller getIncomingDocumentsRecordsCaller;
        private readonly RemoteMethodCaller getIncomingDocumentsRecordsByDepartmentsCaller;
        private readonly RemoteMethodCaller getIncomingDocumentsRecordsByIdsCaller;
        private readonly RemoteMethodCaller getIncomingDocumentsRecordsByParamsCaller;
        private readonly RemoteMethodCaller getInvoiceDocumentSimpleRecordsCaller;
        private readonly RemoteMethodCaller getLinkedOutgoingInvoiceIdByIncomingCaller;
        private readonly RemoteMethodCaller getNewDocumentNumberCaller;
        private readonly RemoteMethodCaller getNextDocumentNumberCaller;
        private readonly RemoteMethodCaller getNextDocumentNumbersCaller;
        private readonly RemoteMethodCaller getNumberingAutoIncrementValuesCaller;
        private readonly RemoteMethodCaller isAccountingOnlyInChainCaller;
        private readonly RemoteMethodCaller saveDocumentNumberWithValidationCaller;
        private readonly RemoteMethodCaller saveOrUpdateDocumentCaller;
        private readonly RemoteMethodCaller saveOrUpdateDocumentWithValidationCaller;
        private readonly RemoteMethodCaller saveOrUpdateNumberingSettingsCaller;
        private readonly RemoteMethodCaller setNumberingAutoIncrementValuesCaller;
        private readonly RemoteMethodCaller unDeleteIncomingDocumentCaller;
        private readonly RemoteMethodCaller undoProcessDocumentCaller;
        private readonly RemoteMethodCaller updateDefaultInvoiceAccountsCaller;
        private readonly RemoteMethodCaller updateReportOfQualitySettingsCaller;
        private readonly RemoteMethodCaller validateAutomaticNotProcessedDocumentsAbsenceCaller;
        private readonly RemoteMethodCaller validateDocumentNumberCaller;

        internal DocumentService()
        {

            deleteIncomingDocumentCaller = new RemoteMethodCaller("document", "deleteIncomingDocument");
            deleteIncomingDocumentCaller.AddArg("documentId", typeof(Guid?));
            deleteIncomingDocumentCaller.AddArg("docType", typeof(DocumentType));

            duplicateAndProcessNontypedDocumentsByIdsCaller = new RemoteMethodCaller("document", "duplicateAndProcessNontypedDocumentsByIds");
            duplicateAndProcessNontypedDocumentsByIdsCaller.AddArg("oldDocuments", typeof(ICollection<Guid>));
            duplicateAndProcessNontypedDocumentsByIdsCaller.AddArg("storesMapping", typeof(Dictionary<Store, Store>));

            duplicateDocumentCaller = new RemoteMethodCaller("document", "duplicateDocument");
            duplicateDocumentCaller.AddArg("type", typeof(DocumentType));
            duplicateDocumentCaller.AddArg("documentId", typeof(Guid?));

            existUnprocessedSalesDocumentsCaller = new RemoteMethodCaller("document", "existUnprocessedSalesDocuments");
            existUnprocessedSalesDocumentsCaller.AddArg("dateFrom", typeof(DateTime?));
            existUnprocessedSalesDocumentsCaller.AddArg("dateTo", typeof(DateTime?));
            existUnprocessedSalesDocumentsCaller.AddArg("stores", typeof(HashSet<Store>));

            generateDocumentsForSessionsCaller = new RemoteMethodCaller("document", "generateDocumentsForSessions");
            generateDocumentsForSessionsCaller.AddArg("sessionIds", typeof(ICollection<Guid>));

            getAbstractDocumentCaller = new RemoteMethodCaller("document", "getAbstractDocument");
            getAbstractDocumentCaller.AddArg("id", typeof(Guid?));

            getAbstractDocumentsCaller = new RemoteMethodCaller("document", "getAbstractDocuments");
            getAbstractDocumentsCaller.AddArg("documentIds", typeof(ICollection<Guid>));

            getDeliveryAddressesCaller = new RemoteMethodCaller("document", "getDeliveryAddresses");
            getDeliveryAddressesCaller.AddArg("outgoingInvoices", typeof(ICollection<Guid>));

            getDocumentCaller = new RemoteMethodCaller("document", "getDocument");
            getDocumentCaller.AddArg("docType", typeof(DocumentType));
            getDocumentCaller.AddArg("id", typeof(Guid?));

            getDocumentItemsCostsCaller = new RemoteMethodCaller("document", "getDocumentItemsCosts");
            getDocumentItemsCostsCaller.AddArg("documentId", typeof(Guid?));

            getDocumentItemsPricingCaller = new RemoteMethodCaller("document", "getDocumentItemsPricing");
            getDocumentItemsPricingCaller.AddArg("documentId", typeof(Guid?));
            getDocumentItemsPricingCaller.AddArg("pricingParameters", typeof(PricingParameters));

            getDocumentTransactionsCaller = new RemoteMethodCaller("document", "getDocumentTransactions");
            getDocumentTransactionsCaller.AddArg("documentId", typeof(Guid?));
            getDocumentTransactionsCaller.AddArg("documentItemIds", typeof(HashSet<Guid>));

            getDocumentsCaller = new RemoteMethodCaller("document", "getDocuments");
            getDocumentsCaller.AddArg("docType", typeof(DocumentType));
            getDocumentsCaller.AddArg("ids", typeof(List<Guid>));

            getDocumentsByIdsCaller = new RemoteMethodCaller("document", "getDocumentsByIds");
            getDocumentsByIdsCaller.AddArg("oldDocuments", typeof(ICollection<Guid>));

            getDocumentsByTypeListCaller = new RemoteMethodCaller("document", "getDocumentsByTypeList");
            getDocumentsByTypeListCaller.AddArg("docTypes", typeof(List<DocumentType>));
            getDocumentsByTypeListCaller.AddArg("ids", typeof(List<Guid>));

            getDocumentsByTypesCaller = new RemoteMethodCaller("document", "getDocumentsByTypes");
            getDocumentsByTypesCaller.AddArg("typeIds", typeof(Dictionary<DocumentType, List<Guid>>));

            getDocumentsItemsCostsCaller = new RemoteMethodCaller("document", "getDocumentsItemsCosts");
            getDocumentsItemsCostsCaller.AddArg("documentsIds", typeof(List<Guid>));

            getDocumentsStoresByIdsCaller = new RemoteMethodCaller("document", "getDocumentsStoresByIds");
            getDocumentsStoresByIdsCaller.AddArg("documents", typeof(ICollection<Guid>));

            getDocumentsTransactionsCaller = new RemoteMethodCaller("document", "getDocumentsTransactions");
            getDocumentsTransactionsCaller.AddArg("documentIds", typeof(ICollection<Guid>));

            getIncomingDocumentsRecordsCaller = new RemoteMethodCaller("document", "getIncomingDocumentsRecords");
            getIncomingDocumentsRecordsCaller.AddArg("dateFrom", typeof(DateTime?));
            getIncomingDocumentsRecordsCaller.AddArg("dateTo", typeof(DateTime?));
            getIncomingDocumentsRecordsCaller.AddArg("docType", typeof(DocumentType));

            getIncomingDocumentsRecordsByDepartmentsCaller = new RemoteMethodCaller("document", "getIncomingDocumentsRecordsByDepartments");
            getIncomingDocumentsRecordsByDepartmentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getIncomingDocumentsRecordsByDepartmentsCaller.AddArg("dateTo", typeof(DateTime?));
            getIncomingDocumentsRecordsByDepartmentsCaller.AddArg("docType", typeof(DocumentType));
            getIncomingDocumentsRecordsByDepartmentsCaller.AddArg("departmentsSet", typeof(HashSet<DepartmentEntity>));

            getIncomingDocumentsRecordsByIdsCaller = new RemoteMethodCaller("document", "getIncomingDocumentsRecordsByIds");
            getIncomingDocumentsRecordsByIdsCaller.AddArg("docType", typeof(DocumentType));
            getIncomingDocumentsRecordsByIdsCaller.AddArg("ids", typeof(List<Guid>));

            getIncomingDocumentsRecordsByParamsCaller = new RemoteMethodCaller("document", "getIncomingDocumentsRecordsByParams");
            getIncomingDocumentsRecordsByParamsCaller.AddArg("dateFrom", typeof(DateTime?));
            getIncomingDocumentsRecordsByParamsCaller.AddArg("dateTo", typeof(DateTime?));
            getIncomingDocumentsRecordsByParamsCaller.AddArg("docType", typeof(HashSet<DocumentType>));
            getIncomingDocumentsRecordsByParamsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getIncomingDocumentsRecordsByParamsCaller.AddArg("statuses", typeof(HashSet<DocumentStatus>));
            getIncomingDocumentsRecordsByParamsCaller.AddArg("withAlcoholClassOnly", typeof(bool));

            getInvoiceDocumentSimpleRecordsCaller = new RemoteMethodCaller("document", "getInvoiceDocumentSimpleRecords");
            getInvoiceDocumentSimpleRecordsCaller.AddArg("dateFrom", typeof(DateTime?));
            getInvoiceDocumentSimpleRecordsCaller.AddArg("dateTo", typeof(DateTime?));
            getInvoiceDocumentSimpleRecordsCaller.AddArg("documentType", typeof(DocumentType));
            getInvoiceDocumentSimpleRecordsCaller.AddArg("statuses", typeof(ICollection<DocumentStatus>));
            getInvoiceDocumentSimpleRecordsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getInvoiceDocumentSimpleRecordsCaller.AddArg("onlyWithSupplier", typeof(bool));

            getLinkedOutgoingInvoiceIdByIncomingCaller = new RemoteMethodCaller("document", "getLinkedOutgoingInvoiceIdByIncoming");
            getLinkedOutgoingInvoiceIdByIncomingCaller.AddArg("incomingInvoiceId", typeof(Guid?));

            getNewDocumentNumberCaller = new RemoteMethodCaller("document", "getNewDocumentNumber");
            getNewDocumentNumberCaller.AddArg("document", typeof(AbstractDocument));

            getNextDocumentNumberCaller = new RemoteMethodCaller("document", "getNextDocumentNumber");
            getNextDocumentNumberCaller.AddArg("documentType", typeof(DocumentType));

            getNextDocumentNumbersCaller = new RemoteMethodCaller("document", "getNextDocumentNumbers");
            getNextDocumentNumbersCaller.AddArg("documentType", typeof(DocumentType));
            getNextDocumentNumbersCaller.AddArg("documentCount", typeof(int));

            getNumberingAutoIncrementValuesCaller = new RemoteMethodCaller("document", "getNumberingAutoIncrementValues");

            isAccountingOnlyInChainCaller = new RemoteMethodCaller("document", "isAccountingOnlyInChain");

            saveDocumentNumberWithValidationCaller = new RemoteMethodCaller("document", "saveDocumentNumberWithValidation");
            saveDocumentNumberWithValidationCaller.AddArg("stubDocument", typeof(StubDocument));

            saveOrUpdateDocumentCaller = new RemoteMethodCaller("document", "saveOrUpdateDocument");
            saveOrUpdateDocumentCaller.AddArg("document", typeof(AbstractDocument));
            saveOrUpdateDocumentCaller.AddArg("suppressWarnings", typeof(ICollection<ValidationWarning>));

            saveOrUpdateDocumentWithValidationCaller = new RemoteMethodCaller("document", "saveOrUpdateDocumentWithValidation");
            saveOrUpdateDocumentWithValidationCaller.AddArg("document", typeof(AbstractDocument));
            saveOrUpdateDocumentWithValidationCaller.AddArg("suppressWarnings", typeof(ICollection<ValidationWarning>));

            saveOrUpdateNumberingSettingsCaller = new RemoteMethodCaller("document", "saveOrUpdateNumberingSettings");
            saveOrUpdateNumberingSettingsCaller.AddArg("settings", typeof(ICollection<ByValue<DocumentNumberingSettings>>));

            setNumberingAutoIncrementValuesCaller = new RemoteMethodCaller("document", "setNumberingAutoIncrementValues");
            setNumberingAutoIncrementValuesCaller.AddArg("Values", typeof(ICollection<DocumentNumberingAutoincrementValues>));

            unDeleteIncomingDocumentCaller = new RemoteMethodCaller("document", "unDeleteIncomingDocument");
            unDeleteIncomingDocumentCaller.AddArg("documentId", typeof(Guid?));
            unDeleteIncomingDocumentCaller.AddArg("docType", typeof(DocumentType));

            undoProcessDocumentCaller = new RemoteMethodCaller("document", "undoProcessDocument");
            undoProcessDocumentCaller.AddArg("documentId", typeof(Guid?));
            undoProcessDocumentCaller.AddArg("documentType", typeof(DocumentType));

            updateDefaultInvoiceAccountsCaller = new RemoteMethodCaller("document", "updateDefaultInvoiceAccounts");
            updateDefaultInvoiceAccountsCaller.AddArg("revenueAccount", typeof(Account));
            updateDefaultInvoiceAccountsCaller.AddArg("accountTo", typeof(Account));

            updateReportOfQualitySettingsCaller = new RemoteMethodCaller("document", "updateReportOfQualitySettings");
            updateReportOfQualitySettingsCaller.AddArg("setting", typeof(ReportOfQualitySettings));

            validateAutomaticNotProcessedDocumentsAbsenceCaller = new RemoteMethodCaller("document", "validateAutomaticNotProcessedDocumentsAbsence");
            validateAutomaticNotProcessedDocumentsAbsenceCaller.AddArg("dateFrom", typeof(DateTime?));

            validateDocumentNumberCaller = new RemoteMethodCaller("document", "validateDocumentNumber");
            validateDocumentNumberCaller.AddArg("document", typeof(AbstractDocument));
        }

        #region Synchronous versions
        public IServiceMethodCall<bool?> DeleteIncomingDocument(Guid? documentId, DocumentType docType)
        {
            return deleteIncomingDocumentCaller.CreateCall<bool?>(new object[] { documentId, docType });
        }

        public IServiceMethodCall<object> DuplicateAndProcessNontypedDocumentsByIds(ICollection<Guid> oldDocuments, Dictionary<Store, Store> storesMapping)
        {
            return duplicateAndProcessNontypedDocumentsByIdsCaller.CreateCall<object>(new object[] { oldDocuments, storesMapping });
        }

        public IServiceMethodCall<AbstractDocument> DuplicateDocument(DocumentType type, Guid? documentId)
        {
            return duplicateDocumentCaller.CreateCall<AbstractDocument>(new object[] { type, documentId });
        }

        public IServiceMethodCall<bool> ExistUnprocessedSalesDocuments(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores)
        {
            return existUnprocessedSalesDocumentsCaller.CreateCall<bool>(new object[] { dateFrom, dateTo, stores });
        }

        public IServiceMethodCall<ICollection<PartiallyProcessableDocument>> GenerateDocumentsForSessions(ICollection<Guid> sessionIds)
        {
            return generateDocumentsForSessionsCaller.CreateCall<ICollection<PartiallyProcessableDocument>>(new object[] { sessionIds });
        }

        public IServiceMethodCall<AbstractDocument> GetAbstractDocument(Guid? id)
        {
            return getAbstractDocumentCaller.CreateCall<AbstractDocument>(new object[] { id });
        }

        public IServiceMethodCall<ICollection<AbstractDocument>> GetAbstractDocuments(ICollection<Guid> documentIds)
        {
            return getAbstractDocumentsCaller.CreateCall<ICollection<AbstractDocument>>(new object[] { documentIds });
        }

        public IServiceMethodCall<Dictionary<Guid, string>> GetDeliveryAddresses(ICollection<Guid> outgoingInvoices)
        {
            return getDeliveryAddressesCaller.CreateCall<Dictionary<Guid, string>>(new object[] { outgoingInvoices });
        }

        public IServiceMethodCall<AbstractDocument> GetDocument(DocumentType docType, Guid? id)
        {
            return getDocumentCaller.CreateCall<AbstractDocument>(new object[] { docType, id });
        }

        public IServiceMethodCall<Dictionary<Guid, decimal>> GetDocumentItemsCosts(Guid? documentId)
        {
            return getDocumentItemsCostsCaller.CreateCall<Dictionary<Guid, decimal>>(new object[] { documentId });
        }

        public IServiceMethodCall<Dictionary<Guid, PricingInfo>> GetDocumentItemsPricing(Guid? documentId, PricingParameters pricingParameters)
        {
            return getDocumentItemsPricingCaller.CreateCall<Dictionary<Guid, PricingInfo>>(new object[] { documentId, pricingParameters });
        }

        public IServiceMethodCall<List<StoreTransactionInfo>> GetDocumentTransactions(Guid? documentId, HashSet<Guid> documentItemIds)
        {
            return getDocumentTransactionsCaller.CreateCall<List<StoreTransactionInfo>>(new object[] { documentId, documentItemIds });
        }

        public IServiceMethodCall<List<AbstractDocument>> GetDocuments(DocumentType docType, List<Guid> ids)
        {
            return getDocumentsCaller.CreateCall<List<AbstractDocument>>(new object[] { docType, ids });
        }

        public IServiceMethodCall<ICollection<AbstractStoreDocument>> GetDocumentsByIds(ICollection<Guid> oldDocuments)
        {
            return getDocumentsByIdsCaller.CreateCall<ICollection<AbstractStoreDocument>>(new object[] { oldDocuments });
        }

        public IServiceMethodCall<List<AbstractDocument>> GetDocumentsByTypeList(List<DocumentType> docTypes, List<Guid> ids)
        {
            return getDocumentsByTypeListCaller.CreateCall<List<AbstractDocument>>(new object[] { docTypes, ids });
        }

        public IServiceMethodCall<Dictionary<DocumentType, List<AbstractDocument>>> GetDocumentsByTypes(Dictionary<DocumentType, List<Guid>> typeIds)
        {
            return getDocumentsByTypesCaller.CreateCall<Dictionary<DocumentType, List<AbstractDocument>>>(new object[] { typeIds });
        }

        public IServiceMethodCall<Dictionary<Guid, decimal>> GetDocumentsItemsCosts(List<Guid> documentsIds)
        {
            return getDocumentsItemsCostsCaller.CreateCall<Dictionary<Guid, decimal>>(new object[] { documentsIds });
        }

        public IServiceMethodCall<ICollection<Store>> GetDocumentsStoresByIds(ICollection<Guid> documents)
        {
            return getDocumentsStoresByIdsCaller.CreateCall<ICollection<Store>>(new object[] { documents });
        }

        public IServiceMethodCall<Dictionary<Guid, List<StoreTransactionInfo>>> GetDocumentsTransactions(ICollection<Guid> documentIds)
        {
            return getDocumentsTransactionsCaller.CreateCall<Dictionary<Guid, List<StoreTransactionInfo>>>(new object[] { documentIds });
        }

        public IServiceMethodCall<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType docType)
        {
            return getIncomingDocumentsRecordsCaller.CreateCall<List<AbstractDocumentListRecord>>(new object[] { dateFrom, dateTo, docType });
        }

        public IServiceMethodCall<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByDepartments(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, HashSet<DepartmentEntity> departmentsSet)
        {
            return getIncomingDocumentsRecordsByDepartmentsCaller.CreateCall<List<AbstractDocumentListRecord>>(new object[] { dateFrom, dateTo, docType, departmentsSet });
        }

        public IServiceMethodCall<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByIds(DocumentType docType, List<Guid> ids)
        {
            return getIncomingDocumentsRecordsByIdsCaller.CreateCall<List<AbstractDocumentListRecord>>(new object[] { docType, ids });
        }

        public IServiceMethodCall<Dictionary<DocumentType, List<AbstractDocumentListRecord>>> GetIncomingDocumentsRecordsByParams(DateTime? dateFrom, DateTime? dateTo, HashSet<DocumentType> docType, HashSet<DepartmentEntity> departments, HashSet<DocumentStatus> statuses, bool withAlcoholClassOnly)
        {
            return getIncomingDocumentsRecordsByParamsCaller.CreateCall<Dictionary<DocumentType, List<AbstractDocumentListRecord>>>(new object[] { dateFrom, dateTo, docType, departments, statuses, withAlcoholClassOnly });
        }

        public IServiceMethodCall<List<InvoiceDocumentSimpleListRecord>> GetInvoiceDocumentSimpleRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType documentType, ICollection<DocumentStatus> statuses, HashSet<DepartmentEntity> departments, bool onlyWithSupplier)
        {
            return getInvoiceDocumentSimpleRecordsCaller.CreateCall<List<InvoiceDocumentSimpleListRecord>>(new object[] { dateFrom, dateTo, documentType, statuses, departments, onlyWithSupplier });
        }

        public IServiceMethodCall<Guid?> GetLinkedOutgoingInvoiceIdByIncoming(Guid? incomingInvoiceId)
        {
            return getLinkedOutgoingInvoiceIdByIncomingCaller.CreateCall<Guid?>(new object[] { incomingInvoiceId });
        }

        public IServiceMethodCall<string> GetNewDocumentNumber(AbstractDocument document)
        {
            return getNewDocumentNumberCaller.CreateCall<string>(new object[] { document });
        }

        public IServiceMethodCall<string> GetNextDocumentNumber(DocumentType documentType)
        {
            return getNextDocumentNumberCaller.CreateCall<string>(new object[] { documentType });
        }

        public IServiceMethodCall<List<string>> GetNextDocumentNumbers(DocumentType documentType, int documentCount)
        {
            return getNextDocumentNumbersCaller.CreateCall<List<string>>(new object[] { documentType, documentCount });
        }

        public IServiceMethodCall<ICollection<DocumentNumberingAutoincrementValues>> GetNumberingAutoIncrementValues()
        {
            return getNumberingAutoIncrementValuesCaller.CreateCall<ICollection<DocumentNumberingAutoincrementValues>>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsAccountingOnlyInChain()
        {
            return isAccountingOnlyInChainCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<DocumentValidationResult> SaveDocumentNumberWithValidation(StubDocument stubDocument)
        {
            return saveDocumentNumberWithValidationCaller.CreateCall<DocumentValidationResult>(new object[] { stubDocument });
        }

        public IServiceMethodCall<DocumentValidationResult> SaveOrUpdateDocument(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings)
        {
            return saveOrUpdateDocumentCaller.CreateCall<DocumentValidationResult>(new object[] { document, suppressWarnings });
        }

        public IServiceMethodCall<DocumentValidationResult> SaveOrUpdateDocumentWithValidation(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings)
        {
            return saveOrUpdateDocumentWithValidationCaller.CreateCall<DocumentValidationResult>(new object[] { document, suppressWarnings });
        }

        public IServiceMethodCall<object> SaveOrUpdateNumberingSettings(ICollection<ByValue<DocumentNumberingSettings>> settings)
        {
            return saveOrUpdateNumberingSettingsCaller.CreateCall<object>(new object[] { settings });
        }

        public IServiceMethodCall<object> SetNumberingAutoIncrementValues(ICollection<DocumentNumberingAutoincrementValues> Values)
        {
            return setNumberingAutoIncrementValuesCaller.CreateCall<object>(new object[] { Values });
        }

        public IServiceMethodCall<object> UnDeleteIncomingDocument(Guid? documentId, DocumentType docType)
        {
            return unDeleteIncomingDocumentCaller.CreateCall<object>(new object[] { documentId, docType });
        }

        public IServiceMethodCall<object> UndoProcessDocument(Guid? documentId, DocumentType documentType)
        {
            return undoProcessDocumentCaller.CreateCall<object>(new object[] { documentId, documentType });
        }

        public IServiceMethodCall<object> UpdateDefaultInvoiceAccounts(Account revenueAccount, Account accountTo)
        {
            return updateDefaultInvoiceAccountsCaller.CreateCall<object>(new object[] { revenueAccount, accountTo });
        }

        public IServiceMethodCall<object> UpdateReportOfQualitySettings(ReportOfQualitySettings setting)
        {
            return updateReportOfQualitySettingsCaller.CreateCall<object>(new object[] { setting });
        }

        public IServiceMethodCall<DocumentValidationResult> ValidateAutomaticNotProcessedDocumentsAbsence(DateTime? dateFrom)
        {
            return validateAutomaticNotProcessedDocumentsAbsenceCaller.CreateCall<DocumentValidationResult>(new object[] { dateFrom });
        }

        public IServiceMethodCall<DocumentValidationResult> ValidateDocumentNumber(AbstractDocument document)
        {
            return validateDocumentNumberCaller.CreateCall<DocumentValidationResult>(new object[] { document });
        }

        #endregion

        #region asynchronous version
        public void DeleteIncomingDocument(Guid? documentId, DocumentType docType, AsyncErrorHandler errorHandler, Action<bool?> resultHandler)
        {
            deleteIncomingDocumentCaller.CallAsync(new object[] {documentId, docType}, resultHandler, errorHandler);
        }

        public void DuplicateAndProcessNontypedDocumentsByIds(ICollection<Guid> oldDocuments, Dictionary<Store, Store> storesMapping, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            duplicateAndProcessNontypedDocumentsByIdsCaller.CallAsync(new object[] {oldDocuments, storesMapping}, resultHandler, errorHandler);
        }

        public void DuplicateDocument(DocumentType type, Guid? documentId, AsyncErrorHandler errorHandler, Action<AbstractDocument> resultHandler)
        {
            duplicateDocumentCaller.CallAsync(new object[] {type, documentId}, resultHandler, errorHandler);
        }

        public void ExistUnprocessedSalesDocuments(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            existUnprocessedSalesDocumentsCaller.CallAsync(new object[] {dateFrom, dateTo, stores}, resultHandler, errorHandler);
        }

        public void GenerateDocumentsForSessions(ICollection<Guid> sessionIds, AsyncErrorHandler errorHandler, Action<ICollection<PartiallyProcessableDocument>> resultHandler)
        {
            generateDocumentsForSessionsCaller.CallAsync(new object[] {sessionIds}, resultHandler, errorHandler);
        }

        public void GetAbstractDocument(Guid? id, AsyncErrorHandler errorHandler, Action<AbstractDocument> resultHandler)
        {
            getAbstractDocumentCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void GetAbstractDocuments(ICollection<Guid> documentIds, AsyncErrorHandler errorHandler, Action<ICollection<AbstractDocument>> resultHandler)
        {
            getAbstractDocumentsCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void GetDeliveryAddresses(ICollection<Guid> outgoingInvoices, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, string>> resultHandler)
        {
            getDeliveryAddressesCaller.CallAsync(new object[] {outgoingInvoices}, resultHandler, errorHandler);
        }

        public void GetDocument(DocumentType docType, Guid? id, AsyncErrorHandler errorHandler, Action<AbstractDocument> resultHandler)
        {
            getDocumentCaller.CallAsync(new object[] {docType, id}, resultHandler, errorHandler);
        }

        public void GetDocumentItemsCosts(Guid? documentId, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, decimal>> resultHandler)
        {
            getDocumentItemsCostsCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        public void GetDocumentItemsPricing(Guid? documentId, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, PricingInfo>> resultHandler)
        {
            getDocumentItemsPricingCaller.CallAsync(new object[] {documentId, pricingParameters}, resultHandler, errorHandler);
        }

        public void GetDocumentTransactions(Guid? documentId, HashSet<Guid> documentItemIds, AsyncErrorHandler errorHandler, Action<List<StoreTransactionInfo>> resultHandler)
        {
            getDocumentTransactionsCaller.CallAsync(new object[] {documentId, documentItemIds}, resultHandler, errorHandler);
        }

        public void GetDocuments(DocumentType docType, List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler)
        {
            getDocumentsCaller.CallAsync(new object[] {docType, ids}, resultHandler, errorHandler);
        }

        public void GetDocumentsByIds(ICollection<Guid> oldDocuments, AsyncErrorHandler errorHandler, Action<ICollection<AbstractStoreDocument>> resultHandler)
        {
            getDocumentsByIdsCaller.CallAsync(new object[] {oldDocuments}, resultHandler, errorHandler);
        }

        public void GetDocumentsByTypeList(List<DocumentType> docTypes, List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler)
        {
            getDocumentsByTypeListCaller.CallAsync(new object[] {docTypes, ids}, resultHandler, errorHandler);
        }

        public void GetDocumentsByTypes(Dictionary<DocumentType, List<Guid>> typeIds, AsyncErrorHandler errorHandler, Action<Dictionary<DocumentType, List<AbstractDocument>>> resultHandler)
        {
            getDocumentsByTypesCaller.CallAsync(new object[] {typeIds}, resultHandler, errorHandler);
        }

        public void GetDocumentsItemsCosts(List<Guid> documentsIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, decimal>> resultHandler)
        {
            getDocumentsItemsCostsCaller.CallAsync(new object[] {documentsIds}, resultHandler, errorHandler);
        }

        public void GetDocumentsStoresByIds(ICollection<Guid> documents, AsyncErrorHandler errorHandler, Action<ICollection<Store>> resultHandler)
        {
            getDocumentsStoresByIdsCaller.CallAsync(new object[] {documents}, resultHandler, errorHandler);
        }

        public void GetDocumentsTransactions(ICollection<Guid> documentIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, List<StoreTransactionInfo>>> resultHandler)
        {
            getDocumentsTransactionsCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void GetIncomingDocumentsRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, AsyncErrorHandler errorHandler, Action<List<AbstractDocumentListRecord>> resultHandler)
        {
            getIncomingDocumentsRecordsCaller.CallAsync(new object[] {dateFrom, dateTo, docType}, resultHandler, errorHandler);
        }

        public void GetIncomingDocumentsRecordsByDepartments(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, HashSet<DepartmentEntity> departmentsSet, AsyncErrorHandler errorHandler, Action<List<AbstractDocumentListRecord>> resultHandler)
        {
            getIncomingDocumentsRecordsByDepartmentsCaller.CallAsync(new object[] {dateFrom, dateTo, docType, departmentsSet}, resultHandler, errorHandler);
        }

        public void GetIncomingDocumentsRecordsByIds(DocumentType docType, List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<AbstractDocumentListRecord>> resultHandler)
        {
            getIncomingDocumentsRecordsByIdsCaller.CallAsync(new object[] {docType, ids}, resultHandler, errorHandler);
        }

        public void GetIncomingDocumentsRecordsByParams(DateTime? dateFrom, DateTime? dateTo, HashSet<DocumentType> docType, HashSet<DepartmentEntity> departments, HashSet<DocumentStatus> statuses, bool withAlcoholClassOnly, AsyncErrorHandler errorHandler, Action<Dictionary<DocumentType, List<AbstractDocumentListRecord>>> resultHandler)
        {
            getIncomingDocumentsRecordsByParamsCaller.CallAsync(new object[] {dateFrom, dateTo, docType, departments, statuses, withAlcoholClassOnly}, resultHandler, errorHandler);
        }

        public void GetInvoiceDocumentSimpleRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType documentType, ICollection<DocumentStatus> statuses, HashSet<DepartmentEntity> departments, bool onlyWithSupplier, AsyncErrorHandler errorHandler, Action<List<InvoiceDocumentSimpleListRecord>> resultHandler)
        {
            getInvoiceDocumentSimpleRecordsCaller.CallAsync(new object[] {dateFrom, dateTo, documentType, statuses, departments, onlyWithSupplier}, resultHandler, errorHandler);
        }

        public void GetLinkedOutgoingInvoiceIdByIncoming(Guid? incomingInvoiceId, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            getLinkedOutgoingInvoiceIdByIncomingCaller.CallAsync(new object[] {incomingInvoiceId}, resultHandler, errorHandler);
        }

        public void GetNewDocumentNumber(AbstractDocument document, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getNewDocumentNumberCaller.CallAsync(new object[] {document}, resultHandler, errorHandler);
        }

        public void GetNextDocumentNumber(DocumentType documentType, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getNextDocumentNumberCaller.CallAsync(new object[] {documentType}, resultHandler, errorHandler);
        }

        public void GetNextDocumentNumbers(DocumentType documentType, int documentCount, AsyncErrorHandler errorHandler, Action<List<string>> resultHandler)
        {
            getNextDocumentNumbersCaller.CallAsync(new object[] {documentType, documentCount}, resultHandler, errorHandler);
        }

        public void GetNumberingAutoIncrementValues(AsyncErrorHandler errorHandler, Action<ICollection<DocumentNumberingAutoincrementValues>> resultHandler)
        {
            getNumberingAutoIncrementValuesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsAccountingOnlyInChain(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isAccountingOnlyInChainCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveDocumentNumberWithValidation(StubDocument stubDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            saveDocumentNumberWithValidationCaller.CallAsync(new object[] {stubDocument}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateDocument(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            saveOrUpdateDocumentCaller.CallAsync(new object[] {document, suppressWarnings}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateDocumentWithValidation(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            saveOrUpdateDocumentWithValidationCaller.CallAsync(new object[] {document, suppressWarnings}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateNumberingSettings(ICollection<ByValue<DocumentNumberingSettings>> settings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateNumberingSettingsCaller.CallAsync(new object[] {settings}, resultHandler, errorHandler);
        }

        public void SetNumberingAutoIncrementValues(ICollection<DocumentNumberingAutoincrementValues> Values, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setNumberingAutoIncrementValuesCaller.CallAsync(new object[] {Values}, resultHandler, errorHandler);
        }

        public void UnDeleteIncomingDocument(Guid? documentId, DocumentType docType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            unDeleteIncomingDocumentCaller.CallAsync(new object[] {documentId, docType}, resultHandler, errorHandler);
        }

        public void UndoProcessDocument(Guid? documentId, DocumentType documentType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undoProcessDocumentCaller.CallAsync(new object[] {documentId, documentType}, resultHandler, errorHandler);
        }

        public void UpdateDefaultInvoiceAccounts(Account revenueAccount, Account accountTo, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDefaultInvoiceAccountsCaller.CallAsync(new object[] {revenueAccount, accountTo}, resultHandler, errorHandler);
        }

        public void UpdateReportOfQualitySettings(ReportOfQualitySettings setting, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateReportOfQualitySettingsCaller.CallAsync(new object[] {setting}, resultHandler, errorHandler);
        }

        public void ValidateAutomaticNotProcessedDocumentsAbsence(DateTime? dateFrom, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            validateAutomaticNotProcessedDocumentsAbsenceCaller.CallAsync(new object[] {dateFrom}, resultHandler, errorHandler);
        }

        public void ValidateDocumentNumber(AbstractDocument document, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            validateDocumentNumberCaller.CallAsync(new object[] {document}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<bool?> DeleteIncomingDocument(Guid? documentId, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteIncomingDocumentCaller.Call<bool?>(new object[] { documentId, docType }, asyncState, requestTimeout);
        }

        public Task<object> DuplicateAndProcessNontypedDocumentsByIds(ICollection<Guid> oldDocuments, Dictionary<Store, Store> storesMapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return duplicateAndProcessNontypedDocumentsByIdsCaller.Call<object>(new object[] { oldDocuments, storesMapping }, asyncState, requestTimeout);
        }

        public Task<AbstractDocument> DuplicateDocument(DocumentType type, Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return duplicateDocumentCaller.Call<AbstractDocument>(new object[] { type, documentId }, asyncState, requestTimeout);
        }

        public Task<bool> ExistUnprocessedSalesDocuments(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return existUnprocessedSalesDocumentsCaller.Call<bool>(new object[] { dateFrom, dateTo, stores }, asyncState, requestTimeout);
        }

        public Task<ICollection<PartiallyProcessableDocument>> GenerateDocumentsForSessions(ICollection<Guid> sessionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return generateDocumentsForSessionsCaller.Call<ICollection<PartiallyProcessableDocument>>(new object[] { sessionIds }, asyncState, requestTimeout);
        }

        public Task<AbstractDocument> GetAbstractDocument(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAbstractDocumentCaller.Call<AbstractDocument>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<ICollection<AbstractDocument>> GetAbstractDocuments(ICollection<Guid> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAbstractDocumentsCaller.Call<ICollection<AbstractDocument>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, string>> GetDeliveryAddresses(ICollection<Guid> outgoingInvoices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDeliveryAddressesCaller.Call<Dictionary<Guid, string>>(new object[] { outgoingInvoices }, asyncState, requestTimeout);
        }

        public Task<AbstractDocument> GetDocument(DocumentType docType, Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentCaller.Call<AbstractDocument>(new object[] { docType, id }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, decimal>> GetDocumentItemsCosts(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentItemsCostsCaller.Call<Dictionary<Guid, decimal>>(new object[] { documentId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, PricingInfo>> GetDocumentItemsPricing(Guid? documentId, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentItemsPricingCaller.Call<Dictionary<Guid, PricingInfo>>(new object[] { documentId, pricingParameters }, asyncState, requestTimeout);
        }

        public Task<List<StoreTransactionInfo>> GetDocumentTransactions(Guid? documentId, HashSet<Guid> documentItemIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentTransactionsCaller.Call<List<StoreTransactionInfo>>(new object[] { documentId, documentItemIds }, asyncState, requestTimeout);
        }

        public Task<List<AbstractDocument>> GetDocuments(DocumentType docType, List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsCaller.Call<List<AbstractDocument>>(new object[] { docType, ids }, asyncState, requestTimeout);
        }

        public Task<ICollection<AbstractStoreDocument>> GetDocumentsByIds(ICollection<Guid> oldDocuments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsByIdsCaller.Call<ICollection<AbstractStoreDocument>>(new object[] { oldDocuments }, asyncState, requestTimeout);
        }

        public Task<List<AbstractDocument>> GetDocumentsByTypeList(List<DocumentType> docTypes, List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsByTypeListCaller.Call<List<AbstractDocument>>(new object[] { docTypes, ids }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DocumentType, List<AbstractDocument>>> GetDocumentsByTypes(Dictionary<DocumentType, List<Guid>> typeIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsByTypesCaller.Call<Dictionary<DocumentType, List<AbstractDocument>>>(new object[] { typeIds }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, decimal>> GetDocumentsItemsCosts(List<Guid> documentsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsItemsCostsCaller.Call<Dictionary<Guid, decimal>>(new object[] { documentsIds }, asyncState, requestTimeout);
        }

        public Task<ICollection<Store>> GetDocumentsStoresByIds(ICollection<Guid> documents, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsStoresByIdsCaller.Call<ICollection<Store>>(new object[] { documents }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, List<StoreTransactionInfo>>> GetDocumentsTransactions(ICollection<Guid> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDocumentsTransactionsCaller.Call<Dictionary<Guid, List<StoreTransactionInfo>>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIncomingDocumentsRecordsCaller.Call<List<AbstractDocumentListRecord>>(new object[] { dateFrom, dateTo, docType }, asyncState, requestTimeout);
        }

        public Task<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByDepartments(DateTime? dateFrom, DateTime? dateTo, DocumentType docType, HashSet<DepartmentEntity> departmentsSet, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIncomingDocumentsRecordsByDepartmentsCaller.Call<List<AbstractDocumentListRecord>>(new object[] { dateFrom, dateTo, docType, departmentsSet }, asyncState, requestTimeout);
        }

        public Task<List<AbstractDocumentListRecord>> GetIncomingDocumentsRecordsByIds(DocumentType docType, List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIncomingDocumentsRecordsByIdsCaller.Call<List<AbstractDocumentListRecord>>(new object[] { docType, ids }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DocumentType, List<AbstractDocumentListRecord>>> GetIncomingDocumentsRecordsByParams(DateTime? dateFrom, DateTime? dateTo, HashSet<DocumentType> docType, HashSet<DepartmentEntity> departments, HashSet<DocumentStatus> statuses, bool withAlcoholClassOnly, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIncomingDocumentsRecordsByParamsCaller.Call<Dictionary<DocumentType, List<AbstractDocumentListRecord>>>(new object[] { dateFrom, dateTo, docType, departments, statuses, withAlcoholClassOnly }, asyncState, requestTimeout);
        }

        public Task<List<InvoiceDocumentSimpleListRecord>> GetInvoiceDocumentSimpleRecords(DateTime? dateFrom, DateTime? dateTo, DocumentType documentType, ICollection<DocumentStatus> statuses, HashSet<DepartmentEntity> departments, bool onlyWithSupplier, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getInvoiceDocumentSimpleRecordsCaller.Call<List<InvoiceDocumentSimpleListRecord>>(new object[] { dateFrom, dateTo, documentType, statuses, departments, onlyWithSupplier }, asyncState, requestTimeout);
        }

        public Task<Guid?> GetLinkedOutgoingInvoiceIdByIncoming(Guid? incomingInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLinkedOutgoingInvoiceIdByIncomingCaller.Call<Guid?>(new object[] { incomingInvoiceId }, asyncState, requestTimeout);
        }

        public Task<string> GetNewDocumentNumber(AbstractDocument document, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNewDocumentNumberCaller.Call<string>(new object[] { document }, asyncState, requestTimeout);
        }

        public Task<string> GetNextDocumentNumber(DocumentType documentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNextDocumentNumberCaller.Call<string>(new object[] { documentType }, asyncState, requestTimeout);
        }

        public Task<List<string>> GetNextDocumentNumbers(DocumentType documentType, int documentCount, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNextDocumentNumbersCaller.Call<List<string>>(new object[] { documentType, documentCount }, asyncState, requestTimeout);
        }

        public Task<ICollection<DocumentNumberingAutoincrementValues>> GetNumberingAutoIncrementValues([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNumberingAutoIncrementValuesCaller.Call<ICollection<DocumentNumberingAutoincrementValues>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsAccountingOnlyInChain([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isAccountingOnlyInChainCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> SaveDocumentNumberWithValidation(StubDocument stubDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveDocumentNumberWithValidationCaller.Call<DocumentValidationResult>(new object[] { stubDocument }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> SaveOrUpdateDocument(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateDocumentCaller.Call<DocumentValidationResult>(new object[] { document, suppressWarnings }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> SaveOrUpdateDocumentWithValidation(AbstractDocument document, ICollection<ValidationWarning> suppressWarnings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateDocumentWithValidationCaller.Call<DocumentValidationResult>(new object[] { document, suppressWarnings }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateNumberingSettings(ICollection<ByValue<DocumentNumberingSettings>> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateNumberingSettingsCaller.Call<object>(new object[] { settings }, asyncState, requestTimeout);
        }

        public Task<object> SetNumberingAutoIncrementValues(ICollection<DocumentNumberingAutoincrementValues> Values, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setNumberingAutoIncrementValuesCaller.Call<object>(new object[] { Values }, asyncState, requestTimeout);
        }

        public Task<object> UnDeleteIncomingDocument(Guid? documentId, DocumentType docType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unDeleteIncomingDocumentCaller.Call<object>(new object[] { documentId, docType }, asyncState, requestTimeout);
        }

        public Task<object> UndoProcessDocument(Guid? documentId, DocumentType documentType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undoProcessDocumentCaller.Call<object>(new object[] { documentId, documentType }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDefaultInvoiceAccounts(Account revenueAccount, Account accountTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDefaultInvoiceAccountsCaller.Call<object>(new object[] { revenueAccount, accountTo }, asyncState, requestTimeout);
        }

        public Task<object> UpdateReportOfQualitySettings(ReportOfQualitySettings setting, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateReportOfQualitySettingsCaller.Call<object>(new object[] { setting }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> ValidateAutomaticNotProcessedDocumentsAbsence(DateTime? dateFrom, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return validateAutomaticNotProcessedDocumentsAbsenceCaller.Call<DocumentValidationResult>(new object[] { dateFrom }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> ValidateDocumentNumber(AbstractDocument document, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return validateDocumentNumberCaller.Call<DocumentValidationResult>(new object[] { document }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EmployeesService : IEmployeesService
    {
        private readonly RemoteMethodCaller addAdvanceForListEmployeesCaller;
        private readonly RemoteMethodCaller addAttendanceEntryCaller;
        private readonly RemoteMethodCaller addAttendanceTypeCaller;
        private readonly RemoteMethodCaller addOrUpdateScheduleItemsCaller;
        private readonly RemoteMethodCaller addPenaltyOrBonusTransactionCaller;
        private readonly RemoteMethodCaller addPenaltyOrBonusTransactionForListEmployeesCaller;
        private readonly RemoteMethodCaller addPenaltyOrBonusTypeCaller;
        private readonly RemoteMethodCaller addRoleCaller;
        private readonly RemoteMethodCaller addScheduleItemCaller;
        private readonly RemoteMethodCaller addScheduleItemByTypeCaller;
        private readonly RemoteMethodCaller addSessionTimetableCaller;
        private readonly RemoteMethodCaller cancelPenaltyOrBonusTransactionCaller;
        private readonly RemoteMethodCaller createMedicalAnalysisCaller;
        private readonly RemoteMethodCaller deleteAttendanceEntryCaller;
        private readonly RemoteMethodCaller deleteAttendanceTypeCaller;
        private readonly RemoteMethodCaller deletePenaltyOrBonusTypeCaller;
        private readonly RemoteMethodCaller deleteRoleCaller;
        private readonly RemoteMethodCaller deleteScheduleItemCaller;
        private readonly RemoteMethodCaller deleteScheduleItemsCaller;
        private readonly RemoteMethodCaller deleteSessionTimetableCaller;
        private readonly RemoteMethodCaller getAllAttendanceEntriesCaller;
        private readonly RemoteMethodCaller getAllAttendanceEntriesByEmployeeCaller;
        private readonly RemoteMethodCaller getAllAttendanceEntriesByIntersectionCaller;
        private readonly RemoteMethodCaller getAllScheduleItemsCaller;
        private readonly RemoteMethodCaller getAllScheduleItemsByEmployeeCaller;
        private readonly RemoteMethodCaller getAllScheduleItemsByEmployeesCaller;
        private readonly RemoteMethodCaller getDefaultAttendanceTypeForCaller;
        private readonly RemoteMethodCaller getDepositsForUsersCaller;
        private readonly RemoteMethodCaller getEmployeeAttendanceEntriesByIntersectionCaller;
        private readonly RemoteMethodCaller getPaymentStrategiesCaller;
        private readonly RemoteMethodCaller getPaymentStrategiesForDepartmentCaller;
        private readonly RemoteMethodCaller getPaymentStrategiesHistoryCaller;
        private readonly RemoteMethodCaller getPenaltyOrBonusTransactionsCaller;
        private readonly RemoteMethodCaller groupedUpdatePaymentStrategiesCaller;
        private readonly RemoteMethodCaller postSalaryForListEmployeesCaller;
        private readonly RemoteMethodCaller recomputeAllCaller;
        private readonly RemoteMethodCaller selectAllUsersBalancesCaller;
        private readonly RemoteMethodCaller setDeletedMedicalAnalysisCaller;
        private readonly RemoteMethodCaller setPaymentStrategiesCaller;
        private readonly RemoteMethodCaller undeletePenaltyOrBonusTypeCaller;
        private readonly RemoteMethodCaller undeleteRoleCaller;
        private readonly RemoteMethodCaller undeleteSessionTimetableCaller;
        private readonly RemoteMethodCaller updateAttendanceEntryCaller;
        private readonly RemoteMethodCaller updateAttendanceTypeCaller;
        private readonly RemoteMethodCaller updateMedicalAnalysisCaller;
        private readonly RemoteMethodCaller updatePenaltyOrBonusTransactionCaller;
        private readonly RemoteMethodCaller updatePenaltyOrBonusTypeCaller;
        private readonly RemoteMethodCaller updateRoleCaller;
        private readonly RemoteMethodCaller updateSalarySettingsCaller;
        private readonly RemoteMethodCaller updateScheduleItemCaller;
        private readonly RemoteMethodCaller updateSessionTimetableCaller;

        internal EmployeesService()
        {

            addAdvanceForListEmployeesCaller = new RemoteMethodCaller("employees", "addAdvanceForListEmployees");
            addAdvanceForListEmployeesCaller.AddArg("userAdvances", typeof(Dictionary<User, decimal>));
            addAdvanceForListEmployeesCaller.AddArg("date", typeof(DateTime?));
            addAdvanceForListEmployeesCaller.AddArg("account", typeof(Account));
            addAdvanceForListEmployeesCaller.AddArg("counteragent", typeof(User));
            addAdvanceForListEmployeesCaller.AddArg("department", typeof(DepartmentEntity));
            addAdvanceForListEmployeesCaller.AddArg("comment", typeof(string));
            addAdvanceForListEmployeesCaller.AddArg("cashFlowCategory", typeof(CashFlowCategory));
            addAdvanceForListEmployeesCaller.AddArg("payrollId", typeof(Guid?));

            addAttendanceEntryCaller = new RemoteMethodCaller("employees", "addAttendanceEntry");
            addAttendanceEntryCaller.AddArg("attendanceEntry", typeof(EmployeeAttendanceEntry));

            addAttendanceTypeCaller = new RemoteMethodCaller("employees", "addAttendanceType");
            addAttendanceTypeCaller.AddArg("removalType", typeof(ByValue<AttendanceType>));

            addOrUpdateScheduleItemsCaller = new RemoteMethodCaller("employees", "addOrUpdateScheduleItems");
            addOrUpdateScheduleItemsCaller.AddArg("items", typeof(Dictionary<EmployeeScheduleItem, bool>));

            addPenaltyOrBonusTransactionCaller = new RemoteMethodCaller("employees", "addPenaltyOrBonusTransaction");
            addPenaltyOrBonusTransactionCaller.AddArg("user", typeof(User));
            addPenaltyOrBonusTransactionCaller.AddArg("date", typeof(DateInfo));
            addPenaltyOrBonusTransactionCaller.AddArg("type", typeof(PenaltyOrBonusType));
            addPenaltyOrBonusTransactionCaller.AddArg("sum", typeof(decimal?));
            addPenaltyOrBonusTransactionCaller.AddArg("comment", typeof(string));
            addPenaltyOrBonusTransactionCaller.AddArg("department", typeof(DepartmentEntity));

            addPenaltyOrBonusTransactionForListEmployeesCaller = new RemoteMethodCaller("employees", "addPenaltyOrBonusTransactionForListEmployees");
            addPenaltyOrBonusTransactionForListEmployeesCaller.AddArg("userPays", typeof(Dictionary<User, decimal>));
            addPenaltyOrBonusTransactionForListEmployeesCaller.AddArg("date", typeof(DateInfo));
            addPenaltyOrBonusTransactionForListEmployeesCaller.AddArg("type", typeof(PenaltyOrBonusType));
            addPenaltyOrBonusTransactionForListEmployeesCaller.AddArg("comment", typeof(string));
            addPenaltyOrBonusTransactionForListEmployeesCaller.AddArg("department", typeof(DepartmentEntity));

            addPenaltyOrBonusTypeCaller = new RemoteMethodCaller("employees", "addPenaltyOrBonusType");
            addPenaltyOrBonusTypeCaller.AddArg("penaltyOrBonusType", typeof(ByValue<PenaltyOrBonusType>));

            addRoleCaller = new RemoteMethodCaller("employees", "addRole");
            addRoleCaller.AddArg("role", typeof(ByValue<Role>));

            addScheduleItemCaller = new RemoteMethodCaller("employees", "addScheduleItem");
            addScheduleItemCaller.AddArg("itemId", typeof(Guid?));
            addScheduleItemCaller.AddArg("type", typeof(ScheduleType));
            addScheduleItemCaller.AddArg("user", typeof(User));
            addScheduleItemCaller.AddArg("dateFrom", typeof(DateTime?));
            addScheduleItemCaller.AddArg("dateTo", typeof(DateTime?));
            addScheduleItemCaller.AddArg("role", typeof(Role));
            addScheduleItemCaller.AddArg("nonPaidMinutes", typeof(int));
            addScheduleItemCaller.AddArg("department", typeof(DepartmentEntity));
            addScheduleItemCaller.AddArg("createAttendance", typeof(bool));

            addScheduleItemByTypeCaller = new RemoteMethodCaller("employees", "addScheduleItemByType");
            addScheduleItemByTypeCaller.AddArg("itemId", typeof(Guid?));
            addScheduleItemByTypeCaller.AddArg("type", typeof(ScheduleType));
            addScheduleItemByTypeCaller.AddArg("user", typeof(User));
            addScheduleItemByTypeCaller.AddArg("scheduleDate", typeof(DateInfo));
            addScheduleItemByTypeCaller.AddArg("department", typeof(DepartmentEntity));
            addScheduleItemByTypeCaller.AddArg("createAttendance", typeof(bool));

            addSessionTimetableCaller = new RemoteMethodCaller("employees", "addSessionTimetable");
            addSessionTimetableCaller.AddArg("product", typeof(ByValue<ScheduleType>));

            cancelPenaltyOrBonusTransactionCaller = new RemoteMethodCaller("employees", "cancelPenaltyOrBonusTransaction");
            cancelPenaltyOrBonusTransactionCaller.AddArg("id", typeof(Guid?));
            cancelPenaltyOrBonusTransactionCaller.AddArg("comment", typeof(string));

            createMedicalAnalysisCaller = new RemoteMethodCaller("employees", "createMedicalAnalysis");
            createMedicalAnalysisCaller.AddArg("entity", typeof(ByValue<MedicalAnalysisType>));

            deleteAttendanceEntryCaller = new RemoteMethodCaller("employees", "deleteAttendanceEntry");
            deleteAttendanceEntryCaller.AddArg("attendanceEntryId", typeof(Guid?));

            deleteAttendanceTypeCaller = new RemoteMethodCaller("employees", "deleteAttendanceType");
            deleteAttendanceTypeCaller.AddArg("attendanceType", typeof(AttendanceType));
            deleteAttendanceTypeCaller.AddArg("delete", typeof(bool));

            deletePenaltyOrBonusTypeCaller = new RemoteMethodCaller("employees", "deletePenaltyOrBonusType");
            deletePenaltyOrBonusTypeCaller.AddArg("penaltyOrBonusType", typeof(PenaltyOrBonusType));

            deleteRoleCaller = new RemoteMethodCaller("employees", "deleteRole");
            deleteRoleCaller.AddArg("role", typeof(Role));

            deleteScheduleItemCaller = new RemoteMethodCaller("employees", "deleteScheduleItem");
            deleteScheduleItemCaller.AddArg("id", typeof(Guid?));

            deleteScheduleItemsCaller = new RemoteMethodCaller("employees", "deleteScheduleItems");
            deleteScheduleItemsCaller.AddArg("delete", typeof(ICollection<Guid>));

            deleteSessionTimetableCaller = new RemoteMethodCaller("employees", "deleteSessionTimetable");
            deleteSessionTimetableCaller.AddArg("timetable", typeof(ScheduleType));

            getAllAttendanceEntriesCaller = new RemoteMethodCaller("employees", "getAllAttendanceEntries");
            getAllAttendanceEntriesCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllAttendanceEntriesCaller.AddArg("dateTo", typeof(DateTime?));
            getAllAttendanceEntriesCaller.AddArg("includeAll", typeof(bool?));

            getAllAttendanceEntriesByEmployeeCaller = new RemoteMethodCaller("employees", "getAllAttendanceEntriesByEmployee");
            getAllAttendanceEntriesByEmployeeCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllAttendanceEntriesByEmployeeCaller.AddArg("dateTo", typeof(DateTime?));
            getAllAttendanceEntriesByEmployeeCaller.AddArg("employee", typeof(User));

            getAllAttendanceEntriesByIntersectionCaller = new RemoteMethodCaller("employees", "getAllAttendanceEntriesByIntersection");
            getAllAttendanceEntriesByIntersectionCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllAttendanceEntriesByIntersectionCaller.AddArg("dateTo", typeof(DateTime?));

            getAllScheduleItemsCaller = new RemoteMethodCaller("employees", "getAllScheduleItems");
            getAllScheduleItemsCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllScheduleItemsCaller.AddArg("dateTo", typeof(DateTime?));

            getAllScheduleItemsByEmployeeCaller = new RemoteMethodCaller("employees", "getAllScheduleItemsByEmployee");
            getAllScheduleItemsByEmployeeCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllScheduleItemsByEmployeeCaller.AddArg("dateTo", typeof(DateTime?));
            getAllScheduleItemsByEmployeeCaller.AddArg("employee", typeof(User));

            getAllScheduleItemsByEmployeesCaller = new RemoteMethodCaller("employees", "getAllScheduleItemsByEmployees");
            getAllScheduleItemsByEmployeesCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllScheduleItemsByEmployeesCaller.AddArg("dateTo", typeof(DateTime?));
            getAllScheduleItemsByEmployeesCaller.AddArg("employees", typeof(ICollection<User>));

            getDefaultAttendanceTypeForCaller = new RemoteMethodCaller("employees", "getDefaultAttendanceTypeFor");
            getDefaultAttendanceTypeForCaller.AddArg("dateFrom", typeof(DateTime?));
            getDefaultAttendanceTypeForCaller.AddArg("dateTo", typeof(DateTime?));
            getDefaultAttendanceTypeForCaller.AddArg("employee", typeof(User));

            getDepositsForUsersCaller = new RemoteMethodCaller("employees", "getDepositsForUsers");
            getDepositsForUsersCaller.AddArg("date", typeof(DateTime?));
            getDepositsForUsersCaller.AddArg("users", typeof(HashSet<User>));

            getEmployeeAttendanceEntriesByIntersectionCaller = new RemoteMethodCaller("employees", "getEmployeeAttendanceEntriesByIntersection");
            getEmployeeAttendanceEntriesByIntersectionCaller.AddArg("dateFrom", typeof(DateTime?));
            getEmployeeAttendanceEntriesByIntersectionCaller.AddArg("dateTo", typeof(DateTime?));
            getEmployeeAttendanceEntriesByIntersectionCaller.AddArg("employee", typeof(User));

            getPaymentStrategiesCaller = new RemoteMethodCaller("employees", "getPaymentStrategies");
            getPaymentStrategiesCaller.AddArg("date", typeof(DateTime?));
            getPaymentStrategiesCaller.AddArg("users", typeof(ICollection<User>));

            getPaymentStrategiesForDepartmentCaller = new RemoteMethodCaller("employees", "getPaymentStrategiesForDepartment");
            getPaymentStrategiesForDepartmentCaller.AddArg("date", typeof(DateTime?));
            getPaymentStrategiesForDepartmentCaller.AddArg("department", typeof(DepartmentEntity));

            getPaymentStrategiesHistoryCaller = new RemoteMethodCaller("employees", "getPaymentStrategiesHistory");
            getPaymentStrategiesHistoryCaller.AddArg("user", typeof(Guid?));

            getPenaltyOrBonusTransactionsCaller = new RemoteMethodCaller("employees", "getPenaltyOrBonusTransactions");
            getPenaltyOrBonusTransactionsCaller.AddArg("user", typeof(User));
            getPenaltyOrBonusTransactionsCaller.AddArg("dateFrom", typeof(DateInfo));
            getPenaltyOrBonusTransactionsCaller.AddArg("dateTo", typeof(DateInfo));
            getPenaltyOrBonusTransactionsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            getPenaltyOrBonusTransactionsCaller.AddArg("types", typeof(HashSet<PenaltyOrBonus>));

            groupedUpdatePaymentStrategiesCaller = new RemoteMethodCaller("employees", "groupedUpdatePaymentStrategies");
            groupedUpdatePaymentStrategiesCaller.AddArg("employees", typeof(HashSet<User>));
            groupedUpdatePaymentStrategiesCaller.AddArg("dateFrom", typeof(DateTime?));
            groupedUpdatePaymentStrategiesCaller.AddArg("strategyItemsToSave", typeof(List<PaymentStrategyItemsToSave>));
            groupedUpdatePaymentStrategiesCaller.AddArg("excludedRoles", typeof(HashSet<Role>));

            postSalaryForListEmployeesCaller = new RemoteMethodCaller("employees", "postSalaryForListEmployees");
            postSalaryForListEmployeesCaller.AddArg("userPays", typeof(Dictionary<User, decimal>));
            postSalaryForListEmployeesCaller.AddArg("date", typeof(DateTime?));
            postSalaryForListEmployeesCaller.AddArg("department", typeof(DepartmentEntity));

            recomputeAllCaller = new RemoteMethodCaller("employees", "recomputeAll");
            recomputeAllCaller.AddArg("dateFrom", typeof(DateTime?));
            recomputeAllCaller.AddArg("dateTo", typeof(DateTime?));
            recomputeAllCaller.AddArg("user", typeof(User));

            selectAllUsersBalancesCaller = new RemoteMethodCaller("employees", "selectAllUsersBalances");
            selectAllUsersBalancesCaller.AddArg("dateAt", typeof(DateTime?));
            selectAllUsersBalancesCaller.AddArg("account", typeof(Account));

            setDeletedMedicalAnalysisCaller = new RemoteMethodCaller("employees", "setDeletedMedicalAnalysis");
            setDeletedMedicalAnalysisCaller.AddArg("entity", typeof(MedicalAnalysisType));
            setDeletedMedicalAnalysisCaller.AddArg("deleted", typeof(bool));

            setPaymentStrategiesCaller = new RemoteMethodCaller("employees", "setPaymentStrategies");
            setPaymentStrategiesCaller.AddArg("strategies", typeof(List<PaymentStrategy>));

            undeletePenaltyOrBonusTypeCaller = new RemoteMethodCaller("employees", "undeletePenaltyOrBonusType");
            undeletePenaltyOrBonusTypeCaller.AddArg("penaltyOrBonusType", typeof(PenaltyOrBonusType));

            undeleteRoleCaller = new RemoteMethodCaller("employees", "undeleteRole");
            undeleteRoleCaller.AddArg("role", typeof(Role));

            undeleteSessionTimetableCaller = new RemoteMethodCaller("employees", "undeleteSessionTimetable");
            undeleteSessionTimetableCaller.AddArg("timetable", typeof(ScheduleType));

            updateAttendanceEntryCaller = new RemoteMethodCaller("employees", "updateAttendanceEntry");
            updateAttendanceEntryCaller.AddArg("id", typeof(Guid?));
            updateAttendanceEntryCaller.AddArg("dateFrom", typeof(DateTime?));
            updateAttendanceEntryCaller.AddArg("dateTo", typeof(DateTime?));
            updateAttendanceEntryCaller.AddArg("comment", typeof(string));
            updateAttendanceEntryCaller.AddArg("attendanceTypeId", typeof(Guid?));
            updateAttendanceEntryCaller.AddArg("department", typeof(DepartmentEntity));
            updateAttendanceEntryCaller.AddArg("role", typeof(Role));
            updateAttendanceEntryCaller.AddArg("confirmedManually", typeof(bool));

            updateAttendanceTypeCaller = new RemoteMethodCaller("employees", "updateAttendanceType");
            updateAttendanceTypeCaller.AddArg("attendanceType", typeof(ByValue<AttendanceType>));

            updateMedicalAnalysisCaller = new RemoteMethodCaller("employees", "updateMedicalAnalysis");
            updateMedicalAnalysisCaller.AddArg("entity", typeof(ByValue<MedicalAnalysisType>));

            updatePenaltyOrBonusTransactionCaller = new RemoteMethodCaller("employees", "updatePenaltyOrBonusTransaction");
            updatePenaltyOrBonusTransactionCaller.AddArg("id", typeof(Guid?));
            updatePenaltyOrBonusTransactionCaller.AddArg("sum", typeof(decimal?));
            updatePenaltyOrBonusTransactionCaller.AddArg("comment", typeof(string));
            updatePenaltyOrBonusTransactionCaller.AddArg("department", typeof(DepartmentEntity));

            updatePenaltyOrBonusTypeCaller = new RemoteMethodCaller("employees", "updatePenaltyOrBonusType");
            updatePenaltyOrBonusTypeCaller.AddArg("penaltyOrBonusType", typeof(ByValue<PenaltyOrBonusType>));

            updateRoleCaller = new RemoteMethodCaller("employees", "updateRole");
            updateRoleCaller.AddArg("role", typeof(ByValue<Role>));

            updateSalarySettingsCaller = new RemoteMethodCaller("employees", "updateSalarySettings");
            updateSalarySettingsCaller.AddArg("settings", typeof(ByValue<SalarySettings>));

            updateScheduleItemCaller = new RemoteMethodCaller("employees", "updateScheduleItem");
            updateScheduleItemCaller.AddArg("itemId", typeof(Guid?));
            updateScheduleItemCaller.AddArg("type", typeof(ScheduleType));
            updateScheduleItemCaller.AddArg("user", typeof(User));
            updateScheduleItemCaller.AddArg("dateFrom", typeof(DateTime?));
            updateScheduleItemCaller.AddArg("dateTo", typeof(DateTime?));
            updateScheduleItemCaller.AddArg("role", typeof(Role));
            updateScheduleItemCaller.AddArg("nonPaidMinutes", typeof(int));
            updateScheduleItemCaller.AddArg("department", typeof(DepartmentEntity));
            updateScheduleItemCaller.AddArg("createAttendance", typeof(bool));

            updateSessionTimetableCaller = new RemoteMethodCaller("employees", "updateSessionTimetable");
            updateSessionTimetableCaller.AddArg("product", typeof(ByValue<ScheduleType>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<User, AccountingTransaction>> AddAdvanceForListEmployees(Dictionary<User, decimal> userAdvances, DateTime? date, Account account, User counteragent, DepartmentEntity department, string comment, CashFlowCategory cashFlowCategory, Guid? payrollId)
        {
            return addAdvanceForListEmployeesCaller.CreateCall<Dictionary<User, AccountingTransaction>>(new object[] { userAdvances, date, account, counteragent, department, comment, cashFlowCategory, payrollId });
        }

        public IServiceMethodCall<object> AddAttendanceEntry(EmployeeAttendanceEntry attendanceEntry)
        {
            return addAttendanceEntryCaller.CreateCall<object>(new object[] { attendanceEntry });
        }

        public IServiceMethodCall<object> AddAttendanceType(ByValue<AttendanceType> removalType)
        {
            return addAttendanceTypeCaller.CreateCall<object>(new object[] { removalType });
        }

        public IServiceMethodCall<object> AddOrUpdateScheduleItems(Dictionary<EmployeeScheduleItem, bool> items)
        {
            return addOrUpdateScheduleItemsCaller.CreateCall<object>(new object[] { items });
        }

        public IServiceMethodCall<PenaltyOrBonusInfo> AddPenaltyOrBonusTransaction(User user, DateInfo date, PenaltyOrBonusType type, decimal? sum, string comment, DepartmentEntity department)
        {
            return addPenaltyOrBonusTransactionCaller.CreateCall<PenaltyOrBonusInfo>(new object[] { user, date, type, sum, comment, department });
        }

        public IServiceMethodCall<object> AddPenaltyOrBonusTransactionForListEmployees(Dictionary<User, decimal> userPays, DateInfo date, PenaltyOrBonusType type, string comment, DepartmentEntity department)
        {
            return addPenaltyOrBonusTransactionForListEmployeesCaller.CreateCall<object>(new object[] { userPays, date, type, comment, department });
        }

        public IServiceMethodCall<object> AddPenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType)
        {
            return addPenaltyOrBonusTypeCaller.CreateCall<object>(new object[] { penaltyOrBonusType });
        }

        public IServiceMethodCall<Role> AddRole(ByValue<Role> role)
        {
            return addRoleCaller.CreateCall<Role>(new object[] { role });
        }

        public IServiceMethodCall<EmployeeScheduleItem> AddScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance)
        {
            return addScheduleItemCaller.CreateCall<EmployeeScheduleItem>(new object[] { itemId, type, user, dateFrom, dateTo, role, nonPaidMinutes, department, createAttendance });
        }

        public IServiceMethodCall<EmployeeScheduleItem> AddScheduleItemByType(Guid? itemId, ScheduleType type, User user, DateInfo scheduleDate, DepartmentEntity department, bool createAttendance)
        {
            return addScheduleItemByTypeCaller.CreateCall<EmployeeScheduleItem>(new object[] { itemId, type, user, scheduleDate, department, createAttendance });
        }

        public IServiceMethodCall<ScheduleType> AddSessionTimetable(ByValue<ScheduleType> product)
        {
            return addSessionTimetableCaller.CreateCall<ScheduleType>(new object[] { product });
        }

        public IServiceMethodCall<PenaltyOrBonusInfo> CancelPenaltyOrBonusTransaction(Guid? id, string comment)
        {
            return cancelPenaltyOrBonusTransactionCaller.CreateCall<PenaltyOrBonusInfo>(new object[] { id, comment });
        }

        public IServiceMethodCall<object> CreateMedicalAnalysis(ByValue<MedicalAnalysisType> entity)
        {
            return createMedicalAnalysisCaller.CreateCall<object>(new object[] { entity });
        }

        public IServiceMethodCall<object> DeleteAttendanceEntry(Guid? attendanceEntryId)
        {
            return deleteAttendanceEntryCaller.CreateCall<object>(new object[] { attendanceEntryId });
        }

        public IServiceMethodCall<object> DeleteAttendanceType(AttendanceType attendanceType, bool delete)
        {
            return deleteAttendanceTypeCaller.CreateCall<object>(new object[] { attendanceType, delete });
        }

        public IServiceMethodCall<object> DeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType)
        {
            return deletePenaltyOrBonusTypeCaller.CreateCall<object>(new object[] { penaltyOrBonusType });
        }

        public IServiceMethodCall<object> DeleteRole(Role role)
        {
            return deleteRoleCaller.CreateCall<object>(new object[] { role });
        }

        public IServiceMethodCall<object> DeleteScheduleItem(Guid? id)
        {
            return deleteScheduleItemCaller.CreateCall<object>(new object[] { id });
        }

        public IServiceMethodCall<object> DeleteScheduleItems(ICollection<Guid> delete)
        {
            return deleteScheduleItemsCaller.CreateCall<object>(new object[] { delete });
        }

        public IServiceMethodCall<object> DeleteSessionTimetable(ScheduleType timetable)
        {
            return deleteSessionTimetableCaller.CreateCall<object>(new object[] { timetable });
        }

        public IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntries(DateTime? dateFrom, DateTime? dateTo, bool? includeAll)
        {
            return getAllAttendanceEntriesCaller.CreateCall<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo, includeAll });
        }

        public IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee)
        {
            return getAllAttendanceEntriesByEmployeeCaller.CreateCall<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo, employee });
        }

        public IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo)
        {
            return getAllAttendanceEntriesByIntersectionCaller.CreateCall<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<ICollection<EmployeeScheduleItem>> GetAllScheduleItems(DateTime? dateFrom, DateTime? dateTo)
        {
            return getAllScheduleItemsCaller.CreateCall<ICollection<EmployeeScheduleItem>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee)
        {
            return getAllScheduleItemsByEmployeeCaller.CreateCall<ICollection<EmployeeScheduleItem>>(new object[] { dateFrom, dateTo, employee });
        }

        public IServiceMethodCall<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployees(DateTime? dateFrom, DateTime? dateTo, ICollection<User> employees)
        {
            return getAllScheduleItemsByEmployeesCaller.CreateCall<ICollection<EmployeeScheduleItem>>(new object[] { dateFrom, dateTo, employees });
        }

        public IServiceMethodCall<AttendanceType> GetDefaultAttendanceTypeFor(DateTime? dateFrom, DateTime? dateTo, User employee)
        {
            return getDefaultAttendanceTypeForCaller.CreateCall<AttendanceType>(new object[] { dateFrom, dateTo, employee });
        }

        public IServiceMethodCall<Dictionary<User, decimal>> GetDepositsForUsers(DateTime? date, HashSet<User> users)
        {
            return getDepositsForUsersCaller.CreateCall<Dictionary<User, decimal>>(new object[] { date, users });
        }

        public IServiceMethodCall<ICollection<EmployeeAttendanceEntry>> GetEmployeeAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, User employee)
        {
            return getEmployeeAttendanceEntriesByIntersectionCaller.CreateCall<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo, employee });
        }

        public IServiceMethodCall<ICollection<PaymentStrategy>> GetPaymentStrategies(DateTime? date, ICollection<User> users)
        {
            return getPaymentStrategiesCaller.CreateCall<ICollection<PaymentStrategy>>(new object[] { date, users });
        }

        public IServiceMethodCall<Dictionary<User, PaymentStrategy>> GetPaymentStrategiesForDepartment(DateTime? date, DepartmentEntity department)
        {
            return getPaymentStrategiesForDepartmentCaller.CreateCall<Dictionary<User, PaymentStrategy>>(new object[] { date, department });
        }

        public IServiceMethodCall<ICollection<PaymentStrategy>> GetPaymentStrategiesHistory(Guid? user)
        {
            return getPaymentStrategiesHistoryCaller.CreateCall<ICollection<PaymentStrategy>>(new object[] { user });
        }

        public IServiceMethodCall<List<PenaltyOrBonusInfo>> GetPenaltyOrBonusTransactions(User user, DateInfo dateFrom, DateInfo dateTo, ICollection<DepartmentEntity> departments, HashSet<PenaltyOrBonus> types)
        {
            return getPenaltyOrBonusTransactionsCaller.CreateCall<List<PenaltyOrBonusInfo>>(new object[] { user, dateFrom, dateTo, departments, types });
        }

        public IServiceMethodCall<object> GroupedUpdatePaymentStrategies(HashSet<User> employees, DateTime? dateFrom, List<PaymentStrategyItemsToSave> strategyItemsToSave, HashSet<Role> excludedRoles)
        {
            return groupedUpdatePaymentStrategiesCaller.CreateCall<object>(new object[] { employees, dateFrom, strategyItemsToSave, excludedRoles });
        }

        public IServiceMethodCall<object> PostSalaryForListEmployees(Dictionary<User, decimal> userPays, DateTime? date, DepartmentEntity department)
        {
            return postSalaryForListEmployeesCaller.CreateCall<object>(new object[] { userPays, date, department });
        }

        public IServiceMethodCall<object> RecomputeAll(DateTime? dateFrom, DateTime? dateTo, User user)
        {
            return recomputeAllCaller.CreateCall<object>(new object[] { dateFrom, dateTo, user });
        }

        public IServiceMethodCall<Dictionary<User, decimal>> SelectAllUsersBalances(DateTime? dateAt, Account account)
        {
            return selectAllUsersBalancesCaller.CreateCall<Dictionary<User, decimal>>(new object[] { dateAt, account });
        }

        public IServiceMethodCall<object> SetDeletedMedicalAnalysis(MedicalAnalysisType entity, bool deleted)
        {
            return setDeletedMedicalAnalysisCaller.CreateCall<object>(new object[] { entity, deleted });
        }

        public IServiceMethodCall<object> SetPaymentStrategies(List<PaymentStrategy> strategies)
        {
            return setPaymentStrategiesCaller.CreateCall<object>(new object[] { strategies });
        }

        public IServiceMethodCall<object> UndeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType)
        {
            return undeletePenaltyOrBonusTypeCaller.CreateCall<object>(new object[] { penaltyOrBonusType });
        }

        public IServiceMethodCall<object> UndeleteRole(Role role)
        {
            return undeleteRoleCaller.CreateCall<object>(new object[] { role });
        }

        public IServiceMethodCall<object> UndeleteSessionTimetable(ScheduleType timetable)
        {
            return undeleteSessionTimetableCaller.CreateCall<object>(new object[] { timetable });
        }

        public IServiceMethodCall<EmployeeAttendanceEntry> UpdateAttendanceEntry(Guid? id, DateTime? dateFrom, DateTime? dateTo, string comment, Guid? attendanceTypeId, DepartmentEntity department, Role role, bool confirmedManually)
        {
            return updateAttendanceEntryCaller.CreateCall<EmployeeAttendanceEntry>(new object[] { id, dateFrom, dateTo, comment, attendanceTypeId, department, role, confirmedManually });
        }

        public IServiceMethodCall<object> UpdateAttendanceType(ByValue<AttendanceType> attendanceType)
        {
            return updateAttendanceTypeCaller.CreateCall<object>(new object[] { attendanceType });
        }

        public IServiceMethodCall<object> UpdateMedicalAnalysis(ByValue<MedicalAnalysisType> entity)
        {
            return updateMedicalAnalysisCaller.CreateCall<object>(new object[] { entity });
        }

        public IServiceMethodCall<PenaltyOrBonusInfo> UpdatePenaltyOrBonusTransaction(Guid? id, decimal? sum, string comment, DepartmentEntity department)
        {
            return updatePenaltyOrBonusTransactionCaller.CreateCall<PenaltyOrBonusInfo>(new object[] { id, sum, comment, department });
        }

        public IServiceMethodCall<object> UpdatePenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType)
        {
            return updatePenaltyOrBonusTypeCaller.CreateCall<object>(new object[] { penaltyOrBonusType });
        }

        public IServiceMethodCall<object> UpdateRole(ByValue<Role> role)
        {
            return updateRoleCaller.CreateCall<object>(new object[] { role });
        }

        public IServiceMethodCall<object> UpdateSalarySettings(ByValue<SalarySettings> settings)
        {
            return updateSalarySettingsCaller.CreateCall<object>(new object[] { settings });
        }

        public IServiceMethodCall<EmployeeScheduleItem> UpdateScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance)
        {
            return updateScheduleItemCaller.CreateCall<EmployeeScheduleItem>(new object[] { itemId, type, user, dateFrom, dateTo, role, nonPaidMinutes, department, createAttendance });
        }

        public IServiceMethodCall<object> UpdateSessionTimetable(ByValue<ScheduleType> product)
        {
            return updateSessionTimetableCaller.CreateCall<object>(new object[] { product });
        }

        #endregion

        #region asynchronous version
        public void AddAdvanceForListEmployees(Dictionary<User, decimal> userAdvances, DateTime? date, Account account, User counteragent, DepartmentEntity department, string comment, CashFlowCategory cashFlowCategory, Guid? payrollId, AsyncErrorHandler errorHandler, Action<Dictionary<User, AccountingTransaction>> resultHandler)
        {
            addAdvanceForListEmployeesCaller.CallAsync(new object[] {userAdvances, date, account, counteragent, department, comment, cashFlowCategory, payrollId}, resultHandler, errorHandler);
        }

        public void AddAttendanceEntry(EmployeeAttendanceEntry attendanceEntry, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addAttendanceEntryCaller.CallAsync(new object[] {attendanceEntry}, resultHandler, errorHandler);
        }

        public void AddAttendanceType(ByValue<AttendanceType> removalType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addAttendanceTypeCaller.CallAsync(new object[] {removalType}, resultHandler, errorHandler);
        }

        public void AddOrUpdateScheduleItems(Dictionary<EmployeeScheduleItem, bool> items, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addOrUpdateScheduleItemsCaller.CallAsync(new object[] {items}, resultHandler, errorHandler);
        }

        public void AddPenaltyOrBonusTransaction(User user, DateInfo date, PenaltyOrBonusType type, decimal? sum, string comment, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<PenaltyOrBonusInfo> resultHandler)
        {
            addPenaltyOrBonusTransactionCaller.CallAsync(new object[] {user, date, type, sum, comment, department}, resultHandler, errorHandler);
        }

        public void AddPenaltyOrBonusTransactionForListEmployees(Dictionary<User, decimal> userPays, DateInfo date, PenaltyOrBonusType type, string comment, DepartmentEntity department, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addPenaltyOrBonusTransactionForListEmployeesCaller.CallAsync(new object[] {userPays, date, type, comment, department}, resultHandler, errorHandler);
        }

        public void AddPenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addPenaltyOrBonusTypeCaller.CallAsync(new object[] {penaltyOrBonusType}, resultHandler, errorHandler);
        }

        public void AddRole(ByValue<Role> role, AsyncErrorHandler errorHandler, Action<Role> resultHandler)
        {
            addRoleCaller.CallAsync(new object[] {role}, resultHandler, errorHandler);
        }

        public void AddScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, AsyncErrorHandler errorHandler, Action<EmployeeScheduleItem> resultHandler)
        {
            addScheduleItemCaller.CallAsync(new object[] {itemId, type, user, dateFrom, dateTo, role, nonPaidMinutes, department, createAttendance}, resultHandler, errorHandler);
        }

        public void AddScheduleItemByType(Guid? itemId, ScheduleType type, User user, DateInfo scheduleDate, DepartmentEntity department, bool createAttendance, AsyncErrorHandler errorHandler, Action<EmployeeScheduleItem> resultHandler)
        {
            addScheduleItemByTypeCaller.CallAsync(new object[] {itemId, type, user, scheduleDate, department, createAttendance}, resultHandler, errorHandler);
        }

        public void AddSessionTimetable(ByValue<ScheduleType> product, AsyncErrorHandler errorHandler, Action<ScheduleType> resultHandler)
        {
            addSessionTimetableCaller.CallAsync(new object[] {product}, resultHandler, errorHandler);
        }

        public void CancelPenaltyOrBonusTransaction(Guid? id, string comment, AsyncErrorHandler errorHandler, Action<PenaltyOrBonusInfo> resultHandler)
        {
            cancelPenaltyOrBonusTransactionCaller.CallAsync(new object[] {id, comment}, resultHandler, errorHandler);
        }

        public void CreateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createMedicalAnalysisCaller.CallAsync(new object[] {entity}, resultHandler, errorHandler);
        }

        public void DeleteAttendanceEntry(Guid? attendanceEntryId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteAttendanceEntryCaller.CallAsync(new object[] {attendanceEntryId}, resultHandler, errorHandler);
        }

        public void DeleteAttendanceType(AttendanceType attendanceType, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteAttendanceTypeCaller.CallAsync(new object[] {attendanceType, delete}, resultHandler, errorHandler);
        }

        public void DeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deletePenaltyOrBonusTypeCaller.CallAsync(new object[] {penaltyOrBonusType}, resultHandler, errorHandler);
        }

        public void DeleteRole(Role role, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteRoleCaller.CallAsync(new object[] {role}, resultHandler, errorHandler);
        }

        public void DeleteScheduleItem(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteScheduleItemCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void DeleteScheduleItems(ICollection<Guid> delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteScheduleItemsCaller.CallAsync(new object[] {delete}, resultHandler, errorHandler);
        }

        public void DeleteSessionTimetable(ScheduleType timetable, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteSessionTimetableCaller.CallAsync(new object[] {timetable}, resultHandler, errorHandler);
        }

        public void GetAllAttendanceEntries(DateTime? dateFrom, DateTime? dateTo, bool? includeAll, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler)
        {
            getAllAttendanceEntriesCaller.CallAsync(new object[] {dateFrom, dateTo, includeAll}, resultHandler, errorHandler);
        }

        public void GetAllAttendanceEntriesByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler)
        {
            getAllAttendanceEntriesByEmployeeCaller.CallAsync(new object[] {dateFrom, dateTo, employee}, resultHandler, errorHandler);
        }

        public void GetAllAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler)
        {
            getAllAttendanceEntriesByIntersectionCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetAllScheduleItems(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeScheduleItem>> resultHandler)
        {
            getAllScheduleItemsCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetAllScheduleItemsByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeScheduleItem>> resultHandler)
        {
            getAllScheduleItemsByEmployeeCaller.CallAsync(new object[] {dateFrom, dateTo, employee}, resultHandler, errorHandler);
        }

        public void GetAllScheduleItemsByEmployees(DateTime? dateFrom, DateTime? dateTo, ICollection<User> employees, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeScheduleItem>> resultHandler)
        {
            getAllScheduleItemsByEmployeesCaller.CallAsync(new object[] {dateFrom, dateTo, employees}, resultHandler, errorHandler);
        }

        public void GetDefaultAttendanceTypeFor(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<AttendanceType> resultHandler)
        {
            getDefaultAttendanceTypeForCaller.CallAsync(new object[] {dateFrom, dateTo, employee}, resultHandler, errorHandler);
        }

        public void GetDepositsForUsers(DateTime? date, HashSet<User> users, AsyncErrorHandler errorHandler, Action<Dictionary<User, decimal>> resultHandler)
        {
            getDepositsForUsersCaller.CallAsync(new object[] {date, users}, resultHandler, errorHandler);
        }

        public void GetEmployeeAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, User employee, AsyncErrorHandler errorHandler, Action<ICollection<EmployeeAttendanceEntry>> resultHandler)
        {
            getEmployeeAttendanceEntriesByIntersectionCaller.CallAsync(new object[] {dateFrom, dateTo, employee}, resultHandler, errorHandler);
        }

        public void GetPaymentStrategies(DateTime? date, ICollection<User> users, AsyncErrorHandler errorHandler, Action<ICollection<PaymentStrategy>> resultHandler)
        {
            getPaymentStrategiesCaller.CallAsync(new object[] {date, users}, resultHandler, errorHandler);
        }

        public void GetPaymentStrategiesForDepartment(DateTime? date, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<User, PaymentStrategy>> resultHandler)
        {
            getPaymentStrategiesForDepartmentCaller.CallAsync(new object[] {date, department}, resultHandler, errorHandler);
        }

        public void GetPaymentStrategiesHistory(Guid? user, AsyncErrorHandler errorHandler, Action<ICollection<PaymentStrategy>> resultHandler)
        {
            getPaymentStrategiesHistoryCaller.CallAsync(new object[] {user}, resultHandler, errorHandler);
        }

        public void GetPenaltyOrBonusTransactions(User user, DateInfo dateFrom, DateInfo dateTo, ICollection<DepartmentEntity> departments, HashSet<PenaltyOrBonus> types, AsyncErrorHandler errorHandler, Action<List<PenaltyOrBonusInfo>> resultHandler)
        {
            getPenaltyOrBonusTransactionsCaller.CallAsync(new object[] {user, dateFrom, dateTo, departments, types}, resultHandler, errorHandler);
        }

        public void GroupedUpdatePaymentStrategies(HashSet<User> employees, DateTime? dateFrom, List<PaymentStrategyItemsToSave> strategyItemsToSave, HashSet<Role> excludedRoles, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            groupedUpdatePaymentStrategiesCaller.CallAsync(new object[] {employees, dateFrom, strategyItemsToSave, excludedRoles}, resultHandler, errorHandler);
        }

        public void PostSalaryForListEmployees(Dictionary<User, decimal> userPays, DateTime? date, DepartmentEntity department, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            postSalaryForListEmployeesCaller.CallAsync(new object[] {userPays, date, department}, resultHandler, errorHandler);
        }

        public void RecomputeAll(DateTime? dateFrom, DateTime? dateTo, User user, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            recomputeAllCaller.CallAsync(new object[] {dateFrom, dateTo, user}, resultHandler, errorHandler);
        }

        public void SelectAllUsersBalances(DateTime? dateAt, Account account, AsyncErrorHandler errorHandler, Action<Dictionary<User, decimal>> resultHandler)
        {
            selectAllUsersBalancesCaller.CallAsync(new object[] {dateAt, account}, resultHandler, errorHandler);
        }

        public void SetDeletedMedicalAnalysis(MedicalAnalysisType entity, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedMedicalAnalysisCaller.CallAsync(new object[] {entity, deleted}, resultHandler, errorHandler);
        }

        public void SetPaymentStrategies(List<PaymentStrategy> strategies, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPaymentStrategiesCaller.CallAsync(new object[] {strategies}, resultHandler, errorHandler);
        }

        public void UndeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeletePenaltyOrBonusTypeCaller.CallAsync(new object[] {penaltyOrBonusType}, resultHandler, errorHandler);
        }

        public void UndeleteRole(Role role, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteRoleCaller.CallAsync(new object[] {role}, resultHandler, errorHandler);
        }

        public void UndeleteSessionTimetable(ScheduleType timetable, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteSessionTimetableCaller.CallAsync(new object[] {timetable}, resultHandler, errorHandler);
        }

        public void UpdateAttendanceEntry(Guid? id, DateTime? dateFrom, DateTime? dateTo, string comment, Guid? attendanceTypeId, DepartmentEntity department, Role role, bool confirmedManually, AsyncErrorHandler errorHandler, Action<EmployeeAttendanceEntry> resultHandler)
        {
            updateAttendanceEntryCaller.CallAsync(new object[] {id, dateFrom, dateTo, comment, attendanceTypeId, department, role, confirmedManually}, resultHandler, errorHandler);
        }

        public void UpdateAttendanceType(ByValue<AttendanceType> attendanceType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateAttendanceTypeCaller.CallAsync(new object[] {attendanceType}, resultHandler, errorHandler);
        }

        public void UpdateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateMedicalAnalysisCaller.CallAsync(new object[] {entity}, resultHandler, errorHandler);
        }

        public void UpdatePenaltyOrBonusTransaction(Guid? id, decimal? sum, string comment, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<PenaltyOrBonusInfo> resultHandler)
        {
            updatePenaltyOrBonusTransactionCaller.CallAsync(new object[] {id, sum, comment, department}, resultHandler, errorHandler);
        }

        public void UpdatePenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updatePenaltyOrBonusTypeCaller.CallAsync(new object[] {penaltyOrBonusType}, resultHandler, errorHandler);
        }

        public void UpdateRole(ByValue<Role> role, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateRoleCaller.CallAsync(new object[] {role}, resultHandler, errorHandler);
        }

        public void UpdateSalarySettings(ByValue<SalarySettings> settings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateSalarySettingsCaller.CallAsync(new object[] {settings}, resultHandler, errorHandler);
        }

        public void UpdateScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, AsyncErrorHandler errorHandler, Action<EmployeeScheduleItem> resultHandler)
        {
            updateScheduleItemCaller.CallAsync(new object[] {itemId, type, user, dateFrom, dateTo, role, nonPaidMinutes, department, createAttendance}, resultHandler, errorHandler);
        }

        public void UpdateSessionTimetable(ByValue<ScheduleType> product, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateSessionTimetableCaller.CallAsync(new object[] {product}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<User, AccountingTransaction>> AddAdvanceForListEmployees(Dictionary<User, decimal> userAdvances, DateTime? date, Account account, User counteragent, DepartmentEntity department, string comment, CashFlowCategory cashFlowCategory, Guid? payrollId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addAdvanceForListEmployeesCaller.Call<Dictionary<User, AccountingTransaction>>(new object[] { userAdvances, date, account, counteragent, department, comment, cashFlowCategory, payrollId }, asyncState, requestTimeout);
        }

        public Task<object> AddAttendanceEntry(EmployeeAttendanceEntry attendanceEntry, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addAttendanceEntryCaller.Call<object>(new object[] { attendanceEntry }, asyncState, requestTimeout);
        }

        public Task<object> AddAttendanceType(ByValue<AttendanceType> removalType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addAttendanceTypeCaller.Call<object>(new object[] { removalType }, asyncState, requestTimeout);
        }

        public Task<object> AddOrUpdateScheduleItems(Dictionary<EmployeeScheduleItem, bool> items, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addOrUpdateScheduleItemsCaller.Call<object>(new object[] { items }, asyncState, requestTimeout);
        }

        public Task<PenaltyOrBonusInfo> AddPenaltyOrBonusTransaction(User user, DateInfo date, PenaltyOrBonusType type, decimal? sum, string comment, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPenaltyOrBonusTransactionCaller.Call<PenaltyOrBonusInfo>(new object[] { user, date, type, sum, comment, department }, asyncState, requestTimeout);
        }

        public Task<object> AddPenaltyOrBonusTransactionForListEmployees(Dictionary<User, decimal> userPays, DateInfo date, PenaltyOrBonusType type, string comment, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPenaltyOrBonusTransactionForListEmployeesCaller.Call<object>(new object[] { userPays, date, type, comment, department }, asyncState, requestTimeout);
        }

        public Task<object> AddPenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addPenaltyOrBonusTypeCaller.Call<object>(new object[] { penaltyOrBonusType }, asyncState, requestTimeout);
        }

        public Task<Role> AddRole(ByValue<Role> role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addRoleCaller.Call<Role>(new object[] { role }, asyncState, requestTimeout);
        }

        public Task<EmployeeScheduleItem> AddScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addScheduleItemCaller.Call<EmployeeScheduleItem>(new object[] { itemId, type, user, dateFrom, dateTo, role, nonPaidMinutes, department, createAttendance }, asyncState, requestTimeout);
        }

        public Task<EmployeeScheduleItem> AddScheduleItemByType(Guid? itemId, ScheduleType type, User user, DateInfo scheduleDate, DepartmentEntity department, bool createAttendance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addScheduleItemByTypeCaller.Call<EmployeeScheduleItem>(new object[] { itemId, type, user, scheduleDate, department, createAttendance }, asyncState, requestTimeout);
        }

        public Task<ScheduleType> AddSessionTimetable(ByValue<ScheduleType> product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addSessionTimetableCaller.Call<ScheduleType>(new object[] { product }, asyncState, requestTimeout);
        }

        public Task<PenaltyOrBonusInfo> CancelPenaltyOrBonusTransaction(Guid? id, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return cancelPenaltyOrBonusTransactionCaller.Call<PenaltyOrBonusInfo>(new object[] { id, comment }, asyncState, requestTimeout);
        }

        public Task<object> CreateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createMedicalAnalysisCaller.Call<object>(new object[] { entity }, asyncState, requestTimeout);
        }

        public Task<object> DeleteAttendanceEntry(Guid? attendanceEntryId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteAttendanceEntryCaller.Call<object>(new object[] { attendanceEntryId }, asyncState, requestTimeout);
        }

        public Task<object> DeleteAttendanceType(AttendanceType attendanceType, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteAttendanceTypeCaller.Call<object>(new object[] { attendanceType, delete }, asyncState, requestTimeout);
        }

        public Task<object> DeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deletePenaltyOrBonusTypeCaller.Call<object>(new object[] { penaltyOrBonusType }, asyncState, requestTimeout);
        }

        public Task<object> DeleteRole(Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteRoleCaller.Call<object>(new object[] { role }, asyncState, requestTimeout);
        }

        public Task<object> DeleteScheduleItem(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteScheduleItemCaller.Call<object>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<object> DeleteScheduleItems(ICollection<Guid> delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteScheduleItemsCaller.Call<object>(new object[] { delete }, asyncState, requestTimeout);
        }

        public Task<object> DeleteSessionTimetable(ScheduleType timetable, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteSessionTimetableCaller.Call<object>(new object[] { timetable }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntries(DateTime? dateFrom, DateTime? dateTo, bool? includeAll, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAttendanceEntriesCaller.Call<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo, includeAll }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAttendanceEntriesByEmployeeCaller.Call<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo, employee }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeAttendanceEntry>> GetAllAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAttendanceEntriesByIntersectionCaller.Call<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeScheduleItem>> GetAllScheduleItems(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllScheduleItemsCaller.Call<ICollection<EmployeeScheduleItem>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployee(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllScheduleItemsByEmployeeCaller.Call<ICollection<EmployeeScheduleItem>>(new object[] { dateFrom, dateTo, employee }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeScheduleItem>> GetAllScheduleItemsByEmployees(DateTime? dateFrom, DateTime? dateTo, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllScheduleItemsByEmployeesCaller.Call<ICollection<EmployeeScheduleItem>>(new object[] { dateFrom, dateTo, employees }, asyncState, requestTimeout);
        }

        public Task<AttendanceType> GetDefaultAttendanceTypeFor(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDefaultAttendanceTypeForCaller.Call<AttendanceType>(new object[] { dateFrom, dateTo, employee }, asyncState, requestTimeout);
        }

        public Task<Dictionary<User, decimal>> GetDepositsForUsers(DateTime? date, HashSet<User> users, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDepositsForUsersCaller.Call<Dictionary<User, decimal>>(new object[] { date, users }, asyncState, requestTimeout);
        }

        public Task<ICollection<EmployeeAttendanceEntry>> GetEmployeeAttendanceEntriesByIntersection(DateTime? dateFrom, DateTime? dateTo, User employee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEmployeeAttendanceEntriesByIntersectionCaller.Call<ICollection<EmployeeAttendanceEntry>>(new object[] { dateFrom, dateTo, employee }, asyncState, requestTimeout);
        }

        public Task<ICollection<PaymentStrategy>> GetPaymentStrategies(DateTime? date, ICollection<User> users, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPaymentStrategiesCaller.Call<ICollection<PaymentStrategy>>(new object[] { date, users }, asyncState, requestTimeout);
        }

        public Task<Dictionary<User, PaymentStrategy>> GetPaymentStrategiesForDepartment(DateTime? date, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPaymentStrategiesForDepartmentCaller.Call<Dictionary<User, PaymentStrategy>>(new object[] { date, department }, asyncState, requestTimeout);
        }

        public Task<ICollection<PaymentStrategy>> GetPaymentStrategiesHistory(Guid? user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPaymentStrategiesHistoryCaller.Call<ICollection<PaymentStrategy>>(new object[] { user }, asyncState, requestTimeout);
        }

        public Task<List<PenaltyOrBonusInfo>> GetPenaltyOrBonusTransactions(User user, DateInfo dateFrom, DateInfo dateTo, ICollection<DepartmentEntity> departments, HashSet<PenaltyOrBonus> types, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPenaltyOrBonusTransactionsCaller.Call<List<PenaltyOrBonusInfo>>(new object[] { user, dateFrom, dateTo, departments, types }, asyncState, requestTimeout);
        }

        public Task<object> GroupedUpdatePaymentStrategies(HashSet<User> employees, DateTime? dateFrom, List<PaymentStrategyItemsToSave> strategyItemsToSave, HashSet<Role> excludedRoles, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return groupedUpdatePaymentStrategiesCaller.Call<object>(new object[] { employees, dateFrom, strategyItemsToSave, excludedRoles }, asyncState, requestTimeout);
        }

        public Task<object> PostSalaryForListEmployees(Dictionary<User, decimal> userPays, DateTime? date, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return postSalaryForListEmployeesCaller.Call<object>(new object[] { userPays, date, department }, asyncState, requestTimeout);
        }

        public Task<object> RecomputeAll(DateTime? dateFrom, DateTime? dateTo, User user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return recomputeAllCaller.Call<object>(new object[] { dateFrom, dateTo, user }, asyncState, requestTimeout);
        }

        public Task<Dictionary<User, decimal>> SelectAllUsersBalances(DateTime? dateAt, Account account, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectAllUsersBalancesCaller.Call<Dictionary<User, decimal>>(new object[] { dateAt, account }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedMedicalAnalysis(MedicalAnalysisType entity, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedMedicalAnalysisCaller.Call<object>(new object[] { entity, deleted }, asyncState, requestTimeout);
        }

        public Task<object> SetPaymentStrategies(List<PaymentStrategy> strategies, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPaymentStrategiesCaller.Call<object>(new object[] { strategies }, asyncState, requestTimeout);
        }

        public Task<object> UndeletePenaltyOrBonusType(PenaltyOrBonusType penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeletePenaltyOrBonusTypeCaller.Call<object>(new object[] { penaltyOrBonusType }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteRole(Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteRoleCaller.Call<object>(new object[] { role }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteSessionTimetable(ScheduleType timetable, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteSessionTimetableCaller.Call<object>(new object[] { timetable }, asyncState, requestTimeout);
        }

        public Task<EmployeeAttendanceEntry> UpdateAttendanceEntry(Guid? id, DateTime? dateFrom, DateTime? dateTo, string comment, Guid? attendanceTypeId, DepartmentEntity department, Role role, bool confirmedManually, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateAttendanceEntryCaller.Call<EmployeeAttendanceEntry>(new object[] { id, dateFrom, dateTo, comment, attendanceTypeId, department, role, confirmedManually }, asyncState, requestTimeout);
        }

        public Task<object> UpdateAttendanceType(ByValue<AttendanceType> attendanceType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateAttendanceTypeCaller.Call<object>(new object[] { attendanceType }, asyncState, requestTimeout);
        }

        public Task<object> UpdateMedicalAnalysis(ByValue<MedicalAnalysisType> entity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateMedicalAnalysisCaller.Call<object>(new object[] { entity }, asyncState, requestTimeout);
        }

        public Task<PenaltyOrBonusInfo> UpdatePenaltyOrBonusTransaction(Guid? id, decimal? sum, string comment, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePenaltyOrBonusTransactionCaller.Call<PenaltyOrBonusInfo>(new object[] { id, sum, comment, department }, asyncState, requestTimeout);
        }

        public Task<object> UpdatePenaltyOrBonusType(ByValue<PenaltyOrBonusType> penaltyOrBonusType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePenaltyOrBonusTypeCaller.Call<object>(new object[] { penaltyOrBonusType }, asyncState, requestTimeout);
        }

        public Task<object> UpdateRole(ByValue<Role> role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateRoleCaller.Call<object>(new object[] { role }, asyncState, requestTimeout);
        }

        public Task<object> UpdateSalarySettings(ByValue<SalarySettings> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateSalarySettingsCaller.Call<object>(new object[] { settings }, asyncState, requestTimeout);
        }

        public Task<EmployeeScheduleItem> UpdateScheduleItem(Guid? itemId, ScheduleType type, User user, DateTime? dateFrom, DateTime? dateTo, Role role, int nonPaidMinutes, DepartmentEntity department, bool createAttendance, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateScheduleItemCaller.Call<EmployeeScheduleItem>(new object[] { itemId, type, user, dateFrom, dateTo, role, nonPaidMinutes, department, createAttendance }, asyncState, requestTimeout);
        }

        public Task<object> UpdateSessionTimetable(ByValue<ScheduleType> product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateSessionTimetableCaller.Call<object>(new object[] { product }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PayrollService : IPayrollService
    {
        private readonly RemoteMethodCaller getBriefPayrollListCaller;
        private readonly RemoteMethodCaller getPayrollItemsCaller;
        private readonly RemoteMethodCaller getPayrollItemsForPeriodCaller;

        internal PayrollService()
        {

            getBriefPayrollListCaller = new RemoteMethodCaller("payroll", "getBriefPayrollList");

            getPayrollItemsCaller = new RemoteMethodCaller("payroll", "getPayrollItems");
            getPayrollItemsCaller.AddArg("payrollId", typeof(Guid?));

            getPayrollItemsForPeriodCaller = new RemoteMethodCaller("payroll", "getPayrollItemsForPeriod");
            getPayrollItemsForPeriodCaller.AddArg("period", typeof(DateInterval));
            getPayrollItemsForPeriodCaller.AddArg("department", typeof(DepartmentEntity));
        }

        #region Synchronous versions
        public IServiceMethodCall<List<PayrollDocumentListRecord>> GetBriefPayrollList()
        {
            return getBriefPayrollListCaller.CreateCall<List<PayrollDocumentListRecord>>(new object[] {  });
        }

        public IServiceMethodCall<List<PayrollItem>> GetPayrollItems(Guid? payrollId)
        {
            return getPayrollItemsCaller.CreateCall<List<PayrollItem>>(new object[] { payrollId });
        }

        public IServiceMethodCall<List<PayrollItem>> GetPayrollItemsForPeriod(DateInterval period, DepartmentEntity department)
        {
            return getPayrollItemsForPeriodCaller.CreateCall<List<PayrollItem>>(new object[] { period, department });
        }

        #endregion

        #region asynchronous version
        public void GetBriefPayrollList(AsyncErrorHandler errorHandler, Action<List<PayrollDocumentListRecord>> resultHandler)
        {
            getBriefPayrollListCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetPayrollItems(Guid? payrollId, AsyncErrorHandler errorHandler, Action<List<PayrollItem>> resultHandler)
        {
            getPayrollItemsCaller.CallAsync(new object[] {payrollId}, resultHandler, errorHandler);
        }

        public void GetPayrollItemsForPeriod(DateInterval period, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<List<PayrollItem>> resultHandler)
        {
            getPayrollItemsForPeriodCaller.CallAsync(new object[] {period, department}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<List<PayrollDocumentListRecord>> GetBriefPayrollList([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBriefPayrollListCaller.Call<List<PayrollDocumentListRecord>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<List<PayrollItem>> GetPayrollItems(Guid? payrollId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPayrollItemsCaller.Call<List<PayrollItem>>(new object[] { payrollId }, asyncState, requestTimeout);
        }

        public Task<List<PayrollItem>> GetPayrollItemsForPeriod(DateInterval period, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPayrollItemsForPeriodCaller.Call<List<PayrollItem>>(new object[] { period, department }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EmployeesPlanningService : IEmployeesPlanningService
    {
        private readonly RemoteMethodCaller getEmployeesPlanningReportCaller;
        private readonly RemoteMethodCaller saveOrUpdateEmployeeAvailabilityEntriesCaller;
        private readonly RemoteMethodCaller saveOrUpdateEmployeeAvailabilityScheduleCaller;
        private readonly RemoteMethodCaller saveOrUpdateRoleRequirementItemsCaller;

        internal EmployeesPlanningService()
        {

            getEmployeesPlanningReportCaller = new RemoteMethodCaller("employeesPlanning", "getEmployeesPlanningReport");
            getEmployeesPlanningReportCaller.AddArg("dateFrom", typeof(DateTime?));
            getEmployeesPlanningReportCaller.AddArg("dateToAvailability", typeof(DateTime?));
            getEmployeesPlanningReportCaller.AddArg("dateToTimeline", typeof(DateTime?));
            getEmployeesPlanningReportCaller.AddArg("dateToRequirements", typeof(DateTime?));
            getEmployeesPlanningReportCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            getEmployeesPlanningReportCaller.AddArg("roles", typeof(ICollection<Role>));
            getEmployeesPlanningReportCaller.AddArg("employees", typeof(ICollection<User>));

            saveOrUpdateEmployeeAvailabilityEntriesCaller = new RemoteMethodCaller("employeesPlanning", "saveOrUpdateEmployeeAvailabilityEntries");
            saveOrUpdateEmployeeAvailabilityEntriesCaller.AddArg("entries", typeof(ICollection<EmployeeAvailabilityEntry>));

            saveOrUpdateEmployeeAvailabilityScheduleCaller = new RemoteMethodCaller("employeesPlanning", "saveOrUpdateEmployeeAvailabilitySchedule");
            saveOrUpdateEmployeeAvailabilityScheduleCaller.AddArg("schedules", typeof(ICollection<EmployeeAvailabilitySchedule>));
            saveOrUpdateEmployeeAvailabilityScheduleCaller.AddArg("delete", typeof(ICollection<Guid>));

            saveOrUpdateRoleRequirementItemsCaller = new RemoteMethodCaller("employeesPlanning", "saveOrUpdateRoleRequirementItems");
            saveOrUpdateRoleRequirementItemsCaller.AddArg("items", typeof(ICollection<RoleRequirementItem>));
            saveOrUpdateRoleRequirementItemsCaller.AddArg("delete", typeof(ICollection<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<EmployeesPlanningReport> GetEmployeesPlanningReport(DateTime? dateFrom, DateTime? dateToAvailability, DateTime? dateToTimeline, DateTime? dateToRequirements, ICollection<DepartmentEntity> departments, ICollection<Role> roles, ICollection<User> employees)
        {
            return getEmployeesPlanningReportCaller.CreateCall<EmployeesPlanningReport>(new object[] { dateFrom, dateToAvailability, dateToTimeline, dateToRequirements, departments, roles, employees });
        }

        public IServiceMethodCall<object> SaveOrUpdateEmployeeAvailabilityEntries(ICollection<EmployeeAvailabilityEntry> entries)
        {
            return saveOrUpdateEmployeeAvailabilityEntriesCaller.CreateCall<object>(new object[] { entries });
        }

        public IServiceMethodCall<object> SaveOrUpdateEmployeeAvailabilitySchedule(ICollection<EmployeeAvailabilitySchedule> schedules, ICollection<Guid> delete)
        {
            return saveOrUpdateEmployeeAvailabilityScheduleCaller.CreateCall<object>(new object[] { schedules, delete });
        }

        public IServiceMethodCall<object> SaveOrUpdateRoleRequirementItems(ICollection<RoleRequirementItem> items, ICollection<Guid> delete)
        {
            return saveOrUpdateRoleRequirementItemsCaller.CreateCall<object>(new object[] { items, delete });
        }

        #endregion

        #region asynchronous version
        public void GetEmployeesPlanningReport(DateTime? dateFrom, DateTime? dateToAvailability, DateTime? dateToTimeline, DateTime? dateToRequirements, ICollection<DepartmentEntity> departments, ICollection<Role> roles, ICollection<User> employees, AsyncErrorHandler errorHandler, Action<EmployeesPlanningReport> resultHandler)
        {
            getEmployeesPlanningReportCaller.CallAsync(new object[] {dateFrom, dateToAvailability, dateToTimeline, dateToRequirements, departments, roles, employees}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateEmployeeAvailabilityEntries(ICollection<EmployeeAvailabilityEntry> entries, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateEmployeeAvailabilityEntriesCaller.CallAsync(new object[] {entries}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateEmployeeAvailabilitySchedule(ICollection<EmployeeAvailabilitySchedule> schedules, ICollection<Guid> delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateEmployeeAvailabilityScheduleCaller.CallAsync(new object[] {schedules, delete}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateRoleRequirementItems(ICollection<RoleRequirementItem> items, ICollection<Guid> delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateRoleRequirementItemsCaller.CallAsync(new object[] {items, delete}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EmployeesPlanningReport> GetEmployeesPlanningReport(DateTime? dateFrom, DateTime? dateToAvailability, DateTime? dateToTimeline, DateTime? dateToRequirements, ICollection<DepartmentEntity> departments, ICollection<Role> roles, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEmployeesPlanningReportCaller.Call<EmployeesPlanningReport>(new object[] { dateFrom, dateToAvailability, dateToTimeline, dateToRequirements, departments, roles, employees }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateEmployeeAvailabilityEntries(ICollection<EmployeeAvailabilityEntry> entries, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateEmployeeAvailabilityEntriesCaller.Call<object>(new object[] { entries }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateEmployeeAvailabilitySchedule(ICollection<EmployeeAvailabilitySchedule> schedules, ICollection<Guid> delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateEmployeeAvailabilityScheduleCaller.Call<object>(new object[] { schedules, delete }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateRoleRequirementItems(ICollection<RoleRequirementItem> items, ICollection<Guid> delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateRoleRequirementItemsCaller.Call<object>(new object[] { items, delete }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EmployeesReportsService : IEmployeesReportsService
    {
        private readonly RemoteMethodCaller getEmployeeTransactionTotalsOnDateCaller;
        private readonly RemoteMethodCaller getEmployeesCostCaller;
        private readonly RemoteMethodCaller getEmployerAttendanceInfosForRolesCaller;
        private readonly RemoteMethodCaller getEmployerAttendanceInfosForRolesByDepartmentsCaller;
        private readonly RemoteMethodCaller getLastUserTransactionsInfoCaller;
        private readonly RemoteMethodCaller getUsersWorkedInPeriodCaller;
        private readonly RemoteMethodCaller selectPersonalReportCaller;
        private readonly RemoteMethodCaller selectPersonalReportRowsCaller;
        private readonly RemoteMethodCaller selectSalaryReportByDepartmentsCaller;

        internal EmployeesReportsService()
        {

            getEmployeeTransactionTotalsOnDateCaller = new RemoteMethodCaller("employeesReports", "getEmployeeTransactionTotalsOnDate");
            getEmployeeTransactionTotalsOnDateCaller.AddArg("employee", typeof(User));
            getEmployeeTransactionTotalsOnDateCaller.AddArg("interval", typeof(DateInterval));

            getEmployeesCostCaller = new RemoteMethodCaller("employeesReports", "getEmployeesCost");
            getEmployeesCostCaller.AddArg("users", typeof(List<User>));
            getEmployeesCostCaller.AddArg("dateFrom", typeof(DateInfo));
            getEmployeesCostCaller.AddArg("dateTo", typeof(DateInfo));

            getEmployerAttendanceInfosForRolesCaller = new RemoteMethodCaller("employeesReports", "getEmployerAttendanceInfosForRoles");
            getEmployerAttendanceInfosForRolesCaller.AddArg("roles", typeof(List<Role>));
            getEmployerAttendanceInfosForRolesCaller.AddArg("dateInterval", typeof(DateInterval));

            getEmployerAttendanceInfosForRolesByDepartmentsCaller = new RemoteMethodCaller("employeesReports", "getEmployerAttendanceInfosForRolesByDepartments");
            getEmployerAttendanceInfosForRolesByDepartmentsCaller.AddArg("roles", typeof(List<Role>));
            getEmployerAttendanceInfosForRolesByDepartmentsCaller.AddArg("departments", typeof(List<DepartmentEntity>));
            getEmployerAttendanceInfosForRolesByDepartmentsCaller.AddArg("dateInterval", typeof(DateInterval));

            getLastUserTransactionsInfoCaller = new RemoteMethodCaller("employeesReports", "getLastUserTransactionsInfo");
            getLastUserTransactionsInfoCaller.AddArg("employee", typeof(User));
            getLastUserTransactionsInfoCaller.AddArg("maxResults", typeof(int));

            getUsersWorkedInPeriodCaller = new RemoteMethodCaller("employeesReports", "getUsersWorkedInPeriod");
            getUsersWorkedInPeriodCaller.AddArg("dateFrom", typeof(DateInfo));
            getUsersWorkedInPeriodCaller.AddArg("dateTo", typeof(DateInfo));

            selectPersonalReportCaller = new RemoteMethodCaller("employeesReports", "selectPersonalReport");
            selectPersonalReportCaller.AddArg("user", typeof(User));
            selectPersonalReportCaller.AddArg("dateInterval", typeof(DateInterval));
            selectPersonalReportCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));

            selectPersonalReportRowsCaller = new RemoteMethodCaller("employeesReports", "selectPersonalReportRows");
            selectPersonalReportRowsCaller.AddArg("user", typeof(User));
            selectPersonalReportRowsCaller.AddArg("dateInterval", typeof(DateInterval));

            selectSalaryReportByDepartmentsCaller = new RemoteMethodCaller("employeesReports", "selectSalaryReportByDepartments");
            selectSalaryReportByDepartmentsCaller.AddArg("dateInterval", typeof(DateInterval));
            selectSalaryReportByDepartmentsCaller.AddArg("departmentsSet", typeof(HashSet<DepartmentEntity>));
            selectSalaryReportByDepartmentsCaller.AddArg("showAllEmployees", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<EmployeeTransactionsAggregatedInfo> GetEmployeeTransactionTotalsOnDate(User employee, DateInterval interval)
        {
            return getEmployeeTransactionTotalsOnDateCaller.CreateCall<EmployeeTransactionsAggregatedInfo>(new object[] { employee, interval });
        }

        public IServiceMethodCall<LaborCostsAggregatedInfo> GetEmployeesCost(List<User> users, DateInfo dateFrom, DateInfo dateTo)
        {
            return getEmployeesCostCaller.CreateCall<LaborCostsAggregatedInfo>(new object[] { users, dateFrom, dateTo });
        }

        public IServiceMethodCall<Dictionary<User, List<AttendanceInfoForDay>>> GetEmployerAttendanceInfosForRoles(List<Role> roles, DateInterval dateInterval)
        {
            return getEmployerAttendanceInfosForRolesCaller.CreateCall<Dictionary<User, List<AttendanceInfoForDay>>>(new object[] { roles, dateInterval });
        }

        public IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>> GetEmployerAttendanceInfosForRolesByDepartments(List<Role> roles, List<DepartmentEntity> departments, DateInterval dateInterval)
        {
            return getEmployerAttendanceInfosForRolesByDepartmentsCaller.CreateCall<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>>(new object[] { roles, departments, dateInterval });
        }

        public IServiceMethodCall<List<EmployeeTransactionInfo>> GetLastUserTransactionsInfo(User employee, int maxResults)
        {
            return getLastUserTransactionsInfoCaller.CreateCall<List<EmployeeTransactionInfo>>(new object[] { employee, maxResults });
        }

        public IServiceMethodCall<HashSet<User>> GetUsersWorkedInPeriod(DateInfo dateFrom, DateInfo dateTo)
        {
            return getUsersWorkedInPeriodCaller.CreateCall<HashSet<User>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<PersonalReport> SelectPersonalReport(User user, DateInterval dateInterval, HashSet<DepartmentEntity> departments)
        {
            return selectPersonalReportCaller.CreateCall<PersonalReport>(new object[] { user, dateInterval, departments });
        }

        public IServiceMethodCall<List<PersonalReportRow>> SelectPersonalReportRows(User user, DateInterval dateInterval)
        {
            return selectPersonalReportRowsCaller.CreateCall<List<PersonalReportRow>>(new object[] { user, dateInterval });
        }

        public IServiceMethodCall<SalaryReport> SelectSalaryReportByDepartments(DateInterval dateInterval, HashSet<DepartmentEntity> departmentsSet, bool showAllEmployees)
        {
            return selectSalaryReportByDepartmentsCaller.CreateCall<SalaryReport>(new object[] { dateInterval, departmentsSet, showAllEmployees });
        }

        #endregion

        #region asynchronous version
        public void GetEmployeeTransactionTotalsOnDate(User employee, DateInterval interval, AsyncErrorHandler errorHandler, Action<EmployeeTransactionsAggregatedInfo> resultHandler)
        {
            getEmployeeTransactionTotalsOnDateCaller.CallAsync(new object[] {employee, interval}, resultHandler, errorHandler);
        }

        public void GetEmployeesCost(List<User> users, DateInfo dateFrom, DateInfo dateTo, AsyncErrorHandler errorHandler, Action<LaborCostsAggregatedInfo> resultHandler)
        {
            getEmployeesCostCaller.CallAsync(new object[] {users, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetEmployerAttendanceInfosForRoles(List<Role> roles, DateInterval dateInterval, AsyncErrorHandler errorHandler, Action<Dictionary<User, List<AttendanceInfoForDay>>> resultHandler)
        {
            getEmployerAttendanceInfosForRolesCaller.CallAsync(new object[] {roles, dateInterval}, resultHandler, errorHandler);
        }

        public void GetEmployerAttendanceInfosForRolesByDepartments(List<Role> roles, List<DepartmentEntity> departments, DateInterval dateInterval, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>> resultHandler)
        {
            getEmployerAttendanceInfosForRolesByDepartmentsCaller.CallAsync(new object[] {roles, departments, dateInterval}, resultHandler, errorHandler);
        }

        public void GetLastUserTransactionsInfo(User employee, int maxResults, AsyncErrorHandler errorHandler, Action<List<EmployeeTransactionInfo>> resultHandler)
        {
            getLastUserTransactionsInfoCaller.CallAsync(new object[] {employee, maxResults}, resultHandler, errorHandler);
        }

        public void GetUsersWorkedInPeriod(DateInfo dateFrom, DateInfo dateTo, AsyncErrorHandler errorHandler, Action<HashSet<User>> resultHandler)
        {
            getUsersWorkedInPeriodCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void SelectPersonalReport(User user, DateInterval dateInterval, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<PersonalReport> resultHandler)
        {
            selectPersonalReportCaller.CallAsync(new object[] {user, dateInterval, departments}, resultHandler, errorHandler);
        }

        public void SelectPersonalReportRows(User user, DateInterval dateInterval, AsyncErrorHandler errorHandler, Action<List<PersonalReportRow>> resultHandler)
        {
            selectPersonalReportRowsCaller.CallAsync(new object[] {user, dateInterval}, resultHandler, errorHandler);
        }

        public void SelectSalaryReportByDepartments(DateInterval dateInterval, HashSet<DepartmentEntity> departmentsSet, bool showAllEmployees, AsyncErrorHandler errorHandler, Action<SalaryReport> resultHandler)
        {
            selectSalaryReportByDepartmentsCaller.CallAsync(new object[] {dateInterval, departmentsSet, showAllEmployees}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EmployeeTransactionsAggregatedInfo> GetEmployeeTransactionTotalsOnDate(User employee, DateInterval interval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEmployeeTransactionTotalsOnDateCaller.Call<EmployeeTransactionsAggregatedInfo>(new object[] { employee, interval }, asyncState, requestTimeout);
        }

        public Task<LaborCostsAggregatedInfo> GetEmployeesCost(List<User> users, DateInfo dateFrom, DateInfo dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEmployeesCostCaller.Call<LaborCostsAggregatedInfo>(new object[] { users, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<Dictionary<User, List<AttendanceInfoForDay>>> GetEmployerAttendanceInfosForRoles(List<Role> roles, DateInterval dateInterval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEmployerAttendanceInfosForRolesCaller.Call<Dictionary<User, List<AttendanceInfoForDay>>>(new object[] { roles, dateInterval }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>> GetEmployerAttendanceInfosForRolesByDepartments(List<Role> roles, List<DepartmentEntity> departments, DateInterval dateInterval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEmployerAttendanceInfosForRolesByDepartmentsCaller.Call<Dictionary<DepartmentEntity, Dictionary<User, List<AttendanceInfoForDay>>>>(new object[] { roles, departments, dateInterval }, asyncState, requestTimeout);
        }

        public Task<List<EmployeeTransactionInfo>> GetLastUserTransactionsInfo(User employee, int maxResults, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLastUserTransactionsInfoCaller.Call<List<EmployeeTransactionInfo>>(new object[] { employee, maxResults }, asyncState, requestTimeout);
        }

        public Task<HashSet<User>> GetUsersWorkedInPeriod(DateInfo dateFrom, DateInfo dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUsersWorkedInPeriodCaller.Call<HashSet<User>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<PersonalReport> SelectPersonalReport(User user, DateInterval dateInterval, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectPersonalReportCaller.Call<PersonalReport>(new object[] { user, dateInterval, departments }, asyncState, requestTimeout);
        }

        public Task<List<PersonalReportRow>> SelectPersonalReportRows(User user, DateInterval dateInterval, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectPersonalReportRowsCaller.Call<List<PersonalReportRow>>(new object[] { user, dateInterval }, asyncState, requestTimeout);
        }

        public Task<SalaryReport> SelectSalaryReportByDepartments(DateInterval dateInterval, HashSet<DepartmentEntity> departmentsSet, bool showAllEmployees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectSalaryReportByDepartmentsCaller.Call<SalaryReport>(new object[] { dateInterval, departmentsSet, showAllEmployees }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoCardService : IIikoCardService
    {
        private readonly RemoteMethodCaller fireIikoCardObjectCreatedCaller;
        private readonly RemoteMethodCaller fireIikoCardObjectDeletedCaller;
        private readonly RemoteMethodCaller fireIikoCardObjectModifiedCaller;
        private readonly RemoteMethodCaller updateIikoCardSettingsCaller;

        internal IikoCardService()
        {

            fireIikoCardObjectCreatedCaller = new RemoteMethodCaller("iikoCard", "fireIikoCardObjectCreated");
            fireIikoCardObjectCreatedCaller.AddArg("comment", typeof(string));

            fireIikoCardObjectDeletedCaller = new RemoteMethodCaller("iikoCard", "fireIikoCardObjectDeleted");
            fireIikoCardObjectDeletedCaller.AddArg("comment", typeof(string));

            fireIikoCardObjectModifiedCaller = new RemoteMethodCaller("iikoCard", "fireIikoCardObjectModified");
            fireIikoCardObjectModifiedCaller.AddArg("comment", typeof(string));

            updateIikoCardSettingsCaller = new RemoteMethodCaller("iikoCard", "updateIikoCardSettings");
            updateIikoCardSettingsCaller.AddArg("iikoCardSettings", typeof(ByValue<IikoCardSettings>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> FireIikoCardObjectCreated(string comment)
        {
            return fireIikoCardObjectCreatedCaller.CreateCall<object>(new object[] { comment });
        }

        public IServiceMethodCall<object> FireIikoCardObjectDeleted(string comment)
        {
            return fireIikoCardObjectDeletedCaller.CreateCall<object>(new object[] { comment });
        }

        public IServiceMethodCall<object> FireIikoCardObjectModified(string comment)
        {
            return fireIikoCardObjectModifiedCaller.CreateCall<object>(new object[] { comment });
        }

        public IServiceMethodCall<object> UpdateIikoCardSettings(ByValue<IikoCardSettings> iikoCardSettings)
        {
            return updateIikoCardSettingsCaller.CreateCall<object>(new object[] { iikoCardSettings });
        }

        #endregion

        #region asynchronous version
        public void FireIikoCardObjectCreated(string comment, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            fireIikoCardObjectCreatedCaller.CallAsync(new object[] {comment}, resultHandler, errorHandler);
        }

        public void FireIikoCardObjectDeleted(string comment, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            fireIikoCardObjectDeletedCaller.CallAsync(new object[] {comment}, resultHandler, errorHandler);
        }

        public void FireIikoCardObjectModified(string comment, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            fireIikoCardObjectModifiedCaller.CallAsync(new object[] {comment}, resultHandler, errorHandler);
        }

        public void UpdateIikoCardSettings(ByValue<IikoCardSettings> iikoCardSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateIikoCardSettingsCaller.CallAsync(new object[] {iikoCardSettings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> FireIikoCardObjectCreated(string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fireIikoCardObjectCreatedCaller.Call<object>(new object[] { comment }, asyncState, requestTimeout);
        }

        public Task<object> FireIikoCardObjectDeleted(string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fireIikoCardObjectDeletedCaller.Call<object>(new object[] { comment }, asyncState, requestTimeout);
        }

        public Task<object> FireIikoCardObjectModified(string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fireIikoCardObjectModifiedCaller.Call<object>(new object[] { comment }, asyncState, requestTimeout);
        }

        public Task<object> UpdateIikoCardSettings(ByValue<IikoCardSettings> iikoCardSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateIikoCardSettingsCaller.Call<object>(new object[] { iikoCardSettings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoNewsService : IIikoNewsService
    {
        private readonly RemoteMethodCaller saveNewsCaller;

        internal IikoNewsService()
        {

            saveNewsCaller = new RemoteMethodCaller("iikoNews", "saveNews");
            saveNewsCaller.AddArg("iikoNewsItems", typeof(List<ByValue<IikoNewsItem>>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> SaveNews(List<ByValue<IikoNewsItem>> iikoNewsItems)
        {
            return saveNewsCaller.CreateCall<object>(new object[] { iikoNewsItems });
        }

        #endregion

        #region asynchronous version
        public void SaveNews(List<ByValue<IikoNewsItem>> iikoNewsItems, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveNewsCaller.CallAsync(new object[] {iikoNewsItems}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> SaveNews(List<ByValue<IikoNewsItem>> iikoNewsItems, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveNewsCaller.Call<object>(new object[] { iikoNewsItems }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ImageService : IImageService
    {
        private readonly RemoteMethodCaller deleteImageCaller;
        private readonly RemoteMethodCaller loadImageAsBase64Caller;
        private readonly RemoteMethodCaller saveOrUpdateImageCaller;
        private readonly RemoteMethodCaller tryLoadImageByIdRevisionCheckSumCaller;

        internal ImageService()
        {

            deleteImageCaller = new RemoteMethodCaller("images", "deleteImage");
            deleteImageCaller.AddArg("imageID", typeof(Guid?));

            loadImageAsBase64Caller = new RemoteMethodCaller("images", "loadImageAsBase64");
            loadImageAsBase64Caller.AddArg("imageID", typeof(Guid?));

            saveOrUpdateImageCaller = new RemoteMethodCaller("images", "saveOrUpdateImage");
            saveOrUpdateImageCaller.AddArg("imageDto", typeof(SavedImageRequest));

            tryLoadImageByIdRevisionCheckSumCaller = new RemoteMethodCaller("images", "tryLoadImageByIdRevisionCheckSum");
            tryLoadImageByIdRevisionCheckSumCaller.AddArg("imageID", typeof(Guid?));
            tryLoadImageByIdRevisionCheckSumCaller.AddArg("revision", typeof(int));
            tryLoadImageByIdRevisionCheckSumCaller.AddArg("checkSum", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> DeleteImage(Guid? imageID)
        {
            return deleteImageCaller.CreateCall<object>(new object[] { imageID });
        }

        public IServiceMethodCall<string> LoadImageAsBase64(Guid? imageID)
        {
            return loadImageAsBase64Caller.CreateCall<string>(new object[] { imageID });
        }

        public IServiceMethodCall<object> SaveOrUpdateImage(SavedImageRequest imageDto)
        {
            return saveOrUpdateImageCaller.CreateCall<object>(new object[] { imageDto });
        }

        public IServiceMethodCall<string> TryLoadImageByIdRevisionCheckSum(Guid? imageID, int revision, string checkSum)
        {
            return tryLoadImageByIdRevisionCheckSumCaller.CreateCall<string>(new object[] { imageID, revision, checkSum });
        }

        #endregion

        #region asynchronous version
        public void DeleteImage(Guid? imageID, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteImageCaller.CallAsync(new object[] {imageID}, resultHandler, errorHandler);
        }

        public void LoadImageAsBase64(Guid? imageID, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            loadImageAsBase64Caller.CallAsync(new object[] {imageID}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateImage(SavedImageRequest imageDto, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateImageCaller.CallAsync(new object[] {imageDto}, resultHandler, errorHandler);
        }

        public void TryLoadImageByIdRevisionCheckSum(Guid? imageID, int revision, string checkSum, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            tryLoadImageByIdRevisionCheckSumCaller.CallAsync(new object[] {imageID, revision, checkSum}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> DeleteImage(Guid? imageID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteImageCaller.Call<object>(new object[] { imageID }, asyncState, requestTimeout);
        }

        public Task<string> LoadImageAsBase64(Guid? imageID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return loadImageAsBase64Caller.Call<string>(new object[] { imageID }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateImage(SavedImageRequest imageDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateImageCaller.Call<object>(new object[] { imageDto }, asyncState, requestTimeout);
        }

        public Task<string> TryLoadImageByIdRevisionCheckSum(Guid? imageID, int revision, string checkSum, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return tryLoadImageByIdRevisionCheckSumCaller.Call<string>(new object[] { imageID, revision, checkSum }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class NoticeService : INoticeService
    {
        private readonly RemoteMethodCaller getNoticesByRevisionCaller;

        internal NoticeService()
        {

            getNoticesByRevisionCaller = new RemoteMethodCaller("notices", "getNoticesByRevision");
            getNoticesByRevisionCaller.AddArg("revision", typeof(int));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<Notice>> GetNoticesByRevision(int revision)
        {
            return getNoticesByRevisionCaller.CreateCall<ICollection<Notice>>(new object[] { revision });
        }

        #endregion

        #region asynchronous version
        public void GetNoticesByRevision(int revision, AsyncErrorHandler errorHandler, Action<ICollection<Notice>> resultHandler)
        {
            getNoticesByRevisionCaller.CallAsync(new object[] {revision}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<Notice>> GetNoticesByRevision(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNoticesByRevisionCaller.Call<ICollection<Notice>>(new object[] { revision }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ScheduledPaymentService : IScheduledPaymentService
    {
        private readonly RemoteMethodCaller changePaidStatusOfScheduledPaymentsCaller;
        private readonly RemoteMethodCaller createScheduledPaymentsTransactionsCaller;
        private readonly RemoteMethodCaller deleteScheduledPaymentsCaller;
        private readonly RemoteMethodCaller deleteScheduledPaymentsRequestsCaller;
        private readonly RemoteMethodCaller generateScheduledPaymentsCaller;
        private readonly RemoteMethodCaller getExistsScheduledPaymentsTransactionsCaller;
        private readonly RemoteMethodCaller getGenerateScheduledPaymentsCountCaller;
        private readonly RemoteMethodCaller getScheduledPaymentsCaller;
        private readonly RemoteMethodCaller getScheduledPaymentsRequestsCaller;
        private readonly RemoteMethodCaller saveScheduledPaymentCaller;
        private readonly RemoteMethodCaller saveScheduledPaymentRequestCaller;
        private readonly RemoteMethodCaller undeleteScheduledPaymentsRequestsCaller;

        internal ScheduledPaymentService()
        {

            changePaidStatusOfScheduledPaymentsCaller = new RemoteMethodCaller("scheduledPayment", "changePaidStatusOfScheduledPayments");
            changePaidStatusOfScheduledPaymentsCaller.AddArg("payments", typeof(List<AbstractScheduledPayment>));
            changePaidStatusOfScheduledPaymentsCaller.AddArg("isPaid", typeof(bool));

            createScheduledPaymentsTransactionsCaller = new RemoteMethodCaller("scheduledPayment", "createScheduledPaymentsTransactions");
            createScheduledPaymentsTransactionsCaller.AddArg("payments", typeof(List<AbstractScheduledPayment>));

            deleteScheduledPaymentsCaller = new RemoteMethodCaller("scheduledPayment", "deleteScheduledPayments");
            deleteScheduledPaymentsCaller.AddArg("paymentsIds", typeof(List<Guid>));

            deleteScheduledPaymentsRequestsCaller = new RemoteMethodCaller("scheduledPayment", "deleteScheduledPaymentsRequests");
            deleteScheduledPaymentsRequestsCaller.AddArg("paymentRequestsIds", typeof(List<Guid>));

            generateScheduledPaymentsCaller = new RemoteMethodCaller("scheduledPayment", "generateScheduledPayments");
            generateScheduledPaymentsCaller.AddArg("paymentRequests", typeof(List<AbstractScheduledPaymentRequest>));
            generateScheduledPaymentsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getExistsScheduledPaymentsTransactionsCaller = new RemoteMethodCaller("scheduledPayment", "getExistsScheduledPaymentsTransactions");
            getExistsScheduledPaymentsTransactionsCaller.AddArg("payments", typeof(List<AbstractScheduledPayment>));

            getGenerateScheduledPaymentsCountCaller = new RemoteMethodCaller("scheduledPayment", "getGenerateScheduledPaymentsCount");
            getGenerateScheduledPaymentsCountCaller.AddArg("paymentRequests", typeof(List<AbstractScheduledPaymentRequest>));
            getGenerateScheduledPaymentsCountCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getScheduledPaymentsCaller = new RemoteMethodCaller("scheduledPayment", "getScheduledPayments");
            getScheduledPaymentsCaller.AddArg("from", typeof(DateTime?));
            getScheduledPaymentsCaller.AddArg("to", typeof(DateTime?));
            getScheduledPaymentsCaller.AddArg("type", typeof(ScheduledPaymentType));
            getScheduledPaymentsCaller.AddArg("isPaid", typeof(bool?));
            getScheduledPaymentsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getScheduledPaymentsRequestsCaller = new RemoteMethodCaller("scheduledPayment", "getScheduledPaymentsRequests");
            getScheduledPaymentsRequestsCaller.AddArg("from", typeof(DateTime?));
            getScheduledPaymentsRequestsCaller.AddArg("to", typeof(DateTime?));
            getScheduledPaymentsRequestsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            saveScheduledPaymentCaller = new RemoteMethodCaller("scheduledPayment", "saveScheduledPayment");
            saveScheduledPaymentCaller.AddArg("payment", typeof(AbstractScheduledPayment));

            saveScheduledPaymentRequestCaller = new RemoteMethodCaller("scheduledPayment", "saveScheduledPaymentRequest");
            saveScheduledPaymentRequestCaller.AddArg("paymentRequest", typeof(AbstractScheduledPaymentRequest));

            undeleteScheduledPaymentsRequestsCaller = new RemoteMethodCaller("scheduledPayment", "undeleteScheduledPaymentsRequests");
            undeleteScheduledPaymentsRequestsCaller.AddArg("paymentRequestsIds", typeof(List<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<List<ChangePaymentStatusResult>> ChangePaidStatusOfScheduledPayments(List<AbstractScheduledPayment> payments, bool isPaid)
        {
            return changePaidStatusOfScheduledPaymentsCaller.CreateCall<List<ChangePaymentStatusResult>>(new object[] { payments, isPaid });
        }

        public IServiceMethodCall<List<CreateTransactionResult>> CreateScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments)
        {
            return createScheduledPaymentsTransactionsCaller.CreateCall<List<CreateTransactionResult>>(new object[] { payments });
        }

        public IServiceMethodCall<List<DeletePaymentResult>> DeleteScheduledPayments(List<Guid> paymentsIds)
        {
            return deleteScheduledPaymentsCaller.CreateCall<List<DeletePaymentResult>>(new object[] { paymentsIds });
        }

        public IServiceMethodCall<object> DeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds)
        {
            return deleteScheduledPaymentsRequestsCaller.CreateCall<object>(new object[] { paymentRequestsIds });
        }

        public IServiceMethodCall<List<GeneratePaymentsResult>> GenerateScheduledPayments(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments)
        {
            return generateScheduledPaymentsCaller.CreateCall<List<GeneratePaymentsResult>>(new object[] { paymentRequests, departments });
        }

        public IServiceMethodCall<List<GetTransactionResult>> GetExistsScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments)
        {
            return getExistsScheduledPaymentsTransactionsCaller.CreateCall<List<GetTransactionResult>>(new object[] { payments });
        }

        public IServiceMethodCall<int> GetGenerateScheduledPaymentsCount(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments)
        {
            return getGenerateScheduledPaymentsCountCaller.CreateCall<int>(new object[] { paymentRequests, departments });
        }

        public IServiceMethodCall<List<AbstractScheduledPayment>> GetScheduledPayments(DateTime? from, DateTime? to, ScheduledPaymentType type, bool? isPaid, ICollection<DepartmentEntity> departments)
        {
            return getScheduledPaymentsCaller.CreateCall<List<AbstractScheduledPayment>>(new object[] { from, to, type, isPaid, departments });
        }

        public IServiceMethodCall<List<AbstractScheduledPaymentRequest>> GetScheduledPaymentsRequests(DateTime? from, DateTime? to, ICollection<DepartmentEntity> departments)
        {
            return getScheduledPaymentsRequestsCaller.CreateCall<List<AbstractScheduledPaymentRequest>>(new object[] { from, to, departments });
        }

        public IServiceMethodCall<AbstractScheduledPayment> SaveScheduledPayment(AbstractScheduledPayment payment)
        {
            return saveScheduledPaymentCaller.CreateCall<AbstractScheduledPayment>(new object[] { payment });
        }

        public IServiceMethodCall<AbstractScheduledPaymentRequest> SaveScheduledPaymentRequest(AbstractScheduledPaymentRequest paymentRequest)
        {
            return saveScheduledPaymentRequestCaller.CreateCall<AbstractScheduledPaymentRequest>(new object[] { paymentRequest });
        }

        public IServiceMethodCall<object> UndeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds)
        {
            return undeleteScheduledPaymentsRequestsCaller.CreateCall<object>(new object[] { paymentRequestsIds });
        }

        #endregion

        #region asynchronous version
        public void ChangePaidStatusOfScheduledPayments(List<AbstractScheduledPayment> payments, bool isPaid, AsyncErrorHandler errorHandler, Action<List<ChangePaymentStatusResult>> resultHandler)
        {
            changePaidStatusOfScheduledPaymentsCaller.CallAsync(new object[] {payments, isPaid}, resultHandler, errorHandler);
        }

        public void CreateScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, AsyncErrorHandler errorHandler, Action<List<CreateTransactionResult>> resultHandler)
        {
            createScheduledPaymentsTransactionsCaller.CallAsync(new object[] {payments}, resultHandler, errorHandler);
        }

        public void DeleteScheduledPayments(List<Guid> paymentsIds, AsyncErrorHandler errorHandler, Action<List<DeletePaymentResult>> resultHandler)
        {
            deleteScheduledPaymentsCaller.CallAsync(new object[] {paymentsIds}, resultHandler, errorHandler);
        }

        public void DeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteScheduledPaymentsRequestsCaller.CallAsync(new object[] {paymentRequestsIds}, resultHandler, errorHandler);
        }

        public void GenerateScheduledPayments(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<GeneratePaymentsResult>> resultHandler)
        {
            generateScheduledPaymentsCaller.CallAsync(new object[] {paymentRequests, departments}, resultHandler, errorHandler);
        }

        public void GetExistsScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, AsyncErrorHandler errorHandler, Action<List<GetTransactionResult>> resultHandler)
        {
            getExistsScheduledPaymentsTransactionsCaller.CallAsync(new object[] {payments}, resultHandler, errorHandler);
        }

        public void GetGenerateScheduledPaymentsCount(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            getGenerateScheduledPaymentsCountCaller.CallAsync(new object[] {paymentRequests, departments}, resultHandler, errorHandler);
        }

        public void GetScheduledPayments(DateTime? from, DateTime? to, ScheduledPaymentType type, bool? isPaid, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<AbstractScheduledPayment>> resultHandler)
        {
            getScheduledPaymentsCaller.CallAsync(new object[] {from, to, type, isPaid, departments}, resultHandler, errorHandler);
        }

        public void GetScheduledPaymentsRequests(DateTime? from, DateTime? to, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<AbstractScheduledPaymentRequest>> resultHandler)
        {
            getScheduledPaymentsRequestsCaller.CallAsync(new object[] {from, to, departments}, resultHandler, errorHandler);
        }

        public void SaveScheduledPayment(AbstractScheduledPayment payment, AsyncErrorHandler errorHandler, Action<AbstractScheduledPayment> resultHandler)
        {
            saveScheduledPaymentCaller.CallAsync(new object[] {payment}, resultHandler, errorHandler);
        }

        public void SaveScheduledPaymentRequest(AbstractScheduledPaymentRequest paymentRequest, AsyncErrorHandler errorHandler, Action<AbstractScheduledPaymentRequest> resultHandler)
        {
            saveScheduledPaymentRequestCaller.CallAsync(new object[] {paymentRequest}, resultHandler, errorHandler);
        }

        public void UndeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteScheduledPaymentsRequestsCaller.CallAsync(new object[] {paymentRequestsIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<List<ChangePaymentStatusResult>> ChangePaidStatusOfScheduledPayments(List<AbstractScheduledPayment> payments, bool isPaid, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return changePaidStatusOfScheduledPaymentsCaller.Call<List<ChangePaymentStatusResult>>(new object[] { payments, isPaid }, asyncState, requestTimeout);
        }

        public Task<List<CreateTransactionResult>> CreateScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createScheduledPaymentsTransactionsCaller.Call<List<CreateTransactionResult>>(new object[] { payments }, asyncState, requestTimeout);
        }

        public Task<List<DeletePaymentResult>> DeleteScheduledPayments(List<Guid> paymentsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteScheduledPaymentsCaller.Call<List<DeletePaymentResult>>(new object[] { paymentsIds }, asyncState, requestTimeout);
        }

        public Task<object> DeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteScheduledPaymentsRequestsCaller.Call<object>(new object[] { paymentRequestsIds }, asyncState, requestTimeout);
        }

        public Task<List<GeneratePaymentsResult>> GenerateScheduledPayments(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return generateScheduledPaymentsCaller.Call<List<GeneratePaymentsResult>>(new object[] { paymentRequests, departments }, asyncState, requestTimeout);
        }

        public Task<List<GetTransactionResult>> GetExistsScheduledPaymentsTransactions(List<AbstractScheduledPayment> payments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getExistsScheduledPaymentsTransactionsCaller.Call<List<GetTransactionResult>>(new object[] { payments }, asyncState, requestTimeout);
        }

        public Task<int> GetGenerateScheduledPaymentsCount(List<AbstractScheduledPaymentRequest> paymentRequests, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getGenerateScheduledPaymentsCountCaller.Call<int>(new object[] { paymentRequests, departments }, asyncState, requestTimeout);
        }

        public Task<List<AbstractScheduledPayment>> GetScheduledPayments(DateTime? from, DateTime? to, ScheduledPaymentType type, bool? isPaid, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getScheduledPaymentsCaller.Call<List<AbstractScheduledPayment>>(new object[] { from, to, type, isPaid, departments }, asyncState, requestTimeout);
        }

        public Task<List<AbstractScheduledPaymentRequest>> GetScheduledPaymentsRequests(DateTime? from, DateTime? to, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getScheduledPaymentsRequestsCaller.Call<List<AbstractScheduledPaymentRequest>>(new object[] { from, to, departments }, asyncState, requestTimeout);
        }

        public Task<AbstractScheduledPayment> SaveScheduledPayment(AbstractScheduledPayment payment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveScheduledPaymentCaller.Call<AbstractScheduledPayment>(new object[] { payment }, asyncState, requestTimeout);
        }

        public Task<AbstractScheduledPaymentRequest> SaveScheduledPaymentRequest(AbstractScheduledPaymentRequest paymentRequest, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveScheduledPaymentRequestCaller.Call<AbstractScheduledPaymentRequest>(new object[] { paymentRequest }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteScheduledPaymentsRequests(List<Guid> paymentRequestsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteScheduledPaymentsRequestsCaller.Call<object>(new object[] { paymentRequestsIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ClientPriceCategoryService : IClientPriceCategoryService
    {
        private readonly RemoteMethodCaller createCategoryCaller;
        private readonly RemoteMethodCaller generateNextCodeCaller;
        private readonly RemoteMethodCaller setCategoriesDeletedCaller;
        private readonly RemoteMethodCaller updateCategoryCaller;

        internal ClientPriceCategoryService()
        {

            createCategoryCaller = new RemoteMethodCaller("clientPriceCategory", "createCategory");
            createCategoryCaller.AddArg("category", typeof(ByValue<ClientPriceCategory>));

            generateNextCodeCaller = new RemoteMethodCaller("clientPriceCategory", "generateNextCode");

            setCategoriesDeletedCaller = new RemoteMethodCaller("clientPriceCategory", "setCategoriesDeleted");
            setCategoriesDeletedCaller.AddArg("categories", typeof(ICollection<ClientPriceCategory>));
            setCategoriesDeletedCaller.AddArg("deleted", typeof(bool));

            updateCategoryCaller = new RemoteMethodCaller("clientPriceCategory", "updateCategory");
            updateCategoryCaller.AddArg("category", typeof(ByValue<ClientPriceCategory>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ClientPriceCategory> CreateCategory(ByValue<ClientPriceCategory> category)
        {
            return createCategoryCaller.CreateCall<ClientPriceCategory>(new object[] { category });
        }

        public IServiceMethodCall<string> GenerateNextCode()
        {
            return generateNextCodeCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<object> SetCategoriesDeleted(ICollection<ClientPriceCategory> categories, bool deleted)
        {
            return setCategoriesDeletedCaller.CreateCall<object>(new object[] { categories, deleted });
        }

        public IServiceMethodCall<ClientPriceCategory> UpdateCategory(ByValue<ClientPriceCategory> category)
        {
            return updateCategoryCaller.CreateCall<ClientPriceCategory>(new object[] { category });
        }

        #endregion

        #region asynchronous version
        public void CreateCategory(ByValue<ClientPriceCategory> category, AsyncErrorHandler errorHandler, Action<ClientPriceCategory> resultHandler)
        {
            createCategoryCaller.CallAsync(new object[] {category}, resultHandler, errorHandler);
        }

        public void GenerateNextCode(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            generateNextCodeCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SetCategoriesDeleted(ICollection<ClientPriceCategory> categories, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCategoriesDeletedCaller.CallAsync(new object[] {categories, deleted}, resultHandler, errorHandler);
        }

        public void UpdateCategory(ByValue<ClientPriceCategory> category, AsyncErrorHandler errorHandler, Action<ClientPriceCategory> resultHandler)
        {
            updateCategoryCaller.CallAsync(new object[] {category}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ClientPriceCategory> CreateCategory(ByValue<ClientPriceCategory> category, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createCategoryCaller.Call<ClientPriceCategory>(new object[] { category }, asyncState, requestTimeout);
        }

        public Task<string> GenerateNextCode([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return generateNextCodeCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SetCategoriesDeleted(ICollection<ClientPriceCategory> categories, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCategoriesDeletedCaller.Call<object>(new object[] { categories, deleted }, asyncState, requestTimeout);
        }

        public Task<ClientPriceCategory> UpdateCategory(ByValue<ClientPriceCategory> category, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateCategoryCaller.Call<ClientPriceCategory>(new object[] { category }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PricingService : IPricingService
    {
        private readonly RemoteMethodCaller calculatePriceMarkupsForDepartmentCaller;
        private readonly RemoteMethodCaller calculatePriceMarkupsForDepartmentsCaller;
        private readonly RemoteMethodCaller calculatePriceMarkupsForStoreCaller;
        private readonly RemoteMethodCaller calculatePriceMarkupsForStoresCaller;
        private readonly RemoteMethodCaller calculatePricesForCategoryCaller;
        private readonly RemoteMethodCaller calculatePricesForCategoryForMenuTemplateCaller;

        internal PricingService()
        {

            calculatePriceMarkupsForDepartmentCaller = new RemoteMethodCaller("pricing", "calculatePriceMarkupsForDepartment");
            calculatePriceMarkupsForDepartmentCaller.AddArg("department", typeof(DepartmentEntity));
            calculatePriceMarkupsForDepartmentCaller.AddArg("pricingParams", typeof(PricingParameters));

            calculatePriceMarkupsForDepartmentsCaller = new RemoteMethodCaller("pricing", "calculatePriceMarkupsForDepartments");
            calculatePriceMarkupsForDepartmentsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            calculatePriceMarkupsForDepartmentsCaller.AddArg("pricingParams", typeof(PricingParameters));

            calculatePriceMarkupsForStoreCaller = new RemoteMethodCaller("pricing", "calculatePriceMarkupsForStore");
            calculatePriceMarkupsForStoreCaller.AddArg("store", typeof(Store));
            calculatePriceMarkupsForStoreCaller.AddArg("pricingParams", typeof(PricingParameters));

            calculatePriceMarkupsForStoresCaller = new RemoteMethodCaller("pricing", "calculatePriceMarkupsForStores");
            calculatePriceMarkupsForStoresCaller.AddArg("pricingParamsByStores", typeof(Dictionary<Store, PricingParameters>));

            calculatePricesForCategoryCaller = new RemoteMethodCaller("pricing", "calculatePricesForCategory");
            calculatePricesForCategoryCaller.AddArg("basePrices", typeof(Dictionary<PriceListItemKey, decimal>));
            calculatePricesForCategoryCaller.AddArg("strategy", typeof(PricingStrategy));

            calculatePricesForCategoryForMenuTemplateCaller = new RemoteMethodCaller("pricing", "calculatePricesForCategoryForMenuTemplate");
            calculatePricesForCategoryForMenuTemplateCaller.AddArg("basePrices", typeof(Dictionary<ProductSizeKey, decimal>));
            calculatePricesForCategoryForMenuTemplateCaller.AddArg("strategy", typeof(PricingStrategy));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForDepartment(DepartmentEntity department, PricingParameters pricingParams)
        {
            return calculatePriceMarkupsForDepartmentCaller.CreateCall<Dictionary<Product, PricingInfo>>(new object[] { department, pricingParams });
        }

        public IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForDepartments(ICollection<DepartmentEntity> departments, PricingParameters pricingParams)
        {
            return calculatePriceMarkupsForDepartmentsCaller.CreateCall<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>>(new object[] { departments, pricingParams });
        }

        public IServiceMethodCall<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForStore(Store store, PricingParameters pricingParams)
        {
            return calculatePriceMarkupsForStoreCaller.CreateCall<Dictionary<Product, PricingInfo>>(new object[] { store, pricingParams });
        }

        public IServiceMethodCall<Dictionary<Store, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForStores(Dictionary<Store, PricingParameters> pricingParamsByStores)
        {
            return calculatePriceMarkupsForStoresCaller.CreateCall<Dictionary<Store, Dictionary<Product, PricingInfo>>>(new object[] { pricingParamsByStores });
        }

        public IServiceMethodCall<Dictionary<PriceListItemKey, decimal>> CalculatePricesForCategory(Dictionary<PriceListItemKey, decimal> basePrices, PricingStrategy strategy)
        {
            return calculatePricesForCategoryCaller.CreateCall<Dictionary<PriceListItemKey, decimal>>(new object[] { basePrices, strategy });
        }

        public IServiceMethodCall<Dictionary<ProductSizeKey, decimal>> CalculatePricesForCategoryForMenuTemplate(Dictionary<ProductSizeKey, decimal> basePrices, PricingStrategy strategy)
        {
            return calculatePricesForCategoryForMenuTemplateCaller.CreateCall<Dictionary<ProductSizeKey, decimal>>(new object[] { basePrices, strategy });
        }

        #endregion

        #region asynchronous version
        public void CalculatePriceMarkupsForDepartment(DepartmentEntity department, PricingParameters pricingParams, AsyncErrorHandler errorHandler, Action<Dictionary<Product, PricingInfo>> resultHandler)
        {
            calculatePriceMarkupsForDepartmentCaller.CallAsync(new object[] {department, pricingParams}, resultHandler, errorHandler);
        }

        public void CalculatePriceMarkupsForDepartments(ICollection<DepartmentEntity> departments, PricingParameters pricingParams, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>> resultHandler)
        {
            calculatePriceMarkupsForDepartmentsCaller.CallAsync(new object[] {departments, pricingParams}, resultHandler, errorHandler);
        }

        public void CalculatePriceMarkupsForStore(Store store, PricingParameters pricingParams, AsyncErrorHandler errorHandler, Action<Dictionary<Product, PricingInfo>> resultHandler)
        {
            calculatePriceMarkupsForStoreCaller.CallAsync(new object[] {store, pricingParams}, resultHandler, errorHandler);
        }

        public void CalculatePriceMarkupsForStores(Dictionary<Store, PricingParameters> pricingParamsByStores, AsyncErrorHandler errorHandler, Action<Dictionary<Store, Dictionary<Product, PricingInfo>>> resultHandler)
        {
            calculatePriceMarkupsForStoresCaller.CallAsync(new object[] {pricingParamsByStores}, resultHandler, errorHandler);
        }

        public void CalculatePricesForCategory(Dictionary<PriceListItemKey, decimal> basePrices, PricingStrategy strategy, AsyncErrorHandler errorHandler, Action<Dictionary<PriceListItemKey, decimal>> resultHandler)
        {
            calculatePricesForCategoryCaller.CallAsync(new object[] {basePrices, strategy}, resultHandler, errorHandler);
        }

        public void CalculatePricesForCategoryForMenuTemplate(Dictionary<ProductSizeKey, decimal> basePrices, PricingStrategy strategy, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeKey, decimal>> resultHandler)
        {
            calculatePricesForCategoryForMenuTemplateCaller.CallAsync(new object[] {basePrices, strategy}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForDepartment(DepartmentEntity department, PricingParameters pricingParams, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePriceMarkupsForDepartmentCaller.Call<Dictionary<Product, PricingInfo>>(new object[] { department, pricingParams }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForDepartments(ICollection<DepartmentEntity> departments, PricingParameters pricingParams, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePriceMarkupsForDepartmentsCaller.Call<Dictionary<DepartmentEntity, Dictionary<Product, PricingInfo>>>(new object[] { departments, pricingParams }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, PricingInfo>> CalculatePriceMarkupsForStore(Store store, PricingParameters pricingParams, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePriceMarkupsForStoreCaller.Call<Dictionary<Product, PricingInfo>>(new object[] { store, pricingParams }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Store, Dictionary<Product, PricingInfo>>> CalculatePriceMarkupsForStores(Dictionary<Store, PricingParameters> pricingParamsByStores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePriceMarkupsForStoresCaller.Call<Dictionary<Store, Dictionary<Product, PricingInfo>>>(new object[] { pricingParamsByStores }, asyncState, requestTimeout);
        }

        public Task<Dictionary<PriceListItemKey, decimal>> CalculatePricesForCategory(Dictionary<PriceListItemKey, decimal> basePrices, PricingStrategy strategy, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePricesForCategoryCaller.Call<Dictionary<PriceListItemKey, decimal>>(new object[] { basePrices, strategy }, asyncState, requestTimeout);
        }

        public Task<Dictionary<ProductSizeKey, decimal>> CalculatePricesForCategoryForMenuTemplate(Dictionary<ProductSizeKey, decimal> basePrices, PricingStrategy strategy, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePricesForCategoryForMenuTemplateCaller.Call<Dictionary<ProductSizeKey, decimal>>(new object[] { basePrices, strategy }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class AccountingReportsService : IAccountingReportsService
    {
        private readonly RemoteMethodCaller selectBalanceCaller;
        private readonly RemoteMethodCaller selectProfitAndLossByDateDepartmentConceptionCaller;

        internal AccountingReportsService()
        {

            selectBalanceCaller = new RemoteMethodCaller("accounting_reports", "selectBalance");
            selectBalanceCaller.AddArg("dateAt", typeof(DateInfo));
            selectBalanceCaller.AddArg("department", typeof(ICollection<DepartmentEntity>));
            selectBalanceCaller.AddArg("detalization", typeof(DateDetalization));
            selectBalanceCaller.AddArg("detalizationFrom", typeof(DateInfo));

            selectProfitAndLossByDateDepartmentConceptionCaller = new RemoteMethodCaller("accounting_reports", "selectProfitAndLossByDateDepartmentConception");
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("dateFrom", typeof(DateInfo));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("dateTo", typeof(DateInfo));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("detalization", typeof(DateDetalization));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("businessDateSettings", typeof(BusinessDateSettings));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("conceptions", typeof(ICollection<Conception>));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("spreadNullConception", typeof(bool));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("includeRevenuePercent", typeof(bool));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("includeNullConception", typeof(bool));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("mergeEmptyConceptions", typeof(bool));
            selectProfitAndLossByDateDepartmentConceptionCaller.AddArg("selection", typeof(List<PnLSelectionType>));
        }

        #region Synchronous versions
        public IServiceMethodCall<BalanceReport> SelectBalance(DateInfo dateAt, ICollection<DepartmentEntity> department, DateDetalization detalization, DateInfo detalizationFrom)
        {
            return selectBalanceCaller.CreateCall<BalanceReport>(new object[] { dateAt, department, detalization, detalizationFrom });
        }

        public IServiceMethodCall<ProfitAndLossReport> SelectProfitAndLossByDateDepartmentConception(DateInfo dateFrom, DateInfo dateTo, DateDetalization detalization, BusinessDateSettings businessDateSettings, HashSet<DepartmentEntity> departments, ICollection<Conception> conceptions, bool spreadNullConception, bool includeRevenuePercent, bool includeNullConception, bool mergeEmptyConceptions, List<PnLSelectionType> selection)
        {
            return selectProfitAndLossByDateDepartmentConceptionCaller.CreateCall<ProfitAndLossReport>(new object[] { dateFrom, dateTo, detalization, businessDateSettings, departments, conceptions, spreadNullConception, includeRevenuePercent, includeNullConception, mergeEmptyConceptions, selection });
        }

        #endregion

        #region asynchronous version
        public void SelectBalance(DateInfo dateAt, ICollection<DepartmentEntity> department, DateDetalization detalization, DateInfo detalizationFrom, AsyncErrorHandler errorHandler, Action<BalanceReport> resultHandler)
        {
            selectBalanceCaller.CallAsync(new object[] {dateAt, department, detalization, detalizationFrom}, resultHandler, errorHandler);
        }

        public void SelectProfitAndLossByDateDepartmentConception(DateInfo dateFrom, DateInfo dateTo, DateDetalization detalization, BusinessDateSettings businessDateSettings, HashSet<DepartmentEntity> departments, ICollection<Conception> conceptions, bool spreadNullConception, bool includeRevenuePercent, bool includeNullConception, bool mergeEmptyConceptions, List<PnLSelectionType> selection, AsyncErrorHandler errorHandler, Action<ProfitAndLossReport> resultHandler)
        {
            selectProfitAndLossByDateDepartmentConceptionCaller.CallAsync(new object[] {dateFrom, dateTo, detalization, businessDateSettings, departments, conceptions, spreadNullConception, includeRevenuePercent, includeNullConception, mergeEmptyConceptions, selection}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<BalanceReport> SelectBalance(DateInfo dateAt, ICollection<DepartmentEntity> department, DateDetalization detalization, DateInfo detalizationFrom, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectBalanceCaller.Call<BalanceReport>(new object[] { dateAt, department, detalization, detalizationFrom }, asyncState, requestTimeout);
        }

        public Task<ProfitAndLossReport> SelectProfitAndLossByDateDepartmentConception(DateInfo dateFrom, DateInfo dateTo, DateDetalization detalization, BusinessDateSettings businessDateSettings, HashSet<DepartmentEntity> departments, ICollection<Conception> conceptions, bool spreadNullConception, bool includeRevenuePercent, bool includeNullConception, bool mergeEmptyConceptions, List<PnLSelectionType> selection, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectProfitAndLossByDateDepartmentConceptionCaller.Call<ProfitAndLossReport>(new object[] { dateFrom, dateTo, detalization, businessDateSettings, departments, conceptions, spreadNullConception, includeRevenuePercent, includeNullConception, mergeEmptyConceptions, selection }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class FrontReportsService : IFrontReportsService
    {
        private readonly RemoteMethodCaller addFrontReportCaller;
        private readonly RemoteMethodCaller deleteFrontReportCaller;
        private readonly RemoteMethodCaller setPrintOnCafeSessionCloseFlagCaller;
        private readonly RemoteMethodCaller undeleteFrontReportCaller;
        private readonly RemoteMethodCaller updateFrontReportCaller;

        internal FrontReportsService()
        {

            addFrontReportCaller = new RemoteMethodCaller("frontReports", "addFrontReport");
            addFrontReportCaller.AddArg("frontReport", typeof(ByValue<FrontReport>));

            deleteFrontReportCaller = new RemoteMethodCaller("frontReports", "deleteFrontReport");
            deleteFrontReportCaller.AddArg("frontReport", typeof(FrontReport));

            setPrintOnCafeSessionCloseFlagCaller = new RemoteMethodCaller("frontReports", "setPrintOnCafeSessionCloseFlag");
            setPrintOnCafeSessionCloseFlagCaller.AddArg("frontReportsWithPrintOnCafeSessionCloseFlags", typeof(Dictionary<FrontReport, bool>));

            undeleteFrontReportCaller = new RemoteMethodCaller("frontReports", "undeleteFrontReport");
            undeleteFrontReportCaller.AddArg("frontReport", typeof(FrontReport));

            updateFrontReportCaller = new RemoteMethodCaller("frontReports", "updateFrontReport");
            updateFrontReportCaller.AddArg("frontReport", typeof(ByValue<FrontReport>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddFrontReport(ByValue<FrontReport> frontReport)
        {
            return addFrontReportCaller.CreateCall<object>(new object[] { frontReport });
        }

        public IServiceMethodCall<object> DeleteFrontReport(FrontReport frontReport)
        {
            return deleteFrontReportCaller.CreateCall<object>(new object[] { frontReport });
        }

        public IServiceMethodCall<object> SetPrintOnCafeSessionCloseFlag(Dictionary<FrontReport, bool> frontReportsWithPrintOnCafeSessionCloseFlags)
        {
            return setPrintOnCafeSessionCloseFlagCaller.CreateCall<object>(new object[] { frontReportsWithPrintOnCafeSessionCloseFlags });
        }

        public IServiceMethodCall<object> UndeleteFrontReport(FrontReport frontReport)
        {
            return undeleteFrontReportCaller.CreateCall<object>(new object[] { frontReport });
        }

        public IServiceMethodCall<object> UpdateFrontReport(ByValue<FrontReport> frontReport)
        {
            return updateFrontReportCaller.CreateCall<object>(new object[] { frontReport });
        }

        #endregion

        #region asynchronous version
        public void AddFrontReport(ByValue<FrontReport> frontReport, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addFrontReportCaller.CallAsync(new object[] {frontReport}, resultHandler, errorHandler);
        }

        public void DeleteFrontReport(FrontReport frontReport, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteFrontReportCaller.CallAsync(new object[] {frontReport}, resultHandler, errorHandler);
        }

        public void SetPrintOnCafeSessionCloseFlag(Dictionary<FrontReport, bool> frontReportsWithPrintOnCafeSessionCloseFlags, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPrintOnCafeSessionCloseFlagCaller.CallAsync(new object[] {frontReportsWithPrintOnCafeSessionCloseFlags}, resultHandler, errorHandler);
        }

        public void UndeleteFrontReport(FrontReport frontReport, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteFrontReportCaller.CallAsync(new object[] {frontReport}, resultHandler, errorHandler);
        }

        public void UpdateFrontReport(ByValue<FrontReport> frontReport, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateFrontReportCaller.CallAsync(new object[] {frontReport}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddFrontReport(ByValue<FrontReport> frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addFrontReportCaller.Call<object>(new object[] { frontReport }, asyncState, requestTimeout);
        }

        public Task<object> DeleteFrontReport(FrontReport frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteFrontReportCaller.Call<object>(new object[] { frontReport }, asyncState, requestTimeout);
        }

        public Task<object> SetPrintOnCafeSessionCloseFlag(Dictionary<FrontReport, bool> frontReportsWithPrintOnCafeSessionCloseFlags, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPrintOnCafeSessionCloseFlagCaller.Call<object>(new object[] { frontReportsWithPrintOnCafeSessionCloseFlags }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteFrontReport(FrontReport frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteFrontReportCaller.Call<object>(new object[] { frontReport }, asyncState, requestTimeout);
        }

        public Task<object> UpdateFrontReport(ByValue<FrontReport> frontReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateFrontReportCaller.Call<object>(new object[] { frontReport }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class AnnualPnLBudgetService : IAnnualPnLBudgetService
    {
        private readonly RemoteMethodCaller copyOfBudgetPlanCaller;
        private readonly RemoteMethodCaller createBudgetPlanCaller;
        private readonly RemoteMethodCaller fillBudgetPlanWithFactsCaller;
        private readonly RemoteMethodCaller getBudgetPlanCaller;
        private readonly RemoteMethodCaller getBudgetPlanListCaller;
        private readonly RemoteMethodCaller getFullHierarchyCaller;
        private readonly RemoteMethodCaller getHierarchyCaller;
        private readonly RemoteMethodCaller saveBudgetPlanCaller;
        private readonly RemoteMethodCaller setDeletedStatusCaller;
        private readonly RemoteMethodCaller updateHierarchyUsageCaller;

        internal AnnualPnLBudgetService()
        {

            copyOfBudgetPlanCaller = new RemoteMethodCaller("accounting_budget_plan_service", "copyOfBudgetPlan");
            copyOfBudgetPlanCaller.AddArg("budgetPlan", typeof(Guid?));
            copyOfBudgetPlanCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            createBudgetPlanCaller = new RemoteMethodCaller("accounting_budget_plan_service", "createBudgetPlan");
            createBudgetPlanCaller.AddArg("date", typeof(int));
            createBudgetPlanCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            fillBudgetPlanWithFactsCaller = new RemoteMethodCaller("accounting_budget_plan_service", "fillBudgetPlanWithFacts");
            fillBudgetPlanWithFactsCaller.AddArg("budgetPlan", typeof(BudgetPlanDocumentListRecord));
            fillBudgetPlanWithFactsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            fillBudgetPlanWithFactsCaller.AddArg("fillWithLastYearFacts", typeof(bool));

            getBudgetPlanCaller = new RemoteMethodCaller("accounting_budget_plan_service", "getBudgetPlan");
            getBudgetPlanCaller.AddArg("budgetPlanId", typeof(Guid?));
            getBudgetPlanCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getBudgetPlanListCaller = new RemoteMethodCaller("accounting_budget_plan_service", "getBudgetPlanList");
            getBudgetPlanListCaller.AddArg("yearFrom", typeof(int?));
            getBudgetPlanListCaller.AddArg("yearTo", typeof(int?));

            getFullHierarchyCaller = new RemoteMethodCaller("accounting_budget_plan_service", "getFullHierarchy");

            getHierarchyCaller = new RemoteMethodCaller("accounting_budget_plan_service", "getHierarchy");

            saveBudgetPlanCaller = new RemoteMethodCaller("accounting_budget_plan_service", "saveBudgetPlan");
            saveBudgetPlanCaller.AddArg("budgetPlan", typeof(BudgetPlanDocumentListRecord));

            setDeletedStatusCaller = new RemoteMethodCaller("accounting_budget_plan_service", "setDeletedStatus");
            setDeletedStatusCaller.AddArg("budgetPlan", typeof(BudgetPlanDocumentListRecord));
            setDeletedStatusCaller.AddArg("deleted", typeof(bool));

            updateHierarchyUsageCaller = new RemoteMethodCaller("accounting_budget_plan_service", "updateHierarchyUsage");
            updateHierarchyUsageCaller.AddArg("disable", typeof(List<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments)
        {
            return copyOfBudgetPlanCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments });
        }

        public IServiceMethodCall<BudgetPlanDocumentListRecord> CreateBudgetPlan(int date, ICollection<DepartmentEntity> departments)
        {
            return createBudgetPlanCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { date, departments });
        }

        public IServiceMethodCall<BudgetPlanDocumentListRecord> FillBudgetPlanWithFacts(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillWithLastYearFacts)
        {
            return fillBudgetPlanWithFactsCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments, fillWithLastYearFacts });
        }

        public IServiceMethodCall<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments)
        {
            return getBudgetPlanCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { budgetPlanId, departments });
        }

        public IServiceMethodCall<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(int? yearFrom, int? yearTo)
        {
            return getBudgetPlanListCaller.CreateCall<ICollection<BudgetPlanDocumentListRecord>>(new object[] { yearFrom, yearTo });
        }

        public IServiceMethodCall<BudgetPlanAccountHierarchy> GetFullHierarchy()
        {
            return getFullHierarchyCaller.CreateCall<BudgetPlanAccountHierarchy>(new object[] {  });
        }

        public IServiceMethodCall<BudgetPlanAccountHierarchy> GetHierarchy()
        {
            return getHierarchyCaller.CreateCall<BudgetPlanAccountHierarchy>(new object[] {  });
        }

        public IServiceMethodCall<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan)
        {
            return saveBudgetPlanCaller.CreateCall<object>(new object[] { budgetPlan });
        }

        public IServiceMethodCall<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted)
        {
            return setDeletedStatusCaller.CreateCall<object>(new object[] { budgetPlan, deleted });
        }

        public IServiceMethodCall<object> UpdateHierarchyUsage(List<Guid> disable)
        {
            return updateHierarchyUsageCaller.CreateCall<object>(new object[] { disable });
        }

        #endregion

        #region asynchronous version
        public void CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            copyOfBudgetPlanCaller.CallAsync(new object[] {budgetPlan, departments}, resultHandler, errorHandler);
        }

        public void CreateBudgetPlan(int date, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            createBudgetPlanCaller.CallAsync(new object[] {date, departments}, resultHandler, errorHandler);
        }

        public void FillBudgetPlanWithFacts(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillWithLastYearFacts, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            fillBudgetPlanWithFactsCaller.CallAsync(new object[] {budgetPlan, departments, fillWithLastYearFacts}, resultHandler, errorHandler);
        }

        public void GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            getBudgetPlanCaller.CallAsync(new object[] {budgetPlanId, departments}, resultHandler, errorHandler);
        }

        public void GetBudgetPlanList(int? yearFrom, int? yearTo, AsyncErrorHandler errorHandler, Action<ICollection<BudgetPlanDocumentListRecord>> resultHandler)
        {
            getBudgetPlanListCaller.CallAsync(new object[] {yearFrom, yearTo}, resultHandler, errorHandler);
        }

        public void GetFullHierarchy(AsyncErrorHandler errorHandler, Action<BudgetPlanAccountHierarchy> resultHandler)
        {
            getFullHierarchyCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetHierarchy(AsyncErrorHandler errorHandler, Action<BudgetPlanAccountHierarchy> resultHandler)
        {
            getHierarchyCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveBudgetPlanCaller.CallAsync(new object[] {budgetPlan}, resultHandler, errorHandler);
        }

        public void SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedStatusCaller.CallAsync(new object[] {budgetPlan, deleted}, resultHandler, errorHandler);
        }

        public void UpdateHierarchyUsage(List<Guid> disable, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateHierarchyUsageCaller.CallAsync(new object[] {disable}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return copyOfBudgetPlanCaller.Call<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanDocumentListRecord> CreateBudgetPlan(int date, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createBudgetPlanCaller.Call<BudgetPlanDocumentListRecord>(new object[] { date, departments }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanDocumentListRecord> FillBudgetPlanWithFacts(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillWithLastYearFacts, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fillBudgetPlanWithFactsCaller.Call<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments, fillWithLastYearFacts }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBudgetPlanCaller.Call<BudgetPlanDocumentListRecord>(new object[] { budgetPlanId, departments }, asyncState, requestTimeout);
        }

        public Task<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(int? yearFrom, int? yearTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBudgetPlanListCaller.Call<ICollection<BudgetPlanDocumentListRecord>>(new object[] { yearFrom, yearTo }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanAccountHierarchy> GetFullHierarchy([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getFullHierarchyCaller.Call<BudgetPlanAccountHierarchy>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanAccountHierarchy> GetHierarchy([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getHierarchyCaller.Call<BudgetPlanAccountHierarchy>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveBudgetPlanCaller.Call<object>(new object[] { budgetPlan }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedStatusCaller.Call<object>(new object[] { budgetPlan, deleted }, asyncState, requestTimeout);
        }

        public Task<object> UpdateHierarchyUsage(List<Guid> disable, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateHierarchyUsageCaller.Call<object>(new object[] { disable }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class MonthlyPnLBudgetService : IMonthlyPnLBudgetService
    {
        private readonly RemoteMethodCaller copyOfBudgetPlanCaller;
        private readonly RemoteMethodCaller createBudgetPlanCaller;
        private readonly RemoteMethodCaller fillBudgetPlanWithFactsNewCaller;
        private readonly RemoteMethodCaller getBudgetPlanCaller;
        private readonly RemoteMethodCaller getBudgetPlanListCaller;
        private readonly RemoteMethodCaller saveBudgetPlanCaller;
        private readonly RemoteMethodCaller setDeletedStatusCaller;

        internal MonthlyPnLBudgetService()
        {

            copyOfBudgetPlanCaller = new RemoteMethodCaller("accounting_month_budget_service", "copyOfBudgetPlan");
            copyOfBudgetPlanCaller.AddArg("budgetPlan", typeof(Guid?));
            copyOfBudgetPlanCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            createBudgetPlanCaller = new RemoteMethodCaller("accounting_month_budget_service", "createBudgetPlan");
            createBudgetPlanCaller.AddArg("date", typeof(DateTime?));
            createBudgetPlanCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            fillBudgetPlanWithFactsNewCaller = new RemoteMethodCaller("accounting_month_budget_service", "fillBudgetPlanWithFactsNew");
            fillBudgetPlanWithFactsNewCaller.AddArg("budgetPlan", typeof(BudgetPlanDocumentListRecord));
            fillBudgetPlanWithFactsNewCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            fillBudgetPlanWithFactsNewCaller.AddArg("fillPrevYear", typeof(bool));

            getBudgetPlanCaller = new RemoteMethodCaller("accounting_month_budget_service", "getBudgetPlan");
            getBudgetPlanCaller.AddArg("budgetPlanId", typeof(Guid?));
            getBudgetPlanCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getBudgetPlanListCaller = new RemoteMethodCaller("accounting_month_budget_service", "getBudgetPlanList");
            getBudgetPlanListCaller.AddArg("dateFrom", typeof(DateTime?));
            getBudgetPlanListCaller.AddArg("dateTo", typeof(DateTime?));

            saveBudgetPlanCaller = new RemoteMethodCaller("accounting_month_budget_service", "saveBudgetPlan");
            saveBudgetPlanCaller.AddArg("budgetPlan", typeof(BudgetPlanDocumentListRecord));

            setDeletedStatusCaller = new RemoteMethodCaller("accounting_month_budget_service", "setDeletedStatus");
            setDeletedStatusCaller.AddArg("budgetPlan", typeof(BudgetPlanDocumentListRecord));
            setDeletedStatusCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments)
        {
            return copyOfBudgetPlanCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments });
        }

        public IServiceMethodCall<BudgetPlanDocumentListRecord> CreateBudgetPlan(DateTime? date, ICollection<DepartmentEntity> departments)
        {
            return createBudgetPlanCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { date, departments });
        }

        public IServiceMethodCall<BudgetPlanDocumentListRecord> FillBudgetPlanWithFactsNew(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillPrevYear)
        {
            return fillBudgetPlanWithFactsNewCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments, fillPrevYear });
        }

        public IServiceMethodCall<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments)
        {
            return getBudgetPlanCaller.CreateCall<BudgetPlanDocumentListRecord>(new object[] { budgetPlanId, departments });
        }

        public IServiceMethodCall<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(DateTime? dateFrom, DateTime? dateTo)
        {
            return getBudgetPlanListCaller.CreateCall<ICollection<BudgetPlanDocumentListRecord>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan)
        {
            return saveBudgetPlanCaller.CreateCall<object>(new object[] { budgetPlan });
        }

        public IServiceMethodCall<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted)
        {
            return setDeletedStatusCaller.CreateCall<object>(new object[] { budgetPlan, deleted });
        }

        #endregion

        #region asynchronous version
        public void CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            copyOfBudgetPlanCaller.CallAsync(new object[] {budgetPlan, departments}, resultHandler, errorHandler);
        }

        public void CreateBudgetPlan(DateTime? date, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            createBudgetPlanCaller.CallAsync(new object[] {date, departments}, resultHandler, errorHandler);
        }

        public void FillBudgetPlanWithFactsNew(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillPrevYear, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            fillBudgetPlanWithFactsNewCaller.CallAsync(new object[] {budgetPlan, departments, fillPrevYear}, resultHandler, errorHandler);
        }

        public void GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<BudgetPlanDocumentListRecord> resultHandler)
        {
            getBudgetPlanCaller.CallAsync(new object[] {budgetPlanId, departments}, resultHandler, errorHandler);
        }

        public void GetBudgetPlanList(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<BudgetPlanDocumentListRecord>> resultHandler)
        {
            getBudgetPlanListCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveBudgetPlanCaller.CallAsync(new object[] {budgetPlan}, resultHandler, errorHandler);
        }

        public void SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedStatusCaller.CallAsync(new object[] {budgetPlan, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<BudgetPlanDocumentListRecord> CopyOfBudgetPlan(Guid? budgetPlan, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return copyOfBudgetPlanCaller.Call<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanDocumentListRecord> CreateBudgetPlan(DateTime? date, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createBudgetPlanCaller.Call<BudgetPlanDocumentListRecord>(new object[] { date, departments }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanDocumentListRecord> FillBudgetPlanWithFactsNew(BudgetPlanDocumentListRecord budgetPlan, ICollection<DepartmentEntity> departments, bool fillPrevYear, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fillBudgetPlanWithFactsNewCaller.Call<BudgetPlanDocumentListRecord>(new object[] { budgetPlan, departments, fillPrevYear }, asyncState, requestTimeout);
        }

        public Task<BudgetPlanDocumentListRecord> GetBudgetPlan(Guid? budgetPlanId, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBudgetPlanCaller.Call<BudgetPlanDocumentListRecord>(new object[] { budgetPlanId, departments }, asyncState, requestTimeout);
        }

        public Task<ICollection<BudgetPlanDocumentListRecord>> GetBudgetPlanList(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBudgetPlanListCaller.Call<ICollection<BudgetPlanDocumentListRecord>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<object> SaveBudgetPlan(BudgetPlanDocumentListRecord budgetPlan, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveBudgetPlanCaller.Call<object>(new object[] { budgetPlan }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedStatus(BudgetPlanDocumentListRecord budgetPlan, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedStatusCaller.Call<object>(new object[] { budgetPlan, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CashFlowReportService : ICashFlowReportService
    {
        private readonly RemoteMethodCaller buildCashFlowReportCaller;

        internal CashFlowReportService()
        {

            buildCashFlowReportCaller = new RemoteMethodCaller("cashFlowReportService", "buildCashFlowReport");
            buildCashFlowReportCaller.AddArg("dateFrom", typeof(DateTime?));
            buildCashFlowReportCaller.AddArg("dateTo", typeof(DateTime?));
            buildCashFlowReportCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Report> BuildCashFlowReport(DateTime? dateFrom, DateTime? dateTo, ICollection<DepartmentEntity> departments)
        {
            return buildCashFlowReportCaller.CreateCall<Report>(new object[] { dateFrom, dateTo, departments });
        }

        #endregion

        #region asynchronous version
        public void BuildCashFlowReport(DateTime? dateFrom, DateTime? dateTo, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<Report> resultHandler)
        {
            buildCashFlowReportCaller.CallAsync(new object[] {dateFrom, dateTo, departments}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Report> BuildCashFlowReport(DateTime? dateFrom, DateTime? dateTo, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildCashFlowReportCaller.Call<Report>(new object[] { dateFrom, dateTo, departments }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CounteragentSummaryReportsService : ICounteragentSummaryReportsService
    {
        private readonly RemoteMethodCaller selectClientSummaryReportCaller;
        private readonly RemoteMethodCaller selectEmployeeSummaryReportCaller;
        private readonly RemoteMethodCaller selectSupplierSummaryReportCaller;

        internal CounteragentSummaryReportsService()
        {

            selectClientSummaryReportCaller = new RemoteMethodCaller("CounteragentSummaryReports", "selectClientSummaryReport");
            selectClientSummaryReportCaller.AddArg("dateAt", typeof(DateTime?));
            selectClientSummaryReportCaller.AddArg("departments", typeof(List<DepartmentEntity>));

            selectEmployeeSummaryReportCaller = new RemoteMethodCaller("CounteragentSummaryReports", "selectEmployeeSummaryReport");
            selectEmployeeSummaryReportCaller.AddArg("dateAt", typeof(DateTime?));
            selectEmployeeSummaryReportCaller.AddArg("roles", typeof(HashSet<Role>));
            selectEmployeeSummaryReportCaller.AddArg("group", typeof(bool));
            selectEmployeeSummaryReportCaller.AddArg("departments", typeof(List<DepartmentEntity>));

            selectSupplierSummaryReportCaller = new RemoteMethodCaller("CounteragentSummaryReports", "selectSupplierSummaryReport");
            selectSupplierSummaryReportCaller.AddArg("dateAt", typeof(DateTime?));
            selectSupplierSummaryReportCaller.AddArg("departments", typeof(List<DepartmentEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<CounteragentSummaryReport> SelectClientSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments)
        {
            return selectClientSummaryReportCaller.CreateCall<CounteragentSummaryReport>(new object[] { dateAt, departments });
        }

        public IServiceMethodCall<CounteragentSummaryReport> SelectEmployeeSummaryReport(DateTime? dateAt, HashSet<Role> roles, bool group, List<DepartmentEntity> departments)
        {
            return selectEmployeeSummaryReportCaller.CreateCall<CounteragentSummaryReport>(new object[] { dateAt, roles, group, departments });
        }

        public IServiceMethodCall<CounteragentSummaryReport> SelectSupplierSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments)
        {
            return selectSupplierSummaryReportCaller.CreateCall<CounteragentSummaryReport>(new object[] { dateAt, departments });
        }

        #endregion

        #region asynchronous version
        public void SelectClientSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<CounteragentSummaryReport> resultHandler)
        {
            selectClientSummaryReportCaller.CallAsync(new object[] {dateAt, departments}, resultHandler, errorHandler);
        }

        public void SelectEmployeeSummaryReport(DateTime? dateAt, HashSet<Role> roles, bool group, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<CounteragentSummaryReport> resultHandler)
        {
            selectEmployeeSummaryReportCaller.CallAsync(new object[] {dateAt, roles, group, departments}, resultHandler, errorHandler);
        }

        public void SelectSupplierSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<CounteragentSummaryReport> resultHandler)
        {
            selectSupplierSummaryReportCaller.CallAsync(new object[] {dateAt, departments}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<CounteragentSummaryReport> SelectClientSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectClientSummaryReportCaller.Call<CounteragentSummaryReport>(new object[] { dateAt, departments }, asyncState, requestTimeout);
        }

        public Task<CounteragentSummaryReport> SelectEmployeeSummaryReport(DateTime? dateAt, HashSet<Role> roles, bool group, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectEmployeeSummaryReportCaller.Call<CounteragentSummaryReport>(new object[] { dateAt, roles, group, departments }, asyncState, requestTimeout);
        }

        public Task<CounteragentSummaryReport> SelectSupplierSummaryReport(DateTime? dateAt, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectSupplierSummaryReportCaller.Call<CounteragentSummaryReport>(new object[] { dateAt, departments }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class Export1CService : IExport1CService
    {
        private readonly RemoteMethodCaller buildExport1CReportCaller;
        private readonly RemoteMethodCaller getDefaultMappingCaller;

        internal Export1CService()
        {

            buildExport1CReportCaller = new RemoteMethodCaller("export1c", "buildExport1CReport");
            buildExport1CReportCaller.AddArg("mapping", typeof(ByValue<Export1CMapping>));
            buildExport1CReportCaller.AddArg("from", typeof(DateTime?));
            buildExport1CReportCaller.AddArg("to", typeof(DateTime?));

            getDefaultMappingCaller = new RemoteMethodCaller("export1c", "getDefaultMapping");
        }

        #region Synchronous versions
        public IServiceMethodCall<Export1CReport> BuildExport1CReport(ByValue<Export1CMapping> mapping, DateTime? from, DateTime? to)
        {
            return buildExport1CReportCaller.CreateCall<Export1CReport>(new object[] { mapping, from, to });
        }

        public IServiceMethodCall<ByValue<Export1CMapping>> GetDefaultMapping()
        {
            return getDefaultMappingCaller.CreateCall<ByValue<Export1CMapping>>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void BuildExport1CReport(ByValue<Export1CMapping> mapping, DateTime? from, DateTime? to, AsyncErrorHandler errorHandler, Action<Export1CReport> resultHandler)
        {
            buildExport1CReportCaller.CallAsync(new object[] {mapping, from, to}, resultHandler, errorHandler);
        }

        public void GetDefaultMapping(AsyncErrorHandler errorHandler, Action<ByValue<Export1CMapping>> resultHandler)
        {
            getDefaultMappingCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Export1CReport> BuildExport1CReport(ByValue<Export1CMapping> mapping, DateTime? from, DateTime? to, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildExport1CReportCaller.Call<Export1CReport>(new object[] { mapping, from, to }, asyncState, requestTimeout);
        }

        public Task<ByValue<Export1CMapping>> GetDefaultMapping([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDefaultMappingCaller.Call<ByValue<Export1CMapping>>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class FoodcostAnalysisService : IFoodcostAnalysisService
    {
        private readonly RemoteMethodCaller couldSaveCaller;
        private readonly RemoteMethodCaller priceDynamicsCaller;
        private readonly RemoteMethodCaller whatIfCaller;

        internal FoodcostAnalysisService()
        {

            couldSaveCaller = new RemoteMethodCaller("foodcostAnalysis", "couldSave");
            couldSaveCaller.AddArg("baseDateFrom", typeof(DateTime?));
            couldSaveCaller.AddArg("baseDateTo", typeof(DateTime?));
            couldSaveCaller.AddArg("researchDateFrom", typeof(DateTime?));
            couldSaveCaller.AddArg("researchDateTo", typeof(DateTime?));
            couldSaveCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            couldSaveCaller.AddArg("productGroupFilter", typeof(ICollection<Guid>));
            couldSaveCaller.AddArg("pricesSource", typeof(FoodcostPricesSource));
            couldSaveCaller.AddArg("basePricesSource", typeof(FoodcostPricesSource));

            priceDynamicsCaller = new RemoteMethodCaller("foodcostAnalysis", "priceDynamics");
            priceDynamicsCaller.AddArg("baseDateFrom", typeof(DateTime?));
            priceDynamicsCaller.AddArg("baseDateTo", typeof(DateTime?));
            priceDynamicsCaller.AddArg("researchDateFrom", typeof(DateTime?));
            priceDynamicsCaller.AddArg("researchDateTo", typeof(DateTime?));
            priceDynamicsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            priceDynamicsCaller.AddArg("productGroupFilter", typeof(ICollection<Guid>));
            priceDynamicsCaller.AddArg("pricesSource", typeof(FoodcostPricesSource));
            priceDynamicsCaller.AddArg("transactionSources", typeof(ICollection<FoodcostTransactionSource>));
            priceDynamicsCaller.AddArg("expectedLossesPercent", typeof(decimal?));

            whatIfCaller = new RemoteMethodCaller("foodcostAnalysis", "whatIf");
            whatIfCaller.AddArg("dateFrom", typeof(DateTime?));
            whatIfCaller.AddArg("dateTo", typeof(DateTime?));
            whatIfCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            whatIfCaller.AddArg("productFilter", typeof(List<Guid>));
            whatIfCaller.AddArg("dishFilter", typeof(List<Guid>));
            whatIfCaller.AddArg("pricesSource", typeof(FoodcostPricesSource));
            whatIfCaller.AddArg("transactionSources", typeof(ICollection<FoodcostTransactionSource>));
        }

        #region Synchronous versions
        public IServiceMethodCall<FoodcostCouldSaveData> CouldSave(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, FoodcostPricesSource basePricesSource)
        {
            return couldSaveCaller.CreateCall<FoodcostCouldSaveData>(new object[] { baseDateFrom, baseDateTo, researchDateFrom, researchDateTo, departments, productGroupFilter, pricesSource, basePricesSource });
        }

        public IServiceMethodCall<FoodcostPriceDynamicsData> PriceDynamics(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, decimal? expectedLossesPercent)
        {
            return priceDynamicsCaller.CreateCall<FoodcostPriceDynamicsData>(new object[] { baseDateFrom, baseDateTo, researchDateFrom, researchDateTo, departments, productGroupFilter, pricesSource, transactionSources, expectedLossesPercent });
        }

        public IServiceMethodCall<FoodcostWhatIfData> WhatIf(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, List<Guid> productFilter, List<Guid> dishFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources)
        {
            return whatIfCaller.CreateCall<FoodcostWhatIfData>(new object[] { dateFrom, dateTo, departments, productFilter, dishFilter, pricesSource, transactionSources });
        }

        #endregion

        #region asynchronous version
        public void CouldSave(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, FoodcostPricesSource basePricesSource, AsyncErrorHandler errorHandler, Action<FoodcostCouldSaveData> resultHandler)
        {
            couldSaveCaller.CallAsync(new object[] {baseDateFrom, baseDateTo, researchDateFrom, researchDateTo, departments, productGroupFilter, pricesSource, basePricesSource}, resultHandler, errorHandler);
        }

        public void PriceDynamics(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, decimal? expectedLossesPercent, AsyncErrorHandler errorHandler, Action<FoodcostPriceDynamicsData> resultHandler)
        {
            priceDynamicsCaller.CallAsync(new object[] {baseDateFrom, baseDateTo, researchDateFrom, researchDateTo, departments, productGroupFilter, pricesSource, transactionSources, expectedLossesPercent}, resultHandler, errorHandler);
        }

        public void WhatIf(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, List<Guid> productFilter, List<Guid> dishFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, AsyncErrorHandler errorHandler, Action<FoodcostWhatIfData> resultHandler)
        {
            whatIfCaller.CallAsync(new object[] {dateFrom, dateTo, departments, productFilter, dishFilter, pricesSource, transactionSources}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<FoodcostCouldSaveData> CouldSave(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, FoodcostPricesSource basePricesSource, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return couldSaveCaller.Call<FoodcostCouldSaveData>(new object[] { baseDateFrom, baseDateTo, researchDateFrom, researchDateTo, departments, productGroupFilter, pricesSource, basePricesSource }, asyncState, requestTimeout);
        }

        public Task<FoodcostPriceDynamicsData> PriceDynamics(DateTime? baseDateFrom, DateTime? baseDateTo, DateTime? researchDateFrom, DateTime? researchDateTo, HashSet<DepartmentEntity> departments, ICollection<Guid> productGroupFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, decimal? expectedLossesPercent, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return priceDynamicsCaller.Call<FoodcostPriceDynamicsData>(new object[] { baseDateFrom, baseDateTo, researchDateFrom, researchDateTo, departments, productGroupFilter, pricesSource, transactionSources, expectedLossesPercent }, asyncState, requestTimeout);
        }

        public Task<FoodcostWhatIfData> WhatIf(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> departments, List<Guid> productFilter, List<Guid> dishFilter, FoodcostPricesSource pricesSource, ICollection<FoodcostTransactionSource> transactionSources, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return whatIfCaller.Call<FoodcostWhatIfData>(new object[] { dateFrom, dateTo, departments, productFilter, dishFilter, pricesSource, transactionSources }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class GoodMoveReportService : IGoodMoveReportService
    {
        private readonly RemoteMethodCaller getProductMoveReportCaller;

        internal GoodMoveReportService()
        {

            getProductMoveReportCaller = new RemoteMethodCaller("goodMove", "getProductMoveReport");
            getProductMoveReportCaller.AddArg("product", typeof(Product));
            getProductMoveReportCaller.AddArg("stores", typeof(ICollection<Store>));
            getProductMoveReportCaller.AddArg("dateFrom", typeof(DateTime?));
            getProductMoveReportCaller.AddArg("dateTo", typeof(DateTime?));
            getProductMoveReportCaller.AddArg("includeCostDetalization", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<GoodMoveReportData> GetProductMoveReport(Product product, ICollection<Store> stores, DateTime? dateFrom, DateTime? dateTo, bool includeCostDetalization)
        {
            return getProductMoveReportCaller.CreateCall<GoodMoveReportData>(new object[] { product, stores, dateFrom, dateTo, includeCostDetalization });
        }

        #endregion

        #region asynchronous version
        public void GetProductMoveReport(Product product, ICollection<Store> stores, DateTime? dateFrom, DateTime? dateTo, bool includeCostDetalization, AsyncErrorHandler errorHandler, Action<GoodMoveReportData> resultHandler)
        {
            getProductMoveReportCaller.CallAsync(new object[] {product, stores, dateFrom, dateTo, includeCostDetalization}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<GoodMoveReportData> GetProductMoveReport(Product product, ICollection<Store> stores, DateTime? dateFrom, DateTime? dateTo, bool includeCostDetalization, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductMoveReportCaller.Call<GoodMoveReportData>(new object[] { product, stores, dateFrom, dateTo, includeCostDetalization }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class OlapReportService : IOlapReportService
    {
        private readonly RemoteMethodCaller actualUniqueValuesCaller;
        private readonly RemoteMethodCaller buildReportCaller;
        private readonly RemoteMethodCaller buildReportLocalizedCaller;
        private readonly RemoteMethodCaller buildReportsCaller;
        private readonly RemoteMethodCaller getAvailableColumnsCaller;
        private readonly RemoteMethodCaller saveOrUpdateOlapReportPresetCaller;
        private readonly RemoteMethodCaller uniqueValuesCaller;

        internal OlapReportService()
        {

            actualUniqueValuesCaller = new RemoteMethodCaller("olapReport", "actualUniqueValues");
            actualUniqueValuesCaller.AddArg("olapReportType", typeof(OlapReports));
            actualUniqueValuesCaller.AddArg("fields", typeof(ICollection<string>));
            actualUniqueValuesCaller.AddArg("filters", typeof(Dictionary<string, FilterCriteria>));

            buildReportCaller = new RemoteMethodCaller("olapReport", "buildReport");
            buildReportCaller.AddArg("olapReportType", typeof(OlapReports));
            buildReportCaller.AddArg("buildSummary", typeof(bool?));
            buildReportCaller.AddArg("groupByRowFields", typeof(ICollection<string>));
            buildReportCaller.AddArg("groupByColFields", typeof(ICollection<string>));
            buildReportCaller.AddArg("aggregateFields", typeof(ICollection<string>));
            buildReportCaller.AddArg("filters", typeof(Dictionary<string, FilterCriteria>));

            buildReportLocalizedCaller = new RemoteMethodCaller("olapReport", "buildReportLocalized");
            buildReportLocalizedCaller.AddArg("olapReportType", typeof(OlapReports));
            buildReportLocalizedCaller.AddArg("groupByRowFields", typeof(ICollection<string>));
            buildReportLocalizedCaller.AddArg("groupByColFields", typeof(ICollection<string>));
            buildReportLocalizedCaller.AddArg("aggregateFields", typeof(ICollection<string>));
            buildReportLocalizedCaller.AddArg("filters", typeof(Dictionary<string, FilterCriteria>));

            buildReportsCaller = new RemoteMethodCaller("olapReport", "buildReports");
            buildReportsCaller.AddArg("reportsSettings", typeof(ICollection<ByValue<OlapReportSetting>>));

            getAvailableColumnsCaller = new RemoteMethodCaller("olapReport", "getAvailableColumns");
            getAvailableColumnsCaller.AddArg("olapReportType", typeof(OlapReports));

            saveOrUpdateOlapReportPresetCaller = new RemoteMethodCaller("olapReport", "saveOrUpdateOlapReportPreset");
            saveOrUpdateOlapReportPresetCaller.AddArg("preset", typeof(ByValue<OlapReportSetting>));

            uniqueValuesCaller = new RemoteMethodCaller("olapReport", "uniqueValues");
            uniqueValuesCaller.AddArg("olapReportType", typeof(OlapReports));
            uniqueValuesCaller.AddArg("fields", typeof(ICollection<string>));
            uniqueValuesCaller.AddArg("filters", typeof(Dictionary<string, FilterCriteria>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<string, ICollection<Object>>> ActualUniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters)
        {
            return actualUniqueValuesCaller.CreateCall<Dictionary<string, ICollection<Object>>>(new object[] { olapReportType, fields, filters });
        }

        public IServiceMethodCall<Report> BuildReport(OlapReports olapReportType, bool? buildSummary, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters)
        {
            return buildReportCaller.CreateCall<Report>(new object[] { olapReportType, buildSummary, groupByRowFields, groupByColFields, aggregateFields, filters });
        }

        public IServiceMethodCall<Report> BuildReportLocalized(OlapReports olapReportType, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters)
        {
            return buildReportLocalizedCaller.CreateCall<Report>(new object[] { olapReportType, groupByRowFields, groupByColFields, aggregateFields, filters });
        }

        public IServiceMethodCall<List<Report>> BuildReports(ICollection<ByValue<OlapReportSetting>> reportsSettings)
        {
            return buildReportsCaller.CreateCall<List<Report>>(new object[] { reportsSettings });
        }

        public IServiceMethodCall<Dictionary<string, OlapReportColumn>> GetAvailableColumns(OlapReports olapReportType)
        {
            return getAvailableColumnsCaller.CreateCall<Dictionary<string, OlapReportColumn>>(new object[] { olapReportType });
        }

        public IServiceMethodCall<object> SaveOrUpdateOlapReportPreset(ByValue<OlapReportSetting> preset)
        {
            return saveOrUpdateOlapReportPresetCaller.CreateCall<object>(new object[] { preset });
        }

        public IServiceMethodCall<Dictionary<string, ICollection<Object>>> UniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters)
        {
            return uniqueValuesCaller.CreateCall<Dictionary<string, ICollection<Object>>>(new object[] { olapReportType, fields, filters });
        }

        #endregion

        #region asynchronous version
        public void ActualUniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Dictionary<string, ICollection<Object>>> resultHandler)
        {
            actualUniqueValuesCaller.CallAsync(new object[] {olapReportType, fields, filters}, resultHandler, errorHandler);
        }

        public void BuildReport(OlapReports olapReportType, bool? buildSummary, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Report> resultHandler)
        {
            buildReportCaller.CallAsync(new object[] {olapReportType, buildSummary, groupByRowFields, groupByColFields, aggregateFields, filters}, resultHandler, errorHandler);
        }

        public void BuildReportLocalized(OlapReports olapReportType, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Report> resultHandler)
        {
            buildReportLocalizedCaller.CallAsync(new object[] {olapReportType, groupByRowFields, groupByColFields, aggregateFields, filters}, resultHandler, errorHandler);
        }

        public void BuildReports(ICollection<ByValue<OlapReportSetting>> reportsSettings, AsyncErrorHandler errorHandler, Action<List<Report>> resultHandler)
        {
            buildReportsCaller.CallAsync(new object[] {reportsSettings}, resultHandler, errorHandler);
        }

        public void GetAvailableColumns(OlapReports olapReportType, AsyncErrorHandler errorHandler, Action<Dictionary<string, OlapReportColumn>> resultHandler)
        {
            getAvailableColumnsCaller.CallAsync(new object[] {olapReportType}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateOlapReportPreset(ByValue<OlapReportSetting> preset, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateOlapReportPresetCaller.CallAsync(new object[] {preset}, resultHandler, errorHandler);
        }

        public void UniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, AsyncErrorHandler errorHandler, Action<Dictionary<string, ICollection<Object>>> resultHandler)
        {
            uniqueValuesCaller.CallAsync(new object[] {olapReportType, fields, filters}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<string, ICollection<Object>>> ActualUniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return actualUniqueValuesCaller.Call<Dictionary<string, ICollection<Object>>>(new object[] { olapReportType, fields, filters }, asyncState, requestTimeout);
        }

        public Task<Report> BuildReport(OlapReports olapReportType, bool? buildSummary, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildReportCaller.Call<Report>(new object[] { olapReportType, buildSummary, groupByRowFields, groupByColFields, aggregateFields, filters }, asyncState, requestTimeout);
        }

        public Task<Report> BuildReportLocalized(OlapReports olapReportType, ICollection<string> groupByRowFields, ICollection<string> groupByColFields, ICollection<string> aggregateFields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildReportLocalizedCaller.Call<Report>(new object[] { olapReportType, groupByRowFields, groupByColFields, aggregateFields, filters }, asyncState, requestTimeout);
        }

        public Task<List<Report>> BuildReports(ICollection<ByValue<OlapReportSetting>> reportsSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildReportsCaller.Call<List<Report>>(new object[] { reportsSettings }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, OlapReportColumn>> GetAvailableColumns(OlapReports olapReportType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAvailableColumnsCaller.Call<Dictionary<string, OlapReportColumn>>(new object[] { olapReportType }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateOlapReportPreset(ByValue<OlapReportSetting> preset, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateOlapReportPresetCaller.Call<object>(new object[] { preset }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, ICollection<Object>>> UniqueValues(OlapReports olapReportType, ICollection<string> fields, Dictionary<string, FilterCriteria> filters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return uniqueValuesCaller.Call<Dictionary<string, ICollection<Object>>>(new object[] { olapReportType, fields, filters }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PurchasingReportService : IPurchasingReportService
    {
        private readonly RemoteMethodCaller buildReportCaller;

        internal PurchasingReportService()
        {

            buildReportCaller = new RemoteMethodCaller("purchasingReport", "buildReport");
            buildReportCaller.AddArg("dateFrom", typeof(DateTime?));
            buildReportCaller.AddArg("dateTo", typeof(DateTime?));
            buildReportCaller.AddArg("suppliers", typeof(HashSet<User>));
            buildReportCaller.AddArg("stores", typeof(HashSet<Store>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<PurchasingReportRecord>> BuildReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> suppliers, HashSet<Store> stores)
        {
            return buildReportCaller.CreateCall<ICollection<PurchasingReportRecord>>(new object[] { dateFrom, dateTo, suppliers, stores });
        }

        #endregion

        #region asynchronous version
        public void BuildReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> suppliers, HashSet<Store> stores, AsyncErrorHandler errorHandler, Action<ICollection<PurchasingReportRecord>> resultHandler)
        {
            buildReportCaller.CallAsync(new object[] {dateFrom, dateTo, suppliers, stores}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<PurchasingReportRecord>> BuildReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> suppliers, HashSet<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildReportCaller.Call<ICollection<PurchasingReportRecord>>(new object[] { dateFrom, dateTo, suppliers, stores }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SalesReportService : ISalesReportService
    {
        private readonly RemoteMethodCaller getNotSoldItemsByPeriodCaller;
        private readonly RemoteMethodCaller getPeriodSalesByDepartmentsCaller;
        private readonly RemoteMethodCaller getSalesByDocumentIdsCaller;
        private readonly RemoteMethodCaller getSalesBySessionIdsByDepartmentsCaller;

        internal SalesReportService()
        {

            getNotSoldItemsByPeriodCaller = new RemoteMethodCaller("salesReport", "getNotSoldItemsByPeriod");
            getNotSoldItemsByPeriodCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            getNotSoldItemsByPeriodCaller.AddArg("dateFrom", typeof(DateTime?));
            getNotSoldItemsByPeriodCaller.AddArg("dateTo", typeof(DateTime?));

            getPeriodSalesByDepartmentsCaller = new RemoteMethodCaller("salesReport", "getPeriodSalesByDepartments");
            getPeriodSalesByDepartmentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getPeriodSalesByDepartmentsCaller.AddArg("dateTo", typeof(DateTime?));
            getPeriodSalesByDepartmentsCaller.AddArg("departments", typeof(List<DepartmentEntity>));
            getPeriodSalesByDepartmentsCaller.AddArg("stores", typeof(List<Store>));
            getPeriodSalesByDepartmentsCaller.AddArg("documentTypes", typeof(List<DocumentType>));
            getPeriodSalesByDepartmentsCaller.AddArg("includeModifiers", typeof(bool));
            getPeriodSalesByDepartmentsCaller.AddArg("groupByDay", typeof(bool));

            getSalesByDocumentIdsCaller = new RemoteMethodCaller("salesReport", "getSalesByDocumentIds");
            getSalesByDocumentIdsCaller.AddArg("ids", typeof(List<Guid>));

            getSalesBySessionIdsByDepartmentsCaller = new RemoteMethodCaller("salesReport", "getSalesBySessionIdsByDepartments");
            getSalesBySessionIdsByDepartmentsCaller.AddArg("sessionIds", typeof(ICollection<Guid>));
            getSalesBySessionIdsByDepartmentsCaller.AddArg("departments", typeof(List<DepartmentEntity>));
            getSalesBySessionIdsByDepartmentsCaller.AddArg("stores", typeof(ICollection<Store>));
            getSalesBySessionIdsByDepartmentsCaller.AddArg("documentTypes", typeof(List<DocumentType>));
        }

        #region Synchronous versions
        public IServiceMethodCall<List<NotSoldItemRecord>> GetNotSoldItemsByPeriod(ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo)
        {
            return getNotSoldItemsByPeriodCaller.CreateCall<List<NotSoldItemRecord>>(new object[] { departments, dateFrom, dateTo });
        }

        public IServiceMethodCall<List<DishSale>> GetPeriodSalesByDepartments(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, List<Store> stores, List<DocumentType> documentTypes, bool includeModifiers, bool groupByDay)
        {
            return getPeriodSalesByDepartmentsCaller.CreateCall<List<DishSale>>(new object[] { dateFrom, dateTo, departments, stores, documentTypes, includeModifiers, groupByDay });
        }

        public IServiceMethodCall<List<DishSale>> GetSalesByDocumentIds(List<Guid> ids)
        {
            return getSalesByDocumentIdsCaller.CreateCall<List<DishSale>>(new object[] { ids });
        }

        public IServiceMethodCall<List<DishSale>> GetSalesBySessionIdsByDepartments(ICollection<Guid> sessionIds, List<DepartmentEntity> departments, ICollection<Store> stores, List<DocumentType> documentTypes)
        {
            return getSalesBySessionIdsByDepartmentsCaller.CreateCall<List<DishSale>>(new object[] { sessionIds, departments, stores, documentTypes });
        }

        #endregion

        #region asynchronous version
        public void GetNotSoldItemsByPeriod(ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<NotSoldItemRecord>> resultHandler)
        {
            getNotSoldItemsByPeriodCaller.CallAsync(new object[] {departments, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetPeriodSalesByDepartments(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, List<Store> stores, List<DocumentType> documentTypes, bool includeModifiers, bool groupByDay, AsyncErrorHandler errorHandler, Action<List<DishSale>> resultHandler)
        {
            getPeriodSalesByDepartmentsCaller.CallAsync(new object[] {dateFrom, dateTo, departments, stores, documentTypes, includeModifiers, groupByDay}, resultHandler, errorHandler);
        }

        public void GetSalesByDocumentIds(List<Guid> ids, AsyncErrorHandler errorHandler, Action<List<DishSale>> resultHandler)
        {
            getSalesByDocumentIdsCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void GetSalesBySessionIdsByDepartments(ICollection<Guid> sessionIds, List<DepartmentEntity> departments, ICollection<Store> stores, List<DocumentType> documentTypes, AsyncErrorHandler errorHandler, Action<List<DishSale>> resultHandler)
        {
            getSalesBySessionIdsByDepartmentsCaller.CallAsync(new object[] {sessionIds, departments, stores, documentTypes}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<List<NotSoldItemRecord>> GetNotSoldItemsByPeriod(ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNotSoldItemsByPeriodCaller.Call<List<NotSoldItemRecord>>(new object[] { departments, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<List<DishSale>> GetPeriodSalesByDepartments(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, List<Store> stores, List<DocumentType> documentTypes, bool includeModifiers, bool groupByDay, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPeriodSalesByDepartmentsCaller.Call<List<DishSale>>(new object[] { dateFrom, dateTo, departments, stores, documentTypes, includeModifiers, groupByDay }, asyncState, requestTimeout);
        }

        public Task<List<DishSale>> GetSalesByDocumentIds(List<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSalesByDocumentIdsCaller.Call<List<DishSale>>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<List<DishSale>> GetSalesBySessionIdsByDepartments(ICollection<Guid> sessionIds, List<DepartmentEntity> departments, ICollection<Store> stores, List<DocumentType> documentTypes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSalesBySessionIdsByDepartmentsCaller.Call<List<DishSale>>(new object[] { sessionIds, departments, stores, documentTypes }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ReservesService : IReservesService
    {
        private readonly RemoteMethodCaller getReservesAndDeliveriesCaller;

        internal ReservesService()
        {

            getReservesAndDeliveriesCaller = new RemoteMethodCaller("reserves", "getReservesAndDeliveries");
            getReservesAndDeliveriesCaller.AddArg("dateFrom", typeof(DateTime?));
            getReservesAndDeliveriesCaller.AddArg("dateTo", typeof(DateTime?));
            getReservesAndDeliveriesCaller.AddArg("departments", typeof(List<DepartmentEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<ReserveDeliveryDto>> GetReservesAndDeliveries(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments)
        {
            return getReservesAndDeliveriesCaller.CreateCall<ICollection<ReserveDeliveryDto>>(new object[] { dateFrom, dateTo, departments });
        }

        #endregion

        #region asynchronous version
        public void GetReservesAndDeliveries(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ICollection<ReserveDeliveryDto>> resultHandler)
        {
            getReservesAndDeliveriesCaller.CallAsync(new object[] {dateFrom, dateTo, departments}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<ReserveDeliveryDto>> GetReservesAndDeliveries(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getReservesAndDeliveriesCaller.Call<ICollection<ReserveDeliveryDto>>(new object[] { dateFrom, dateTo, departments }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SessionsService : ISessionsService
    {
        private readonly RemoteMethodCaller canAcceptSessionCaller;
        private readonly RemoteMethodCaller getClosedSessionDocumentCaller;
        private readonly RemoteMethodCaller getSessionTransactionsCaller;
        private readonly RemoteMethodCaller getSessionsByOperDayCaller;
        private readonly RemoteMethodCaller isClosedEventCaller;
        private readonly RemoteMethodCaller isSessionOpenCaller;
        private readonly RemoteMethodCaller saveClosedSessionDocumentCaller;

        internal SessionsService()
        {

            canAcceptSessionCaller = new RemoteMethodCaller("sessions", "canAcceptSession");
            canAcceptSessionCaller.AddArg("sessionId", typeof(Guid?));

            getClosedSessionDocumentCaller = new RemoteMethodCaller("sessions", "getClosedSessionDocument");
            getClosedSessionDocumentCaller.AddArg("session", typeof(CafeSessionProperties));

            getSessionTransactionsCaller = new RemoteMethodCaller("sessions", "getSessionTransactions");
            getSessionTransactionsCaller.AddArg("sessionId", typeof(Guid?));

            getSessionsByOperDayCaller = new RemoteMethodCaller("sessions", "getSessionsByOperDay");
            getSessionsByOperDayCaller.AddArg("dateFrom", typeof(DateTime?));
            getSessionsByOperDayCaller.AddArg("dateTo", typeof(DateTime?));

            isClosedEventCaller = new RemoteMethodCaller("sessions", "isClosedEvent");
            isClosedEventCaller.AddArg("sessionId", typeof(Guid?));

            isSessionOpenCaller = new RemoteMethodCaller("sessions", "isSessionOpen");
            isSessionOpenCaller.AddArg("date", typeof(DateTime?));

            saveClosedSessionDocumentCaller = new RemoteMethodCaller("sessions", "saveClosedSessionDocument");
            saveClosedSessionDocumentCaller.AddArg("document", typeof(ClosedSessionDocument));
            saveClosedSessionDocumentCaller.AddArg("withProcessing", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<bool> CanAcceptSession(Guid? sessionId)
        {
            return canAcceptSessionCaller.CreateCall<bool>(new object[] { sessionId });
        }

        public IServiceMethodCall<ClosedSessionDocument> GetClosedSessionDocument(CafeSessionProperties session)
        {
            return getClosedSessionDocumentCaller.CreateCall<ClosedSessionDocument>(new object[] { session });
        }

        public IServiceMethodCall<ICollection<ClosedSessionTransactionInfo>> GetSessionTransactions(Guid? sessionId)
        {
            return getSessionTransactionsCaller.CreateCall<ICollection<ClosedSessionTransactionInfo>>(new object[] { sessionId });
        }

        public IServiceMethodCall<List<CafeSessionInfo>> GetSessionsByOperDay(DateTime? dateFrom, DateTime? dateTo)
        {
            return getSessionsByOperDayCaller.CreateCall<List<CafeSessionInfo>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<bool> IsClosedEvent(Guid? sessionId)
        {
            return isClosedEventCaller.CreateCall<bool>(new object[] { sessionId });
        }

        public IServiceMethodCall<bool> IsSessionOpen(DateTime? date)
        {
            return isSessionOpenCaller.CreateCall<bool>(new object[] { date });
        }

        public IServiceMethodCall<ClosedSessionStatus> SaveClosedSessionDocument(ClosedSessionDocument document, bool withProcessing)
        {
            return saveClosedSessionDocumentCaller.CreateCall<ClosedSessionStatus>(new object[] { document, withProcessing });
        }

        #endregion

        #region asynchronous version
        public void CanAcceptSession(Guid? sessionId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            canAcceptSessionCaller.CallAsync(new object[] {sessionId}, resultHandler, errorHandler);
        }

        public void GetClosedSessionDocument(CafeSessionProperties session, AsyncErrorHandler errorHandler, Action<ClosedSessionDocument> resultHandler)
        {
            getClosedSessionDocumentCaller.CallAsync(new object[] {session}, resultHandler, errorHandler);
        }

        public void GetSessionTransactions(Guid? sessionId, AsyncErrorHandler errorHandler, Action<ICollection<ClosedSessionTransactionInfo>> resultHandler)
        {
            getSessionTransactionsCaller.CallAsync(new object[] {sessionId}, resultHandler, errorHandler);
        }

        public void GetSessionsByOperDay(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<CafeSessionInfo>> resultHandler)
        {
            getSessionsByOperDayCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void IsClosedEvent(Guid? sessionId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isClosedEventCaller.CallAsync(new object[] {sessionId}, resultHandler, errorHandler);
        }

        public void IsSessionOpen(DateTime? date, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isSessionOpenCaller.CallAsync(new object[] {date}, resultHandler, errorHandler);
        }

        public void SaveClosedSessionDocument(ClosedSessionDocument document, bool withProcessing, AsyncErrorHandler errorHandler, Action<ClosedSessionStatus> resultHandler)
        {
            saveClosedSessionDocumentCaller.CallAsync(new object[] {document, withProcessing}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<bool> CanAcceptSession(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return canAcceptSessionCaller.Call<bool>(new object[] { sessionId }, asyncState, requestTimeout);
        }

        public Task<ClosedSessionDocument> GetClosedSessionDocument(CafeSessionProperties session, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getClosedSessionDocumentCaller.Call<ClosedSessionDocument>(new object[] { session }, asyncState, requestTimeout);
        }

        public Task<ICollection<ClosedSessionTransactionInfo>> GetSessionTransactions(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSessionTransactionsCaller.Call<ICollection<ClosedSessionTransactionInfo>>(new object[] { sessionId }, asyncState, requestTimeout);
        }

        public Task<List<CafeSessionInfo>> GetSessionsByOperDay(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSessionsByOperDayCaller.Call<List<CafeSessionInfo>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<bool> IsClosedEvent(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isClosedEventCaller.Call<bool>(new object[] { sessionId }, asyncState, requestTimeout);
        }

        public Task<bool> IsSessionOpen(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isSessionOpenCaller.Call<bool>(new object[] { date }, asyncState, requestTimeout);
        }

        public Task<ClosedSessionStatus> SaveClosedSessionDocument(ClosedSessionDocument document, bool withProcessing, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveClosedSessionDocumentCaller.Call<ClosedSessionStatus>(new object[] { document, withProcessing }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SalesAnalysisService : ISalesAnalysisService
    {
        private readonly RemoteMethodCaller buildCaller;
        private readonly RemoteMethodCaller buildReportsCaller;

        internal SalesAnalysisService()
        {

            buildCaller = new RemoteMethodCaller("salesAnalysis", "build");
            buildCaller.AddArg("dateFrom", typeof(DateTime?));
            buildCaller.AddArg("dateTo", typeof(DateTime?));
            buildCaller.AddArg("xyzAnalysisInterval", typeof(XyzAnalysisInterval));
            buildCaller.AddArg("storeFilter", typeof(HashSet<Guid>));
            buildCaller.AddArg("groupFilter", typeof(HashSet<Guid>));
            buildCaller.AddArg("categoryFilter", typeof(HashSet<Guid>));
            buildCaller.AddArg("isFoodcostReport", typeof(bool));

            buildReportsCaller = new RemoteMethodCaller("salesAnalysis", "buildReports");
            buildReportsCaller.AddArg("dateFrom", typeof(DateTime?));
            buildReportsCaller.AddArg("dateTo", typeof(DateTime?));
            buildReportsCaller.AddArg("baseDateFrom", typeof(DateTime?));
            buildReportsCaller.AddArg("baseDateTo", typeof(DateTime?));
            buildReportsCaller.AddArg("xyzAnalysisInterval", typeof(XyzAnalysisInterval));
            buildReportsCaller.AddArg("storeFilter", typeof(HashSet<Guid>));
            buildReportsCaller.AddArg("groupFilter", typeof(HashSet<Guid>));
            buildReportsCaller.AddArg("categoryFilter", typeof(HashSet<Guid>));
            buildReportsCaller.AddArg("isFoodcostReport", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<SalesAnalysisReport> Build(DateTime? dateFrom, DateTime? dateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport)
        {
            return buildCaller.CreateCall<SalesAnalysisReport>(new object[] { dateFrom, dateTo, xyzAnalysisInterval, storeFilter, groupFilter, categoryFilter, isFoodcostReport });
        }

        public IServiceMethodCall<List<SalesAnalysisReport>> BuildReports(DateTime? dateFrom, DateTime? dateTo, DateTime? baseDateFrom, DateTime? baseDateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport)
        {
            return buildReportsCaller.CreateCall<List<SalesAnalysisReport>>(new object[] { dateFrom, dateTo, baseDateFrom, baseDateTo, xyzAnalysisInterval, storeFilter, groupFilter, categoryFilter, isFoodcostReport });
        }

        #endregion

        #region asynchronous version
        public void Build(DateTime? dateFrom, DateTime? dateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, AsyncErrorHandler errorHandler, Action<SalesAnalysisReport> resultHandler)
        {
            buildCaller.CallAsync(new object[] {dateFrom, dateTo, xyzAnalysisInterval, storeFilter, groupFilter, categoryFilter, isFoodcostReport}, resultHandler, errorHandler);
        }

        public void BuildReports(DateTime? dateFrom, DateTime? dateTo, DateTime? baseDateFrom, DateTime? baseDateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, AsyncErrorHandler errorHandler, Action<List<SalesAnalysisReport>> resultHandler)
        {
            buildReportsCaller.CallAsync(new object[] {dateFrom, dateTo, baseDateFrom, baseDateTo, xyzAnalysisInterval, storeFilter, groupFilter, categoryFilter, isFoodcostReport}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<SalesAnalysisReport> Build(DateTime? dateFrom, DateTime? dateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildCaller.Call<SalesAnalysisReport>(new object[] { dateFrom, dateTo, xyzAnalysisInterval, storeFilter, groupFilter, categoryFilter, isFoodcostReport }, asyncState, requestTimeout);
        }

        public Task<List<SalesAnalysisReport>> BuildReports(DateTime? dateFrom, DateTime? dateTo, DateTime? baseDateFrom, DateTime? baseDateTo, XyzAnalysisInterval xyzAnalysisInterval, HashSet<Guid> storeFilter, HashSet<Guid> groupFilter, HashSet<Guid> categoryFilter, bool isFoodcostReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildReportsCaller.Call<List<SalesAnalysisReport>>(new object[] { dateFrom, dateTo, baseDateFrom, baseDateTo, xyzAnalysisInterval, storeFilter, groupFilter, categoryFilter, isFoodcostReport }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class AuthorizationService : IAuthorizationService
    {
        private readonly RemoteMethodCaller authorizeCaller;
        private readonly RemoteMethodCaller getCurrentAuthInfoCaller;
        private readonly RemoteMethodCaller getCurrentFingerPrintsCaller;
        private readonly RemoteMethodCaller saveLogoutEventCaller;

        internal AuthorizationService()
        {

            authorizeCaller = new RemoteMethodCaller("authorization", "authorize");

            getCurrentAuthInfoCaller = new RemoteMethodCaller("authorization", "getCurrentAuthInfo");

            getCurrentFingerPrintsCaller = new RemoteMethodCaller("authorization", "getCurrentFingerPrints");

            saveLogoutEventCaller = new RemoteMethodCaller("authorization", "saveLogoutEvent");
        }

        #region Synchronous versions
        public IServiceMethodCall<Guid?> Authorize()
        {
            return authorizeCaller.CreateCall<Guid?>(new object[] {  });
        }

        public IServiceMethodCall<AuthResultDto> GetCurrentAuthInfo()
        {
            return getCurrentAuthInfoCaller.CreateCall<AuthResultDto>(new object[] {  });
        }

        public IServiceMethodCall<ServerFingerPrintsInfo> GetCurrentFingerPrints()
        {
            return getCurrentFingerPrintsCaller.CreateCall<ServerFingerPrintsInfo>(new object[] {  });
        }

        public IServiceMethodCall<object> SaveLogoutEvent()
        {
            return saveLogoutEventCaller.CreateCall<object>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void Authorize(AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            authorizeCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetCurrentAuthInfo(AsyncErrorHandler errorHandler, Action<AuthResultDto> resultHandler)
        {
            getCurrentAuthInfoCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetCurrentFingerPrints(AsyncErrorHandler errorHandler, Action<ServerFingerPrintsInfo> resultHandler)
        {
            getCurrentFingerPrintsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveLogoutEvent(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveLogoutEventCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Guid?> Authorize([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return authorizeCaller.Call<Guid?>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<AuthResultDto> GetCurrentAuthInfo([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCurrentAuthInfoCaller.Call<AuthResultDto>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<ServerFingerPrintsInfo> GetCurrentFingerPrints([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCurrentFingerPrintsCaller.Call<ServerFingerPrintsInfo>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SaveLogoutEvent([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveLogoutEventCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class BinaryStorageService : IBinaryStorageService
    {
        private readonly RemoteMethodCaller deleteCaller;
        private readonly RemoteMethodCaller loadCaller;
        private readonly RemoteMethodCaller loadInfoCaller;
        private readonly RemoteMethodCaller saveCaller;

        internal BinaryStorageService()
        {

            deleteCaller = new RemoteMethodCaller("storage", "delete");
            deleteCaller.AddArg("uri", typeof(string));

            loadCaller = new RemoteMethodCaller("storage", "load");
            loadCaller.AddArg("uri", typeof(string));

            loadInfoCaller = new RemoteMethodCaller("storage", "loadInfo");
            loadInfoCaller.AddArg("uri", typeof(string));

            saveCaller = new RemoteMethodCaller("storage", "save");
            saveCaller.AddArg("uri", typeof(string));
            saveCaller.AddArg("data", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> Delete(string uri)
        {
            return deleteCaller.CreateCall<object>(new object[] { uri });
        }

        public IServiceMethodCall<DataItemDTO> Load(string uri)
        {
            return loadCaller.CreateCall<DataItemDTO>(new object[] { uri });
        }

        public IServiceMethodCall<DataItemDTO> LoadInfo(string uri)
        {
            return loadInfoCaller.CreateCall<DataItemDTO>(new object[] { uri });
        }

        public IServiceMethodCall<Guid?> Save(string uri, string data)
        {
            return saveCaller.CreateCall<Guid?>(new object[] { uri, data });
        }

        #endregion

        #region asynchronous version
        public void Delete(string uri, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteCaller.CallAsync(new object[] {uri}, resultHandler, errorHandler);
        }

        public void Load(string uri, AsyncErrorHandler errorHandler, Action<DataItemDTO> resultHandler)
        {
            loadCaller.CallAsync(new object[] {uri}, resultHandler, errorHandler);
        }

        public void LoadInfo(string uri, AsyncErrorHandler errorHandler, Action<DataItemDTO> resultHandler)
        {
            loadInfoCaller.CallAsync(new object[] {uri}, resultHandler, errorHandler);
        }

        public void Save(string uri, string data, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            saveCaller.CallAsync(new object[] {uri, data}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> Delete(string uri, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteCaller.Call<object>(new object[] { uri }, asyncState, requestTimeout);
        }

        public Task<DataItemDTO> Load(string uri, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return loadCaller.Call<DataItemDTO>(new object[] { uri }, asyncState, requestTimeout);
        }

        public Task<DataItemDTO> LoadInfo(string uri, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return loadInfoCaller.Call<DataItemDTO>(new object[] { uri }, asyncState, requestTimeout);
        }

        public Task<Guid?> Save(string uri, string data, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCaller.Call<Guid?>(new object[] { uri, data }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ModifierSchemasService : IModifierSchemasService
    {
        private readonly RemoteMethodCaller createOrUpdateModifierSchemaCaller;
        private readonly RemoteMethodCaller deleteOrRestoreModifierSchemaCaller;

        internal ModifierSchemasService()
        {

            createOrUpdateModifierSchemaCaller = new RemoteMethodCaller("modifierSchemas", "createOrUpdateModifierSchema");
            createOrUpdateModifierSchemaCaller.AddArg("modifierSchema", typeof(ByValue<ModifierSchema>));

            deleteOrRestoreModifierSchemaCaller = new RemoteMethodCaller("modifierSchemas", "deleteOrRestoreModifierSchema");
            deleteOrRestoreModifierSchemaCaller.AddArg("modifierSchema", typeof(ModifierSchema));
            deleteOrRestoreModifierSchemaCaller.AddArg("delete", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<ModifierSchema> CreateOrUpdateModifierSchema(ByValue<ModifierSchema> modifierSchema)
        {
            return createOrUpdateModifierSchemaCaller.CreateCall<ModifierSchema>(new object[] { modifierSchema });
        }

        public IServiceMethodCall<object> DeleteOrRestoreModifierSchema(ModifierSchema modifierSchema, bool delete)
        {
            return deleteOrRestoreModifierSchemaCaller.CreateCall<object>(new object[] { modifierSchema, delete });
        }

        #endregion

        #region asynchronous version
        public void CreateOrUpdateModifierSchema(ByValue<ModifierSchema> modifierSchema, AsyncErrorHandler errorHandler, Action<ModifierSchema> resultHandler)
        {
            createOrUpdateModifierSchemaCaller.CallAsync(new object[] {modifierSchema}, resultHandler, errorHandler);
        }

        public void DeleteOrRestoreModifierSchema(ModifierSchema modifierSchema, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteOrRestoreModifierSchemaCaller.CallAsync(new object[] {modifierSchema, delete}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ModifierSchema> CreateOrUpdateModifierSchema(ByValue<ModifierSchema> modifierSchema, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateModifierSchemaCaller.Call<ModifierSchema>(new object[] { modifierSchema }, asyncState, requestTimeout);
        }

        public Task<object> DeleteOrRestoreModifierSchema(ModifierSchema modifierSchema, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteOrRestoreModifierSchemaCaller.Call<object>(new object[] { modifierSchema, delete }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ProductPriceFixedMarkupService : IProductPriceFixedMarkupService
    {
        private readonly RemoteMethodCaller autoGenerateNewProductPricesCaller;
        private readonly RemoteMethodCaller calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller;

        internal ProductPriceFixedMarkupService()
        {

            autoGenerateNewProductPricesCaller = new RemoteMethodCaller("priceMarkup", "autoGenerateNewProductPrices");
            autoGenerateNewProductPricesCaller.AddArg("department", typeof(DepartmentEntity));
            autoGenerateNewProductPricesCaller.AddArg("thresholdPercent", typeof(decimal?));
            autoGenerateNewProductPricesCaller.AddArg("productionDocumentId", typeof(Guid?));
            autoGenerateNewProductPricesCaller.AddArg("roundRule", typeof(RoundRule));

            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller = new RemoteMethodCaller("priceMarkup", "calculatePricesWithFixedMarkupAndThresholdForDepartments");
            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.AddArg("products", typeof(HashSet<ProductSizeKey>));
            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.AddArg("date", typeof(DateTime?));
            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.AddArg("markupOptions", typeof(ProductPriceMarkupOptions));
            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.AddArg("priceCategory", typeof(ClientPriceCategory));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<ProductSizeKey, decimal>> AutoGenerateNewProductPrices(DepartmentEntity department, decimal? thresholdPercent, Guid? productionDocumentId, RoundRule roundRule)
        {
            return autoGenerateNewProductPricesCaller.CreateCall<Dictionary<ProductSizeKey, decimal>>(new object[] { department, thresholdPercent, productionDocumentId, roundRule });
        }

        public IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>> CalculatePricesWithFixedMarkupAndThresholdForDepartments(HashSet<ProductSizeKey> products, ICollection<DepartmentEntity> departments, DateTime? date, ProductPriceMarkupOptions markupOptions, ClientPriceCategory priceCategory)
        {
            return calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.CreateCall<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>>(new object[] { products, departments, date, markupOptions, priceCategory });
        }

        #endregion

        #region asynchronous version
        public void AutoGenerateNewProductPrices(DepartmentEntity department, decimal? thresholdPercent, Guid? productionDocumentId, RoundRule roundRule, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeKey, decimal>> resultHandler)
        {
            autoGenerateNewProductPricesCaller.CallAsync(new object[] {department, thresholdPercent, productionDocumentId, roundRule}, resultHandler, errorHandler);
        }

        public void CalculatePricesWithFixedMarkupAndThresholdForDepartments(HashSet<ProductSizeKey> products, ICollection<DepartmentEntity> departments, DateTime? date, ProductPriceMarkupOptions markupOptions, ClientPriceCategory priceCategory, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>> resultHandler)
        {
            calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.CallAsync(new object[] {products, departments, date, markupOptions, priceCategory}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<ProductSizeKey, decimal>> AutoGenerateNewProductPrices(DepartmentEntity department, decimal? thresholdPercent, Guid? productionDocumentId, RoundRule roundRule, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return autoGenerateNewProductPricesCaller.Call<Dictionary<ProductSizeKey, decimal>>(new object[] { department, thresholdPercent, productionDocumentId, roundRule }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>> CalculatePricesWithFixedMarkupAndThresholdForDepartments(HashSet<ProductSizeKey> products, ICollection<DepartmentEntity> departments, DateTime? date, ProductPriceMarkupOptions markupOptions, ClientPriceCategory priceCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculatePricesWithFixedMarkupAndThresholdForDepartmentsCaller.Call<Dictionary<DepartmentEntity, Dictionary<ProductSizeKey, decimal>>>(new object[] { products, departments, date, markupOptions, priceCategory }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ProductsAssemblyChartService : IProductsAssemblyChartService
    {
        private readonly RemoteMethodCaller deleteAssemblyChartCaller;
        private readonly RemoteMethodCaller getAllAssemblyChartsCaller;
        private readonly RemoteMethodCaller getAllAssemblyChartsForProductCaller;
        private readonly RemoteMethodCaller getAllAssemblyChartsForProductsCaller;
        private readonly RemoteMethodCaller getAllAssemblyChartsRecursiveCaller;
        private readonly RemoteMethodCaller getAssemblyChartsIntersectionCaller;
        private readonly RemoteMethodCaller getAssemblyChartsTreeCaller;
        private readonly RemoteMethodCaller getLoadedAssemblyChartsCaller;
        private readonly RemoteMethodCaller isAssemblyChartsEditableCaller;
        private readonly RemoteMethodCaller saveAssemblyChartCaller;
        private readonly RemoteMethodCaller saveAssemblyChartListCaller;

        internal ProductsAssemblyChartService()
        {

            deleteAssemblyChartCaller = new RemoteMethodCaller("productCharts", "deleteAssemblyChart");
            deleteAssemblyChartCaller.AddArg("chartId", typeof(Guid?));

            getAllAssemblyChartsCaller = new RemoteMethodCaller("productCharts", "getAllAssemblyCharts");
            getAllAssemblyChartsCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllAssemblyChartsCaller.AddArg("department", typeof(DepartmentEntity));

            getAllAssemblyChartsForProductCaller = new RemoteMethodCaller("productCharts", "getAllAssemblyChartsForProduct");
            getAllAssemblyChartsForProductCaller.AddArg("product", typeof(Product));

            getAllAssemblyChartsForProductsCaller = new RemoteMethodCaller("productCharts", "getAllAssemblyChartsForProducts");
            getAllAssemblyChartsForProductsCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllAssemblyChartsForProductsCaller.AddArg("products", typeof(List<Product>));

            getAllAssemblyChartsRecursiveCaller = new RemoteMethodCaller("productCharts", "getAllAssemblyChartsRecursive");
            getAllAssemblyChartsRecursiveCaller.AddArg("assemblyChart", typeof(AssemblyChart));

            getAssemblyChartsIntersectionCaller = new RemoteMethodCaller("productCharts", "getAssemblyChartsIntersection");
            getAssemblyChartsIntersectionCaller.AddArg("dateFrom", typeof(DateTime?));
            getAssemblyChartsIntersectionCaller.AddArg("dateTo", typeof(DateTime?));
            getAssemblyChartsIntersectionCaller.AddArg("dishes", typeof(List<Product>));

            getAssemblyChartsTreeCaller = new RemoteMethodCaller("productCharts", "getAssemblyChartsTree");
            getAssemblyChartsTreeCaller.AddArg("dateFrom", typeof(DateTime?));
            getAssemblyChartsTreeCaller.AddArg("products", typeof(List<Product>));
            getAssemblyChartsTreeCaller.AddArg("department", typeof(DepartmentEntity));

            getLoadedAssemblyChartsCaller = new RemoteMethodCaller("productCharts", "getLoadedAssemblyCharts");
            getLoadedAssemblyChartsCaller.AddArg("dishes", typeof(List<Product>));

            isAssemblyChartsEditableCaller = new RemoteMethodCaller("productCharts", "isAssemblyChartsEditable");

            saveAssemblyChartCaller = new RemoteMethodCaller("productCharts", "saveAssemblyChart");
            saveAssemblyChartCaller.AddArg("chart", typeof(AssemblyChart));
            saveAssemblyChartCaller.AddArg("overwrite", typeof(bool));

            saveAssemblyChartListCaller = new RemoteMethodCaller("productCharts", "saveAssemblyChartList");
            saveAssemblyChartListCaller.AddArg("charts", typeof(ICollection<AssemblyChart>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> DeleteAssemblyChart(Guid? chartId)
        {
            return deleteAssemblyChartCaller.CreateCall<object>(new object[] { chartId });
        }

        public IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyCharts(DateTime? dateFrom, DepartmentEntity department)
        {
            return getAllAssemblyChartsCaller.CreateCall<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dateFrom, department });
        }

        public IServiceMethodCall<Dictionary<AssemblyChart, AssemblyChartVersionWarning>> GetAllAssemblyChartsForProduct(Product product)
        {
            return getAllAssemblyChartsForProductCaller.CreateCall<Dictionary<AssemblyChart, AssemblyChartVersionWarning>>(new object[] { product });
        }

        public IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyChartsForProducts(DateTime? dateFrom, List<Product> products)
        {
            return getAllAssemblyChartsForProductsCaller.CreateCall<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dateFrom, products });
        }

        public IServiceMethodCall<AssemblyChartsTree> GetAllAssemblyChartsRecursive(AssemblyChart assemblyChart)
        {
            return getAllAssemblyChartsRecursiveCaller.CreateCall<AssemblyChartsTree>(new object[] { assemblyChart });
        }

        public IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetAssemblyChartsIntersection(DateTime? dateFrom, DateTime? dateTo, List<Product> dishes)
        {
            return getAssemblyChartsIntersectionCaller.CreateCall<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dateFrom, dateTo, dishes });
        }

        public IServiceMethodCall<Dictionary<Product, AssemblyChartsTree>> GetAssemblyChartsTree(DateTime? dateFrom, List<Product> products, DepartmentEntity department)
        {
            return getAssemblyChartsTreeCaller.CreateCall<Dictionary<Product, AssemblyChartsTree>>(new object[] { dateFrom, products, department });
        }

        public IServiceMethodCall<Dictionary<Product, ICollection<AssemblyChart>>> GetLoadedAssemblyCharts(List<Product> dishes)
        {
            return getLoadedAssemblyChartsCaller.CreateCall<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dishes });
        }

        public IServiceMethodCall<bool> IsAssemblyChartsEditable()
        {
            return isAssemblyChartsEditableCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<AssemblyChartSaveResult> SaveAssemblyChart(AssemblyChart chart, bool overwrite)
        {
            return saveAssemblyChartCaller.CreateCall<AssemblyChartSaveResult>(new object[] { chart, overwrite });
        }

        public IServiceMethodCall<object> SaveAssemblyChartList(ICollection<AssemblyChart> charts)
        {
            return saveAssemblyChartListCaller.CreateCall<object>(new object[] { charts });
        }

        #endregion

        #region asynchronous version
        public void DeleteAssemblyChart(Guid? chartId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteAssemblyChartCaller.CallAsync(new object[] {chartId}, resultHandler, errorHandler);
        }

        public void GetAllAssemblyCharts(DateTime? dateFrom, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler)
        {
            getAllAssemblyChartsCaller.CallAsync(new object[] {dateFrom, department}, resultHandler, errorHandler);
        }

        public void GetAllAssemblyChartsForProduct(Product product, AsyncErrorHandler errorHandler, Action<Dictionary<AssemblyChart, AssemblyChartVersionWarning>> resultHandler)
        {
            getAllAssemblyChartsForProductCaller.CallAsync(new object[] {product}, resultHandler, errorHandler);
        }

        public void GetAllAssemblyChartsForProducts(DateTime? dateFrom, List<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler)
        {
            getAllAssemblyChartsForProductsCaller.CallAsync(new object[] {dateFrom, products}, resultHandler, errorHandler);
        }

        public void GetAllAssemblyChartsRecursive(AssemblyChart assemblyChart, AsyncErrorHandler errorHandler, Action<AssemblyChartsTree> resultHandler)
        {
            getAllAssemblyChartsRecursiveCaller.CallAsync(new object[] {assemblyChart}, resultHandler, errorHandler);
        }

        public void GetAssemblyChartsIntersection(DateTime? dateFrom, DateTime? dateTo, List<Product> dishes, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler)
        {
            getAssemblyChartsIntersectionCaller.CallAsync(new object[] {dateFrom, dateTo, dishes}, resultHandler, errorHandler);
        }

        public void GetAssemblyChartsTree(DateTime? dateFrom, List<Product> products, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<Product, AssemblyChartsTree>> resultHandler)
        {
            getAssemblyChartsTreeCaller.CallAsync(new object[] {dateFrom, products, department}, resultHandler, errorHandler);
        }

        public void GetLoadedAssemblyCharts(List<Product> dishes, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ICollection<AssemblyChart>>> resultHandler)
        {
            getLoadedAssemblyChartsCaller.CallAsync(new object[] {dishes}, resultHandler, errorHandler);
        }

        public void IsAssemblyChartsEditable(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isAssemblyChartsEditableCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveAssemblyChart(AssemblyChart chart, bool overwrite, AsyncErrorHandler errorHandler, Action<AssemblyChartSaveResult> resultHandler)
        {
            saveAssemblyChartCaller.CallAsync(new object[] {chart, overwrite}, resultHandler, errorHandler);
        }

        public void SaveAssemblyChartList(ICollection<AssemblyChart> charts, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveAssemblyChartListCaller.CallAsync(new object[] {charts}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> DeleteAssemblyChart(Guid? chartId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteAssemblyChartCaller.Call<object>(new object[] { chartId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyCharts(DateTime? dateFrom, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAssemblyChartsCaller.Call<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dateFrom, department }, asyncState, requestTimeout);
        }

        public Task<Dictionary<AssemblyChart, AssemblyChartVersionWarning>> GetAllAssemblyChartsForProduct(Product product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAssemblyChartsForProductCaller.Call<Dictionary<AssemblyChart, AssemblyChartVersionWarning>>(new object[] { product }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, ICollection<AssemblyChart>>> GetAllAssemblyChartsForProducts(DateTime? dateFrom, List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAssemblyChartsForProductsCaller.Call<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dateFrom, products }, asyncState, requestTimeout);
        }

        public Task<AssemblyChartsTree> GetAllAssemblyChartsRecursive(AssemblyChart assemblyChart, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAssemblyChartsRecursiveCaller.Call<AssemblyChartsTree>(new object[] { assemblyChart }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, ICollection<AssemblyChart>>> GetAssemblyChartsIntersection(DateTime? dateFrom, DateTime? dateTo, List<Product> dishes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAssemblyChartsIntersectionCaller.Call<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dateFrom, dateTo, dishes }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, AssemblyChartsTree>> GetAssemblyChartsTree(DateTime? dateFrom, List<Product> products, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAssemblyChartsTreeCaller.Call<Dictionary<Product, AssemblyChartsTree>>(new object[] { dateFrom, products, department }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, ICollection<AssemblyChart>>> GetLoadedAssemblyCharts(List<Product> dishes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLoadedAssemblyChartsCaller.Call<Dictionary<Product, ICollection<AssemblyChart>>>(new object[] { dishes }, asyncState, requestTimeout);
        }

        public Task<bool> IsAssemblyChartsEditable([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isAssemblyChartsEditableCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<AssemblyChartSaveResult> SaveAssemblyChart(AssemblyChart chart, bool overwrite, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveAssemblyChartCaller.Call<AssemblyChartSaveResult>(new object[] { chart, overwrite }, asyncState, requestTimeout);
        }

        public Task<object> SaveAssemblyChartList(ICollection<AssemblyChart> charts, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveAssemblyChartListCaller.Call<object>(new object[] { charts }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ProductsAssemblyInfoService : IProductsAssemblyInfoService
    {
        private readonly RemoteMethodCaller getAllergenGroupsCaller;
        private readonly RemoteMethodCaller getDisassembledAmountsCaller;
        private readonly RemoteMethodCaller getModifiersContainingProductCaller;
        private readonly RemoteMethodCaller getProductOutcomesCaller;
        private readonly RemoteMethodCaller getProductOutputCommentsCaller;
        private readonly RemoteMethodCaller getProductsFromModifierAssemblyChartContainingThatSameModifierCaller;
        private readonly RemoteMethodCaller getProductsWithDeprecatedProductScaleCaller;

        internal ProductsAssemblyInfoService()
        {

            getAllergenGroupsCaller = new RemoteMethodCaller("productsInfo", "getAllergenGroups");
            getAllergenGroupsCaller.AddArg("department", typeof(DepartmentEntity));
            getAllergenGroupsCaller.AddArg("products", typeof(List<Product>));
            getAllergenGroupsCaller.AddArg("date", typeof(DateTime?));

            getDisassembledAmountsCaller = new RemoteMethodCaller("productsInfo", "getDisassembledAmounts");
            getDisassembledAmountsCaller.AddArg("productSizeSet", typeof(Dictionary<ProductSizeKey, decimal>));
            getDisassembledAmountsCaller.AddArg("date", typeof(DateTime?));
            getDisassembledAmountsCaller.AddArg("store", typeof(Store));

            getModifiersContainingProductCaller = new RemoteMethodCaller("productsInfo", "getModifiersContainingProduct");
            getModifiersContainingProductCaller.AddArg("modifiers", typeof(List<Product>));
            getModifiersContainingProductCaller.AddArg("product", typeof(Product));
            getModifiersContainingProductCaller.AddArg("department", typeof(DepartmentEntity));

            getProductOutcomesCaller = new RemoteMethodCaller("productsInfo", "getProductOutcomes");
            getProductOutcomesCaller.AddArg("date", typeof(DateTime?));

            getProductOutputCommentsCaller = new RemoteMethodCaller("productsInfo", "getProductOutputComments");
            getProductOutputCommentsCaller.AddArg("date", typeof(DateTime?));
            getProductOutputCommentsCaller.AddArg("products", typeof(ICollection<Product>));

            getProductsFromModifierAssemblyChartContainingThatSameModifierCaller = new RemoteMethodCaller("productsInfo", "getProductsFromModifierAssemblyChartContainingThatSameModifier");
            getProductsFromModifierAssemblyChartContainingThatSameModifierCaller.AddArg("modifier", typeof(Product));
            getProductsFromModifierAssemblyChartContainingThatSameModifierCaller.AddArg("modifierProducts", typeof(List<Product>));
            getProductsFromModifierAssemblyChartContainingThatSameModifierCaller.AddArg("department", typeof(DepartmentEntity));

            getProductsWithDeprecatedProductScaleCaller = new RemoteMethodCaller("productsInfo", "getProductsWithDeprecatedProductScale");
            getProductsWithDeprecatedProductScaleCaller.AddArg("date", typeof(DateTime?));
            getProductsWithDeprecatedProductScaleCaller.AddArg("products", typeof(List<Product>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<Product, HashSet<AllergenGroup>>> GetAllergenGroups(DepartmentEntity department, List<Product> products, DateTime? date)
        {
            return getAllergenGroupsCaller.CreateCall<Dictionary<Product, HashSet<AllergenGroup>>>(new object[] { department, products, date });
        }

        public IServiceMethodCall<Dictionary<Product, decimal>> GetDisassembledAmounts(Dictionary<ProductSizeKey, decimal> productSizeSet, DateTime? date, Store store)
        {
            return getDisassembledAmountsCaller.CreateCall<Dictionary<Product, decimal>>(new object[] { productSizeSet, date, store });
        }

        public IServiceMethodCall<ICollection<string>> GetModifiersContainingProduct(List<Product> modifiers, Product product, DepartmentEntity department)
        {
            return getModifiersContainingProductCaller.CreateCall<ICollection<string>>(new object[] { modifiers, product, department });
        }

        public IServiceMethodCall<Dictionary<Product, decimal>> GetProductOutcomes(DateTime? date)
        {
            return getProductOutcomesCaller.CreateCall<Dictionary<Product, decimal>>(new object[] { date });
        }

        public IServiceMethodCall<Dictionary<Product, string>> GetProductOutputComments(DateTime? date, ICollection<Product> products)
        {
            return getProductOutputCommentsCaller.CreateCall<Dictionary<Product, string>>(new object[] { date, products });
        }

        public IServiceMethodCall<List<string>> GetProductsFromModifierAssemblyChartContainingThatSameModifier(Product modifier, List<Product> modifierProducts, DepartmentEntity department)
        {
            return getProductsFromModifierAssemblyChartContainingThatSameModifierCaller.CreateCall<List<string>>(new object[] { modifier, modifierProducts, department });
        }

        public IServiceMethodCall<HashSet<string>> GetProductsWithDeprecatedProductScale(DateTime? date, List<Product> products)
        {
            return getProductsWithDeprecatedProductScaleCaller.CreateCall<HashSet<string>>(new object[] { date, products });
        }

        #endregion

        #region asynchronous version
        public void GetAllergenGroups(DepartmentEntity department, List<Product> products, DateTime? date, AsyncErrorHandler errorHandler, Action<Dictionary<Product, HashSet<AllergenGroup>>> resultHandler)
        {
            getAllergenGroupsCaller.CallAsync(new object[] {department, products, date}, resultHandler, errorHandler);
        }

        public void GetDisassembledAmounts(Dictionary<ProductSizeKey, decimal> productSizeSet, DateTime? date, Store store, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler)
        {
            getDisassembledAmountsCaller.CallAsync(new object[] {productSizeSet, date, store}, resultHandler, errorHandler);
        }

        public void GetModifiersContainingProduct(List<Product> modifiers, Product product, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<ICollection<string>> resultHandler)
        {
            getModifiersContainingProductCaller.CallAsync(new object[] {modifiers, product, department}, resultHandler, errorHandler);
        }

        public void GetProductOutcomes(DateTime? date, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler)
        {
            getProductOutcomesCaller.CallAsync(new object[] {date}, resultHandler, errorHandler);
        }

        public void GetProductOutputComments(DateTime? date, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<Product, string>> resultHandler)
        {
            getProductOutputCommentsCaller.CallAsync(new object[] {date, products}, resultHandler, errorHandler);
        }

        public void GetProductsFromModifierAssemblyChartContainingThatSameModifier(Product modifier, List<Product> modifierProducts, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<List<string>> resultHandler)
        {
            getProductsFromModifierAssemblyChartContainingThatSameModifierCaller.CallAsync(new object[] {modifier, modifierProducts, department}, resultHandler, errorHandler);
        }

        public void GetProductsWithDeprecatedProductScale(DateTime? date, List<Product> products, AsyncErrorHandler errorHandler, Action<HashSet<string>> resultHandler)
        {
            getProductsWithDeprecatedProductScaleCaller.CallAsync(new object[] {date, products}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<Product, HashSet<AllergenGroup>>> GetAllergenGroups(DepartmentEntity department, List<Product> products, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllergenGroupsCaller.Call<Dictionary<Product, HashSet<AllergenGroup>>>(new object[] { department, products, date }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, decimal>> GetDisassembledAmounts(Dictionary<ProductSizeKey, decimal> productSizeSet, DateTime? date, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDisassembledAmountsCaller.Call<Dictionary<Product, decimal>>(new object[] { productSizeSet, date, store }, asyncState, requestTimeout);
        }

        public Task<ICollection<string>> GetModifiersContainingProduct(List<Product> modifiers, Product product, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getModifiersContainingProductCaller.Call<ICollection<string>>(new object[] { modifiers, product, department }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, decimal>> GetProductOutcomes(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductOutcomesCaller.Call<Dictionary<Product, decimal>>(new object[] { date }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, string>> GetProductOutputComments(DateTime? date, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductOutputCommentsCaller.Call<Dictionary<Product, string>>(new object[] { date, products }, asyncState, requestTimeout);
        }

        public Task<List<string>> GetProductsFromModifierAssemblyChartContainingThatSameModifier(Product modifier, List<Product> modifierProducts, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductsFromModifierAssemblyChartContainingThatSameModifierCaller.Call<List<string>>(new object[] { modifier, modifierProducts, department }, asyncState, requestTimeout);
        }

        public Task<HashSet<string>> GetProductsWithDeprecatedProductScale(DateTime? date, List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductsWithDeprecatedProductScaleCaller.Call<HashSet<string>>(new object[] { date, products }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ProductsService : IProductsService
    {
        private readonly RemoteMethodCaller addOrUpdateSourceNatureCaller;
        private readonly RemoteMethodCaller createOrUpdateAccountingCategoryCaller;
        private readonly RemoteMethodCaller createOrUpdateAllergenCaller;
        private readonly RemoteMethodCaller createOrUpdateItemCategoryCaller;
        private readonly RemoteMethodCaller createOrUpdateMeasureUnitCaller;
        private readonly RemoteMethodCaller createOrUpdateOuterEconomicActivityNomenclatureCodeCaller;
        private readonly RemoteMethodCaller createOrUpdateProductScaleCaller;
        private readonly RemoteMethodCaller createOrUpdateProductTagGroupCaller;
        private readonly RemoteMethodCaller createProductCaller;
        private readonly RemoteMethodCaller createProductApiV3Caller;
        private readonly RemoteMethodCaller createProductCategoryCaller;
        private readonly RemoteMethodCaller createProductGroupCaller;
        private readonly RemoteMethodCaller deleteProductScalesCaller;
        private readonly RemoteMethodCaller deleteProductTagGroupsCaller;
        private readonly RemoteMethodCaller deleteProductsCaller;
        private readonly RemoteMethodCaller deleteProductsAndGroupsCaller;
        private readonly RemoteMethodCaller fillProductGroupChildrenRecursiveCaller;
        private readonly RemoteMethodCaller getExpiredProductsCaller;
        private readonly RemoteMethodCaller getNomenclatureUpdateIntervalCaller;
        private readonly RemoteMethodCaller getPriceListItemsCaller;
        private readonly RemoteMethodCaller getPriceListItemsByDepartmentCaller;
        private readonly RemoteMethodCaller getSalePricesByPeriodCaller;
        private readonly RemoteMethodCaller getTopIngredientsCaller;
        private readonly RemoteMethodCaller getTopIngredientsWithLevelsCaller;
        private readonly RemoteMethodCaller mergeNutritionValuesCaller;
        private readonly RemoteMethodCaller moveProductsAndGroupsCaller;
        private readonly RemoteMethodCaller saveCustomProductCategoriesCaller;
        private readonly RemoteMethodCaller saveOrUpdateQuickLabelsCaller;
        private readonly RemoteMethodCaller setChoicesForProductsCaller;
        private readonly RemoteMethodCaller setDeletedAllergenCaller;
        private readonly RemoteMethodCaller setDeletedItemCategoryCaller;
        private readonly RemoteMethodCaller setDeletedOuterEconomicActivityNomenclatureCodeCaller;
        private readonly RemoteMethodCaller setModificatorsUnSaleableByChangeDocumentsCaller;
        private readonly RemoteMethodCaller setModifierSchemaRedefinitionsForProductsCaller;
        private readonly RemoteMethodCaller setProductsTagsCaller;
        private readonly RemoteMethodCaller undeleteProductsAndGroupsCaller;
        private readonly RemoteMethodCaller updateFoodValueForProductByCookingTypeCaller;
        private readonly RemoteMethodCaller updateFoodValueForProductCollectionCaller;
        private readonly RemoteMethodCaller updateOuterEconomicActivityNomenclatureCodesCaller;
        private readonly RemoteMethodCaller updateProductCaller;
        private readonly RemoteMethodCaller updateProductCategoryListCaller;
        private readonly RemoteMethodCaller updateProductGroupCaller;
        private readonly RemoteMethodCaller updateProductsCaller;
        private readonly RemoteMethodCaller updateProductsAndGroupsCaller;
        private readonly RemoteMethodCaller updateProductsCookingPlaceTypeCaller;
        private readonly RemoteMethodCaller updateProductsPositionsCaller;
        private readonly RemoteMethodCaller updateSupplierInfosCaller;
        private readonly RemoteMethodCaller updateSupplierProductCaller;
        private readonly RemoteMethodCaller updateTaxCategoryListCaller;

        internal ProductsService()
        {

            addOrUpdateSourceNatureCaller = new RemoteMethodCaller("products", "addOrUpdateSourceNature");
            addOrUpdateSourceNatureCaller.AddArg("sourceNature", typeof(ByValue<SourceNature>));

            createOrUpdateAccountingCategoryCaller = new RemoteMethodCaller("products", "createOrUpdateAccountingCategory");
            createOrUpdateAccountingCategoryCaller.AddArg("category", typeof(ByValue<AccountingCategory>));
            createOrUpdateAccountingCategoryCaller.AddArg("deleted", typeof(bool));

            createOrUpdateAllergenCaller = new RemoteMethodCaller("products", "createOrUpdateAllergen");
            createOrUpdateAllergenCaller.AddArg("allergenGroup", typeof(ByValue<AllergenGroup>));

            createOrUpdateItemCategoryCaller = new RemoteMethodCaller("products", "createOrUpdateItemCategory");
            createOrUpdateItemCategoryCaller.AddArg("itemCategory", typeof(ByValue<ProductItemCategory>));

            createOrUpdateMeasureUnitCaller = new RemoteMethodCaller("products", "createOrUpdateMeasureUnit");
            createOrUpdateMeasureUnitCaller.AddArg("unit", typeof(ByValue<MeasureUnit>));
            createOrUpdateMeasureUnitCaller.AddArg("deleted", typeof(bool));

            createOrUpdateOuterEconomicActivityNomenclatureCodeCaller = new RemoteMethodCaller("products", "createOrUpdateOuterEconomicActivityNomenclatureCode");
            createOrUpdateOuterEconomicActivityNomenclatureCodeCaller.AddArg("outerEanProduct", typeof(ByValue<OuterEconomicActivityNomenclatureCode>));

            createOrUpdateProductScaleCaller = new RemoteMethodCaller("products", "createOrUpdateProductScale");
            createOrUpdateProductScaleCaller.AddArg("productScale", typeof(ByValue<ProductScale>));
            createOrUpdateProductScaleCaller.AddArg("sizes", typeof(List<ByValue<ProductSize>>));

            createOrUpdateProductTagGroupCaller = new RemoteMethodCaller("products", "createOrUpdateProductTagGroup");
            createOrUpdateProductTagGroupCaller.AddArg("productTagGroup", typeof(ByValue<ProductTagGroup>));
            createOrUpdateProductTagGroupCaller.AddArg("productTags", typeof(HashSet<ByValue<ProductTag>>));

            createProductCaller = new RemoteMethodCaller("products", "createProduct");
            createProductCaller.AddArg("product", typeof(ByValue<Product>));
            createProductCaller.AddArg("overrideFastCode", typeof(bool));
            createProductCaller.AddArg("overrideCode", typeof(bool));

            createProductApiV3Caller = new RemoteMethodCaller("products", "createProductApiV3");
            createProductApiV3Caller.AddArg("product", typeof(ByValue<Product>));
            createProductApiV3Caller.AddArg("overrideFastCode", typeof(bool));
            createProductApiV3Caller.AddArg("overrideCode", typeof(bool));

            createProductCategoryCaller = new RemoteMethodCaller("products", "createProductCategory");
            createProductCategoryCaller.AddArg("name", typeof(string));

            createProductGroupCaller = new RemoteMethodCaller("products", "createProductGroup");
            createProductGroupCaller.AddArg("productGroup", typeof(ByValue<ProductGroup>));

            deleteProductScalesCaller = new RemoteMethodCaller("products", "deleteProductScales");
            deleteProductScalesCaller.AddArg("productScales", typeof(List<ProductScale>));
            deleteProductScalesCaller.AddArg("delete", typeof(bool));

            deleteProductTagGroupsCaller = new RemoteMethodCaller("products", "deleteProductTagGroups");
            deleteProductTagGroupsCaller.AddArg("productTagGroups", typeof(List<ProductTagGroup>));
            deleteProductTagGroupsCaller.AddArg("delete", typeof(bool));

            deleteProductsCaller = new RemoteMethodCaller("products", "deleteProducts");
            deleteProductsCaller.AddArg("products", typeof(List<Product>));

            deleteProductsAndGroupsCaller = new RemoteMethodCaller("products", "deleteProductsAndGroups");
            deleteProductsAndGroupsCaller.AddArg("products", typeof(List<Product>));
            deleteProductsAndGroupsCaller.AddArg("groups", typeof(List<ProductGroup>));

            fillProductGroupChildrenRecursiveCaller = new RemoteMethodCaller("products", "fillProductGroupChildrenRecursive");
            fillProductGroupChildrenRecursiveCaller.AddArg("group", typeof(ProductGroup));
            fillProductGroupChildrenRecursiveCaller.AddArg("dataFillInfos", typeof(HashSet<ProductGroupChildrenFillInfo>));
            fillProductGroupChildrenRecursiveCaller.AddArg("replaceValues", typeof(bool));

            getExpiredProductsCaller = new RemoteMethodCaller("products", "getExpiredProducts");
            getExpiredProductsCaller.AddArg("date", typeof(DateTime?));
            getExpiredProductsCaller.AddArg("stores", typeof(HashSet<Store>));
            getExpiredProductsCaller.AddArg("products", typeof(HashSet<Product>));

            getNomenclatureUpdateIntervalCaller = new RemoteMethodCaller("products", "getNomenclatureUpdateInterval");

            getPriceListItemsCaller = new RemoteMethodCaller("products", "getPriceListItems");
            getPriceListItemsCaller.AddArg("dateFrom", typeof(DateTime?));
            getPriceListItemsCaller.AddArg("dateTo", typeof(DateTime?));
            getPriceListItemsCaller.AddArg("departments", typeof(List<DepartmentEntity>));
            getPriceListItemsCaller.AddArg("includeItemsWithSchedules", typeof(bool));

            getPriceListItemsByDepartmentCaller = new RemoteMethodCaller("products", "getPriceListItemsByDepartment");
            getPriceListItemsByDepartmentCaller.AddArg("date", typeof(DateTime?));
            getPriceListItemsByDepartmentCaller.AddArg("department", typeof(DepartmentEntity));

            getSalePricesByPeriodCaller = new RemoteMethodCaller("products", "getSalePricesByPeriod");
            getSalePricesByPeriodCaller.AddArg("dateFrom", typeof(DateTime?));
            getSalePricesByPeriodCaller.AddArg("dateTo", typeof(DateTime?));
            getSalePricesByPeriodCaller.AddArg("detalization", typeof(DateDetalization));
            getSalePricesByPeriodCaller.AddArg("department", typeof(DepartmentEntity));

            getTopIngredientsCaller = new RemoteMethodCaller("products", "getTopIngredients");
            getTopIngredientsCaller.AddArg("dishes", typeof(HashSet<Product>));
            getTopIngredientsCaller.AddArg("dateFrom", typeof(DateTime?));
            getTopIngredientsCaller.AddArg("dateTo", typeof(DateTime?));

            getTopIngredientsWithLevelsCaller = new RemoteMethodCaller("products", "getTopIngredientsWithLevels");
            getTopIngredientsWithLevelsCaller.AddArg("dishes", typeof(HashSet<Product>));
            getTopIngredientsWithLevelsCaller.AddArg("dateFrom", typeof(DateTime?));
            getTopIngredientsWithLevelsCaller.AddArg("dateTo", typeof(DateTime?));

            mergeNutritionValuesCaller = new RemoteMethodCaller("products", "mergeNutritionValues");
            mergeNutritionValuesCaller.AddArg("values", typeof(List<NutritionValue>));
            mergeNutritionValuesCaller.AddArg("value", typeof(NutritionValue));

            moveProductsAndGroupsCaller = new RemoteMethodCaller("products", "moveProductsAndGroups");
            moveProductsAndGroupsCaller.AddArg("products", typeof(List<Product>));
            moveProductsAndGroupsCaller.AddArg("groups", typeof(List<ProductGroup>));
            moveProductsAndGroupsCaller.AddArg("group", typeof(ProductGroup));

            saveCustomProductCategoriesCaller = new RemoteMethodCaller("products", "saveCustomProductCategories");
            saveCustomProductCategoriesCaller.AddArg("categoryList", typeof(ByValue<CustomCategoryList>));
            saveCustomProductCategoriesCaller.AddArg("categoryValues", typeof(ICollection<ByValue<CustomCategoryValue>>));

            saveOrUpdateQuickLabelsCaller = new RemoteMethodCaller("products", "saveOrUpdateQuickLabels");
            saveOrUpdateQuickLabelsCaller.AddArg("labels", typeof(ICollection<ByValue<QuickLabels>>));

            setChoicesForProductsCaller = new RemoteMethodCaller("products", "setChoicesForProducts");
            setChoicesForProductsCaller.AddArg("product", typeof(Dictionary<Product, List<ChoiceBinding>>));

            setDeletedAllergenCaller = new RemoteMethodCaller("products", "setDeletedAllergen");
            setDeletedAllergenCaller.AddArg("allergenGroup", typeof(AllergenGroup));
            setDeletedAllergenCaller.AddArg("deletedFlag", typeof(bool));

            setDeletedItemCategoryCaller = new RemoteMethodCaller("products", "setDeletedItemCategory");
            setDeletedItemCategoryCaller.AddArg("itemCategory", typeof(ProductItemCategory));
            setDeletedItemCategoryCaller.AddArg("deletedFlag", typeof(bool));

            setDeletedOuterEconomicActivityNomenclatureCodeCaller = new RemoteMethodCaller("products", "setDeletedOuterEconomicActivityNomenclatureCode");
            setDeletedOuterEconomicActivityNomenclatureCodeCaller.AddArg("outerEanProduct", typeof(OuterEconomicActivityNomenclatureCode));
            setDeletedOuterEconomicActivityNomenclatureCodeCaller.AddArg("deletedFlag", typeof(bool));

            setModificatorsUnSaleableByChangeDocumentsCaller = new RemoteMethodCaller("products", "setModificatorsUnSaleableByChangeDocuments");

            setModifierSchemaRedefinitionsForProductsCaller = new RemoteMethodCaller("products", "setModifierSchemaRedefinitionsForProducts");
            setModifierSchemaRedefinitionsForProductsCaller.AddArg("schemaRedefinitions", typeof(Dictionary<Product, List<ChoiceBindingRedefinition>>));

            setProductsTagsCaller = new RemoteMethodCaller("products", "setProductsTags");
            setProductsTagsCaller.AddArg("products", typeof(HashSet<Product>));
            setProductsTagsCaller.AddArg("tags", typeof(Dictionary<ProductTag, bool>));

            undeleteProductsAndGroupsCaller = new RemoteMethodCaller("products", "undeleteProductsAndGroups");
            undeleteProductsAndGroupsCaller.AddArg("products", typeof(List<Product>));
            undeleteProductsAndGroupsCaller.AddArg("groups", typeof(List<ProductGroup>));
            undeleteProductsAndGroupsCaller.AddArg("recursively", typeof(bool));

            updateFoodValueForProductByCookingTypeCaller = new RemoteMethodCaller("products", "updateFoodValueForProductByCookingType");
            updateFoodValueForProductByCookingTypeCaller.AddArg("product", typeof(Product));
            updateFoodValueForProductByCookingTypeCaller.AddArg("cookingType", typeof(CookingType));
            updateFoodValueForProductByCookingTypeCaller.AddArg("department", typeof(DepartmentEntity));
            updateFoodValueForProductByCookingTypeCaller.AddArg("productSize", typeof(ProductSize));

            updateFoodValueForProductCollectionCaller = new RemoteMethodCaller("products", "updateFoodValueForProductCollection");
            updateFoodValueForProductCollectionCaller.AddArg("products", typeof(List<Product>));

            updateOuterEconomicActivityNomenclatureCodesCaller = new RemoteMethodCaller("products", "updateOuterEconomicActivityNomenclatureCodes");
            updateOuterEconomicActivityNomenclatureCodesCaller.AddArg("outerEanProducts", typeof(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>>));

            updateProductCaller = new RemoteMethodCaller("products", "updateProduct");
            updateProductCaller.AddArg("product", typeof(ByValue<Product>));
            updateProductCaller.AddArg("overrideFastCode", typeof(bool));
            updateProductCaller.AddArg("overrideCode", typeof(bool));

            updateProductCategoryListCaller = new RemoteMethodCaller("products", "updateProductCategoryList");
            updateProductCategoryListCaller.AddArg("listCreate", typeof(List<string>));
            updateProductCategoryListCaller.AddArg("listUpdate", typeof(List<ByValue<ProductCategory>>));
            updateProductCategoryListCaller.AddArg("listDelete", typeof(List<ProductCategory>));

            updateProductGroupCaller = new RemoteMethodCaller("products", "updateProductGroup");
            updateProductGroupCaller.AddArg("productGroup", typeof(ByValue<ProductGroup>));

            updateProductsCaller = new RemoteMethodCaller("products", "updateProducts");
            updateProductsCaller.AddArg("products", typeof(List<ByValue<Product>>));

            updateProductsAndGroupsCaller = new RemoteMethodCaller("products", "updateProductsAndGroups");
            updateProductsAndGroupsCaller.AddArg("categoriesToCreateOrUpdate", typeof(List<ByValue<ProductCategory>>));
            updateProductsAndGroupsCaller.AddArg("categoriesToDelete", typeof(List<ProductCategory>));
            updateProductsAndGroupsCaller.AddArg("categoriesToUnDelete", typeof(List<ProductCategory>));
            updateProductsAndGroupsCaller.AddArg("productsToCreateOrUpdate", typeof(List<ByValue<Product>>));
            updateProductsAndGroupsCaller.AddArg("productsToDelete", typeof(List<Product>));
            updateProductsAndGroupsCaller.AddArg("productsToUnDelete", typeof(List<Product>));
            updateProductsAndGroupsCaller.AddArg("groupsToCreateOrUpdate", typeof(List<ByValue<ProductGroup>>));
            updateProductsAndGroupsCaller.AddArg("groupsToDelete", typeof(List<ProductGroup>));
            updateProductsAndGroupsCaller.AddArg("groupsToUnDelete", typeof(List<ProductGroup>));

            updateProductsCookingPlaceTypeCaller = new RemoteMethodCaller("products", "updateProductsCookingPlaceType");
            updateProductsCookingPlaceTypeCaller.AddArg("productSet", typeof(HashSet<Product>));
            updateProductsCookingPlaceTypeCaller.AddArg("type", typeof(CookingPlaceType));

            updateProductsPositionsCaller = new RemoteMethodCaller("products", "updateProductsPositions");
            updateProductsPositionsCaller.AddArg("list", typeof(List<ProductTreeEntity>));

            updateSupplierInfosCaller = new RemoteMethodCaller("products", "updateSupplierInfos");
            updateSupplierInfosCaller.AddArg("supplierInfoList", typeof(List<ByValue<SupplierInfo>>));

            updateSupplierProductCaller = new RemoteMethodCaller("products", "updateSupplierProduct");
            updateSupplierProductCaller.AddArg("supplierProduct", typeof(ByValue<Product>));

            updateTaxCategoryListCaller = new RemoteMethodCaller("products", "updateTaxCategoryList");
            updateTaxCategoryListCaller.AddArg("taxCategoriesToCreateOrUpdate", typeof(ICollection<ByValue<TaxCategory>>));
            updateTaxCategoryListCaller.AddArg("taxCategoriesToDelete", typeof(ICollection<TaxCategory>));
            updateTaxCategoryListCaller.AddArg("taxCategoriesToUnDelete", typeof(ICollection<TaxCategory>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddOrUpdateSourceNature(ByValue<SourceNature> sourceNature)
        {
            return addOrUpdateSourceNatureCaller.CreateCall<object>(new object[] { sourceNature });
        }

        public IServiceMethodCall<bool?> CreateOrUpdateAccountingCategory(ByValue<AccountingCategory> category, bool deleted)
        {
            return createOrUpdateAccountingCategoryCaller.CreateCall<bool?>(new object[] { category, deleted });
        }

        public IServiceMethodCall<object> CreateOrUpdateAllergen(ByValue<AllergenGroup> allergenGroup)
        {
            return createOrUpdateAllergenCaller.CreateCall<object>(new object[] { allergenGroup });
        }

        public IServiceMethodCall<object> CreateOrUpdateItemCategory(ByValue<ProductItemCategory> itemCategory)
        {
            return createOrUpdateItemCategoryCaller.CreateCall<object>(new object[] { itemCategory });
        }

        public IServiceMethodCall<object> CreateOrUpdateMeasureUnit(ByValue<MeasureUnit> unit, bool deleted)
        {
            return createOrUpdateMeasureUnitCaller.CreateCall<object>(new object[] { unit, deleted });
        }

        public IServiceMethodCall<object> CreateOrUpdateOuterEconomicActivityNomenclatureCode(ByValue<OuterEconomicActivityNomenclatureCode> outerEanProduct)
        {
            return createOrUpdateOuterEconomicActivityNomenclatureCodeCaller.CreateCall<object>(new object[] { outerEanProduct });
        }

        public IServiceMethodCall<object> CreateOrUpdateProductScale(ByValue<ProductScale> productScale, List<ByValue<ProductSize>> sizes)
        {
            return createOrUpdateProductScaleCaller.CreateCall<object>(new object[] { productScale, sizes });
        }

        public IServiceMethodCall<object> CreateOrUpdateProductTagGroup(ByValue<ProductTagGroup> productTagGroup, HashSet<ByValue<ProductTag>> productTags)
        {
            return createOrUpdateProductTagGroupCaller.CreateCall<object>(new object[] { productTagGroup, productTags });
        }

        public IServiceMethodCall<Product> CreateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode)
        {
            return createProductCaller.CreateCall<Product>(new object[] { product, overrideFastCode, overrideCode });
        }

        public IServiceMethodCall<Product> CreateProductApiV3(ByValue<Product> product, bool overrideFastCode, bool overrideCode)
        {
            return createProductApiV3Caller.CreateCall<Product>(new object[] { product, overrideFastCode, overrideCode });
        }

        public IServiceMethodCall<ProductCategory> CreateProductCategory(string name)
        {
            return createProductCategoryCaller.CreateCall<ProductCategory>(new object[] { name });
        }

        public IServiceMethodCall<ProductGroup> CreateProductGroup(ByValue<ProductGroup> productGroup)
        {
            return createProductGroupCaller.CreateCall<ProductGroup>(new object[] { productGroup });
        }

        public IServiceMethodCall<object> DeleteProductScales(List<ProductScale> productScales, bool delete)
        {
            return deleteProductScalesCaller.CreateCall<object>(new object[] { productScales, delete });
        }

        public IServiceMethodCall<object> DeleteProductTagGroups(List<ProductTagGroup> productTagGroups, bool delete)
        {
            return deleteProductTagGroupsCaller.CreateCall<object>(new object[] { productTagGroups, delete });
        }

        public IServiceMethodCall<object> DeleteProducts(List<Product> products)
        {
            return deleteProductsCaller.CreateCall<object>(new object[] { products });
        }

        public IServiceMethodCall<object> DeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups)
        {
            return deleteProductsAndGroupsCaller.CreateCall<object>(new object[] { products, groups });
        }

        public IServiceMethodCall<object> FillProductGroupChildrenRecursive(ProductGroup group, HashSet<ProductGroupChildrenFillInfo> dataFillInfos, bool replaceValues)
        {
            return fillProductGroupChildrenRecursiveCaller.CreateCall<object>(new object[] { group, dataFillInfos, replaceValues });
        }

        public IServiceMethodCall<Dictionary<StoreProductPair, decimal>> GetExpiredProducts(DateTime? date, HashSet<Store> stores, HashSet<Product> products)
        {
            return getExpiredProductsCaller.CreateCall<Dictionary<StoreProductPair, decimal>>(new object[] { date, stores, products });
        }

        public IServiceMethodCall<int> GetNomenclatureUpdateInterval()
        {
            return getNomenclatureUpdateIntervalCaller.CreateCall<int>(new object[] {  });
        }

        public IServiceMethodCall<Dictionary<PriceListItemKey, List<PriceListItem>>> GetPriceListItems(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, bool includeItemsWithSchedules)
        {
            return getPriceListItemsCaller.CreateCall<Dictionary<PriceListItemKey, List<PriceListItem>>>(new object[] { dateFrom, dateTo, departments, includeItemsWithSchedules });
        }

        public IServiceMethodCall<Dictionary<ProductSizeKey, PriceListItem>> GetPriceListItemsByDepartment(DateTime? date, DepartmentEntity department)
        {
            return getPriceListItemsByDepartmentCaller.CreateCall<Dictionary<ProductSizeKey, PriceListItem>>(new object[] { date, department });
        }

        public IServiceMethodCall<Dictionary<DateTime, HashSet<PriceListItem>>> GetSalePricesByPeriod(DateTime? dateFrom, DateTime? dateTo, DateDetalization detalization, DepartmentEntity department)
        {
            return getSalePricesByPeriodCaller.CreateCall<Dictionary<DateTime, HashSet<PriceListItem>>>(new object[] { dateFrom, dateTo, detalization, department });
        }

        public IServiceMethodCall<HashSet<Product>> GetTopIngredients(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo)
        {
            return getTopIngredientsCaller.CreateCall<HashSet<Product>>(new object[] { dishes, dateFrom, dateTo });
        }

        public IServiceMethodCall<ICollection<TopIngredientDto>> GetTopIngredientsWithLevels(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo)
        {
            return getTopIngredientsWithLevelsCaller.CreateCall<ICollection<TopIngredientDto>>(new object[] { dishes, dateFrom, dateTo });
        }

        public IServiceMethodCall<List<NutritionValue>> MergeNutritionValues(List<NutritionValue> values, NutritionValue value)
        {
            return mergeNutritionValuesCaller.CreateCall<List<NutritionValue>>(new object[] { values, value });
        }

        public IServiceMethodCall<object> MoveProductsAndGroups(List<Product> products, List<ProductGroup> groups, ProductGroup group)
        {
            return moveProductsAndGroupsCaller.CreateCall<object>(new object[] { products, groups, group });
        }

        public IServiceMethodCall<object> SaveCustomProductCategories(ByValue<CustomCategoryList> categoryList, ICollection<ByValue<CustomCategoryValue>> categoryValues)
        {
            return saveCustomProductCategoriesCaller.CreateCall<object>(new object[] { categoryList, categoryValues });
        }

        public IServiceMethodCall<object> SaveOrUpdateQuickLabels(ICollection<ByValue<QuickLabels>> labels)
        {
            return saveOrUpdateQuickLabelsCaller.CreateCall<object>(new object[] { labels });
        }

        public IServiceMethodCall<object> SetChoicesForProducts(Dictionary<Product, List<ChoiceBinding>> product)
        {
            return setChoicesForProductsCaller.CreateCall<object>(new object[] { product });
        }

        public IServiceMethodCall<object> SetDeletedAllergen(AllergenGroup allergenGroup, bool deletedFlag)
        {
            return setDeletedAllergenCaller.CreateCall<object>(new object[] { allergenGroup, deletedFlag });
        }

        public IServiceMethodCall<object> SetDeletedItemCategory(ProductItemCategory itemCategory, bool deletedFlag)
        {
            return setDeletedItemCategoryCaller.CreateCall<object>(new object[] { itemCategory, deletedFlag });
        }

        public IServiceMethodCall<object> SetDeletedOuterEconomicActivityNomenclatureCode(OuterEconomicActivityNomenclatureCode outerEanProduct, bool deletedFlag)
        {
            return setDeletedOuterEconomicActivityNomenclatureCodeCaller.CreateCall<object>(new object[] { outerEanProduct, deletedFlag });
        }

        public IServiceMethodCall<object> SetModificatorsUnSaleableByChangeDocuments()
        {
            return setModificatorsUnSaleableByChangeDocumentsCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> SetModifierSchemaRedefinitionsForProducts(Dictionary<Product, List<ChoiceBindingRedefinition>> schemaRedefinitions)
        {
            return setModifierSchemaRedefinitionsForProductsCaller.CreateCall<object>(new object[] { schemaRedefinitions });
        }

        public IServiceMethodCall<object> SetProductsTags(HashSet<Product> products, Dictionary<ProductTag, bool> tags)
        {
            return setProductsTagsCaller.CreateCall<object>(new object[] { products, tags });
        }

        public IServiceMethodCall<object> UndeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, bool recursively)
        {
            return undeleteProductsAndGroupsCaller.CreateCall<object>(new object[] { products, groups, recursively });
        }

        public IServiceMethodCall<object> UpdateFoodValueForProductByCookingType(Product product, CookingType cookingType, DepartmentEntity department, ProductSize productSize)
        {
            return updateFoodValueForProductByCookingTypeCaller.CreateCall<object>(new object[] { product, cookingType, department, productSize });
        }

        public IServiceMethodCall<object> UpdateFoodValueForProductCollection(List<Product> products)
        {
            return updateFoodValueForProductCollectionCaller.CreateCall<object>(new object[] { products });
        }

        public IServiceMethodCall<object> UpdateOuterEconomicActivityNomenclatureCodes(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>> outerEanProducts)
        {
            return updateOuterEconomicActivityNomenclatureCodesCaller.CreateCall<object>(new object[] { outerEanProducts });
        }

        public IServiceMethodCall<Product> UpdateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode)
        {
            return updateProductCaller.CreateCall<Product>(new object[] { product, overrideFastCode, overrideCode });
        }

        public IServiceMethodCall<object> UpdateProductCategoryList(List<string> listCreate, List<ByValue<ProductCategory>> listUpdate, List<ProductCategory> listDelete)
        {
            return updateProductCategoryListCaller.CreateCall<object>(new object[] { listCreate, listUpdate, listDelete });
        }

        public IServiceMethodCall<ProductGroup> UpdateProductGroup(ByValue<ProductGroup> productGroup)
        {
            return updateProductGroupCaller.CreateCall<ProductGroup>(new object[] { productGroup });
        }

        public IServiceMethodCall<object> UpdateProducts(List<ByValue<Product>> products)
        {
            return updateProductsCaller.CreateCall<object>(new object[] { products });
        }

        public IServiceMethodCall<object> UpdateProductsAndGroups(List<ByValue<ProductCategory>> categoriesToCreateOrUpdate, List<ProductCategory> categoriesToDelete, List<ProductCategory> categoriesToUnDelete, List<ByValue<Product>> productsToCreateOrUpdate, List<Product> productsToDelete, List<Product> productsToUnDelete, List<ByValue<ProductGroup>> groupsToCreateOrUpdate, List<ProductGroup> groupsToDelete, List<ProductGroup> groupsToUnDelete)
        {
            return updateProductsAndGroupsCaller.CreateCall<object>(new object[] { categoriesToCreateOrUpdate, categoriesToDelete, categoriesToUnDelete, productsToCreateOrUpdate, productsToDelete, productsToUnDelete, groupsToCreateOrUpdate, groupsToDelete, groupsToUnDelete });
        }

        public IServiceMethodCall<object> UpdateProductsCookingPlaceType(HashSet<Product> productSet, CookingPlaceType type)
        {
            return updateProductsCookingPlaceTypeCaller.CreateCall<object>(new object[] { productSet, type });
        }

        public IServiceMethodCall<object> UpdateProductsPositions(List<ProductTreeEntity> list)
        {
            return updateProductsPositionsCaller.CreateCall<object>(new object[] { list });
        }

        public IServiceMethodCall<object> UpdateSupplierInfos(List<ByValue<SupplierInfo>> supplierInfoList)
        {
            return updateSupplierInfosCaller.CreateCall<object>(new object[] { supplierInfoList });
        }

        public IServiceMethodCall<object> UpdateSupplierProduct(ByValue<Product> supplierProduct)
        {
            return updateSupplierProductCaller.CreateCall<object>(new object[] { supplierProduct });
        }

        public IServiceMethodCall<object> UpdateTaxCategoryList(ICollection<ByValue<TaxCategory>> taxCategoriesToCreateOrUpdate, ICollection<TaxCategory> taxCategoriesToDelete, ICollection<TaxCategory> taxCategoriesToUnDelete)
        {
            return updateTaxCategoryListCaller.CreateCall<object>(new object[] { taxCategoriesToCreateOrUpdate, taxCategoriesToDelete, taxCategoriesToUnDelete });
        }

        #endregion

        #region asynchronous version
        public void AddOrUpdateSourceNature(ByValue<SourceNature> sourceNature, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addOrUpdateSourceNatureCaller.CallAsync(new object[] {sourceNature}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateAccountingCategory(ByValue<AccountingCategory> category, bool deleted, AsyncErrorHandler errorHandler, Action<bool?> resultHandler)
        {
            createOrUpdateAccountingCategoryCaller.CallAsync(new object[] {category, deleted}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateAllergen(ByValue<AllergenGroup> allergenGroup, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateAllergenCaller.CallAsync(new object[] {allergenGroup}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateItemCategory(ByValue<ProductItemCategory> itemCategory, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateItemCategoryCaller.CallAsync(new object[] {itemCategory}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateMeasureUnit(ByValue<MeasureUnit> unit, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateMeasureUnitCaller.CallAsync(new object[] {unit, deleted}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateOuterEconomicActivityNomenclatureCode(ByValue<OuterEconomicActivityNomenclatureCode> outerEanProduct, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateOuterEconomicActivityNomenclatureCodeCaller.CallAsync(new object[] {outerEanProduct}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateProductScale(ByValue<ProductScale> productScale, List<ByValue<ProductSize>> sizes, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateProductScaleCaller.CallAsync(new object[] {productScale, sizes}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateProductTagGroup(ByValue<ProductTagGroup> productTagGroup, HashSet<ByValue<ProductTag>> productTags, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateProductTagGroupCaller.CallAsync(new object[] {productTagGroup, productTags}, resultHandler, errorHandler);
        }

        public void CreateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, AsyncErrorHandler errorHandler, Action<Product> resultHandler)
        {
            createProductCaller.CallAsync(new object[] {product, overrideFastCode, overrideCode}, resultHandler, errorHandler);
        }

        public void CreateProductApiV3(ByValue<Product> product, bool overrideFastCode, bool overrideCode, AsyncErrorHandler errorHandler, Action<Product> resultHandler)
        {
            createProductApiV3Caller.CallAsync(new object[] {product, overrideFastCode, overrideCode}, resultHandler, errorHandler);
        }

        public void CreateProductCategory(string name, AsyncErrorHandler errorHandler, Action<ProductCategory> resultHandler)
        {
            createProductCategoryCaller.CallAsync(new object[] {name}, resultHandler, errorHandler);
        }

        public void CreateProductGroup(ByValue<ProductGroup> productGroup, AsyncErrorHandler errorHandler, Action<ProductGroup> resultHandler)
        {
            createProductGroupCaller.CallAsync(new object[] {productGroup}, resultHandler, errorHandler);
        }

        public void DeleteProductScales(List<ProductScale> productScales, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteProductScalesCaller.CallAsync(new object[] {productScales, delete}, resultHandler, errorHandler);
        }

        public void DeleteProductTagGroups(List<ProductTagGroup> productTagGroups, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteProductTagGroupsCaller.CallAsync(new object[] {productTagGroups, delete}, resultHandler, errorHandler);
        }

        public void DeleteProducts(List<Product> products, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteProductsCaller.CallAsync(new object[] {products}, resultHandler, errorHandler);
        }

        public void DeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteProductsAndGroupsCaller.CallAsync(new object[] {products, groups}, resultHandler, errorHandler);
        }

        public void FillProductGroupChildrenRecursive(ProductGroup group, HashSet<ProductGroupChildrenFillInfo> dataFillInfos, bool replaceValues, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            fillProductGroupChildrenRecursiveCaller.CallAsync(new object[] {group, dataFillInfos, replaceValues}, resultHandler, errorHandler);
        }

        public void GetExpiredProducts(DateTime? date, HashSet<Store> stores, HashSet<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<StoreProductPair, decimal>> resultHandler)
        {
            getExpiredProductsCaller.CallAsync(new object[] {date, stores, products}, resultHandler, errorHandler);
        }

        public void GetNomenclatureUpdateInterval(AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            getNomenclatureUpdateIntervalCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetPriceListItems(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, bool includeItemsWithSchedules, AsyncErrorHandler errorHandler, Action<Dictionary<PriceListItemKey, List<PriceListItem>>> resultHandler)
        {
            getPriceListItemsCaller.CallAsync(new object[] {dateFrom, dateTo, departments, includeItemsWithSchedules}, resultHandler, errorHandler);
        }

        public void GetPriceListItemsByDepartment(DateTime? date, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeKey, PriceListItem>> resultHandler)
        {
            getPriceListItemsByDepartmentCaller.CallAsync(new object[] {date, department}, resultHandler, errorHandler);
        }

        public void GetSalePricesByPeriod(DateTime? dateFrom, DateTime? dateTo, DateDetalization detalization, DepartmentEntity department, AsyncErrorHandler errorHandler, Action<Dictionary<DateTime, HashSet<PriceListItem>>> resultHandler)
        {
            getSalePricesByPeriodCaller.CallAsync(new object[] {dateFrom, dateTo, detalization, department}, resultHandler, errorHandler);
        }

        public void GetTopIngredients(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<HashSet<Product>> resultHandler)
        {
            getTopIngredientsCaller.CallAsync(new object[] {dishes, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetTopIngredientsWithLevels(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<TopIngredientDto>> resultHandler)
        {
            getTopIngredientsWithLevelsCaller.CallAsync(new object[] {dishes, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void MergeNutritionValues(List<NutritionValue> values, NutritionValue value, AsyncErrorHandler errorHandler, Action<List<NutritionValue>> resultHandler)
        {
            mergeNutritionValuesCaller.CallAsync(new object[] {values, value}, resultHandler, errorHandler);
        }

        public void MoveProductsAndGroups(List<Product> products, List<ProductGroup> groups, ProductGroup group, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            moveProductsAndGroupsCaller.CallAsync(new object[] {products, groups, group}, resultHandler, errorHandler);
        }

        public void SaveCustomProductCategories(ByValue<CustomCategoryList> categoryList, ICollection<ByValue<CustomCategoryValue>> categoryValues, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCustomProductCategoriesCaller.CallAsync(new object[] {categoryList, categoryValues}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateQuickLabels(ICollection<ByValue<QuickLabels>> labels, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateQuickLabelsCaller.CallAsync(new object[] {labels}, resultHandler, errorHandler);
        }

        public void SetChoicesForProducts(Dictionary<Product, List<ChoiceBinding>> product, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setChoicesForProductsCaller.CallAsync(new object[] {product}, resultHandler, errorHandler);
        }

        public void SetDeletedAllergen(AllergenGroup allergenGroup, bool deletedFlag, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedAllergenCaller.CallAsync(new object[] {allergenGroup, deletedFlag}, resultHandler, errorHandler);
        }

        public void SetDeletedItemCategory(ProductItemCategory itemCategory, bool deletedFlag, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedItemCategoryCaller.CallAsync(new object[] {itemCategory, deletedFlag}, resultHandler, errorHandler);
        }

        public void SetDeletedOuterEconomicActivityNomenclatureCode(OuterEconomicActivityNomenclatureCode outerEanProduct, bool deletedFlag, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedOuterEconomicActivityNomenclatureCodeCaller.CallAsync(new object[] {outerEanProduct, deletedFlag}, resultHandler, errorHandler);
        }

        public void SetModificatorsUnSaleableByChangeDocuments(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setModificatorsUnSaleableByChangeDocumentsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SetModifierSchemaRedefinitionsForProducts(Dictionary<Product, List<ChoiceBindingRedefinition>> schemaRedefinitions, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setModifierSchemaRedefinitionsForProductsCaller.CallAsync(new object[] {schemaRedefinitions}, resultHandler, errorHandler);
        }

        public void SetProductsTags(HashSet<Product> products, Dictionary<ProductTag, bool> tags, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setProductsTagsCaller.CallAsync(new object[] {products, tags}, resultHandler, errorHandler);
        }

        public void UndeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, bool recursively, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteProductsAndGroupsCaller.CallAsync(new object[] {products, groups, recursively}, resultHandler, errorHandler);
        }

        public void UpdateFoodValueForProductByCookingType(Product product, CookingType cookingType, DepartmentEntity department, ProductSize productSize, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateFoodValueForProductByCookingTypeCaller.CallAsync(new object[] {product, cookingType, department, productSize}, resultHandler, errorHandler);
        }

        public void UpdateFoodValueForProductCollection(List<Product> products, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateFoodValueForProductCollectionCaller.CallAsync(new object[] {products}, resultHandler, errorHandler);
        }

        public void UpdateOuterEconomicActivityNomenclatureCodes(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>> outerEanProducts, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateOuterEconomicActivityNomenclatureCodesCaller.CallAsync(new object[] {outerEanProducts}, resultHandler, errorHandler);
        }

        public void UpdateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, AsyncErrorHandler errorHandler, Action<Product> resultHandler)
        {
            updateProductCaller.CallAsync(new object[] {product, overrideFastCode, overrideCode}, resultHandler, errorHandler);
        }

        public void UpdateProductCategoryList(List<string> listCreate, List<ByValue<ProductCategory>> listUpdate, List<ProductCategory> listDelete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateProductCategoryListCaller.CallAsync(new object[] {listCreate, listUpdate, listDelete}, resultHandler, errorHandler);
        }

        public void UpdateProductGroup(ByValue<ProductGroup> productGroup, AsyncErrorHandler errorHandler, Action<ProductGroup> resultHandler)
        {
            updateProductGroupCaller.CallAsync(new object[] {productGroup}, resultHandler, errorHandler);
        }

        public void UpdateProducts(List<ByValue<Product>> products, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateProductsCaller.CallAsync(new object[] {products}, resultHandler, errorHandler);
        }

        public void UpdateProductsAndGroups(List<ByValue<ProductCategory>> categoriesToCreateOrUpdate, List<ProductCategory> categoriesToDelete, List<ProductCategory> categoriesToUnDelete, List<ByValue<Product>> productsToCreateOrUpdate, List<Product> productsToDelete, List<Product> productsToUnDelete, List<ByValue<ProductGroup>> groupsToCreateOrUpdate, List<ProductGroup> groupsToDelete, List<ProductGroup> groupsToUnDelete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateProductsAndGroupsCaller.CallAsync(new object[] {categoriesToCreateOrUpdate, categoriesToDelete, categoriesToUnDelete, productsToCreateOrUpdate, productsToDelete, productsToUnDelete, groupsToCreateOrUpdate, groupsToDelete, groupsToUnDelete}, resultHandler, errorHandler);
        }

        public void UpdateProductsCookingPlaceType(HashSet<Product> productSet, CookingPlaceType type, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateProductsCookingPlaceTypeCaller.CallAsync(new object[] {productSet, type}, resultHandler, errorHandler);
        }

        public void UpdateProductsPositions(List<ProductTreeEntity> list, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateProductsPositionsCaller.CallAsync(new object[] {list}, resultHandler, errorHandler);
        }

        public void UpdateSupplierInfos(List<ByValue<SupplierInfo>> supplierInfoList, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateSupplierInfosCaller.CallAsync(new object[] {supplierInfoList}, resultHandler, errorHandler);
        }

        public void UpdateSupplierProduct(ByValue<Product> supplierProduct, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateSupplierProductCaller.CallAsync(new object[] {supplierProduct}, resultHandler, errorHandler);
        }

        public void UpdateTaxCategoryList(ICollection<ByValue<TaxCategory>> taxCategoriesToCreateOrUpdate, ICollection<TaxCategory> taxCategoriesToDelete, ICollection<TaxCategory> taxCategoriesToUnDelete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateTaxCategoryListCaller.CallAsync(new object[] {taxCategoriesToCreateOrUpdate, taxCategoriesToDelete, taxCategoriesToUnDelete}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddOrUpdateSourceNature(ByValue<SourceNature> sourceNature, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addOrUpdateSourceNatureCaller.Call<object>(new object[] { sourceNature }, asyncState, requestTimeout);
        }

        public Task<bool?> CreateOrUpdateAccountingCategory(ByValue<AccountingCategory> category, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateAccountingCategoryCaller.Call<bool?>(new object[] { category, deleted }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateAllergen(ByValue<AllergenGroup> allergenGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateAllergenCaller.Call<object>(new object[] { allergenGroup }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateItemCategory(ByValue<ProductItemCategory> itemCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateItemCategoryCaller.Call<object>(new object[] { itemCategory }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateMeasureUnit(ByValue<MeasureUnit> unit, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateMeasureUnitCaller.Call<object>(new object[] { unit, deleted }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateOuterEconomicActivityNomenclatureCode(ByValue<OuterEconomicActivityNomenclatureCode> outerEanProduct, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateOuterEconomicActivityNomenclatureCodeCaller.Call<object>(new object[] { outerEanProduct }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateProductScale(ByValue<ProductScale> productScale, List<ByValue<ProductSize>> sizes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateProductScaleCaller.Call<object>(new object[] { productScale, sizes }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateProductTagGroup(ByValue<ProductTagGroup> productTagGroup, HashSet<ByValue<ProductTag>> productTags, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateProductTagGroupCaller.Call<object>(new object[] { productTagGroup, productTags }, asyncState, requestTimeout);
        }

        public Task<Product> CreateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createProductCaller.Call<Product>(new object[] { product, overrideFastCode, overrideCode }, asyncState, requestTimeout);
        }

        public Task<Product> CreateProductApiV3(ByValue<Product> product, bool overrideFastCode, bool overrideCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createProductApiV3Caller.Call<Product>(new object[] { product, overrideFastCode, overrideCode }, asyncState, requestTimeout);
        }

        public Task<ProductCategory> CreateProductCategory(string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createProductCategoryCaller.Call<ProductCategory>(new object[] { name }, asyncState, requestTimeout);
        }

        public Task<ProductGroup> CreateProductGroup(ByValue<ProductGroup> productGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createProductGroupCaller.Call<ProductGroup>(new object[] { productGroup }, asyncState, requestTimeout);
        }

        public Task<object> DeleteProductScales(List<ProductScale> productScales, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteProductScalesCaller.Call<object>(new object[] { productScales, delete }, asyncState, requestTimeout);
        }

        public Task<object> DeleteProductTagGroups(List<ProductTagGroup> productTagGroups, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteProductTagGroupsCaller.Call<object>(new object[] { productTagGroups, delete }, asyncState, requestTimeout);
        }

        public Task<object> DeleteProducts(List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteProductsCaller.Call<object>(new object[] { products }, asyncState, requestTimeout);
        }

        public Task<object> DeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteProductsAndGroupsCaller.Call<object>(new object[] { products, groups }, asyncState, requestTimeout);
        }

        public Task<object> FillProductGroupChildrenRecursive(ProductGroup group, HashSet<ProductGroupChildrenFillInfo> dataFillInfos, bool replaceValues, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fillProductGroupChildrenRecursiveCaller.Call<object>(new object[] { group, dataFillInfos, replaceValues }, asyncState, requestTimeout);
        }

        public Task<Dictionary<StoreProductPair, decimal>> GetExpiredProducts(DateTime? date, HashSet<Store> stores, HashSet<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getExpiredProductsCaller.Call<Dictionary<StoreProductPair, decimal>>(new object[] { date, stores, products }, asyncState, requestTimeout);
        }

        public Task<int> GetNomenclatureUpdateInterval([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNomenclatureUpdateIntervalCaller.Call<int>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<Dictionary<PriceListItemKey, List<PriceListItem>>> GetPriceListItems(DateTime? dateFrom, DateTime? dateTo, List<DepartmentEntity> departments, bool includeItemsWithSchedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPriceListItemsCaller.Call<Dictionary<PriceListItemKey, List<PriceListItem>>>(new object[] { dateFrom, dateTo, departments, includeItemsWithSchedules }, asyncState, requestTimeout);
        }

        public Task<Dictionary<ProductSizeKey, PriceListItem>> GetPriceListItemsByDepartment(DateTime? date, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPriceListItemsByDepartmentCaller.Call<Dictionary<ProductSizeKey, PriceListItem>>(new object[] { date, department }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DateTime, HashSet<PriceListItem>>> GetSalePricesByPeriod(DateTime? dateFrom, DateTime? dateTo, DateDetalization detalization, DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSalePricesByPeriodCaller.Call<Dictionary<DateTime, HashSet<PriceListItem>>>(new object[] { dateFrom, dateTo, detalization, department }, asyncState, requestTimeout);
        }

        public Task<HashSet<Product>> GetTopIngredients(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getTopIngredientsCaller.Call<HashSet<Product>>(new object[] { dishes, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<ICollection<TopIngredientDto>> GetTopIngredientsWithLevels(HashSet<Product> dishes, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getTopIngredientsWithLevelsCaller.Call<ICollection<TopIngredientDto>>(new object[] { dishes, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<List<NutritionValue>> MergeNutritionValues(List<NutritionValue> values, NutritionValue value, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return mergeNutritionValuesCaller.Call<List<NutritionValue>>(new object[] { values, value }, asyncState, requestTimeout);
        }

        public Task<object> MoveProductsAndGroups(List<Product> products, List<ProductGroup> groups, ProductGroup group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return moveProductsAndGroupsCaller.Call<object>(new object[] { products, groups, group }, asyncState, requestTimeout);
        }

        public Task<object> SaveCustomProductCategories(ByValue<CustomCategoryList> categoryList, ICollection<ByValue<CustomCategoryValue>> categoryValues, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCustomProductCategoriesCaller.Call<object>(new object[] { categoryList, categoryValues }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateQuickLabels(ICollection<ByValue<QuickLabels>> labels, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateQuickLabelsCaller.Call<object>(new object[] { labels }, asyncState, requestTimeout);
        }

        public Task<object> SetChoicesForProducts(Dictionary<Product, List<ChoiceBinding>> product, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setChoicesForProductsCaller.Call<object>(new object[] { product }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedAllergen(AllergenGroup allergenGroup, bool deletedFlag, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedAllergenCaller.Call<object>(new object[] { allergenGroup, deletedFlag }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedItemCategory(ProductItemCategory itemCategory, bool deletedFlag, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedItemCategoryCaller.Call<object>(new object[] { itemCategory, deletedFlag }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedOuterEconomicActivityNomenclatureCode(OuterEconomicActivityNomenclatureCode outerEanProduct, bool deletedFlag, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedOuterEconomicActivityNomenclatureCodeCaller.Call<object>(new object[] { outerEanProduct, deletedFlag }, asyncState, requestTimeout);
        }

        public Task<object> SetModificatorsUnSaleableByChangeDocuments([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setModificatorsUnSaleableByChangeDocumentsCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SetModifierSchemaRedefinitionsForProducts(Dictionary<Product, List<ChoiceBindingRedefinition>> schemaRedefinitions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setModifierSchemaRedefinitionsForProductsCaller.Call<object>(new object[] { schemaRedefinitions }, asyncState, requestTimeout);
        }

        public Task<object> SetProductsTags(HashSet<Product> products, Dictionary<ProductTag, bool> tags, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setProductsTagsCaller.Call<object>(new object[] { products, tags }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteProductsAndGroups(List<Product> products, List<ProductGroup> groups, bool recursively, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteProductsAndGroupsCaller.Call<object>(new object[] { products, groups, recursively }, asyncState, requestTimeout);
        }

        public Task<object> UpdateFoodValueForProductByCookingType(Product product, CookingType cookingType, DepartmentEntity department, ProductSize productSize, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateFoodValueForProductByCookingTypeCaller.Call<object>(new object[] { product, cookingType, department, productSize }, asyncState, requestTimeout);
        }

        public Task<object> UpdateFoodValueForProductCollection(List<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateFoodValueForProductCollectionCaller.Call<object>(new object[] { products }, asyncState, requestTimeout);
        }

        public Task<object> UpdateOuterEconomicActivityNomenclatureCodes(ICollection<ByValue<OuterEconomicActivityNomenclatureCode>> outerEanProducts, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateOuterEconomicActivityNomenclatureCodesCaller.Call<object>(new object[] { outerEanProducts }, asyncState, requestTimeout);
        }

        public Task<Product> UpdateProduct(ByValue<Product> product, bool overrideFastCode, bool overrideCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductCaller.Call<Product>(new object[] { product, overrideFastCode, overrideCode }, asyncState, requestTimeout);
        }

        public Task<object> UpdateProductCategoryList(List<string> listCreate, List<ByValue<ProductCategory>> listUpdate, List<ProductCategory> listDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductCategoryListCaller.Call<object>(new object[] { listCreate, listUpdate, listDelete }, asyncState, requestTimeout);
        }

        public Task<ProductGroup> UpdateProductGroup(ByValue<ProductGroup> productGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductGroupCaller.Call<ProductGroup>(new object[] { productGroup }, asyncState, requestTimeout);
        }

        public Task<object> UpdateProducts(List<ByValue<Product>> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductsCaller.Call<object>(new object[] { products }, asyncState, requestTimeout);
        }

        public Task<object> UpdateProductsAndGroups(List<ByValue<ProductCategory>> categoriesToCreateOrUpdate, List<ProductCategory> categoriesToDelete, List<ProductCategory> categoriesToUnDelete, List<ByValue<Product>> productsToCreateOrUpdate, List<Product> productsToDelete, List<Product> productsToUnDelete, List<ByValue<ProductGroup>> groupsToCreateOrUpdate, List<ProductGroup> groupsToDelete, List<ProductGroup> groupsToUnDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductsAndGroupsCaller.Call<object>(new object[] { categoriesToCreateOrUpdate, categoriesToDelete, categoriesToUnDelete, productsToCreateOrUpdate, productsToDelete, productsToUnDelete, groupsToCreateOrUpdate, groupsToDelete, groupsToUnDelete }, asyncState, requestTimeout);
        }

        public Task<object> UpdateProductsCookingPlaceType(HashSet<Product> productSet, CookingPlaceType type, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductsCookingPlaceTypeCaller.Call<object>(new object[] { productSet, type }, asyncState, requestTimeout);
        }

        public Task<object> UpdateProductsPositions(List<ProductTreeEntity> list, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductsPositionsCaller.Call<object>(new object[] { list }, asyncState, requestTimeout);
        }

        public Task<object> UpdateSupplierInfos(List<ByValue<SupplierInfo>> supplierInfoList, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateSupplierInfosCaller.Call<object>(new object[] { supplierInfoList }, asyncState, requestTimeout);
        }

        public Task<object> UpdateSupplierProduct(ByValue<Product> supplierProduct, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateSupplierProductCaller.Call<object>(new object[] { supplierProduct }, asyncState, requestTimeout);
        }

        public Task<object> UpdateTaxCategoryList(ICollection<ByValue<TaxCategory>> taxCategoriesToCreateOrUpdate, ICollection<TaxCategory> taxCategoriesToDelete, ICollection<TaxCategory> taxCategoriesToUnDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateTaxCategoryListCaller.Call<object>(new object[] { taxCategoriesToCreateOrUpdate, taxCategoriesToDelete, taxCategoriesToUnDelete }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class StoreReportsService : IStoreReportsService
    {
        private readonly RemoteMethodCaller addCustomSummaryReportSettingsCaller;
        private readonly RemoteMethodCaller addStoreReportManagerSetupCaller;
        private readonly RemoteMethodCaller getCalculationCardReportsCaller;
        private readonly RemoteMethodCaller getChequeReportCaller;
        private readonly RemoteMethodCaller getCounteragentReportCaller;
        private readonly RemoteMethodCaller getCustomStoreOperationsReportCaller;
        private readonly RemoteMethodCaller getIncomingInvoiceReportCaller;
        private readonly RemoteMethodCaller getStoreOperationsReportCaller;
        private readonly RemoteMethodCaller getStoreTurnoverReportCaller;
        private readonly RemoteMethodCaller removeCustomReportSettingsCaller;
        private readonly RemoteMethodCaller removeStoreReportManagerSetupCaller;

        internal StoreReportsService()
        {

            addCustomSummaryReportSettingsCaller = new RemoteMethodCaller("storeReports", "addCustomSummaryReportSettings");
            addCustomSummaryReportSettingsCaller.AddArg("reportSettings", typeof(ByValue<StoreSummaryReportSettings>));

            addStoreReportManagerSetupCaller = new RemoteMethodCaller("storeReports", "addStoreReportManagerSetup");
            addStoreReportManagerSetupCaller.AddArg("name", typeof(string));
            addStoreReportManagerSetupCaller.AddArg("layout", typeof(string));
            addStoreReportManagerSetupCaller.AddArg("user", typeof(User));
            addStoreReportManagerSetupCaller.AddArg("shared", typeof(bool));
            addStoreReportManagerSetupCaller.AddArg("type", typeof(StoreReportManagerSetupType));

            getCalculationCardReportsCaller = new RemoteMethodCaller("storeReports", "getCalculationCardReports");
            getCalculationCardReportsCaller.AddArg("department", typeof(DepartmentEntity));
            getCalculationCardReportsCaller.AddArg("productList", typeof(List<Product>));
            getCalculationCardReportsCaller.AddArg("dateFrom", typeof(DateTime?));
            getCalculationCardReportsCaller.AddArg("dateTo", typeof(DateTime?));

            getChequeReportCaller = new RemoteMethodCaller("storeReports", "getChequeReport");
            getChequeReportCaller.AddArg("dateInterval", typeof(DateInterval));
            getChequeReportCaller.AddArg("detalization", typeof(ChequeReportDetalizationType));
            getChequeReportCaller.AddArg("ordersType", typeof(ChequeReportOrderType));
            getChequeReportCaller.AddArg("groups", typeof(HashSet<Group>));

            getCounteragentReportCaller = new RemoteMethodCaller("storeReports", "getCounteragentReport");
            getCounteragentReportCaller.AddArg("dateFrom", typeof(DateTime?));
            getCounteragentReportCaller.AddArg("dateTo", typeof(DateTime?));
            getCounteragentReportCaller.AddArg("user", typeof(User));

            getCustomStoreOperationsReportCaller = new RemoteMethodCaller("storeReports", "getCustomStoreOperationsReport");
            getCustomStoreOperationsReportCaller.AddArg("dateFrom", typeof(DateTime?));
            getCustomStoreOperationsReportCaller.AddArg("dateTo", typeof(DateTime?));
            getCustomStoreOperationsReportCaller.AddArg("filter", typeof(StoreOperationsReportFilter));
            getCustomStoreOperationsReportCaller.AddArg("grouping", typeof(StoreOperationsReportGrouping));

            getIncomingInvoiceReportCaller = new RemoteMethodCaller("storeReports", "getIncomingInvoiceReport");
            getIncomingInvoiceReportCaller.AddArg("dateInterval", typeof(DateInterval));
            getIncomingInvoiceReportCaller.AddArg("stores", typeof(ICollection<Store>));
            getIncomingInvoiceReportCaller.AddArg("groupType", typeof(InvoiceReportGroupType));

            getStoreOperationsReportCaller = new RemoteMethodCaller("storeReports", "getStoreOperationsReport");
            getStoreOperationsReportCaller.AddArg("dateFrom", typeof(DateTime?));
            getStoreOperationsReportCaller.AddArg("dateTo", typeof(DateTime?));
            getStoreOperationsReportCaller.AddArg("stores", typeof(HashSet<Store>));
            getStoreOperationsReportCaller.AddArg("documentTypes", typeof(List<DocumentType>));
            getStoreOperationsReportCaller.AddArg("productDetalization", typeof(bool));
            getStoreOperationsReportCaller.AddArg("showCostCorrections", typeof(bool));

            getStoreTurnoverReportCaller = new RemoteMethodCaller("storeReports", "getStoreTurnoverReport");
            getStoreTurnoverReportCaller.AddArg("dateFrom", typeof(DateTime?));
            getStoreTurnoverReportCaller.AddArg("dateTo", typeof(DateTime?));
            getStoreTurnoverReportCaller.AddArg("stores", typeof(ICollection<Store>));
            getStoreTurnoverReportCaller.AddArg("counteragents", typeof(ICollection<User>));
            getStoreTurnoverReportCaller.AddArg("category", typeof(ProductCategory));
            getStoreTurnoverReportCaller.AddArg("extendReport", typeof(bool));

            removeCustomReportSettingsCaller = new RemoteMethodCaller("storeReports", "removeCustomReportSettings");
            removeCustomReportSettingsCaller.AddArg("reportSettings", typeof(StoreSummaryReportSettings));

            removeStoreReportManagerSetupCaller = new RemoteMethodCaller("storeReports", "removeStoreReportManagerSetup");
            removeStoreReportManagerSetupCaller.AddArg("name", typeof(string));
            removeStoreReportManagerSetupCaller.AddArg("type", typeof(StoreReportManagerSetupType));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddCustomSummaryReportSettings(ByValue<StoreSummaryReportSettings> reportSettings)
        {
            return addCustomSummaryReportSettingsCaller.CreateCall<object>(new object[] { reportSettings });
        }

        public IServiceMethodCall<object> AddStoreReportManagerSetup(string name, string layout, User user, bool shared, StoreReportManagerSetupType type)
        {
            return addStoreReportManagerSetupCaller.CreateCall<object>(new object[] { name, layout, user, shared, type });
        }

        public IServiceMethodCall<List<OP1ReportData>> GetCalculationCardReports(DepartmentEntity department, List<Product> productList, DateTime? dateFrom, DateTime? dateTo)
        {
            return getCalculationCardReportsCaller.CreateCall<List<OP1ReportData>>(new object[] { department, productList, dateFrom, dateTo });
        }

        public IServiceMethodCall<ChequeReport> GetChequeReport(DateInterval dateInterval, ChequeReportDetalizationType detalization, ChequeReportOrderType ordersType, HashSet<Group> groups)
        {
            return getChequeReportCaller.CreateCall<ChequeReport>(new object[] { dateInterval, detalization, ordersType, groups });
        }

        public IServiceMethodCall<CounteragentReport> GetCounteragentReport(DateTime? dateFrom, DateTime? dateTo, User user)
        {
            return getCounteragentReportCaller.CreateCall<CounteragentReport>(new object[] { dateFrom, dateTo, user });
        }

        public IServiceMethodCall<StoreOperationsReport> GetCustomStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, StoreOperationsReportFilter filter, StoreOperationsReportGrouping grouping)
        {
            return getCustomStoreOperationsReportCaller.CreateCall<StoreOperationsReport>(new object[] { dateFrom, dateTo, filter, grouping });
        }

        public IServiceMethodCall<InvoiceReport> GetIncomingInvoiceReport(DateInterval dateInterval, ICollection<Store> stores, InvoiceReportGroupType groupType)
        {
            return getIncomingInvoiceReportCaller.CreateCall<InvoiceReport>(new object[] { dateInterval, stores, groupType });
        }

        public IServiceMethodCall<StoreOperationsReport> GetStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, List<DocumentType> documentTypes, bool productDetalization, bool showCostCorrections)
        {
            return getStoreOperationsReportCaller.CreateCall<StoreOperationsReport>(new object[] { dateFrom, dateTo, stores, documentTypes, productDetalization, showCostCorrections });
        }

        public IServiceMethodCall<StoreTurnoverReport> GetStoreTurnoverReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Store> stores, ICollection<User> counteragents, ProductCategory category, bool extendReport)
        {
            return getStoreTurnoverReportCaller.CreateCall<StoreTurnoverReport>(new object[] { dateFrom, dateTo, stores, counteragents, category, extendReport });
        }

        public IServiceMethodCall<object> RemoveCustomReportSettings(StoreSummaryReportSettings reportSettings)
        {
            return removeCustomReportSettingsCaller.CreateCall<object>(new object[] { reportSettings });
        }

        public IServiceMethodCall<object> RemoveStoreReportManagerSetup(string name, StoreReportManagerSetupType type)
        {
            return removeStoreReportManagerSetupCaller.CreateCall<object>(new object[] { name, type });
        }

        #endregion

        #region asynchronous version
        public void AddCustomSummaryReportSettings(ByValue<StoreSummaryReportSettings> reportSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addCustomSummaryReportSettingsCaller.CallAsync(new object[] {reportSettings}, resultHandler, errorHandler);
        }

        public void AddStoreReportManagerSetup(string name, string layout, User user, bool shared, StoreReportManagerSetupType type, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addStoreReportManagerSetupCaller.CallAsync(new object[] {name, layout, user, shared, type}, resultHandler, errorHandler);
        }

        public void GetCalculationCardReports(DepartmentEntity department, List<Product> productList, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<OP1ReportData>> resultHandler)
        {
            getCalculationCardReportsCaller.CallAsync(new object[] {department, productList, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetChequeReport(DateInterval dateInterval, ChequeReportDetalizationType detalization, ChequeReportOrderType ordersType, HashSet<Group> groups, AsyncErrorHandler errorHandler, Action<ChequeReport> resultHandler)
        {
            getChequeReportCaller.CallAsync(new object[] {dateInterval, detalization, ordersType, groups}, resultHandler, errorHandler);
        }

        public void GetCounteragentReport(DateTime? dateFrom, DateTime? dateTo, User user, AsyncErrorHandler errorHandler, Action<CounteragentReport> resultHandler)
        {
            getCounteragentReportCaller.CallAsync(new object[] {dateFrom, dateTo, user}, resultHandler, errorHandler);
        }

        public void GetCustomStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, StoreOperationsReportFilter filter, StoreOperationsReportGrouping grouping, AsyncErrorHandler errorHandler, Action<StoreOperationsReport> resultHandler)
        {
            getCustomStoreOperationsReportCaller.CallAsync(new object[] {dateFrom, dateTo, filter, grouping}, resultHandler, errorHandler);
        }

        public void GetIncomingInvoiceReport(DateInterval dateInterval, ICollection<Store> stores, InvoiceReportGroupType groupType, AsyncErrorHandler errorHandler, Action<InvoiceReport> resultHandler)
        {
            getIncomingInvoiceReportCaller.CallAsync(new object[] {dateInterval, stores, groupType}, resultHandler, errorHandler);
        }

        public void GetStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, List<DocumentType> documentTypes, bool productDetalization, bool showCostCorrections, AsyncErrorHandler errorHandler, Action<StoreOperationsReport> resultHandler)
        {
            getStoreOperationsReportCaller.CallAsync(new object[] {dateFrom, dateTo, stores, documentTypes, productDetalization, showCostCorrections}, resultHandler, errorHandler);
        }

        public void GetStoreTurnoverReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Store> stores, ICollection<User> counteragents, ProductCategory category, bool extendReport, AsyncErrorHandler errorHandler, Action<StoreTurnoverReport> resultHandler)
        {
            getStoreTurnoverReportCaller.CallAsync(new object[] {dateFrom, dateTo, stores, counteragents, category, extendReport}, resultHandler, errorHandler);
        }

        public void RemoveCustomReportSettings(StoreSummaryReportSettings reportSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            removeCustomReportSettingsCaller.CallAsync(new object[] {reportSettings}, resultHandler, errorHandler);
        }

        public void RemoveStoreReportManagerSetup(string name, StoreReportManagerSetupType type, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            removeStoreReportManagerSetupCaller.CallAsync(new object[] {name, type}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddCustomSummaryReportSettings(ByValue<StoreSummaryReportSettings> reportSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addCustomSummaryReportSettingsCaller.Call<object>(new object[] { reportSettings }, asyncState, requestTimeout);
        }

        public Task<object> AddStoreReportManagerSetup(string name, string layout, User user, bool shared, StoreReportManagerSetupType type, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addStoreReportManagerSetupCaller.Call<object>(new object[] { name, layout, user, shared, type }, asyncState, requestTimeout);
        }

        public Task<List<OP1ReportData>> GetCalculationCardReports(DepartmentEntity department, List<Product> productList, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCalculationCardReportsCaller.Call<List<OP1ReportData>>(new object[] { department, productList, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<ChequeReport> GetChequeReport(DateInterval dateInterval, ChequeReportDetalizationType detalization, ChequeReportOrderType ordersType, HashSet<Group> groups, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getChequeReportCaller.Call<ChequeReport>(new object[] { dateInterval, detalization, ordersType, groups }, asyncState, requestTimeout);
        }

        public Task<CounteragentReport> GetCounteragentReport(DateTime? dateFrom, DateTime? dateTo, User user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCounteragentReportCaller.Call<CounteragentReport>(new object[] { dateFrom, dateTo, user }, asyncState, requestTimeout);
        }

        public Task<StoreOperationsReport> GetCustomStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, StoreOperationsReportFilter filter, StoreOperationsReportGrouping grouping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCustomStoreOperationsReportCaller.Call<StoreOperationsReport>(new object[] { dateFrom, dateTo, filter, grouping }, asyncState, requestTimeout);
        }

        public Task<InvoiceReport> GetIncomingInvoiceReport(DateInterval dateInterval, ICollection<Store> stores, InvoiceReportGroupType groupType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIncomingInvoiceReportCaller.Call<InvoiceReport>(new object[] { dateInterval, stores, groupType }, asyncState, requestTimeout);
        }

        public Task<StoreOperationsReport> GetStoreOperationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<Store> stores, List<DocumentType> documentTypes, bool productDetalization, bool showCostCorrections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoreOperationsReportCaller.Call<StoreOperationsReport>(new object[] { dateFrom, dateTo, stores, documentTypes, productDetalization, showCostCorrections }, asyncState, requestTimeout);
        }

        public Task<StoreTurnoverReport> GetStoreTurnoverReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Store> stores, ICollection<User> counteragents, ProductCategory category, bool extendReport, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoreTurnoverReportCaller.Call<StoreTurnoverReport>(new object[] { dateFrom, dateTo, stores, counteragents, category, extendReport }, asyncState, requestTimeout);
        }

        public Task<object> RemoveCustomReportSettings(StoreSummaryReportSettings reportSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeCustomReportSettingsCaller.Call<object>(new object[] { reportSettings }, asyncState, requestTimeout);
        }

        public Task<object> RemoveStoreReportManagerSetup(string name, StoreReportManagerSetupType type, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeStoreReportManagerSetupCaller.Call<object>(new object[] { name, type }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class StoreService : IStoreService
    {
        private readonly RemoteMethodCaller computeProductCostPricesByDepartmentCaller;
        private readonly RemoteMethodCaller createInternalTransfersForStoresCaller;
        private readonly RemoteMethodCaller createOrUpdateCertificateCaller;
        private readonly RemoteMethodCaller deleteCertificateCaller;
        private readonly RemoteMethodCaller deleteStoreCaller;
        private readonly RemoteMethodCaller distributeInventoryShortageCaller;
        private readonly RemoteMethodCaller getCostPricesByDateForPairsCaller;
        private readonly RemoteMethodCaller getCostPricesByDateForProductsCaller;
        private readonly RemoteMethodCaller getCostPricesByDepartmentsCaller;
        private readonly RemoteMethodCaller getIngredientWiseProductCostsForProductsCaller;
        private readonly RemoteMethodCaller getInventoryPenaltiesCaller;
        private readonly RemoteMethodCaller getLastProductCostsByStoresCaller;
        private readonly RemoteMethodCaller getNonEstimatedProductsCostCaller;
        private readonly RemoteMethodCaller getNonEstimatedSlidingProductCostsCaller;
        private readonly RemoteMethodCaller getNonEstimatedSlidingProductCostsForProductsCaller;
        private readonly RemoteMethodCaller getOperatingCostsForDateAndDepartmentsCaller;
        private readonly RemoteMethodCaller getPreparedProductsOnStoreCaller;
        private readonly RemoteMethodCaller getProductCostPricesByAssemblyChartsAndDateCaller;
        private readonly RemoteMethodCaller getProductCostPricesByDepartmentCaller;
        private readonly RemoteMethodCaller getProductUsagesCaller;
        private readonly RemoteMethodCaller getProductUsagesByProductCaller;
        private readonly RemoteMethodCaller getProductsBalanceForDateCaller;
        private readonly RemoteMethodCaller getProductsOnStoreCaller;
        private readonly RemoteMethodCaller getSlidingAvgProductCostsCaller;
        private readonly RemoteMethodCaller getSlidingAvgProductCostsForProductsCaller;
        private readonly RemoteMethodCaller getStoreBalanceCaller;
        private readonly RemoteMethodCaller getStoreProductsBalanceCaller;
        private readonly RemoteMethodCaller getStoreTurnoverForProductsExceptDocumentCaller;
        private readonly RemoteMethodCaller getStoresBalanceExceptDocumentCaller;
        private readonly RemoteMethodCaller getStoresBalanceExceptDocumentForProductsCaller;
        private readonly RemoteMethodCaller getStoresProductsBalanceCaller;
        private readonly RemoteMethodCaller getStoresProductsBalanceForStoresProductsCaller;
        private readonly RemoteMethodCaller getStoresProductsBalanceReportForDateCaller;
        private readonly RemoteMethodCaller saveOrUpdateStoreInfoCaller;
        private readonly RemoteMethodCaller undeleteStoreCaller;

        internal StoreService()
        {

            computeProductCostPricesByDepartmentCaller = new RemoteMethodCaller("store", "computeProductCostPricesByDepartment");
            computeProductCostPricesByDepartmentCaller.AddArg("department", typeof(DepartmentEntity));
            computeProductCostPricesByDepartmentCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            createInternalTransfersForStoresCaller = new RemoteMethodCaller("store", "createInternalTransfersForStores");
            createInternalTransfersForStoresCaller.AddArg("goodRecords", typeof(List<GoodRecord>));
            createInternalTransfersForStoresCaller.AddArg("department", typeof(DepartmentEntity));
            createInternalTransfersForStoresCaller.AddArg("defaultStore", typeof(Store));

            createOrUpdateCertificateCaller = new RemoteMethodCaller("store", "createOrUpdateCertificate");
            createOrUpdateCertificateCaller.AddArg("certificate", typeof(ByValue<Certificate>));

            deleteCertificateCaller = new RemoteMethodCaller("store", "deleteCertificate");
            deleteCertificateCaller.AddArg("certificate", typeof(Certificate));
            deleteCertificateCaller.AddArg("delete", typeof(bool));

            deleteStoreCaller = new RemoteMethodCaller("store", "deleteStore");
            deleteStoreCaller.AddArg("store", typeof(Store));

            distributeInventoryShortageCaller = new RemoteMethodCaller("store", "distributeInventoryShortage");
            distributeInventoryShortageCaller.AddArg("inventoryId", typeof(Guid?));
            distributeInventoryShortageCaller.AddArg("users", typeof(Dictionary<User, decimal>));
            distributeInventoryShortageCaller.AddArg("comment", typeof(string));

            getCostPricesByDateForPairsCaller = new RemoteMethodCaller("store", "getCostPricesByDateForPairs");
            getCostPricesByDateForPairsCaller.AddArg("keys", typeof(HashSet<ProductSizeStoreKey>));
            getCostPricesByDateForPairsCaller.AddArg("date", typeof(DateTime?));
            getCostPricesByDateForPairsCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getCostPricesByDateForProductsCaller = new RemoteMethodCaller("store", "getCostPricesByDateForProducts");
            getCostPricesByDateForProductsCaller.AddArg("date", typeof(DateTime?));
            getCostPricesByDateForProductsCaller.AddArg("store", typeof(Store));
            getCostPricesByDateForProductsCaller.AddArg("products", typeof(ICollection<Product>));
            getCostPricesByDateForProductsCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getCostPricesByDepartmentsCaller = new RemoteMethodCaller("store", "getCostPricesByDepartments");
            getCostPricesByDepartmentsCaller.AddArg("dateOne", typeof(DateTime?));
            getCostPricesByDepartmentsCaller.AddArg("dateTwo", typeof(DateTime?));
            getCostPricesByDepartmentsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getCostPricesByDepartmentsCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getIngredientWiseProductCostsForProductsCaller = new RemoteMethodCaller("store", "getIngredientWiseProductCostsForProducts");
            getIngredientWiseProductCostsForProductsCaller.AddArg("date", typeof(DateTime?));
            getIngredientWiseProductCostsForProductsCaller.AddArg("store", typeof(Store));
            getIngredientWiseProductCostsForProductsCaller.AddArg("products", typeof(ICollection<Product>));
            getIngredientWiseProductCostsForProductsCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getInventoryPenaltiesCaller = new RemoteMethodCaller("store", "getInventoryPenalties");
            getInventoryPenaltiesCaller.AddArg("inventoryId", typeof(Guid?));

            getLastProductCostsByStoresCaller = new RemoteMethodCaller("store", "getLastProductCostsByStores");
            getLastProductCostsByStoresCaller.AddArg("date", typeof(DateTime?));
            getLastProductCostsByStoresCaller.AddArg("stores", typeof(ICollection<Store>));

            getNonEstimatedProductsCostCaller = new RemoteMethodCaller("store", "getNonEstimatedProductsCost");
            getNonEstimatedProductsCostCaller.AddArg("date", typeof(DateTime?));

            getNonEstimatedSlidingProductCostsCaller = new RemoteMethodCaller("store", "getNonEstimatedSlidingProductCosts");
            getNonEstimatedSlidingProductCostsCaller.AddArg("date", typeof(DateTime?));
            getNonEstimatedSlidingProductCostsCaller.AddArg("stores", typeof(ICollection<Store>));

            getNonEstimatedSlidingProductCostsForProductsCaller = new RemoteMethodCaller("store", "getNonEstimatedSlidingProductCostsForProducts");
            getNonEstimatedSlidingProductCostsForProductsCaller.AddArg("date", typeof(DateTime?));
            getNonEstimatedSlidingProductCostsForProductsCaller.AddArg("stores", typeof(ICollection<Store>));
            getNonEstimatedSlidingProductCostsForProductsCaller.AddArg("products", typeof(ICollection<Product>));

            getOperatingCostsForDateAndDepartmentsCaller = new RemoteMethodCaller("store", "getOperatingCostsForDateAndDepartments");
            getOperatingCostsForDateAndDepartmentsCaller.AddArg("date", typeof(DateTime?));
            getOperatingCostsForDateAndDepartmentsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getPreparedProductsOnStoreCaller = new RemoteMethodCaller("store", "getPreparedProductsOnStore");
            getPreparedProductsOnStoreCaller.AddArg("date", typeof(DateTime?));
            getPreparedProductsOnStoreCaller.AddArg("store", typeof(Store));

            getProductCostPricesByAssemblyChartsAndDateCaller = new RemoteMethodCaller("store", "getProductCostPricesByAssemblyChartsAndDate");
            getProductCostPricesByAssemblyChartsAndDateCaller.AddArg("department", typeof(DepartmentEntity));
            getProductCostPricesByAssemblyChartsAndDateCaller.AddArg("assemblyChart", typeof(AssemblyChart));
            getProductCostPricesByAssemblyChartsAndDateCaller.AddArg("date", typeof(DateTime?));
            getProductCostPricesByAssemblyChartsAndDateCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getProductCostPricesByDepartmentCaller = new RemoteMethodCaller("store", "getProductCostPricesByDepartment");
            getProductCostPricesByDepartmentCaller.AddArg("department", typeof(DepartmentEntity));
            getProductCostPricesByDepartmentCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getProductUsagesCaller = new RemoteMethodCaller("store", "getProductUsages");
            getProductUsagesCaller.AddArg("date", typeof(DateTime?));
            getProductUsagesCaller.AddArg("products", typeof(ICollection<Product>));
            getProductUsagesCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));

            getProductUsagesByProductCaller = new RemoteMethodCaller("store", "getProductUsagesByProduct");
            getProductUsagesByProductCaller.AddArg("date", typeof(DateInfo));
            getProductUsagesByProductCaller.AddArg("product", typeof(Product));
            getProductUsagesByProductCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));

            getProductsBalanceForDateCaller = new RemoteMethodCaller("store", "getProductsBalanceForDate");
            getProductsBalanceForDateCaller.AddArg("date", typeof(DateInfo));

            getProductsOnStoreCaller = new RemoteMethodCaller("store", "getProductsOnStore");
            getProductsOnStoreCaller.AddArg("date", typeof(DateTime?));
            getProductsOnStoreCaller.AddArg("store", typeof(Store));

            getSlidingAvgProductCostsCaller = new RemoteMethodCaller("store", "getSlidingAvgProductCosts");
            getSlidingAvgProductCostsCaller.AddArg("date", typeof(DateTime?));
            getSlidingAvgProductCostsCaller.AddArg("stores", typeof(ICollection<Store>));
            getSlidingAvgProductCostsCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getSlidingAvgProductCostsForProductsCaller = new RemoteMethodCaller("store", "getSlidingAvgProductCostsForProducts");
            getSlidingAvgProductCostsForProductsCaller.AddArg("date", typeof(DateTime?));
            getSlidingAvgProductCostsForProductsCaller.AddArg("stores", typeof(ICollection<Store>));
            getSlidingAvgProductCostsForProductsCaller.AddArg("products", typeof(ICollection<Product>));
            getSlidingAvgProductCostsForProductsCaller.AddArg("withEstimatedPurchasePrices", typeof(bool));

            getStoreBalanceCaller = new RemoteMethodCaller("store", "getStoreBalance");
            getStoreBalanceCaller.AddArg("timestamp", typeof(DateTime?));
            getStoreBalanceCaller.AddArg("store", typeof(Store));

            getStoreProductsBalanceCaller = new RemoteMethodCaller("store", "getStoreProductsBalance");
            getStoreProductsBalanceCaller.AddArg("timestamp", typeof(DateTime?));
            getStoreProductsBalanceCaller.AddArg("store", typeof(Store));
            getStoreProductsBalanceCaller.AddArg("products", typeof(ICollection<Product>));

            getStoreTurnoverForProductsExceptDocumentCaller = new RemoteMethodCaller("store", "getStoreTurnoverForProductsExceptDocument");
            getStoreTurnoverForProductsExceptDocumentCaller.AddArg("dateFrom", typeof(DateTime?));
            getStoreTurnoverForProductsExceptDocumentCaller.AddArg("store", typeof(Store));
            getStoreTurnoverForProductsExceptDocumentCaller.AddArg("products", typeof(ICollection<Product>));
            getStoreTurnoverForProductsExceptDocumentCaller.AddArg("excludedDocumentId", typeof(Guid?));

            getStoresBalanceExceptDocumentCaller = new RemoteMethodCaller("store", "getStoresBalanceExceptDocument");
            getStoresBalanceExceptDocumentCaller.AddArg("timestamp", typeof(DateTime?));
            getStoresBalanceExceptDocumentCaller.AddArg("documentId", typeof(Guid?));

            getStoresBalanceExceptDocumentForProductsCaller = new RemoteMethodCaller("store", "getStoresBalanceExceptDocumentForProducts");
            getStoresBalanceExceptDocumentForProductsCaller.AddArg("timestamp", typeof(DateTime?));
            getStoresBalanceExceptDocumentForProductsCaller.AddArg("documentId", typeof(Guid?));
            getStoresBalanceExceptDocumentForProductsCaller.AddArg("stores", typeof(ICollection<Store>));
            getStoresBalanceExceptDocumentForProductsCaller.AddArg("products", typeof(ICollection<Product>));

            getStoresProductsBalanceCaller = new RemoteMethodCaller("store", "getStoresProductsBalance");
            getStoresProductsBalanceCaller.AddArg("timestamp", typeof(DateTime?));

            getStoresProductsBalanceForStoresProductsCaller = new RemoteMethodCaller("store", "getStoresProductsBalanceForStoresProducts");
            getStoresProductsBalanceForStoresProductsCaller.AddArg("timestamp", typeof(DateTime?));
            getStoresProductsBalanceForStoresProductsCaller.AddArg("stores", typeof(ICollection<Store>));
            getStoresProductsBalanceForStoresProductsCaller.AddArg("products", typeof(ICollection<Product>));

            getStoresProductsBalanceReportForDateCaller = new RemoteMethodCaller("store", "getStoresProductsBalanceReportForDate");
            getStoresProductsBalanceReportForDateCaller.AddArg("date", typeof(DateInfo));

            saveOrUpdateStoreInfoCaller = new RemoteMethodCaller("store", "saveOrUpdateStoreInfo");
            saveOrUpdateStoreInfoCaller.AddArg("storeInfo", typeof(StoreInfo));

            undeleteStoreCaller = new RemoteMethodCaller("store", "undeleteStore");
            undeleteStoreCaller.AddArg("store", typeof(Store));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<Product, ProductCostAndOutput>> ComputeProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices)
        {
            return computeProductCostPricesByDepartmentCaller.CreateCall<Dictionary<Product, ProductCostAndOutput>>(new object[] { department, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<Dictionary<Store, InternalTransfer>> CreateInternalTransfersForStores(List<GoodRecord> goodRecords, DepartmentEntity department, Store defaultStore)
        {
            return createInternalTransfersForStoresCaller.CreateCall<Dictionary<Store, InternalTransfer>>(new object[] { goodRecords, department, defaultStore });
        }

        public IServiceMethodCall<object> CreateOrUpdateCertificate(ByValue<Certificate> certificate)
        {
            return createOrUpdateCertificateCaller.CreateCall<object>(new object[] { certificate });
        }

        public IServiceMethodCall<object> DeleteCertificate(Certificate certificate, bool delete)
        {
            return deleteCertificateCaller.CreateCall<object>(new object[] { certificate, delete });
        }

        public IServiceMethodCall<object> DeleteStore(Store store)
        {
            return deleteStoreCaller.CreateCall<object>(new object[] { store });
        }

        public IServiceMethodCall<object> DistributeInventoryShortage(Guid? inventoryId, Dictionary<User, decimal> users, string comment)
        {
            return distributeInventoryShortageCaller.CreateCall<object>(new object[] { inventoryId, users, comment });
        }

        public IServiceMethodCall<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>> GetCostPricesByDateForPairs(HashSet<ProductSizeStoreKey> keys, DateTime? date, bool withEstimatedPurchasePrices)
        {
            return getCostPricesByDateForPairsCaller.CreateCall<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>>(new object[] { keys, date, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetCostPricesByDateForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices)
        {
            return getCostPricesByDateForProductsCaller.CreateCall<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, store, products, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<List<Dictionary<Product, CostPriceChangeItem>>> GetCostPricesByDepartments(DateTime? dateOne, DateTime? dateTwo, HashSet<DepartmentEntity> departments, bool withEstimatedPurchasePrices)
        {
            return getCostPricesByDepartmentsCaller.CreateCall<List<Dictionary<Product, CostPriceChangeItem>>>(new object[] { dateOne, dateTwo, departments, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetIngredientWiseProductCostsForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices)
        {
            return getIngredientWiseProductCostsForProductsCaller.CreateCall<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, store, products, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<List<PenaltyOrBonusTransaction>> GetInventoryPenalties(Guid? inventoryId)
        {
            return getInventoryPenaltiesCaller.CreateCall<List<PenaltyOrBonusTransaction>>(new object[] { inventoryId });
        }

        public IServiceMethodCall<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>> GetLastProductCostsByStores(DateTime? date, ICollection<Store> stores)
        {
            return getLastProductCostsByStoresCaller.CreateCall<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>>(new object[] { date, stores });
        }

        public IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetNonEstimatedProductsCost(DateTime? date)
        {
            return getNonEstimatedProductsCostCaller.CreateCall<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>>(new object[] { date });
        }

        public IServiceMethodCall<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCosts(DateTime? date, ICollection<Store> stores)
        {
            return getNonEstimatedSlidingProductCostsCaller.CreateCall<Dictionary<Product, decimal>>(new object[] { date, stores });
        }

        public IServiceMethodCall<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products)
        {
            return getNonEstimatedSlidingProductCostsForProductsCaller.CreateCall<Dictionary<Product, decimal>>(new object[] { date, stores, products });
        }

        public IServiceMethodCall<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetOperatingCostsForDateAndDepartments(DateTime? date, ICollection<DepartmentEntity> departments)
        {
            return getOperatingCostsForDateAndDepartmentsCaller.CreateCall<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>>(new object[] { date, departments });
        }

        public IServiceMethodCall<HashSet<Product>> GetPreparedProductsOnStore(DateTime? date, Store store)
        {
            return getPreparedProductsOnStoreCaller.CreateCall<HashSet<Product>>(new object[] { date, store });
        }

        public IServiceMethodCall<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByAssemblyChartsAndDate(DepartmentEntity department, AssemblyChart assemblyChart, DateTime? date, bool withEstimatedPurchasePrices)
        {
            return getProductCostPricesByAssemblyChartsAndDateCaller.CreateCall<Dictionary<Product, ProductCostAndOutput>>(new object[] { department, assemblyChart, date, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices)
        {
            return getProductCostPricesByDepartmentCaller.CreateCall<Dictionary<Product, ProductCostAndOutput>>(new object[] { department, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<ICollection<Product>> GetProductUsages(DateTime? date, ICollection<Product> products, HashSet<DepartmentEntity> departments)
        {
            return getProductUsagesCaller.CreateCall<ICollection<Product>>(new object[] { date, products, departments });
        }

        public IServiceMethodCall<ProductEntryReport> GetProductUsagesByProduct(DateInfo date, Product product, HashSet<DepartmentEntity> departments)
        {
            return getProductUsagesByProductCaller.CreateCall<ProductEntryReport>(new object[] { date, product, departments });
        }

        public IServiceMethodCall<Dictionary<Product, decimal>> GetProductsBalanceForDate(DateInfo date)
        {
            return getProductsBalanceForDateCaller.CreateCall<Dictionary<Product, decimal>>(new object[] { date });
        }

        public IServiceMethodCall<HashSet<Product>> GetProductsOnStore(DateTime? date, Store store)
        {
            return getProductsOnStoreCaller.CreateCall<HashSet<Product>>(new object[] { date, store });
        }

        public IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCosts(DateTime? date, ICollection<Store> stores, bool withEstimatedPurchasePrices)
        {
            return getSlidingAvgProductCostsCaller.CreateCall<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, stores, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, bool withEstimatedPurchasePrices)
        {
            return getSlidingAvgProductCostsForProductsCaller.CreateCall<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, stores, products, withEstimatedPurchasePrices });
        }

        public IServiceMethodCall<StoreBalance> GetStoreBalance(DateTime? timestamp, Store store)
        {
            return getStoreBalanceCaller.CreateCall<StoreBalance>(new object[] { timestamp, store });
        }

        public IServiceMethodCall<StoreBalance> GetStoreProductsBalance(DateTime? timestamp, Store store, ICollection<Product> products)
        {
            return getStoreProductsBalanceCaller.CreateCall<StoreBalance>(new object[] { timestamp, store, products });
        }

        public IServiceMethodCall<Dictionary<Product, decimal>> GetStoreTurnoverForProductsExceptDocument(DateTime? dateFrom, Store store, ICollection<Product> products, Guid? excludedDocumentId)
        {
            return getStoreTurnoverForProductsExceptDocumentCaller.CreateCall<Dictionary<Product, decimal>>(new object[] { dateFrom, store, products, excludedDocumentId });
        }

        public IServiceMethodCall<StoresProductsBalance> GetStoresBalanceExceptDocument(DateTime? timestamp, Guid? documentId)
        {
            return getStoresBalanceExceptDocumentCaller.CreateCall<StoresProductsBalance>(new object[] { timestamp, documentId });
        }

        public IServiceMethodCall<StoresProductsBalance> GetStoresBalanceExceptDocumentForProducts(DateTime? timestamp, Guid? documentId, ICollection<Store> stores, ICollection<Product> products)
        {
            return getStoresBalanceExceptDocumentForProductsCaller.CreateCall<StoresProductsBalance>(new object[] { timestamp, documentId, stores, products });
        }

        public IServiceMethodCall<StoresProductsBalance> GetStoresProductsBalance(DateTime? timestamp)
        {
            return getStoresProductsBalanceCaller.CreateCall<StoresProductsBalance>(new object[] { timestamp });
        }

        public IServiceMethodCall<StoresProductsBalance> GetStoresProductsBalanceForStoresProducts(DateTime? timestamp, ICollection<Store> stores, ICollection<Product> products)
        {
            return getStoresProductsBalanceForStoresProductsCaller.CreateCall<StoresProductsBalance>(new object[] { timestamp, stores, products });
        }

        public IServiceMethodCall<StoresProductsBalance> GetStoresProductsBalanceReportForDate(DateInfo date)
        {
            return getStoresProductsBalanceReportForDateCaller.CreateCall<StoresProductsBalance>(new object[] { date });
        }

        public IServiceMethodCall<StoreInfo> SaveOrUpdateStoreInfo(StoreInfo storeInfo)
        {
            return saveOrUpdateStoreInfoCaller.CreateCall<StoreInfo>(new object[] { storeInfo });
        }

        public IServiceMethodCall<object> UndeleteStore(Store store)
        {
            return undeleteStoreCaller.CreateCall<object>(new object[] { store });
        }

        #endregion

        #region asynchronous version
        public void ComputeProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductCostAndOutput>> resultHandler)
        {
            computeProductCostPricesByDepartmentCaller.CallAsync(new object[] {department, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void CreateInternalTransfersForStores(List<GoodRecord> goodRecords, DepartmentEntity department, Store defaultStore, AsyncErrorHandler errorHandler, Action<Dictionary<Store, InternalTransfer>> resultHandler)
        {
            createInternalTransfersForStoresCaller.CallAsync(new object[] {goodRecords, department, defaultStore}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateCertificate(ByValue<Certificate> certificate, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateCertificateCaller.CallAsync(new object[] {certificate}, resultHandler, errorHandler);
        }

        public void DeleteCertificate(Certificate certificate, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteCertificateCaller.CallAsync(new object[] {certificate, delete}, resultHandler, errorHandler);
        }

        public void DeleteStore(Store store, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteStoreCaller.CallAsync(new object[] {store}, resultHandler, errorHandler);
        }

        public void DistributeInventoryShortage(Guid? inventoryId, Dictionary<User, decimal> users, string comment, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            distributeInventoryShortageCaller.CallAsync(new object[] {inventoryId, users, comment}, resultHandler, errorHandler);
        }

        public void GetCostPricesByDateForPairs(HashSet<ProductSizeStoreKey> keys, DateTime? date, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>> resultHandler)
        {
            getCostPricesByDateForPairsCaller.CallAsync(new object[] {keys, date, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetCostPricesByDateForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler)
        {
            getCostPricesByDateForProductsCaller.CallAsync(new object[] {date, store, products, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetCostPricesByDepartments(DateTime? dateOne, DateTime? dateTwo, HashSet<DepartmentEntity> departments, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<List<Dictionary<Product, CostPriceChangeItem>>> resultHandler)
        {
            getCostPricesByDepartmentsCaller.CallAsync(new object[] {dateOne, dateTwo, departments, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetIngredientWiseProductCostsForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler)
        {
            getIngredientWiseProductCostsForProductsCaller.CallAsync(new object[] {date, store, products, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetInventoryPenalties(Guid? inventoryId, AsyncErrorHandler errorHandler, Action<List<PenaltyOrBonusTransaction>> resultHandler)
        {
            getInventoryPenaltiesCaller.CallAsync(new object[] {inventoryId}, resultHandler, errorHandler);
        }

        public void GetLastProductCostsByStores(DateTime? date, ICollection<Store> stores, AsyncErrorHandler errorHandler, Action<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>> resultHandler)
        {
            getLastProductCostsByStoresCaller.CallAsync(new object[] {date, stores}, resultHandler, errorHandler);
        }

        public void GetNonEstimatedProductsCost(DateTime? date, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> resultHandler)
        {
            getNonEstimatedProductsCostCaller.CallAsync(new object[] {date}, resultHandler, errorHandler);
        }

        public void GetNonEstimatedSlidingProductCosts(DateTime? date, ICollection<Store> stores, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler)
        {
            getNonEstimatedSlidingProductCostsCaller.CallAsync(new object[] {date, stores}, resultHandler, errorHandler);
        }

        public void GetNonEstimatedSlidingProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler)
        {
            getNonEstimatedSlidingProductCostsForProductsCaller.CallAsync(new object[] {date, stores, products}, resultHandler, errorHandler);
        }

        public void GetOperatingCostsForDateAndDepartments(DateTime? date, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> resultHandler)
        {
            getOperatingCostsForDateAndDepartmentsCaller.CallAsync(new object[] {date, departments}, resultHandler, errorHandler);
        }

        public void GetPreparedProductsOnStore(DateTime? date, Store store, AsyncErrorHandler errorHandler, Action<HashSet<Product>> resultHandler)
        {
            getPreparedProductsOnStoreCaller.CallAsync(new object[] {date, store}, resultHandler, errorHandler);
        }

        public void GetProductCostPricesByAssemblyChartsAndDate(DepartmentEntity department, AssemblyChart assemblyChart, DateTime? date, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductCostAndOutput>> resultHandler)
        {
            getProductCostPricesByAssemblyChartsAndDateCaller.CallAsync(new object[] {department, assemblyChart, date, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductCostAndOutput>> resultHandler)
        {
            getProductCostPricesByDepartmentCaller.CallAsync(new object[] {department, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetProductUsages(DateTime? date, ICollection<Product> products, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ICollection<Product>> resultHandler)
        {
            getProductUsagesCaller.CallAsync(new object[] {date, products, departments}, resultHandler, errorHandler);
        }

        public void GetProductUsagesByProduct(DateInfo date, Product product, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ProductEntryReport> resultHandler)
        {
            getProductUsagesByProductCaller.CallAsync(new object[] {date, product, departments}, resultHandler, errorHandler);
        }

        public void GetProductsBalanceForDate(DateInfo date, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler)
        {
            getProductsBalanceForDateCaller.CallAsync(new object[] {date}, resultHandler, errorHandler);
        }

        public void GetProductsOnStore(DateTime? date, Store store, AsyncErrorHandler errorHandler, Action<HashSet<Product>> resultHandler)
        {
            getProductsOnStoreCaller.CallAsync(new object[] {date, store}, resultHandler, errorHandler);
        }

        public void GetSlidingAvgProductCosts(DateTime? date, ICollection<Store> stores, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler)
        {
            getSlidingAvgProductCostsCaller.CallAsync(new object[] {date, stores, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetSlidingAvgProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, bool withEstimatedPurchasePrices, AsyncErrorHandler errorHandler, Action<Dictionary<Product, EvaluableDecimalValue>> resultHandler)
        {
            getSlidingAvgProductCostsForProductsCaller.CallAsync(new object[] {date, stores, products, withEstimatedPurchasePrices}, resultHandler, errorHandler);
        }

        public void GetStoreBalance(DateTime? timestamp, Store store, AsyncErrorHandler errorHandler, Action<StoreBalance> resultHandler)
        {
            getStoreBalanceCaller.CallAsync(new object[] {timestamp, store}, resultHandler, errorHandler);
        }

        public void GetStoreProductsBalance(DateTime? timestamp, Store store, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<StoreBalance> resultHandler)
        {
            getStoreProductsBalanceCaller.CallAsync(new object[] {timestamp, store, products}, resultHandler, errorHandler);
        }

        public void GetStoreTurnoverForProductsExceptDocument(DateTime? dateFrom, Store store, ICollection<Product> products, Guid? excludedDocumentId, AsyncErrorHandler errorHandler, Action<Dictionary<Product, decimal>> resultHandler)
        {
            getStoreTurnoverForProductsExceptDocumentCaller.CallAsync(new object[] {dateFrom, store, products, excludedDocumentId}, resultHandler, errorHandler);
        }

        public void GetStoresBalanceExceptDocument(DateTime? timestamp, Guid? documentId, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler)
        {
            getStoresBalanceExceptDocumentCaller.CallAsync(new object[] {timestamp, documentId}, resultHandler, errorHandler);
        }

        public void GetStoresBalanceExceptDocumentForProducts(DateTime? timestamp, Guid? documentId, ICollection<Store> stores, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler)
        {
            getStoresBalanceExceptDocumentForProductsCaller.CallAsync(new object[] {timestamp, documentId, stores, products}, resultHandler, errorHandler);
        }

        public void GetStoresProductsBalance(DateTime? timestamp, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler)
        {
            getStoresProductsBalanceCaller.CallAsync(new object[] {timestamp}, resultHandler, errorHandler);
        }

        public void GetStoresProductsBalanceForStoresProducts(DateTime? timestamp, ICollection<Store> stores, ICollection<Product> products, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler)
        {
            getStoresProductsBalanceForStoresProductsCaller.CallAsync(new object[] {timestamp, stores, products}, resultHandler, errorHandler);
        }

        public void GetStoresProductsBalanceReportForDate(DateInfo date, AsyncErrorHandler errorHandler, Action<StoresProductsBalance> resultHandler)
        {
            getStoresProductsBalanceReportForDateCaller.CallAsync(new object[] {date}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateStoreInfo(StoreInfo storeInfo, AsyncErrorHandler errorHandler, Action<StoreInfo> resultHandler)
        {
            saveOrUpdateStoreInfoCaller.CallAsync(new object[] {storeInfo}, resultHandler, errorHandler);
        }

        public void UndeleteStore(Store store, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteStoreCaller.CallAsync(new object[] {store}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<Product, ProductCostAndOutput>> ComputeProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return computeProductCostPricesByDepartmentCaller.Call<Dictionary<Product, ProductCostAndOutput>>(new object[] { department, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Store, InternalTransfer>> CreateInternalTransfersForStores(List<GoodRecord> goodRecords, DepartmentEntity department, Store defaultStore, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createInternalTransfersForStoresCaller.Call<Dictionary<Store, InternalTransfer>>(new object[] { goodRecords, department, defaultStore }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateCertificate(ByValue<Certificate> certificate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateCertificateCaller.Call<object>(new object[] { certificate }, asyncState, requestTimeout);
        }

        public Task<object> DeleteCertificate(Certificate certificate, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteCertificateCaller.Call<object>(new object[] { certificate, delete }, asyncState, requestTimeout);
        }

        public Task<object> DeleteStore(Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteStoreCaller.Call<object>(new object[] { store }, asyncState, requestTimeout);
        }

        public Task<object> DistributeInventoryShortage(Guid? inventoryId, Dictionary<User, decimal> users, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return distributeInventoryShortageCaller.Call<object>(new object[] { inventoryId, users, comment }, asyncState, requestTimeout);
        }

        public Task<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>> GetCostPricesByDateForPairs(HashSet<ProductSizeStoreKey> keys, DateTime? date, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCostPricesByDateForPairsCaller.Call<Dictionary<ProductSizeStoreKey, EvaluableDecimalValue>>(new object[] { keys, date, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, EvaluableDecimalValue>> GetCostPricesByDateForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCostPricesByDateForProductsCaller.Call<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, store, products, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<List<Dictionary<Product, CostPriceChangeItem>>> GetCostPricesByDepartments(DateTime? dateOne, DateTime? dateTwo, HashSet<DepartmentEntity> departments, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCostPricesByDepartmentsCaller.Call<List<Dictionary<Product, CostPriceChangeItem>>>(new object[] { dateOne, dateTwo, departments, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, EvaluableDecimalValue>> GetIngredientWiseProductCostsForProducts(DateTime? date, Store store, ICollection<Product> products, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIngredientWiseProductCostsForProductsCaller.Call<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, store, products, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<List<PenaltyOrBonusTransaction>> GetInventoryPenalties(Guid? inventoryId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getInventoryPenaltiesCaller.Call<List<PenaltyOrBonusTransaction>>(new object[] { inventoryId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>> GetLastProductCostsByStores(DateTime? date, ICollection<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLastProductCostsByStoresCaller.Call<Dictionary<Store, Dictionary<Product, EvaluableDecimalValue>>>(new object[] { date, stores }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetNonEstimatedProductsCost(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNonEstimatedProductsCostCaller.Call<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>>(new object[] { date }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCosts(DateTime? date, ICollection<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNonEstimatedSlidingProductCostsCaller.Call<Dictionary<Product, decimal>>(new object[] { date, stores }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, decimal>> GetNonEstimatedSlidingProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getNonEstimatedSlidingProductCostsForProductsCaller.Call<Dictionary<Product, decimal>>(new object[] { date, stores, products }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>> GetOperatingCostsForDateAndDepartments(DateTime? date, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getOperatingCostsForDateAndDepartmentsCaller.Call<Dictionary<DepartmentEntity, Dictionary<Product, EvaluableDecimalValue>>>(new object[] { date, departments }, asyncState, requestTimeout);
        }

        public Task<HashSet<Product>> GetPreparedProductsOnStore(DateTime? date, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPreparedProductsOnStoreCaller.Call<HashSet<Product>>(new object[] { date, store }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByAssemblyChartsAndDate(DepartmentEntity department, AssemblyChart assemblyChart, DateTime? date, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductCostPricesByAssemblyChartsAndDateCaller.Call<Dictionary<Product, ProductCostAndOutput>>(new object[] { department, assemblyChart, date, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, ProductCostAndOutput>> GetProductCostPricesByDepartment(DepartmentEntity department, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductCostPricesByDepartmentCaller.Call<Dictionary<Product, ProductCostAndOutput>>(new object[] { department, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<ICollection<Product>> GetProductUsages(DateTime? date, ICollection<Product> products, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductUsagesCaller.Call<ICollection<Product>>(new object[] { date, products, departments }, asyncState, requestTimeout);
        }

        public Task<ProductEntryReport> GetProductUsagesByProduct(DateInfo date, Product product, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductUsagesByProductCaller.Call<ProductEntryReport>(new object[] { date, product, departments }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, decimal>> GetProductsBalanceForDate(DateInfo date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductsBalanceForDateCaller.Call<Dictionary<Product, decimal>>(new object[] { date }, asyncState, requestTimeout);
        }

        public Task<HashSet<Product>> GetProductsOnStore(DateTime? date, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductsOnStoreCaller.Call<HashSet<Product>>(new object[] { date, store }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCosts(DateTime? date, ICollection<Store> stores, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSlidingAvgProductCostsCaller.Call<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, stores, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, EvaluableDecimalValue>> GetSlidingAvgProductCostsForProducts(DateTime? date, ICollection<Store> stores, ICollection<Product> products, bool withEstimatedPurchasePrices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSlidingAvgProductCostsForProductsCaller.Call<Dictionary<Product, EvaluableDecimalValue>>(new object[] { date, stores, products, withEstimatedPurchasePrices }, asyncState, requestTimeout);
        }

        public Task<StoreBalance> GetStoreBalance(DateTime? timestamp, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoreBalanceCaller.Call<StoreBalance>(new object[] { timestamp, store }, asyncState, requestTimeout);
        }

        public Task<StoreBalance> GetStoreProductsBalance(DateTime? timestamp, Store store, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoreProductsBalanceCaller.Call<StoreBalance>(new object[] { timestamp, store, products }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Product, decimal>> GetStoreTurnoverForProductsExceptDocument(DateTime? dateFrom, Store store, ICollection<Product> products, Guid? excludedDocumentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoreTurnoverForProductsExceptDocumentCaller.Call<Dictionary<Product, decimal>>(new object[] { dateFrom, store, products, excludedDocumentId }, asyncState, requestTimeout);
        }

        public Task<StoresProductsBalance> GetStoresBalanceExceptDocument(DateTime? timestamp, Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoresBalanceExceptDocumentCaller.Call<StoresProductsBalance>(new object[] { timestamp, documentId }, asyncState, requestTimeout);
        }

        public Task<StoresProductsBalance> GetStoresBalanceExceptDocumentForProducts(DateTime? timestamp, Guid? documentId, ICollection<Store> stores, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoresBalanceExceptDocumentForProductsCaller.Call<StoresProductsBalance>(new object[] { timestamp, documentId, stores, products }, asyncState, requestTimeout);
        }

        public Task<StoresProductsBalance> GetStoresProductsBalance(DateTime? timestamp, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoresProductsBalanceCaller.Call<StoresProductsBalance>(new object[] { timestamp }, asyncState, requestTimeout);
        }

        public Task<StoresProductsBalance> GetStoresProductsBalanceForStoresProducts(DateTime? timestamp, ICollection<Store> stores, ICollection<Product> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoresProductsBalanceForStoresProductsCaller.Call<StoresProductsBalance>(new object[] { timestamp, stores, products }, asyncState, requestTimeout);
        }

        public Task<StoresProductsBalance> GetStoresProductsBalanceReportForDate(DateInfo date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoresProductsBalanceReportForDateCaller.Call<StoresProductsBalance>(new object[] { date }, asyncState, requestTimeout);
        }

        public Task<StoreInfo> SaveOrUpdateStoreInfo(StoreInfo storeInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateStoreInfoCaller.Call<StoreInfo>(new object[] { storeInfo }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteStore(Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteStoreCaller.Call<object>(new object[] { store }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class AlcoholService : IAlcoholService
    {
        private readonly RemoteMethodCaller buildAlcoholReportCaller;
        private readonly RemoteMethodCaller buildAlcoholSalesReportByPercentageOfAlcoholCaller;

        internal AlcoholService()
        {

            buildAlcoholReportCaller = new RemoteMethodCaller("alcohol", "buildAlcoholReport");
            buildAlcoholReportCaller.AddArg("from", typeof(DateInfo));
            buildAlcoholReportCaller.AddArg("to", typeof(DateInfo));
            buildAlcoholReportCaller.AddArg("usedTurnoverTransactions", typeof(ICollection<TransactionType>));
            buildAlcoholReportCaller.AddArg("usedIncomeTransactions", typeof(ICollection<TransactionType>));
            buildAlcoholReportCaller.AddArg("usedReturnTransactions", typeof(ICollection<TransactionType>));
            buildAlcoholReportCaller.AddArg("stores", typeof(ICollection<Store>));
            buildAlcoholReportCaller.AddArg("alcoholTypes", typeof(HashSet<AlcoholType>));

            buildAlcoholSalesReportByPercentageOfAlcoholCaller = new RemoteMethodCaller("alcohol", "buildAlcoholSalesReportByPercentageOfAlcohol");
            buildAlcoholSalesReportByPercentageOfAlcoholCaller.AddArg("dateFrom", typeof(DateTime?));
            buildAlcoholSalesReportByPercentageOfAlcoholCaller.AddArg("dateTo", typeof(DateTime?));
            buildAlcoholSalesReportByPercentageOfAlcoholCaller.AddArg("storeIds", typeof(HashSet<Guid>));
            buildAlcoholSalesReportByPercentageOfAlcoholCaller.AddArg("saleDocumentIds", typeof(HashSet<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<AlcoholReport> BuildAlcoholReport(DateInfo from, DateInfo to, ICollection<TransactionType> usedTurnoverTransactions, ICollection<TransactionType> usedIncomeTransactions, ICollection<TransactionType> usedReturnTransactions, ICollection<Store> stores, HashSet<AlcoholType> alcoholTypes)
        {
            return buildAlcoholReportCaller.CreateCall<AlcoholReport>(new object[] { from, to, usedTurnoverTransactions, usedIncomeTransactions, usedReturnTransactions, stores, alcoholTypes });
        }

        public IServiceMethodCall<AlcoholSalesReport> BuildAlcoholSalesReportByPercentageOfAlcohol(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> storeIds, HashSet<Guid> saleDocumentIds)
        {
            return buildAlcoholSalesReportByPercentageOfAlcoholCaller.CreateCall<AlcoholSalesReport>(new object[] { dateFrom, dateTo, storeIds, saleDocumentIds });
        }

        #endregion

        #region asynchronous version
        public void BuildAlcoholReport(DateInfo from, DateInfo to, ICollection<TransactionType> usedTurnoverTransactions, ICollection<TransactionType> usedIncomeTransactions, ICollection<TransactionType> usedReturnTransactions, ICollection<Store> stores, HashSet<AlcoholType> alcoholTypes, AsyncErrorHandler errorHandler, Action<AlcoholReport> resultHandler)
        {
            buildAlcoholReportCaller.CallAsync(new object[] {from, to, usedTurnoverTransactions, usedIncomeTransactions, usedReturnTransactions, stores, alcoholTypes}, resultHandler, errorHandler);
        }

        public void BuildAlcoholSalesReportByPercentageOfAlcohol(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> storeIds, HashSet<Guid> saleDocumentIds, AsyncErrorHandler errorHandler, Action<AlcoholSalesReport> resultHandler)
        {
            buildAlcoholSalesReportByPercentageOfAlcoholCaller.CallAsync(new object[] {dateFrom, dateTo, storeIds, saleDocumentIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<AlcoholReport> BuildAlcoholReport(DateInfo from, DateInfo to, ICollection<TransactionType> usedTurnoverTransactions, ICollection<TransactionType> usedIncomeTransactions, ICollection<TransactionType> usedReturnTransactions, ICollection<Store> stores, HashSet<AlcoholType> alcoholTypes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildAlcoholReportCaller.Call<AlcoholReport>(new object[] { from, to, usedTurnoverTransactions, usedIncomeTransactions, usedReturnTransactions, stores, alcoholTypes }, asyncState, requestTimeout);
        }

        public Task<AlcoholSalesReport> BuildAlcoholSalesReportByPercentageOfAlcohol(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> storeIds, HashSet<Guid> saleDocumentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildAlcoholSalesReportByPercentageOfAlcoholCaller.Call<AlcoholSalesReport>(new object[] { dateFrom, dateTo, storeIds, saleDocumentIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ExternalHierarchyService : IExternalHierarchyService
    {
        private readonly RemoteMethodCaller forceUploadToIikoBizCaller;
        private readonly RemoteMethodCaller updateExternalHierarchyCaller;

        internal ExternalHierarchyService()
        {

            forceUploadToIikoBizCaller = new RemoteMethodCaller("externalHierachy", "forceUploadToIikoBiz");

            updateExternalHierarchyCaller = new RemoteMethodCaller("externalHierachy", "updateExternalHierarchy");
            updateExternalHierarchyCaller.AddArg("externalHierachy", typeof(ByValue<ExternalHierarchy>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> ForceUploadToIikoBiz()
        {
            return forceUploadToIikoBizCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> UpdateExternalHierarchy(ByValue<ExternalHierarchy> externalHierachy)
        {
            return updateExternalHierarchyCaller.CreateCall<object>(new object[] { externalHierachy });
        }

        #endregion

        #region asynchronous version
        public void ForceUploadToIikoBiz(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            forceUploadToIikoBizCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void UpdateExternalHierarchy(ByValue<ExternalHierarchy> externalHierachy, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateExternalHierarchyCaller.CallAsync(new object[] {externalHierachy}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> ForceUploadToIikoBiz([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return forceUploadToIikoBizCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> UpdateExternalHierarchy(ByValue<ExternalHierarchy> externalHierachy, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateExternalHierarchyCaller.Call<object>(new object[] { externalHierachy }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IncomingReturnedInvoiceService : IIncomingReturnedInvoiceService
    {
        private readonly RemoteMethodCaller getCostPricesByDocumentCaller;
        private readonly RemoteMethodCaller updateCostPricesCaller;

        internal IncomingReturnedInvoiceService()
        {

            getCostPricesByDocumentCaller = new RemoteMethodCaller("incomingReturnedInvoice", "getCostPricesByDocument");
            getCostPricesByDocumentCaller.AddArg("outgoingInvoiceId", typeof(Guid?));

            updateCostPricesCaller = new RemoteMethodCaller("incomingReturnedInvoice", "updateCostPrices");
            updateCostPricesCaller.AddArg("incomingReturnedInvoicesIds", typeof(ICollection<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<Product, ProductValue>> GetCostPricesByDocument(Guid? outgoingInvoiceId)
        {
            return getCostPricesByDocumentCaller.CreateCall<Dictionary<Product, ProductValue>>(new object[] { outgoingInvoiceId });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> UpdateCostPrices(ICollection<Guid> incomingReturnedInvoicesIds)
        {
            return updateCostPricesCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { incomingReturnedInvoicesIds });
        }

        #endregion

        #region asynchronous version
        public void GetCostPricesByDocument(Guid? outgoingInvoiceId, AsyncErrorHandler errorHandler, Action<Dictionary<Product, ProductValue>> resultHandler)
        {
            getCostPricesByDocumentCaller.CallAsync(new object[] {outgoingInvoiceId}, resultHandler, errorHandler);
        }

        public void UpdateCostPrices(ICollection<Guid> incomingReturnedInvoicesIds, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            updateCostPricesCaller.CallAsync(new object[] {incomingReturnedInvoicesIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<Product, ProductValue>> GetCostPricesByDocument(Guid? outgoingInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCostPricesByDocumentCaller.Call<Dictionary<Product, ProductValue>>(new object[] { outgoingInvoiceId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> UpdateCostPrices(ICollection<Guid> incomingReturnedInvoicesIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateCostPricesCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { incomingReturnedInvoicesIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class OutgoingInvoiceService : IOutgoingInvoiceService
    {
        private readonly RemoteMethodCaller sellByCostPricesCaller;
        private readonly RemoteMethodCaller sellByLastShipmentCaller;
        private readonly RemoteMethodCaller sellByPriceListCaller;

        internal OutgoingInvoiceService()
        {

            sellByCostPricesCaller = new RemoteMethodCaller("outgoingInvoice", "sellByCostPrices");
            sellByCostPricesCaller.AddArg("outgoingInvoiceIds", typeof(ICollection<Guid>));
            sellByCostPricesCaller.AddArg("pricingParameters", typeof(PricingParameters));

            sellByLastShipmentCaller = new RemoteMethodCaller("outgoingInvoice", "sellByLastShipment");
            sellByLastShipmentCaller.AddArg("outgoingInvoiceIds", typeof(ICollection<Guid>));
            sellByLastShipmentCaller.AddArg("pricingParameters", typeof(PricingParameters));

            sellByPriceListCaller = new RemoteMethodCaller("outgoingInvoice", "sellByPriceList");
            sellByPriceListCaller.AddArg("outgoingInvoiceIds", typeof(ICollection<Guid>));
            sellByPriceListCaller.AddArg("pricingParameters", typeof(PricingParameters));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> SellByCostPrices(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters)
        {
            return sellByCostPricesCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { outgoingInvoiceIds, pricingParameters });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> SellByLastShipment(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters)
        {
            return sellByLastShipmentCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { outgoingInvoiceIds, pricingParameters });
        }

        public IServiceMethodCall<Dictionary<Guid, DocumentValidationResult>> SellByPriceList(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters)
        {
            return sellByPriceListCaller.CreateCall<Dictionary<Guid, DocumentValidationResult>>(new object[] { outgoingInvoiceIds, pricingParameters });
        }

        #endregion

        #region asynchronous version
        public void SellByCostPrices(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            sellByCostPricesCaller.CallAsync(new object[] {outgoingInvoiceIds, pricingParameters}, resultHandler, errorHandler);
        }

        public void SellByLastShipment(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            sellByLastShipmentCaller.CallAsync(new object[] {outgoingInvoiceIds, pricingParameters}, resultHandler, errorHandler);
        }

        public void SellByPriceList(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DocumentValidationResult>> resultHandler)
        {
            sellByPriceListCaller.CallAsync(new object[] {outgoingInvoiceIds, pricingParameters}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<Guid, DocumentValidationResult>> SellByCostPrices(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sellByCostPricesCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { outgoingInvoiceIds, pricingParameters }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> SellByLastShipment(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sellByLastShipmentCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { outgoingInvoiceIds, pricingParameters }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DocumentValidationResult>> SellByPriceList(ICollection<Guid> outgoingInvoiceIds, PricingParameters pricingParameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sellByPriceListCaller.Call<Dictionary<Guid, DocumentValidationResult>>(new object[] { outgoingInvoiceIds, pricingParameters }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IndependentPriceListService : IIndependentPriceListService
    {
        private readonly RemoteMethodCaller deletePriceListCaller;
        private readonly RemoteMethodCaller getIndependentPriceListByDateCaller;
        private readonly RemoteMethodCaller getIndependentPriceListsAllCaller;
        private readonly RemoteMethodCaller updatePriceListWithSettingsCaller;

        internal IndependentPriceListService()
        {

            deletePriceListCaller = new RemoteMethodCaller("independentPriceLists", "deletePriceList");
            deletePriceListCaller.AddArg("priceListId", typeof(Guid?));

            getIndependentPriceListByDateCaller = new RemoteMethodCaller("independentPriceLists", "getIndependentPriceListByDate");
            getIndependentPriceListByDateCaller.AddArg("date", typeof(DateTime?));

            getIndependentPriceListsAllCaller = new RemoteMethodCaller("independentPriceLists", "getIndependentPriceListsAll");

            updatePriceListWithSettingsCaller = new RemoteMethodCaller("independentPriceLists", "updatePriceListWithSettings");
            updatePriceListWithSettingsCaller.AddArg("priceLists", typeof(ICollection<IndependentPriceList>));
            updatePriceListWithSettingsCaller.AddArg("deleteWithSameDate", typeof(bool));
            updatePriceListWithSettingsCaller.AddArg("saveWithErrors", typeof(bool));
            updatePriceListWithSettingsCaller.AddArg("defaultDeviationAction", typeof(AllowableDeviationAction));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> DeletePriceList(Guid? priceListId)
        {
            return deletePriceListCaller.CreateCall<object>(new object[] { priceListId });
        }

        public IServiceMethodCall<IndependentPriceList> GetIndependentPriceListByDate(DateTime? date)
        {
            return getIndependentPriceListByDateCaller.CreateCall<IndependentPriceList>(new object[] { date });
        }

        public IServiceMethodCall<ICollection<IndependentPriceList>> GetIndependentPriceListsAll()
        {
            return getIndependentPriceListsAllCaller.CreateCall<ICollection<IndependentPriceList>>(new object[] {  });
        }

        public IServiceMethodCall<PriceListSaveResult> UpdatePriceListWithSettings(ICollection<IndependentPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AllowableDeviationAction defaultDeviationAction)
        {
            return updatePriceListWithSettingsCaller.CreateCall<PriceListSaveResult>(new object[] { priceLists, deleteWithSameDate, saveWithErrors, defaultDeviationAction });
        }

        #endregion

        #region asynchronous version
        public void DeletePriceList(Guid? priceListId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deletePriceListCaller.CallAsync(new object[] {priceListId}, resultHandler, errorHandler);
        }

        public void GetIndependentPriceListByDate(DateTime? date, AsyncErrorHandler errorHandler, Action<IndependentPriceList> resultHandler)
        {
            getIndependentPriceListByDateCaller.CallAsync(new object[] {date}, resultHandler, errorHandler);
        }

        public void GetIndependentPriceListsAll(AsyncErrorHandler errorHandler, Action<ICollection<IndependentPriceList>> resultHandler)
        {
            getIndependentPriceListsAllCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void UpdatePriceListWithSettings(ICollection<IndependentPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AllowableDeviationAction defaultDeviationAction, AsyncErrorHandler errorHandler, Action<PriceListSaveResult> resultHandler)
        {
            updatePriceListWithSettingsCaller.CallAsync(new object[] {priceLists, deleteWithSameDate, saveWithErrors, defaultDeviationAction}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> DeletePriceList(Guid? priceListId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deletePriceListCaller.Call<object>(new object[] { priceListId }, asyncState, requestTimeout);
        }

        public Task<IndependentPriceList> GetIndependentPriceListByDate(DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIndependentPriceListByDateCaller.Call<IndependentPriceList>(new object[] { date }, asyncState, requestTimeout);
        }

        public Task<ICollection<IndependentPriceList>> GetIndependentPriceListsAll([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIndependentPriceListsAllCaller.Call<ICollection<IndependentPriceList>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<PriceListSaveResult> UpdatePriceListWithSettings(ICollection<IndependentPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AllowableDeviationAction defaultDeviationAction, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePriceListWithSettingsCaller.Call<PriceListSaveResult>(new object[] { priceLists, deleteWithSameDate, saveWithErrors, defaultDeviationAction }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SupplierPriceListService : ISupplierPriceListService
    {
        private readonly RemoteMethodCaller deletePriceListCaller;
        private readonly RemoteMethodCaller getBySuppliersAndDateCaller;
        private readonly RemoteMethodCaller getSupplierPriceListsCaller;
        private readonly RemoteMethodCaller updatePriceListsCaller;

        internal SupplierPriceListService()
        {

            deletePriceListCaller = new RemoteMethodCaller("supplierPriceLists", "deletePriceList");
            deletePriceListCaller.AddArg("priceListId", typeof(Guid?));

            getBySuppliersAndDateCaller = new RemoteMethodCaller("supplierPriceLists", "getBySuppliersAndDate");
            getBySuppliersAndDateCaller.AddArg("supplierIds", typeof(ICollection<Guid>));
            getBySuppliersAndDateCaller.AddArg("date", typeof(DateTime?));

            getSupplierPriceListsCaller = new RemoteMethodCaller("supplierPriceLists", "getSupplierPriceLists");
            getSupplierPriceListsCaller.AddArg("supplierId", typeof(Guid?));

            updatePriceListsCaller = new RemoteMethodCaller("supplierPriceLists", "updatePriceLists");
            updatePriceListsCaller.AddArg("priceLists", typeof(ICollection<SupplierPriceList>));
            updatePriceListsCaller.AddArg("deleteWithSameDate", typeof(bool));
            updatePriceListsCaller.AddArg("saveWithErrors", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> DeletePriceList(Guid? priceListId)
        {
            return deletePriceListCaller.CreateCall<object>(new object[] { priceListId });
        }

        public IServiceMethodCall<ICollection<SupplierPriceList>> GetBySuppliersAndDate(ICollection<Guid> supplierIds, DateTime? date)
        {
            return getBySuppliersAndDateCaller.CreateCall<ICollection<SupplierPriceList>>(new object[] { supplierIds, date });
        }

        public IServiceMethodCall<ICollection<SupplierPriceList>> GetSupplierPriceLists(Guid? supplierId)
        {
            return getSupplierPriceListsCaller.CreateCall<ICollection<SupplierPriceList>>(new object[] { supplierId });
        }

        public IServiceMethodCall<PriceListSaveResult> UpdatePriceLists(ICollection<SupplierPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors)
        {
            return updatePriceListsCaller.CreateCall<PriceListSaveResult>(new object[] { priceLists, deleteWithSameDate, saveWithErrors });
        }

        #endregion

        #region asynchronous version
        public void DeletePriceList(Guid? priceListId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deletePriceListCaller.CallAsync(new object[] {priceListId}, resultHandler, errorHandler);
        }

        public void GetBySuppliersAndDate(ICollection<Guid> supplierIds, DateTime? date, AsyncErrorHandler errorHandler, Action<ICollection<SupplierPriceList>> resultHandler)
        {
            getBySuppliersAndDateCaller.CallAsync(new object[] {supplierIds, date}, resultHandler, errorHandler);
        }

        public void GetSupplierPriceLists(Guid? supplierId, AsyncErrorHandler errorHandler, Action<ICollection<SupplierPriceList>> resultHandler)
        {
            getSupplierPriceListsCaller.CallAsync(new object[] {supplierId}, resultHandler, errorHandler);
        }

        public void UpdatePriceLists(ICollection<SupplierPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, AsyncErrorHandler errorHandler, Action<PriceListSaveResult> resultHandler)
        {
            updatePriceListsCaller.CallAsync(new object[] {priceLists, deleteWithSameDate, saveWithErrors}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> DeletePriceList(Guid? priceListId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deletePriceListCaller.Call<object>(new object[] { priceListId }, asyncState, requestTimeout);
        }

        public Task<ICollection<SupplierPriceList>> GetBySuppliersAndDate(ICollection<Guid> supplierIds, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBySuppliersAndDateCaller.Call<ICollection<SupplierPriceList>>(new object[] { supplierIds, date }, asyncState, requestTimeout);
        }

        public Task<ICollection<SupplierPriceList>> GetSupplierPriceLists(Guid? supplierId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSupplierPriceListsCaller.Call<ICollection<SupplierPriceList>>(new object[] { supplierId }, asyncState, requestTimeout);
        }

        public Task<PriceListSaveResult> UpdatePriceLists(ICollection<SupplierPriceList> priceLists, bool deleteWithSameDate, bool saveWithErrors, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePriceListsCaller.Call<PriceListSaveResult>(new object[] { priceLists, deleteWithSameDate, saveWithErrors }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class StoreReplenishmentService : IStoreReplenishmentService
    {
        private readonly RemoteMethodCaller calculateReplenishmentsCaller;

        internal StoreReplenishmentService()
        {

            calculateReplenishmentsCaller = new RemoteMethodCaller("storeReplenishment", "calculateReplenishments");
            calculateReplenishmentsCaller.AddArg("date", typeof(DateTime?));
            calculateReplenishmentsCaller.AddArg("supplier", typeof(User));
            calculateReplenishmentsCaller.AddArg("productsAndStores", typeof(ICollection<Pair>));
            calculateReplenishmentsCaller.AddArg("excludeZeroAmounts", typeof(bool));
            calculateReplenishmentsCaller.AddArg("useSupplierPrices", typeof(bool));
            calculateReplenishmentsCaller.AddArg("groupByStore", typeof(bool));
            calculateReplenishmentsCaller.AddArg("groupBySupplier", typeof(bool));
            calculateReplenishmentsCaller.AddArg("type", typeof(StoreReplenishmentAlgorithmType));
            calculateReplenishmentsCaller.AddArg("averageAlgorithmParameters", typeof(AverageAlgorithmParameters));
            calculateReplenishmentsCaller.AddArg("includeStoreRemains", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<DocumentReplenishmentDto>> CalculateReplenishments(DateTime? date, User supplier, ICollection<Pair> productsAndStores, bool excludeZeroAmounts, bool useSupplierPrices, bool groupByStore, bool groupBySupplier, StoreReplenishmentAlgorithmType type, AverageAlgorithmParameters averageAlgorithmParameters, bool includeStoreRemains)
        {
            return calculateReplenishmentsCaller.CreateCall<ICollection<DocumentReplenishmentDto>>(new object[] { date, supplier, productsAndStores, excludeZeroAmounts, useSupplierPrices, groupByStore, groupBySupplier, type, averageAlgorithmParameters, includeStoreRemains });
        }

        #endregion

        #region asynchronous version
        public void CalculateReplenishments(DateTime? date, User supplier, ICollection<Pair> productsAndStores, bool excludeZeroAmounts, bool useSupplierPrices, bool groupByStore, bool groupBySupplier, StoreReplenishmentAlgorithmType type, AverageAlgorithmParameters averageAlgorithmParameters, bool includeStoreRemains, AsyncErrorHandler errorHandler, Action<ICollection<DocumentReplenishmentDto>> resultHandler)
        {
            calculateReplenishmentsCaller.CallAsync(new object[] {date, supplier, productsAndStores, excludeZeroAmounts, useSupplierPrices, groupByStore, groupBySupplier, type, averageAlgorithmParameters, includeStoreRemains}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<DocumentReplenishmentDto>> CalculateReplenishments(DateTime? date, User supplier, ICollection<Pair> productsAndStores, bool excludeZeroAmounts, bool useSupplierPrices, bool groupByStore, bool groupBySupplier, StoreReplenishmentAlgorithmType type, AverageAlgorithmParameters averageAlgorithmParameters, bool includeStoreRemains, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculateReplenishmentsCaller.Call<ICollection<DocumentReplenishmentDto>>(new object[] { date, supplier, productsAndStores, excludeZeroAmounts, useSupplierPrices, groupByStore, groupBySupplier, type, averageAlgorithmParameters, includeStoreRemains }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class TemplateReportService : ITemplateReportService
    {
        private readonly RemoteMethodCaller createTemplateReportItemCaller;
        private readonly RemoteMethodCaller setDeletedTemplateReportItemCaller;
        private readonly RemoteMethodCaller updateTemplateReportItemCaller;

        internal TemplateReportService()
        {

            createTemplateReportItemCaller = new RemoteMethodCaller("templateReports", "createTemplateReportItem");
            createTemplateReportItemCaller.AddArg("templateReportItem", typeof(ByValue<TemplateReportItem>));

            setDeletedTemplateReportItemCaller = new RemoteMethodCaller("templateReports", "setDeletedTemplateReportItem");
            setDeletedTemplateReportItemCaller.AddArg("templateReportItem", typeof(TemplateReportItem));
            setDeletedTemplateReportItemCaller.AddArg("deleted", typeof(bool));

            updateTemplateReportItemCaller = new RemoteMethodCaller("templateReports", "updateTemplateReportItem");
            updateTemplateReportItemCaller.AddArg("templateReportItem", typeof(ByValue<TemplateReportItem>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CreateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem)
        {
            return createTemplateReportItemCaller.CreateCall<object>(new object[] { templateReportItem });
        }

        public IServiceMethodCall<object> SetDeletedTemplateReportItem(TemplateReportItem templateReportItem, bool deleted)
        {
            return setDeletedTemplateReportItemCaller.CreateCall<object>(new object[] { templateReportItem, deleted });
        }

        public IServiceMethodCall<object> UpdateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem)
        {
            return updateTemplateReportItemCaller.CreateCall<object>(new object[] { templateReportItem });
        }

        #endregion

        #region asynchronous version
        public void CreateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createTemplateReportItemCaller.CallAsync(new object[] {templateReportItem}, resultHandler, errorHandler);
        }

        public void SetDeletedTemplateReportItem(TemplateReportItem templateReportItem, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedTemplateReportItemCaller.CallAsync(new object[] {templateReportItem, deleted}, resultHandler, errorHandler);
        }

        public void UpdateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateTemplateReportItemCaller.CallAsync(new object[] {templateReportItem}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CreateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createTemplateReportItemCaller.Call<object>(new object[] { templateReportItem }, asyncState, requestTimeout);
        }

        public Task<object> SetDeletedTemplateReportItem(TemplateReportItem templateReportItem, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedTemplateReportItemCaller.Call<object>(new object[] { templateReportItem, deleted }, asyncState, requestTimeout);
        }

        public Task<object> UpdateTemplateReportItem(ByValue<TemplateReportItem> templateReportItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateTemplateReportItemCaller.Call<object>(new object[] { templateReportItem }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class VatInvoiceService : IVatInvoiceService
    {
        private readonly RemoteMethodCaller createAndPrintInvoiceCaller;
        private readonly RemoteMethodCaller createInvoicesReportCaller;
        private readonly RemoteMethodCaller getOrdersWithVatInvoiceDataCaller;
        private readonly RemoteMethodCaller printInvoiceDuplicateCaller;

        internal VatInvoiceService()
        {

            createAndPrintInvoiceCaller = new RemoteMethodCaller("vatinvoice", "createAndPrintInvoice");
            createAndPrintInvoiceCaller.AddArg("ordersWithCustomers", typeof(Dictionary<Guid, Customer>));
            createAndPrintInvoiceCaller.AddArg("invoicePerOrder", typeof(bool));

            createInvoicesReportCaller = new RemoteMethodCaller("vatinvoice", "createInvoicesReport");
            createInvoicesReportCaller.AddArg("dateFrom", typeof(DateTime?));
            createInvoicesReportCaller.AddArg("dateTo", typeof(DateTime?));
            createInvoicesReportCaller.AddArg("customers", typeof(ICollection<Guid>));
            createInvoicesReportCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            createInvoicesReportCaller.AddArg("groupByVat", typeof(bool));

            getOrdersWithVatInvoiceDataCaller = new RemoteMethodCaller("vatinvoice", "getOrdersWithVatInvoiceData");
            getOrdersWithVatInvoiceDataCaller.AddArg("sessions", typeof(List<Guid>));

            printInvoiceDuplicateCaller = new RemoteMethodCaller("vatinvoice", "printInvoiceDuplicate");
            printInvoiceDuplicateCaller.AddArg("invoiceIds", typeof(ICollection<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<VatInvoicePrintData> CreateAndPrintInvoice(Dictionary<Guid, Customer> ordersWithCustomers, bool invoicePerOrder)
        {
            return createAndPrintInvoiceCaller.CreateCall<VatInvoicePrintData>(new object[] { ordersWithCustomers, invoicePerOrder });
        }

        public IServiceMethodCall<VatInvoiceReportData> CreateInvoicesReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> customers, ICollection<DepartmentEntity> departments, bool groupByVat)
        {
            return createInvoicesReportCaller.CreateCall<VatInvoiceReportData>(new object[] { dateFrom, dateTo, customers, departments, groupByVat });
        }

        public IServiceMethodCall<ICollection<OrderVatInvoiceData>> GetOrdersWithVatInvoiceData(List<Guid> sessions)
        {
            return getOrdersWithVatInvoiceDataCaller.CreateCall<ICollection<OrderVatInvoiceData>>(new object[] { sessions });
        }

        public IServiceMethodCall<VatInvoicePrintData> PrintInvoiceDuplicate(ICollection<Guid> invoiceIds)
        {
            return printInvoiceDuplicateCaller.CreateCall<VatInvoicePrintData>(new object[] { invoiceIds });
        }

        #endregion

        #region asynchronous version
        public void CreateAndPrintInvoice(Dictionary<Guid, Customer> ordersWithCustomers, bool invoicePerOrder, AsyncErrorHandler errorHandler, Action<VatInvoicePrintData> resultHandler)
        {
            createAndPrintInvoiceCaller.CallAsync(new object[] {ordersWithCustomers, invoicePerOrder}, resultHandler, errorHandler);
        }

        public void CreateInvoicesReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> customers, ICollection<DepartmentEntity> departments, bool groupByVat, AsyncErrorHandler errorHandler, Action<VatInvoiceReportData> resultHandler)
        {
            createInvoicesReportCaller.CallAsync(new object[] {dateFrom, dateTo, customers, departments, groupByVat}, resultHandler, errorHandler);
        }

        public void GetOrdersWithVatInvoiceData(List<Guid> sessions, AsyncErrorHandler errorHandler, Action<ICollection<OrderVatInvoiceData>> resultHandler)
        {
            getOrdersWithVatInvoiceDataCaller.CallAsync(new object[] {sessions}, resultHandler, errorHandler);
        }

        public void PrintInvoiceDuplicate(ICollection<Guid> invoiceIds, AsyncErrorHandler errorHandler, Action<VatInvoicePrintData> resultHandler)
        {
            printInvoiceDuplicateCaller.CallAsync(new object[] {invoiceIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<VatInvoicePrintData> CreateAndPrintInvoice(Dictionary<Guid, Customer> ordersWithCustomers, bool invoicePerOrder, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createAndPrintInvoiceCaller.Call<VatInvoicePrintData>(new object[] { ordersWithCustomers, invoicePerOrder }, asyncState, requestTimeout);
        }

        public Task<VatInvoiceReportData> CreateInvoicesReport(DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> customers, ICollection<DepartmentEntity> departments, bool groupByVat, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createInvoicesReportCaller.Call<VatInvoiceReportData>(new object[] { dateFrom, dateTo, customers, departments, groupByVat }, asyncState, requestTimeout);
        }

        public Task<ICollection<OrderVatInvoiceData>> GetOrdersWithVatInvoiceData(List<Guid> sessions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getOrdersWithVatInvoiceDataCaller.Call<ICollection<OrderVatInvoiceData>>(new object[] { sessions }, asyncState, requestTimeout);
        }

        public Task<VatInvoicePrintData> PrintInvoiceDuplicate(ICollection<Guid> invoiceIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return printInvoiceDuplicateCaller.Call<VatInvoicePrintData>(new object[] { invoiceIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CorporationService : ICorporationService
    {
        private readonly RemoteMethodCaller createDepartmentCategoryCaller;
        private readonly RemoteMethodCaller getDepartmentByIdCaller;
        private readonly RemoteMethodCaller getDepartmentUnCodeCaller;
        private readonly RemoteMethodCaller getDepartmentsAndStoresIdsCaller;
        private readonly RemoteMethodCaller getRMSCorporatedHierarchyCaller;
        private readonly RemoteMethodCaller getScheduledPeriodChangesCaller;
        private readonly RemoteMethodCaller getStoresCaller;
        private readonly RemoteMethodCaller removeSchedulesCaller;
        private readonly RemoteMethodCaller saveCookingPlaceTypesCaller;
        private readonly RemoteMethodCaller saveCorporatedEntitiesCaller;
        private readonly RemoteMethodCaller schedulePeriodChangesCaller;
        private readonly RemoteMethodCaller setUnloadNowCaller;
        private readonly RemoteMethodCaller updateDepartmentCategoryCaller;
        private readonly RemoteMethodCaller updateRMSCorporatedHierarchyCaller;

        internal CorporationService()
        {

            createDepartmentCategoryCaller = new RemoteMethodCaller("corporation", "createDepartmentCategory");
            createDepartmentCategoryCaller.AddArg("departmentCategory", typeof(ByValue<DepartmentCategory>));

            getDepartmentByIdCaller = new RemoteMethodCaller("corporation", "getDepartmentById");
            getDepartmentByIdCaller.AddArg("departmentId", typeof(string));

            getDepartmentUnCodeCaller = new RemoteMethodCaller("corporation", "getDepartmentUnCode");
            getDepartmentUnCodeCaller.AddArg("clientCodes", typeof(List<string>));

            getDepartmentsAndStoresIdsCaller = new RemoteMethodCaller("corporation", "getDepartmentsAndStoresIds");

            getRMSCorporatedHierarchyCaller = new RemoteMethodCaller("corporation", "getRMSCorporatedHierarchy");

            getScheduledPeriodChangesCaller = new RemoteMethodCaller("corporation", "getScheduledPeriodChanges");

            getStoresCaller = new RemoteMethodCaller("corporation", "getStores");
            getStoresCaller.AddArg("department", typeof(DepartmentEntity));

            removeSchedulesCaller = new RemoteMethodCaller("corporation", "removeSchedules");
            removeSchedulesCaller.AddArg("tasks", typeof(ICollection<Guid>));

            saveCookingPlaceTypesCaller = new RemoteMethodCaller("corporation", "saveCookingPlaceTypes");
            saveCookingPlaceTypesCaller.AddArg("types", typeof(List<ByValue<CookingPlaceType>>));

            saveCorporatedEntitiesCaller = new RemoteMethodCaller("corporation", "saveCorporatedEntities");
            saveCorporatedEntitiesCaller.AddArg("entities", typeof(List<ByValue<CorporatedEntity>>));
            saveCorporatedEntitiesCaller.AddArg("stores", typeof(List<StoreInfo>));
            saveCorporatedEntitiesCaller.AddArg("cookingMap", typeof(Dictionary<Guid, Dictionary<CookingPlaceType, Guid>>));

            schedulePeriodChangesCaller = new RemoteMethodCaller("corporation", "schedulePeriodChanges");
            schedulePeriodChangesCaller.AddArg("tasks", typeof(ICollection<DepartmentPeriodCloseTask>));

            setUnloadNowCaller = new RemoteMethodCaller("corporation", "setUnloadNow");
            setUnloadNowCaller.AddArg("departments", typeof(ICollection<Department>));
            setUnloadNowCaller.AddArg("unloadNow", typeof(bool));

            updateDepartmentCategoryCaller = new RemoteMethodCaller("corporation", "updateDepartmentCategory");
            updateDepartmentCategoryCaller.AddArg("departmentCategory", typeof(ByValue<DepartmentCategory>));

            updateRMSCorporatedHierarchyCaller = new RemoteMethodCaller("corporation", "updateRMSCorporatedHierarchy");
            updateRMSCorporatedHierarchyCaller.AddArg("corporation", typeof(ByValue<Corporation>));
            updateRMSCorporatedHierarchyCaller.AddArg("jurPerson", typeof(ByValue<JurPerson>));
            updateRMSCorporatedHierarchyCaller.AddArg("department", typeof(ByValue<DepartmentEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<DepartmentCategory> CreateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory)
        {
            return createDepartmentCategoryCaller.CreateCall<DepartmentCategory>(new object[] { departmentCategory });
        }

        public IServiceMethodCall<DepartmentEntity> GetDepartmentById(string departmentId)
        {
            return getDepartmentByIdCaller.CreateCall<DepartmentEntity>(new object[] { departmentId });
        }

        public IServiceMethodCall<string> GetDepartmentUnCode(List<string> clientCodes)
        {
            return getDepartmentUnCodeCaller.CreateCall<string>(new object[] { clientCodes });
        }

        public IServiceMethodCall<Dictionary<string, Pair>> GetDepartmentsAndStoresIds()
        {
            return getDepartmentsAndStoresIdsCaller.CreateCall<Dictionary<string, Pair>>(new object[] {  });
        }

        public IServiceMethodCall<CorporatedHierarchy> GetRMSCorporatedHierarchy()
        {
            return getRMSCorporatedHierarchyCaller.CreateCall<CorporatedHierarchy>(new object[] {  });
        }

        public IServiceMethodCall<ICollection<DepartmentPeriodCloseTask>> GetScheduledPeriodChanges()
        {
            return getScheduledPeriodChangesCaller.CreateCall<ICollection<DepartmentPeriodCloseTask>>(new object[] {  });
        }

        public IServiceMethodCall<List<Store>> GetStores(DepartmentEntity department)
        {
            return getStoresCaller.CreateCall<List<Store>>(new object[] { department });
        }

        public IServiceMethodCall<object> RemoveSchedules(ICollection<Guid> tasks)
        {
            return removeSchedulesCaller.CreateCall<object>(new object[] { tasks });
        }

        public IServiceMethodCall<object> SaveCookingPlaceTypes(List<ByValue<CookingPlaceType>> types)
        {
            return saveCookingPlaceTypesCaller.CreateCall<object>(new object[] { types });
        }

        public IServiceMethodCall<object> SaveCorporatedEntities(List<ByValue<CorporatedEntity>> entities, List<StoreInfo> stores, Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap)
        {
            return saveCorporatedEntitiesCaller.CreateCall<object>(new object[] { entities, stores, cookingMap });
        }

        public IServiceMethodCall<object> SchedulePeriodChanges(ICollection<DepartmentPeriodCloseTask> tasks)
        {
            return schedulePeriodChangesCaller.CreateCall<object>(new object[] { tasks });
        }

        public IServiceMethodCall<object> SetUnloadNow(ICollection<Department> departments, bool unloadNow)
        {
            return setUnloadNowCaller.CreateCall<object>(new object[] { departments, unloadNow });
        }

        public IServiceMethodCall<DepartmentCategory> UpdateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory)
        {
            return updateDepartmentCategoryCaller.CreateCall<DepartmentCategory>(new object[] { departmentCategory });
        }

        public IServiceMethodCall<object> UpdateRMSCorporatedHierarchy(ByValue<Corporation> corporation, ByValue<JurPerson> jurPerson, ByValue<DepartmentEntity> department)
        {
            return updateRMSCorporatedHierarchyCaller.CreateCall<object>(new object[] { corporation, jurPerson, department });
        }

        #endregion

        #region asynchronous version
        public void CreateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, AsyncErrorHandler errorHandler, Action<DepartmentCategory> resultHandler)
        {
            createDepartmentCategoryCaller.CallAsync(new object[] {departmentCategory}, resultHandler, errorHandler);
        }

        public void GetDepartmentById(string departmentId, AsyncErrorHandler errorHandler, Action<DepartmentEntity> resultHandler)
        {
            getDepartmentByIdCaller.CallAsync(new object[] {departmentId}, resultHandler, errorHandler);
        }

        public void GetDepartmentUnCode(List<string> clientCodes, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getDepartmentUnCodeCaller.CallAsync(new object[] {clientCodes}, resultHandler, errorHandler);
        }

        public void GetDepartmentsAndStoresIds(AsyncErrorHandler errorHandler, Action<Dictionary<string, Pair>> resultHandler)
        {
            getDepartmentsAndStoresIdsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetRMSCorporatedHierarchy(AsyncErrorHandler errorHandler, Action<CorporatedHierarchy> resultHandler)
        {
            getRMSCorporatedHierarchyCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetScheduledPeriodChanges(AsyncErrorHandler errorHandler, Action<ICollection<DepartmentPeriodCloseTask>> resultHandler)
        {
            getScheduledPeriodChangesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetStores(DepartmentEntity department, AsyncErrorHandler errorHandler, Action<List<Store>> resultHandler)
        {
            getStoresCaller.CallAsync(new object[] {department}, resultHandler, errorHandler);
        }

        public void RemoveSchedules(ICollection<Guid> tasks, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            removeSchedulesCaller.CallAsync(new object[] {tasks}, resultHandler, errorHandler);
        }

        public void SaveCookingPlaceTypes(List<ByValue<CookingPlaceType>> types, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCookingPlaceTypesCaller.CallAsync(new object[] {types}, resultHandler, errorHandler);
        }

        public void SaveCorporatedEntities(List<ByValue<CorporatedEntity>> entities, List<StoreInfo> stores, Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCorporatedEntitiesCaller.CallAsync(new object[] {entities, stores, cookingMap}, resultHandler, errorHandler);
        }

        public void SchedulePeriodChanges(ICollection<DepartmentPeriodCloseTask> tasks, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            schedulePeriodChangesCaller.CallAsync(new object[] {tasks}, resultHandler, errorHandler);
        }

        public void SetUnloadNow(ICollection<Department> departments, bool unloadNow, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setUnloadNowCaller.CallAsync(new object[] {departments, unloadNow}, resultHandler, errorHandler);
        }

        public void UpdateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, AsyncErrorHandler errorHandler, Action<DepartmentCategory> resultHandler)
        {
            updateDepartmentCategoryCaller.CallAsync(new object[] {departmentCategory}, resultHandler, errorHandler);
        }

        public void UpdateRMSCorporatedHierarchy(ByValue<Corporation> corporation, ByValue<JurPerson> jurPerson, ByValue<DepartmentEntity> department, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateRMSCorporatedHierarchyCaller.CallAsync(new object[] {corporation, jurPerson, department}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DepartmentCategory> CreateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createDepartmentCategoryCaller.Call<DepartmentCategory>(new object[] { departmentCategory }, asyncState, requestTimeout);
        }

        public Task<DepartmentEntity> GetDepartmentById(string departmentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDepartmentByIdCaller.Call<DepartmentEntity>(new object[] { departmentId }, asyncState, requestTimeout);
        }

        public Task<string> GetDepartmentUnCode(List<string> clientCodes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDepartmentUnCodeCaller.Call<string>(new object[] { clientCodes }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, Pair>> GetDepartmentsAndStoresIds([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDepartmentsAndStoresIdsCaller.Call<Dictionary<string, Pair>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<CorporatedHierarchy> GetRMSCorporatedHierarchy([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRMSCorporatedHierarchyCaller.Call<CorporatedHierarchy>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<ICollection<DepartmentPeriodCloseTask>> GetScheduledPeriodChanges([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getScheduledPeriodChangesCaller.Call<ICollection<DepartmentPeriodCloseTask>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<List<Store>> GetStores(DepartmentEntity department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStoresCaller.Call<List<Store>>(new object[] { department }, asyncState, requestTimeout);
        }

        public Task<object> RemoveSchedules(ICollection<Guid> tasks, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeSchedulesCaller.Call<object>(new object[] { tasks }, asyncState, requestTimeout);
        }

        public Task<object> SaveCookingPlaceTypes(List<ByValue<CookingPlaceType>> types, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCookingPlaceTypesCaller.Call<object>(new object[] { types }, asyncState, requestTimeout);
        }

        public Task<object> SaveCorporatedEntities(List<ByValue<CorporatedEntity>> entities, List<StoreInfo> stores, Dictionary<Guid, Dictionary<CookingPlaceType, Guid>> cookingMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCorporatedEntitiesCaller.Call<object>(new object[] { entities, stores, cookingMap }, asyncState, requestTimeout);
        }

        public Task<object> SchedulePeriodChanges(ICollection<DepartmentPeriodCloseTask> tasks, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return schedulePeriodChangesCaller.Call<object>(new object[] { tasks }, asyncState, requestTimeout);
        }

        public Task<object> SetUnloadNow(ICollection<Department> departments, bool unloadNow, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setUnloadNowCaller.Call<object>(new object[] { departments, unloadNow }, asyncState, requestTimeout);
        }

        public Task<DepartmentCategory> UpdateDepartmentCategory(ByValue<DepartmentCategory> departmentCategory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDepartmentCategoryCaller.Call<DepartmentCategory>(new object[] { departmentCategory }, asyncState, requestTimeout);
        }

        public Task<object> UpdateRMSCorporatedHierarchy(ByValue<Corporation> corporation, ByValue<JurPerson> jurPerson, ByValue<DepartmentEntity> department, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateRMSCorporatedHierarchyCaller.Call<object>(new object[] { corporation, jurPerson, department }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CorporationSettingsService : ICorporationSettingsService
    {
        private readonly RemoteMethodCaller saveCorporationSettingsCaller;

        internal CorporationSettingsService()
        {

            saveCorporationSettingsCaller = new RemoteMethodCaller("corporationSettings", "saveCorporationSettings");
            saveCorporationSettingsCaller.AddArg("settingsDto", typeof(CorporationSettingsRequest));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> SaveCorporationSettings(CorporationSettingsRequest settingsDto)
        {
            return saveCorporationSettingsCaller.CreateCall<object>(new object[] { settingsDto });
        }

        #endregion

        #region asynchronous version
        public void SaveCorporationSettings(CorporationSettingsRequest settingsDto, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCorporationSettingsCaller.CallAsync(new object[] {settingsDto}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> SaveCorporationSettings(CorporationSettingsRequest settingsDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCorporationSettingsCaller.Call<object>(new object[] { settingsDto }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DepartmentService : IDepartmentService
    {
        private readonly RemoteMethodCaller getMenuChangeDocumentsByDepartmentAndDateCaller;

        internal DepartmentService()
        {

            getMenuChangeDocumentsByDepartmentAndDateCaller = new RemoteMethodCaller("department", "getMenuChangeDocumentsByDepartmentAndDate");
            getMenuChangeDocumentsByDepartmentAndDateCaller.AddArg("dateInterval", typeof(DateInterval));
            getMenuChangeDocumentsByDepartmentAndDateCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<TreeMenuChangeDocument>> GetMenuChangeDocumentsByDepartmentAndDate(DateInterval dateInterval, HashSet<DepartmentEntity> departments)
        {
            return getMenuChangeDocumentsByDepartmentAndDateCaller.CreateCall<ICollection<TreeMenuChangeDocument>>(new object[] { dateInterval, departments });
        }

        #endregion

        #region asynchronous version
        public void GetMenuChangeDocumentsByDepartmentAndDate(DateInterval dateInterval, HashSet<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<ICollection<TreeMenuChangeDocument>> resultHandler)
        {
            getMenuChangeDocumentsByDepartmentAndDateCaller.CallAsync(new object[] {dateInterval, departments}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<TreeMenuChangeDocument>> GetMenuChangeDocumentsByDepartmentAndDate(DateInterval dateInterval, HashSet<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getMenuChangeDocumentsByDepartmentAndDateCaller.Call<ICollection<TreeMenuChangeDocument>>(new object[] { dateInterval, departments }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class MenuService : IMenuService
    {
        private readonly RemoteMethodCaller createMenuChangeDocumentsCaller;
        private readonly RemoteMethodCaller getMenuOrdersCaller;
        private readonly RemoteMethodCaller getMenuTemplateCaller;
        private readonly RemoteMethodCaller getMenuTemplatesCaller;
        private readonly RemoteMethodCaller isLimitMenuRightsByDepartmentsCaller;
        private readonly RemoteMethodCaller saveOrUpdateMenuTemplateCaller;
        private readonly RemoteMethodCaller setMenuTemplateDeletedCaller;

        internal MenuService()
        {

            createMenuChangeDocumentsCaller = new RemoteMethodCaller("menu", "createMenuChangeDocuments");
            createMenuChangeDocumentsCaller.AddArg("templateId", typeof(Guid?));
            createMenuChangeDocumentsCaller.AddArg("departmentIds", typeof(ICollection<Guid>));
            createMenuChangeDocumentsCaller.AddArg("beginDate", typeof(DateTime?));
            createMenuChangeDocumentsCaller.AddArg("endDate", typeof(DateTime?));
            createMenuChangeDocumentsCaller.AddArg("deletePreviousMenu", typeof(bool));

            getMenuOrdersCaller = new RemoteMethodCaller("menu", "getMenuOrders");
            getMenuOrdersCaller.AddArg("changed", typeof(ICollection<MenuChangeField>));
            getMenuOrdersCaller.AddArg("date", typeof(DateTime?));
            getMenuOrdersCaller.AddArg("category", typeof(ClientPriceCategory));

            getMenuTemplateCaller = new RemoteMethodCaller("menu", "getMenuTemplate");
            getMenuTemplateCaller.AddArg("templateId", typeof(Guid?));

            getMenuTemplatesCaller = new RemoteMethodCaller("menu", "getMenuTemplates");
            getMenuTemplatesCaller.AddArg("dateFrom", typeof(DateTime?));
            getMenuTemplatesCaller.AddArg("dateTo", typeof(DateTime?));

            isLimitMenuRightsByDepartmentsCaller = new RemoteMethodCaller("menu", "isLimitMenuRightsByDepartments");

            saveOrUpdateMenuTemplateCaller = new RemoteMethodCaller("menu", "saveOrUpdateMenuTemplate");
            saveOrUpdateMenuTemplateCaller.AddArg("menuTemplate", typeof(ByValue<MenuTemplate>));

            setMenuTemplateDeletedCaller = new RemoteMethodCaller("menu", "setMenuTemplateDeleted");
            setMenuTemplateDeletedCaller.AddArg("templateId", typeof(Guid?));
            setMenuTemplateDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CreateMenuChangeDocuments(Guid? templateId, ICollection<Guid> departmentIds, DateTime? beginDate, DateTime? endDate, bool deletePreviousMenu)
        {
            return createMenuChangeDocumentsCaller.CreateCall<object>(new object[] { templateId, departmentIds, beginDate, endDate, deletePreviousMenu });
        }

        public IServiceMethodCall<Dictionary<MenuOrder, ICollection<MenuOrderItem>>> GetMenuOrders(ICollection<MenuChangeField> changed, DateTime? date, ClientPriceCategory category)
        {
            return getMenuOrdersCaller.CreateCall<Dictionary<MenuOrder, ICollection<MenuOrderItem>>>(new object[] { changed, date, category });
        }

        public IServiceMethodCall<MenuTemplate> GetMenuTemplate(Guid? templateId)
        {
            return getMenuTemplateCaller.CreateCall<MenuTemplate>(new object[] { templateId });
        }

        public IServiceMethodCall<List<MenuTemplate>> GetMenuTemplates(DateTime? dateFrom, DateTime? dateTo)
        {
            return getMenuTemplatesCaller.CreateCall<List<MenuTemplate>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<bool> IsLimitMenuRightsByDepartments()
        {
            return isLimitMenuRightsByDepartmentsCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<object> SaveOrUpdateMenuTemplate(ByValue<MenuTemplate> menuTemplate)
        {
            return saveOrUpdateMenuTemplateCaller.CreateCall<object>(new object[] { menuTemplate });
        }

        public IServiceMethodCall<object> SetMenuTemplateDeleted(Guid? templateId, bool deleted)
        {
            return setMenuTemplateDeletedCaller.CreateCall<object>(new object[] { templateId, deleted });
        }

        #endregion

        #region asynchronous version
        public void CreateMenuChangeDocuments(Guid? templateId, ICollection<Guid> departmentIds, DateTime? beginDate, DateTime? endDate, bool deletePreviousMenu, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createMenuChangeDocumentsCaller.CallAsync(new object[] {templateId, departmentIds, beginDate, endDate, deletePreviousMenu}, resultHandler, errorHandler);
        }

        public void GetMenuOrders(ICollection<MenuChangeField> changed, DateTime? date, ClientPriceCategory category, AsyncErrorHandler errorHandler, Action<Dictionary<MenuOrder, ICollection<MenuOrderItem>>> resultHandler)
        {
            getMenuOrdersCaller.CallAsync(new object[] {changed, date, category}, resultHandler, errorHandler);
        }

        public void GetMenuTemplate(Guid? templateId, AsyncErrorHandler errorHandler, Action<MenuTemplate> resultHandler)
        {
            getMenuTemplateCaller.CallAsync(new object[] {templateId}, resultHandler, errorHandler);
        }

        public void GetMenuTemplates(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<MenuTemplate>> resultHandler)
        {
            getMenuTemplatesCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void IsLimitMenuRightsByDepartments(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isLimitMenuRightsByDepartmentsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateMenuTemplate(ByValue<MenuTemplate> menuTemplate, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateMenuTemplateCaller.CallAsync(new object[] {menuTemplate}, resultHandler, errorHandler);
        }

        public void SetMenuTemplateDeleted(Guid? templateId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setMenuTemplateDeletedCaller.CallAsync(new object[] {templateId, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CreateMenuChangeDocuments(Guid? templateId, ICollection<Guid> departmentIds, DateTime? beginDate, DateTime? endDate, bool deletePreviousMenu, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createMenuChangeDocumentsCaller.Call<object>(new object[] { templateId, departmentIds, beginDate, endDate, deletePreviousMenu }, asyncState, requestTimeout);
        }

        public Task<Dictionary<MenuOrder, ICollection<MenuOrderItem>>> GetMenuOrders(ICollection<MenuChangeField> changed, DateTime? date, ClientPriceCategory category, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getMenuOrdersCaller.Call<Dictionary<MenuOrder, ICollection<MenuOrderItem>>>(new object[] { changed, date, category }, asyncState, requestTimeout);
        }

        public Task<MenuTemplate> GetMenuTemplate(Guid? templateId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getMenuTemplateCaller.Call<MenuTemplate>(new object[] { templateId }, asyncState, requestTimeout);
        }

        public Task<List<MenuTemplate>> GetMenuTemplates(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getMenuTemplatesCaller.Call<List<MenuTemplate>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<bool> IsLimitMenuRightsByDepartments([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isLimitMenuRightsByDepartmentsCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateMenuTemplate(ByValue<MenuTemplate> menuTemplate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateMenuTemplateCaller.Call<object>(new object[] { menuTemplate }, asyncState, requestTimeout);
        }

        public Task<object> SetMenuTemplateDeleted(Guid? templateId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setMenuTemplateDeletedCaller.Call<object>(new object[] { templateId, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PriceListUpdateService : IPriceListUpdateService
    {
        private readonly RemoteMethodCaller getPriceListUpdateCaller;
        private readonly RemoteMethodCaller getPriceListUpdateByKnownRevisionsCaller;
        private readonly RemoteMethodCaller getPriceListUpdateFlushedCaller;

        internal PriceListUpdateService()
        {

            getPriceListUpdateCaller = new RemoteMethodCaller("priceLists", "getPriceListUpdate");
            getPriceListUpdateCaller.AddArg("knownRevision", typeof(int));
            getPriceListUpdateCaller.AddArg("knownDay", typeof(DateTime?));
            getPriceListUpdateCaller.AddArg("targetDay", typeof(DateTime?));
            getPriceListUpdateCaller.AddArg("includeNextPrices", typeof(bool));
            getPriceListUpdateCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getPriceListUpdateCaller.AddArg("products", typeof(HashSet<Product>));
            getPriceListUpdateCaller.AddArg("schedules", typeof(HashSet<Guid>));

            getPriceListUpdateByKnownRevisionsCaller = new RemoteMethodCaller("priceLists", "getPriceListUpdateByKnownRevisions");
            getPriceListUpdateByKnownRevisionsCaller.AddArg("knownRevisionsByDates", typeof(Dictionary<DateTime, int>));
            getPriceListUpdateByKnownRevisionsCaller.AddArg("knownDepartments", typeof(HashSet<DepartmentEntity>));

            getPriceListUpdateFlushedCaller = new RemoteMethodCaller("priceLists", "getPriceListUpdateFlushed");
            getPriceListUpdateFlushedCaller.AddArg("knownRevision", typeof(int));
            getPriceListUpdateFlushedCaller.AddArg("knownDay", typeof(DateTime?));
            getPriceListUpdateFlushedCaller.AddArg("targetDay", typeof(DateTime?));
            getPriceListUpdateFlushedCaller.AddArg("includeNextPrices", typeof(bool));
            getPriceListUpdateFlushedCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getPriceListUpdateFlushedCaller.AddArg("products", typeof(HashSet<Product>));
            getPriceListUpdateFlushedCaller.AddArg("schedules", typeof(HashSet<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<PriceListUpdateDto> GetPriceListUpdate(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules)
        {
            return getPriceListUpdateCaller.CreateCall<PriceListUpdateDto>(new object[] { knownRevision, knownDay, targetDay, includeNextPrices, departments, products, schedules });
        }

        public IServiceMethodCall<List<PriceListUpdateDto>> GetPriceListUpdateByKnownRevisions(Dictionary<DateTime, int> knownRevisionsByDates, HashSet<DepartmentEntity> knownDepartments)
        {
            return getPriceListUpdateByKnownRevisionsCaller.CreateCall<List<PriceListUpdateDto>>(new object[] { knownRevisionsByDates, knownDepartments });
        }

        public IServiceMethodCall<PriceListUpdateDto> GetPriceListUpdateFlushed(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules)
        {
            return getPriceListUpdateFlushedCaller.CreateCall<PriceListUpdateDto>(new object[] { knownRevision, knownDay, targetDay, includeNextPrices, departments, products, schedules });
        }

        #endregion

        #region asynchronous version
        public void GetPriceListUpdate(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, AsyncErrorHandler errorHandler, Action<PriceListUpdateDto> resultHandler)
        {
            getPriceListUpdateCaller.CallAsync(new object[] {knownRevision, knownDay, targetDay, includeNextPrices, departments, products, schedules}, resultHandler, errorHandler);
        }

        public void GetPriceListUpdateByKnownRevisions(Dictionary<DateTime, int> knownRevisionsByDates, HashSet<DepartmentEntity> knownDepartments, AsyncErrorHandler errorHandler, Action<List<PriceListUpdateDto>> resultHandler)
        {
            getPriceListUpdateByKnownRevisionsCaller.CallAsync(new object[] {knownRevisionsByDates, knownDepartments}, resultHandler, errorHandler);
        }

        public void GetPriceListUpdateFlushed(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, AsyncErrorHandler errorHandler, Action<PriceListUpdateDto> resultHandler)
        {
            getPriceListUpdateFlushedCaller.CallAsync(new object[] {knownRevision, knownDay, targetDay, includeNextPrices, departments, products, schedules}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<PriceListUpdateDto> GetPriceListUpdate(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPriceListUpdateCaller.Call<PriceListUpdateDto>(new object[] { knownRevision, knownDay, targetDay, includeNextPrices, departments, products, schedules }, asyncState, requestTimeout);
        }

        public Task<List<PriceListUpdateDto>> GetPriceListUpdateByKnownRevisions(Dictionary<DateTime, int> knownRevisionsByDates, HashSet<DepartmentEntity> knownDepartments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPriceListUpdateByKnownRevisionsCaller.Call<List<PriceListUpdateDto>>(new object[] { knownRevisionsByDates, knownDepartments }, asyncState, requestTimeout);
        }

        public Task<PriceListUpdateDto> GetPriceListUpdateFlushed(int knownRevision, DateTime? knownDay, DateTime? targetDay, bool includeNextPrices, HashSet<DepartmentEntity> departments, HashSet<Product> products, HashSet<Guid> schedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPriceListUpdateFlushedCaller.Call<PriceListUpdateDto>(new object[] { knownRevision, knownDay, targetDay, includeNextPrices, departments, products, schedules }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SynchroEntityService : ISynchroEntityService
    {
        private readonly RemoteMethodCaller createSynchroEntityCaller;

        internal SynchroEntityService()
        {

            createSynchroEntityCaller = new RemoteMethodCaller("synchroEntity", "createSynchroEntity");
            createSynchroEntityCaller.AddArg("synchroEntity", typeof(ByValue<SynchroEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<SynchroEntity> CreateSynchroEntity(ByValue<SynchroEntity> synchroEntity)
        {
            return createSynchroEntityCaller.CreateCall<SynchroEntity>(new object[] { synchroEntity });
        }

        #endregion

        #region asynchronous version
        public void CreateSynchroEntity(ByValue<SynchroEntity> synchroEntity, AsyncErrorHandler errorHandler, Action<SynchroEntity> resultHandler)
        {
            createSynchroEntityCaller.CallAsync(new object[] {synchroEntity}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<SynchroEntity> CreateSynchroEntity(ByValue<SynchroEntity> synchroEntity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createSynchroEntityCaller.Call<SynchroEntity>(new object[] { synchroEntity }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ConsolidatedOrderService : IConsolidatedOrderService
    {
        private readonly RemoteMethodCaller getConsolidatedOrderLinkedDocumentsIdsCaller;
        private readonly RemoteMethodCaller saveConsolidatedOrderDocumentCaller;
        private readonly RemoteMethodCaller selectConsolidatedOrderCaller;
        private readonly RemoteMethodCaller selectConsolidatedOrderFieldsCaller;
        private readonly RemoteMethodCaller selectIntegratedOrdersCaller;

        internal ConsolidatedOrderService()
        {

            getConsolidatedOrderLinkedDocumentsIdsCaller = new RemoteMethodCaller("consolidatedOrder", "getConsolidatedOrderLinkedDocumentsIds");
            getConsolidatedOrderLinkedDocumentsIdsCaller.AddArg("date", typeof(DateTime?));
            getConsolidatedOrderLinkedDocumentsIdsCaller.AddArg("departmentTo", typeof(DepartmentEntity));
            getConsolidatedOrderLinkedDocumentsIdsCaller.AddArg("orderBlankId", typeof(Guid?));
            getConsolidatedOrderLinkedDocumentsIdsCaller.AddArg("includeDeleted", typeof(bool));
            getConsolidatedOrderLinkedDocumentsIdsCaller.AddArg("processedOnly", typeof(bool));

            saveConsolidatedOrderDocumentCaller = new RemoteMethodCaller("consolidatedOrder", "saveConsolidatedOrderDocument");
            saveConsolidatedOrderDocumentCaller.AddArg("document", typeof(ConsolidatedOrderDocument));
            saveConsolidatedOrderDocumentCaller.AddArg("deleteOnly", typeof(bool));

            selectConsolidatedOrderCaller = new RemoteMethodCaller("consolidatedOrder", "selectConsolidatedOrder");
            selectConsolidatedOrderCaller.AddArg("date", typeof(DateTime?));
            selectConsolidatedOrderCaller.AddArg("departmentTo", typeof(DepartmentEntity));

            selectConsolidatedOrderFieldsCaller = new RemoteMethodCaller("consolidatedOrder", "selectConsolidatedOrderFields");
            selectConsolidatedOrderFieldsCaller.AddArg("date", typeof(DateTime?));
            selectConsolidatedOrderFieldsCaller.AddArg("departmentTo", typeof(DepartmentEntity));
            selectConsolidatedOrderFieldsCaller.AddArg("orderBlankId", typeof(Guid?));

            selectIntegratedOrdersCaller = new RemoteMethodCaller("consolidatedOrder", "selectIntegratedOrders");
            selectIntegratedOrdersCaller.AddArg("dateFrom", typeof(DateTime?));
            selectIntegratedOrdersCaller.AddArg("dateTo", typeof(DateTime?));
            selectIntegratedOrdersCaller.AddArg("dateSettings", typeof(BusinessDateSettings));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<DocumentType, List<Guid>>> GetConsolidatedOrderLinkedDocumentsIds(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, bool includeDeleted, bool processedOnly)
        {
            return getConsolidatedOrderLinkedDocumentsIdsCaller.CreateCall<Dictionary<DocumentType, List<Guid>>>(new object[] { date, departmentTo, orderBlankId, includeDeleted, processedOnly });
        }

        public IServiceMethodCall<object> SaveConsolidatedOrderDocument(ConsolidatedOrderDocument document, bool deleteOnly)
        {
            return saveConsolidatedOrderDocumentCaller.CreateCall<object>(new object[] { document, deleteOnly });
        }

        public IServiceMethodCall<ConsolidatedOrderDocument> SelectConsolidatedOrder(DateTime? date, DepartmentEntity departmentTo)
        {
            return selectConsolidatedOrderCaller.CreateCall<ConsolidatedOrderDocument>(new object[] { date, departmentTo });
        }

        public IServiceMethodCall<List<ConsolidatedOrderField>> SelectConsolidatedOrderFields(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId)
        {
            return selectConsolidatedOrderFieldsCaller.CreateCall<List<ConsolidatedOrderField>>(new object[] { date, departmentTo, orderBlankId });
        }

        public IServiceMethodCall<List<IntegratedProductionOrder>> SelectIntegratedOrders(DateTime? dateFrom, DateTime? dateTo, BusinessDateSettings dateSettings)
        {
            return selectIntegratedOrdersCaller.CreateCall<List<IntegratedProductionOrder>>(new object[] { dateFrom, dateTo, dateSettings });
        }

        #endregion

        #region asynchronous version
        public void GetConsolidatedOrderLinkedDocumentsIds(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, bool includeDeleted, bool processedOnly, AsyncErrorHandler errorHandler, Action<Dictionary<DocumentType, List<Guid>>> resultHandler)
        {
            getConsolidatedOrderLinkedDocumentsIdsCaller.CallAsync(new object[] {date, departmentTo, orderBlankId, includeDeleted, processedOnly}, resultHandler, errorHandler);
        }

        public void SaveConsolidatedOrderDocument(ConsolidatedOrderDocument document, bool deleteOnly, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveConsolidatedOrderDocumentCaller.CallAsync(new object[] {document, deleteOnly}, resultHandler, errorHandler);
        }

        public void SelectConsolidatedOrder(DateTime? date, DepartmentEntity departmentTo, AsyncErrorHandler errorHandler, Action<ConsolidatedOrderDocument> resultHandler)
        {
            selectConsolidatedOrderCaller.CallAsync(new object[] {date, departmentTo}, resultHandler, errorHandler);
        }

        public void SelectConsolidatedOrderFields(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, AsyncErrorHandler errorHandler, Action<List<ConsolidatedOrderField>> resultHandler)
        {
            selectConsolidatedOrderFieldsCaller.CallAsync(new object[] {date, departmentTo, orderBlankId}, resultHandler, errorHandler);
        }

        public void SelectIntegratedOrders(DateTime? dateFrom, DateTime? dateTo, BusinessDateSettings dateSettings, AsyncErrorHandler errorHandler, Action<List<IntegratedProductionOrder>> resultHandler)
        {
            selectIntegratedOrdersCaller.CallAsync(new object[] {dateFrom, dateTo, dateSettings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<DocumentType, List<Guid>>> GetConsolidatedOrderLinkedDocumentsIds(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, bool includeDeleted, bool processedOnly, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getConsolidatedOrderLinkedDocumentsIdsCaller.Call<Dictionary<DocumentType, List<Guid>>>(new object[] { date, departmentTo, orderBlankId, includeDeleted, processedOnly }, asyncState, requestTimeout);
        }

        public Task<object> SaveConsolidatedOrderDocument(ConsolidatedOrderDocument document, bool deleteOnly, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveConsolidatedOrderDocumentCaller.Call<object>(new object[] { document, deleteOnly }, asyncState, requestTimeout);
        }

        public Task<ConsolidatedOrderDocument> SelectConsolidatedOrder(DateTime? date, DepartmentEntity departmentTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectConsolidatedOrderCaller.Call<ConsolidatedOrderDocument>(new object[] { date, departmentTo }, asyncState, requestTimeout);
        }

        public Task<List<ConsolidatedOrderField>> SelectConsolidatedOrderFields(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectConsolidatedOrderFieldsCaller.Call<List<ConsolidatedOrderField>>(new object[] { date, departmentTo, orderBlankId }, asyncState, requestTimeout);
        }

        public Task<List<IntegratedProductionOrder>> SelectIntegratedOrders(DateTime? dateFrom, DateTime? dateTo, BusinessDateSettings dateSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return selectIntegratedOrdersCaller.Call<List<IntegratedProductionOrder>>(new object[] { dateFrom, dateTo, dateSettings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PreparedRegisterService : IPreparedRegisterService
    {
        private readonly RemoteMethodCaller createInternalTransferCaller;
        private readonly RemoteMethodCaller createPreparedRegisterDocumentCaller;
        private readonly RemoteMethodCaller createPreparedRegisterForDocumentsCaller;

        internal PreparedRegisterService()
        {

            createInternalTransferCaller = new RemoteMethodCaller("preparedRegister", "createInternalTransfer");
            createInternalTransferCaller.AddArg("preparedRegisterId", typeof(Guid?));
            createInternalTransferCaller.AddArg("itemsIds", typeof(ICollection<Guid>));

            createPreparedRegisterDocumentCaller = new RemoteMethodCaller("preparedRegister", "createPreparedRegisterDocument");
            createPreparedRegisterDocumentCaller.AddArg("date", typeof(DateTime?));
            createPreparedRegisterDocumentCaller.AddArg("departmentTo", typeof(DepartmentEntity));
            createPreparedRegisterDocumentCaller.AddArg("incomingMap", typeof(Dictionary<Product, decimal>));

            createPreparedRegisterForDocumentsCaller = new RemoteMethodCaller("preparedRegister", "createPreparedRegisterForDocuments");
            createPreparedRegisterForDocumentsCaller.AddArg("documentIds", typeof(ICollection<Guid>));
            createPreparedRegisterForDocumentsCaller.AddArg("date", typeof(DateTime?));
        }

        #region Synchronous versions
        public IServiceMethodCall<InternalTransfer> CreateInternalTransfer(Guid? preparedRegisterId, ICollection<Guid> itemsIds)
        {
            return createInternalTransferCaller.CreateCall<InternalTransfer>(new object[] { preparedRegisterId, itemsIds });
        }

        public IServiceMethodCall<PreparedRegisterDocument> CreatePreparedRegisterDocument(DateTime? date, DepartmentEntity departmentTo, Dictionary<Product, decimal> incomingMap)
        {
            return createPreparedRegisterDocumentCaller.CreateCall<PreparedRegisterDocument>(new object[] { date, departmentTo, incomingMap });
        }

        public IServiceMethodCall<ICollection<PreparedRegisterDocument>> CreatePreparedRegisterForDocuments(ICollection<Guid> documentIds, DateTime? date)
        {
            return createPreparedRegisterForDocumentsCaller.CreateCall<ICollection<PreparedRegisterDocument>>(new object[] { documentIds, date });
        }

        #endregion

        #region asynchronous version
        public void CreateInternalTransfer(Guid? preparedRegisterId, ICollection<Guid> itemsIds, AsyncErrorHandler errorHandler, Action<InternalTransfer> resultHandler)
        {
            createInternalTransferCaller.CallAsync(new object[] {preparedRegisterId, itemsIds}, resultHandler, errorHandler);
        }

        public void CreatePreparedRegisterDocument(DateTime? date, DepartmentEntity departmentTo, Dictionary<Product, decimal> incomingMap, AsyncErrorHandler errorHandler, Action<PreparedRegisterDocument> resultHandler)
        {
            createPreparedRegisterDocumentCaller.CallAsync(new object[] {date, departmentTo, incomingMap}, resultHandler, errorHandler);
        }

        public void CreatePreparedRegisterForDocuments(ICollection<Guid> documentIds, DateTime? date, AsyncErrorHandler errorHandler, Action<ICollection<PreparedRegisterDocument>> resultHandler)
        {
            createPreparedRegisterForDocumentsCaller.CallAsync(new object[] {documentIds, date}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<InternalTransfer> CreateInternalTransfer(Guid? preparedRegisterId, ICollection<Guid> itemsIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createInternalTransferCaller.Call<InternalTransfer>(new object[] { preparedRegisterId, itemsIds }, asyncState, requestTimeout);
        }

        public Task<PreparedRegisterDocument> CreatePreparedRegisterDocument(DateTime? date, DepartmentEntity departmentTo, Dictionary<Product, decimal> incomingMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createPreparedRegisterDocumentCaller.Call<PreparedRegisterDocument>(new object[] { date, departmentTo, incomingMap }, asyncState, requestTimeout);
        }

        public Task<ICollection<PreparedRegisterDocument>> CreatePreparedRegisterForDocuments(ICollection<Guid> documentIds, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createPreparedRegisterForDocumentsCaller.Call<ICollection<PreparedRegisterDocument>>(new object[] { documentIds, date }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ProductionOrderBlankService : IProductionOrderBlankService
    {
        private readonly RemoteMethodCaller createProductionOrderBlankCaller;
        private readonly RemoteMethodCaller deleteProductionOrderBlankCaller;
        private readonly RemoteMethodCaller updateProductionOrderBlankCaller;

        internal ProductionOrderBlankService()
        {

            createProductionOrderBlankCaller = new RemoteMethodCaller("productionOrderBlank", "createProductionOrderBlank");
            createProductionOrderBlankCaller.AddArg("productionOrderBlank", typeof(ByValue<ProductionOrderBlank>));

            deleteProductionOrderBlankCaller = new RemoteMethodCaller("productionOrderBlank", "deleteProductionOrderBlank");
            deleteProductionOrderBlankCaller.AddArg("productionOrderBlank", typeof(ProductionOrderBlank));

            updateProductionOrderBlankCaller = new RemoteMethodCaller("productionOrderBlank", "updateProductionOrderBlank");
            updateProductionOrderBlankCaller.AddArg("productionOrderBlank", typeof(ByValue<ProductionOrderBlank>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ProductionOrderBlank> CreateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank)
        {
            return createProductionOrderBlankCaller.CreateCall<ProductionOrderBlank>(new object[] { productionOrderBlank });
        }

        public IServiceMethodCall<object> DeleteProductionOrderBlank(ProductionOrderBlank productionOrderBlank)
        {
            return deleteProductionOrderBlankCaller.CreateCall<object>(new object[] { productionOrderBlank });
        }

        public IServiceMethodCall<object> UpdateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank)
        {
            return updateProductionOrderBlankCaller.CreateCall<object>(new object[] { productionOrderBlank });
        }

        #endregion

        #region asynchronous version
        public void CreateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, AsyncErrorHandler errorHandler, Action<ProductionOrderBlank> resultHandler)
        {
            createProductionOrderBlankCaller.CallAsync(new object[] {productionOrderBlank}, resultHandler, errorHandler);
        }

        public void DeleteProductionOrderBlank(ProductionOrderBlank productionOrderBlank, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteProductionOrderBlankCaller.CallAsync(new object[] {productionOrderBlank}, resultHandler, errorHandler);
        }

        public void UpdateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateProductionOrderBlankCaller.CallAsync(new object[] {productionOrderBlank}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ProductionOrderBlank> CreateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createProductionOrderBlankCaller.Call<ProductionOrderBlank>(new object[] { productionOrderBlank }, asyncState, requestTimeout);
        }

        public Task<object> DeleteProductionOrderBlank(ProductionOrderBlank productionOrderBlank, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteProductionOrderBlankCaller.Call<object>(new object[] { productionOrderBlank }, asyncState, requestTimeout);
        }

        public Task<object> UpdateProductionOrderBlank(ByValue<ProductionOrderBlank> productionOrderBlank, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateProductionOrderBlankCaller.Call<object>(new object[] { productionOrderBlank }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ProductionService : IProductionService
    {
        private readonly RemoteMethodCaller createDocumentsByProductionOrderCaller;
        private readonly RemoteMethodCaller createProductionDocumentByListCaller;
        private readonly RemoteMethodCaller getGoodsListCaller;
        private readonly RemoteMethodCaller getGoodsListConsideringWriteoffStrategyCaller;
        private readonly RemoteMethodCaller getLinkedDocumentsByProductionOrdersCaller;
        private readonly RemoteMethodCaller getStationCardListCaller;
        private readonly RemoteMethodCaller shipProductionCaller;

        internal ProductionService()
        {

            createDocumentsByProductionOrderCaller = new RemoteMethodCaller("production", "createDocumentsByProductionOrder");
            createDocumentsByProductionOrderCaller.AddArg("documentId", typeof(Guid?));

            createProductionDocumentByListCaller = new RemoteMethodCaller("production", "createProductionDocumentByList");
            createProductionDocumentByListCaller.AddArg("consolidatedOrderlist", typeof(List<ConsolidatedOrder>));

            getGoodsListCaller = new RemoteMethodCaller("production", "getGoodsList");
            getGoodsListCaller.AddArg("date", typeof(DateTime?));
            getGoodsListCaller.AddArg("orderMap", typeof(Dictionary<Product, decimal>));
            getGoodsListCaller.AddArg("store", typeof(Store));

            getGoodsListConsideringWriteoffStrategyCaller = new RemoteMethodCaller("production", "getGoodsListConsideringWriteoffStrategy");
            getGoodsListConsideringWriteoffStrategyCaller.AddArg("date", typeof(DateTime?));
            getGoodsListConsideringWriteoffStrategyCaller.AddArg("orderMap", typeof(Dictionary<Product, decimal>));
            getGoodsListConsideringWriteoffStrategyCaller.AddArg("store", typeof(Store));

            getLinkedDocumentsByProductionOrdersCaller = new RemoteMethodCaller("production", "getLinkedDocumentsByProductionOrders");
            getLinkedDocumentsByProductionOrdersCaller.AddArg("documentIds", typeof(List<Guid>));

            getStationCardListCaller = new RemoteMethodCaller("production", "getStationCardList");
            getStationCardListCaller.AddArg("date", typeof(DateTime?));
            getStationCardListCaller.AddArg("orderMap", typeof(List<Pair>));

            shipProductionCaller = new RemoteMethodCaller("production", "shipProduction");
            shipProductionCaller.AddArg("date", typeof(DateTime?));
            shipProductionCaller.AddArg("departmentTo", typeof(DepartmentEntity));
            shipProductionCaller.AddArg("orderBlankId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<List<AbstractDocument>> CreateDocumentsByProductionOrder(Guid? documentId)
        {
            return createDocumentsByProductionOrderCaller.CreateCall<List<AbstractDocument>>(new object[] { documentId });
        }

        public IServiceMethodCall<List<ProductionDocument>> CreateProductionDocumentByList(List<ConsolidatedOrder> consolidatedOrderlist)
        {
            return createProductionDocumentByListCaller.CreateCall<List<ProductionDocument>>(new object[] { consolidatedOrderlist });
        }

        public IServiceMethodCall<List<GoodRecord>> GetGoodsList(DateTime? date, Dictionary<Product, decimal> orderMap, Store store)
        {
            return getGoodsListCaller.CreateCall<List<GoodRecord>>(new object[] { date, orderMap, store });
        }

        public IServiceMethodCall<List<GoodRecord>> GetGoodsListConsideringWriteoffStrategy(DateTime? date, Dictionary<Product, decimal> orderMap, Store store)
        {
            return getGoodsListConsideringWriteoffStrategyCaller.CreateCall<List<GoodRecord>>(new object[] { date, orderMap, store });
        }

        public IServiceMethodCall<List<AbstractDocument>> GetLinkedDocumentsByProductionOrders(List<Guid> documentIds)
        {
            return getLinkedDocumentsByProductionOrdersCaller.CreateCall<List<AbstractDocument>>(new object[] { documentIds });
        }

        public IServiceMethodCall<List<StationChartExtended>> GetStationCardList(DateTime? date, List<Pair> orderMap)
        {
            return getStationCardListCaller.CreateCall<List<StationChartExtended>>(new object[] { date, orderMap });
        }

        public IServiceMethodCall<object> ShipProduction(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId)
        {
            return shipProductionCaller.CreateCall<object>(new object[] { date, departmentTo, orderBlankId });
        }

        #endregion

        #region asynchronous version
        public void CreateDocumentsByProductionOrder(Guid? documentId, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler)
        {
            createDocumentsByProductionOrderCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        public void CreateProductionDocumentByList(List<ConsolidatedOrder> consolidatedOrderlist, AsyncErrorHandler errorHandler, Action<List<ProductionDocument>> resultHandler)
        {
            createProductionDocumentByListCaller.CallAsync(new object[] {consolidatedOrderlist}, resultHandler, errorHandler);
        }

        public void GetGoodsList(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, AsyncErrorHandler errorHandler, Action<List<GoodRecord>> resultHandler)
        {
            getGoodsListCaller.CallAsync(new object[] {date, orderMap, store}, resultHandler, errorHandler);
        }

        public void GetGoodsListConsideringWriteoffStrategy(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, AsyncErrorHandler errorHandler, Action<List<GoodRecord>> resultHandler)
        {
            getGoodsListConsideringWriteoffStrategyCaller.CallAsync(new object[] {date, orderMap, store}, resultHandler, errorHandler);
        }

        public void GetLinkedDocumentsByProductionOrders(List<Guid> documentIds, AsyncErrorHandler errorHandler, Action<List<AbstractDocument>> resultHandler)
        {
            getLinkedDocumentsByProductionOrdersCaller.CallAsync(new object[] {documentIds}, resultHandler, errorHandler);
        }

        public void GetStationCardList(DateTime? date, List<Pair> orderMap, AsyncErrorHandler errorHandler, Action<List<StationChartExtended>> resultHandler)
        {
            getStationCardListCaller.CallAsync(new object[] {date, orderMap}, resultHandler, errorHandler);
        }

        public void ShipProduction(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            shipProductionCaller.CallAsync(new object[] {date, departmentTo, orderBlankId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<List<AbstractDocument>> CreateDocumentsByProductionOrder(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createDocumentsByProductionOrderCaller.Call<List<AbstractDocument>>(new object[] { documentId }, asyncState, requestTimeout);
        }

        public Task<List<ProductionDocument>> CreateProductionDocumentByList(List<ConsolidatedOrder> consolidatedOrderlist, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createProductionDocumentByListCaller.Call<List<ProductionDocument>>(new object[] { consolidatedOrderlist }, asyncState, requestTimeout);
        }

        public Task<List<GoodRecord>> GetGoodsList(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getGoodsListCaller.Call<List<GoodRecord>>(new object[] { date, orderMap, store }, asyncState, requestTimeout);
        }

        public Task<List<GoodRecord>> GetGoodsListConsideringWriteoffStrategy(DateTime? date, Dictionary<Product, decimal> orderMap, Store store, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getGoodsListConsideringWriteoffStrategyCaller.Call<List<GoodRecord>>(new object[] { date, orderMap, store }, asyncState, requestTimeout);
        }

        public Task<List<AbstractDocument>> GetLinkedDocumentsByProductionOrders(List<Guid> documentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLinkedDocumentsByProductionOrdersCaller.Call<List<AbstractDocument>>(new object[] { documentIds }, asyncState, requestTimeout);
        }

        public Task<List<StationChartExtended>> GetStationCardList(DateTime? date, List<Pair> orderMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStationCardListCaller.Call<List<StationChartExtended>>(new object[] { date, orderMap }, asyncState, requestTimeout);
        }

        public Task<object> ShipProduction(DateTime? date, DepartmentEntity departmentTo, Guid? orderBlankId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return shipProductionCaller.Call<object>(new object[] { date, departmentTo, orderBlankId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class AgentService : IAgentService
    {
        private readonly RemoteMethodCaller addDeviceCaller;
        private readonly RemoteMethodCaller attachDeviceCaller;
        private readonly RemoteMethodCaller createAgentAndTerminalCaller;
        private readonly RemoteMethodCaller createOrUpdateTerminalTokenCaller;
        private readonly RemoteMethodCaller deleteCashRegisterTokenCaller;
        private readonly RemoteMethodCaller executeDeviceTaskCaller;
        private readonly RemoteMethodCaller executeDeviceTaskWithTimeoutCaller;
        private readonly RemoteMethodCaller executeDeviceTestCaller;
        private readonly RemoteMethodCaller executePowerDeviceTestCaller;
        private readonly RemoteMethodCaller getAgentInfoCaller;
        private readonly RemoteMethodCaller getFontNamesForPrintingCaller;
        private readonly RemoteMethodCaller getPrinterListCaller;
        private readonly RemoteMethodCaller getTokensCaller;
        private readonly RemoteMethodCaller getVideoDeviceListCaller;
        private readonly RemoteMethodCaller processRequestCaller;
        private readonly RemoteMethodCaller refreshCashRegisterTokenCaller;
        private readonly RemoteMethodCaller removeDeviceIfRequiredCaller;
        private readonly RemoteMethodCaller removeDevicesCaller;
        private readonly RemoteMethodCaller revokeTerminalTokensCaller;
        private readonly RemoteMethodCaller setTerminalsAccessAllowedCaller;
        private readonly RemoteMethodCaller setupDeviceCaller;
        private readonly RemoteMethodCaller startDeviceAgentCaller;
        private readonly RemoteMethodCaller stopDeviceAgentCaller;

        internal AgentService()
        {

            addDeviceCaller = new RemoteMethodCaller("agent", "addDevice");
            addDeviceCaller.AddArg("device", typeof(ByValue<AgentDevice>));

            attachDeviceCaller = new RemoteMethodCaller("agent", "attachDevice");
            attachDeviceCaller.AddArg("agentId", typeof(Guid?));
            attachDeviceCaller.AddArg("deviceInfo", typeof(AgentDeviceInfo));

            createAgentAndTerminalCaller = new RemoteMethodCaller("agent", "createAgentAndTerminal");
            createAgentAndTerminalCaller.AddArg("agentId", typeof(Guid?));
            createAgentAndTerminalCaller.AddArg("agentName", typeof(string));
            createAgentAndTerminalCaller.AddArg("terminalId", typeof(Guid?));
            createAgentAndTerminalCaller.AddArg("terminalName", typeof(string));
            createAgentAndTerminalCaller.AddArg("terminalDescription", typeof(string));

            createOrUpdateTerminalTokenCaller = new RemoteMethodCaller("agent", "createOrUpdateTerminalToken");
            createOrUpdateTerminalTokenCaller.AddArg("terminal", typeof(Terminal));
            createOrUpdateTerminalTokenCaller.AddArg("connectionCode", typeof(string));

            deleteCashRegisterTokenCaller = new RemoteMethodCaller("agent", "deleteCashRegisterToken");
            deleteCashRegisterTokenCaller.AddArg("cashRegister", typeof(CashRegister));

            executeDeviceTaskCaller = new RemoteMethodCaller("agent", "executeDeviceTask");
            executeDeviceTaskCaller.AddArg("agentId", typeof(Guid?));
            executeDeviceTaskCaller.AddArg("task", typeof(AgentTask));

            executeDeviceTaskWithTimeoutCaller = new RemoteMethodCaller("agent", "executeDeviceTaskWithTimeout");
            executeDeviceTaskWithTimeoutCaller.AddArg("agentId", typeof(Guid?));
            executeDeviceTaskWithTimeoutCaller.AddArg("task", typeof(AgentTask));
            executeDeviceTaskWithTimeoutCaller.AddArg("timeoutMillis", typeof(int));

            executeDeviceTestCaller = new RemoteMethodCaller("agent", "executeDeviceTest");
            executeDeviceTestCaller.AddArg("deviceId", typeof(Guid?));

            executePowerDeviceTestCaller = new RemoteMethodCaller("agent", "executePowerDeviceTest");
            executePowerDeviceTestCaller.AddArg("channel", typeof(int));
            executePowerDeviceTestCaller.AddArg("enable", typeof(bool));
            executePowerDeviceTestCaller.AddArg("deviceId", typeof(Guid?));

            getAgentInfoCaller = new RemoteMethodCaller("agent", "getAgentInfo");
            getAgentInfoCaller.AddArg("agentIds", typeof(HashSet<Guid>));

            getFontNamesForPrintingCaller = new RemoteMethodCaller("agent", "getFontNamesForPrinting");
            getFontNamesForPrintingCaller.AddArg("agentId", typeof(Guid?));

            getPrinterListCaller = new RemoteMethodCaller("agent", "getPrinterList");
            getPrinterListCaller.AddArg("agentId", typeof(Guid?));

            getTokensCaller = new RemoteMethodCaller("agent", "getTokens");
            getTokensCaller.AddArg("cashRegisters", typeof(ICollection<CashRegister>));

            getVideoDeviceListCaller = new RemoteMethodCaller("agent", "getVideoDeviceList");
            getVideoDeviceListCaller.AddArg("agentId", typeof(Guid?));

            processRequestCaller = new RemoteMethodCaller("agent", "processRequest");
            processRequestCaller.AddArg("request", typeof(AgentRequest));

            refreshCashRegisterTokenCaller = new RemoteMethodCaller("agent", "refreshCashRegisterToken");
            refreshCashRegisterTokenCaller.AddArg("cashRegister", typeof(CashRegister));

            removeDeviceIfRequiredCaller = new RemoteMethodCaller("agent", "removeDeviceIfRequired");
            removeDeviceIfRequiredCaller.AddArg("deviceId", typeof(Guid?));

            removeDevicesCaller = new RemoteMethodCaller("agent", "removeDevices");
            removeDevicesCaller.AddArg("devices", typeof(HashSet<Guid>));

            revokeTerminalTokensCaller = new RemoteMethodCaller("agent", "revokeTerminalTokens");
            revokeTerminalTokensCaller.AddArg("terminal", typeof(ICollection<Terminal>));

            setTerminalsAccessAllowedCaller = new RemoteMethodCaller("agent", "setTerminalsAccessAllowed");
            setTerminalsAccessAllowedCaller.AddArg("terminal", typeof(ICollection<Terminal>));
            setTerminalsAccessAllowedCaller.AddArg("accessAllowed", typeof(bool));

            setupDeviceCaller = new RemoteMethodCaller("agent", "setupDevice");
            setupDeviceCaller.AddArg("device", typeof(ByValue<AgentDevice>));

            startDeviceAgentCaller = new RemoteMethodCaller("agent", "startDeviceAgent");
            startDeviceAgentCaller.AddArg("agentId", typeof(Guid?));
            startDeviceAgentCaller.AddArg("deviceId", typeof(Guid?));

            stopDeviceAgentCaller = new RemoteMethodCaller("agent", "stopDeviceAgent");
            stopDeviceAgentCaller.AddArg("agentId", typeof(Guid?));
            stopDeviceAgentCaller.AddArg("deviceId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddDevice(ByValue<AgentDevice> device)
        {
            return addDeviceCaller.CreateCall<object>(new object[] { device });
        }

        public IServiceMethodCall<bool> AttachDevice(Guid? agentId, AgentDeviceInfo deviceInfo)
        {
            return attachDeviceCaller.CreateCall<bool>(new object[] { agentId, deviceInfo });
        }

        public IServiceMethodCall<bool> CreateAgentAndTerminal(Guid? agentId, string agentName, Guid? terminalId, string terminalName, string terminalDescription)
        {
            return createAgentAndTerminalCaller.CreateCall<bool>(new object[] { agentId, agentName, terminalId, terminalName, terminalDescription });
        }

        public IServiceMethodCall<object> CreateOrUpdateTerminalToken(Terminal terminal, string connectionCode)
        {
            return createOrUpdateTerminalTokenCaller.CreateCall<object>(new object[] { terminal, connectionCode });
        }

        public IServiceMethodCall<object> DeleteCashRegisterToken(CashRegister cashRegister)
        {
            return deleteCashRegisterTokenCaller.CreateCall<object>(new object[] { cashRegister });
        }

        public IServiceMethodCall<AgentPostResult> ExecuteDeviceTask(Guid? agentId, AgentTask task)
        {
            return executeDeviceTaskCaller.CreateCall<AgentPostResult>(new object[] { agentId, task });
        }

        public IServiceMethodCall<AgentPostResult> ExecuteDeviceTaskWithTimeout(Guid? agentId, AgentTask task, int timeoutMillis)
        {
            return executeDeviceTaskWithTimeoutCaller.CreateCall<AgentPostResult>(new object[] { agentId, task, timeoutMillis });
        }

        public IServiceMethodCall<AgentPostResult> ExecuteDeviceTest(Guid? deviceId)
        {
            return executeDeviceTestCaller.CreateCall<AgentPostResult>(new object[] { deviceId });
        }

        public IServiceMethodCall<AgentPostResult> ExecutePowerDeviceTest(int channel, bool enable, Guid? deviceId)
        {
            return executePowerDeviceTestCaller.CreateCall<AgentPostResult>(new object[] { channel, enable, deviceId });
        }

        public IServiceMethodCall<ICollection<AgentInfo>> GetAgentInfo(HashSet<Guid> agentIds)
        {
            return getAgentInfoCaller.CreateCall<ICollection<AgentInfo>>(new object[] { agentIds });
        }

        public IServiceMethodCall<AgentPostResult> GetFontNamesForPrinting(Guid? agentId)
        {
            return getFontNamesForPrintingCaller.CreateCall<AgentPostResult>(new object[] { agentId });
        }

        public IServiceMethodCall<AgentPostResult> GetPrinterList(Guid? agentId)
        {
            return getPrinterListCaller.CreateCall<AgentPostResult>(new object[] { agentId });
        }

        public IServiceMethodCall<Dictionary<CashRegister, Pair>> GetTokens(ICollection<CashRegister> cashRegisters)
        {
            return getTokensCaller.CreateCall<Dictionary<CashRegister, Pair>>(new object[] { cashRegisters });
        }

        public IServiceMethodCall<AgentPostResult> GetVideoDeviceList(Guid? agentId)
        {
            return getVideoDeviceListCaller.CreateCall<AgentPostResult>(new object[] { agentId });
        }

        public IServiceMethodCall<ServerResponse> ProcessRequest(AgentRequest request)
        {
            return processRequestCaller.CreateCall<ServerResponse>(new object[] { request });
        }

        public IServiceMethodCall<Pair> RefreshCashRegisterToken(CashRegister cashRegister)
        {
            return refreshCashRegisterTokenCaller.CreateCall<Pair>(new object[] { cashRegister });
        }

        public IServiceMethodCall<bool> RemoveDeviceIfRequired(Guid? deviceId)
        {
            return removeDeviceIfRequiredCaller.CreateCall<bool>(new object[] { deviceId });
        }

        public IServiceMethodCall<Dictionary<Guid, bool>> RemoveDevices(HashSet<Guid> devices)
        {
            return removeDevicesCaller.CreateCall<Dictionary<Guid, bool>>(new object[] { devices });
        }

        public IServiceMethodCall<object> RevokeTerminalTokens(ICollection<Terminal> terminal)
        {
            return revokeTerminalTokensCaller.CreateCall<object>(new object[] { terminal });
        }

        public IServiceMethodCall<object> SetTerminalsAccessAllowed(ICollection<Terminal> terminal, bool accessAllowed)
        {
            return setTerminalsAccessAllowedCaller.CreateCall<object>(new object[] { terminal, accessAllowed });
        }

        public IServiceMethodCall<object> SetupDevice(ByValue<AgentDevice> device)
        {
            return setupDeviceCaller.CreateCall<object>(new object[] { device });
        }

        public IServiceMethodCall<AgentPostResult> StartDeviceAgent(Guid? agentId, Guid? deviceId)
        {
            return startDeviceAgentCaller.CreateCall<AgentPostResult>(new object[] { agentId, deviceId });
        }

        public IServiceMethodCall<AgentPostResult> StopDeviceAgent(Guid? agentId, Guid? deviceId)
        {
            return stopDeviceAgentCaller.CreateCall<AgentPostResult>(new object[] { agentId, deviceId });
        }

        #endregion

        #region asynchronous version
        public void AddDevice(ByValue<AgentDevice> device, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addDeviceCaller.CallAsync(new object[] {device}, resultHandler, errorHandler);
        }

        public void AttachDevice(Guid? agentId, AgentDeviceInfo deviceInfo, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            attachDeviceCaller.CallAsync(new object[] {agentId, deviceInfo}, resultHandler, errorHandler);
        }

        public void CreateAgentAndTerminal(Guid? agentId, string agentName, Guid? terminalId, string terminalName, string terminalDescription, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            createAgentAndTerminalCaller.CallAsync(new object[] {agentId, agentName, terminalId, terminalName, terminalDescription}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateTerminalToken(Terminal terminal, string connectionCode, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateTerminalTokenCaller.CallAsync(new object[] {terminal, connectionCode}, resultHandler, errorHandler);
        }

        public void DeleteCashRegisterToken(CashRegister cashRegister, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteCashRegisterTokenCaller.CallAsync(new object[] {cashRegister}, resultHandler, errorHandler);
        }

        public void ExecuteDeviceTask(Guid? agentId, AgentTask task, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            executeDeviceTaskCaller.CallAsync(new object[] {agentId, task}, resultHandler, errorHandler);
        }

        public void ExecuteDeviceTaskWithTimeout(Guid? agentId, AgentTask task, int timeoutMillis, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            executeDeviceTaskWithTimeoutCaller.CallAsync(new object[] {agentId, task, timeoutMillis}, resultHandler, errorHandler);
        }

        public void ExecuteDeviceTest(Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            executeDeviceTestCaller.CallAsync(new object[] {deviceId}, resultHandler, errorHandler);
        }

        public void ExecutePowerDeviceTest(int channel, bool enable, Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            executePowerDeviceTestCaller.CallAsync(new object[] {channel, enable, deviceId}, resultHandler, errorHandler);
        }

        public void GetAgentInfo(HashSet<Guid> agentIds, AsyncErrorHandler errorHandler, Action<ICollection<AgentInfo>> resultHandler)
        {
            getAgentInfoCaller.CallAsync(new object[] {agentIds}, resultHandler, errorHandler);
        }

        public void GetFontNamesForPrinting(Guid? agentId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            getFontNamesForPrintingCaller.CallAsync(new object[] {agentId}, resultHandler, errorHandler);
        }

        public void GetPrinterList(Guid? agentId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            getPrinterListCaller.CallAsync(new object[] {agentId}, resultHandler, errorHandler);
        }

        public void GetTokens(ICollection<CashRegister> cashRegisters, AsyncErrorHandler errorHandler, Action<Dictionary<CashRegister, Pair>> resultHandler)
        {
            getTokensCaller.CallAsync(new object[] {cashRegisters}, resultHandler, errorHandler);
        }

        public void GetVideoDeviceList(Guid? agentId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            getVideoDeviceListCaller.CallAsync(new object[] {agentId}, resultHandler, errorHandler);
        }

        public void ProcessRequest(AgentRequest request, AsyncErrorHandler errorHandler, Action<ServerResponse> resultHandler)
        {
            processRequestCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        public void RefreshCashRegisterToken(CashRegister cashRegister, AsyncErrorHandler errorHandler, Action<Pair> resultHandler)
        {
            refreshCashRegisterTokenCaller.CallAsync(new object[] {cashRegister}, resultHandler, errorHandler);
        }

        public void RemoveDeviceIfRequired(Guid? deviceId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            removeDeviceIfRequiredCaller.CallAsync(new object[] {deviceId}, resultHandler, errorHandler);
        }

        public void RemoveDevices(HashSet<Guid> devices, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, bool>> resultHandler)
        {
            removeDevicesCaller.CallAsync(new object[] {devices}, resultHandler, errorHandler);
        }

        public void RevokeTerminalTokens(ICollection<Terminal> terminal, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            revokeTerminalTokensCaller.CallAsync(new object[] {terminal}, resultHandler, errorHandler);
        }

        public void SetTerminalsAccessAllowed(ICollection<Terminal> terminal, bool accessAllowed, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setTerminalsAccessAllowedCaller.CallAsync(new object[] {terminal, accessAllowed}, resultHandler, errorHandler);
        }

        public void SetupDevice(ByValue<AgentDevice> device, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setupDeviceCaller.CallAsync(new object[] {device}, resultHandler, errorHandler);
        }

        public void StartDeviceAgent(Guid? agentId, Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            startDeviceAgentCaller.CallAsync(new object[] {agentId, deviceId}, resultHandler, errorHandler);
        }

        public void StopDeviceAgent(Guid? agentId, Guid? deviceId, AsyncErrorHandler errorHandler, Action<AgentPostResult> resultHandler)
        {
            stopDeviceAgentCaller.CallAsync(new object[] {agentId, deviceId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddDevice(ByValue<AgentDevice> device, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addDeviceCaller.Call<object>(new object[] { device }, asyncState, requestTimeout);
        }

        public Task<bool> AttachDevice(Guid? agentId, AgentDeviceInfo deviceInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return attachDeviceCaller.Call<bool>(new object[] { agentId, deviceInfo }, asyncState, requestTimeout);
        }

        public Task<bool> CreateAgentAndTerminal(Guid? agentId, string agentName, Guid? terminalId, string terminalName, string terminalDescription, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createAgentAndTerminalCaller.Call<bool>(new object[] { agentId, agentName, terminalId, terminalName, terminalDescription }, asyncState, requestTimeout);
        }

        public Task<object> CreateOrUpdateTerminalToken(Terminal terminal, string connectionCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateTerminalTokenCaller.Call<object>(new object[] { terminal, connectionCode }, asyncState, requestTimeout);
        }

        public Task<object> DeleteCashRegisterToken(CashRegister cashRegister, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteCashRegisterTokenCaller.Call<object>(new object[] { cashRegister }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> ExecuteDeviceTask(Guid? agentId, AgentTask task, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return executeDeviceTaskCaller.Call<AgentPostResult>(new object[] { agentId, task }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> ExecuteDeviceTaskWithTimeout(Guid? agentId, AgentTask task, int timeoutMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return executeDeviceTaskWithTimeoutCaller.Call<AgentPostResult>(new object[] { agentId, task, timeoutMillis }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> ExecuteDeviceTest(Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return executeDeviceTestCaller.Call<AgentPostResult>(new object[] { deviceId }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> ExecutePowerDeviceTest(int channel, bool enable, Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return executePowerDeviceTestCaller.Call<AgentPostResult>(new object[] { channel, enable, deviceId }, asyncState, requestTimeout);
        }

        public Task<ICollection<AgentInfo>> GetAgentInfo(HashSet<Guid> agentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAgentInfoCaller.Call<ICollection<AgentInfo>>(new object[] { agentIds }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> GetFontNamesForPrinting(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getFontNamesForPrintingCaller.Call<AgentPostResult>(new object[] { agentId }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> GetPrinterList(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPrinterListCaller.Call<AgentPostResult>(new object[] { agentId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<CashRegister, Pair>> GetTokens(ICollection<CashRegister> cashRegisters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getTokensCaller.Call<Dictionary<CashRegister, Pair>>(new object[] { cashRegisters }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> GetVideoDeviceList(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getVideoDeviceListCaller.Call<AgentPostResult>(new object[] { agentId }, asyncState, requestTimeout);
        }

        public Task<ServerResponse> ProcessRequest(AgentRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return processRequestCaller.Call<ServerResponse>(new object[] { request }, asyncState, requestTimeout);
        }

        public Task<Pair> RefreshCashRegisterToken(CashRegister cashRegister, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return refreshCashRegisterTokenCaller.Call<Pair>(new object[] { cashRegister }, asyncState, requestTimeout);
        }

        public Task<bool> RemoveDeviceIfRequired(Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeDeviceIfRequiredCaller.Call<bool>(new object[] { deviceId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, bool>> RemoveDevices(HashSet<Guid> devices, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeDevicesCaller.Call<Dictionary<Guid, bool>>(new object[] { devices }, asyncState, requestTimeout);
        }

        public Task<object> RevokeTerminalTokens(ICollection<Terminal> terminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return revokeTerminalTokensCaller.Call<object>(new object[] { terminal }, asyncState, requestTimeout);
        }

        public Task<object> SetTerminalsAccessAllowed(ICollection<Terminal> terminal, bool accessAllowed, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setTerminalsAccessAllowedCaller.Call<object>(new object[] { terminal, accessAllowed }, asyncState, requestTimeout);
        }

        public Task<object> SetupDevice(ByValue<AgentDevice> device, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setupDeviceCaller.Call<object>(new object[] { device }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> StartDeviceAgent(Guid? agentId, Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return startDeviceAgentCaller.Call<AgentPostResult>(new object[] { agentId, deviceId }, asyncState, requestTimeout);
        }

        public Task<AgentPostResult> StopDeviceAgent(Guid? agentId, Guid? deviceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return stopDeviceAgentCaller.Call<AgentPostResult>(new object[] { agentId, deviceId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PaymentConstraintsManager : IPaymentConstraintsManager
    {
        private readonly RemoteMethodCaller setConstraintCaller;

        internal PaymentConstraintsManager()
        {

            setConstraintCaller = new RemoteMethodCaller("paymentConstraintsManager", "setConstraint");
            setConstraintCaller.AddArg("paymentType", typeof(PaymentType));
            setConstraintCaller.AddArg("discountType", typeof(DiscountType));
            setConstraintCaller.AddArg("isUnbound", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<PaymentTypeDiscountConstraint> SetConstraint(PaymentType paymentType, DiscountType discountType, bool isUnbound)
        {
            return setConstraintCaller.CreateCall<PaymentTypeDiscountConstraint>(new object[] { paymentType, discountType, isUnbound });
        }

        #endregion

        #region asynchronous version
        public void SetConstraint(PaymentType paymentType, DiscountType discountType, bool isUnbound, AsyncErrorHandler errorHandler, Action<PaymentTypeDiscountConstraint> resultHandler)
        {
            setConstraintCaller.CallAsync(new object[] {paymentType, discountType, isUnbound}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<PaymentTypeDiscountConstraint> SetConstraint(PaymentType paymentType, DiscountType discountType, bool isUnbound, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setConstraintCaller.Call<PaymentTypeDiscountConstraint>(new object[] { paymentType, discountType, isUnbound }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class RestoSetupService : IRestoSetupService
    {
        private readonly RemoteMethodCaller addGroupCaller;
        private readonly RemoteMethodCaller addRestorauntSectionCaller;
        private readonly RemoteMethodCaller clearRestoImageCaller;
        private readonly RemoteMethodCaller createAutoAdditionSettingsCaller;
        private readonly RemoteMethodCaller deleteAutoAdditionSettingsCaller;
        private readonly RemoteMethodCaller deleteGroupCaller;
        private readonly RemoteMethodCaller deleteSectionCaller;
        private readonly RemoteMethodCaller editAutoAdditionSettingsCaller;
        private readonly RemoteMethodCaller getDeliveryListUpdateCooldownSecCaller;
        private readonly RemoteMethodCaller getDepartmentIdCaller;
        private readonly RemoteMethodCaller getMajorServiceModeCaller;
        private readonly RemoteMethodCaller getRestoImageCaller;
        private readonly RemoteMethodCaller getSavedServerPropertyCaller;
        private readonly RemoteMethodCaller getServerPropertiesCaller;
        private readonly RemoteMethodCaller getServerPropertyCaller;
        private readonly RemoteMethodCaller getSettingsMetaDataCaller;
        private readonly RemoteMethodCaller isEnableManualDeliveryZonesCaller;
        private readonly RemoteMethodCaller isEnableToCreateDeliveryWithoutCustomerCaller;
        private readonly RemoteMethodCaller isEnableToSaveDeliveryWithoutTerminalCaller;
        private readonly RemoteMethodCaller refreshGroupPropertiesCaller;
        private readonly RemoteMethodCaller refreshSectionPropertiesCaller;
        private readonly RemoteMethodCaller restoreGroupCaller;
        private readonly RemoteMethodCaller restoreRestaurantSectionCaller;
        private readonly RemoteMethodCaller setCostCorrectionSettingsCaller;
        private readonly RemoteMethodCaller setRestoImageCaller;
        private readonly RemoteMethodCaller setServerPropertiesCaller;
        private readonly RemoteMethodCaller setServerPropertyCaller;
        private readonly RemoteMethodCaller swapGroupMainTerminalCaller;
        private readonly RemoteMethodCaller updateCafeSetupCaller;
        private readonly RemoteMethodCaller updateConceptionCaller;
        private readonly RemoteMethodCaller updateDeliveryAppearanceSettingsCaller;
        private readonly RemoteMethodCaller updateDeliveryConfirmationSettingsCaller;
        private readonly RemoteMethodCaller updateDeliveryRestrictionsCaller;
        private readonly RemoteMethodCaller updateDeliverySettingsCaller;
        private readonly RemoteMethodCaller updateDeliverySmsSendingSettingsCaller;
        private readonly RemoteMethodCaller updateErrorNotificationConfigurationCaller;
        private readonly RemoteMethodCaller updateFrontSessionsPropertiesCaller;
        private readonly RemoteMethodCaller updateGroupLocationCaller;
        private readonly RemoteMethodCaller updateIikoCard51SettingsCaller;
        private readonly RemoteMethodCaller updateLogisticsSettingsCaller;

        internal RestoSetupService()
        {

            addGroupCaller = new RemoteMethodCaller("restoSetup", "addGroup");
            addGroupCaller.AddArg("group", typeof(ByValue<Group>));

            addRestorauntSectionCaller = new RemoteMethodCaller("restoSetup", "addRestorauntSection");
            addRestorauntSectionCaller.AddArg("groupId", typeof(Guid?));
            addRestorauntSectionCaller.AddArg("restorauntSection", typeof(ByValue<RestaurantSection>));

            clearRestoImageCaller = new RemoteMethodCaller("restoSetup", "clearRestoImage");

            createAutoAdditionSettingsCaller = new RemoteMethodCaller("restoSetup", "createAutoAdditionSettings");
            createAutoAdditionSettingsCaller.AddArg("autoAdditionSettings", typeof(ByValue<AutoAdditionSettings>));
            createAutoAdditionSettingsCaller.AddArg("autoAdditionSettingsItem", typeof(AutoAdditionSettingsItem));

            deleteAutoAdditionSettingsCaller = new RemoteMethodCaller("restoSetup", "deleteAutoAdditionSettings");
            deleteAutoAdditionSettingsCaller.AddArg("autoAdditionSettings", typeof(ByValue<AutoAdditionSettings>));
            deleteAutoAdditionSettingsCaller.AddArg("autoAdditionSettingsItem", typeof(AutoAdditionSettingsItem));

            deleteGroupCaller = new RemoteMethodCaller("restoSetup", "deleteGroup");
            deleteGroupCaller.AddArg("group", typeof(Group));

            deleteSectionCaller = new RemoteMethodCaller("restoSetup", "deleteSection");
            deleteSectionCaller.AddArg("section", typeof(RestaurantSection));

            editAutoAdditionSettingsCaller = new RemoteMethodCaller("restoSetup", "editAutoAdditionSettings");
            editAutoAdditionSettingsCaller.AddArg("autoAdditionSettings", typeof(ByValue<AutoAdditionSettings>));
            editAutoAdditionSettingsCaller.AddArg("autoAdditionSettingsItem", typeof(AutoAdditionSettingsItem));

            getDeliveryListUpdateCooldownSecCaller = new RemoteMethodCaller("restoSetup", "getDeliveryListUpdateCooldownSec");

            getDepartmentIdCaller = new RemoteMethodCaller("restoSetup", "getDepartmentId");

            getMajorServiceModeCaller = new RemoteMethodCaller("restoSetup", "getMajorServiceMode");

            getRestoImageCaller = new RemoteMethodCaller("restoSetup", "getRestoImage");
            getRestoImageCaller.AddArg("imageId", typeof(Guid?));

            getSavedServerPropertyCaller = new RemoteMethodCaller("restoSetup", "getSavedServerProperty");
            getSavedServerPropertyCaller.AddArg("name", typeof(string));
            getSavedServerPropertyCaller.AddArg("loadFromMemory", typeof(bool));

            getServerPropertiesCaller = new RemoteMethodCaller("restoSetup", "getServerProperties");
            getServerPropertiesCaller.AddArg("propertyNames", typeof(List<string>));

            getServerPropertyCaller = new RemoteMethodCaller("restoSetup", "getServerProperty");
            getServerPropertyCaller.AddArg("name", typeof(string));

            getSettingsMetaDataCaller = new RemoteMethodCaller("restoSetup", "getSettingsMetaData");

            isEnableManualDeliveryZonesCaller = new RemoteMethodCaller("restoSetup", "isEnableManualDeliveryZones");

            isEnableToCreateDeliveryWithoutCustomerCaller = new RemoteMethodCaller("restoSetup", "isEnableToCreateDeliveryWithoutCustomer");

            isEnableToSaveDeliveryWithoutTerminalCaller = new RemoteMethodCaller("restoSetup", "isEnableToSaveDeliveryWithoutTerminal");

            refreshGroupPropertiesCaller = new RemoteMethodCaller("restoSetup", "refreshGroupProperties");
            refreshGroupPropertiesCaller.AddArg("valGroup", typeof(ByValue<Group>));
            refreshGroupPropertiesCaller.AddArg("deletedCpt", typeof(List<CookingPlaceType>));
            refreshGroupPropertiesCaller.AddArg("changedCpt", typeof(Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings>));
            refreshGroupPropertiesCaller.AddArg("newCpt", typeof(Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings>));
            refreshGroupPropertiesCaller.AddArg("deletedPos", typeof(List<PointOfSale>));
            refreshGroupPropertiesCaller.AddArg("changedPos", typeof(List<ByValue<PointOfSale>>));
            refreshGroupPropertiesCaller.AddArg("newPos", typeof(List<ByValue<PointOfSale>>));
            refreshGroupPropertiesCaller.AddArg("restoredPos", typeof(List<PointOfSale>));

            refreshSectionPropertiesCaller = new RemoteMethodCaller("restoSetup", "refreshSectionProperties");
            refreshSectionPropertiesCaller.AddArg("valSection", typeof(ByValue<RestaurantSection>));
            refreshSectionPropertiesCaller.AddArg("changedCpt", typeof(Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings>));
            refreshSectionPropertiesCaller.AddArg("deletedTbl", typeof(List<Table>));
            refreshSectionPropertiesCaller.AddArg("changedTbl", typeof(List<ByValue<Table>>));
            refreshSectionPropertiesCaller.AddArg("newTbl", typeof(List<ByValue<Table>>));
            refreshSectionPropertiesCaller.AddArg("restoredTbl", typeof(List<Table>));
            refreshSectionPropertiesCaller.AddArg("waiterCanOpenOthersOrders", typeof(bool));
            refreshSectionPropertiesCaller.AddArg("roundTablesInSectionSchema", typeof(bool));

            restoreGroupCaller = new RemoteMethodCaller("restoSetup", "restoreGroup");
            restoreGroupCaller.AddArg("group", typeof(Group));

            restoreRestaurantSectionCaller = new RemoteMethodCaller("restoSetup", "restoreRestaurantSection");
            restoreRestaurantSectionCaller.AddArg("restaurantSection", typeof(RestaurantSection));

            setCostCorrectionSettingsCaller = new RemoteMethodCaller("restoSetup", "setCostCorrectionSettings");
            setCostCorrectionSettingsCaller.AddArg("isDistributeCostCorrections", typeof(bool));
            setCostCorrectionSettingsCaller.AddArg("costCorrectionCronExpression", typeof(string));

            setRestoImageCaller = new RemoteMethodCaller("restoSetup", "setRestoImage");
            setRestoImageCaller.AddArg("imageDto", typeof(SavedImageRequest));

            setServerPropertiesCaller = new RemoteMethodCaller("restoSetup", "setServerProperties");
            setServerPropertiesCaller.AddArg("properties", typeof(Dictionary<string, string>));
            setServerPropertiesCaller.AddArg("applyImmediate", typeof(bool));
            setServerPropertiesCaller.AddArg("saveToFile", typeof(bool));

            setServerPropertyCaller = new RemoteMethodCaller("restoSetup", "setServerProperty");
            setServerPropertyCaller.AddArg("name", typeof(string));
            setServerPropertyCaller.AddArg("value", typeof(string));
            setServerPropertyCaller.AddArg("applyImmediate", typeof(bool));
            setServerPropertyCaller.AddArg("saveToFile", typeof(bool));

            swapGroupMainTerminalCaller = new RemoteMethodCaller("restoSetup", "swapGroupMainTerminal");
            swapGroupMainTerminalCaller.AddArg("group", typeof(Group));
            swapGroupMainTerminalCaller.AddArg("newMainTerminal", typeof(Terminal));

            updateCafeSetupCaller = new RemoteMethodCaller("restoSetup", "updateCafeSetup");
            updateCafeSetupCaller.AddArg("cafeSetup", typeof(ByValue<CafeSetup>));

            updateConceptionCaller = new RemoteMethodCaller("restoSetup", "updateConception");
            updateConceptionCaller.AddArg("conception", typeof(ByValue<Conception>));

            updateDeliveryAppearanceSettingsCaller = new RemoteMethodCaller("restoSetup", "updateDeliveryAppearanceSettings");
            updateDeliveryAppearanceSettingsCaller.AddArg("deliveryAppearanceSettings", typeof(ByValue<DeliveryAppearanceSettings>));

            updateDeliveryConfirmationSettingsCaller = new RemoteMethodCaller("restoSetup", "updateDeliveryConfirmationSettings");
            updateDeliveryConfirmationSettingsCaller.AddArg("deliveryConfirmationSettings", typeof(ByValue<DeliveryConfirmationSettings>));

            updateDeliveryRestrictionsCaller = new RemoteMethodCaller("restoSetup", "updateDeliveryRestrictions");
            updateDeliveryRestrictionsCaller.AddArg("deliveryRestrictions", typeof(ByValue<DeliveryRestrictions>));
            updateDeliveryRestrictionsCaller.AddArg("autoAssignSettings", typeof(ByValue<AutoAssignDeliveryTerminalSettings>));

            updateDeliverySettingsCaller = new RemoteMethodCaller("restoSetup", "updateDeliverySettings");
            updateDeliverySettingsCaller.AddArg("deliverySettings", typeof(ByValue<DeliverySettings>));

            updateDeliverySmsSendingSettingsCaller = new RemoteMethodCaller("restoSetup", "updateDeliverySmsSendingSettings");
            updateDeliverySmsSendingSettingsCaller.AddArg("deliverySmsSendingSettings", typeof(ByValue<DeliverySmsSendingSettings>));

            updateErrorNotificationConfigurationCaller = new RemoteMethodCaller("restoSetup", "updateErrorNotificationConfiguration");
            updateErrorNotificationConfigurationCaller.AddArg("config", typeof(ByValue<NotificationConfiguration>));

            updateFrontSessionsPropertiesCaller = new RemoteMethodCaller("restoSetup", "updateFrontSessionsProperties");
            updateFrontSessionsPropertiesCaller.AddArg("sessionsProperties", typeof(ByValue<FrontSessionsProperties>));

            updateGroupLocationCaller = new RemoteMethodCaller("restoSetup", "updateGroupLocation");
            updateGroupLocationCaller.AddArg("items", typeof(List<ByValue<GroupLocation>>));

            updateIikoCard51SettingsCaller = new RemoteMethodCaller("restoSetup", "updateIikoCard51Settings");
            updateIikoCard51SettingsCaller.AddArg("iikoCard51Settings", typeof(ByValue<IikoCard51Settings>));

            updateLogisticsSettingsCaller = new RemoteMethodCaller("restoSetup", "updateLogisticsSettings");
            updateLogisticsSettingsCaller.AddArg("logisticsSettings", typeof(ByValue<LogisticsSettings>));
        }

        #region Synchronous versions
        public IServiceMethodCall<bool> AddGroup(ByValue<Group> group)
        {
            return addGroupCaller.CreateCall<bool>(new object[] { group });
        }

        public IServiceMethodCall<bool> AddRestorauntSection(Guid? groupId, ByValue<RestaurantSection> restorauntSection)
        {
            return addRestorauntSectionCaller.CreateCall<bool>(new object[] { groupId, restorauntSection });
        }

        public IServiceMethodCall<object> ClearRestoImage()
        {
            return clearRestoImageCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> CreateAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem)
        {
            return createAutoAdditionSettingsCaller.CreateCall<object>(new object[] { autoAdditionSettings, autoAdditionSettingsItem });
        }

        public IServiceMethodCall<object> DeleteAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem)
        {
            return deleteAutoAdditionSettingsCaller.CreateCall<object>(new object[] { autoAdditionSettings, autoAdditionSettingsItem });
        }

        public IServiceMethodCall<bool> DeleteGroup(Group group)
        {
            return deleteGroupCaller.CreateCall<bool>(new object[] { group });
        }

        public IServiceMethodCall<bool> DeleteSection(RestaurantSection section)
        {
            return deleteSectionCaller.CreateCall<bool>(new object[] { section });
        }

        public IServiceMethodCall<object> EditAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem)
        {
            return editAutoAdditionSettingsCaller.CreateCall<object>(new object[] { autoAdditionSettings, autoAdditionSettingsItem });
        }

        public IServiceMethodCall<int> GetDeliveryListUpdateCooldownSec()
        {
            return getDeliveryListUpdateCooldownSecCaller.CreateCall<int>(new object[] {  });
        }

        public IServiceMethodCall<string> GetDepartmentId()
        {
            return getDepartmentIdCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<GroupServiceMode> GetMajorServiceMode()
        {
            return getMajorServiceModeCaller.CreateCall<GroupServiceMode>(new object[] {  });
        }

        public IServiceMethodCall<string> GetRestoImage(Guid? imageId)
        {
            return getRestoImageCaller.CreateCall<string>(new object[] { imageId });
        }

        public IServiceMethodCall<string> GetSavedServerProperty(string name, bool loadFromMemory)
        {
            return getSavedServerPropertyCaller.CreateCall<string>(new object[] { name, loadFromMemory });
        }

        public IServiceMethodCall<Dictionary<string, string>> GetServerProperties(List<string> propertyNames)
        {
            return getServerPropertiesCaller.CreateCall<Dictionary<string, string>>(new object[] { propertyNames });
        }

        public IServiceMethodCall<string> GetServerProperty(string name)
        {
            return getServerPropertyCaller.CreateCall<string>(new object[] { name });
        }

        public IServiceMethodCall<List<SettingsItem>> GetSettingsMetaData()
        {
            return getSettingsMetaDataCaller.CreateCall<List<SettingsItem>>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsEnableManualDeliveryZones()
        {
            return isEnableManualDeliveryZonesCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsEnableToCreateDeliveryWithoutCustomer()
        {
            return isEnableToCreateDeliveryWithoutCustomerCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsEnableToSaveDeliveryWithoutTerminal()
        {
            return isEnableToSaveDeliveryWithoutTerminalCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<bool> RefreshGroupProperties(ByValue<Group> valGroup, List<CookingPlaceType> deletedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> newCpt, List<PointOfSale> deletedPos, List<ByValue<PointOfSale>> changedPos, List<ByValue<PointOfSale>> newPos, List<PointOfSale> restoredPos)
        {
            return refreshGroupPropertiesCaller.CreateCall<bool>(new object[] { valGroup, deletedCpt, changedCpt, newCpt, deletedPos, changedPos, newPos, restoredPos });
        }

        public IServiceMethodCall<bool> RefreshSectionProperties(ByValue<RestaurantSection> valSection, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, List<Table> deletedTbl, List<ByValue<Table>> changedTbl, List<ByValue<Table>> newTbl, List<Table> restoredTbl, bool waiterCanOpenOthersOrders, bool roundTablesInSectionSchema)
        {
            return refreshSectionPropertiesCaller.CreateCall<bool>(new object[] { valSection, changedCpt, deletedTbl, changedTbl, newTbl, restoredTbl, waiterCanOpenOthersOrders, roundTablesInSectionSchema });
        }

        public IServiceMethodCall<object> RestoreGroup(Group group)
        {
            return restoreGroupCaller.CreateCall<object>(new object[] { group });
        }

        public IServiceMethodCall<object> RestoreRestaurantSection(RestaurantSection restaurantSection)
        {
            return restoreRestaurantSectionCaller.CreateCall<object>(new object[] { restaurantSection });
        }

        public IServiceMethodCall<object> SetCostCorrectionSettings(bool isDistributeCostCorrections, string costCorrectionCronExpression)
        {
            return setCostCorrectionSettingsCaller.CreateCall<object>(new object[] { isDistributeCostCorrections, costCorrectionCronExpression });
        }

        public IServiceMethodCall<Guid?> SetRestoImage(SavedImageRequest imageDto)
        {
            return setRestoImageCaller.CreateCall<Guid?>(new object[] { imageDto });
        }

        public IServiceMethodCall<object> SetServerProperties(Dictionary<string, string> properties, bool applyImmediate, bool saveToFile)
        {
            return setServerPropertiesCaller.CreateCall<object>(new object[] { properties, applyImmediate, saveToFile });
        }

        public IServiceMethodCall<object> SetServerProperty(string name, string value, bool applyImmediate, bool saveToFile)
        {
            return setServerPropertyCaller.CreateCall<object>(new object[] { name, value, applyImmediate, saveToFile });
        }

        public IServiceMethodCall<object> SwapGroupMainTerminal(Group group, Terminal newMainTerminal)
        {
            return swapGroupMainTerminalCaller.CreateCall<object>(new object[] { group, newMainTerminal });
        }

        public IServiceMethodCall<object> UpdateCafeSetup(ByValue<CafeSetup> cafeSetup)
        {
            return updateCafeSetupCaller.CreateCall<object>(new object[] { cafeSetup });
        }

        public IServiceMethodCall<object> UpdateConception(ByValue<Conception> conception)
        {
            return updateConceptionCaller.CreateCall<object>(new object[] { conception });
        }

        public IServiceMethodCall<object> UpdateDeliveryAppearanceSettings(ByValue<DeliveryAppearanceSettings> deliveryAppearanceSettings)
        {
            return updateDeliveryAppearanceSettingsCaller.CreateCall<object>(new object[] { deliveryAppearanceSettings });
        }

        public IServiceMethodCall<object> UpdateDeliveryConfirmationSettings(ByValue<DeliveryConfirmationSettings> deliveryConfirmationSettings)
        {
            return updateDeliveryConfirmationSettingsCaller.CreateCall<object>(new object[] { deliveryConfirmationSettings });
        }

        public IServiceMethodCall<object> UpdateDeliveryRestrictions(ByValue<DeliveryRestrictions> deliveryRestrictions, ByValue<AutoAssignDeliveryTerminalSettings> autoAssignSettings)
        {
            return updateDeliveryRestrictionsCaller.CreateCall<object>(new object[] { deliveryRestrictions, autoAssignSettings });
        }

        public IServiceMethodCall<object> UpdateDeliverySettings(ByValue<DeliverySettings> deliverySettings)
        {
            return updateDeliverySettingsCaller.CreateCall<object>(new object[] { deliverySettings });
        }

        public IServiceMethodCall<object> UpdateDeliverySmsSendingSettings(ByValue<DeliverySmsSendingSettings> deliverySmsSendingSettings)
        {
            return updateDeliverySmsSendingSettingsCaller.CreateCall<object>(new object[] { deliverySmsSendingSettings });
        }

        public IServiceMethodCall<object> UpdateErrorNotificationConfiguration(ByValue<NotificationConfiguration> config)
        {
            return updateErrorNotificationConfigurationCaller.CreateCall<object>(new object[] { config });
        }

        public IServiceMethodCall<object> UpdateFrontSessionsProperties(ByValue<FrontSessionsProperties> sessionsProperties)
        {
            return updateFrontSessionsPropertiesCaller.CreateCall<object>(new object[] { sessionsProperties });
        }

        public IServiceMethodCall<object> UpdateGroupLocation(List<ByValue<GroupLocation>> items)
        {
            return updateGroupLocationCaller.CreateCall<object>(new object[] { items });
        }

        public IServiceMethodCall<object> UpdateIikoCard51Settings(ByValue<IikoCard51Settings> iikoCard51Settings)
        {
            return updateIikoCard51SettingsCaller.CreateCall<object>(new object[] { iikoCard51Settings });
        }

        public IServiceMethodCall<object> UpdateLogisticsSettings(ByValue<LogisticsSettings> logisticsSettings)
        {
            return updateLogisticsSettingsCaller.CreateCall<object>(new object[] { logisticsSettings });
        }

        #endregion

        #region asynchronous version
        public void AddGroup(ByValue<Group> group, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            addGroupCaller.CallAsync(new object[] {group}, resultHandler, errorHandler);
        }

        public void AddRestorauntSection(Guid? groupId, ByValue<RestaurantSection> restorauntSection, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            addRestorauntSectionCaller.CallAsync(new object[] {groupId, restorauntSection}, resultHandler, errorHandler);
        }

        public void ClearRestoImage(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            clearRestoImageCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void CreateAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createAutoAdditionSettingsCaller.CallAsync(new object[] {autoAdditionSettings, autoAdditionSettingsItem}, resultHandler, errorHandler);
        }

        public void DeleteAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteAutoAdditionSettingsCaller.CallAsync(new object[] {autoAdditionSettings, autoAdditionSettingsItem}, resultHandler, errorHandler);
        }

        public void DeleteGroup(Group group, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            deleteGroupCaller.CallAsync(new object[] {group}, resultHandler, errorHandler);
        }

        public void DeleteSection(RestaurantSection section, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            deleteSectionCaller.CallAsync(new object[] {section}, resultHandler, errorHandler);
        }

        public void EditAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            editAutoAdditionSettingsCaller.CallAsync(new object[] {autoAdditionSettings, autoAdditionSettingsItem}, resultHandler, errorHandler);
        }

        public void GetDeliveryListUpdateCooldownSec(AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            getDeliveryListUpdateCooldownSecCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetDepartmentId(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getDepartmentIdCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetMajorServiceMode(AsyncErrorHandler errorHandler, Action<GroupServiceMode> resultHandler)
        {
            getMajorServiceModeCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetRestoImage(Guid? imageId, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getRestoImageCaller.CallAsync(new object[] {imageId}, resultHandler, errorHandler);
        }

        public void GetSavedServerProperty(string name, bool loadFromMemory, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getSavedServerPropertyCaller.CallAsync(new object[] {name, loadFromMemory}, resultHandler, errorHandler);
        }

        public void GetServerProperties(List<string> propertyNames, AsyncErrorHandler errorHandler, Action<Dictionary<string, string>> resultHandler)
        {
            getServerPropertiesCaller.CallAsync(new object[] {propertyNames}, resultHandler, errorHandler);
        }

        public void GetServerProperty(string name, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getServerPropertyCaller.CallAsync(new object[] {name}, resultHandler, errorHandler);
        }

        public void GetSettingsMetaData(AsyncErrorHandler errorHandler, Action<List<SettingsItem>> resultHandler)
        {
            getSettingsMetaDataCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsEnableManualDeliveryZones(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isEnableManualDeliveryZonesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsEnableToCreateDeliveryWithoutCustomer(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isEnableToCreateDeliveryWithoutCustomerCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsEnableToSaveDeliveryWithoutTerminal(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isEnableToSaveDeliveryWithoutTerminalCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void RefreshGroupProperties(ByValue<Group> valGroup, List<CookingPlaceType> deletedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> newCpt, List<PointOfSale> deletedPos, List<ByValue<PointOfSale>> changedPos, List<ByValue<PointOfSale>> newPos, List<PointOfSale> restoredPos, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            refreshGroupPropertiesCaller.CallAsync(new object[] {valGroup, deletedCpt, changedCpt, newCpt, deletedPos, changedPos, newPos, restoredPos}, resultHandler, errorHandler);
        }

        public void RefreshSectionProperties(ByValue<RestaurantSection> valSection, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, List<Table> deletedTbl, List<ByValue<Table>> changedTbl, List<ByValue<Table>> newTbl, List<Table> restoredTbl, bool waiterCanOpenOthersOrders, bool roundTablesInSectionSchema, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            refreshSectionPropertiesCaller.CallAsync(new object[] {valSection, changedCpt, deletedTbl, changedTbl, newTbl, restoredTbl, waiterCanOpenOthersOrders, roundTablesInSectionSchema}, resultHandler, errorHandler);
        }

        public void RestoreGroup(Group group, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            restoreGroupCaller.CallAsync(new object[] {group}, resultHandler, errorHandler);
        }

        public void RestoreRestaurantSection(RestaurantSection restaurantSection, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            restoreRestaurantSectionCaller.CallAsync(new object[] {restaurantSection}, resultHandler, errorHandler);
        }

        public void SetCostCorrectionSettings(bool isDistributeCostCorrections, string costCorrectionCronExpression, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCostCorrectionSettingsCaller.CallAsync(new object[] {isDistributeCostCorrections, costCorrectionCronExpression}, resultHandler, errorHandler);
        }

        public void SetRestoImage(SavedImageRequest imageDto, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            setRestoImageCaller.CallAsync(new object[] {imageDto}, resultHandler, errorHandler);
        }

        public void SetServerProperties(Dictionary<string, string> properties, bool applyImmediate, bool saveToFile, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setServerPropertiesCaller.CallAsync(new object[] {properties, applyImmediate, saveToFile}, resultHandler, errorHandler);
        }

        public void SetServerProperty(string name, string value, bool applyImmediate, bool saveToFile, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setServerPropertyCaller.CallAsync(new object[] {name, value, applyImmediate, saveToFile}, resultHandler, errorHandler);
        }

        public void SwapGroupMainTerminal(Group group, Terminal newMainTerminal, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            swapGroupMainTerminalCaller.CallAsync(new object[] {group, newMainTerminal}, resultHandler, errorHandler);
        }

        public void UpdateCafeSetup(ByValue<CafeSetup> cafeSetup, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateCafeSetupCaller.CallAsync(new object[] {cafeSetup}, resultHandler, errorHandler);
        }

        public void UpdateConception(ByValue<Conception> conception, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateConceptionCaller.CallAsync(new object[] {conception}, resultHandler, errorHandler);
        }

        public void UpdateDeliveryAppearanceSettings(ByValue<DeliveryAppearanceSettings> deliveryAppearanceSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDeliveryAppearanceSettingsCaller.CallAsync(new object[] {deliveryAppearanceSettings}, resultHandler, errorHandler);
        }

        public void UpdateDeliveryConfirmationSettings(ByValue<DeliveryConfirmationSettings> deliveryConfirmationSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDeliveryConfirmationSettingsCaller.CallAsync(new object[] {deliveryConfirmationSettings}, resultHandler, errorHandler);
        }

        public void UpdateDeliveryRestrictions(ByValue<DeliveryRestrictions> deliveryRestrictions, ByValue<AutoAssignDeliveryTerminalSettings> autoAssignSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDeliveryRestrictionsCaller.CallAsync(new object[] {deliveryRestrictions, autoAssignSettings}, resultHandler, errorHandler);
        }

        public void UpdateDeliverySettings(ByValue<DeliverySettings> deliverySettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDeliverySettingsCaller.CallAsync(new object[] {deliverySettings}, resultHandler, errorHandler);
        }

        public void UpdateDeliverySmsSendingSettings(ByValue<DeliverySmsSendingSettings> deliverySmsSendingSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDeliverySmsSendingSettingsCaller.CallAsync(new object[] {deliverySmsSendingSettings}, resultHandler, errorHandler);
        }

        public void UpdateErrorNotificationConfiguration(ByValue<NotificationConfiguration> config, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateErrorNotificationConfigurationCaller.CallAsync(new object[] {config}, resultHandler, errorHandler);
        }

        public void UpdateFrontSessionsProperties(ByValue<FrontSessionsProperties> sessionsProperties, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateFrontSessionsPropertiesCaller.CallAsync(new object[] {sessionsProperties}, resultHandler, errorHandler);
        }

        public void UpdateGroupLocation(List<ByValue<GroupLocation>> items, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateGroupLocationCaller.CallAsync(new object[] {items}, resultHandler, errorHandler);
        }

        public void UpdateIikoCard51Settings(ByValue<IikoCard51Settings> iikoCard51Settings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateIikoCard51SettingsCaller.CallAsync(new object[] {iikoCard51Settings}, resultHandler, errorHandler);
        }

        public void UpdateLogisticsSettings(ByValue<LogisticsSettings> logisticsSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateLogisticsSettingsCaller.CallAsync(new object[] {logisticsSettings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<bool> AddGroup(ByValue<Group> group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addGroupCaller.Call<bool>(new object[] { group }, asyncState, requestTimeout);
        }

        public Task<bool> AddRestorauntSection(Guid? groupId, ByValue<RestaurantSection> restorauntSection, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addRestorauntSectionCaller.Call<bool>(new object[] { groupId, restorauntSection }, asyncState, requestTimeout);
        }

        public Task<object> ClearRestoImage([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return clearRestoImageCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> CreateAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createAutoAdditionSettingsCaller.Call<object>(new object[] { autoAdditionSettings, autoAdditionSettingsItem }, asyncState, requestTimeout);
        }

        public Task<object> DeleteAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteAutoAdditionSettingsCaller.Call<object>(new object[] { autoAdditionSettings, autoAdditionSettingsItem }, asyncState, requestTimeout);
        }

        public Task<bool> DeleteGroup(Group group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteGroupCaller.Call<bool>(new object[] { group }, asyncState, requestTimeout);
        }

        public Task<bool> DeleteSection(RestaurantSection section, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteSectionCaller.Call<bool>(new object[] { section }, asyncState, requestTimeout);
        }

        public Task<object> EditAutoAdditionSettings(ByValue<AutoAdditionSettings> autoAdditionSettings, AutoAdditionSettingsItem autoAdditionSettingsItem, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return editAutoAdditionSettingsCaller.Call<object>(new object[] { autoAdditionSettings, autoAdditionSettingsItem }, asyncState, requestTimeout);
        }

        public Task<int> GetDeliveryListUpdateCooldownSec([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDeliveryListUpdateCooldownSecCaller.Call<int>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<string> GetDepartmentId([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDepartmentIdCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<GroupServiceMode> GetMajorServiceMode([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getMajorServiceModeCaller.Call<GroupServiceMode>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<string> GetRestoImage(Guid? imageId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRestoImageCaller.Call<string>(new object[] { imageId }, asyncState, requestTimeout);
        }

        public Task<string> GetSavedServerProperty(string name, bool loadFromMemory, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSavedServerPropertyCaller.Call<string>(new object[] { name, loadFromMemory }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, string>> GetServerProperties(List<string> propertyNames, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getServerPropertiesCaller.Call<Dictionary<string, string>>(new object[] { propertyNames }, asyncState, requestTimeout);
        }

        public Task<string> GetServerProperty(string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getServerPropertyCaller.Call<string>(new object[] { name }, asyncState, requestTimeout);
        }

        public Task<List<SettingsItem>> GetSettingsMetaData([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSettingsMetaDataCaller.Call<List<SettingsItem>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsEnableManualDeliveryZones([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isEnableManualDeliveryZonesCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsEnableToCreateDeliveryWithoutCustomer([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isEnableToCreateDeliveryWithoutCustomerCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsEnableToSaveDeliveryWithoutTerminal([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isEnableToSaveDeliveryWithoutTerminalCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> RefreshGroupProperties(ByValue<Group> valGroup, List<CookingPlaceType> deletedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> newCpt, List<PointOfSale> deletedPos, List<ByValue<PointOfSale>> changedPos, List<ByValue<PointOfSale>> newPos, List<PointOfSale> restoredPos, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return refreshGroupPropertiesCaller.Call<bool>(new object[] { valGroup, deletedCpt, changedCpt, newCpt, deletedPos, changedPos, newPos, restoredPos }, asyncState, requestTimeout);
        }

        public Task<bool> RefreshSectionProperties(ByValue<RestaurantSection> valSection, Dictionary<ByValue<CookingPlaceType>, CookingPlaceTypeSettings> changedCpt, List<Table> deletedTbl, List<ByValue<Table>> changedTbl, List<ByValue<Table>> newTbl, List<Table> restoredTbl, bool waiterCanOpenOthersOrders, bool roundTablesInSectionSchema, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return refreshSectionPropertiesCaller.Call<bool>(new object[] { valSection, changedCpt, deletedTbl, changedTbl, newTbl, restoredTbl, waiterCanOpenOthersOrders, roundTablesInSectionSchema }, asyncState, requestTimeout);
        }

        public Task<object> RestoreGroup(Group group, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return restoreGroupCaller.Call<object>(new object[] { group }, asyncState, requestTimeout);
        }

        public Task<object> RestoreRestaurantSection(RestaurantSection restaurantSection, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return restoreRestaurantSectionCaller.Call<object>(new object[] { restaurantSection }, asyncState, requestTimeout);
        }

        public Task<object> SetCostCorrectionSettings(bool isDistributeCostCorrections, string costCorrectionCronExpression, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCostCorrectionSettingsCaller.Call<object>(new object[] { isDistributeCostCorrections, costCorrectionCronExpression }, asyncState, requestTimeout);
        }

        public Task<Guid?> SetRestoImage(SavedImageRequest imageDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setRestoImageCaller.Call<Guid?>(new object[] { imageDto }, asyncState, requestTimeout);
        }

        public Task<object> SetServerProperties(Dictionary<string, string> properties, bool applyImmediate, bool saveToFile, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setServerPropertiesCaller.Call<object>(new object[] { properties, applyImmediate, saveToFile }, asyncState, requestTimeout);
        }

        public Task<object> SetServerProperty(string name, string value, bool applyImmediate, bool saveToFile, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setServerPropertyCaller.Call<object>(new object[] { name, value, applyImmediate, saveToFile }, asyncState, requestTimeout);
        }

        public Task<object> SwapGroupMainTerminal(Group group, Terminal newMainTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return swapGroupMainTerminalCaller.Call<object>(new object[] { group, newMainTerminal }, asyncState, requestTimeout);
        }

        public Task<object> UpdateCafeSetup(ByValue<CafeSetup> cafeSetup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateCafeSetupCaller.Call<object>(new object[] { cafeSetup }, asyncState, requestTimeout);
        }

        public Task<object> UpdateConception(ByValue<Conception> conception, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateConceptionCaller.Call<object>(new object[] { conception }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDeliveryAppearanceSettings(ByValue<DeliveryAppearanceSettings> deliveryAppearanceSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDeliveryAppearanceSettingsCaller.Call<object>(new object[] { deliveryAppearanceSettings }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDeliveryConfirmationSettings(ByValue<DeliveryConfirmationSettings> deliveryConfirmationSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDeliveryConfirmationSettingsCaller.Call<object>(new object[] { deliveryConfirmationSettings }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDeliveryRestrictions(ByValue<DeliveryRestrictions> deliveryRestrictions, ByValue<AutoAssignDeliveryTerminalSettings> autoAssignSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDeliveryRestrictionsCaller.Call<object>(new object[] { deliveryRestrictions, autoAssignSettings }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDeliverySettings(ByValue<DeliverySettings> deliverySettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDeliverySettingsCaller.Call<object>(new object[] { deliverySettings }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDeliverySmsSendingSettings(ByValue<DeliverySmsSendingSettings> deliverySmsSendingSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDeliverySmsSendingSettingsCaller.Call<object>(new object[] { deliverySmsSendingSettings }, asyncState, requestTimeout);
        }

        public Task<object> UpdateErrorNotificationConfiguration(ByValue<NotificationConfiguration> config, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateErrorNotificationConfigurationCaller.Call<object>(new object[] { config }, asyncState, requestTimeout);
        }

        public Task<object> UpdateFrontSessionsProperties(ByValue<FrontSessionsProperties> sessionsProperties, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateFrontSessionsPropertiesCaller.Call<object>(new object[] { sessionsProperties }, asyncState, requestTimeout);
        }

        public Task<object> UpdateGroupLocation(List<ByValue<GroupLocation>> items, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateGroupLocationCaller.Call<object>(new object[] { items }, asyncState, requestTimeout);
        }

        public Task<object> UpdateIikoCard51Settings(ByValue<IikoCard51Settings> iikoCard51Settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateIikoCard51SettingsCaller.Call<object>(new object[] { iikoCard51Settings }, asyncState, requestTimeout);
        }

        public Task<object> UpdateLogisticsSettings(ByValue<LogisticsSettings> logisticsSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateLogisticsSettingsCaller.Call<object>(new object[] { logisticsSettings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class TablesEditorService : ITablesEditorService
    {
        private readonly RemoteMethodCaller createSchemaCaller;
        private readonly RemoteMethodCaller createSchemaCopyCaller;
        private readonly RemoteMethodCaller deleteSchemaCaller;
        private readonly RemoteMethodCaller getSectionObjectImageCaller;
        private readonly RemoteMethodCaller setSectionImageCaller;
        private readonly RemoteMethodCaller setSectionNameCaller;
        private readonly RemoteMethodCaller setSectionObjectImageCaller;
        private readonly RemoteMethodCaller setSectionObjectsCaller;
        private readonly RemoteMethodCaller setSectionSchemaCaller;
        private readonly RemoteMethodCaller setSectionSizeCaller;

        internal TablesEditorService()
        {

            createSchemaCaller = new RemoteMethodCaller("tableseditor", "createSchema");
            createSchemaCaller.AddArg("name", typeof(string));
            createSchemaCaller.AddArg("sectionID", typeof(Guid?));

            createSchemaCopyCaller = new RemoteMethodCaller("tableseditor", "createSchemaCopy");
            createSchemaCopyCaller.AddArg("id", typeof(Guid?));
            createSchemaCopyCaller.AddArg("name", typeof(string));

            deleteSchemaCaller = new RemoteMethodCaller("tableseditor", "deleteSchema");
            deleteSchemaCaller.AddArg("id", typeof(Guid?));

            getSectionObjectImageCaller = new RemoteMethodCaller("tableseditor", "getSectionObjectImage");
            getSectionObjectImageCaller.AddArg("imageID", typeof(Guid?));

            setSectionImageCaller = new RemoteMethodCaller("tableseditor", "setSectionImage");
            setSectionImageCaller.AddArg("schemaID", typeof(Guid?));
            setSectionImageCaller.AddArg("data", typeof(string));

            setSectionNameCaller = new RemoteMethodCaller("tableseditor", "setSectionName");
            setSectionNameCaller.AddArg("schemaID", typeof(Guid?));
            setSectionNameCaller.AddArg("name", typeof(string));

            setSectionObjectImageCaller = new RemoteMethodCaller("tableseditor", "setSectionObjectImage");
            setSectionObjectImageCaller.AddArg("imageID", typeof(Guid?));
            setSectionObjectImageCaller.AddArg("data", typeof(string));

            setSectionObjectsCaller = new RemoteMethodCaller("tableseditor", "setSectionObjects");
            setSectionObjectsCaller.AddArg("schemaID", typeof(Guid?));
            setSectionObjectsCaller.AddArg("objects", typeof(HashSet<RestaurantSectionObject>));

            setSectionSchemaCaller = new RemoteMethodCaller("tableseditor", "setSectionSchema");
            setSectionSchemaCaller.AddArg("sectionID", typeof(Guid?));
            setSectionSchemaCaller.AddArg("schemaID", typeof(Guid?));

            setSectionSizeCaller = new RemoteMethodCaller("tableseditor", "setSectionSize");
            setSectionSizeCaller.AddArg("schemaID", typeof(Guid?));
            setSectionSizeCaller.AddArg("width", typeof(int));
            setSectionSizeCaller.AddArg("height", typeof(int));
        }

        #region Synchronous versions
        public IServiceMethodCall<Guid?> CreateSchema(string name, Guid? sectionID)
        {
            return createSchemaCaller.CreateCall<Guid?>(new object[] { name, sectionID });
        }

        public IServiceMethodCall<Guid?> CreateSchemaCopy(Guid? id, string name)
        {
            return createSchemaCopyCaller.CreateCall<Guid?>(new object[] { id, name });
        }

        public IServiceMethodCall<object> DeleteSchema(Guid? id)
        {
            return deleteSchemaCaller.CreateCall<object>(new object[] { id });
        }

        public IServiceMethodCall<string> GetSectionObjectImage(Guid? imageID)
        {
            return getSectionObjectImageCaller.CreateCall<string>(new object[] { imageID });
        }

        public IServiceMethodCall<object> SetSectionImage(Guid? schemaID, string data)
        {
            return setSectionImageCaller.CreateCall<object>(new object[] { schemaID, data });
        }

        public IServiceMethodCall<object> SetSectionName(Guid? schemaID, string name)
        {
            return setSectionNameCaller.CreateCall<object>(new object[] { schemaID, name });
        }

        public IServiceMethodCall<object> SetSectionObjectImage(Guid? imageID, string data)
        {
            return setSectionObjectImageCaller.CreateCall<object>(new object[] { imageID, data });
        }

        public IServiceMethodCall<object> SetSectionObjects(Guid? schemaID, HashSet<RestaurantSectionObject> objects)
        {
            return setSectionObjectsCaller.CreateCall<object>(new object[] { schemaID, objects });
        }

        public IServiceMethodCall<object> SetSectionSchema(Guid? sectionID, Guid? schemaID)
        {
            return setSectionSchemaCaller.CreateCall<object>(new object[] { sectionID, schemaID });
        }

        public IServiceMethodCall<object> SetSectionSize(Guid? schemaID, int width, int height)
        {
            return setSectionSizeCaller.CreateCall<object>(new object[] { schemaID, width, height });
        }

        #endregion

        #region asynchronous version
        public void CreateSchema(string name, Guid? sectionID, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            createSchemaCaller.CallAsync(new object[] {name, sectionID}, resultHandler, errorHandler);
        }

        public void CreateSchemaCopy(Guid? id, string name, AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            createSchemaCopyCaller.CallAsync(new object[] {id, name}, resultHandler, errorHandler);
        }

        public void DeleteSchema(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteSchemaCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void GetSectionObjectImage(Guid? imageID, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getSectionObjectImageCaller.CallAsync(new object[] {imageID}, resultHandler, errorHandler);
        }

        public void SetSectionImage(Guid? schemaID, string data, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSectionImageCaller.CallAsync(new object[] {schemaID, data}, resultHandler, errorHandler);
        }

        public void SetSectionName(Guid? schemaID, string name, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSectionNameCaller.CallAsync(new object[] {schemaID, name}, resultHandler, errorHandler);
        }

        public void SetSectionObjectImage(Guid? imageID, string data, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSectionObjectImageCaller.CallAsync(new object[] {imageID, data}, resultHandler, errorHandler);
        }

        public void SetSectionObjects(Guid? schemaID, HashSet<RestaurantSectionObject> objects, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSectionObjectsCaller.CallAsync(new object[] {schemaID, objects}, resultHandler, errorHandler);
        }

        public void SetSectionSchema(Guid? sectionID, Guid? schemaID, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSectionSchemaCaller.CallAsync(new object[] {sectionID, schemaID}, resultHandler, errorHandler);
        }

        public void SetSectionSize(Guid? schemaID, int width, int height, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSectionSizeCaller.CallAsync(new object[] {schemaID, width, height}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Guid?> CreateSchema(string name, Guid? sectionID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createSchemaCaller.Call<Guid?>(new object[] { name, sectionID }, asyncState, requestTimeout);
        }

        public Task<Guid?> CreateSchemaCopy(Guid? id, string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createSchemaCopyCaller.Call<Guid?>(new object[] { id, name }, asyncState, requestTimeout);
        }

        public Task<object> DeleteSchema(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteSchemaCaller.Call<object>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<string> GetSectionObjectImage(Guid? imageID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSectionObjectImageCaller.Call<string>(new object[] { imageID }, asyncState, requestTimeout);
        }

        public Task<object> SetSectionImage(Guid? schemaID, string data, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSectionImageCaller.Call<object>(new object[] { schemaID, data }, asyncState, requestTimeout);
        }

        public Task<object> SetSectionName(Guid? schemaID, string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSectionNameCaller.Call<object>(new object[] { schemaID, name }, asyncState, requestTimeout);
        }

        public Task<object> SetSectionObjectImage(Guid? imageID, string data, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSectionObjectImageCaller.Call<object>(new object[] { imageID, data }, asyncState, requestTimeout);
        }

        public Task<object> SetSectionObjects(Guid? schemaID, HashSet<RestaurantSectionObject> objects, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSectionObjectsCaller.Call<object>(new object[] { schemaID, objects }, asyncState, requestTimeout);
        }

        public Task<object> SetSectionSchema(Guid? sectionID, Guid? schemaID, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSectionSchemaCaller.Call<object>(new object[] { sectionID, schemaID }, asyncState, requestTimeout);
        }

        public Task<object> SetSectionSize(Guid? schemaID, int width, int height, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSectionSizeCaller.Call<object>(new object[] { schemaID, width, height }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DBMaintenanceService : IDBMaintenanceService
    {
        private readonly RemoteMethodCaller autoBackupNowCaller;
        private readonly RemoteMethodCaller cleanEventsCaller;
        private readonly RemoteMethodCaller clearDbCaller;
        private readonly RemoteMethodCaller clearLogCaller;
        private readonly RemoteMethodCaller getBackupsListCaller;
        private readonly RemoteMethodCaller getDBInfoCaller;
        private readonly RemoteMethodCaller getDBMaintenanceCurrentTaskCaller;
        private readonly RemoteMethodCaller getLastBackupStatusCaller;
        private readonly RemoteMethodCaller isAutobackupsEnabledCaller;
        private readonly RemoteMethodCaller manualBackupNowCaller;
        private readonly RemoteMethodCaller rebuildIndexesCaller;
        private readonly RemoteMethodCaller removeBackupCaller;
        private readonly RemoteMethodCaller restartDBCaller;
        private readonly RemoteMethodCaller setDbMaintenanceSettingsCaller;

        internal DBMaintenanceService()
        {

            autoBackupNowCaller = new RemoteMethodCaller("dbmaintenance", "autoBackupNow");

            cleanEventsCaller = new RemoteMethodCaller("dbmaintenance", "cleanEvents");

            clearDbCaller = new RemoteMethodCaller("dbmaintenance", "clearDb");

            clearLogCaller = new RemoteMethodCaller("dbmaintenance", "clearLog");
            clearLogCaller.AddArg("simpleRecoveryModel", typeof(bool));

            getBackupsListCaller = new RemoteMethodCaller("dbmaintenance", "getBackupsList");

            getDBInfoCaller = new RemoteMethodCaller("dbmaintenance", "getDBInfo");

            getDBMaintenanceCurrentTaskCaller = new RemoteMethodCaller("dbmaintenance", "getDBMaintenanceCurrentTask");

            getLastBackupStatusCaller = new RemoteMethodCaller("dbmaintenance", "getLastBackupStatus");

            isAutobackupsEnabledCaller = new RemoteMethodCaller("dbmaintenance", "isAutobackupsEnabled");

            manualBackupNowCaller = new RemoteMethodCaller("dbmaintenance", "manualBackupNow");

            rebuildIndexesCaller = new RemoteMethodCaller("dbmaintenance", "rebuildIndexes");
            rebuildIndexesCaller.AddArg("runInBulkLoggedRecoveryModel", typeof(bool));

            removeBackupCaller = new RemoteMethodCaller("dbmaintenance", "removeBackup");
            removeBackupCaller.AddArg("name", typeof(string));

            restartDBCaller = new RemoteMethodCaller("dbmaintenance", "restartDB");

            setDbMaintenanceSettingsCaller = new RemoteMethodCaller("dbmaintenance", "setDbMaintenanceSettings");
            setDbMaintenanceSettingsCaller.AddArg("backupSettings", typeof(BackupSettings));
            setDbMaintenanceSettingsCaller.AddArg("cleanEventsSettings", typeof(CleanEventsSettings));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AutoBackupNow()
        {
            return autoBackupNowCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> CleanEvents()
        {
            return cleanEventsCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> ClearDb()
        {
            return clearDbCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> ClearLog(bool simpleRecoveryModel)
        {
            return clearLogCaller.CreateCall<object>(new object[] { simpleRecoveryModel });
        }

        public IServiceMethodCall<Dictionary<string, DBBackupInfo>> GetBackupsList()
        {
            return getBackupsListCaller.CreateCall<Dictionary<string, DBBackupInfo>>(new object[] {  });
        }

        public IServiceMethodCall<Dictionary<DBInfoParameter, string>> GetDBInfo()
        {
            return getDBInfoCaller.CreateCall<Dictionary<DBInfoParameter, string>>(new object[] {  });
        }

        public IServiceMethodCall<DBMaintenanceTaskType> GetDBMaintenanceCurrentTask()
        {
            return getDBMaintenanceCurrentTaskCaller.CreateCall<DBMaintenanceTaskType>(new object[] {  });
        }

        public IServiceMethodCall<DbLastBackupStatus> GetLastBackupStatus()
        {
            return getLastBackupStatusCaller.CreateCall<DbLastBackupStatus>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsAutobackupsEnabled()
        {
            return isAutobackupsEnabledCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<object> ManualBackupNow()
        {
            return manualBackupNowCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> RebuildIndexes(bool runInBulkLoggedRecoveryModel)
        {
            return rebuildIndexesCaller.CreateCall<object>(new object[] { runInBulkLoggedRecoveryModel });
        }

        public IServiceMethodCall<object> RemoveBackup(string name)
        {
            return removeBackupCaller.CreateCall<object>(new object[] { name });
        }

        public IServiceMethodCall<object> RestartDB()
        {
            return restartDBCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> SetDbMaintenanceSettings(BackupSettings backupSettings, CleanEventsSettings cleanEventsSettings)
        {
            return setDbMaintenanceSettingsCaller.CreateCall<object>(new object[] { backupSettings, cleanEventsSettings });
        }

        #endregion

        #region asynchronous version
        public void AutoBackupNow(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            autoBackupNowCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void CleanEvents(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            cleanEventsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void ClearDb(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            clearDbCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void ClearLog(bool simpleRecoveryModel, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            clearLogCaller.CallAsync(new object[] {simpleRecoveryModel}, resultHandler, errorHandler);
        }

        public void GetBackupsList(AsyncErrorHandler errorHandler, Action<Dictionary<string, DBBackupInfo>> resultHandler)
        {
            getBackupsListCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetDBInfo(AsyncErrorHandler errorHandler, Action<Dictionary<DBInfoParameter, string>> resultHandler)
        {
            getDBInfoCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetDBMaintenanceCurrentTask(AsyncErrorHandler errorHandler, Action<DBMaintenanceTaskType> resultHandler)
        {
            getDBMaintenanceCurrentTaskCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetLastBackupStatus(AsyncErrorHandler errorHandler, Action<DbLastBackupStatus> resultHandler)
        {
            getLastBackupStatusCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsAutobackupsEnabled(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isAutobackupsEnabledCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void ManualBackupNow(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            manualBackupNowCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void RebuildIndexes(bool runInBulkLoggedRecoveryModel, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            rebuildIndexesCaller.CallAsync(new object[] {runInBulkLoggedRecoveryModel}, resultHandler, errorHandler);
        }

        public void RemoveBackup(string name, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            removeBackupCaller.CallAsync(new object[] {name}, resultHandler, errorHandler);
        }

        public void RestartDB(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            restartDBCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SetDbMaintenanceSettings(BackupSettings backupSettings, CleanEventsSettings cleanEventsSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDbMaintenanceSettingsCaller.CallAsync(new object[] {backupSettings, cleanEventsSettings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AutoBackupNow([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return autoBackupNowCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> CleanEvents([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return cleanEventsCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> ClearDb([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return clearDbCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> ClearLog(bool simpleRecoveryModel, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return clearLogCaller.Call<object>(new object[] { simpleRecoveryModel }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, DBBackupInfo>> GetBackupsList([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBackupsListCaller.Call<Dictionary<string, DBBackupInfo>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<Dictionary<DBInfoParameter, string>> GetDBInfo([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDBInfoCaller.Call<Dictionary<DBInfoParameter, string>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<DBMaintenanceTaskType> GetDBMaintenanceCurrentTask([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDBMaintenanceCurrentTaskCaller.Call<DBMaintenanceTaskType>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<DbLastBackupStatus> GetLastBackupStatus([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLastBackupStatusCaller.Call<DbLastBackupStatus>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsAutobackupsEnabled([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isAutobackupsEnabledCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> ManualBackupNow([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return manualBackupNowCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> RebuildIndexes(bool runInBulkLoggedRecoveryModel, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return rebuildIndexesCaller.Call<object>(new object[] { runInBulkLoggedRecoveryModel }, asyncState, requestTimeout);
        }

        public Task<object> RemoveBackup(string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeBackupCaller.Call<object>(new object[] { name }, asyncState, requestTimeout);
        }

        public Task<object> RestartDB([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return restartDBCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SetDbMaintenanceSettings(BackupSettings backupSettings, CleanEventsSettings cleanEventsSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDbMaintenanceSettingsCaller.Call<object>(new object[] { backupSettings, cleanEventsSettings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryTerminalService : IDeliveryTerminalService
    {
        private readonly RemoteMethodCaller getAllDeliveryTerminalsCaller;
        private readonly RemoteMethodCaller saveDeliveryTerminalCaller;
        private readonly RemoteMethodCaller setDeliveryTerminalDeletedCaller;
        private readonly RemoteMethodCaller setDeliveryTerminalRegisteredCaller;

        internal DeliveryTerminalService()
        {

            getAllDeliveryTerminalsCaller = new RemoteMethodCaller("deliveryTerminal", "getAllDeliveryTerminals");
            getAllDeliveryTerminalsCaller.AddArg("revision", typeof(int));

            saveDeliveryTerminalCaller = new RemoteMethodCaller("deliveryTerminal", "saveDeliveryTerminal");
            saveDeliveryTerminalCaller.AddArg("terminal", typeof(ByValue<DeliveryTerminal>));

            setDeliveryTerminalDeletedCaller = new RemoteMethodCaller("deliveryTerminal", "setDeliveryTerminalDeleted");
            setDeliveryTerminalDeletedCaller.AddArg("deliveryTerminalId", typeof(Guid?));
            setDeliveryTerminalDeletedCaller.AddArg("deleted", typeof(bool));

            setDeliveryTerminalRegisteredCaller = new RemoteMethodCaller("deliveryTerminal", "setDeliveryTerminalRegistered");
            setDeliveryTerminalRegisteredCaller.AddArg("deliveryTerminalId", typeof(Guid?));
            setDeliveryTerminalRegisteredCaller.AddArg("registered", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<DeliveryTerminal>> GetAllDeliveryTerminals(int revision)
        {
            return getAllDeliveryTerminalsCaller.CreateCall<ICollection<DeliveryTerminal>>(new object[] { revision });
        }

        public IServiceMethodCall<object> SaveDeliveryTerminal(ByValue<DeliveryTerminal> terminal)
        {
            return saveDeliveryTerminalCaller.CreateCall<object>(new object[] { terminal });
        }

        public IServiceMethodCall<object> SetDeliveryTerminalDeleted(Guid? deliveryTerminalId, bool deleted)
        {
            return setDeliveryTerminalDeletedCaller.CreateCall<object>(new object[] { deliveryTerminalId, deleted });
        }

        public IServiceMethodCall<object> SetDeliveryTerminalRegistered(Guid? deliveryTerminalId, bool registered)
        {
            return setDeliveryTerminalRegisteredCaller.CreateCall<object>(new object[] { deliveryTerminalId, registered });
        }

        #endregion

        #region asynchronous version
        public void GetAllDeliveryTerminals(int revision, AsyncErrorHandler errorHandler, Action<ICollection<DeliveryTerminal>> resultHandler)
        {
            getAllDeliveryTerminalsCaller.CallAsync(new object[] {revision}, resultHandler, errorHandler);
        }

        public void SaveDeliveryTerminal(ByValue<DeliveryTerminal> terminal, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveDeliveryTerminalCaller.CallAsync(new object[] {terminal}, resultHandler, errorHandler);
        }

        public void SetDeliveryTerminalDeleted(Guid? deliveryTerminalId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeliveryTerminalDeletedCaller.CallAsync(new object[] {deliveryTerminalId, deleted}, resultHandler, errorHandler);
        }

        public void SetDeliveryTerminalRegistered(Guid? deliveryTerminalId, bool registered, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeliveryTerminalRegisteredCaller.CallAsync(new object[] {deliveryTerminalId, registered}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<DeliveryTerminal>> GetAllDeliveryTerminals(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllDeliveryTerminalsCaller.Call<ICollection<DeliveryTerminal>>(new object[] { revision }, asyncState, requestTimeout);
        }

        public Task<object> SaveDeliveryTerminal(ByValue<DeliveryTerminal> terminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveDeliveryTerminalCaller.Call<object>(new object[] { terminal }, asyncState, requestTimeout);
        }

        public Task<object> SetDeliveryTerminalDeleted(Guid? deliveryTerminalId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeliveryTerminalDeletedCaller.Call<object>(new object[] { deliveryTerminalId, deleted }, asyncState, requestTimeout);
        }

        public Task<object> SetDeliveryTerminalRegistered(Guid? deliveryTerminalId, bool registered, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeliveryTerminalRegisteredCaller.Call<object>(new object[] { deliveryTerminalId, registered }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EdiService : IEdiService
    {
        private readonly RemoteMethodCaller buildInternalPurchasesDeviationsReportCaller;
        private readonly RemoteMethodCaller buildPurchasesDeviationsReportCaller;
        private readonly RemoteMethodCaller cancelOrdersCaller;
        private readonly RemoteMethodCaller confirmOrdersManuallyCaller;
        private readonly RemoteMethodCaller createExternalEdiSystemCaller;
        private readonly RemoteMethodCaller createInvoiceCaller;
        private readonly RemoteMethodCaller deleteOrRestoreEdiSystemsCaller;
        private readonly RemoteMethodCaller despatchOrdersManuallyCaller;
        private readonly RemoteMethodCaller executeOrdersManuallyCaller;
        private readonly RemoteMethodCaller sendOrdersCaller;
        private readonly RemoteMethodCaller testKonturFtpConnectionCaller;
        private readonly RemoteMethodCaller updateExternalEdiSystemCaller;

        internal EdiService()
        {

            buildInternalPurchasesDeviationsReportCaller = new RemoteMethodCaller("edi", "buildInternalPurchasesDeviationsReport");
            buildInternalPurchasesDeviationsReportCaller.AddArg("dateFrom", typeof(DateTime?));
            buildInternalPurchasesDeviationsReportCaller.AddArg("dateTo", typeof(DateTime?));
            buildInternalPurchasesDeviationsReportCaller.AddArg("supplierFilter", typeof(HashSet<DepartmentEntity>));
            buildInternalPurchasesDeviationsReportCaller.AddArg("storeFilter", typeof(HashSet<Store>));
            buildInternalPurchasesDeviationsReportCaller.AddArg("franchiseSuppliers", typeof(HashSet<User>));
            buildInternalPurchasesDeviationsReportCaller.AddArg("deviationFilter", typeof(HashSet<OrderDeviationType>));

            buildPurchasesDeviationsReportCaller = new RemoteMethodCaller("edi", "buildPurchasesDeviationsReport");
            buildPurchasesDeviationsReportCaller.AddArg("dateFrom", typeof(DateTime?));
            buildPurchasesDeviationsReportCaller.AddArg("dateTo", typeof(DateTime?));
            buildPurchasesDeviationsReportCaller.AddArg("supplierFilter", typeof(HashSet<User>));
            buildPurchasesDeviationsReportCaller.AddArg("storeFilter", typeof(HashSet<Store>));
            buildPurchasesDeviationsReportCaller.AddArg("deviationFilter", typeof(HashSet<OrderDeviationType>));

            cancelOrdersCaller = new RemoteMethodCaller("edi", "cancelOrders");
            cancelOrdersCaller.AddArg("orders", typeof(ICollection<EdiOrderDocument>));

            confirmOrdersManuallyCaller = new RemoteMethodCaller("edi", "confirmOrdersManually");
            confirmOrdersManuallyCaller.AddArg("orders", typeof(ICollection<EdiOrderDocument>));

            createExternalEdiSystemCaller = new RemoteMethodCaller("edi", "createExternalEdiSystem");
            createExternalEdiSystemCaller.AddArg("id", typeof(Guid?));
            createExternalEdiSystemCaller.AddArg("name", typeof(string));

            createInvoiceCaller = new RemoteMethodCaller("edi", "createInvoice");
            createInvoiceCaller.AddArg("ediOrder", typeof(EdiOrderDocument));

            deleteOrRestoreEdiSystemsCaller = new RemoteMethodCaller("edi", "deleteOrRestoreEdiSystems");
            deleteOrRestoreEdiSystemsCaller.AddArg("ediSystems", typeof(ICollection<Guid>));
            deleteOrRestoreEdiSystemsCaller.AddArg("delete", typeof(bool));

            despatchOrdersManuallyCaller = new RemoteMethodCaller("edi", "despatchOrdersManually");
            despatchOrdersManuallyCaller.AddArg("orders", typeof(ICollection<EdiOrderDocument>));
            despatchOrdersManuallyCaller.AddArg("createInvoice", typeof(bool));

            executeOrdersManuallyCaller = new RemoteMethodCaller("edi", "executeOrdersManually");
            executeOrdersManuallyCaller.AddArg("orders", typeof(ICollection<EdiOrderDocument>));

            sendOrdersCaller = new RemoteMethodCaller("edi", "sendOrders");
            sendOrdersCaller.AddArg("orders", typeof(ICollection<EdiOrderDocument>));

            testKonturFtpConnectionCaller = new RemoteMethodCaller("edi", "testKonturFtpConnection");
            testKonturFtpConnectionCaller.AddArg("host", typeof(string));
            testKonturFtpConnectionCaller.AddArg("port", typeof(int?));
            testKonturFtpConnectionCaller.AddArg("user", typeof(string));
            testKonturFtpConnectionCaller.AddArg("passwd", typeof(string));

            updateExternalEdiSystemCaller = new RemoteMethodCaller("edi", "updateExternalEdiSystem");
            updateExternalEdiSystemCaller.AddArg("id", typeof(Guid?));
            updateExternalEdiSystemCaller.AddArg("name", typeof(string));
            updateExternalEdiSystemCaller.AddArg("delete", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<List<PurchasesDeviationsReportInternalItem>> BuildInternalPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> supplierFilter, HashSet<Store> storeFilter, HashSet<User> franchiseSuppliers, HashSet<OrderDeviationType> deviationFilter)
        {
            return buildInternalPurchasesDeviationsReportCaller.CreateCall<List<PurchasesDeviationsReportInternalItem>>(new object[] { dateFrom, dateTo, supplierFilter, storeFilter, franchiseSuppliers, deviationFilter });
        }

        public IServiceMethodCall<ICollection<PurchasesDeviationsReportItem>> BuildPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> supplierFilter, HashSet<Store> storeFilter, HashSet<OrderDeviationType> deviationFilter)
        {
            return buildPurchasesDeviationsReportCaller.CreateCall<ICollection<PurchasesDeviationsReportItem>>(new object[] { dateFrom, dateTo, supplierFilter, storeFilter, deviationFilter });
        }

        public IServiceMethodCall<object> CancelOrders(ICollection<EdiOrderDocument> orders)
        {
            return cancelOrdersCaller.CreateCall<object>(new object[] { orders });
        }

        public IServiceMethodCall<object> ConfirmOrdersManually(ICollection<EdiOrderDocument> orders)
        {
            return confirmOrdersManuallyCaller.CreateCall<object>(new object[] { orders });
        }

        public IServiceMethodCall<object> CreateExternalEdiSystem(Guid? id, string name)
        {
            return createExternalEdiSystemCaller.CreateCall<object>(new object[] { id, name });
        }

        public IServiceMethodCall<EdiIncomingInvoice> CreateInvoice(EdiOrderDocument ediOrder)
        {
            return createInvoiceCaller.CreateCall<EdiIncomingInvoice>(new object[] { ediOrder });
        }

        public IServiceMethodCall<object> DeleteOrRestoreEdiSystems(ICollection<Guid> ediSystems, bool delete)
        {
            return deleteOrRestoreEdiSystemsCaller.CreateCall<object>(new object[] { ediSystems, delete });
        }

        public IServiceMethodCall<object> DespatchOrdersManually(ICollection<EdiOrderDocument> orders, bool createInvoice)
        {
            return despatchOrdersManuallyCaller.CreateCall<object>(new object[] { orders, createInvoice });
        }

        public IServiceMethodCall<object> ExecuteOrdersManually(ICollection<EdiOrderDocument> orders)
        {
            return executeOrdersManuallyCaller.CreateCall<object>(new object[] { orders });
        }

        public IServiceMethodCall<object> SendOrders(ICollection<EdiOrderDocument> orders)
        {
            return sendOrdersCaller.CreateCall<object>(new object[] { orders });
        }

        public IServiceMethodCall<object> TestKonturFtpConnection(string host, int? port, string user, string passwd)
        {
            return testKonturFtpConnectionCaller.CreateCall<object>(new object[] { host, port, user, passwd });
        }

        public IServiceMethodCall<object> UpdateExternalEdiSystem(Guid? id, string name, bool delete)
        {
            return updateExternalEdiSystemCaller.CreateCall<object>(new object[] { id, name, delete });
        }

        #endregion

        #region asynchronous version
        public void BuildInternalPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> supplierFilter, HashSet<Store> storeFilter, HashSet<User> franchiseSuppliers, HashSet<OrderDeviationType> deviationFilter, AsyncErrorHandler errorHandler, Action<List<PurchasesDeviationsReportInternalItem>> resultHandler)
        {
            buildInternalPurchasesDeviationsReportCaller.CallAsync(new object[] {dateFrom, dateTo, supplierFilter, storeFilter, franchiseSuppliers, deviationFilter}, resultHandler, errorHandler);
        }

        public void BuildPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> supplierFilter, HashSet<Store> storeFilter, HashSet<OrderDeviationType> deviationFilter, AsyncErrorHandler errorHandler, Action<ICollection<PurchasesDeviationsReportItem>> resultHandler)
        {
            buildPurchasesDeviationsReportCaller.CallAsync(new object[] {dateFrom, dateTo, supplierFilter, storeFilter, deviationFilter}, resultHandler, errorHandler);
        }

        public void CancelOrders(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            cancelOrdersCaller.CallAsync(new object[] {orders}, resultHandler, errorHandler);
        }

        public void ConfirmOrdersManually(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            confirmOrdersManuallyCaller.CallAsync(new object[] {orders}, resultHandler, errorHandler);
        }

        public void CreateExternalEdiSystem(Guid? id, string name, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createExternalEdiSystemCaller.CallAsync(new object[] {id, name}, resultHandler, errorHandler);
        }

        public void CreateInvoice(EdiOrderDocument ediOrder, AsyncErrorHandler errorHandler, Action<EdiIncomingInvoice> resultHandler)
        {
            createInvoiceCaller.CallAsync(new object[] {ediOrder}, resultHandler, errorHandler);
        }

        public void DeleteOrRestoreEdiSystems(ICollection<Guid> ediSystems, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteOrRestoreEdiSystemsCaller.CallAsync(new object[] {ediSystems, delete}, resultHandler, errorHandler);
        }

        public void DespatchOrdersManually(ICollection<EdiOrderDocument> orders, bool createInvoice, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            despatchOrdersManuallyCaller.CallAsync(new object[] {orders, createInvoice}, resultHandler, errorHandler);
        }

        public void ExecuteOrdersManually(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            executeOrdersManuallyCaller.CallAsync(new object[] {orders}, resultHandler, errorHandler);
        }

        public void SendOrders(ICollection<EdiOrderDocument> orders, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            sendOrdersCaller.CallAsync(new object[] {orders}, resultHandler, errorHandler);
        }

        public void TestKonturFtpConnection(string host, int? port, string user, string passwd, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            testKonturFtpConnectionCaller.CallAsync(new object[] {host, port, user, passwd}, resultHandler, errorHandler);
        }

        public void UpdateExternalEdiSystem(Guid? id, string name, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateExternalEdiSystemCaller.CallAsync(new object[] {id, name, delete}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<List<PurchasesDeviationsReportInternalItem>> BuildInternalPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<DepartmentEntity> supplierFilter, HashSet<Store> storeFilter, HashSet<User> franchiseSuppliers, HashSet<OrderDeviationType> deviationFilter, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildInternalPurchasesDeviationsReportCaller.Call<List<PurchasesDeviationsReportInternalItem>>(new object[] { dateFrom, dateTo, supplierFilter, storeFilter, franchiseSuppliers, deviationFilter }, asyncState, requestTimeout);
        }

        public Task<ICollection<PurchasesDeviationsReportItem>> BuildPurchasesDeviationsReport(DateTime? dateFrom, DateTime? dateTo, HashSet<User> supplierFilter, HashSet<Store> storeFilter, HashSet<OrderDeviationType> deviationFilter, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildPurchasesDeviationsReportCaller.Call<ICollection<PurchasesDeviationsReportItem>>(new object[] { dateFrom, dateTo, supplierFilter, storeFilter, deviationFilter }, asyncState, requestTimeout);
        }

        public Task<object> CancelOrders(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return cancelOrdersCaller.Call<object>(new object[] { orders }, asyncState, requestTimeout);
        }

        public Task<object> ConfirmOrdersManually(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return confirmOrdersManuallyCaller.Call<object>(new object[] { orders }, asyncState, requestTimeout);
        }

        public Task<object> CreateExternalEdiSystem(Guid? id, string name, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createExternalEdiSystemCaller.Call<object>(new object[] { id, name }, asyncState, requestTimeout);
        }

        public Task<EdiIncomingInvoice> CreateInvoice(EdiOrderDocument ediOrder, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createInvoiceCaller.Call<EdiIncomingInvoice>(new object[] { ediOrder }, asyncState, requestTimeout);
        }

        public Task<object> DeleteOrRestoreEdiSystems(ICollection<Guid> ediSystems, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteOrRestoreEdiSystemsCaller.Call<object>(new object[] { ediSystems, delete }, asyncState, requestTimeout);
        }

        public Task<object> DespatchOrdersManually(ICollection<EdiOrderDocument> orders, bool createInvoice, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return despatchOrdersManuallyCaller.Call<object>(new object[] { orders, createInvoice }, asyncState, requestTimeout);
        }

        public Task<object> ExecuteOrdersManually(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return executeOrdersManuallyCaller.Call<object>(new object[] { orders }, asyncState, requestTimeout);
        }

        public Task<object> SendOrders(ICollection<EdiOrderDocument> orders, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendOrdersCaller.Call<object>(new object[] { orders }, asyncState, requestTimeout);
        }

        public Task<object> TestKonturFtpConnection(string host, int? port, string user, string passwd, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return testKonturFtpConnectionCaller.Call<object>(new object[] { host, port, user, passwd }, asyncState, requestTimeout);
        }

        public Task<object> UpdateExternalEdiSystem(Guid? id, string name, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateExternalEdiSystemCaller.Call<object>(new object[] { id, name, delete }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisBalanceService : IEgaisBalanceService
    {
        private readonly RemoteMethodCaller saveNewBalanceRequestCaller;
        private readonly RemoteMethodCaller sendBalanceRequestCaller;

        internal EgaisBalanceService()
        {

            saveNewBalanceRequestCaller = new RemoteMethodCaller("egaisBalances", "saveNewBalanceRequest");
            saveNewBalanceRequestCaller.AddArg("newDocument", typeof(EgaisBalanceDocument));

            sendBalanceRequestCaller = new RemoteMethodCaller("egaisBalances", "sendBalanceRequest");
            sendBalanceRequestCaller.AddArg("documentId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<DocumentValidationResult> SaveNewBalanceRequest(EgaisBalanceDocument newDocument)
        {
            return saveNewBalanceRequestCaller.CreateCall<DocumentValidationResult>(new object[] { newDocument });
        }

        public IServiceMethodCall<object> SendBalanceRequest(Guid? documentId)
        {
            return sendBalanceRequestCaller.CreateCall<object>(new object[] { documentId });
        }

        #endregion

        #region asynchronous version
        public void SaveNewBalanceRequest(EgaisBalanceDocument newDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            saveNewBalanceRequestCaller.CallAsync(new object[] {newDocument}, resultHandler, errorHandler);
        }

        public void SendBalanceRequest(Guid? documentId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            sendBalanceRequestCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DocumentValidationResult> SaveNewBalanceRequest(EgaisBalanceDocument newDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveNewBalanceRequestCaller.Call<DocumentValidationResult>(new object[] { newDocument }, asyncState, requestTimeout);
        }

        public Task<object> SendBalanceRequest(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendBalanceRequestCaller.Call<object>(new object[] { documentId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisDeclarationService : IEgaisDeclarationService
    {
        private readonly RemoteMethodCaller buildAlcoholSalesReportFromEgaisShopWriteoffCaller;

        internal EgaisDeclarationService()
        {

            buildAlcoholSalesReportFromEgaisShopWriteoffCaller = new RemoteMethodCaller("egaisDeclaration", "buildAlcoholSalesReportFromEgaisShopWriteoff");
            buildAlcoholSalesReportFromEgaisShopWriteoffCaller.AddArg("dateFrom", typeof(DateTime?));
            buildAlcoholSalesReportFromEgaisShopWriteoffCaller.AddArg("dateTo", typeof(DateTime?));
            buildAlcoholSalesReportFromEgaisShopWriteoffCaller.AddArg("egaisShopWriteoffIds", typeof(HashSet<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<AlcoholJournal> BuildAlcoholSalesReportFromEgaisShopWriteoff(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> egaisShopWriteoffIds)
        {
            return buildAlcoholSalesReportFromEgaisShopWriteoffCaller.CreateCall<AlcoholJournal>(new object[] { dateFrom, dateTo, egaisShopWriteoffIds });
        }

        #endregion

        #region asynchronous version
        public void BuildAlcoholSalesReportFromEgaisShopWriteoff(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> egaisShopWriteoffIds, AsyncErrorHandler errorHandler, Action<AlcoholJournal> resultHandler)
        {
            buildAlcoholSalesReportFromEgaisShopWriteoffCaller.CallAsync(new object[] {dateFrom, dateTo, egaisShopWriteoffIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<AlcoholJournal> BuildAlcoholSalesReportFromEgaisShopWriteoff(DateTime? dateFrom, DateTime? dateTo, HashSet<Guid> egaisShopWriteoffIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildAlcoholSalesReportFromEgaisShopWriteoffCaller.Call<AlcoholJournal>(new object[] { dateFrom, dateTo, egaisShopWriteoffIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisDocumentsFrontService : IEgaisDocumentsFrontService
    {
        private readonly RemoteMethodCaller getEgaisDocumentForFrontCaller;
        private readonly RemoteMethodCaller getEgaisDocumentsForFrontCaller;
        private readonly RemoteMethodCaller saveOrUpdateEgaisMarkConfirmFromFrontCaller;

        internal EgaisDocumentsFrontService()
        {

            getEgaisDocumentForFrontCaller = new RemoteMethodCaller("egaisDocumentsFront", "getEgaisDocumentForFront");
            getEgaisDocumentForFrontCaller.AddArg("documentType", typeof(EgaisDocumentTypes));
            getEgaisDocumentForFrontCaller.AddArg("id", typeof(Guid?));

            getEgaisDocumentsForFrontCaller = new RemoteMethodCaller("egaisDocumentsFront", "getEgaisDocumentsForFront");
            getEgaisDocumentsForFrontCaller.AddArg("connections", typeof(ICollection<string>));

            saveOrUpdateEgaisMarkConfirmFromFrontCaller = new RemoteMethodCaller("egaisDocumentsFront", "saveOrUpdateEgaisMarkConfirmFromFront");
            saveOrUpdateEgaisMarkConfirmFromFrontCaller.AddArg("newDocument", typeof(EgaisMarkConfirm));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<EgaisAbstractDocument>> GetEgaisDocumentForFront(EgaisDocumentTypes documentType, Guid? id)
        {
            return getEgaisDocumentForFrontCaller.CreateCall<ICollection<EgaisAbstractDocument>>(new object[] { documentType, id });
        }

        public IServiceMethodCall<List<EgaisAbstractDocument>> GetEgaisDocumentsForFront(ICollection<string> connections)
        {
            return getEgaisDocumentsForFrontCaller.CreateCall<List<EgaisAbstractDocument>>(new object[] { connections });
        }

        public IServiceMethodCall<DocumentValidationResult> SaveOrUpdateEgaisMarkConfirmFromFront(EgaisMarkConfirm newDocument)
        {
            return saveOrUpdateEgaisMarkConfirmFromFrontCaller.CreateCall<DocumentValidationResult>(new object[] { newDocument });
        }

        #endregion

        #region asynchronous version
        public void GetEgaisDocumentForFront(EgaisDocumentTypes documentType, Guid? id, AsyncErrorHandler errorHandler, Action<ICollection<EgaisAbstractDocument>> resultHandler)
        {
            getEgaisDocumentForFrontCaller.CallAsync(new object[] {documentType, id}, resultHandler, errorHandler);
        }

        public void GetEgaisDocumentsForFront(ICollection<string> connections, AsyncErrorHandler errorHandler, Action<List<EgaisAbstractDocument>> resultHandler)
        {
            getEgaisDocumentsForFrontCaller.CallAsync(new object[] {connections}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateEgaisMarkConfirmFromFront(EgaisMarkConfirm newDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            saveOrUpdateEgaisMarkConfirmFromFrontCaller.CallAsync(new object[] {newDocument}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<EgaisAbstractDocument>> GetEgaisDocumentForFront(EgaisDocumentTypes documentType, Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisDocumentForFrontCaller.Call<ICollection<EgaisAbstractDocument>>(new object[] { documentType, id }, asyncState, requestTimeout);
        }

        public Task<List<EgaisAbstractDocument>> GetEgaisDocumentsForFront(ICollection<string> connections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisDocumentsForFrontCaller.Call<List<EgaisAbstractDocument>>(new object[] { connections }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> SaveOrUpdateEgaisMarkConfirmFromFront(EgaisMarkConfirm newDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateEgaisMarkConfirmFromFrontCaller.Call<DocumentValidationResult>(new object[] { newDocument }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisDocumentsService : IEgaisDocumentsService
    {
        private readonly RemoteMethodCaller createAndSendQueryResendInvoicesCaller;
        private readonly RemoteMethodCaller deleteDocumentCaller;
        private readonly RemoteMethodCaller getEgaisDocumentCaller;
        private readonly RemoteMethodCaller getEgaisDocumentByRegIdCaller;
        private readonly RemoteMethodCaller getEgaisDocumentsCaller;
        private readonly RemoteMethodCaller getEgaisMarkConfirmByInvoiceIdCaller;
        private readonly RemoteMethodCaller saveOrUpdateDocumentCaller;
        private readonly RemoteMethodCaller sendDocumentCaller;
        private readonly RemoteMethodCaller sendNewQueryOrganizationRequestCaller;
        private readonly RemoteMethodCaller sendNewSetTtnVersionRequestCaller;
        private readonly RemoteMethodCaller sendQueryResendInvoiceDocumentCaller;
        private readonly RemoteMethodCaller startDocumentUpdatesCaller;
        private readonly RemoteMethodCaller stopDocumentUpdatesCaller;
        private readonly RemoteMethodCaller unDeleteDocumentCaller;

        internal EgaisDocumentsService()
        {

            createAndSendQueryResendInvoicesCaller = new RemoteMethodCaller("egaisDocuments", "createAndSendQueryResendInvoices");
            createAndSendQueryResendInvoicesCaller.AddArg("sourceRarId", typeof(string));
            createAndSendQueryResendInvoicesCaller.AddArg("wbRegIds", typeof(HashSet<string>));
            createAndSendQueryResendInvoicesCaller.AddArg("skipValidation", typeof(bool));

            deleteDocumentCaller = new RemoteMethodCaller("egaisDocuments", "deleteDocument");
            deleteDocumentCaller.AddArg("documentId", typeof(Guid?));

            getEgaisDocumentCaller = new RemoteMethodCaller("egaisDocuments", "getEgaisDocument");
            getEgaisDocumentCaller.AddArg("documentType", typeof(EgaisDocumentTypes));
            getEgaisDocumentCaller.AddArg("id", typeof(Guid?));

            getEgaisDocumentByRegIdCaller = new RemoteMethodCaller("egaisDocuments", "getEgaisDocumentByRegId");
            getEgaisDocumentByRegIdCaller.AddArg("documentType", typeof(EgaisDocumentTypes));
            getEgaisDocumentByRegIdCaller.AddArg("id", typeof(string));

            getEgaisDocumentsCaller = new RemoteMethodCaller("egaisDocuments", "getEgaisDocuments");
            getEgaisDocumentsCaller.AddArg("dateFrom", typeof(DateTime?));
            getEgaisDocumentsCaller.AddArg("dateTo", typeof(DateTime?));
            getEgaisDocumentsCaller.AddArg("includeDeleted", typeof(bool));
            getEgaisDocumentsCaller.AddArg("departmentIds", typeof(ICollection<Guid>));
            getEgaisDocumentsCaller.AddArg("connections", typeof(ICollection<EgaisConnectionSettings>));

            getEgaisMarkConfirmByInvoiceIdCaller = new RemoteMethodCaller("egaisDocuments", "getEgaisMarkConfirmByInvoiceId");
            getEgaisMarkConfirmByInvoiceIdCaller.AddArg("id", typeof(Guid?));

            saveOrUpdateDocumentCaller = new RemoteMethodCaller("egaisDocuments", "saveOrUpdateDocument");
            saveOrUpdateDocumentCaller.AddArg("newDocument", typeof(EgaisAbstractInternalDocument));

            sendDocumentCaller = new RemoteMethodCaller("egaisDocuments", "sendDocument");
            sendDocumentCaller.AddArg("documentId", typeof(Guid?));

            sendNewQueryOrganizationRequestCaller = new RemoteMethodCaller("egaisDocuments", "sendNewQueryOrganizationRequest");
            sendNewQueryOrganizationRequestCaller.AddArg("sourceRarId", typeof(string));
            sendNewQueryOrganizationRequestCaller.AddArg("apiVersion", typeof(EgaisApiVersion));
            sendNewQueryOrganizationRequestCaller.AddArg("parameters", typeof(Dictionary<string, string>));

            sendNewSetTtnVersionRequestCaller = new RemoteMethodCaller("egaisDocuments", "sendNewSetTtnVersionRequest");
            sendNewSetTtnVersionRequestCaller.AddArg("sourceRarId", typeof(string));
            sendNewSetTtnVersionRequestCaller.AddArg("newWayBillVersion", typeof(EgaisApiVersion));

            sendQueryResendInvoiceDocumentCaller = new RemoteMethodCaller("egaisDocuments", "sendQueryResendInvoiceDocument");
            sendQueryResendInvoiceDocumentCaller.AddArg("documentId", typeof(Guid?));
            sendQueryResendInvoiceDocumentCaller.AddArg("skipValidation", typeof(bool));

            startDocumentUpdatesCaller = new RemoteMethodCaller("egaisDocuments", "startDocumentUpdates");
            startDocumentUpdatesCaller.AddArg("documentId", typeof(Guid?));
            startDocumentUpdatesCaller.AddArg("breakLock", typeof(bool));

            stopDocumentUpdatesCaller = new RemoteMethodCaller("egaisDocuments", "stopDocumentUpdates");
            stopDocumentUpdatesCaller.AddArg("documentId", typeof(Guid?));

            unDeleteDocumentCaller = new RemoteMethodCaller("egaisDocuments", "unDeleteDocument");
            unDeleteDocumentCaller.AddArg("documentId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<EgaisResendInvoiceSendResult> CreateAndSendQueryResendInvoices(string sourceRarId, HashSet<string> wbRegIds, bool skipValidation)
        {
            return createAndSendQueryResendInvoicesCaller.CreateCall<EgaisResendInvoiceSendResult>(new object[] { sourceRarId, wbRegIds, skipValidation });
        }

        public IServiceMethodCall<bool> DeleteDocument(Guid? documentId)
        {
            return deleteDocumentCaller.CreateCall<bool>(new object[] { documentId });
        }

        public IServiceMethodCall<EgaisAbstractDocument> GetEgaisDocument(EgaisDocumentTypes documentType, Guid? id)
        {
            return getEgaisDocumentCaller.CreateCall<EgaisAbstractDocument>(new object[] { documentType, id });
        }

        public IServiceMethodCall<EgaisAbstractDocument> GetEgaisDocumentByRegId(EgaisDocumentTypes documentType, string id)
        {
            return getEgaisDocumentByRegIdCaller.CreateCall<EgaisAbstractDocument>(new object[] { documentType, id });
        }

        public IServiceMethodCall<List<EgaisAbstractDocument>> GetEgaisDocuments(DateTime? dateFrom, DateTime? dateTo, bool includeDeleted, ICollection<Guid> departmentIds, ICollection<EgaisConnectionSettings> connections)
        {
            return getEgaisDocumentsCaller.CreateCall<List<EgaisAbstractDocument>>(new object[] { dateFrom, dateTo, includeDeleted, departmentIds, connections });
        }

        public IServiceMethodCall<ICollection<EgaisMarkConfirm>> GetEgaisMarkConfirmByInvoiceId(Guid? id)
        {
            return getEgaisMarkConfirmByInvoiceIdCaller.CreateCall<ICollection<EgaisMarkConfirm>>(new object[] { id });
        }

        public IServiceMethodCall<DocumentValidationResult> SaveOrUpdateDocument(EgaisAbstractInternalDocument newDocument)
        {
            return saveOrUpdateDocumentCaller.CreateCall<DocumentValidationResult>(new object[] { newDocument });
        }

        public IServiceMethodCall<object> SendDocument(Guid? documentId)
        {
            return sendDocumentCaller.CreateCall<object>(new object[] { documentId });
        }

        public IServiceMethodCall<EgaisQueryOrganization> SendNewQueryOrganizationRequest(string sourceRarId, EgaisApiVersion apiVersion, Dictionary<string, string> parameters)
        {
            return sendNewQueryOrganizationRequestCaller.CreateCall<EgaisQueryOrganization>(new object[] { sourceRarId, apiVersion, parameters });
        }

        public IServiceMethodCall<EgaisQueryOrganization> SendNewSetTtnVersionRequest(string sourceRarId, EgaisApiVersion newWayBillVersion)
        {
            return sendNewSetTtnVersionRequestCaller.CreateCall<EgaisQueryOrganization>(new object[] { sourceRarId, newWayBillVersion });
        }

        public IServiceMethodCall<EgaisResendInvoiceSendResult> SendQueryResendInvoiceDocument(Guid? documentId, bool skipValidation)
        {
            return sendQueryResendInvoiceDocumentCaller.CreateCall<EgaisResendInvoiceSendResult>(new object[] { documentId, skipValidation });
        }

        public IServiceMethodCall<bool> StartDocumentUpdates(Guid? documentId, bool breakLock)
        {
            return startDocumentUpdatesCaller.CreateCall<bool>(new object[] { documentId, breakLock });
        }

        public IServiceMethodCall<bool> StopDocumentUpdates(Guid? documentId)
        {
            return stopDocumentUpdatesCaller.CreateCall<bool>(new object[] { documentId });
        }

        public IServiceMethodCall<bool> UnDeleteDocument(Guid? documentId)
        {
            return unDeleteDocumentCaller.CreateCall<bool>(new object[] { documentId });
        }

        #endregion

        #region asynchronous version
        public void CreateAndSendQueryResendInvoices(string sourceRarId, HashSet<string> wbRegIds, bool skipValidation, AsyncErrorHandler errorHandler, Action<EgaisResendInvoiceSendResult> resultHandler)
        {
            createAndSendQueryResendInvoicesCaller.CallAsync(new object[] {sourceRarId, wbRegIds, skipValidation}, resultHandler, errorHandler);
        }

        public void DeleteDocument(Guid? documentId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            deleteDocumentCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        public void GetEgaisDocument(EgaisDocumentTypes documentType, Guid? id, AsyncErrorHandler errorHandler, Action<EgaisAbstractDocument> resultHandler)
        {
            getEgaisDocumentCaller.CallAsync(new object[] {documentType, id}, resultHandler, errorHandler);
        }

        public void GetEgaisDocumentByRegId(EgaisDocumentTypes documentType, string id, AsyncErrorHandler errorHandler, Action<EgaisAbstractDocument> resultHandler)
        {
            getEgaisDocumentByRegIdCaller.CallAsync(new object[] {documentType, id}, resultHandler, errorHandler);
        }

        public void GetEgaisDocuments(DateTime? dateFrom, DateTime? dateTo, bool includeDeleted, ICollection<Guid> departmentIds, ICollection<EgaisConnectionSettings> connections, AsyncErrorHandler errorHandler, Action<List<EgaisAbstractDocument>> resultHandler)
        {
            getEgaisDocumentsCaller.CallAsync(new object[] {dateFrom, dateTo, includeDeleted, departmentIds, connections}, resultHandler, errorHandler);
        }

        public void GetEgaisMarkConfirmByInvoiceId(Guid? id, AsyncErrorHandler errorHandler, Action<ICollection<EgaisMarkConfirm>> resultHandler)
        {
            getEgaisMarkConfirmByInvoiceIdCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateDocument(EgaisAbstractInternalDocument newDocument, AsyncErrorHandler errorHandler, Action<DocumentValidationResult> resultHandler)
        {
            saveOrUpdateDocumentCaller.CallAsync(new object[] {newDocument}, resultHandler, errorHandler);
        }

        public void SendDocument(Guid? documentId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            sendDocumentCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        public void SendNewQueryOrganizationRequest(string sourceRarId, EgaisApiVersion apiVersion, Dictionary<string, string> parameters, AsyncErrorHandler errorHandler, Action<EgaisQueryOrganization> resultHandler)
        {
            sendNewQueryOrganizationRequestCaller.CallAsync(new object[] {sourceRarId, apiVersion, parameters}, resultHandler, errorHandler);
        }

        public void SendNewSetTtnVersionRequest(string sourceRarId, EgaisApiVersion newWayBillVersion, AsyncErrorHandler errorHandler, Action<EgaisQueryOrganization> resultHandler)
        {
            sendNewSetTtnVersionRequestCaller.CallAsync(new object[] {sourceRarId, newWayBillVersion}, resultHandler, errorHandler);
        }

        public void SendQueryResendInvoiceDocument(Guid? documentId, bool skipValidation, AsyncErrorHandler errorHandler, Action<EgaisResendInvoiceSendResult> resultHandler)
        {
            sendQueryResendInvoiceDocumentCaller.CallAsync(new object[] {documentId, skipValidation}, resultHandler, errorHandler);
        }

        public void StartDocumentUpdates(Guid? documentId, bool breakLock, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            startDocumentUpdatesCaller.CallAsync(new object[] {documentId, breakLock}, resultHandler, errorHandler);
        }

        public void StopDocumentUpdates(Guid? documentId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            stopDocumentUpdatesCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        public void UnDeleteDocument(Guid? documentId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            unDeleteDocumentCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EgaisResendInvoiceSendResult> CreateAndSendQueryResendInvoices(string sourceRarId, HashSet<string> wbRegIds, bool skipValidation, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createAndSendQueryResendInvoicesCaller.Call<EgaisResendInvoiceSendResult>(new object[] { sourceRarId, wbRegIds, skipValidation }, asyncState, requestTimeout);
        }

        public Task<bool> DeleteDocument(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteDocumentCaller.Call<bool>(new object[] { documentId }, asyncState, requestTimeout);
        }

        public Task<EgaisAbstractDocument> GetEgaisDocument(EgaisDocumentTypes documentType, Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisDocumentCaller.Call<EgaisAbstractDocument>(new object[] { documentType, id }, asyncState, requestTimeout);
        }

        public Task<EgaisAbstractDocument> GetEgaisDocumentByRegId(EgaisDocumentTypes documentType, string id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisDocumentByRegIdCaller.Call<EgaisAbstractDocument>(new object[] { documentType, id }, asyncState, requestTimeout);
        }

        public Task<List<EgaisAbstractDocument>> GetEgaisDocuments(DateTime? dateFrom, DateTime? dateTo, bool includeDeleted, ICollection<Guid> departmentIds, ICollection<EgaisConnectionSettings> connections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisDocumentsCaller.Call<List<EgaisAbstractDocument>>(new object[] { dateFrom, dateTo, includeDeleted, departmentIds, connections }, asyncState, requestTimeout);
        }

        public Task<ICollection<EgaisMarkConfirm>> GetEgaisMarkConfirmByInvoiceId(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisMarkConfirmByInvoiceIdCaller.Call<ICollection<EgaisMarkConfirm>>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<DocumentValidationResult> SaveOrUpdateDocument(EgaisAbstractInternalDocument newDocument, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateDocumentCaller.Call<DocumentValidationResult>(new object[] { newDocument }, asyncState, requestTimeout);
        }

        public Task<object> SendDocument(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendDocumentCaller.Call<object>(new object[] { documentId }, asyncState, requestTimeout);
        }

        public Task<EgaisQueryOrganization> SendNewQueryOrganizationRequest(string sourceRarId, EgaisApiVersion apiVersion, Dictionary<string, string> parameters, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendNewQueryOrganizationRequestCaller.Call<EgaisQueryOrganization>(new object[] { sourceRarId, apiVersion, parameters }, asyncState, requestTimeout);
        }

        public Task<EgaisQueryOrganization> SendNewSetTtnVersionRequest(string sourceRarId, EgaisApiVersion newWayBillVersion, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendNewSetTtnVersionRequestCaller.Call<EgaisQueryOrganization>(new object[] { sourceRarId, newWayBillVersion }, asyncState, requestTimeout);
        }

        public Task<EgaisResendInvoiceSendResult> SendQueryResendInvoiceDocument(Guid? documentId, bool skipValidation, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendQueryResendInvoiceDocumentCaller.Call<EgaisResendInvoiceSendResult>(new object[] { documentId, skipValidation }, asyncState, requestTimeout);
        }

        public Task<bool> StartDocumentUpdates(Guid? documentId, bool breakLock, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return startDocumentUpdatesCaller.Call<bool>(new object[] { documentId, breakLock }, asyncState, requestTimeout);
        }

        public Task<bool> StopDocumentUpdates(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return stopDocumentUpdatesCaller.Call<bool>(new object[] { documentId }, asyncState, requestTimeout);
        }

        public Task<bool> UnDeleteDocument(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unDeleteDocumentCaller.Call<bool>(new object[] { documentId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisEntitiesService : IEgaisEntitiesService
    {
        private readonly RemoteMethodCaller deleteEgaisOrganizationEntitiesCaller;
        private readonly RemoteMethodCaller deleteEgaisProductEntitiesCaller;
        private readonly RemoteMethodCaller getEgaisEntitiesUpdateCaller;
        private readonly RemoteMethodCaller unDeleteEgaisOrganizationEntitiesCaller;
        private readonly RemoteMethodCaller unDeleteEgaisProductEntitiesCaller;
        private readonly RemoteMethodCaller updateEgaisOrganizationEntityCaller;
        private readonly RemoteMethodCaller updateEgaisProductEntityCaller;

        internal EgaisEntitiesService()
        {

            deleteEgaisOrganizationEntitiesCaller = new RemoteMethodCaller("egaisEntities", "deleteEgaisOrganizationEntities");
            deleteEgaisOrganizationEntitiesCaller.AddArg("ids", typeof(ICollection<Guid>));

            deleteEgaisProductEntitiesCaller = new RemoteMethodCaller("egaisEntities", "deleteEgaisProductEntities");
            deleteEgaisProductEntitiesCaller.AddArg("ids", typeof(ICollection<Guid>));

            getEgaisEntitiesUpdateCaller = new RemoteMethodCaller("egaisEntities", "getEgaisEntitiesUpdate");
            getEgaisEntitiesUpdateCaller.AddArg("revisionFrom", typeof(int));
            getEgaisEntitiesUpdateCaller.AddArg("dateFrom", typeof(DateTime?));

            unDeleteEgaisOrganizationEntitiesCaller = new RemoteMethodCaller("egaisEntities", "unDeleteEgaisOrganizationEntities");
            unDeleteEgaisOrganizationEntitiesCaller.AddArg("ids", typeof(ICollection<Guid>));

            unDeleteEgaisProductEntitiesCaller = new RemoteMethodCaller("egaisEntities", "unDeleteEgaisProductEntities");
            unDeleteEgaisProductEntitiesCaller.AddArg("ids", typeof(ICollection<Guid>));

            updateEgaisOrganizationEntityCaller = new RemoteMethodCaller("egaisEntities", "updateEgaisOrganizationEntity");
            updateEgaisOrganizationEntityCaller.AddArg("newEntity", typeof(ByValue<EgaisOrganizationEntity>));

            updateEgaisProductEntityCaller = new RemoteMethodCaller("egaisEntities", "updateEgaisProductEntity");
            updateEgaisProductEntityCaller.AddArg("newEntities", typeof(ICollection<ByValue<EgaisProductEntity>>));
        }

        #region Synchronous versions
        public IServiceMethodCall<int> DeleteEgaisOrganizationEntities(ICollection<Guid> ids)
        {
            return deleteEgaisOrganizationEntitiesCaller.CreateCall<int>(new object[] { ids });
        }

        public IServiceMethodCall<int> DeleteEgaisProductEntities(ICollection<Guid> ids)
        {
            return deleteEgaisProductEntitiesCaller.CreateCall<int>(new object[] { ids });
        }

        public IServiceMethodCall<EgaisEntitiesUpdate> GetEgaisEntitiesUpdate(int revisionFrom, DateTime? dateFrom)
        {
            return getEgaisEntitiesUpdateCaller.CreateCall<EgaisEntitiesUpdate>(new object[] { revisionFrom, dateFrom });
        }

        public IServiceMethodCall<int> UnDeleteEgaisOrganizationEntities(ICollection<Guid> ids)
        {
            return unDeleteEgaisOrganizationEntitiesCaller.CreateCall<int>(new object[] { ids });
        }

        public IServiceMethodCall<int> UnDeleteEgaisProductEntities(ICollection<Guid> ids)
        {
            return unDeleteEgaisProductEntitiesCaller.CreateCall<int>(new object[] { ids });
        }

        public IServiceMethodCall<object> UpdateEgaisOrganizationEntity(ByValue<EgaisOrganizationEntity> newEntity)
        {
            return updateEgaisOrganizationEntityCaller.CreateCall<object>(new object[] { newEntity });
        }

        public IServiceMethodCall<object> UpdateEgaisProductEntity(ICollection<ByValue<EgaisProductEntity>> newEntities)
        {
            return updateEgaisProductEntityCaller.CreateCall<object>(new object[] { newEntities });
        }

        #endregion

        #region asynchronous version
        public void DeleteEgaisOrganizationEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            deleteEgaisOrganizationEntitiesCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void DeleteEgaisProductEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            deleteEgaisProductEntitiesCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void GetEgaisEntitiesUpdate(int revisionFrom, DateTime? dateFrom, AsyncErrorHandler errorHandler, Action<EgaisEntitiesUpdate> resultHandler)
        {
            getEgaisEntitiesUpdateCaller.CallAsync(new object[] {revisionFrom, dateFrom}, resultHandler, errorHandler);
        }

        public void UnDeleteEgaisOrganizationEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            unDeleteEgaisOrganizationEntitiesCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void UnDeleteEgaisProductEntities(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            unDeleteEgaisProductEntitiesCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void UpdateEgaisOrganizationEntity(ByValue<EgaisOrganizationEntity> newEntity, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateEgaisOrganizationEntityCaller.CallAsync(new object[] {newEntity}, resultHandler, errorHandler);
        }

        public void UpdateEgaisProductEntity(ICollection<ByValue<EgaisProductEntity>> newEntities, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateEgaisProductEntityCaller.CallAsync(new object[] {newEntities}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<int> DeleteEgaisOrganizationEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteEgaisOrganizationEntitiesCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<int> DeleteEgaisProductEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteEgaisProductEntitiesCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<EgaisEntitiesUpdate> GetEgaisEntitiesUpdate(int revisionFrom, DateTime? dateFrom, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisEntitiesUpdateCaller.Call<EgaisEntitiesUpdate>(new object[] { revisionFrom, dateFrom }, asyncState, requestTimeout);
        }

        public Task<int> UnDeleteEgaisOrganizationEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unDeleteEgaisOrganizationEntitiesCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<int> UnDeleteEgaisProductEntities(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unDeleteEgaisProductEntitiesCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<object> UpdateEgaisOrganizationEntity(ByValue<EgaisOrganizationEntity> newEntity, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateEgaisOrganizationEntityCaller.Call<object>(new object[] { newEntity }, asyncState, requestTimeout);
        }

        public Task<object> UpdateEgaisProductEntity(ICollection<ByValue<EgaisProductEntity>> newEntities, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateEgaisProductEntityCaller.Call<object>(new object[] { newEntities }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisIncomingInvoicesService : IEgaisIncomingInvoicesService
    {
        private readonly RemoteMethodCaller confirmEgaisInvoiceCaller;
        private readonly RemoteMethodCaller createInvoiceCaller;
        private readonly RemoteMethodCaller editEgaisInvoiceCaller;
        private readonly RemoteMethodCaller rejectEgaisInvoiceCaller;
        private readonly RemoteMethodCaller saveEgaisIncomingInvoiceCaller;

        internal EgaisIncomingInvoicesService()
        {

            confirmEgaisInvoiceCaller = new RemoteMethodCaller("egaisIncomingInvoices", "confirmEgaisInvoice");
            confirmEgaisInvoiceCaller.AddArg("egaisInvoiceId", typeof(Guid?));

            createInvoiceCaller = new RemoteMethodCaller("egaisIncomingInvoices", "createInvoice");
            createInvoiceCaller.AddArg("egaisInvoice", typeof(EgaisIncomingInvoice));

            editEgaisInvoiceCaller = new RemoteMethodCaller("egaisIncomingInvoices", "editEgaisInvoice");
            editEgaisInvoiceCaller.AddArg("egaisInvoiceId", typeof(Guid?));

            rejectEgaisInvoiceCaller = new RemoteMethodCaller("egaisIncomingInvoices", "rejectEgaisInvoice");
            rejectEgaisInvoiceCaller.AddArg("egaisInvoiceId", typeof(Guid?));

            saveEgaisIncomingInvoiceCaller = new RemoteMethodCaller("egaisIncomingInvoices", "saveEgaisIncomingInvoice");
            saveEgaisIncomingInvoiceCaller.AddArg("egaisInvoice", typeof(EgaisIncomingInvoice));
            saveEgaisIncomingInvoiceCaller.AddArg("updateSupplierProducts", typeof(bool));
            saveEgaisIncomingInvoiceCaller.AddArg("allowSupplierProductsUpdate", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<EgaisIncomingInvoice> ConfirmEgaisInvoice(Guid? egaisInvoiceId)
        {
            return confirmEgaisInvoiceCaller.CreateCall<EgaisIncomingInvoice>(new object[] { egaisInvoiceId });
        }

        public IServiceMethodCall<IncomingInvoice> CreateInvoice(EgaisIncomingInvoice egaisInvoice)
        {
            return createInvoiceCaller.CreateCall<IncomingInvoice>(new object[] { egaisInvoice });
        }

        public IServiceMethodCall<EgaisIncomingInvoice> EditEgaisInvoice(Guid? egaisInvoiceId)
        {
            return editEgaisInvoiceCaller.CreateCall<EgaisIncomingInvoice>(new object[] { egaisInvoiceId });
        }

        public IServiceMethodCall<EgaisIncomingInvoice> RejectEgaisInvoice(Guid? egaisInvoiceId)
        {
            return rejectEgaisInvoiceCaller.CreateCall<EgaisIncomingInvoice>(new object[] { egaisInvoiceId });
        }

        public IServiceMethodCall<EgaisInvoiceSaveResult> SaveEgaisIncomingInvoice(EgaisIncomingInvoice egaisInvoice, bool updateSupplierProducts, bool allowSupplierProductsUpdate)
        {
            return saveEgaisIncomingInvoiceCaller.CreateCall<EgaisInvoiceSaveResult>(new object[] { egaisInvoice, updateSupplierProducts, allowSupplierProductsUpdate });
        }

        #endregion

        #region asynchronous version
        public void ConfirmEgaisInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisIncomingInvoice> resultHandler)
        {
            confirmEgaisInvoiceCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        public void CreateInvoice(EgaisIncomingInvoice egaisInvoice, AsyncErrorHandler errorHandler, Action<IncomingInvoice> resultHandler)
        {
            createInvoiceCaller.CallAsync(new object[] {egaisInvoice}, resultHandler, errorHandler);
        }

        public void EditEgaisInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisIncomingInvoice> resultHandler)
        {
            editEgaisInvoiceCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        public void RejectEgaisInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisIncomingInvoice> resultHandler)
        {
            rejectEgaisInvoiceCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        public void SaveEgaisIncomingInvoice(EgaisIncomingInvoice egaisInvoice, bool updateSupplierProducts, bool allowSupplierProductsUpdate, AsyncErrorHandler errorHandler, Action<EgaisInvoiceSaveResult> resultHandler)
        {
            saveEgaisIncomingInvoiceCaller.CallAsync(new object[] {egaisInvoice, updateSupplierProducts, allowSupplierProductsUpdate}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EgaisIncomingInvoice> ConfirmEgaisInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return confirmEgaisInvoiceCaller.Call<EgaisIncomingInvoice>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        public Task<IncomingInvoice> CreateInvoice(EgaisIncomingInvoice egaisInvoice, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createInvoiceCaller.Call<IncomingInvoice>(new object[] { egaisInvoice }, asyncState, requestTimeout);
        }

        public Task<EgaisIncomingInvoice> EditEgaisInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return editEgaisInvoiceCaller.Call<EgaisIncomingInvoice>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        public Task<EgaisIncomingInvoice> RejectEgaisInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return rejectEgaisInvoiceCaller.Call<EgaisIncomingInvoice>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        public Task<EgaisInvoiceSaveResult> SaveEgaisIncomingInvoice(EgaisIncomingInvoice egaisInvoice, bool updateSupplierProducts, bool allowSupplierProductsUpdate, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveEgaisIncomingInvoiceCaller.Call<EgaisInvoiceSaveResult>(new object[] { egaisInvoice, updateSupplierProducts, allowSupplierProductsUpdate }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisInventoryService : IEgaisInventoryService
    {
        private readonly RemoteMethodCaller buildInventoryReportCaller;

        internal EgaisInventoryService()
        {

            buildInventoryReportCaller = new RemoteMethodCaller("egaisInventory", "buildInventoryReport");
            buildInventoryReportCaller.AddArg("computeInternalBalances", typeof(bool));
            buildInventoryReportCaller.AddArg("computeInternalMovement", typeof(bool));
            buildInventoryReportCaller.AddArg("computeEgaisBalances", typeof(bool));
            buildInventoryReportCaller.AddArg("fsRarId", typeof(string));
            buildInventoryReportCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));
            buildInventoryReportCaller.AddArg("dateFrom", typeof(DateTime?));
            buildInventoryReportCaller.AddArg("dateTo", typeof(DateTime?));
            buildInventoryReportCaller.AddArg("iikoDocumentIds", typeof(ICollection<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<EgaisInventoryReport> BuildInventoryReport(bool computeInternalBalances, bool computeInternalMovement, bool computeEgaisBalances, string fsRarId, ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> iikoDocumentIds)
        {
            return buildInventoryReportCaller.CreateCall<EgaisInventoryReport>(new object[] { computeInternalBalances, computeInternalMovement, computeEgaisBalances, fsRarId, departments, dateFrom, dateTo, iikoDocumentIds });
        }

        #endregion

        #region asynchronous version
        public void BuildInventoryReport(bool computeInternalBalances, bool computeInternalMovement, bool computeEgaisBalances, string fsRarId, ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> iikoDocumentIds, AsyncErrorHandler errorHandler, Action<EgaisInventoryReport> resultHandler)
        {
            buildInventoryReportCaller.CallAsync(new object[] {computeInternalBalances, computeInternalMovement, computeEgaisBalances, fsRarId, departments, dateFrom, dateTo, iikoDocumentIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EgaisInventoryReport> BuildInventoryReport(bool computeInternalBalances, bool computeInternalMovement, bool computeEgaisBalances, string fsRarId, ICollection<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, ICollection<Guid> iikoDocumentIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildInventoryReportCaller.Call<EgaisInventoryReport>(new object[] { computeInternalBalances, computeInternalMovement, computeEgaisBalances, fsRarId, departments, dateFrom, dateTo, iikoDocumentIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisInvoicesService : IEgaisInvoicesService
    {
        private readonly RemoteMethodCaller getEgaisInvoiceCaller;
        private readonly RemoteMethodCaller linkProductsBySupplierPriceListCaller;

        internal EgaisInvoicesService()
        {

            getEgaisInvoiceCaller = new RemoteMethodCaller("egaisInvoices", "getEgaisInvoice");
            getEgaisInvoiceCaller.AddArg("id", typeof(Guid?));

            linkProductsBySupplierPriceListCaller = new RemoteMethodCaller("egaisInvoices", "linkProductsBySupplierPriceList");
            linkProductsBySupplierPriceListCaller.AddArg("egaisInvoice", typeof(EgaisAbstractInvoice));
            linkProductsBySupplierPriceListCaller.AddArg("date", typeof(DateTime?));
        }

        #region Synchronous versions
        public IServiceMethodCall<EgaisAbstractInvoice> GetEgaisInvoice(Guid? id)
        {
            return getEgaisInvoiceCaller.CreateCall<EgaisAbstractInvoice>(new object[] { id });
        }

        public IServiceMethodCall<EgaisAbstractInvoice> LinkProductsBySupplierPriceList(EgaisAbstractInvoice egaisInvoice, DateTime? date)
        {
            return linkProductsBySupplierPriceListCaller.CreateCall<EgaisAbstractInvoice>(new object[] { egaisInvoice, date });
        }

        #endregion

        #region asynchronous version
        public void GetEgaisInvoice(Guid? id, AsyncErrorHandler errorHandler, Action<EgaisAbstractInvoice> resultHandler)
        {
            getEgaisInvoiceCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void LinkProductsBySupplierPriceList(EgaisAbstractInvoice egaisInvoice, DateTime? date, AsyncErrorHandler errorHandler, Action<EgaisAbstractInvoice> resultHandler)
        {
            linkProductsBySupplierPriceListCaller.CallAsync(new object[] {egaisInvoice, date}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EgaisAbstractInvoice> GetEgaisInvoice(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisInvoiceCaller.Call<EgaisAbstractInvoice>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<EgaisAbstractInvoice> LinkProductsBySupplierPriceList(EgaisAbstractInvoice egaisInvoice, DateTime? date, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return linkProductsBySupplierPriceListCaller.Call<EgaisAbstractInvoice>(new object[] { egaisInvoice, date }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisOutgoingInvoicesService : IEgaisOutgoingInvoicesService
    {
        private readonly RemoteMethodCaller confirmRecipientActWithChangesCaller;
        private readonly RemoteMethodCaller createReturnedOutgoingInvoiceCaller;
        private readonly RemoteMethodCaller rejectRecipientActWithChangesCaller;
        private readonly RemoteMethodCaller saveEgaisOutgoingInvoiceCaller;
        private readonly RemoteMethodCaller sendEgaisOutgoingInvoiceCaller;

        internal EgaisOutgoingInvoicesService()
        {

            confirmRecipientActWithChangesCaller = new RemoteMethodCaller("egaisOutgoingInvoices", "confirmRecipientActWithChanges");
            confirmRecipientActWithChangesCaller.AddArg("egaisInvoiceId", typeof(Guid?));

            createReturnedOutgoingInvoiceCaller = new RemoteMethodCaller("egaisOutgoingInvoices", "createReturnedOutgoingInvoice");
            createReturnedOutgoingInvoiceCaller.AddArg("egaisInvoiceId", typeof(Guid?));

            rejectRecipientActWithChangesCaller = new RemoteMethodCaller("egaisOutgoingInvoices", "rejectRecipientActWithChanges");
            rejectRecipientActWithChangesCaller.AddArg("egaisInvoiceId", typeof(Guid?));

            saveEgaisOutgoingInvoiceCaller = new RemoteMethodCaller("egaisOutgoingInvoices", "saveEgaisOutgoingInvoice");
            saveEgaisOutgoingInvoiceCaller.AddArg("egaisInvoice", typeof(EgaisOutgoingInvoice));

            sendEgaisOutgoingInvoiceCaller = new RemoteMethodCaller("egaisOutgoingInvoices", "sendEgaisOutgoingInvoice");
            sendEgaisOutgoingInvoiceCaller.AddArg("egaisInvoiceId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> ConfirmRecipientActWithChanges(Guid? egaisInvoiceId)
        {
            return confirmRecipientActWithChangesCaller.CreateCall<object>(new object[] { egaisInvoiceId });
        }

        public IServiceMethodCall<EgaisInvoiceCreateResult> CreateReturnedOutgoingInvoice(Guid? egaisInvoiceId)
        {
            return createReturnedOutgoingInvoiceCaller.CreateCall<EgaisInvoiceCreateResult>(new object[] { egaisInvoiceId });
        }

        public IServiceMethodCall<object> RejectRecipientActWithChanges(Guid? egaisInvoiceId)
        {
            return rejectRecipientActWithChangesCaller.CreateCall<object>(new object[] { egaisInvoiceId });
        }

        public IServiceMethodCall<EgaisInvoiceSaveResult> SaveEgaisOutgoingInvoice(EgaisOutgoingInvoice egaisInvoice)
        {
            return saveEgaisOutgoingInvoiceCaller.CreateCall<EgaisInvoiceSaveResult>(new object[] { egaisInvoice });
        }

        public IServiceMethodCall<object> SendEgaisOutgoingInvoice(Guid? egaisInvoiceId)
        {
            return sendEgaisOutgoingInvoiceCaller.CreateCall<object>(new object[] { egaisInvoiceId });
        }

        #endregion

        #region asynchronous version
        public void ConfirmRecipientActWithChanges(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            confirmRecipientActWithChangesCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        public void CreateReturnedOutgoingInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action<EgaisInvoiceCreateResult> resultHandler)
        {
            createReturnedOutgoingInvoiceCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        public void RejectRecipientActWithChanges(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            rejectRecipientActWithChangesCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        public void SaveEgaisOutgoingInvoice(EgaisOutgoingInvoice egaisInvoice, AsyncErrorHandler errorHandler, Action<EgaisInvoiceSaveResult> resultHandler)
        {
            saveEgaisOutgoingInvoiceCaller.CallAsync(new object[] {egaisInvoice}, resultHandler, errorHandler);
        }

        public void SendEgaisOutgoingInvoice(Guid? egaisInvoiceId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            sendEgaisOutgoingInvoiceCaller.CallAsync(new object[] {egaisInvoiceId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> ConfirmRecipientActWithChanges(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return confirmRecipientActWithChangesCaller.Call<object>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        public Task<EgaisInvoiceCreateResult> CreateReturnedOutgoingInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createReturnedOutgoingInvoiceCaller.Call<EgaisInvoiceCreateResult>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        public Task<object> RejectRecipientActWithChanges(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return rejectRecipientActWithChangesCaller.Call<object>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        public Task<EgaisInvoiceSaveResult> SaveEgaisOutgoingInvoice(EgaisOutgoingInvoice egaisInvoice, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveEgaisOutgoingInvoiceCaller.Call<EgaisInvoiceSaveResult>(new object[] { egaisInvoice }, asyncState, requestTimeout);
        }

        public Task<object> SendEgaisOutgoingInvoice(Guid? egaisInvoiceId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendEgaisOutgoingInvoiceCaller.Call<object>(new object[] { egaisInvoiceId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisRepealService : IEgaisRepealService
    {
        private readonly RemoteMethodCaller confirmRequestRepealCaller;
        private readonly RemoteMethodCaller rejectRequestRepealCaller;
        private readonly RemoteMethodCaller sendRequestRepealCaller;

        internal EgaisRepealService()
        {

            confirmRequestRepealCaller = new RemoteMethodCaller("egaisRepeals", "confirmRequestRepeal");
            confirmRequestRepealCaller.AddArg("repealId", typeof(Guid?));

            rejectRequestRepealCaller = new RemoteMethodCaller("egaisRepeals", "rejectRequestRepeal");
            rejectRequestRepealCaller.AddArg("repealId", typeof(Guid?));

            sendRequestRepealCaller = new RemoteMethodCaller("egaisRepeals", "sendRequestRepeal");
            sendRequestRepealCaller.AddArg("documentId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<EgaisRequestRepeal> ConfirmRequestRepeal(Guid? repealId)
        {
            return confirmRequestRepealCaller.CreateCall<EgaisRequestRepeal>(new object[] { repealId });
        }

        public IServiceMethodCall<EgaisRequestRepeal> RejectRequestRepeal(Guid? repealId)
        {
            return rejectRequestRepealCaller.CreateCall<EgaisRequestRepeal>(new object[] { repealId });
        }

        public IServiceMethodCall<EgaisRequestRepeal> SendRequestRepeal(Guid? documentId)
        {
            return sendRequestRepealCaller.CreateCall<EgaisRequestRepeal>(new object[] { documentId });
        }

        #endregion

        #region asynchronous version
        public void ConfirmRequestRepeal(Guid? repealId, AsyncErrorHandler errorHandler, Action<EgaisRequestRepeal> resultHandler)
        {
            confirmRequestRepealCaller.CallAsync(new object[] {repealId}, resultHandler, errorHandler);
        }

        public void RejectRequestRepeal(Guid? repealId, AsyncErrorHandler errorHandler, Action<EgaisRequestRepeal> resultHandler)
        {
            rejectRequestRepealCaller.CallAsync(new object[] {repealId}, resultHandler, errorHandler);
        }

        public void SendRequestRepeal(Guid? documentId, AsyncErrorHandler errorHandler, Action<EgaisRequestRepeal> resultHandler)
        {
            sendRequestRepealCaller.CallAsync(new object[] {documentId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EgaisRequestRepeal> ConfirmRequestRepeal(Guid? repealId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return confirmRequestRepealCaller.Call<EgaisRequestRepeal>(new object[] { repealId }, asyncState, requestTimeout);
        }

        public Task<EgaisRequestRepeal> RejectRequestRepeal(Guid? repealId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return rejectRequestRepealCaller.Call<EgaisRequestRepeal>(new object[] { repealId }, asyncState, requestTimeout);
        }

        public Task<EgaisRequestRepeal> SendRequestRepeal(Guid? documentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendRequestRepealCaller.Call<EgaisRequestRepeal>(new object[] { documentId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisService : IEgaisService
    {
        private readonly RemoteMethodCaller checkUtmConnectionCaller;
        private readonly RemoteMethodCaller forceRefreshUtmDataCaller;

        internal EgaisService()
        {

            checkUtmConnectionCaller = new RemoteMethodCaller("egais", "checkUtmConnection");
            checkUtmConnectionCaller.AddArg("fsRarId", typeof(string));
            checkUtmConnectionCaller.AddArg("url", typeof(string));
            checkUtmConnectionCaller.AddArg("terminalId", typeof(Guid?));
            checkUtmConnectionCaller.AddArg("terminalName", typeof(string));

            forceRefreshUtmDataCaller = new RemoteMethodCaller("egais", "forceRefreshUtmData");
            forceRefreshUtmDataCaller.AddArg("departmentId", typeof(Guid?));
            forceRefreshUtmDataCaller.AddArg("connectionRarId", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CheckUtmConnection(string fsRarId, string url, Guid? terminalId, string terminalName)
        {
            return checkUtmConnectionCaller.CreateCall<object>(new object[] { fsRarId, url, terminalId, terminalName });
        }

        public IServiceMethodCall<object> ForceRefreshUtmData(Guid? departmentId, string connectionRarId)
        {
            return forceRefreshUtmDataCaller.CreateCall<object>(new object[] { departmentId, connectionRarId });
        }

        #endregion

        #region asynchronous version
        public void CheckUtmConnection(string fsRarId, string url, Guid? terminalId, string terminalName, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            checkUtmConnectionCaller.CallAsync(new object[] {fsRarId, url, terminalId, terminalName}, resultHandler, errorHandler);
        }

        public void ForceRefreshUtmData(Guid? departmentId, string connectionRarId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            forceRefreshUtmDataCaller.CallAsync(new object[] {departmentId, connectionRarId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CheckUtmConnection(string fsRarId, string url, Guid? terminalId, string terminalName, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return checkUtmConnectionCaller.Call<object>(new object[] { fsRarId, url, terminalId, terminalName }, asyncState, requestTimeout);
        }

        public Task<object> ForceRefreshUtmData(Guid? departmentId, string connectionRarId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return forceRefreshUtmDataCaller.Call<object>(new object[] { departmentId, connectionRarId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EgaisUnsealService : IEgaisUnsealService
    {
        private readonly RemoteMethodCaller canBeCancelledNowCaller;
        private readonly RemoteMethodCaller deleteUnsealEventsCaller;
        private readonly RemoteMethodCaller getEgaisMarkStateUpdateCaller;
        private readonly RemoteMethodCaller getUnsealEventsCaller;
        private readonly RemoteMethodCaller renewUnsealEventsCaller;
        private readonly RemoteMethodCaller unDeleteUnsealEventsCaller;

        internal EgaisUnsealService()
        {

            canBeCancelledNowCaller = new RemoteMethodCaller("egaisUnseal", "canBeCancelledNow");
            canBeCancelledNowCaller.AddArg("fsRarId", typeof(string));
            canBeCancelledNowCaller.AddArg("egaisAlcCode", typeof(string));
            canBeCancelledNowCaller.AddArg("egaisMarkCode", typeof(string));

            deleteUnsealEventsCaller = new RemoteMethodCaller("egaisUnseal", "deleteUnsealEvents");
            deleteUnsealEventsCaller.AddArg("ids", typeof(ICollection<Guid>));

            getEgaisMarkStateUpdateCaller = new RemoteMethodCaller("egaisUnseal", "getEgaisMarkStateUpdate");
            getEgaisMarkStateUpdateCaller.AddArg("knownRevision", typeof(int));
            getEgaisMarkStateUpdateCaller.AddArg("fsRarIds", typeof(ICollection<string>));

            getUnsealEventsCaller = new RemoteMethodCaller("egaisUnseal", "getUnsealEvents");
            getUnsealEventsCaller.AddArg("fsRarId", typeof(ICollection<string>));
            getUnsealEventsCaller.AddArg("dateFrom", typeof(DateTime?));
            getUnsealEventsCaller.AddArg("dateTo", typeof(DateTime?));

            renewUnsealEventsCaller = new RemoteMethodCaller("egaisUnseal", "renewUnsealEvents");
            renewUnsealEventsCaller.AddArg("ids", typeof(ICollection<Guid>));

            unDeleteUnsealEventsCaller = new RemoteMethodCaller("egaisUnseal", "unDeleteUnsealEvents");
            unDeleteUnsealEventsCaller.AddArg("ids", typeof(ICollection<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<bool> CanBeCancelledNow(string fsRarId, string egaisAlcCode, string egaisMarkCode)
        {
            return canBeCancelledNowCaller.CreateCall<bool>(new object[] { fsRarId, egaisAlcCode, egaisMarkCode });
        }

        public IServiceMethodCall<int> DeleteUnsealEvents(ICollection<Guid> ids)
        {
            return deleteUnsealEventsCaller.CreateCall<int>(new object[] { ids });
        }

        public IServiceMethodCall<EgaisMarkStateUpdate> GetEgaisMarkStateUpdate(int knownRevision, ICollection<string> fsRarIds)
        {
            return getEgaisMarkStateUpdateCaller.CreateCall<EgaisMarkStateUpdate>(new object[] { knownRevision, fsRarIds });
        }

        public IServiceMethodCall<List<EgaisUnsealEvent>> GetUnsealEvents(ICollection<string> fsRarId, DateTime? dateFrom, DateTime? dateTo)
        {
            return getUnsealEventsCaller.CreateCall<List<EgaisUnsealEvent>>(new object[] { fsRarId, dateFrom, dateTo });
        }

        public IServiceMethodCall<int> RenewUnsealEvents(ICollection<Guid> ids)
        {
            return renewUnsealEventsCaller.CreateCall<int>(new object[] { ids });
        }

        public IServiceMethodCall<int> UnDeleteUnsealEvents(ICollection<Guid> ids)
        {
            return unDeleteUnsealEventsCaller.CreateCall<int>(new object[] { ids });
        }

        #endregion

        #region asynchronous version
        public void CanBeCancelledNow(string fsRarId, string egaisAlcCode, string egaisMarkCode, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            canBeCancelledNowCaller.CallAsync(new object[] {fsRarId, egaisAlcCode, egaisMarkCode}, resultHandler, errorHandler);
        }

        public void DeleteUnsealEvents(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            deleteUnsealEventsCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void GetEgaisMarkStateUpdate(int knownRevision, ICollection<string> fsRarIds, AsyncErrorHandler errorHandler, Action<EgaisMarkStateUpdate> resultHandler)
        {
            getEgaisMarkStateUpdateCaller.CallAsync(new object[] {knownRevision, fsRarIds}, resultHandler, errorHandler);
        }

        public void GetUnsealEvents(ICollection<string> fsRarId, DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<EgaisUnsealEvent>> resultHandler)
        {
            getUnsealEventsCaller.CallAsync(new object[] {fsRarId, dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void RenewUnsealEvents(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            renewUnsealEventsCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        public void UnDeleteUnsealEvents(ICollection<Guid> ids, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            unDeleteUnsealEventsCaller.CallAsync(new object[] {ids}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<bool> CanBeCancelledNow(string fsRarId, string egaisAlcCode, string egaisMarkCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return canBeCancelledNowCaller.Call<bool>(new object[] { fsRarId, egaisAlcCode, egaisMarkCode }, asyncState, requestTimeout);
        }

        public Task<int> DeleteUnsealEvents(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteUnsealEventsCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<EgaisMarkStateUpdate> GetEgaisMarkStateUpdate(int knownRevision, ICollection<string> fsRarIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEgaisMarkStateUpdateCaller.Call<EgaisMarkStateUpdate>(new object[] { knownRevision, fsRarIds }, asyncState, requestTimeout);
        }

        public Task<List<EgaisUnsealEvent>> GetUnsealEvents(ICollection<string> fsRarId, DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUnsealEventsCaller.Call<List<EgaisUnsealEvent>>(new object[] { fsRarId, dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<int> RenewUnsealEvents(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return renewUnsealEventsCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        public Task<int> UnDeleteUnsealEvents(ICollection<Guid> ids, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unDeleteUnsealEventsCaller.Call<int>(new object[] { ids }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class FranchiseService : IFranchiseService
    {
        private readonly RemoteMethodCaller createOrUpdateConnectionGroupCaller;
        private readonly RemoteMethodCaller deleteOrRestoreConnectionGroupCaller;
        private readonly RemoteMethodCaller getPingMessagesCaller;
        private readonly RemoteMethodCaller pingCaller;

        internal FranchiseService()
        {

            createOrUpdateConnectionGroupCaller = new RemoteMethodCaller("franchise", "createOrUpdateConnectionGroup");
            createOrUpdateConnectionGroupCaller.AddArg("connectionGroup", typeof(ByValue<ConnectionGroup>));

            deleteOrRestoreConnectionGroupCaller = new RemoteMethodCaller("franchise", "deleteOrRestoreConnectionGroup");
            deleteOrRestoreConnectionGroupCaller.AddArg("connectionGroupId", typeof(Guid?));
            deleteOrRestoreConnectionGroupCaller.AddArg("delete", typeof(bool));

            getPingMessagesCaller = new RemoteMethodCaller("franchise", "getPingMessages");
            getPingMessagesCaller.AddArg("dateFrom", typeof(DateTime?));
            getPingMessagesCaller.AddArg("dateTo", typeof(DateTime?));

            pingCaller = new RemoteMethodCaller("franchise", "ping");
            pingCaller.AddArg("sourceConnectionGroupId", typeof(Guid?));
        }

        #region Synchronous versions
        public IServiceMethodCall<ConnectionGroup> CreateOrUpdateConnectionGroup(ByValue<ConnectionGroup> connectionGroup)
        {
            return createOrUpdateConnectionGroupCaller.CreateCall<ConnectionGroup>(new object[] { connectionGroup });
        }

        public IServiceMethodCall<object> DeleteOrRestoreConnectionGroup(Guid? connectionGroupId, bool delete)
        {
            return deleteOrRestoreConnectionGroupCaller.CreateCall<object>(new object[] { connectionGroupId, delete });
        }

        public IServiceMethodCall<List<PingMessageRecord>> GetPingMessages(DateTime? dateFrom, DateTime? dateTo)
        {
            return getPingMessagesCaller.CreateCall<List<PingMessageRecord>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<object> Ping(Guid? sourceConnectionGroupId)
        {
            return pingCaller.CreateCall<object>(new object[] { sourceConnectionGroupId });
        }

        #endregion

        #region asynchronous version
        public void CreateOrUpdateConnectionGroup(ByValue<ConnectionGroup> connectionGroup, AsyncErrorHandler errorHandler, Action<ConnectionGroup> resultHandler)
        {
            createOrUpdateConnectionGroupCaller.CallAsync(new object[] {connectionGroup}, resultHandler, errorHandler);
        }

        public void DeleteOrRestoreConnectionGroup(Guid? connectionGroupId, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteOrRestoreConnectionGroupCaller.CallAsync(new object[] {connectionGroupId, delete}, resultHandler, errorHandler);
        }

        public void GetPingMessages(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<List<PingMessageRecord>> resultHandler)
        {
            getPingMessagesCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void Ping(Guid? sourceConnectionGroupId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            pingCaller.CallAsync(new object[] {sourceConnectionGroupId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ConnectionGroup> CreateOrUpdateConnectionGroup(ByValue<ConnectionGroup> connectionGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateConnectionGroupCaller.Call<ConnectionGroup>(new object[] { connectionGroup }, asyncState, requestTimeout);
        }

        public Task<object> DeleteOrRestoreConnectionGroup(Guid? connectionGroupId, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteOrRestoreConnectionGroupCaller.Call<object>(new object[] { connectionGroupId, delete }, asyncState, requestTimeout);
        }

        public Task<List<PingMessageRecord>> GetPingMessages(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPingMessagesCaller.Call<List<PingMessageRecord>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<object> Ping(Guid? sourceConnectionGroupId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return pingCaller.Call<object>(new object[] { sourceConnectionGroupId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ServiceFeeService : IServiceFeeService
    {
        private readonly RemoteMethodCaller addServiceFeeCaller;
        private readonly RemoteMethodCaller deleteServiceFeesCaller;
        private readonly RemoteMethodCaller getServiceFeesCaller;
        private readonly RemoteMethodCaller undeleteServiceFeesCaller;
        private readonly RemoteMethodCaller updateServiceFeeCaller;

        internal ServiceFeeService()
        {

            addServiceFeeCaller = new RemoteMethodCaller("serviceFee", "addServiceFee");
            addServiceFeeCaller.AddArg("serviceFee", typeof(ByValue<ServiceFee>));

            deleteServiceFeesCaller = new RemoteMethodCaller("serviceFee", "deleteServiceFees");
            deleteServiceFeesCaller.AddArg("products", typeof(List<ServiceFee>));

            getServiceFeesCaller = new RemoteMethodCaller("serviceFee", "getServiceFees");

            undeleteServiceFeesCaller = new RemoteMethodCaller("serviceFee", "undeleteServiceFees");
            undeleteServiceFeesCaller.AddArg("products", typeof(List<ServiceFee>));

            updateServiceFeeCaller = new RemoteMethodCaller("serviceFee", "updateServiceFee");
            updateServiceFeeCaller.AddArg("serviceFee", typeof(ByValue<ServiceFee>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddServiceFee(ByValue<ServiceFee> serviceFee)
        {
            return addServiceFeeCaller.CreateCall<object>(new object[] { serviceFee });
        }

        public IServiceMethodCall<object> DeleteServiceFees(List<ServiceFee> products)
        {
            return deleteServiceFeesCaller.CreateCall<object>(new object[] { products });
        }

        public IServiceMethodCall<List<ServiceFee>> GetServiceFees()
        {
            return getServiceFeesCaller.CreateCall<List<ServiceFee>>(new object[] {  });
        }

        public IServiceMethodCall<object> UndeleteServiceFees(List<ServiceFee> products)
        {
            return undeleteServiceFeesCaller.CreateCall<object>(new object[] { products });
        }

        public IServiceMethodCall<object> UpdateServiceFee(ByValue<ServiceFee> serviceFee)
        {
            return updateServiceFeeCaller.CreateCall<object>(new object[] { serviceFee });
        }

        #endregion

        #region asynchronous version
        public void AddServiceFee(ByValue<ServiceFee> serviceFee, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addServiceFeeCaller.CallAsync(new object[] {serviceFee}, resultHandler, errorHandler);
        }

        public void DeleteServiceFees(List<ServiceFee> products, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteServiceFeesCaller.CallAsync(new object[] {products}, resultHandler, errorHandler);
        }

        public void GetServiceFees(AsyncErrorHandler errorHandler, Action<List<ServiceFee>> resultHandler)
        {
            getServiceFeesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void UndeleteServiceFees(List<ServiceFee> products, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteServiceFeesCaller.CallAsync(new object[] {products}, resultHandler, errorHandler);
        }

        public void UpdateServiceFee(ByValue<ServiceFee> serviceFee, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateServiceFeeCaller.CallAsync(new object[] {serviceFee}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddServiceFee(ByValue<ServiceFee> serviceFee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addServiceFeeCaller.Call<object>(new object[] { serviceFee }, asyncState, requestTimeout);
        }

        public Task<object> DeleteServiceFees(List<ServiceFee> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteServiceFeesCaller.Call<object>(new object[] { products }, asyncState, requestTimeout);
        }

        public Task<List<ServiceFee>> GetServiceFees([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getServiceFeesCaller.Call<List<ServiceFee>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteServiceFees(List<ServiceFee> products, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteServiceFeesCaller.Call<object>(new object[] { products }, asyncState, requestTimeout);
        }

        public Task<object> UpdateServiceFee(ByValue<ServiceFee> serviceFee, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateServiceFeeCaller.Call<object>(new object[] { serviceFee }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class KladrService : IKladrService
    {
        private readonly RemoteMethodCaller confirmSynchronizeCityWithKladrCaller;
        private readonly RemoteMethodCaller getAllCitiesCaller;
        private readonly RemoteMethodCaller getCitiesByNameCaller;
        private readonly RemoteMethodCaller synchronizeCityWithKladrCaller;

        internal KladrService()
        {

            confirmSynchronizeCityWithKladrCaller = new RemoteMethodCaller("kladrService", "confirmSynchronizeCityWithKladr");
            confirmSynchronizeCityWithKladrCaller.AddArg("cityId", typeof(Guid?));
            confirmSynchronizeCityWithKladrCaller.AddArg("kladrCityId", typeof(string));

            getAllCitiesCaller = new RemoteMethodCaller("kladrService", "getAllCities");

            getCitiesByNameCaller = new RemoteMethodCaller("kladrService", "getCitiesByName");
            getCitiesByNameCaller.AddArg("cityName", typeof(string));

            synchronizeCityWithKladrCaller = new RemoteMethodCaller("kladrService", "synchronizeCityWithKladr");
            synchronizeCityWithKladrCaller.AddArg("cityId", typeof(Guid?));
            synchronizeCityWithKladrCaller.AddArg("kladrCityId", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<KladrSynchronizationResult> ConfirmSynchronizeCityWithKladr(Guid? cityId, string kladrCityId)
        {
            return confirmSynchronizeCityWithKladrCaller.CreateCall<KladrSynchronizationResult>(new object[] { cityId, kladrCityId });
        }

        public IServiceMethodCall<Dictionary<string, KladrObject>> GetAllCities()
        {
            return getAllCitiesCaller.CreateCall<Dictionary<string, KladrObject>>(new object[] {  });
        }

        public IServiceMethodCall<Dictionary<string, KladrObject>> GetCitiesByName(string cityName)
        {
            return getCitiesByNameCaller.CreateCall<Dictionary<string, KladrObject>>(new object[] { cityName });
        }

        public IServiceMethodCall<KladrSynchronizationResult> SynchronizeCityWithKladr(Guid? cityId, string kladrCityId)
        {
            return synchronizeCityWithKladrCaller.CreateCall<KladrSynchronizationResult>(new object[] { cityId, kladrCityId });
        }

        #endregion

        #region asynchronous version
        public void ConfirmSynchronizeCityWithKladr(Guid? cityId, string kladrCityId, AsyncErrorHandler errorHandler, Action<KladrSynchronizationResult> resultHandler)
        {
            confirmSynchronizeCityWithKladrCaller.CallAsync(new object[] {cityId, kladrCityId}, resultHandler, errorHandler);
        }

        public void GetAllCities(AsyncErrorHandler errorHandler, Action<Dictionary<string, KladrObject>> resultHandler)
        {
            getAllCitiesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetCitiesByName(string cityName, AsyncErrorHandler errorHandler, Action<Dictionary<string, KladrObject>> resultHandler)
        {
            getCitiesByNameCaller.CallAsync(new object[] {cityName}, resultHandler, errorHandler);
        }

        public void SynchronizeCityWithKladr(Guid? cityId, string kladrCityId, AsyncErrorHandler errorHandler, Action<KladrSynchronizationResult> resultHandler)
        {
            synchronizeCityWithKladrCaller.CallAsync(new object[] {cityId, kladrCityId}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<KladrSynchronizationResult> ConfirmSynchronizeCityWithKladr(Guid? cityId, string kladrCityId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return confirmSynchronizeCityWithKladrCaller.Call<KladrSynchronizationResult>(new object[] { cityId, kladrCityId }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, KladrObject>> GetAllCities([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllCitiesCaller.Call<Dictionary<string, KladrObject>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<Dictionary<string, KladrObject>> GetCitiesByName(string cityName, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCitiesByNameCaller.Call<Dictionary<string, KladrObject>>(new object[] { cityName }, asyncState, requestTimeout);
        }

        public Task<KladrSynchronizationResult> SynchronizeCityWithKladr(Guid? cityId, string kladrCityId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return synchronizeCityWithKladrCaller.Call<KladrSynchronizationResult>(new object[] { cityId, kladrCityId }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CityService : ICityService
    {
        private readonly RemoteMethodCaller forceCitiesExportToIikoNetCaller;
        private readonly RemoteMethodCaller saveCityCaller;
        private readonly RemoteMethodCaller setCitiesDeletedCaller;
        private readonly RemoteMethodCaller setCityDeletedCaller;

        internal CityService()
        {

            forceCitiesExportToIikoNetCaller = new RemoteMethodCaller("city", "forceCitiesExportToIikoNet");

            saveCityCaller = new RemoteMethodCaller("city", "saveCity");
            saveCityCaller.AddArg("city", typeof(ByValue<City>));

            setCitiesDeletedCaller = new RemoteMethodCaller("city", "setCitiesDeleted");
            setCitiesDeletedCaller.AddArg("citiesIds", typeof(ICollection<Guid>));
            setCitiesDeletedCaller.AddArg("deleted", typeof(bool));

            setCityDeletedCaller = new RemoteMethodCaller("city", "setCityDeleted");
            setCityDeletedCaller.AddArg("cityId", typeof(Guid?));
            setCityDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> ForceCitiesExportToIikoNet()
        {
            return forceCitiesExportToIikoNetCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<object> SaveCity(ByValue<City> city)
        {
            return saveCityCaller.CreateCall<object>(new object[] { city });
        }

        public IServiceMethodCall<object> SetCitiesDeleted(ICollection<Guid> citiesIds, bool deleted)
        {
            return setCitiesDeletedCaller.CreateCall<object>(new object[] { citiesIds, deleted });
        }

        public IServiceMethodCall<object> SetCityDeleted(Guid? cityId, bool deleted)
        {
            return setCityDeletedCaller.CreateCall<object>(new object[] { cityId, deleted });
        }

        #endregion

        #region asynchronous version
        public void ForceCitiesExportToIikoNet(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            forceCitiesExportToIikoNetCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveCity(ByValue<City> city, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCityCaller.CallAsync(new object[] {city}, resultHandler, errorHandler);
        }

        public void SetCitiesDeleted(ICollection<Guid> citiesIds, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCitiesDeletedCaller.CallAsync(new object[] {citiesIds, deleted}, resultHandler, errorHandler);
        }

        public void SetCityDeleted(Guid? cityId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCityDeletedCaller.CallAsync(new object[] {cityId, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> ForceCitiesExportToIikoNet([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return forceCitiesExportToIikoNetCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SaveCity(ByValue<City> city, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCityCaller.Call<object>(new object[] { city }, asyncState, requestTimeout);
        }

        public Task<object> SetCitiesDeleted(ICollection<Guid> citiesIds, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCitiesDeletedCaller.Call<object>(new object[] { citiesIds, deleted }, asyncState, requestTimeout);
        }

        public Task<object> SetCityDeleted(Guid? cityId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCityDeletedCaller.Call<object>(new object[] { cityId, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class StreetService : IStreetService
    {
        private readonly RemoteMethodCaller getStreetCaller;
        private readonly RemoteMethodCaller getStreetsCaller;
        private readonly RemoteMethodCaller saveStreetCaller;
        private readonly RemoteMethodCaller searchStreetCaller;
        private readonly RemoteMethodCaller setStreetDeletedCaller;
        private readonly RemoteMethodCaller setStreetsDeletedCaller;

        internal StreetService()
        {

            getStreetCaller = new RemoteMethodCaller("street", "getStreet");
            getStreetCaller.AddArg("streetId", typeof(Guid?));

            getStreetsCaller = new RemoteMethodCaller("street", "getStreets");
            getStreetsCaller.AddArg("revision", typeof(int));

            saveStreetCaller = new RemoteMethodCaller("street", "saveStreet");
            saveStreetCaller.AddArg("street", typeof(Street));

            searchStreetCaller = new RemoteMethodCaller("street", "searchStreet");
            searchStreetCaller.AddArg("request", typeof(StreetSearchRequest));

            setStreetDeletedCaller = new RemoteMethodCaller("street", "setStreetDeleted");
            setStreetDeletedCaller.AddArg("streetId", typeof(Guid?));
            setStreetDeletedCaller.AddArg("deleted", typeof(bool));

            setStreetsDeletedCaller = new RemoteMethodCaller("street", "setStreetsDeleted");
            setStreetsDeletedCaller.AddArg("streetId", typeof(ICollection<Guid>));
            setStreetsDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<Street> GetStreet(Guid? streetId)
        {
            return getStreetCaller.CreateCall<Street>(new object[] { streetId });
        }

        public IServiceMethodCall<ICollection<Street>> GetStreets(int revision)
        {
            return getStreetsCaller.CreateCall<ICollection<Street>>(new object[] { revision });
        }

        public IServiceMethodCall<object> SaveStreet(Street street)
        {
            return saveStreetCaller.CreateCall<object>(new object[] { street });
        }

        public IServiceMethodCall<Street> SearchStreet(StreetSearchRequest request)
        {
            return searchStreetCaller.CreateCall<Street>(new object[] { request });
        }

        public IServiceMethodCall<object> SetStreetDeleted(Guid? streetId, bool deleted)
        {
            return setStreetDeletedCaller.CreateCall<object>(new object[] { streetId, deleted });
        }

        public IServiceMethodCall<object> SetStreetsDeleted(ICollection<Guid> streetId, bool deleted)
        {
            return setStreetsDeletedCaller.CreateCall<object>(new object[] { streetId, deleted });
        }

        #endregion

        #region asynchronous version
        public void GetStreet(Guid? streetId, AsyncErrorHandler errorHandler, Action<Street> resultHandler)
        {
            getStreetCaller.CallAsync(new object[] {streetId}, resultHandler, errorHandler);
        }

        public void GetStreets(int revision, AsyncErrorHandler errorHandler, Action<ICollection<Street>> resultHandler)
        {
            getStreetsCaller.CallAsync(new object[] {revision}, resultHandler, errorHandler);
        }

        public void SaveStreet(Street street, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveStreetCaller.CallAsync(new object[] {street}, resultHandler, errorHandler);
        }

        public void SearchStreet(StreetSearchRequest request, AsyncErrorHandler errorHandler, Action<Street> resultHandler)
        {
            searchStreetCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        public void SetStreetDeleted(Guid? streetId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setStreetDeletedCaller.CallAsync(new object[] {streetId, deleted}, resultHandler, errorHandler);
        }

        public void SetStreetsDeleted(ICollection<Guid> streetId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setStreetsDeletedCaller.CallAsync(new object[] {streetId, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Street> GetStreet(Guid? streetId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStreetCaller.Call<Street>(new object[] { streetId }, asyncState, requestTimeout);
        }

        public Task<ICollection<Street>> GetStreets(int revision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getStreetsCaller.Call<ICollection<Street>>(new object[] { revision }, asyncState, requestTimeout);
        }

        public Task<object> SaveStreet(Street street, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveStreetCaller.Call<object>(new object[] { street }, asyncState, requestTimeout);
        }

        public Task<Street> SearchStreet(StreetSearchRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return searchStreetCaller.Call<Street>(new object[] { request }, asyncState, requestTimeout);
        }

        public Task<object> SetStreetDeleted(Guid? streetId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setStreetDeletedCaller.Call<object>(new object[] { streetId, deleted }, asyncState, requestTimeout);
        }

        public Task<object> SetStreetsDeleted(ICollection<Guid> streetId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setStreetsDeletedCaller.Call<object>(new object[] { streetId, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class AnnouncementService : IAnnouncementService
    {
        private readonly RemoteMethodCaller getAllAnnouncementsCaller;
        private readonly RemoteMethodCaller getAnnouncementsFrontCaller;
        private readonly RemoteMethodCaller getAnnouncementsOfficeCaller;
        private readonly RemoteMethodCaller saveOrUpdateAnnouncementsCaller;

        internal AnnouncementService()
        {

            getAllAnnouncementsCaller = new RemoteMethodCaller("announcements", "getAllAnnouncements");
            getAllAnnouncementsCaller.AddArg("user", typeof(User));
            getAllAnnouncementsCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getAllAnnouncementsCaller.AddArg("dateFrom", typeof(DateTime?));
            getAllAnnouncementsCaller.AddArg("dateTo", typeof(DateTime?));
            getAllAnnouncementsCaller.AddArg("visibleInFront", typeof(bool?));
            getAllAnnouncementsCaller.AddArg("visibleInOffice", typeof(bool?));
            getAllAnnouncementsCaller.AddArg("includeDeleted", typeof(bool));
            getAllAnnouncementsCaller.AddArg("includeExpired", typeof(bool));

            getAnnouncementsFrontCaller = new RemoteMethodCaller("announcements", "getAnnouncementsFront");
            getAnnouncementsFrontCaller.AddArg("user", typeof(User));

            getAnnouncementsOfficeCaller = new RemoteMethodCaller("announcements", "getAnnouncementsOffice");

            saveOrUpdateAnnouncementsCaller = new RemoteMethodCaller("announcements", "saveOrUpdateAnnouncements");
            saveOrUpdateAnnouncementsCaller.AddArg("announcements", typeof(ICollection<Announcement>));
        }

        #region Synchronous versions
        public IServiceMethodCall<List<Announcement>> GetAllAnnouncements(User user, HashSet<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, bool? visibleInFront, bool? visibleInOffice, bool includeDeleted, bool includeExpired)
        {
            return getAllAnnouncementsCaller.CreateCall<List<Announcement>>(new object[] { user, departments, dateFrom, dateTo, visibleInFront, visibleInOffice, includeDeleted, includeExpired });
        }

        public IServiceMethodCall<List<Announcement>> GetAnnouncementsFront(User user)
        {
            return getAnnouncementsFrontCaller.CreateCall<List<Announcement>>(new object[] { user });
        }

        public IServiceMethodCall<List<Announcement>> GetAnnouncementsOffice()
        {
            return getAnnouncementsOfficeCaller.CreateCall<List<Announcement>>(new object[] {  });
        }

        public IServiceMethodCall<object> SaveOrUpdateAnnouncements(ICollection<Announcement> announcements)
        {
            return saveOrUpdateAnnouncementsCaller.CreateCall<object>(new object[] { announcements });
        }

        #endregion

        #region asynchronous version
        public void GetAllAnnouncements(User user, HashSet<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, bool? visibleInFront, bool? visibleInOffice, bool includeDeleted, bool includeExpired, AsyncErrorHandler errorHandler, Action<List<Announcement>> resultHandler)
        {
            getAllAnnouncementsCaller.CallAsync(new object[] {user, departments, dateFrom, dateTo, visibleInFront, visibleInOffice, includeDeleted, includeExpired}, resultHandler, errorHandler);
        }

        public void GetAnnouncementsFront(User user, AsyncErrorHandler errorHandler, Action<List<Announcement>> resultHandler)
        {
            getAnnouncementsFrontCaller.CallAsync(new object[] {user}, resultHandler, errorHandler);
        }

        public void GetAnnouncementsOffice(AsyncErrorHandler errorHandler, Action<List<Announcement>> resultHandler)
        {
            getAnnouncementsOfficeCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateAnnouncements(ICollection<Announcement> announcements, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateAnnouncementsCaller.CallAsync(new object[] {announcements}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<List<Announcement>> GetAllAnnouncements(User user, HashSet<DepartmentEntity> departments, DateTime? dateFrom, DateTime? dateTo, bool? visibleInFront, bool? visibleInOffice, bool includeDeleted, bool includeExpired, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllAnnouncementsCaller.Call<List<Announcement>>(new object[] { user, departments, dateFrom, dateTo, visibleInFront, visibleInOffice, includeDeleted, includeExpired }, asyncState, requestTimeout);
        }

        public Task<List<Announcement>> GetAnnouncementsFront(User user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAnnouncementsFrontCaller.Call<List<Announcement>>(new object[] { user }, asyncState, requestTimeout);
        }

        public Task<List<Announcement>> GetAnnouncementsOffice([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAnnouncementsOfficeCaller.Call<List<Announcement>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateAnnouncements(ICollection<Announcement> announcements, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateAnnouncementsCaller.Call<object>(new object[] { announcements }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CardProcessingService : ICardProcessingService
    {
        private readonly RemoteMethodCaller updateMappingCaller;

        internal CardProcessingService()
        {

            updateMappingCaller = new RemoteMethodCaller("card_processing", "updateMapping");
            updateMappingCaller.AddArg("mapping", typeof(ByValue<CardProcessingMapping>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateMapping(ByValue<CardProcessingMapping> mapping)
        {
            return updateMappingCaller.CreateCall<object>(new object[] { mapping });
        }

        #endregion

        #region asynchronous version
        public void UpdateMapping(ByValue<CardProcessingMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateMappingCaller.CallAsync(new object[] {mapping}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateMapping(ByValue<CardProcessingMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateMappingCaller.Call<object>(new object[] { mapping }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EdelweissConfigurationService : IEdelweissConfigurationService
    {
        private readonly RemoteMethodCaller updateMappingCaller;

        internal EdelweissConfigurationService()
        {

            updateMappingCaller = new RemoteMethodCaller("edelweiss", "updateMapping");
            updateMappingCaller.AddArg("mapping", typeof(ByValue<EdelweissMapping>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateMapping(ByValue<EdelweissMapping> mapping)
        {
            return updateMappingCaller.CreateCall<object>(new object[] { mapping });
        }

        #endregion

        #region asynchronous version
        public void UpdateMapping(ByValue<EdelweissMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateMappingCaller.CallAsync(new object[] {mapping}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateMapping(ByValue<EdelweissMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateMappingCaller.Call<object>(new object[] { mapping }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EpitomeConfigurationService : IEpitomeConfigurationService
    {
        private readonly RemoteMethodCaller updateMappingCaller;

        internal EpitomeConfigurationService()
        {

            updateMappingCaller = new RemoteMethodCaller("epitome", "updateMapping");
            updateMappingCaller.AddArg("mapping", typeof(ByValue<EpitomeMapping>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateMapping(ByValue<EpitomeMapping> mapping)
        {
            return updateMappingCaller.CreateCall<object>(new object[] { mapping });
        }

        #endregion

        #region asynchronous version
        public void UpdateMapping(ByValue<EpitomeMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateMappingCaller.CallAsync(new object[] {mapping}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateMapping(ByValue<EpitomeMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateMappingCaller.Call<object>(new object[] { mapping }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class HoistConfigurationService : IHoistConfigurationService
    {
        private readonly RemoteMethodCaller updateMappingCaller;

        internal HoistConfigurationService()
        {

            updateMappingCaller = new RemoteMethodCaller("hoist", "updateMapping");
            updateMappingCaller.AddArg("mapping", typeof(ByValue<HoistMapping>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateMapping(ByValue<HoistMapping> mapping)
        {
            return updateMappingCaller.CreateCall<object>(new object[] { mapping });
        }

        #endregion

        #region asynchronous version
        public void UpdateMapping(ByValue<HoistMapping> mapping, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateMappingCaller.CallAsync(new object[] {mapping}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateMapping(ByValue<HoistMapping> mapping, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateMappingCaller.Call<object>(new object[] { mapping }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoCard5SettingsService : IIikoCard5SettingsService
    {
        private readonly RemoteMethodCaller updateOrCreateIikoCard5SettingsCaller;

        internal IikoCard5SettingsService()
        {

            updateOrCreateIikoCard5SettingsCaller = new RemoteMethodCaller("iikoCard5Settings", "updateOrCreateIikoCard5Settings");
            updateOrCreateIikoCard5SettingsCaller.AddArg("iikoCard5Settings", typeof(ByValue<IikoCard5Settings>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateOrCreateIikoCard5Settings(ByValue<IikoCard5Settings> iikoCard5Settings)
        {
            return updateOrCreateIikoCard5SettingsCaller.CreateCall<object>(new object[] { iikoCard5Settings });
        }

        #endregion

        #region asynchronous version
        public void UpdateOrCreateIikoCard5Settings(ByValue<IikoCard5Settings> iikoCard5Settings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateOrCreateIikoCard5SettingsCaller.CallAsync(new object[] {iikoCard5Settings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateOrCreateIikoCard5Settings(ByValue<IikoCard5Settings> iikoCard5Settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateOrCreateIikoCard5SettingsCaller.Call<object>(new object[] { iikoCard5Settings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoNetService : IIikoNetService
    {
        private readonly RemoteMethodCaller updateOrCreateIikoNetSettingsCaller;

        internal IikoNetService()
        {

            updateOrCreateIikoNetSettingsCaller = new RemoteMethodCaller("iikoNet", "updateOrCreateIikoNetSettings");
            updateOrCreateIikoNetSettingsCaller.AddArg("iikoNetSettings", typeof(ByValue<IikoNetSettings>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateOrCreateIikoNetSettings(ByValue<IikoNetSettings> iikoNetSettings)
        {
            return updateOrCreateIikoNetSettingsCaller.CreateCall<object>(new object[] { iikoNetSettings });
        }

        #endregion

        #region asynchronous version
        public void UpdateOrCreateIikoNetSettings(ByValue<IikoNetSettings> iikoNetSettings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateOrCreateIikoNetSettingsCaller.CallAsync(new object[] {iikoNetSettings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateOrCreateIikoNetSettings(ByValue<IikoNetSettings> iikoNetSettings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateOrCreateIikoNetSettingsCaller.Call<object>(new object[] { iikoNetSettings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CurrencyRateService : ICurrencyRateService
    {
        private readonly RemoteMethodCaller applyChangesCaller;
        private readonly RemoteMethodCaller getRatesCaller;

        internal CurrencyRateService()
        {

            applyChangesCaller = new RemoteMethodCaller("currencyRate", "applyChanges");
            applyChangesCaller.AddArg("ratesToInsert", typeof(List<CurrencyRate>));
            applyChangesCaller.AddArg("ratesToUpdate", typeof(List<CurrencyRate>));
            applyChangesCaller.AddArg("ratesToDelete", typeof(List<CurrencyRate>));

            getRatesCaller = new RemoteMethodCaller("currencyRate", "getRates");
            getRatesCaller.AddArg("dateFrom", typeof(DateTime?));
            getRatesCaller.AddArg("dateTo", typeof(DateTime?));
            getRatesCaller.AddArg("currency", typeof(CurrencyEntity));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> ApplyChanges(List<CurrencyRate> ratesToInsert, List<CurrencyRate> ratesToUpdate, List<CurrencyRate> ratesToDelete)
        {
            return applyChangesCaller.CreateCall<object>(new object[] { ratesToInsert, ratesToUpdate, ratesToDelete });
        }

        public IServiceMethodCall<ICollection<CurrencyRate>> GetRates(DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency)
        {
            return getRatesCaller.CreateCall<ICollection<CurrencyRate>>(new object[] { dateFrom, dateTo, currency });
        }

        #endregion

        #region asynchronous version
        public void ApplyChanges(List<CurrencyRate> ratesToInsert, List<CurrencyRate> ratesToUpdate, List<CurrencyRate> ratesToDelete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            applyChangesCaller.CallAsync(new object[] {ratesToInsert, ratesToUpdate, ratesToDelete}, resultHandler, errorHandler);
        }

        public void GetRates(DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency, AsyncErrorHandler errorHandler, Action<ICollection<CurrencyRate>> resultHandler)
        {
            getRatesCaller.CallAsync(new object[] {dateFrom, dateTo, currency}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> ApplyChanges(List<CurrencyRate> ratesToInsert, List<CurrencyRate> ratesToUpdate, List<CurrencyRate> ratesToDelete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return applyChangesCaller.Call<object>(new object[] { ratesToInsert, ratesToUpdate, ratesToDelete }, asyncState, requestTimeout);
        }

        public Task<ICollection<CurrencyRate>> GetRates(DateTime? dateFrom, DateTime? dateTo, CurrencyEntity currency, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRatesCaller.Call<ICollection<CurrencyRate>>(new object[] { dateFrom, dateTo, currency }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CurrencyService : ICurrencyService
    {
        private readonly RemoteMethodCaller deleteOrRestoreCaller;
        private readonly RemoteMethodCaller saveCurrencyCaller;
        private readonly RemoteMethodCaller saveCurrencyEntityCaller;

        internal CurrencyService()
        {

            deleteOrRestoreCaller = new RemoteMethodCaller("currency", "deleteOrRestore");
            deleteOrRestoreCaller.AddArg("currency", typeof(CurrencyEntity));
            deleteOrRestoreCaller.AddArg("delete", typeof(bool));

            saveCurrencyCaller = new RemoteMethodCaller("currency", "saveCurrency");
            saveCurrencyCaller.AddArg("currency", typeof(Currency));

            saveCurrencyEntityCaller = new RemoteMethodCaller("currency", "saveCurrencyEntity");
            saveCurrencyEntityCaller.AddArg("currency", typeof(ByValue<CurrencyEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> DeleteOrRestore(CurrencyEntity currency, bool delete)
        {
            return deleteOrRestoreCaller.CreateCall<object>(new object[] { currency, delete });
        }

        public IServiceMethodCall<object> SaveCurrency(Currency currency)
        {
            return saveCurrencyCaller.CreateCall<object>(new object[] { currency });
        }

        public IServiceMethodCall<object> SaveCurrencyEntity(ByValue<CurrencyEntity> currency)
        {
            return saveCurrencyEntityCaller.CreateCall<object>(new object[] { currency });
        }

        #endregion

        #region asynchronous version
        public void DeleteOrRestore(CurrencyEntity currency, bool delete, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteOrRestoreCaller.CallAsync(new object[] {currency, delete}, resultHandler, errorHandler);
        }

        public void SaveCurrency(Currency currency, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCurrencyCaller.CallAsync(new object[] {currency}, resultHandler, errorHandler);
        }

        public void SaveCurrencyEntity(ByValue<CurrencyEntity> currency, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCurrencyEntityCaller.CallAsync(new object[] {currency}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> DeleteOrRestore(CurrencyEntity currency, bool delete, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteOrRestoreCaller.Call<object>(new object[] { currency, delete }, asyncState, requestTimeout);
        }

        public Task<object> SaveCurrency(Currency currency, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCurrencyCaller.Call<object>(new object[] { currency }, asyncState, requestTimeout);
        }

        public Task<object> SaveCurrencyEntity(ByValue<CurrencyEntity> currency, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCurrencyEntityCaller.Call<object>(new object[] { currency }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CustomerEvents : ICustomerEvents
    {
        private readonly RemoteMethodCaller fireCustomersListExcelExportedCaller;

        internal CustomerEvents()
        {

            fireCustomersListExcelExportedCaller = new RemoteMethodCaller("CustomerEvents", "fireCustomersListExcelExported");
        }

        #region Synchronous versions
        public IServiceMethodCall<object> FireCustomersListExcelExported()
        {
            return fireCustomersListExcelExportedCaller.CreateCall<object>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void FireCustomersListExcelExported(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            fireCustomersListExcelExportedCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> FireCustomersListExcelExported([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fireCustomersListExcelExportedCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class CustomerService : ICustomerService
    {
        private readonly RemoteMethodCaller forceExchangeIikoBizCaller;
        private readonly RemoteMethodCaller getCustomerByIdCaller;
        private readonly RemoteMethodCaller getCustomersCaller;
        private readonly RemoteMethodCaller saveCustomerCaller;
        private readonly RemoteMethodCaller searchCustomerCaller;
        private readonly RemoteMethodCaller setCustomerConsentDatesCaller;
        private readonly RemoteMethodCaller setCustomerConsentDatesByCreatedCaller;
        private readonly RemoteMethodCaller setCustomerDeletedCaller;
        private readonly RemoteMethodCaller setCustomerProcessingDatesCaller;
        private readonly RemoteMethodCaller setCustomersDeletedCaller;

        internal CustomerService()
        {

            forceExchangeIikoBizCaller = new RemoteMethodCaller("customer", "forceExchangeIikoBiz");

            getCustomerByIdCaller = new RemoteMethodCaller("customer", "getCustomerById");
            getCustomerByIdCaller.AddArg("customerId", typeof(Guid?));
            getCustomerByIdCaller.AddArg("request", typeof(BrdDataLoadingRequest));

            getCustomersCaller = new RemoteMethodCaller("customer", "getCustomers");
            getCustomersCaller.AddArg("customersIds", typeof(List<Guid>));

            saveCustomerCaller = new RemoteMethodCaller("customer", "saveCustomer");
            saveCustomerCaller.AddArg("customer", typeof(Customer));

            searchCustomerCaller = new RemoteMethodCaller("customer", "searchCustomer");
            searchCustomerCaller.AddArg("request", typeof(CustomerSearchRequest));

            setCustomerConsentDatesCaller = new RemoteMethodCaller("customer", "setCustomerConsentDates");
            setCustomerConsentDatesCaller.AddArg("customerIdsFilterInfo", typeof(CustomerIdsFilterInfo));
            setCustomerConsentDatesCaller.AddArg("consentDateFrom", typeof(DateTime?));
            setCustomerConsentDatesCaller.AddArg("consentDateTo", typeof(DateTime?));

            setCustomerConsentDatesByCreatedCaller = new RemoteMethodCaller("customer", "setCustomerConsentDatesByCreated");
            setCustomerConsentDatesByCreatedCaller.AddArg("customerIdsFilterInfo", typeof(CustomerIdsFilterInfo));
            setCustomerConsentDatesByCreatedCaller.AddArg("daysAfterCreated", typeof(int));

            setCustomerDeletedCaller = new RemoteMethodCaller("customer", "setCustomerDeleted");
            setCustomerDeletedCaller.AddArg("customerId", typeof(Guid?));
            setCustomerDeletedCaller.AddArg("deleted", typeof(bool));

            setCustomerProcessingDatesCaller = new RemoteMethodCaller("customer", "setCustomerProcessingDates");
            setCustomerProcessingDatesCaller.AddArg("customerIdsFilterInfo", typeof(CustomerIdsFilterInfo));
            setCustomerProcessingDatesCaller.AddArg("newConsent", typeof(bool?));
            setCustomerProcessingDatesCaller.AddArg("processingDateFrom", typeof(DateTime?));
            setCustomerProcessingDatesCaller.AddArg("processingDateTo", typeof(DateTime?));

            setCustomersDeletedCaller = new RemoteMethodCaller("customer", "setCustomersDeleted");
            setCustomersDeletedCaller.AddArg("customerId", typeof(ICollection<Guid>));
            setCustomersDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<CustomerImporterResult> ForceExchangeIikoBiz()
        {
            return forceExchangeIikoBizCaller.CreateCall<CustomerImporterResult>(new object[] {  });
        }

        public IServiceMethodCall<BrdDataLoadingResponse> GetCustomerById(Guid? customerId, BrdDataLoadingRequest request)
        {
            return getCustomerByIdCaller.CreateCall<BrdDataLoadingResponse>(new object[] { customerId, request });
        }

        public IServiceMethodCall<List<Customer>> GetCustomers(List<Guid> customersIds)
        {
            return getCustomersCaller.CreateCall<List<Customer>>(new object[] { customersIds });
        }

        public IServiceMethodCall<object> SaveCustomer(Customer customer)
        {
            return saveCustomerCaller.CreateCall<object>(new object[] { customer });
        }

        public IServiceMethodCall<Customer> SearchCustomer(CustomerSearchRequest request)
        {
            return searchCustomerCaller.CreateCall<Customer>(new object[] { request });
        }

        public IServiceMethodCall<int> SetCustomerConsentDates(CustomerIdsFilterInfo customerIdsFilterInfo, DateTime? consentDateFrom, DateTime? consentDateTo)
        {
            return setCustomerConsentDatesCaller.CreateCall<int>(new object[] { customerIdsFilterInfo, consentDateFrom, consentDateTo });
        }

        public IServiceMethodCall<int> SetCustomerConsentDatesByCreated(CustomerIdsFilterInfo customerIdsFilterInfo, int daysAfterCreated)
        {
            return setCustomerConsentDatesByCreatedCaller.CreateCall<int>(new object[] { customerIdsFilterInfo, daysAfterCreated });
        }

        public IServiceMethodCall<object> SetCustomerDeleted(Guid? customerId, bool deleted)
        {
            return setCustomerDeletedCaller.CreateCall<object>(new object[] { customerId, deleted });
        }

        public IServiceMethodCall<int> SetCustomerProcessingDates(CustomerIdsFilterInfo customerIdsFilterInfo, bool? newConsent, DateTime? processingDateFrom, DateTime? processingDateTo)
        {
            return setCustomerProcessingDatesCaller.CreateCall<int>(new object[] { customerIdsFilterInfo, newConsent, processingDateFrom, processingDateTo });
        }

        public IServiceMethodCall<object> SetCustomersDeleted(ICollection<Guid> customerId, bool deleted)
        {
            return setCustomersDeletedCaller.CreateCall<object>(new object[] { customerId, deleted });
        }

        #endregion

        #region asynchronous version
        public void ForceExchangeIikoBiz(AsyncErrorHandler errorHandler, Action<CustomerImporterResult> resultHandler)
        {
            forceExchangeIikoBizCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetCustomerById(Guid? customerId, BrdDataLoadingRequest request, AsyncErrorHandler errorHandler, Action<BrdDataLoadingResponse> resultHandler)
        {
            getCustomerByIdCaller.CallAsync(new object[] {customerId, request}, resultHandler, errorHandler);
        }

        public void GetCustomers(List<Guid> customersIds, AsyncErrorHandler errorHandler, Action<List<Customer>> resultHandler)
        {
            getCustomersCaller.CallAsync(new object[] {customersIds}, resultHandler, errorHandler);
        }

        public void SaveCustomer(Customer customer, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveCustomerCaller.CallAsync(new object[] {customer}, resultHandler, errorHandler);
        }

        public void SearchCustomer(CustomerSearchRequest request, AsyncErrorHandler errorHandler, Action<Customer> resultHandler)
        {
            searchCustomerCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        public void SetCustomerConsentDates(CustomerIdsFilterInfo customerIdsFilterInfo, DateTime? consentDateFrom, DateTime? consentDateTo, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            setCustomerConsentDatesCaller.CallAsync(new object[] {customerIdsFilterInfo, consentDateFrom, consentDateTo}, resultHandler, errorHandler);
        }

        public void SetCustomerConsentDatesByCreated(CustomerIdsFilterInfo customerIdsFilterInfo, int daysAfterCreated, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            setCustomerConsentDatesByCreatedCaller.CallAsync(new object[] {customerIdsFilterInfo, daysAfterCreated}, resultHandler, errorHandler);
        }

        public void SetCustomerDeleted(Guid? customerId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCustomerDeletedCaller.CallAsync(new object[] {customerId, deleted}, resultHandler, errorHandler);
        }

        public void SetCustomerProcessingDates(CustomerIdsFilterInfo customerIdsFilterInfo, bool? newConsent, DateTime? processingDateFrom, DateTime? processingDateTo, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            setCustomerProcessingDatesCaller.CallAsync(new object[] {customerIdsFilterInfo, newConsent, processingDateFrom, processingDateTo}, resultHandler, errorHandler);
        }

        public void SetCustomersDeleted(ICollection<Guid> customerId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setCustomersDeletedCaller.CallAsync(new object[] {customerId, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<CustomerImporterResult> ForceExchangeIikoBiz([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return forceExchangeIikoBizCaller.Call<CustomerImporterResult>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<BrdDataLoadingResponse> GetCustomerById(Guid? customerId, BrdDataLoadingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCustomerByIdCaller.Call<BrdDataLoadingResponse>(new object[] { customerId, request }, asyncState, requestTimeout);
        }

        public Task<List<Customer>> GetCustomers(List<Guid> customersIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCustomersCaller.Call<List<Customer>>(new object[] { customersIds }, asyncState, requestTimeout);
        }

        public Task<object> SaveCustomer(Customer customer, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveCustomerCaller.Call<object>(new object[] { customer }, asyncState, requestTimeout);
        }

        public Task<Customer> SearchCustomer(CustomerSearchRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return searchCustomerCaller.Call<Customer>(new object[] { request }, asyncState, requestTimeout);
        }

        public Task<int> SetCustomerConsentDates(CustomerIdsFilterInfo customerIdsFilterInfo, DateTime? consentDateFrom, DateTime? consentDateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCustomerConsentDatesCaller.Call<int>(new object[] { customerIdsFilterInfo, consentDateFrom, consentDateTo }, asyncState, requestTimeout);
        }

        public Task<int> SetCustomerConsentDatesByCreated(CustomerIdsFilterInfo customerIdsFilterInfo, int daysAfterCreated, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCustomerConsentDatesByCreatedCaller.Call<int>(new object[] { customerIdsFilterInfo, daysAfterCreated }, asyncState, requestTimeout);
        }

        public Task<object> SetCustomerDeleted(Guid? customerId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCustomerDeletedCaller.Call<object>(new object[] { customerId, deleted }, asyncState, requestTimeout);
        }

        public Task<int> SetCustomerProcessingDates(CustomerIdsFilterInfo customerIdsFilterInfo, bool? newConsent, DateTime? processingDateFrom, DateTime? processingDateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCustomerProcessingDatesCaller.Call<int>(new object[] { customerIdsFilterInfo, newConsent, processingDateFrom, processingDateTo }, asyncState, requestTimeout);
        }

        public Task<object> SetCustomersDeleted(ICollection<Guid> customerId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setCustomersDeletedCaller.Call<object>(new object[] { customerId, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryService : IDeliveryService
    {
        private readonly RemoteMethodCaller updateDeliveryCancelCausesCaller;

        internal DeliveryService()
        {

            updateDeliveryCancelCausesCaller = new RemoteMethodCaller("delivery", "updateDeliveryCancelCauses");
            updateDeliveryCancelCausesCaller.AddArg("causes", typeof(List<ByValue<DeliveryCancelCause>>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateDeliveryCancelCauses(List<ByValue<DeliveryCancelCause>> causes)
        {
            return updateDeliveryCancelCausesCaller.CreateCall<object>(new object[] { causes });
        }

        #endregion

        #region asynchronous version
        public void UpdateDeliveryCancelCauses(List<ByValue<DeliveryCancelCause>> causes, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDeliveryCancelCausesCaller.CallAsync(new object[] {causes}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateDeliveryCancelCauses(List<ByValue<DeliveryCancelCause>> causes, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDeliveryCancelCausesCaller.Call<object>(new object[] { causes }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryOrderGeocodeService : IDeliveryOrderGeocodeService
    {
        private readonly RemoteMethodCaller findDeliveryZonesCaller;
        private readonly RemoteMethodCaller getSinglePointCaller;

        internal DeliveryOrderGeocodeService()
        {

            findDeliveryZonesCaller = new RemoteMethodCaller("deliveryOrderGeocode", "findDeliveryZones");
            findDeliveryZonesCaller.AddArg("deliveryAddress", typeof(string));
            findDeliveryZonesCaller.AddArg("deliveryAddressPoint", typeof(DeliveryZonePoint));

            getSinglePointCaller = new RemoteMethodCaller("deliveryOrderGeocode", "getSinglePoint");
            getSinglePointCaller.AddArg("deliveryAddress", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<DeliveryGeocodeResponse> FindDeliveryZones(string deliveryAddress, DeliveryZonePoint deliveryAddressPoint)
        {
            return findDeliveryZonesCaller.CreateCall<DeliveryGeocodeResponse>(new object[] { deliveryAddress, deliveryAddressPoint });
        }

        public IServiceMethodCall<DeliveryGeocodeResponse> GetSinglePoint(string deliveryAddress)
        {
            return getSinglePointCaller.CreateCall<DeliveryGeocodeResponse>(new object[] { deliveryAddress });
        }

        #endregion

        #region asynchronous version
        public void FindDeliveryZones(string deliveryAddress, DeliveryZonePoint deliveryAddressPoint, AsyncErrorHandler errorHandler, Action<DeliveryGeocodeResponse> resultHandler)
        {
            findDeliveryZonesCaller.CallAsync(new object[] {deliveryAddress, deliveryAddressPoint}, resultHandler, errorHandler);
        }

        public void GetSinglePoint(string deliveryAddress, AsyncErrorHandler errorHandler, Action<DeliveryGeocodeResponse> resultHandler)
        {
            getSinglePointCaller.CallAsync(new object[] {deliveryAddress}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DeliveryGeocodeResponse> FindDeliveryZones(string deliveryAddress, DeliveryZonePoint deliveryAddressPoint, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return findDeliveryZonesCaller.Call<DeliveryGeocodeResponse>(new object[] { deliveryAddress, deliveryAddressPoint }, asyncState, requestTimeout);
        }

        public Task<DeliveryGeocodeResponse> GetSinglePoint(string deliveryAddress, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSinglePointCaller.Call<DeliveryGeocodeResponse>(new object[] { deliveryAddress }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryHeatMapService : IDeliveryHeatMapService
    {
        private readonly RemoteMethodCaller getDeliveryHeatMapCaller;

        internal DeliveryHeatMapService()
        {

            getDeliveryHeatMapCaller = new RemoteMethodCaller("deliveryHeatMapInfoCalculate", "getDeliveryHeatMap");
            getDeliveryHeatMapCaller.AddArg("dateFrom", typeof(DateTime?));
            getDeliveryHeatMapCaller.AddArg("dateTo", typeof(DateTime?));
            getDeliveryHeatMapCaller.AddArg("polygonSideInMeters", typeof(int));
            getDeliveryHeatMapCaller.AddArg("heatMapReportType", typeof(DeliveryHeatMapReportType));
            getDeliveryHeatMapCaller.AddArg("marketingSource", typeof(MarketingSource));
        }

        #region Synchronous versions
        public IServiceMethodCall<DeliveryHeatMapInfo> GetDeliveryHeatMap(DateTime? dateFrom, DateTime? dateTo, int polygonSideInMeters, DeliveryHeatMapReportType heatMapReportType, MarketingSource marketingSource)
        {
            return getDeliveryHeatMapCaller.CreateCall<DeliveryHeatMapInfo>(new object[] { dateFrom, dateTo, polygonSideInMeters, heatMapReportType, marketingSource });
        }

        #endregion

        #region asynchronous version
        public void GetDeliveryHeatMap(DateTime? dateFrom, DateTime? dateTo, int polygonSideInMeters, DeliveryHeatMapReportType heatMapReportType, MarketingSource marketingSource, AsyncErrorHandler errorHandler, Action<DeliveryHeatMapInfo> resultHandler)
        {
            getDeliveryHeatMapCaller.CallAsync(new object[] {dateFrom, dateTo, polygonSideInMeters, heatMapReportType, marketingSource}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DeliveryHeatMapInfo> GetDeliveryHeatMap(DateTime? dateFrom, DateTime? dateTo, int polygonSideInMeters, DeliveryHeatMapReportType heatMapReportType, MarketingSource marketingSource, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDeliveryHeatMapCaller.Call<DeliveryHeatMapInfo>(new object[] { dateFrom, dateTo, polygonSideInMeters, heatMapReportType, marketingSource }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class BrdDataLoadingService : IBrdDataLoadingService
    {
        private readonly RemoteMethodCaller getAllBrdDataCaller;

        internal BrdDataLoadingService()
        {

            getAllBrdDataCaller = new RemoteMethodCaller("brdDataLoading", "getAllBrdData");
            getAllBrdDataCaller.AddArg("request", typeof(BrdDataLoadingRequest));
        }

        #region Synchronous versions
        public IServiceMethodCall<BrdDataLoadingResponse> GetAllBrdData(BrdDataLoadingRequest request)
        {
            return getAllBrdDataCaller.CreateCall<BrdDataLoadingResponse>(new object[] { request });
        }

        #endregion

        #region asynchronous version
        public void GetAllBrdData(BrdDataLoadingRequest request, AsyncErrorHandler errorHandler, Action<BrdDataLoadingResponse> resultHandler)
        {
            getAllBrdDataCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<BrdDataLoadingResponse> GetAllBrdData(BrdDataLoadingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllBrdDataCaller.Call<BrdDataLoadingResponse>(new object[] { request }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class TerminalDeliveryDurationService : ITerminalDeliveryDurationService
    {
        private readonly RemoteMethodCaller getCourierDeliveryDurationInMinutesCaller;
        private readonly RemoteMethodCaller getDeliveryTerminalsDurationInMinutesCaller;
        private readonly RemoteMethodCaller getSelfServiceDeliveryDurationInMinutesCaller;

        internal TerminalDeliveryDurationService()
        {

            getCourierDeliveryDurationInMinutesCaller = new RemoteMethodCaller("terminalDeliveryDurationService", "getCourierDeliveryDurationInMinutes");
            getCourierDeliveryDurationInMinutesCaller.AddArg("deliveryTerminal", typeof(DeliveryTerminal));

            getDeliveryTerminalsDurationInMinutesCaller = new RemoteMethodCaller("terminalDeliveryDurationService", "getDeliveryTerminalsDurationInMinutes");
            getDeliveryTerminalsDurationInMinutesCaller.AddArg("deliveryTerminals", typeof(ICollection<DeliveryTerminal>));

            getSelfServiceDeliveryDurationInMinutesCaller = new RemoteMethodCaller("terminalDeliveryDurationService", "getSelfServiceDeliveryDurationInMinutes");
            getSelfServiceDeliveryDurationInMinutesCaller.AddArg("deliveryTerminal", typeof(DeliveryTerminal));
        }

        #region Synchronous versions
        public IServiceMethodCall<long?> GetCourierDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal)
        {
            return getCourierDeliveryDurationInMinutesCaller.CreateCall<long?>(new object[] { deliveryTerminal });
        }

        public IServiceMethodCall<Dictionary<Guid, TerminalDeliveryDuration>> GetDeliveryTerminalsDurationInMinutes(ICollection<DeliveryTerminal> deliveryTerminals)
        {
            return getDeliveryTerminalsDurationInMinutesCaller.CreateCall<Dictionary<Guid, TerminalDeliveryDuration>>(new object[] { deliveryTerminals });
        }

        public IServiceMethodCall<long?> GetSelfServiceDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal)
        {
            return getSelfServiceDeliveryDurationInMinutesCaller.CreateCall<long?>(new object[] { deliveryTerminal });
        }

        #endregion

        #region asynchronous version
        public void GetCourierDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, AsyncErrorHandler errorHandler, Action<long?> resultHandler)
        {
            getCourierDeliveryDurationInMinutesCaller.CallAsync(new object[] {deliveryTerminal}, resultHandler, errorHandler);
        }

        public void GetDeliveryTerminalsDurationInMinutes(ICollection<DeliveryTerminal> deliveryTerminals, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, TerminalDeliveryDuration>> resultHandler)
        {
            getDeliveryTerminalsDurationInMinutesCaller.CallAsync(new object[] {deliveryTerminals}, resultHandler, errorHandler);
        }

        public void GetSelfServiceDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, AsyncErrorHandler errorHandler, Action<long?> resultHandler)
        {
            getSelfServiceDeliveryDurationInMinutesCaller.CallAsync(new object[] {deliveryTerminal}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<long?> GetCourierDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCourierDeliveryDurationInMinutesCaller.Call<long?>(new object[] { deliveryTerminal }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, TerminalDeliveryDuration>> GetDeliveryTerminalsDurationInMinutes(ICollection<DeliveryTerminal> deliveryTerminals, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDeliveryTerminalsDurationInMinutesCaller.Call<Dictionary<Guid, TerminalDeliveryDuration>>(new object[] { deliveryTerminals }, asyncState, requestTimeout);
        }

        public Task<long?> GetSelfServiceDeliveryDurationInMinutes(DeliveryTerminal deliveryTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSelfServiceDeliveryDurationInMinutesCaller.Call<long?>(new object[] { deliveryTerminal }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryTerminalWorkloadService : IDeliveryTerminalWorkloadService
    {
        private readonly RemoteMethodCaller getDeliveryTerminalWorkloadCaller;
        private readonly RemoteMethodCaller getDeliveryTerminalsWorkloadCaller;

        internal DeliveryTerminalWorkloadService()
        {

            getDeliveryTerminalWorkloadCaller = new RemoteMethodCaller("deliveryTerminalWorkloadService", "getDeliveryTerminalWorkload");
            getDeliveryTerminalWorkloadCaller.AddArg("deliveryTerminal", typeof(DeliveryTerminal));

            getDeliveryTerminalsWorkloadCaller = new RemoteMethodCaller("deliveryTerminalWorkloadService", "getDeliveryTerminalsWorkload");
            getDeliveryTerminalsWorkloadCaller.AddArg("deliveryTerminals", typeof(ICollection<DeliveryTerminal>));
        }

        #region Synchronous versions
        public IServiceMethodCall<DeliveryTerminalWorkload> GetDeliveryTerminalWorkload(DeliveryTerminal deliveryTerminal)
        {
            return getDeliveryTerminalWorkloadCaller.CreateCall<DeliveryTerminalWorkload>(new object[] { deliveryTerminal });
        }

        public IServiceMethodCall<Dictionary<Guid, DeliveryTerminalWorkload>> GetDeliveryTerminalsWorkload(ICollection<DeliveryTerminal> deliveryTerminals)
        {
            return getDeliveryTerminalsWorkloadCaller.CreateCall<Dictionary<Guid, DeliveryTerminalWorkload>>(new object[] { deliveryTerminals });
        }

        #endregion

        #region asynchronous version
        public void GetDeliveryTerminalWorkload(DeliveryTerminal deliveryTerminal, AsyncErrorHandler errorHandler, Action<DeliveryTerminalWorkload> resultHandler)
        {
            getDeliveryTerminalWorkloadCaller.CallAsync(new object[] {deliveryTerminal}, resultHandler, errorHandler);
        }

        public void GetDeliveryTerminalsWorkload(ICollection<DeliveryTerminal> deliveryTerminals, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, DeliveryTerminalWorkload>> resultHandler)
        {
            getDeliveryTerminalsWorkloadCaller.CallAsync(new object[] {deliveryTerminals}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DeliveryTerminalWorkload> GetDeliveryTerminalWorkload(DeliveryTerminal deliveryTerminal, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDeliveryTerminalWorkloadCaller.Call<DeliveryTerminalWorkload>(new object[] { deliveryTerminal }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, DeliveryTerminalWorkload>> GetDeliveryTerminalsWorkload(ICollection<DeliveryTerminal> deliveryTerminals, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getDeliveryTerminalsWorkloadCaller.Call<Dictionary<Guid, DeliveryTerminalWorkload>>(new object[] { deliveryTerminals }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryExternalAssignationService : IDeliveryExternalAssignationService
    {
        private readonly RemoteMethodCaller assignDeliveryToTerminalCaller;
        private readonly RemoteMethodCaller isEnabledCaller;

        internal DeliveryExternalAssignationService()
        {

            assignDeliveryToTerminalCaller = new RemoteMethodCaller("DeliveryExternalAssignation", "assignDeliveryToTerminal");
            assignDeliveryToTerminalCaller.AddArg("request", typeof(AssignationRequest));

            isEnabledCaller = new RemoteMethodCaller("DeliveryExternalAssignation", "isEnabled");
        }

        #region Synchronous versions
        public IServiceMethodCall<AssignationResponse> AssignDeliveryToTerminal(AssignationRequest request)
        {
            return assignDeliveryToTerminalCaller.CreateCall<AssignationResponse>(new object[] { request });
        }

        public IServiceMethodCall<bool> IsEnabled()
        {
            return isEnabledCaller.CreateCall<bool>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void AssignDeliveryToTerminal(AssignationRequest request, AsyncErrorHandler errorHandler, Action<AssignationResponse> resultHandler)
        {
            assignDeliveryToTerminalCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        public void IsEnabled(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isEnabledCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<AssignationResponse> AssignDeliveryToTerminal(AssignationRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return assignDeliveryToTerminalCaller.Call<AssignationResponse>(new object[] { request }, asyncState, requestTimeout);
        }

        public Task<bool> IsEnabled([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isEnabledCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DeliveryLogisticsService : IDeliveryLogisticsService
    {
        private readonly RemoteMethodCaller assignCouriersToOrdersCaller;
        private readonly RemoteMethodCaller calculateCourierComeBackTimeCaller;

        internal DeliveryLogisticsService()
        {

            assignCouriersToOrdersCaller = new RemoteMethodCaller("DeliveryLogistics", "assignCouriersToOrders");
            assignCouriersToOrdersCaller.AddArg("serviceRequestDto", typeof(AssignCouriersToOrdersRequestDto));

            calculateCourierComeBackTimeCaller = new RemoteMethodCaller("DeliveryLogistics", "calculateCourierComeBackTime");
            calculateCourierComeBackTimeCaller.AddArg("request", typeof(CourierComeBackTimeRequestDto));
        }

        #region Synchronous versions
        public IServiceMethodCall<AssignCouriersToOrdersResponseDto> AssignCouriersToOrders(AssignCouriersToOrdersRequestDto serviceRequestDto)
        {
            return assignCouriersToOrdersCaller.CreateCall<AssignCouriersToOrdersResponseDto>(new object[] { serviceRequestDto });
        }

        public IServiceMethodCall<CourierComeBackTimeResponseDto> CalculateCourierComeBackTime(CourierComeBackTimeRequestDto request)
        {
            return calculateCourierComeBackTimeCaller.CreateCall<CourierComeBackTimeResponseDto>(new object[] { request });
        }

        #endregion

        #region asynchronous version
        public void AssignCouriersToOrders(AssignCouriersToOrdersRequestDto serviceRequestDto, AsyncErrorHandler errorHandler, Action<AssignCouriersToOrdersResponseDto> resultHandler)
        {
            assignCouriersToOrdersCaller.CallAsync(new object[] {serviceRequestDto}, resultHandler, errorHandler);
        }

        public void CalculateCourierComeBackTime(CourierComeBackTimeRequestDto request, AsyncErrorHandler errorHandler, Action<CourierComeBackTimeResponseDto> resultHandler)
        {
            calculateCourierComeBackTimeCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<AssignCouriersToOrdersResponseDto> AssignCouriersToOrders(AssignCouriersToOrdersRequestDto serviceRequestDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return assignCouriersToOrdersCaller.Call<AssignCouriersToOrdersResponseDto>(new object[] { serviceRequestDto }, asyncState, requestTimeout);
        }

        public Task<CourierComeBackTimeResponseDto> CalculateCourierComeBackTime(CourierComeBackTimeRequestDto request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return calculateCourierComeBackTimeCaller.Call<CourierComeBackTimeResponseDto>(new object[] { request }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class MarketingSourceService : IMarketingSourceService
    {
        private readonly RemoteMethodCaller saveMarketingSourceCaller;
        private readonly RemoteMethodCaller setMarketingSourceDeletedCaller;

        internal MarketingSourceService()
        {

            saveMarketingSourceCaller = new RemoteMethodCaller("marketingSource", "saveMarketingSource");
            saveMarketingSourceCaller.AddArg("marketingSource", typeof(ByValue<MarketingSource>));

            setMarketingSourceDeletedCaller = new RemoteMethodCaller("marketingSource", "setMarketingSourceDeleted");
            setMarketingSourceDeletedCaller.AddArg("marketingSourceId", typeof(Guid?));
            setMarketingSourceDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> SaveMarketingSource(ByValue<MarketingSource> marketingSource)
        {
            return saveMarketingSourceCaller.CreateCall<object>(new object[] { marketingSource });
        }

        public IServiceMethodCall<object> SetMarketingSourceDeleted(Guid? marketingSourceId, bool deleted)
        {
            return setMarketingSourceDeletedCaller.CreateCall<object>(new object[] { marketingSourceId, deleted });
        }

        #endregion

        #region asynchronous version
        public void SaveMarketingSource(ByValue<MarketingSource> marketingSource, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveMarketingSourceCaller.CallAsync(new object[] {marketingSource}, resultHandler, errorHandler);
        }

        public void SetMarketingSourceDeleted(Guid? marketingSourceId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setMarketingSourceDeletedCaller.CallAsync(new object[] {marketingSourceId, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> SaveMarketingSource(ByValue<MarketingSource> marketingSource, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveMarketingSourceCaller.Call<object>(new object[] { marketingSource }, asyncState, requestTimeout);
        }

        public Task<object> SetMarketingSourceDeleted(Guid? marketingSourceId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setMarketingSourceDeletedCaller.Call<object>(new object[] { marketingSourceId, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DiscountService : IDiscountService
    {
        private readonly RemoteMethodCaller addDiscountPeriodCaller;
        private readonly RemoteMethodCaller addDiscountTypeCaller;
        private readonly RemoteMethodCaller createIikoCard5DiscountCaller;
        private readonly RemoteMethodCaller createOrUpdateDiscountPeriodCaller;
        private readonly RemoteMethodCaller removeDiscountPeriodCaller;
        private readonly RemoteMethodCaller removeDiscountTypeCaller;
        private readonly RemoteMethodCaller restoreDiscountPeriodCaller;
        private readonly RemoteMethodCaller restoreDiscountTypeCaller;
        private readonly RemoteMethodCaller updateDiscountTypeCaller;

        internal DiscountService()
        {

            addDiscountPeriodCaller = new RemoteMethodCaller("discountType", "addDiscountPeriod");
            addDiscountPeriodCaller.AddArg("discountPeriod", typeof(ByValue<DiscountPeriod>));

            addDiscountTypeCaller = new RemoteMethodCaller("discountType", "addDiscountType");
            addDiscountTypeCaller.AddArg("discountType", typeof(ByValue<DiscountType>));

            createIikoCard5DiscountCaller = new RemoteMethodCaller("discountType", "createIikoCard5Discount");
            createIikoCard5DiscountCaller.AddArg("name", typeof(string));
            createIikoCard5DiscountCaller.AddArg("shortName", typeof(string));
            createIikoCard5DiscountCaller.AddArg("applyBeforeExcludedVat", typeof(bool));

            createOrUpdateDiscountPeriodCaller = new RemoteMethodCaller("discountType", "createOrUpdateDiscountPeriod");
            createOrUpdateDiscountPeriodCaller.AddArg("discountPeriod", typeof(ByValue<DiscountPeriod>));

            removeDiscountPeriodCaller = new RemoteMethodCaller("discountType", "removeDiscountPeriod");
            removeDiscountPeriodCaller.AddArg("discountPeriodId", typeof(Guid?));

            removeDiscountTypeCaller = new RemoteMethodCaller("discountType", "removeDiscountType");
            removeDiscountTypeCaller.AddArg("discountTypeId", typeof(Guid?));

            restoreDiscountPeriodCaller = new RemoteMethodCaller("discountType", "restoreDiscountPeriod");
            restoreDiscountPeriodCaller.AddArg("discountPeriodId", typeof(Guid?));

            restoreDiscountTypeCaller = new RemoteMethodCaller("discountType", "restoreDiscountType");
            restoreDiscountTypeCaller.AddArg("discountTypeId", typeof(Guid?));

            updateDiscountTypeCaller = new RemoteMethodCaller("discountType", "updateDiscountType");
            updateDiscountTypeCaller.AddArg("discountType", typeof(ByValue<DiscountType>));
        }

        #region Synchronous versions
        public IServiceMethodCall<DiscountServiceResult> AddDiscountPeriod(ByValue<DiscountPeriod> discountPeriod)
        {
            return addDiscountPeriodCaller.CreateCall<DiscountServiceResult>(new object[] { discountPeriod });
        }

        public IServiceMethodCall<DiscountServiceResult> AddDiscountType(ByValue<DiscountType> discountType)
        {
            return addDiscountTypeCaller.CreateCall<DiscountServiceResult>(new object[] { discountType });
        }

        public IServiceMethodCall<DiscountCardType> CreateIikoCard5Discount(string name, string shortName, bool applyBeforeExcludedVat)
        {
            return createIikoCard5DiscountCaller.CreateCall<DiscountCardType>(new object[] { name, shortName, applyBeforeExcludedVat });
        }

        public IServiceMethodCall<DiscountServiceResult> CreateOrUpdateDiscountPeriod(ByValue<DiscountPeriod> discountPeriod)
        {
            return createOrUpdateDiscountPeriodCaller.CreateCall<DiscountServiceResult>(new object[] { discountPeriod });
        }

        public IServiceMethodCall<bool> RemoveDiscountPeriod(Guid? discountPeriodId)
        {
            return removeDiscountPeriodCaller.CreateCall<bool>(new object[] { discountPeriodId });
        }

        public IServiceMethodCall<bool> RemoveDiscountType(Guid? discountTypeId)
        {
            return removeDiscountTypeCaller.CreateCall<bool>(new object[] { discountTypeId });
        }

        public IServiceMethodCall<bool> RestoreDiscountPeriod(Guid? discountPeriodId)
        {
            return restoreDiscountPeriodCaller.CreateCall<bool>(new object[] { discountPeriodId });
        }

        public IServiceMethodCall<bool> RestoreDiscountType(Guid? discountTypeId)
        {
            return restoreDiscountTypeCaller.CreateCall<bool>(new object[] { discountTypeId });
        }

        public IServiceMethodCall<DiscountServiceResult> UpdateDiscountType(ByValue<DiscountType> discountType)
        {
            return updateDiscountTypeCaller.CreateCall<DiscountServiceResult>(new object[] { discountType });
        }

        #endregion

        #region asynchronous version
        public void AddDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler)
        {
            addDiscountPeriodCaller.CallAsync(new object[] {discountPeriod}, resultHandler, errorHandler);
        }

        public void AddDiscountType(ByValue<DiscountType> discountType, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler)
        {
            addDiscountTypeCaller.CallAsync(new object[] {discountType}, resultHandler, errorHandler);
        }

        public void CreateIikoCard5Discount(string name, string shortName, bool applyBeforeExcludedVat, AsyncErrorHandler errorHandler, Action<DiscountCardType> resultHandler)
        {
            createIikoCard5DiscountCaller.CallAsync(new object[] {name, shortName, applyBeforeExcludedVat}, resultHandler, errorHandler);
        }

        public void CreateOrUpdateDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler)
        {
            createOrUpdateDiscountPeriodCaller.CallAsync(new object[] {discountPeriod}, resultHandler, errorHandler);
        }

        public void RemoveDiscountPeriod(Guid? discountPeriodId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            removeDiscountPeriodCaller.CallAsync(new object[] {discountPeriodId}, resultHandler, errorHandler);
        }

        public void RemoveDiscountType(Guid? discountTypeId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            removeDiscountTypeCaller.CallAsync(new object[] {discountTypeId}, resultHandler, errorHandler);
        }

        public void RestoreDiscountPeriod(Guid? discountPeriodId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            restoreDiscountPeriodCaller.CallAsync(new object[] {discountPeriodId}, resultHandler, errorHandler);
        }

        public void RestoreDiscountType(Guid? discountTypeId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            restoreDiscountTypeCaller.CallAsync(new object[] {discountTypeId}, resultHandler, errorHandler);
        }

        public void UpdateDiscountType(ByValue<DiscountType> discountType, AsyncErrorHandler errorHandler, Action<DiscountServiceResult> resultHandler)
        {
            updateDiscountTypeCaller.CallAsync(new object[] {discountType}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DiscountServiceResult> AddDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addDiscountPeriodCaller.Call<DiscountServiceResult>(new object[] { discountPeriod }, asyncState, requestTimeout);
        }

        public Task<DiscountServiceResult> AddDiscountType(ByValue<DiscountType> discountType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addDiscountTypeCaller.Call<DiscountServiceResult>(new object[] { discountType }, asyncState, requestTimeout);
        }

        public Task<DiscountCardType> CreateIikoCard5Discount(string name, string shortName, bool applyBeforeExcludedVat, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createIikoCard5DiscountCaller.Call<DiscountCardType>(new object[] { name, shortName, applyBeforeExcludedVat }, asyncState, requestTimeout);
        }

        public Task<DiscountServiceResult> CreateOrUpdateDiscountPeriod(ByValue<DiscountPeriod> discountPeriod, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateDiscountPeriodCaller.Call<DiscountServiceResult>(new object[] { discountPeriod }, asyncState, requestTimeout);
        }

        public Task<bool> RemoveDiscountPeriod(Guid? discountPeriodId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeDiscountPeriodCaller.Call<bool>(new object[] { discountPeriodId }, asyncState, requestTimeout);
        }

        public Task<bool> RemoveDiscountType(Guid? discountTypeId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeDiscountTypeCaller.Call<bool>(new object[] { discountTypeId }, asyncState, requestTimeout);
        }

        public Task<bool> RestoreDiscountPeriod(Guid? discountPeriodId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return restoreDiscountPeriodCaller.Call<bool>(new object[] { discountPeriodId }, asyncState, requestTimeout);
        }

        public Task<bool> RestoreDiscountType(Guid? discountTypeId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return restoreDiscountTypeCaller.Call<bool>(new object[] { discountTypeId }, asyncState, requestTimeout);
        }

        public Task<DiscountServiceResult> UpdateDiscountType(ByValue<DiscountType> discountType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDiscountTypeCaller.Call<DiscountServiceResult>(new object[] { discountType }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class LuckyTicketService : ILuckyTicketService
    {
        private readonly RemoteMethodCaller cancelDicountCaller;
        private readonly RemoteMethodCaller getLuckyTicketCardInfoCaller;
        private readonly RemoteMethodCaller processCancelPaymentCaller;
        private readonly RemoteMethodCaller processDicountCaller;
        private readonly RemoteMethodCaller processPaymentCaller;

        internal LuckyTicketService()
        {

            cancelDicountCaller = new RemoteMethodCaller("lucky_ticket", "cancelDicount");
            cancelDicountCaller.AddArg("discountInfo", typeof(LuckyTicketDiscountInfo));

            getLuckyTicketCardInfoCaller = new RemoteMethodCaller("lucky_ticket", "getLuckyTicketCardInfo");
            getLuckyTicketCardInfoCaller.AddArg("trackData", typeof(MagnetTrackData));

            processCancelPaymentCaller = new RemoteMethodCaller("lucky_ticket", "processCancelPayment");
            processCancelPaymentCaller.AddArg("transaction", typeof(string));
            processCancelPaymentCaller.AddArg("chequeInfo", typeof(LuckyTicketChequeInfo));

            processDicountCaller = new RemoteMethodCaller("lucky_ticket", "processDicount");
            processDicountCaller.AddArg("orderInfo", typeof(OrderInfo));
            processDicountCaller.AddArg("discountInfo", typeof(LuckyTicketDiscountInfo));

            processPaymentCaller = new RemoteMethodCaller("lucky_ticket", "processPayment");
            processPaymentCaller.AddArg("orderInfo", typeof(OrderInfo));
            processPaymentCaller.AddArg("paymentInfo", typeof(LuckyTicketPaymentItemInfo));
            processPaymentCaller.AddArg("chequeInfo", typeof(LuckyTicketChequeInfo));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CancelDicount(LuckyTicketDiscountInfo discountInfo)
        {
            return cancelDicountCaller.CreateCall<object>(new object[] { discountInfo });
        }

        public IServiceMethodCall<LuckyTickedBaseCardInfo> GetLuckyTicketCardInfo(MagnetTrackData trackData)
        {
            return getLuckyTicketCardInfoCaller.CreateCall<LuckyTickedBaseCardInfo>(new object[] { trackData });
        }

        public IServiceMethodCall<LuckyTicketChequeInfo> ProcessCancelPayment(string transaction, LuckyTicketChequeInfo chequeInfo)
        {
            return processCancelPaymentCaller.CreateCall<LuckyTicketChequeInfo>(new object[] { transaction, chequeInfo });
        }

        public IServiceMethodCall<string> ProcessDicount(OrderInfo orderInfo, LuckyTicketDiscountInfo discountInfo)
        {
            return processDicountCaller.CreateCall<string>(new object[] { orderInfo, discountInfo });
        }

        public IServiceMethodCall<LuckyTicketChequeInfo> ProcessPayment(OrderInfo orderInfo, LuckyTicketPaymentItemInfo paymentInfo, LuckyTicketChequeInfo chequeInfo)
        {
            return processPaymentCaller.CreateCall<LuckyTicketChequeInfo>(new object[] { orderInfo, paymentInfo, chequeInfo });
        }

        #endregion

        #region asynchronous version
        public void CancelDicount(LuckyTicketDiscountInfo discountInfo, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            cancelDicountCaller.CallAsync(new object[] {discountInfo}, resultHandler, errorHandler);
        }

        public void GetLuckyTicketCardInfo(MagnetTrackData trackData, AsyncErrorHandler errorHandler, Action<LuckyTickedBaseCardInfo> resultHandler)
        {
            getLuckyTicketCardInfoCaller.CallAsync(new object[] {trackData}, resultHandler, errorHandler);
        }

        public void ProcessCancelPayment(string transaction, LuckyTicketChequeInfo chequeInfo, AsyncErrorHandler errorHandler, Action<LuckyTicketChequeInfo> resultHandler)
        {
            processCancelPaymentCaller.CallAsync(new object[] {transaction, chequeInfo}, resultHandler, errorHandler);
        }

        public void ProcessDicount(OrderInfo orderInfo, LuckyTicketDiscountInfo discountInfo, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            processDicountCaller.CallAsync(new object[] {orderInfo, discountInfo}, resultHandler, errorHandler);
        }

        public void ProcessPayment(OrderInfo orderInfo, LuckyTicketPaymentItemInfo paymentInfo, LuckyTicketChequeInfo chequeInfo, AsyncErrorHandler errorHandler, Action<LuckyTicketChequeInfo> resultHandler)
        {
            processPaymentCaller.CallAsync(new object[] {orderInfo, paymentInfo, chequeInfo}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CancelDicount(LuckyTicketDiscountInfo discountInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return cancelDicountCaller.Call<object>(new object[] { discountInfo }, asyncState, requestTimeout);
        }

        public Task<LuckyTickedBaseCardInfo> GetLuckyTicketCardInfo(MagnetTrackData trackData, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLuckyTicketCardInfoCaller.Call<LuckyTickedBaseCardInfo>(new object[] { trackData }, asyncState, requestTimeout);
        }

        public Task<LuckyTicketChequeInfo> ProcessCancelPayment(string transaction, LuckyTicketChequeInfo chequeInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return processCancelPaymentCaller.Call<LuckyTicketChequeInfo>(new object[] { transaction, chequeInfo }, asyncState, requestTimeout);
        }

        public Task<string> ProcessDicount(OrderInfo orderInfo, LuckyTicketDiscountInfo discountInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return processDicountCaller.Call<string>(new object[] { orderInfo, discountInfo }, asyncState, requestTimeout);
        }

        public Task<LuckyTicketChequeInfo> ProcessPayment(OrderInfo orderInfo, LuckyTicketPaymentItemInfo paymentInfo, LuckyTicketChequeInfo chequeInfo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return processPaymentCaller.Call<LuckyTicketChequeInfo>(new object[] { orderInfo, paymentInfo, chequeInfo }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PastOrdersService : IPastOrdersService
    {
        private readonly RemoteMethodCaller getPastOrdersByCloseTimeIntervalCaller;
        private readonly RemoteMethodCaller getPastOrdersByIdCaller;
        private readonly RemoteMethodCaller getPastOrdersByNumberCaller;
        private readonly RemoteMethodCaller getPastOrdersByPaymentSumCaller;

        internal PastOrdersService()
        {

            getPastOrdersByCloseTimeIntervalCaller = new RemoteMethodCaller("pastOrders", "getPastOrdersByCloseTimeInterval");
            getPastOrdersByCloseTimeIntervalCaller.AddArg("minCloseTime", typeof(DateTime?));
            getPastOrdersByCloseTimeIntervalCaller.AddArg("maxCloseTime", typeof(DateTime?));

            getPastOrdersByIdCaller = new RemoteMethodCaller("pastOrders", "getPastOrdersById");
            getPastOrdersByIdCaller.AddArg("orderId", typeof(Guid?));

            getPastOrdersByNumberCaller = new RemoteMethodCaller("pastOrders", "getPastOrdersByNumber");
            getPastOrdersByNumberCaller.AddArg("searchNumber", typeof(int));
            getPastOrdersByNumberCaller.AddArg("minCloseTime", typeof(DateTime?));
            getPastOrdersByNumberCaller.AddArg("maxCloseTime", typeof(DateTime?));
            getPastOrdersByNumberCaller.AddArg("isNumberPartial", typeof(bool));

            getPastOrdersByPaymentSumCaller = new RemoteMethodCaller("pastOrders", "getPastOrdersByPaymentSum");
            getPastOrdersByPaymentSumCaller.AddArg("minSum", typeof(decimal?));
            getPastOrdersByPaymentSumCaller.AddArg("maxSum", typeof(decimal?));
            getPastOrdersByPaymentSumCaller.AddArg("minCloseTime", typeof(DateTime?));
            getPastOrdersByPaymentSumCaller.AddArg("maxCloseTime", typeof(DateTime?));
        }

        #region Synchronous versions
        public IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersByCloseTimeInterval(DateTime? minCloseTime, DateTime? maxCloseTime)
        {
            return getPastOrdersByCloseTimeIntervalCaller.CreateCall<ICollection<PastOrder>>(new object[] { minCloseTime, maxCloseTime });
        }

        public IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersById(Guid? orderId)
        {
            return getPastOrdersByIdCaller.CreateCall<ICollection<PastOrder>>(new object[] { orderId });
        }

        public IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersByNumber(int searchNumber, DateTime? minCloseTime, DateTime? maxCloseTime, bool isNumberPartial)
        {
            return getPastOrdersByNumberCaller.CreateCall<ICollection<PastOrder>>(new object[] { searchNumber, minCloseTime, maxCloseTime, isNumberPartial });
        }

        public IServiceMethodCall<ICollection<PastOrder>> GetPastOrdersByPaymentSum(decimal? minSum, decimal? maxSum, DateTime? minCloseTime, DateTime? maxCloseTime)
        {
            return getPastOrdersByPaymentSumCaller.CreateCall<ICollection<PastOrder>>(new object[] { minSum, maxSum, minCloseTime, maxCloseTime });
        }

        #endregion

        #region asynchronous version
        public void GetPastOrdersByCloseTimeInterval(DateTime? minCloseTime, DateTime? maxCloseTime, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler)
        {
            getPastOrdersByCloseTimeIntervalCaller.CallAsync(new object[] {minCloseTime, maxCloseTime}, resultHandler, errorHandler);
        }

        public void GetPastOrdersById(Guid? orderId, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler)
        {
            getPastOrdersByIdCaller.CallAsync(new object[] {orderId}, resultHandler, errorHandler);
        }

        public void GetPastOrdersByNumber(int searchNumber, DateTime? minCloseTime, DateTime? maxCloseTime, bool isNumberPartial, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler)
        {
            getPastOrdersByNumberCaller.CallAsync(new object[] {searchNumber, minCloseTime, maxCloseTime, isNumberPartial}, resultHandler, errorHandler);
        }

        public void GetPastOrdersByPaymentSum(decimal? minSum, decimal? maxSum, DateTime? minCloseTime, DateTime? maxCloseTime, AsyncErrorHandler errorHandler, Action<ICollection<PastOrder>> resultHandler)
        {
            getPastOrdersByPaymentSumCaller.CallAsync(new object[] {minSum, maxSum, minCloseTime, maxCloseTime}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ICollection<PastOrder>> GetPastOrdersByCloseTimeInterval(DateTime? minCloseTime, DateTime? maxCloseTime, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPastOrdersByCloseTimeIntervalCaller.Call<ICollection<PastOrder>>(new object[] { minCloseTime, maxCloseTime }, asyncState, requestTimeout);
        }

        public Task<ICollection<PastOrder>> GetPastOrdersById(Guid? orderId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPastOrdersByIdCaller.Call<ICollection<PastOrder>>(new object[] { orderId }, asyncState, requestTimeout);
        }

        public Task<ICollection<PastOrder>> GetPastOrdersByNumber(int searchNumber, DateTime? minCloseTime, DateTime? maxCloseTime, bool isNumberPartial, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPastOrdersByNumberCaller.Call<ICollection<PastOrder>>(new object[] { searchNumber, minCloseTime, maxCloseTime, isNumberPartial }, asyncState, requestTimeout);
        }

        public Task<ICollection<PastOrder>> GetPastOrdersByPaymentSum(decimal? minSum, decimal? maxSum, DateTime? minCloseTime, DateTime? maxCloseTime, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPastOrdersByPaymentSumCaller.Call<ICollection<PastOrder>>(new object[] { minSum, maxSum, minCloseTime, maxCloseTime }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ChequeTemplateService : IChequeTemplateService
    {
        private readonly RemoteMethodCaller createOrUpdateTemplatesCaller;

        internal ChequeTemplateService()
        {

            createOrUpdateTemplatesCaller = new RemoteMethodCaller("chequeTemplateService", "createOrUpdateTemplates");
            createOrUpdateTemplatesCaller.AddArg("templates", typeof(ICollection<ChequeTemplateUpdateDto>));
            createOrUpdateTemplatesCaller.AddArg("billFooter", typeof(string));
            createOrUpdateTemplatesCaller.AddArg("billHeader", typeof(string));
            createOrUpdateTemplatesCaller.AddArg("reportHeader", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CreateOrUpdateTemplates(ICollection<ChequeTemplateUpdateDto> templates, string billFooter, string billHeader, string reportHeader)
        {
            return createOrUpdateTemplatesCaller.CreateCall<object>(new object[] { templates, billFooter, billHeader, reportHeader });
        }

        #endregion

        #region asynchronous version
        public void CreateOrUpdateTemplates(ICollection<ChequeTemplateUpdateDto> templates, string billFooter, string billHeader, string reportHeader, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createOrUpdateTemplatesCaller.CallAsync(new object[] {templates, billFooter, billHeader, reportHeader}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CreateOrUpdateTemplates(ICollection<ChequeTemplateUpdateDto> templates, string billFooter, string billHeader, string reportHeader, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createOrUpdateTemplatesCaller.Call<object>(new object[] { templates, billFooter, billHeader, reportHeader }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class StiReportService : IStiReportService
    {
        private readonly RemoteMethodCaller deleteTemplateCaller;
        private readonly RemoteMethodCaller saveOrUpdateTemplateCaller;
        private readonly RemoteMethodCaller tryGetStiReportTemplateCaller;

        internal StiReportService()
        {

            deleteTemplateCaller = new RemoteMethodCaller("stiReportsService", "deleteTemplate");
            deleteTemplateCaller.AddArg("template", typeof(StiReportTemplate));

            saveOrUpdateTemplateCaller = new RemoteMethodCaller("stiReportsService", "saveOrUpdateTemplate");
            saveOrUpdateTemplateCaller.AddArg("template", typeof(ByValue<StiReportTemplate>));

            tryGetStiReportTemplateCaller = new RemoteMethodCaller("stiReportsService", "tryGetStiReportTemplate");
            tryGetStiReportTemplateCaller.AddArg("reportType", typeof(StiReportType));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> DeleteTemplate(StiReportTemplate template)
        {
            return deleteTemplateCaller.CreateCall<object>(new object[] { template });
        }

        public IServiceMethodCall<object> SaveOrUpdateTemplate(ByValue<StiReportTemplate> template)
        {
            return saveOrUpdateTemplateCaller.CreateCall<object>(new object[] { template });
        }

        public IServiceMethodCall<StiReportTemplate> TryGetStiReportTemplate(StiReportType reportType)
        {
            return tryGetStiReportTemplateCaller.CreateCall<StiReportTemplate>(new object[] { reportType });
        }

        #endregion

        #region asynchronous version
        public void DeleteTemplate(StiReportTemplate template, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteTemplateCaller.CallAsync(new object[] {template}, resultHandler, errorHandler);
        }

        public void SaveOrUpdateTemplate(ByValue<StiReportTemplate> template, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateTemplateCaller.CallAsync(new object[] {template}, resultHandler, errorHandler);
        }

        public void TryGetStiReportTemplate(StiReportType reportType, AsyncErrorHandler errorHandler, Action<StiReportTemplate> resultHandler)
        {
            tryGetStiReportTemplateCaller.CallAsync(new object[] {reportType}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> DeleteTemplate(StiReportTemplate template, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteTemplateCaller.Call<object>(new object[] { template }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdateTemplate(ByValue<StiReportTemplate> template, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateTemplateCaller.Call<object>(new object[] { template }, asyncState, requestTimeout);
        }

        public Task<StiReportTemplate> TryGetStiReportTemplate(StiReportType reportType, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return tryGetStiReportTemplateCaller.Call<StiReportTemplate>(new object[] { reportType }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class RegionsService : IRegionsService
    {
        private readonly RemoteMethodCaller updateRegionsCaller;

        internal RegionsService()
        {

            updateRegionsCaller = new RemoteMethodCaller("regions", "updateRegions");
            updateRegionsCaller.AddArg("regions", typeof(List<ByValue<Region>>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> UpdateRegions(List<ByValue<Region>> regions)
        {
            return updateRegionsCaller.CreateCall<object>(new object[] { regions });
        }

        #endregion

        #region asynchronous version
        public void UpdateRegions(List<ByValue<Region>> regions, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateRegionsCaller.CallAsync(new object[] {regions}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> UpdateRegions(List<ByValue<Region>> regions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateRegionsCaller.Call<object>(new object[] { regions }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class QuickLabelsHelper : IQuickLabelsHelper
    {
        private readonly RemoteMethodCaller getAllNotDeletedQuickLabelsCaller;

        internal QuickLabelsHelper()
        {

            getAllNotDeletedQuickLabelsCaller = new RemoteMethodCaller("quickLabels", "getAllNotDeletedQuickLabels");
            getAllNotDeletedQuickLabelsCaller.AddArg("departmentList", typeof(List<DepartmentEntity>));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<DepartmentEntity, List<QuickLabels>>> GetAllNotDeletedQuickLabels(List<DepartmentEntity> departmentList)
        {
            return getAllNotDeletedQuickLabelsCaller.CreateCall<Dictionary<DepartmentEntity, List<QuickLabels>>>(new object[] { departmentList });
        }

        #endregion

        #region asynchronous version
        public void GetAllNotDeletedQuickLabels(List<DepartmentEntity> departmentList, AsyncErrorHandler errorHandler, Action<Dictionary<DepartmentEntity, List<QuickLabels>>> resultHandler)
        {
            getAllNotDeletedQuickLabelsCaller.CallAsync(new object[] {departmentList}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<DepartmentEntity, List<QuickLabels>>> GetAllNotDeletedQuickLabels(List<DepartmentEntity> departmentList, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAllNotDeletedQuickLabelsCaller.Call<Dictionary<DepartmentEntity, List<QuickLabels>>>(new object[] { departmentList }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SurveyItemsService : ISurveyItemsService
    {
        private readonly RemoteMethodCaller saveSurveyItemCaller;
        private readonly RemoteMethodCaller setSurveyItemDeletedCaller;

        internal SurveyItemsService()
        {

            saveSurveyItemCaller = new RemoteMethodCaller("surveyItems", "saveSurveyItem");
            saveSurveyItemCaller.AddArg("city", typeof(ByValue<SurveyItem>));

            setSurveyItemDeletedCaller = new RemoteMethodCaller("surveyItems", "setSurveyItemDeleted");
            setSurveyItemDeletedCaller.AddArg("cityId", typeof(Guid?));
            setSurveyItemDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> SaveSurveyItem(ByValue<SurveyItem> city)
        {
            return saveSurveyItemCaller.CreateCall<object>(new object[] { city });
        }

        public IServiceMethodCall<object> SetSurveyItemDeleted(Guid? cityId, bool deleted)
        {
            return setSurveyItemDeletedCaller.CreateCall<object>(new object[] { cityId, deleted });
        }

        #endregion

        #region asynchronous version
        public void SaveSurveyItem(ByValue<SurveyItem> city, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveSurveyItemCaller.CallAsync(new object[] {city}, resultHandler, errorHandler);
        }

        public void SetSurveyItemDeleted(Guid? cityId, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setSurveyItemDeletedCaller.CallAsync(new object[] {cityId, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> SaveSurveyItem(ByValue<SurveyItem> city, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveSurveyItemCaller.Call<object>(new object[] { city }, asyncState, requestTimeout);
        }

        public Task<object> SetSurveyItemDeleted(Guid? cityId, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setSurveyItemDeletedCaller.Call<object>(new object[] { cityId, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ServerUpgradeService : IServerUpgradeService
    {
        private readonly RemoteMethodCaller buildUpgradeReportCaller;
        private readonly RemoteMethodCaller updateTerminalUpgradeStateCaller;
        private readonly RemoteMethodCaller updateUpgradeSettingsCaller;

        internal ServerUpgradeService()
        {

            buildUpgradeReportCaller = new RemoteMethodCaller("serverUpgrade", "buildUpgradeReport");

            updateTerminalUpgradeStateCaller = new RemoteMethodCaller("serverUpgrade", "updateTerminalUpgradeState");
            updateTerminalUpgradeStateCaller.AddArg("state", typeof(TerminalUpgradeState));

            updateUpgradeSettingsCaller = new RemoteMethodCaller("serverUpgrade", "updateUpgradeSettings");
            updateUpgradeSettingsCaller.AddArg("state", typeof(ByValue<ServerUpgradeState>));
            updateUpgradeSettingsCaller.AddArg("settings", typeof(ByValue<ServerUpgradeSettings>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ServerUpgradeReport> BuildUpgradeReport()
        {
            return buildUpgradeReportCaller.CreateCall<ServerUpgradeReport>(new object[] {  });
        }

        public IServiceMethodCall<object> UpdateTerminalUpgradeState(TerminalUpgradeState state)
        {
            return updateTerminalUpgradeStateCaller.CreateCall<object>(new object[] { state });
        }

        public IServiceMethodCall<object> UpdateUpgradeSettings(ByValue<ServerUpgradeState> state, ByValue<ServerUpgradeSettings> settings)
        {
            return updateUpgradeSettingsCaller.CreateCall<object>(new object[] { state, settings });
        }

        #endregion

        #region asynchronous version
        public void BuildUpgradeReport(AsyncErrorHandler errorHandler, Action<ServerUpgradeReport> resultHandler)
        {
            buildUpgradeReportCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void UpdateTerminalUpgradeState(TerminalUpgradeState state, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateTerminalUpgradeStateCaller.CallAsync(new object[] {state}, resultHandler, errorHandler);
        }

        public void UpdateUpgradeSettings(ByValue<ServerUpgradeState> state, ByValue<ServerUpgradeSettings> settings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateUpgradeSettingsCaller.CallAsync(new object[] {state, settings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ServerUpgradeReport> BuildUpgradeReport([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return buildUpgradeReportCaller.Call<ServerUpgradeReport>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> UpdateTerminalUpgradeState(TerminalUpgradeState state, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateTerminalUpgradeStateCaller.Call<object>(new object[] { state }, asyncState, requestTimeout);
        }

        public Task<object> UpdateUpgradeSettings(ByValue<ServerUpgradeState> state, ByValue<ServerUpgradeSettings> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateUpgradeSettingsCaller.Call<object>(new object[] { state, settings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class FrontBalancesService : IFrontBalancesService
    {
        private readonly RemoteMethodCaller setStopListModeCaller;

        internal FrontBalancesService()
        {

            setStopListModeCaller = new RemoteMethodCaller("frontBalances", "setStopListMode");
            setStopListModeCaller.AddArg("useStopListForGroup", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> SetStopListMode(bool useStopListForGroup)
        {
            return setStopListModeCaller.CreateCall<object>(new object[] { useStopListForGroup });
        }

        #endregion

        #region asynchronous version
        public void SetStopListMode(bool useStopListForGroup, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setStopListModeCaller.CallAsync(new object[] {useStopListForGroup}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> SetStopListMode(bool useStopListForGroup, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setStopListModeCaller.Call<object>(new object[] { useStopListForGroup }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class FrontUpdateService : IFrontUpdateService
    {
        private readonly RemoteMethodCaller cancelDeliveriesOnESClearCaller;
        private readonly RemoteMethodCaller getBackupCaller;
        private readonly RemoteMethodCaller getPlastekTransactionsForVerifyCaller;
        private readonly RemoteMethodCaller importFrontDataCaller;
        private readonly RemoteMethodCaller importFrontDataV3Caller;
        private readonly RemoteMethodCaller markCardTransactionsVerifiedCaller;
        private readonly RemoteMethodCaller performBatchUpdateCaller;
        private readonly RemoteMethodCaller registerPaymentSystemCaller;
        private readonly RemoteMethodCaller updatePluginSettingsCaller;

        internal FrontUpdateService()
        {

            cancelDeliveriesOnESClearCaller = new RemoteMethodCaller("frontUpdate", "cancelDeliveriesOnESClear");
            cancelDeliveriesOnESClearCaller.AddArg("deliveries", typeof(ICollection<Guid>));

            getBackupCaller = new RemoteMethodCaller("frontUpdate", "getBackup");
            getBackupCaller.AddArg("backupRequest", typeof(FrontEntitiesBackupRequest));

            getPlastekTransactionsForVerifyCaller = new RemoteMethodCaller("frontUpdate", "getPlastekTransactionsForVerify");
            getPlastekTransactionsForVerifyCaller.AddArg("terminalId", typeof(string));

            importFrontDataCaller = new RemoteMethodCaller("frontUpdate", "importFrontData");
            importFrontDataCaller.AddArg("update", typeof(EntitiesUpdate));
            importFrontDataCaller.AddArg("pendingItemsCount", typeof(int));

            importFrontDataV3Caller = new RemoteMethodCaller("frontUpdate", "importFrontDataV3");
            importFrontDataV3Caller.AddArg("update", typeof(IsolatedEntitiesContext));

            markCardTransactionsVerifiedCaller = new RemoteMethodCaller("frontUpdate", "markCardTransactionsVerified");
            markCardTransactionsVerifiedCaller.AddArg("transactionIds", typeof(ICollection<Guid>));

            performBatchUpdateCaller = new RemoteMethodCaller("frontUpdate", "performBatchUpdate");
            performBatchUpdateCaller.AddArg("update", typeof(List<CachedEntity>));

            registerPaymentSystemCaller = new RemoteMethodCaller("frontUpdate", "registerPaymentSystem");
            registerPaymentSystemCaller.AddArg("name", typeof(string));
            registerPaymentSystemCaller.AddArg("friendlyName", typeof(string));

            updatePluginSettingsCaller = new RemoteMethodCaller("frontUpdate", "updatePluginSettings");
            updatePluginSettingsCaller.AddArg("settings", typeof(ICollection<ByValue<PluginSettings>>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CancelDeliveriesOnESClear(ICollection<Guid> deliveries)
        {
            return cancelDeliveriesOnESClearCaller.CreateCall<object>(new object[] { deliveries });
        }

        public IServiceMethodCall<FrontEntitiesBackup> GetBackup(FrontEntitiesBackupRequest backupRequest)
        {
            return getBackupCaller.CreateCall<FrontEntitiesBackup>(new object[] { backupRequest });
        }

        public IServiceMethodCall<ICollection<PlastekCardTransaction>> GetPlastekTransactionsForVerify(string terminalId)
        {
            return getPlastekTransactionsForVerifyCaller.CreateCall<ICollection<PlastekCardTransaction>>(new object[] { terminalId });
        }

        public IServiceMethodCall<object> ImportFrontData(EntitiesUpdate update, int pendingItemsCount)
        {
            return importFrontDataCaller.CreateCall<object>(new object[] { update, pendingItemsCount });
        }

        public IServiceMethodCall<object> ImportFrontDataV3(IsolatedEntitiesContext update)
        {
            return importFrontDataV3Caller.CreateCall<object>(new object[] { update });
        }

        public IServiceMethodCall<object> MarkCardTransactionsVerified(ICollection<Guid> transactionIds)
        {
            return markCardTransactionsVerifiedCaller.CreateCall<object>(new object[] { transactionIds });
        }

        public IServiceMethodCall<bool> PerformBatchUpdate(List<CachedEntity> update)
        {
            return performBatchUpdateCaller.CreateCall<bool>(new object[] { update });
        }

        public IServiceMethodCall<bool> RegisterPaymentSystem(string name, string friendlyName)
        {
            return registerPaymentSystemCaller.CreateCall<bool>(new object[] { name, friendlyName });
        }

        public IServiceMethodCall<object> UpdatePluginSettings(ICollection<ByValue<PluginSettings>> settings)
        {
            return updatePluginSettingsCaller.CreateCall<object>(new object[] { settings });
        }

        #endregion

        #region asynchronous version
        public void CancelDeliveriesOnESClear(ICollection<Guid> deliveries, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            cancelDeliveriesOnESClearCaller.CallAsync(new object[] {deliveries}, resultHandler, errorHandler);
        }

        public void GetBackup(FrontEntitiesBackupRequest backupRequest, AsyncErrorHandler errorHandler, Action<FrontEntitiesBackup> resultHandler)
        {
            getBackupCaller.CallAsync(new object[] {backupRequest}, resultHandler, errorHandler);
        }

        public void GetPlastekTransactionsForVerify(string terminalId, AsyncErrorHandler errorHandler, Action<ICollection<PlastekCardTransaction>> resultHandler)
        {
            getPlastekTransactionsForVerifyCaller.CallAsync(new object[] {terminalId}, resultHandler, errorHandler);
        }

        public void ImportFrontData(EntitiesUpdate update, int pendingItemsCount, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            importFrontDataCaller.CallAsync(new object[] {update, pendingItemsCount}, resultHandler, errorHandler);
        }

        public void ImportFrontDataV3(IsolatedEntitiesContext update, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            importFrontDataV3Caller.CallAsync(new object[] {update}, resultHandler, errorHandler);
        }

        public void MarkCardTransactionsVerified(ICollection<Guid> transactionIds, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            markCardTransactionsVerifiedCaller.CallAsync(new object[] {transactionIds}, resultHandler, errorHandler);
        }

        public void PerformBatchUpdate(List<CachedEntity> update, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            performBatchUpdateCaller.CallAsync(new object[] {update}, resultHandler, errorHandler);
        }

        public void RegisterPaymentSystem(string name, string friendlyName, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            registerPaymentSystemCaller.CallAsync(new object[] {name, friendlyName}, resultHandler, errorHandler);
        }

        public void UpdatePluginSettings(ICollection<ByValue<PluginSettings>> settings, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updatePluginSettingsCaller.CallAsync(new object[] {settings}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CancelDeliveriesOnESClear(ICollection<Guid> deliveries, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return cancelDeliveriesOnESClearCaller.Call<object>(new object[] { deliveries }, asyncState, requestTimeout);
        }

        public Task<FrontEntitiesBackup> GetBackup(FrontEntitiesBackupRequest backupRequest, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBackupCaller.Call<FrontEntitiesBackup>(new object[] { backupRequest }, asyncState, requestTimeout);
        }

        public Task<ICollection<PlastekCardTransaction>> GetPlastekTransactionsForVerify(string terminalId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getPlastekTransactionsForVerifyCaller.Call<ICollection<PlastekCardTransaction>>(new object[] { terminalId }, asyncState, requestTimeout);
        }

        public Task<object> ImportFrontData(EntitiesUpdate update, int pendingItemsCount, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return importFrontDataCaller.Call<object>(new object[] { update, pendingItemsCount }, asyncState, requestTimeout);
        }

        public Task<object> ImportFrontDataV3(IsolatedEntitiesContext update, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return importFrontDataV3Caller.Call<object>(new object[] { update }, asyncState, requestTimeout);
        }

        public Task<object> MarkCardTransactionsVerified(ICollection<Guid> transactionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return markCardTransactionsVerifiedCaller.Call<object>(new object[] { transactionIds }, asyncState, requestTimeout);
        }

        public Task<bool> PerformBatchUpdate(List<CachedEntity> update, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return performBatchUpdateCaller.Call<bool>(new object[] { update }, asyncState, requestTimeout);
        }

        public Task<bool> RegisterPaymentSystem(string name, string friendlyName, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return registerPaymentSystemCaller.Call<bool>(new object[] { name, friendlyName }, asyncState, requestTimeout);
        }

        public Task<object> UpdatePluginSettings(ICollection<ByValue<PluginSettings>> settings, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updatePluginSettingsCaller.Call<object>(new object[] { settings }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EmailSendingService : IEmailSendingService
    {
        private readonly RemoteMethodCaller sendEmailCaller;

        internal EmailSendingService()
        {

            sendEmailCaller = new RemoteMethodCaller("emailSending", "sendEmail");
            sendEmailCaller.AddArg("request", typeof(EmailSendingRequest));
        }

        #region Synchronous versions
        public IServiceMethodCall<EmailSendingResultDto> SendEmail(EmailSendingRequest request)
        {
            return sendEmailCaller.CreateCall<EmailSendingResultDto>(new object[] { request });
        }

        #endregion

        #region asynchronous version
        public void SendEmail(EmailSendingRequest request, AsyncErrorHandler errorHandler, Action<EmailSendingResultDto> resultHandler)
        {
            sendEmailCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<EmailSendingResultDto> SendEmail(EmailSendingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendEmailCaller.Call<EmailSendingResultDto>(new object[] { request }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class FindFaceService : IFindFaceService
    {
        private readonly RemoteMethodCaller identifyPhotoCaller;
        private readonly RemoteMethodCaller registerGuestPhotoCaller;

        internal FindFaceService()
        {

            identifyPhotoCaller = new RemoteMethodCaller("findFaceService", "identifyPhoto");
            identifyPhotoCaller.AddArg("imageData", typeof(string));

            registerGuestPhotoCaller = new RemoteMethodCaller("findFaceService", "registerGuestPhoto");
            registerGuestPhotoCaller.AddArg("imageData", typeof(string));
        }

        #region Synchronous versions
        public IServiceMethodCall<string> IdentifyPhoto(string imageData)
        {
            return identifyPhotoCaller.CreateCall<string>(new object[] { imageData });
        }

        public IServiceMethodCall<string> RegisterGuestPhoto(string imageData)
        {
            return registerGuestPhotoCaller.CreateCall<string>(new object[] { imageData });
        }

        #endregion

        #region asynchronous version
        public void IdentifyPhoto(string imageData, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            identifyPhotoCaller.CallAsync(new object[] {imageData}, resultHandler, errorHandler);
        }

        public void RegisterGuestPhoto(string imageData, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            registerGuestPhotoCaller.CallAsync(new object[] {imageData}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<string> IdentifyPhoto(string imageData, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return identifyPhotoCaller.Call<string>(new object[] { imageData }, asyncState, requestTimeout);
        }

        public Task<string> RegisterGuestPhoto(string imageData, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return registerGuestPhotoCaller.Call<string>(new object[] { imageData }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class SmsSendingService : ISmsSendingService
    {
        private readonly RemoteMethodCaller sendSmsCaller;

        internal SmsSendingService()
        {

            sendSmsCaller = new RemoteMethodCaller("smsSending", "sendSms");
            sendSmsCaller.AddArg("request", typeof(SmsSendingRequest));
        }

        #region Synchronous versions
        public IServiceMethodCall<SmsSendingResultDto> SendSms(SmsSendingRequest request)
        {
            return sendSmsCaller.CreateCall<SmsSendingResultDto>(new object[] { request });
        }

        #endregion

        #region asynchronous version
        public void SendSms(SmsSendingRequest request, AsyncErrorHandler errorHandler, Action<SmsSendingResultDto> resultHandler)
        {
            sendSmsCaller.CallAsync(new object[] {request}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<SmsSendingResultDto> SendSms(SmsSendingRequest request, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendSmsCaller.Call<SmsSendingResultDto>(new object[] { request }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoBizService : IIikoBizService
    {
        private readonly RemoteMethodCaller getCheckExchangeCaller;

        internal IikoBizService()
        {

            getCheckExchangeCaller = new RemoteMethodCaller("iikoBiz", "getCheckExchange");
        }

        #region Synchronous versions
        public IServiceMethodCall<CheckExchange> GetCheckExchange()
        {
            return getCheckExchangeCaller.CreateCall<CheckExchange>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void GetCheckExchange(AsyncErrorHandler errorHandler, Action<CheckExchange> resultHandler)
        {
            getCheckExchangeCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<CheckExchange> GetCheckExchange([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCheckExchangeCaller.Call<CheckExchange>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoBizRegistrationService : IIikoBizRegistrationService
    {
        private readonly RemoteMethodCaller sendRegistrationRequestCaller;

        internal IikoBizRegistrationService()
        {

            sendRegistrationRequestCaller = new RemoteMethodCaller("RegistrationService", "sendRegistrationRequest");
            sendRegistrationRequestCaller.AddArg("iikoBizRegistrationDto", typeof(IikoBizRegistrationDto));
        }

        #region Synchronous versions
        public IServiceMethodCall<IikoBizRegistrationStatus> SendRegistrationRequest(IikoBizRegistrationDto iikoBizRegistrationDto)
        {
            return sendRegistrationRequestCaller.CreateCall<IikoBizRegistrationStatus>(new object[] { iikoBizRegistrationDto });
        }

        #endregion

        #region asynchronous version
        public void SendRegistrationRequest(IikoBizRegistrationDto iikoBizRegistrationDto, AsyncErrorHandler errorHandler, Action<IikoBizRegistrationStatus> resultHandler)
        {
            sendRegistrationRequestCaller.CallAsync(new object[] {iikoBizRegistrationDto}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<IikoBizRegistrationStatus> SendRegistrationRequest(IikoBizRegistrationDto iikoBizRegistrationDto, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return sendRegistrationRequestCaller.Call<IikoBizRegistrationStatus>(new object[] { iikoBizRegistrationDto }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IikoBizConnectionService : IIikoBizConnectionService
    {
        private readonly RemoteMethodCaller isIikoBizConnectionEstablishedCaller;
        private readonly RemoteMethodCaller resetConsumersCaller;
        private readonly RemoteMethodCaller runAllTestsCaller;

        internal IikoBizConnectionService()
        {

            isIikoBizConnectionEstablishedCaller = new RemoteMethodCaller("iikoBizConnectionService", "isIikoBizConnectionEstablished");

            resetConsumersCaller = new RemoteMethodCaller("iikoBizConnectionService", "resetConsumers");

            runAllTestsCaller = new RemoteMethodCaller("iikoBizConnectionService", "runAllTests");
        }

        #region Synchronous versions
        public IServiceMethodCall<ConnectionTestDto> IsIikoBizConnectionEstablished()
        {
            return isIikoBizConnectionEstablishedCaller.CreateCall<ConnectionTestDto>(new object[] {  });
        }

        public IServiceMethodCall<object> ResetConsumers()
        {
            return resetConsumersCaller.CreateCall<object>(new object[] {  });
        }

        public IServiceMethodCall<ConnectionTestDto> RunAllTests()
        {
            return runAllTestsCaller.CreateCall<ConnectionTestDto>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void IsIikoBizConnectionEstablished(AsyncErrorHandler errorHandler, Action<ConnectionTestDto> resultHandler)
        {
            isIikoBizConnectionEstablishedCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void ResetConsumers(AsyncErrorHandler errorHandler, Action resultHandler)
        {
            resetConsumersCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void RunAllTests(AsyncErrorHandler errorHandler, Action<ConnectionTestDto> resultHandler)
        {
            runAllTestsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ConnectionTestDto> IsIikoBizConnectionEstablished([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isIikoBizConnectionEstablishedCaller.Call<ConnectionTestDto>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> ResetConsumers([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return resetConsumersCaller.Call<object>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<ConnectionTestDto> RunAllTests([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return runAllTestsCaller.Call<ConnectionTestDto>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class IncentiveService : IIncentiveService
    {
        private readonly RemoteMethodCaller getProgramDescriptionsCaller;
        private readonly RemoteMethodCaller getProgramsCaller;
        private readonly RemoteMethodCaller recalculateIncentiveProgramsCaller;
        private readonly RemoteMethodCaller saveOrUpdateCaller;
        private readonly RemoteMethodCaller setDeletedCaller;

        internal IncentiveService()
        {

            getProgramDescriptionsCaller = new RemoteMethodCaller("incentive", "getProgramDescriptions");
            getProgramDescriptionsCaller.AddArg("employee", typeof(User));
            getProgramDescriptionsCaller.AddArg("intervals", typeof(List<DateInterval>));

            getProgramsCaller = new RemoteMethodCaller("incentive", "getPrograms");

            recalculateIncentiveProgramsCaller = new RemoteMethodCaller("incentive", "recalculateIncentivePrograms");
            recalculateIncentiveProgramsCaller.AddArg("sessionIds", typeof(ICollection<Guid>));
            recalculateIncentiveProgramsCaller.AddArg("employees", typeof(ICollection<User>));

            saveOrUpdateCaller = new RemoteMethodCaller("incentive", "saveOrUpdate");
            saveOrUpdateCaller.AddArg("program", typeof(ByValue<IncentiveProgram>));

            setDeletedCaller = new RemoteMethodCaller("incentive", "setDeleted");
            setDeletedCaller.AddArg("program", typeof(Guid?));
            setDeletedCaller.AddArg("deleted", typeof(bool));
        }

        #region Synchronous versions
        public IServiceMethodCall<Dictionary<DateInterval, ICollection<ProgramDescription>>> GetProgramDescriptions(User employee, List<DateInterval> intervals)
        {
            return getProgramDescriptionsCaller.CreateCall<Dictionary<DateInterval, ICollection<ProgramDescription>>>(new object[] { employee, intervals });
        }

        public IServiceMethodCall<ICollection<IncentiveProgram>> GetPrograms()
        {
            return getProgramsCaller.CreateCall<ICollection<IncentiveProgram>>(new object[] {  });
        }

        public IServiceMethodCall<object> RecalculateIncentivePrograms(ICollection<Guid> sessionIds, ICollection<User> employees)
        {
            return recalculateIncentiveProgramsCaller.CreateCall<object>(new object[] { sessionIds, employees });
        }

        public IServiceMethodCall<object> SaveOrUpdate(ByValue<IncentiveProgram> program)
        {
            return saveOrUpdateCaller.CreateCall<object>(new object[] { program });
        }

        public IServiceMethodCall<object> SetDeleted(Guid? program, bool deleted)
        {
            return setDeletedCaller.CreateCall<object>(new object[] { program, deleted });
        }

        #endregion

        #region asynchronous version
        public void GetProgramDescriptions(User employee, List<DateInterval> intervals, AsyncErrorHandler errorHandler, Action<Dictionary<DateInterval, ICollection<ProgramDescription>>> resultHandler)
        {
            getProgramDescriptionsCaller.CallAsync(new object[] {employee, intervals}, resultHandler, errorHandler);
        }

        public void GetPrograms(AsyncErrorHandler errorHandler, Action<ICollection<IncentiveProgram>> resultHandler)
        {
            getProgramsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void RecalculateIncentivePrograms(ICollection<Guid> sessionIds, ICollection<User> employees, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            recalculateIncentiveProgramsCaller.CallAsync(new object[] {sessionIds, employees}, resultHandler, errorHandler);
        }

        public void SaveOrUpdate(ByValue<IncentiveProgram> program, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            saveOrUpdateCaller.CallAsync(new object[] {program}, resultHandler, errorHandler);
        }

        public void SetDeleted(Guid? program, bool deleted, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setDeletedCaller.CallAsync(new object[] {program, deleted}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<Dictionary<DateInterval, ICollection<ProgramDescription>>> GetProgramDescriptions(User employee, List<DateInterval> intervals, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProgramDescriptionsCaller.Call<Dictionary<DateInterval, ICollection<ProgramDescription>>>(new object[] { employee, intervals }, asyncState, requestTimeout);
        }

        public Task<ICollection<IncentiveProgram>> GetPrograms([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProgramsCaller.Call<ICollection<IncentiveProgram>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> RecalculateIncentivePrograms(ICollection<Guid> sessionIds, ICollection<User> employees, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return recalculateIncentiveProgramsCaller.Call<object>(new object[] { sessionIds, employees }, asyncState, requestTimeout);
        }

        public Task<object> SaveOrUpdate(ByValue<IncentiveProgram> program, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return saveOrUpdateCaller.Call<object>(new object[] { program }, asyncState, requestTimeout);
        }

        public Task<object> SetDeleted(Guid? program, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setDeletedCaller.Call<object>(new object[] { program, deleted }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class LicenseService : ILicenseService
    {
        private readonly RemoteMethodCaller fetchAndInstallLicenseCaller;
        private readonly RemoteMethodCaller getConnectionCaller;
        private readonly RemoteMethodCaller getConnectionsCaller;
        private readonly RemoteMethodCaller getCurrentLicenseIdCaller;
        private readonly RemoteMethodCaller getForceDeveloperSandboxModeInfoCaller;
        private readonly RemoteMethodCaller getIikoBizServicesUrlCaller;
        private readonly RemoteMethodCaller getIikoBizWebUrlCaller;
        private readonly RemoteMethodCaller getLicensingStateCaller;
        private readonly RemoteMethodCaller getProductIdCaller;
        private readonly RemoteMethodCaller installOrUpdateLicenseCaller;
        private readonly RemoteMethodCaller isValidConnectionIdForModuleCaller;
        private readonly RemoteMethodCaller releaseConnectionCaller;
        private readonly RemoteMethodCaller releaseConnectionsCaller;

        internal LicenseService()
        {

            fetchAndInstallLicenseCaller = new RemoteMethodCaller("licensing", "fetchAndInstallLicense");
            fetchAndInstallLicenseCaller.AddArg("serialNumber", typeof(string));

            getConnectionCaller = new RemoteMethodCaller("licensing", "getConnection");
            getConnectionCaller.AddArg("connectionId", typeof(Guid?));
            getConnectionCaller.AddArg("moduleId", typeof(int?));

            getConnectionsCaller = new RemoteMethodCaller("licensing", "getConnections");
            getConnectionsCaller.AddArg("connections", typeof(List<LicenseConnectionRequest>));

            getCurrentLicenseIdCaller = new RemoteMethodCaller("licensing", "getCurrentLicenseId");

            getForceDeveloperSandboxModeInfoCaller = new RemoteMethodCaller("licensing", "getForceDeveloperSandboxModeInfo");

            getIikoBizServicesUrlCaller = new RemoteMethodCaller("licensing", "getIikoBizServicesUrl");

            getIikoBizWebUrlCaller = new RemoteMethodCaller("licensing", "getIikoBizWebUrl");

            getLicensingStateCaller = new RemoteMethodCaller("licensing", "getLicensingState");

            getProductIdCaller = new RemoteMethodCaller("licensing", "getProductId");

            installOrUpdateLicenseCaller = new RemoteMethodCaller("licensing", "installOrUpdateLicense");
            installOrUpdateLicenseCaller.AddArg("licenseDataBase64", typeof(string));
            installOrUpdateLicenseCaller.AddArg("info", typeof(IikoBizRegistrationInfo));

            isValidConnectionIdForModuleCaller = new RemoteMethodCaller("licensing", "isValidConnectionIdForModule");
            isValidConnectionIdForModuleCaller.AddArg("connectionId", typeof(Guid?));
            isValidConnectionIdForModuleCaller.AddArg("moduleId", typeof(int?));

            releaseConnectionCaller = new RemoteMethodCaller("licensing", "releaseConnection");
            releaseConnectionCaller.AddArg("connectionId", typeof(Guid?));

            releaseConnectionsCaller = new RemoteMethodCaller("licensing", "releaseConnections");
            releaseConnectionsCaller.AddArg("connectionIds", typeof(ICollection<Guid>));
        }

        #region Synchronous versions
        public IServiceMethodCall<LicensingState> FetchAndInstallLicense(string serialNumber)
        {
            return fetchAndInstallLicenseCaller.CreateCall<LicensingState>(new object[] { serialNumber });
        }

        public IServiceMethodCall<GetConnectionResult> GetConnection(Guid? connectionId, int? moduleId)
        {
            return getConnectionCaller.CreateCall<GetConnectionResult>(new object[] { connectionId, moduleId });
        }

        public IServiceMethodCall<LicenseConnectionResponse> GetConnections(List<LicenseConnectionRequest> connections)
        {
            return getConnectionsCaller.CreateCall<LicenseConnectionResponse>(new object[] { connections });
        }

        public IServiceMethodCall<Guid?> GetCurrentLicenseId()
        {
            return getCurrentLicenseIdCaller.CreateCall<Guid?>(new object[] {  });
        }

        public IServiceMethodCall<bool> GetForceDeveloperSandboxModeInfo()
        {
            return getForceDeveloperSandboxModeInfoCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<string> GetIikoBizServicesUrl()
        {
            return getIikoBizServicesUrlCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<string> GetIikoBizWebUrl()
        {
            return getIikoBizWebUrlCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<LicensingState> GetLicensingState()
        {
            return getLicensingStateCaller.CreateCall<LicensingState>(new object[] {  });
        }

        public IServiceMethodCall<string> GetProductId()
        {
            return getProductIdCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<LicenseStatus> InstallOrUpdateLicense(string licenseDataBase64, IikoBizRegistrationInfo info)
        {
            return installOrUpdateLicenseCaller.CreateCall<LicenseStatus>(new object[] { licenseDataBase64, info });
        }

        public IServiceMethodCall<bool> IsValidConnectionIdForModule(Guid? connectionId, int? moduleId)
        {
            return isValidConnectionIdForModuleCaller.CreateCall<bool>(new object[] { connectionId, moduleId });
        }

        public IServiceMethodCall<object> ReleaseConnection(Guid? connectionId)
        {
            return releaseConnectionCaller.CreateCall<object>(new object[] { connectionId });
        }

        public IServiceMethodCall<object> ReleaseConnections(ICollection<Guid> connectionIds)
        {
            return releaseConnectionsCaller.CreateCall<object>(new object[] { connectionIds });
        }

        #endregion

        #region asynchronous version
        public void FetchAndInstallLicense(string serialNumber, AsyncErrorHandler errorHandler, Action<LicensingState> resultHandler)
        {
            fetchAndInstallLicenseCaller.CallAsync(new object[] {serialNumber}, resultHandler, errorHandler);
        }

        public void GetConnection(Guid? connectionId, int? moduleId, AsyncErrorHandler errorHandler, Action<GetConnectionResult> resultHandler)
        {
            getConnectionCaller.CallAsync(new object[] {connectionId, moduleId}, resultHandler, errorHandler);
        }

        public void GetConnections(List<LicenseConnectionRequest> connections, AsyncErrorHandler errorHandler, Action<LicenseConnectionResponse> resultHandler)
        {
            getConnectionsCaller.CallAsync(new object[] {connections}, resultHandler, errorHandler);
        }

        public void GetCurrentLicenseId(AsyncErrorHandler errorHandler, Action<Guid?> resultHandler)
        {
            getCurrentLicenseIdCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetForceDeveloperSandboxModeInfo(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            getForceDeveloperSandboxModeInfoCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetIikoBizServicesUrl(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getIikoBizServicesUrlCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetIikoBizWebUrl(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getIikoBizWebUrlCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetLicensingState(AsyncErrorHandler errorHandler, Action<LicensingState> resultHandler)
        {
            getLicensingStateCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetProductId(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            getProductIdCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void InstallOrUpdateLicense(string licenseDataBase64, IikoBizRegistrationInfo info, AsyncErrorHandler errorHandler, Action<LicenseStatus> resultHandler)
        {
            installOrUpdateLicenseCaller.CallAsync(new object[] {licenseDataBase64, info}, resultHandler, errorHandler);
        }

        public void IsValidConnectionIdForModule(Guid? connectionId, int? moduleId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isValidConnectionIdForModuleCaller.CallAsync(new object[] {connectionId, moduleId}, resultHandler, errorHandler);
        }

        public void ReleaseConnection(Guid? connectionId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            releaseConnectionCaller.CallAsync(new object[] {connectionId}, resultHandler, errorHandler);
        }

        public void ReleaseConnections(ICollection<Guid> connectionIds, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            releaseConnectionsCaller.CallAsync(new object[] {connectionIds}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<LicensingState> FetchAndInstallLicense(string serialNumber, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fetchAndInstallLicenseCaller.Call<LicensingState>(new object[] { serialNumber }, asyncState, requestTimeout);
        }

        public Task<GetConnectionResult> GetConnection(Guid? connectionId, int? moduleId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getConnectionCaller.Call<GetConnectionResult>(new object[] { connectionId, moduleId }, asyncState, requestTimeout);
        }

        public Task<LicenseConnectionResponse> GetConnections(List<LicenseConnectionRequest> connections, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getConnectionsCaller.Call<LicenseConnectionResponse>(new object[] { connections }, asyncState, requestTimeout);
        }

        public Task<Guid?> GetCurrentLicenseId([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCurrentLicenseIdCaller.Call<Guid?>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> GetForceDeveloperSandboxModeInfo([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getForceDeveloperSandboxModeInfoCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<string> GetIikoBizServicesUrl([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIikoBizServicesUrlCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<string> GetIikoBizWebUrl([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getIikoBizWebUrlCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<LicensingState> GetLicensingState([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLicensingStateCaller.Call<LicensingState>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<string> GetProductId([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getProductIdCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<LicenseStatus> InstallOrUpdateLicense(string licenseDataBase64, IikoBizRegistrationInfo info, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return installOrUpdateLicenseCaller.Call<LicenseStatus>(new object[] { licenseDataBase64, info }, asyncState, requestTimeout);
        }

        public Task<bool> IsValidConnectionIdForModule(Guid? connectionId, int? moduleId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isValidConnectionIdForModuleCaller.Call<bool>(new object[] { connectionId, moduleId }, asyncState, requestTimeout);
        }

        public Task<object> ReleaseConnection(Guid? connectionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return releaseConnectionCaller.Call<object>(new object[] { connectionId }, asyncState, requestTimeout);
        }

        public Task<object> ReleaseConnections(ICollection<Guid> connectionIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return releaseConnectionsCaller.Call<object>(new object[] { connectionIds }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class HttpReverseTunnelProxyService : IHttpReverseTunnelProxyService
    {
        private readonly RemoteMethodCaller reportHttpResponseCaller;
        private readonly RemoteMethodCaller waitHttpRequestCaller;

        internal HttpReverseTunnelProxyService()
        {

            reportHttpResponseCaller = new RemoteMethodCaller("httpReverseTunnelProxyService", "reportHttpResponse");
            reportHttpResponseCaller.AddArg("httpResponse", typeof(ProxiedResponseDto));

            waitHttpRequestCaller = new RemoteMethodCaller("httpReverseTunnelProxyService", "waitHttpRequest");
            waitHttpRequestCaller.AddArg("timeoutMillis", typeof(int));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> ReportHttpResponse(ProxiedResponseDto httpResponse)
        {
            return reportHttpResponseCaller.CreateCall<object>(new object[] { httpResponse });
        }

        public IServiceMethodCall<ProxiedRequestDto> WaitHttpRequest(int timeoutMillis)
        {
            return waitHttpRequestCaller.CreateCall<ProxiedRequestDto>(new object[] { timeoutMillis });
        }

        #endregion

        #region asynchronous version
        public void ReportHttpResponse(ProxiedResponseDto httpResponse, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            reportHttpResponseCaller.CallAsync(new object[] {httpResponse}, resultHandler, errorHandler);
        }

        public void WaitHttpRequest(int timeoutMillis, AsyncErrorHandler errorHandler, Action<ProxiedRequestDto> resultHandler)
        {
            waitHttpRequestCaller.CallAsync(new object[] {timeoutMillis}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> ReportHttpResponse(ProxiedResponseDto httpResponse, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return reportHttpResponseCaller.Call<object>(new object[] { httpResponse }, asyncState, requestTimeout);
        }

        public Task<ProxiedRequestDto> WaitHttpRequest(int timeoutMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return waitHttpRequestCaller.Call<ProxiedRequestDto>(new object[] { timeoutMillis }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PbxService : IPbxService
    {
        private readonly RemoteMethodCaller firePbxCallAcceptedCaller;
        private readonly RemoteMethodCaller firePbxCallHungUpCaller;
        private readonly RemoteMethodCaller firePbxCallIncomingCaller;
        private readonly RemoteMethodCaller firePbxCallOutcomingCaller;
        private readonly RemoteMethodCaller firePbxCallRejectedCaller;

        internal PbxService()
        {

            firePbxCallAcceptedCaller = new RemoteMethodCaller("Pbx", "firePbxCallAccepted");
            firePbxCallAcceptedCaller.AddArg("callId", typeof(string));
            firePbxCallAcceptedCaller.AddArg("accountRms", typeof(string));
            firePbxCallAcceptedCaller.AddArg("accountClient", typeof(string));
            firePbxCallAcceptedCaller.AddArg("rmsSoftware", typeof(PbxRmsClient));

            firePbxCallHungUpCaller = new RemoteMethodCaller("Pbx", "firePbxCallHungUp");
            firePbxCallHungUpCaller.AddArg("callId", typeof(string));
            firePbxCallHungUpCaller.AddArg("accountRms", typeof(string));
            firePbxCallHungUpCaller.AddArg("accountClient", typeof(string));
            firePbxCallHungUpCaller.AddArg("rmsSoftware", typeof(PbxRmsClient));

            firePbxCallIncomingCaller = new RemoteMethodCaller("Pbx", "firePbxCallIncoming");
            firePbxCallIncomingCaller.AddArg("callId", typeof(string));
            firePbxCallIncomingCaller.AddArg("accountRms", typeof(string));
            firePbxCallIncomingCaller.AddArg("accountClient", typeof(string));
            firePbxCallIncomingCaller.AddArg("rmsSoftware", typeof(PbxRmsClient));

            firePbxCallOutcomingCaller = new RemoteMethodCaller("Pbx", "firePbxCallOutcoming");
            firePbxCallOutcomingCaller.AddArg("callId", typeof(string));
            firePbxCallOutcomingCaller.AddArg("accountRms", typeof(string));
            firePbxCallOutcomingCaller.AddArg("accountClient", typeof(string));
            firePbxCallOutcomingCaller.AddArg("rmsSoftware", typeof(PbxRmsClient));

            firePbxCallRejectedCaller = new RemoteMethodCaller("Pbx", "firePbxCallRejected");
            firePbxCallRejectedCaller.AddArg("callId", typeof(string));
            firePbxCallRejectedCaller.AddArg("accountRms", typeof(string));
            firePbxCallRejectedCaller.AddArg("accountClient", typeof(string));
            firePbxCallRejectedCaller.AddArg("rmsSoftware", typeof(PbxRmsClient));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> FirePbxCallAccepted(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware)
        {
            return firePbxCallAcceptedCaller.CreateCall<object>(new object[] { callId, accountRms, accountClient, rmsSoftware });
        }

        public IServiceMethodCall<object> FirePbxCallHungUp(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware)
        {
            return firePbxCallHungUpCaller.CreateCall<object>(new object[] { callId, accountRms, accountClient, rmsSoftware });
        }

        public IServiceMethodCall<object> FirePbxCallIncoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware)
        {
            return firePbxCallIncomingCaller.CreateCall<object>(new object[] { callId, accountRms, accountClient, rmsSoftware });
        }

        public IServiceMethodCall<object> FirePbxCallOutcoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware)
        {
            return firePbxCallOutcomingCaller.CreateCall<object>(new object[] { callId, accountRms, accountClient, rmsSoftware });
        }

        public IServiceMethodCall<object> FirePbxCallRejected(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware)
        {
            return firePbxCallRejectedCaller.CreateCall<object>(new object[] { callId, accountRms, accountClient, rmsSoftware });
        }

        #endregion

        #region asynchronous version
        public void FirePbxCallAccepted(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            firePbxCallAcceptedCaller.CallAsync(new object[] {callId, accountRms, accountClient, rmsSoftware}, resultHandler, errorHandler);
        }

        public void FirePbxCallHungUp(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            firePbxCallHungUpCaller.CallAsync(new object[] {callId, accountRms, accountClient, rmsSoftware}, resultHandler, errorHandler);
        }

        public void FirePbxCallIncoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            firePbxCallIncomingCaller.CallAsync(new object[] {callId, accountRms, accountClient, rmsSoftware}, resultHandler, errorHandler);
        }

        public void FirePbxCallOutcoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            firePbxCallOutcomingCaller.CallAsync(new object[] {callId, accountRms, accountClient, rmsSoftware}, resultHandler, errorHandler);
        }

        public void FirePbxCallRejected(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            firePbxCallRejectedCaller.CallAsync(new object[] {callId, accountRms, accountClient, rmsSoftware}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> FirePbxCallAccepted(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return firePbxCallAcceptedCaller.Call<object>(new object[] { callId, accountRms, accountClient, rmsSoftware }, asyncState, requestTimeout);
        }

        public Task<object> FirePbxCallHungUp(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return firePbxCallHungUpCaller.Call<object>(new object[] { callId, accountRms, accountClient, rmsSoftware }, asyncState, requestTimeout);
        }

        public Task<object> FirePbxCallIncoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return firePbxCallIncomingCaller.Call<object>(new object[] { callId, accountRms, accountClient, rmsSoftware }, asyncState, requestTimeout);
        }

        public Task<object> FirePbxCallOutcoming(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return firePbxCallOutcomingCaller.Call<object>(new object[] { callId, accountRms, accountClient, rmsSoftware }, asyncState, requestTimeout);
        }

        public Task<object> FirePbxCallRejected(string callId, string accountRms, string accountClient, PbxRmsClient rmsSoftware, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return firePbxCallRejectedCaller.Call<object>(new object[] { callId, accountRms, accountClient, rmsSoftware }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class PermissionService : IPermissionService
    {
        private readonly RemoteMethodCaller addRoleCaller;
        private readonly RemoteMethodCaller removeRoleCaller;
        private readonly RemoteMethodCaller setMainRoleCaller;
        private readonly RemoteMethodCaller setPasswordForUserCaller;
        private readonly RemoteMethodCaller setPermissionForRoleCaller;
        private readonly RemoteMethodCaller setPermissionForUserCaller;
        private readonly RemoteMethodCaller setPermissionsForRoleCaller;
        private readonly RemoteMethodCaller setPermissionsForUserCaller;

        internal PermissionService()
        {

            addRoleCaller = new RemoteMethodCaller("permission", "addRole");
            addRoleCaller.AddArg("user", typeof(User));
            addRoleCaller.AddArg("role", typeof(Role));

            removeRoleCaller = new RemoteMethodCaller("permission", "removeRole");
            removeRoleCaller.AddArg("user", typeof(User));
            removeRoleCaller.AddArg("role", typeof(Role));

            setMainRoleCaller = new RemoteMethodCaller("permission", "setMainRole");
            setMainRoleCaller.AddArg("user", typeof(User));
            setMainRoleCaller.AddArg("role", typeof(Role));

            setPasswordForUserCaller = new RemoteMethodCaller("permission", "setPasswordForUser");
            setPasswordForUserCaller.AddArg("user", typeof(User));
            setPasswordForUserCaller.AddArg("passwordHash", typeof(string));

            setPermissionForRoleCaller = new RemoteMethodCaller("permission", "setPermissionForRole");
            setPermissionForRoleCaller.AddArg("role", typeof(Role));
            setPermissionForRoleCaller.AddArg("permission", typeof(Permission));
            setPermissionForRoleCaller.AddArg("state", typeof(PermissionState));

            setPermissionForUserCaller = new RemoteMethodCaller("permission", "setPermissionForUser");
            setPermissionForUserCaller.AddArg("user", typeof(User));
            setPermissionForUserCaller.AddArg("permission", typeof(Permission));
            setPermissionForUserCaller.AddArg("state", typeof(PermissionState));

            setPermissionsForRoleCaller = new RemoteMethodCaller("permission", "setPermissionsForRole");
            setPermissionsForRoleCaller.AddArg("role", typeof(Role));
            setPermissionsForRoleCaller.AddArg("permissionsMap", typeof(Dictionary<Permission, PermissionState>));

            setPermissionsForUserCaller = new RemoteMethodCaller("permission", "setPermissionsForUser");
            setPermissionsForUserCaller.AddArg("user", typeof(User));
            setPermissionsForUserCaller.AddArg("permissionsMap", typeof(Dictionary<Permission, PermissionState>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> AddRole(User user, Role role)
        {
            return addRoleCaller.CreateCall<object>(new object[] { user, role });
        }

        public IServiceMethodCall<object> RemoveRole(User user, Role role)
        {
            return removeRoleCaller.CreateCall<object>(new object[] { user, role });
        }

        public IServiceMethodCall<object> SetMainRole(User user, Role role)
        {
            return setMainRoleCaller.CreateCall<object>(new object[] { user, role });
        }

        public IServiceMethodCall<object> SetPasswordForUser(User user, string passwordHash)
        {
            return setPasswordForUserCaller.CreateCall<object>(new object[] { user, passwordHash });
        }

        public IServiceMethodCall<object> SetPermissionForRole(Role role, Permission permission, PermissionState state)
        {
            return setPermissionForRoleCaller.CreateCall<object>(new object[] { role, permission, state });
        }

        public IServiceMethodCall<object> SetPermissionForUser(User user, Permission permission, PermissionState state)
        {
            return setPermissionForUserCaller.CreateCall<object>(new object[] { user, permission, state });
        }

        public IServiceMethodCall<object> SetPermissionsForRole(Role role, Dictionary<Permission, PermissionState> permissionsMap)
        {
            return setPermissionsForRoleCaller.CreateCall<object>(new object[] { role, permissionsMap });
        }

        public IServiceMethodCall<object> SetPermissionsForUser(User user, Dictionary<Permission, PermissionState> permissionsMap)
        {
            return setPermissionsForUserCaller.CreateCall<object>(new object[] { user, permissionsMap });
        }

        #endregion

        #region asynchronous version
        public void AddRole(User user, Role role, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            addRoleCaller.CallAsync(new object[] {user, role}, resultHandler, errorHandler);
        }

        public void RemoveRole(User user, Role role, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            removeRoleCaller.CallAsync(new object[] {user, role}, resultHandler, errorHandler);
        }

        public void SetMainRole(User user, Role role, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setMainRoleCaller.CallAsync(new object[] {user, role}, resultHandler, errorHandler);
        }

        public void SetPasswordForUser(User user, string passwordHash, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPasswordForUserCaller.CallAsync(new object[] {user, passwordHash}, resultHandler, errorHandler);
        }

        public void SetPermissionForRole(Role role, Permission permission, PermissionState state, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPermissionForRoleCaller.CallAsync(new object[] {role, permission, state}, resultHandler, errorHandler);
        }

        public void SetPermissionForUser(User user, Permission permission, PermissionState state, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPermissionForUserCaller.CallAsync(new object[] {user, permission, state}, resultHandler, errorHandler);
        }

        public void SetPermissionsForRole(Role role, Dictionary<Permission, PermissionState> permissionsMap, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPermissionsForRoleCaller.CallAsync(new object[] {role, permissionsMap}, resultHandler, errorHandler);
        }

        public void SetPermissionsForUser(User user, Dictionary<Permission, PermissionState> permissionsMap, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            setPermissionsForUserCaller.CallAsync(new object[] {user, permissionsMap}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> AddRole(User user, Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addRoleCaller.Call<object>(new object[] { user, role }, asyncState, requestTimeout);
        }

        public Task<object> RemoveRole(User user, Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeRoleCaller.Call<object>(new object[] { user, role }, asyncState, requestTimeout);
        }

        public Task<object> SetMainRole(User user, Role role, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setMainRoleCaller.Call<object>(new object[] { user, role }, asyncState, requestTimeout);
        }

        public Task<object> SetPasswordForUser(User user, string passwordHash, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPasswordForUserCaller.Call<object>(new object[] { user, passwordHash }, asyncState, requestTimeout);
        }

        public Task<object> SetPermissionForRole(Role role, Permission permission, PermissionState state, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPermissionForRoleCaller.Call<object>(new object[] { role, permission, state }, asyncState, requestTimeout);
        }

        public Task<object> SetPermissionForUser(User user, Permission permission, PermissionState state, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPermissionForUserCaller.Call<object>(new object[] { user, permission, state }, asyncState, requestTimeout);
        }

        public Task<object> SetPermissionsForRole(Role role, Dictionary<Permission, PermissionState> permissionsMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPermissionsForRoleCaller.Call<object>(new object[] { role, permissionsMap }, asyncState, requestTimeout);
        }

        public Task<object> SetPermissionsForUser(User user, Dictionary<Permission, PermissionState> permissionsMap, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setPermissionsForUserCaller.Call<object>(new object[] { user, permissionsMap }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ReplicationService : IReplicationService
    {
        private readonly RemoteMethodCaller checkReplicationPullCaller;
        private readonly RemoteMethodCaller checkReplicationPushCaller;
        private readonly RemoteMethodCaller checkReplicationRequiredPossibleCaller;
        private readonly RemoteMethodCaller exportEntitiesUpdateCaller;
        private readonly RemoteMethodCaller getEntitiesCustomUpdateWithAsyncConfirmCaller;
        private readonly RemoteMethodCaller getEntitiesUpdateWithAsyncConfirmCaller;
        private readonly RemoteMethodCaller getExportConfigForNodeCaller;
        private readonly RemoteMethodCaller getExportConfigForServerNodeCaller;
        private readonly RemoteMethodCaller getLastRevisionCaller;
        private readonly RemoteMethodCaller getLastRevisionsCaller;
        private readonly RemoteMethodCaller importEntitiesUpdateCaller;
        private readonly RemoteMethodCaller reportRmsImportErrorCaller;
        private readonly RemoteMethodCaller reportRmsImportSuccessCaller;

        internal ReplicationService()
        {

            checkReplicationPullCaller = new RemoteMethodCaller("replication", "checkReplicationPull");
            checkReplicationPullCaller.AddArg("remoteRMS", typeof(Guid?));

            checkReplicationPushCaller = new RemoteMethodCaller("replication", "checkReplicationPush");
            checkReplicationPushCaller.AddArg("check", typeof(CheckReplicationResponse));

            checkReplicationRequiredPossibleCaller = new RemoteMethodCaller("replication", "checkReplicationRequiredPossible");
            checkReplicationRequiredPossibleCaller.AddArg("remoteRMS", typeof(Guid?));

            exportEntitiesUpdateCaller = new RemoteMethodCaller("replication", "exportEntitiesUpdate");
            exportEntitiesUpdateCaller.AddArg("exportRequest", typeof(ReplicationRequest));

            getEntitiesCustomUpdateWithAsyncConfirmCaller = new RemoteMethodCaller("replication", "getEntitiesCustomUpdateWithAsyncConfirm");
            getEntitiesCustomUpdateWithAsyncConfirmCaller.AddArg("serverNode", typeof(ServerNode));
            getEntitiesCustomUpdateWithAsyncConfirmCaller.AddArg("revisionFrom", typeof(int));
            getEntitiesCustomUpdateWithAsyncConfirmCaller.AddArg("config", typeof(ByValue<ReplicationConfig>));
            getEntitiesCustomUpdateWithAsyncConfirmCaller.AddArg("installationId", typeof(string));

            getEntitiesUpdateWithAsyncConfirmCaller = new RemoteMethodCaller("replication", "getEntitiesUpdateWithAsyncConfirm");
            getEntitiesUpdateWithAsyncConfirmCaller.AddArg("serverNode", typeof(ServerNode));
            getEntitiesUpdateWithAsyncConfirmCaller.AddArg("revisionFrom", typeof(int));
            getEntitiesUpdateWithAsyncConfirmCaller.AddArg("installationId", typeof(string));

            getExportConfigForNodeCaller = new RemoteMethodCaller("replication", "getExportConfigForNode");
            getExportConfigForNodeCaller.AddArg("node", typeof(ServerNode));

            getExportConfigForServerNodeCaller = new RemoteMethodCaller("replication", "getExportConfigForServerNode");
            getExportConfigForServerNodeCaller.AddArg("node", typeof(ServerNode));

            getLastRevisionCaller = new RemoteMethodCaller("replication", "getLastRevision");
            getLastRevisionCaller.AddArg("sourceNode", typeof(ServerNode));
            getLastRevisionCaller.AddArg("targetNode", typeof(ServerNode));

            getLastRevisionsCaller = new RemoteMethodCaller("replication", "getLastRevisions");
            getLastRevisionsCaller.AddArg("sourceNode", typeof(ServerNode));
            getLastRevisionsCaller.AddArg("targetNode", typeof(ServerNode));

            importEntitiesUpdateCaller = new RemoteMethodCaller("replication", "importEntitiesUpdate");
            importEntitiesUpdateCaller.AddArg("update", typeof(ReplicationResult));
            importEntitiesUpdateCaller.AddArg("installationId", typeof(string));

            reportRmsImportErrorCaller = new RemoteMethodCaller("replication", "reportRmsImportError");
            reportRmsImportErrorCaller.AddArg("department", typeof(DepartmentEntity));
            reportRmsImportErrorCaller.AddArg("importDurationMillis", typeof(int?));
            reportRmsImportErrorCaller.AddArg("error", typeof(string));

            reportRmsImportSuccessCaller = new RemoteMethodCaller("replication", "reportRmsImportSuccess");
            reportRmsImportSuccessCaller.AddArg("department", typeof(DepartmentEntity));
            reportRmsImportSuccessCaller.AddArg("importDurationMillis", typeof(int?));
        }

        #region Synchronous versions
        public IServiceMethodCall<CheckReplicationResponse> CheckReplicationPull(Guid? remoteRMS)
        {
            return checkReplicationPullCaller.CreateCall<CheckReplicationResponse>(new object[] { remoteRMS });
        }

        public IServiceMethodCall<BackRegistrationResult> CheckReplicationPush(CheckReplicationResponse check)
        {
            return checkReplicationPushCaller.CreateCall<BackRegistrationResult>(new object[] { check });
        }

        public IServiceMethodCall<string> CheckReplicationRequiredPossible(Guid? remoteRMS)
        {
            return checkReplicationRequiredPossibleCaller.CreateCall<string>(new object[] { remoteRMS });
        }

        public IServiceMethodCall<ReplicationResult> ExportEntitiesUpdate(ReplicationRequest exportRequest)
        {
            return exportEntitiesUpdateCaller.CreateCall<ReplicationResult>(new object[] { exportRequest });
        }

        public IServiceMethodCall<ReplicationResult> GetEntitiesCustomUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, ByValue<ReplicationConfig> config, string installationId)
        {
            return getEntitiesCustomUpdateWithAsyncConfirmCaller.CreateCall<ReplicationResult>(new object[] { serverNode, revisionFrom, config, installationId });
        }

        public IServiceMethodCall<ReplicationResult> GetEntitiesUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, string installationId)
        {
            return getEntitiesUpdateWithAsyncConfirmCaller.CreateCall<ReplicationResult>(new object[] { serverNode, revisionFrom, installationId });
        }

        public IServiceMethodCall<XmlAsValue> GetExportConfigForNode(ServerNode node)
        {
            return getExportConfigForNodeCaller.CreateCall<XmlAsValue>(new object[] { node });
        }

        public IServiceMethodCall<ByValue<ReplicationConfig>> GetExportConfigForServerNode(ServerNode node)
        {
            return getExportConfigForServerNodeCaller.CreateCall<ByValue<ReplicationConfig>>(new object[] { node });
        }

        public IServiceMethodCall<int> GetLastRevision(ServerNode sourceNode, ServerNode targetNode)
        {
            return getLastRevisionCaller.CreateCall<int>(new object[] { sourceNode, targetNode });
        }

        public IServiceMethodCall<RevisionConfig> GetLastRevisions(ServerNode sourceNode, ServerNode targetNode)
        {
            return getLastRevisionsCaller.CreateCall<RevisionConfig>(new object[] { sourceNode, targetNode });
        }

        public IServiceMethodCall<object> ImportEntitiesUpdate(ReplicationResult update, string installationId)
        {
            return importEntitiesUpdateCaller.CreateCall<object>(new object[] { update, installationId });
        }

        public IServiceMethodCall<object> ReportRmsImportError(DepartmentEntity department, int? importDurationMillis, string error)
        {
            return reportRmsImportErrorCaller.CreateCall<object>(new object[] { department, importDurationMillis, error });
        }

        public IServiceMethodCall<object> ReportRmsImportSuccess(DepartmentEntity department, int? importDurationMillis)
        {
            return reportRmsImportSuccessCaller.CreateCall<object>(new object[] { department, importDurationMillis });
        }

        #endregion

        #region asynchronous version
        public void CheckReplicationPull(Guid? remoteRMS, AsyncErrorHandler errorHandler, Action<CheckReplicationResponse> resultHandler)
        {
            checkReplicationPullCaller.CallAsync(new object[] {remoteRMS}, resultHandler, errorHandler);
        }

        public void CheckReplicationPush(CheckReplicationResponse check, AsyncErrorHandler errorHandler, Action<BackRegistrationResult> resultHandler)
        {
            checkReplicationPushCaller.CallAsync(new object[] {check}, resultHandler, errorHandler);
        }

        public void CheckReplicationRequiredPossible(Guid? remoteRMS, AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            checkReplicationRequiredPossibleCaller.CallAsync(new object[] {remoteRMS}, resultHandler, errorHandler);
        }

        public void ExportEntitiesUpdate(ReplicationRequest exportRequest, AsyncErrorHandler errorHandler, Action<ReplicationResult> resultHandler)
        {
            exportEntitiesUpdateCaller.CallAsync(new object[] {exportRequest}, resultHandler, errorHandler);
        }

        public void GetEntitiesCustomUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, ByValue<ReplicationConfig> config, string installationId, AsyncErrorHandler errorHandler, Action<ReplicationResult> resultHandler)
        {
            getEntitiesCustomUpdateWithAsyncConfirmCaller.CallAsync(new object[] {serverNode, revisionFrom, config, installationId}, resultHandler, errorHandler);
        }

        public void GetEntitiesUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, string installationId, AsyncErrorHandler errorHandler, Action<ReplicationResult> resultHandler)
        {
            getEntitiesUpdateWithAsyncConfirmCaller.CallAsync(new object[] {serverNode, revisionFrom, installationId}, resultHandler, errorHandler);
        }

        public void GetExportConfigForNode(ServerNode node, AsyncErrorHandler errorHandler, Action<XmlAsValue> resultHandler)
        {
            getExportConfigForNodeCaller.CallAsync(new object[] {node}, resultHandler, errorHandler);
        }

        public void GetExportConfigForServerNode(ServerNode node, AsyncErrorHandler errorHandler, Action<ByValue<ReplicationConfig>> resultHandler)
        {
            getExportConfigForServerNodeCaller.CallAsync(new object[] {node}, resultHandler, errorHandler);
        }

        public void GetLastRevision(ServerNode sourceNode, ServerNode targetNode, AsyncErrorHandler errorHandler, Action<int> resultHandler)
        {
            getLastRevisionCaller.CallAsync(new object[] {sourceNode, targetNode}, resultHandler, errorHandler);
        }

        public void GetLastRevisions(ServerNode sourceNode, ServerNode targetNode, AsyncErrorHandler errorHandler, Action<RevisionConfig> resultHandler)
        {
            getLastRevisionsCaller.CallAsync(new object[] {sourceNode, targetNode}, resultHandler, errorHandler);
        }

        public void ImportEntitiesUpdate(ReplicationResult update, string installationId, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            importEntitiesUpdateCaller.CallAsync(new object[] {update, installationId}, resultHandler, errorHandler);
        }

        public void ReportRmsImportError(DepartmentEntity department, int? importDurationMillis, string error, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            reportRmsImportErrorCaller.CallAsync(new object[] {department, importDurationMillis, error}, resultHandler, errorHandler);
        }

        public void ReportRmsImportSuccess(DepartmentEntity department, int? importDurationMillis, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            reportRmsImportSuccessCaller.CallAsync(new object[] {department, importDurationMillis}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<CheckReplicationResponse> CheckReplicationPull(Guid? remoteRMS, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return checkReplicationPullCaller.Call<CheckReplicationResponse>(new object[] { remoteRMS }, asyncState, requestTimeout);
        }

        public Task<BackRegistrationResult> CheckReplicationPush(CheckReplicationResponse check, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return checkReplicationPushCaller.Call<BackRegistrationResult>(new object[] { check }, asyncState, requestTimeout);
        }

        public Task<string> CheckReplicationRequiredPossible(Guid? remoteRMS, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return checkReplicationRequiredPossibleCaller.Call<string>(new object[] { remoteRMS }, asyncState, requestTimeout);
        }

        public Task<ReplicationResult> ExportEntitiesUpdate(ReplicationRequest exportRequest, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return exportEntitiesUpdateCaller.Call<ReplicationResult>(new object[] { exportRequest }, asyncState, requestTimeout);
        }

        public Task<ReplicationResult> GetEntitiesCustomUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, ByValue<ReplicationConfig> config, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEntitiesCustomUpdateWithAsyncConfirmCaller.Call<ReplicationResult>(new object[] { serverNode, revisionFrom, config, installationId }, asyncState, requestTimeout);
        }

        public Task<ReplicationResult> GetEntitiesUpdateWithAsyncConfirm(ServerNode serverNode, int revisionFrom, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEntitiesUpdateWithAsyncConfirmCaller.Call<ReplicationResult>(new object[] { serverNode, revisionFrom, installationId }, asyncState, requestTimeout);
        }

        public Task<XmlAsValue> GetExportConfigForNode(ServerNode node, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getExportConfigForNodeCaller.Call<XmlAsValue>(new object[] { node }, asyncState, requestTimeout);
        }

        public Task<ByValue<ReplicationConfig>> GetExportConfigForServerNode(ServerNode node, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getExportConfigForServerNodeCaller.Call<ByValue<ReplicationConfig>>(new object[] { node }, asyncState, requestTimeout);
        }

        public Task<int> GetLastRevision(ServerNode sourceNode, ServerNode targetNode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLastRevisionCaller.Call<int>(new object[] { sourceNode, targetNode }, asyncState, requestTimeout);
        }

        public Task<RevisionConfig> GetLastRevisions(ServerNode sourceNode, ServerNode targetNode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getLastRevisionsCaller.Call<RevisionConfig>(new object[] { sourceNode, targetNode }, asyncState, requestTimeout);
        }

        public Task<object> ImportEntitiesUpdate(ReplicationResult update, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return importEntitiesUpdateCaller.Call<object>(new object[] { update, installationId }, asyncState, requestTimeout);
        }

        public Task<object> ReportRmsImportError(DepartmentEntity department, int? importDurationMillis, string error, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return reportRmsImportErrorCaller.Call<object>(new object[] { department, importDurationMillis, error }, asyncState, requestTimeout);
        }

        public Task<object> ReportRmsImportSuccess(DepartmentEntity department, int? importDurationMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return reportRmsImportSuccessCaller.Call<object>(new object[] { department, importDurationMillis }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ReplicationMasterServerService : IReplicationMasterServerService
    {
        private readonly RemoteMethodCaller addReplicationConfigCaller;
        private readonly RemoteMethodCaller forcedUnregistedDepartmentCaller;
        private readonly RemoteMethodCaller getReplicationLogCaller;
        private readonly RemoteMethodCaller registerSlaveServerCaller;
        private readonly RemoteMethodCaller registerSlaveServerNodeCaller;
        private readonly RemoteMethodCaller removeReplicationConfigCaller;
        private readonly RemoteMethodCaller restoreReplicationConfigCaller;
        private readonly RemoteMethodCaller unregistedServerNodeCaller;
        private readonly RemoteMethodCaller updateAllowReplicationSchedulesCaller;
        private readonly RemoteMethodCaller updateRMSInstanceToForceReplicationCaller;
        private readonly RemoteMethodCaller updateReplicationConfigCaller;

        internal ReplicationMasterServerService()
        {

            addReplicationConfigCaller = new RemoteMethodCaller("replicationMasterServerService", "addReplicationConfig");
            addReplicationConfigCaller.AddArg("replicationConfig", typeof(ByValue<ReplicationConfig>));

            forcedUnregistedDepartmentCaller = new RemoteMethodCaller("replicationMasterServerService", "forcedUnregistedDepartment");
            forcedUnregistedDepartmentCaller.AddArg("departments", typeof(DepartmentEntity));

            getReplicationLogCaller = new RemoteMethodCaller("replicationMasterServerService", "getReplicationLog");
            getReplicationLogCaller.AddArg("departmentNode", typeof(DepartmentEntity));

            registerSlaveServerCaller = new RemoteMethodCaller("replicationMasterServerService", "registerSlaveServer");
            registerSlaveServerCaller.AddArg("serverNode", typeof(ByValue<ServerNodeInfo>));
            registerSlaveServerCaller.AddArg("departmentCode", typeof(string));

            registerSlaveServerNodeCaller = new RemoteMethodCaller("replicationMasterServerService", "registerSlaveServerNode");
            registerSlaveServerNodeCaller.AddArg("serverNode", typeof(ByValue<ServerNodeInfo>));
            registerSlaveServerNodeCaller.AddArg("departmentCode", typeof(string));

            removeReplicationConfigCaller = new RemoteMethodCaller("replicationMasterServerService", "removeReplicationConfig");
            removeReplicationConfigCaller.AddArg("replicationConfigId", typeof(Guid?));

            restoreReplicationConfigCaller = new RemoteMethodCaller("replicationMasterServerService", "restoreReplicationConfig");
            restoreReplicationConfigCaller.AddArg("replicationConfigId", typeof(Guid?));

            unregistedServerNodeCaller = new RemoteMethodCaller("replicationMasterServerService", "unregistedServerNode");
            unregistedServerNodeCaller.AddArg("serverNodeId", typeof(Guid?));
            unregistedServerNodeCaller.AddArg("installationId", typeof(string));

            updateAllowReplicationSchedulesCaller = new RemoteMethodCaller("replicationMasterServerService", "updateAllowReplicationSchedules");
            updateAllowReplicationSchedulesCaller.AddArg("allowReplicationSchedules", typeof(bool));

            updateRMSInstanceToForceReplicationCaller = new RemoteMethodCaller("replicationMasterServerService", "updateRMSInstanceToForceReplication");
            updateRMSInstanceToForceReplicationCaller.AddArg("departmentId", typeof(ICollection<DepartmentEntity>));
            updateRMSInstanceToForceReplicationCaller.AddArg("isForcedReplication", typeof(bool));

            updateReplicationConfigCaller = new RemoteMethodCaller("replicationMasterServerService", "updateReplicationConfig");
            updateReplicationConfigCaller.AddArg("replicationConfig", typeof(ByValue<ReplicationConfig>));
        }

        #region Synchronous versions
        public IServiceMethodCall<ReplicationMasterServerResult> AddReplicationConfig(ByValue<ReplicationConfig> replicationConfig)
        {
            return addReplicationConfigCaller.CreateCall<ReplicationMasterServerResult>(new object[] { replicationConfig });
        }

        public IServiceMethodCall<SlaveRegistrationStatus> ForcedUnregistedDepartment(DepartmentEntity departments)
        {
            return forcedUnregistedDepartmentCaller.CreateCall<SlaveRegistrationStatus>(new object[] { departments });
        }

        public IServiceMethodCall<List<ReplicationEvent>> GetReplicationLog(DepartmentEntity departmentNode)
        {
            return getReplicationLogCaller.CreateCall<List<ReplicationEvent>>(new object[] { departmentNode });
        }

        public IServiceMethodCall<XmlAsValue> RegisterSlaveServer(ByValue<ServerNodeInfo> serverNode, string departmentCode)
        {
            return registerSlaveServerCaller.CreateCall<XmlAsValue>(new object[] { serverNode, departmentCode });
        }

        public IServiceMethodCall<SlaveServerRegistrationResult> RegisterSlaveServerNode(ByValue<ServerNodeInfo> serverNode, string departmentCode)
        {
            return registerSlaveServerNodeCaller.CreateCall<SlaveServerRegistrationResult>(new object[] { serverNode, departmentCode });
        }

        public IServiceMethodCall<bool> RemoveReplicationConfig(Guid? replicationConfigId)
        {
            return removeReplicationConfigCaller.CreateCall<bool>(new object[] { replicationConfigId });
        }

        public IServiceMethodCall<bool> RestoreReplicationConfig(Guid? replicationConfigId)
        {
            return restoreReplicationConfigCaller.CreateCall<bool>(new object[] { replicationConfigId });
        }

        public IServiceMethodCall<SlaveRegistrationStatus> UnregistedServerNode(Guid? serverNodeId, string installationId)
        {
            return unregistedServerNodeCaller.CreateCall<SlaveRegistrationStatus>(new object[] { serverNodeId, installationId });
        }

        public IServiceMethodCall<object> UpdateAllowReplicationSchedules(bool allowReplicationSchedules)
        {
            return updateAllowReplicationSchedulesCaller.CreateCall<object>(new object[] { allowReplicationSchedules });
        }

        public IServiceMethodCall<object> UpdateRMSInstanceToForceReplication(ICollection<DepartmentEntity> departmentId, bool isForcedReplication)
        {
            return updateRMSInstanceToForceReplicationCaller.CreateCall<object>(new object[] { departmentId, isForcedReplication });
        }

        public IServiceMethodCall<ReplicationMasterServerResult> UpdateReplicationConfig(ByValue<ReplicationConfig> replicationConfig)
        {
            return updateReplicationConfigCaller.CreateCall<ReplicationMasterServerResult>(new object[] { replicationConfig });
        }

        #endregion

        #region asynchronous version
        public void AddReplicationConfig(ByValue<ReplicationConfig> replicationConfig, AsyncErrorHandler errorHandler, Action<ReplicationMasterServerResult> resultHandler)
        {
            addReplicationConfigCaller.CallAsync(new object[] {replicationConfig}, resultHandler, errorHandler);
        }

        public void ForcedUnregistedDepartment(DepartmentEntity departments, AsyncErrorHandler errorHandler, Action<SlaveRegistrationStatus> resultHandler)
        {
            forcedUnregistedDepartmentCaller.CallAsync(new object[] {departments}, resultHandler, errorHandler);
        }

        public void GetReplicationLog(DepartmentEntity departmentNode, AsyncErrorHandler errorHandler, Action<List<ReplicationEvent>> resultHandler)
        {
            getReplicationLogCaller.CallAsync(new object[] {departmentNode}, resultHandler, errorHandler);
        }

        public void RegisterSlaveServer(ByValue<ServerNodeInfo> serverNode, string departmentCode, AsyncErrorHandler errorHandler, Action<XmlAsValue> resultHandler)
        {
            registerSlaveServerCaller.CallAsync(new object[] {serverNode, departmentCode}, resultHandler, errorHandler);
        }

        public void RegisterSlaveServerNode(ByValue<ServerNodeInfo> serverNode, string departmentCode, AsyncErrorHandler errorHandler, Action<SlaveServerRegistrationResult> resultHandler)
        {
            registerSlaveServerNodeCaller.CallAsync(new object[] {serverNode, departmentCode}, resultHandler, errorHandler);
        }

        public void RemoveReplicationConfig(Guid? replicationConfigId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            removeReplicationConfigCaller.CallAsync(new object[] {replicationConfigId}, resultHandler, errorHandler);
        }

        public void RestoreReplicationConfig(Guid? replicationConfigId, AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            restoreReplicationConfigCaller.CallAsync(new object[] {replicationConfigId}, resultHandler, errorHandler);
        }

        public void UnregistedServerNode(Guid? serverNodeId, string installationId, AsyncErrorHandler errorHandler, Action<SlaveRegistrationStatus> resultHandler)
        {
            unregistedServerNodeCaller.CallAsync(new object[] {serverNodeId, installationId}, resultHandler, errorHandler);
        }

        public void UpdateAllowReplicationSchedules(bool allowReplicationSchedules, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateAllowReplicationSchedulesCaller.CallAsync(new object[] {allowReplicationSchedules}, resultHandler, errorHandler);
        }

        public void UpdateRMSInstanceToForceReplication(ICollection<DepartmentEntity> departmentId, bool isForcedReplication, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateRMSInstanceToForceReplicationCaller.CallAsync(new object[] {departmentId, isForcedReplication}, resultHandler, errorHandler);
        }

        public void UpdateReplicationConfig(ByValue<ReplicationConfig> replicationConfig, AsyncErrorHandler errorHandler, Action<ReplicationMasterServerResult> resultHandler)
        {
            updateReplicationConfigCaller.CallAsync(new object[] {replicationConfig}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<ReplicationMasterServerResult> AddReplicationConfig(ByValue<ReplicationConfig> replicationConfig, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return addReplicationConfigCaller.Call<ReplicationMasterServerResult>(new object[] { replicationConfig }, asyncState, requestTimeout);
        }

        public Task<SlaveRegistrationStatus> ForcedUnregistedDepartment(DepartmentEntity departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return forcedUnregistedDepartmentCaller.Call<SlaveRegistrationStatus>(new object[] { departments }, asyncState, requestTimeout);
        }

        public Task<List<ReplicationEvent>> GetReplicationLog(DepartmentEntity departmentNode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getReplicationLogCaller.Call<List<ReplicationEvent>>(new object[] { departmentNode }, asyncState, requestTimeout);
        }

        public Task<XmlAsValue> RegisterSlaveServer(ByValue<ServerNodeInfo> serverNode, string departmentCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return registerSlaveServerCaller.Call<XmlAsValue>(new object[] { serverNode, departmentCode }, asyncState, requestTimeout);
        }

        public Task<SlaveServerRegistrationResult> RegisterSlaveServerNode(ByValue<ServerNodeInfo> serverNode, string departmentCode, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return registerSlaveServerNodeCaller.Call<SlaveServerRegistrationResult>(new object[] { serverNode, departmentCode }, asyncState, requestTimeout);
        }

        public Task<bool> RemoveReplicationConfig(Guid? replicationConfigId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return removeReplicationConfigCaller.Call<bool>(new object[] { replicationConfigId }, asyncState, requestTimeout);
        }

        public Task<bool> RestoreReplicationConfig(Guid? replicationConfigId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return restoreReplicationConfigCaller.Call<bool>(new object[] { replicationConfigId }, asyncState, requestTimeout);
        }

        public Task<SlaveRegistrationStatus> UnregistedServerNode(Guid? serverNodeId, string installationId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return unregistedServerNodeCaller.Call<SlaveRegistrationStatus>(new object[] { serverNodeId, installationId }, asyncState, requestTimeout);
        }

        public Task<object> UpdateAllowReplicationSchedules(bool allowReplicationSchedules, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateAllowReplicationSchedulesCaller.Call<object>(new object[] { allowReplicationSchedules }, asyncState, requestTimeout);
        }

        public Task<object> UpdateRMSInstanceToForceReplication(ICollection<DepartmentEntity> departmentId, bool isForcedReplication, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateRMSInstanceToForceReplicationCaller.Call<object>(new object[] { departmentId, isForcedReplication }, asyncState, requestTimeout);
        }

        public Task<ReplicationMasterServerResult> UpdateReplicationConfig(ByValue<ReplicationConfig> replicationConfig, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateReplicationConfigCaller.Call<ReplicationMasterServerResult>(new object[] { replicationConfig }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class ReplicationSlaveServerService : IReplicationSlaveServerService
    {
        private readonly RemoteMethodCaller connectToMasterServerCaller;
        private readonly RemoteMethodCaller disconnectFromMasterServerCaller;
        private readonly RemoteMethodCaller getRemoteServerSettingsCaller;
        private readonly RemoteMethodCaller isReplicatingRMSCaller;
        private readonly RemoteMethodCaller isReplicationEnabledCaller;
        private readonly RemoteMethodCaller runForcedReplicationCaller;

        internal ReplicationSlaveServerService()
        {

            connectToMasterServerCaller = new RemoteMethodCaller("replicationSlaveServerService", "connectToMasterServer");
            connectToMasterServerCaller.AddArg("settings", typeof(RemoteServerSettings));
            connectToMasterServerCaller.AddArg("departmentId", typeof(string));

            disconnectFromMasterServerCaller = new RemoteMethodCaller("replicationSlaveServerService", "disconnectFromMasterServer");

            getRemoteServerSettingsCaller = new RemoteMethodCaller("replicationSlaveServerService", "getRemoteServerSettings");

            isReplicatingRMSCaller = new RemoteMethodCaller("replicationSlaveServerService", "isReplicatingRMS");

            isReplicationEnabledCaller = new RemoteMethodCaller("replicationSlaveServerService", "isReplicationEnabled");

            runForcedReplicationCaller = new RemoteMethodCaller("replicationSlaveServerService", "runForcedReplication");
        }

        #region Synchronous versions
        public IServiceMethodCall<SlaveServerRegistrationResult> ConnectToMasterServer(RemoteServerSettings settings, string departmentId)
        {
            return connectToMasterServerCaller.CreateCall<SlaveServerRegistrationResult>(new object[] { settings, departmentId });
        }

        public IServiceMethodCall<SlaveServerRegistrationResult> DisconnectFromMasterServer()
        {
            return disconnectFromMasterServerCaller.CreateCall<SlaveServerRegistrationResult>(new object[] {  });
        }

        public IServiceMethodCall<RemoteServerStatus> GetRemoteServerSettings()
        {
            return getRemoteServerSettingsCaller.CreateCall<RemoteServerStatus>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsReplicatingRMS()
        {
            return isReplicatingRMSCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<bool> IsReplicationEnabled()
        {
            return isReplicationEnabledCaller.CreateCall<bool>(new object[] {  });
        }

        public IServiceMethodCall<BackRegistrationResult> RunForcedReplication()
        {
            return runForcedReplicationCaller.CreateCall<BackRegistrationResult>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void ConnectToMasterServer(RemoteServerSettings settings, string departmentId, AsyncErrorHandler errorHandler, Action<SlaveServerRegistrationResult> resultHandler)
        {
            connectToMasterServerCaller.CallAsync(new object[] {settings, departmentId}, resultHandler, errorHandler);
        }

        public void DisconnectFromMasterServer(AsyncErrorHandler errorHandler, Action<SlaveServerRegistrationResult> resultHandler)
        {
            disconnectFromMasterServerCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetRemoteServerSettings(AsyncErrorHandler errorHandler, Action<RemoteServerStatus> resultHandler)
        {
            getRemoteServerSettingsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsReplicatingRMS(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isReplicatingRMSCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void IsReplicationEnabled(AsyncErrorHandler errorHandler, Action<bool> resultHandler)
        {
            isReplicationEnabledCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void RunForcedReplication(AsyncErrorHandler errorHandler, Action<BackRegistrationResult> resultHandler)
        {
            runForcedReplicationCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<SlaveServerRegistrationResult> ConnectToMasterServer(RemoteServerSettings settings, string departmentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return connectToMasterServerCaller.Call<SlaveServerRegistrationResult>(new object[] { settings, departmentId }, asyncState, requestTimeout);
        }

        public Task<SlaveServerRegistrationResult> DisconnectFromMasterServer([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return disconnectFromMasterServerCaller.Call<SlaveServerRegistrationResult>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<RemoteServerStatus> GetRemoteServerSettings([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getRemoteServerSettingsCaller.Call<RemoteServerStatus>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsReplicatingRMS([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isReplicatingRMSCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<bool> IsReplicationEnabled([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return isReplicationEnabledCaller.Call<bool>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<BackRegistrationResult> RunForcedReplication([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return runForcedReplicationCaller.Call<BackRegistrationResult>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class TestSalesGeneratorService : ITestSalesGeneratorService
    {

        internal TestSalesGeneratorService()
        {
        }

        #region Synchronous versions
        #endregion

        #region asynchronous version
        #endregion

        #region task versions
        #endregion
    }

    internal class SystemService : ISystemService
    {
        private readonly RemoteMethodCaller cancelRequestByIdCaller;
        private readonly RemoteMethodCaller getSystemEventsCaller;
        private readonly RemoteMethodCaller getWatchdogCheckResultsCaller;

        internal SystemService()
        {

            cancelRequestByIdCaller = new RemoteMethodCaller("systemService", "cancelRequestById");
            cancelRequestByIdCaller.AddArg("id", typeof(Guid?));

            getSystemEventsCaller = new RemoteMethodCaller("systemService", "getSystemEvents");
            getSystemEventsCaller.AddArg("dateFrom", typeof(DateTime?));
            getSystemEventsCaller.AddArg("dateTo", typeof(DateTime?));

            getWatchdogCheckResultsCaller = new RemoteMethodCaller("systemService", "getWatchdogCheckResults");
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CancelRequestById(Guid? id)
        {
            return cancelRequestByIdCaller.CreateCall<object>(new object[] { id });
        }

        public IServiceMethodCall<ICollection<SystemEvent>> GetSystemEvents(DateTime? dateFrom, DateTime? dateTo)
        {
            return getSystemEventsCaller.CreateCall<ICollection<SystemEvent>>(new object[] { dateFrom, dateTo });
        }

        public IServiceMethodCall<ICollection<CheckResult>> GetWatchdogCheckResults()
        {
            return getWatchdogCheckResultsCaller.CreateCall<ICollection<CheckResult>>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void CancelRequestById(Guid? id, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            cancelRequestByIdCaller.CallAsync(new object[] {id}, resultHandler, errorHandler);
        }

        public void GetSystemEvents(DateTime? dateFrom, DateTime? dateTo, AsyncErrorHandler errorHandler, Action<ICollection<SystemEvent>> resultHandler)
        {
            getSystemEventsCaller.CallAsync(new object[] {dateFrom, dateTo}, resultHandler, errorHandler);
        }

        public void GetWatchdogCheckResults(AsyncErrorHandler errorHandler, Action<ICollection<CheckResult>> resultHandler)
        {
            getWatchdogCheckResultsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CancelRequestById(Guid? id, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return cancelRequestByIdCaller.Call<object>(new object[] { id }, asyncState, requestTimeout);
        }

        public Task<ICollection<SystemEvent>> GetSystemEvents(DateTime? dateFrom, DateTime? dateTo, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSystemEventsCaller.Call<ICollection<SystemEvent>>(new object[] { dateFrom, dateTo }, asyncState, requestTimeout);
        }

        public Task<ICollection<CheckResult>> GetWatchdogCheckResults([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getWatchdogCheckResultsCaller.Call<ICollection<CheckResult>>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class LockTestService : ILockTestService
    {
        private readonly RemoteMethodCaller lockRestoExecutorCaller;

        internal LockTestService()
        {

            lockRestoExecutorCaller = new RemoteMethodCaller("lockTest", "lockRestoExecutor");
            lockRestoExecutorCaller.AddArg("lockTimeMillis", typeof(int));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> LockRestoExecutor(int lockTimeMillis)
        {
            return lockRestoExecutorCaller.CreateCall<object>(new object[] { lockTimeMillis });
        }

        #endregion

        #region asynchronous version
        public void LockRestoExecutor(int lockTimeMillis, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            lockRestoExecutorCaller.CallAsync(new object[] {lockTimeMillis}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> LockRestoExecutor(int lockTimeMillis, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return lockRestoExecutorCaller.Call<object>(new object[] { lockTimeMillis }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class HandshakeSettingsService : IHandshakeSettingsService
    {
        private readonly RemoteMethodCaller getHandshakeSettingsCaller;

        internal HandshakeSettingsService()
        {

            getHandshakeSettingsCaller = new RemoteMethodCaller("HandshakeSettingsService", "getHandshakeSettings");
        }

        #region Synchronous versions
        public IServiceMethodCall<HandshakeSettings> GetHandshakeSettings()
        {
            return getHandshakeSettingsCaller.CreateCall<HandshakeSettings>(new object[] {  });
        }

        #endregion

        #region asynchronous version
        public void GetHandshakeSettings(AsyncErrorHandler errorHandler, Action<HandshakeSettings> resultHandler)
        {
            getHandshakeSettingsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<HandshakeSettings> GetHandshakeSettings([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getHandshakeSettingsCaller.Call<HandshakeSettings>(new object[] {  }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class DiagnosticsService : IDiagnosticsService
    {
        private readonly RemoteMethodCaller getSystemDiagnosticsCaller;

        internal DiagnosticsService()
        {

            getSystemDiagnosticsCaller = new RemoteMethodCaller("diagnostics", "getSystemDiagnostics");
            getSystemDiagnosticsCaller.AddArg("checkSoldModifiers", typeof(bool));
            getSystemDiagnosticsCaller.AddArg("attendanceDateFrom", typeof(DateTime?));
            getSystemDiagnosticsCaller.AddArg("stores", typeof(ICollection<Store>));
        }

        #region Synchronous versions
        public IServiceMethodCall<SystemDiagnosticsResult> GetSystemDiagnostics(bool checkSoldModifiers, DateTime? attendanceDateFrom, ICollection<Store> stores)
        {
            return getSystemDiagnosticsCaller.CreateCall<SystemDiagnosticsResult>(new object[] { checkSoldModifiers, attendanceDateFrom, stores });
        }

        #endregion

        #region asynchronous version
        public void GetSystemDiagnostics(bool checkSoldModifiers, DateTime? attendanceDateFrom, ICollection<Store> stores, AsyncErrorHandler errorHandler, Action<SystemDiagnosticsResult> resultHandler)
        {
            getSystemDiagnosticsCaller.CallAsync(new object[] {checkSoldModifiers, attendanceDateFrom, stores}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<SystemDiagnosticsResult> GetSystemDiagnostics(bool checkSoldModifiers, DateTime? attendanceDateFrom, ICollection<Store> stores, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSystemDiagnosticsCaller.Call<SystemDiagnosticsResult>(new object[] { checkSoldModifiers, attendanceDateFrom, stores }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class WatchDogService : IWatchDogService
    {
        private readonly RemoteMethodCaller notifyCaller;

        internal WatchDogService()
        {

            notifyCaller = new RemoteMethodCaller("watchDog", "notify");
            notifyCaller.AddArg("checkResult", typeof(CheckResult));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> Notify(CheckResult checkResult)
        {
            return notifyCaller.CreateCall<object>(new object[] { checkResult });
        }

        #endregion

        #region asynchronous version
        public void Notify(CheckResult checkResult, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            notifyCaller.CallAsync(new object[] {checkResult}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> Notify(CheckResult checkResult, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return notifyCaller.Call<object>(new object[] { checkResult }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class EventsService : IEventsService
    {
        private readonly RemoteMethodCaller createExportedTo1CEventCaller;
        private readonly RemoteMethodCaller createExportedToKUTZUPEventCaller;
        private readonly RemoteMethodCaller createExportedToStoreHouseEventCaller;
        private readonly RemoteMethodCaller fireGetConnectionCodeCaller;
        private readonly RemoteMethodCaller getBanquetDeliveryDishesReportInfoCaller;
        private readonly RemoteMethodCaller getCloseEventBySessionIdCaller;
        private readonly RemoteMethodCaller getCloseSessionEventsCaller;
        private readonly RemoteMethodCaller getEventsByRevisionCaller;
        private readonly RemoteMethodCaller getItemSaleEventsCaller;
        private readonly RemoteMethodCaller getItemSaleEventsBySessionsCaller;
        private readonly RemoteMethodCaller getOrderEventsCaller;
        private readonly RemoteMethodCaller getOrderPaymentAndTransactionsAndPayInOutEventsCaller;
        private readonly RemoteMethodCaller getOrderPaymentEventsCaller;
        private readonly RemoteMethodCaller getOrderPaymentTransactionsCaller;
        private readonly RemoteMethodCaller getSessionFullReportCaller;
        private readonly RemoteMethodCaller getUserEventAttributesCaller;
        private readonly RemoteMethodCaller getUserEventGroupsCaller;
        private readonly RemoteMethodCaller getUserEventTypesCaller;
        private readonly RemoteMethodCaller getUserEventsListCaller;
        private readonly RemoteMethodCaller updateEventsJournalPresetsCaller;
        private readonly RemoteMethodCaller updateOrderPaymentTransactionsCaller;

        internal EventsService()
        {

            createExportedTo1CEventCaller = new RemoteMethodCaller("events", "createExportedTo1CEvent");
            createExportedTo1CEventCaller.AddArg("path", typeof(string));

            createExportedToKUTZUPEventCaller = new RemoteMethodCaller("events", "createExportedToKUTZUPEvent");
            createExportedToKUTZUPEventCaller.AddArg("success", typeof(bool?));
            createExportedToKUTZUPEventCaller.AddArg("comment", typeof(string));

            createExportedToStoreHouseEventCaller = new RemoteMethodCaller("events", "createExportedToStoreHouseEvent");
            createExportedToStoreHouseEventCaller.AddArg("exportPath", typeof(string));

            fireGetConnectionCodeCaller = new RemoteMethodCaller("events", "fireGetConnectionCode");
            fireGetConnectionCodeCaller.AddArg("device", typeof(AgentDevice));

            getBanquetDeliveryDishesReportInfoCaller = new RemoteMethodCaller("events", "getBanquetDeliveryDishesReportInfo");
            getBanquetDeliveryDishesReportInfoCaller.AddArg("orderIds", typeof(List<Guid>));

            getCloseEventBySessionIdCaller = new RemoteMethodCaller("events", "getCloseEventBySessionId");
            getCloseEventBySessionIdCaller.AddArg("session", typeof(Guid?));

            getCloseSessionEventsCaller = new RemoteMethodCaller("events", "getCloseSessionEvents");
            getCloseSessionEventsCaller.AddArg("fromDate", typeof(DateTime?));
            getCloseSessionEventsCaller.AddArg("toDate", typeof(DateTime?));
            getCloseSessionEventsCaller.AddArg("groups", typeof(ICollection<Group>));
            getCloseSessionEventsCaller.AddArg("departments", typeof(ICollection<DepartmentEntity>));

            getEventsByRevisionCaller = new RemoteMethodCaller("events", "getEventsByRevision");
            getEventsByRevisionCaller.AddArg("fromRevision", typeof(int));

            getItemSaleEventsCaller = new RemoteMethodCaller("events", "getItemSaleEvents");
            getItemSaleEventsCaller.AddArg("orderIds", typeof(List<Guid>));

            getItemSaleEventsBySessionsCaller = new RemoteMethodCaller("events", "getItemSaleEventsBySessions");
            getItemSaleEventsBySessionsCaller.AddArg("sessionIds", typeof(List<Guid>));
            getItemSaleEventsBySessionsCaller.AddArg("planned", typeof(bool));

            getOrderEventsCaller = new RemoteMethodCaller("events", "getOrderEvents");
            getOrderEventsCaller.AddArg("orderIds", typeof(List<Guid>));

            getOrderPaymentAndTransactionsAndPayInOutEventsCaller = new RemoteMethodCaller("events", "getOrderPaymentAndTransactionsAndPayInOutEvents");
            getOrderPaymentAndTransactionsAndPayInOutEventsCaller.AddArg("sessionIds", typeof(List<Guid>));
            getOrderPaymentAndTransactionsAndPayInOutEventsCaller.AddArg("planned", typeof(bool));

            getOrderPaymentEventsCaller = new RemoteMethodCaller("events", "getOrderPaymentEvents");
            getOrderPaymentEventsCaller.AddArg("sessionIds", typeof(List<Guid>));
            getOrderPaymentEventsCaller.AddArg("planned", typeof(bool));

            getOrderPaymentTransactionsCaller = new RemoteMethodCaller("events", "getOrderPaymentTransactions");
            getOrderPaymentTransactionsCaller.AddArg("sessionIds", typeof(ICollection<Guid>));
            getOrderPaymentTransactionsCaller.AddArg("planned", typeof(bool));

            getSessionFullReportCaller = new RemoteMethodCaller("events", "getSessionFullReport");
            getSessionFullReportCaller.AddArg("sessionId", typeof(Guid?));

            getUserEventAttributesCaller = new RemoteMethodCaller("events", "getUserEventAttributes");

            getUserEventGroupsCaller = new RemoteMethodCaller("events", "getUserEventGroups");

            getUserEventTypesCaller = new RemoteMethodCaller("events", "getUserEventTypes");

            getUserEventsListCaller = new RemoteMethodCaller("events", "getUserEventsList");
            getUserEventsListCaller.AddArg("fromTime", typeof(DateTime?));
            getUserEventsListCaller.AddArg("toTime", typeof(DateTime?));
            getUserEventsListCaller.AddArg("departments", typeof(HashSet<DepartmentEntity>));
            getUserEventsListCaller.AddArg("eventTypes", typeof(HashSet<string>));
            getUserEventsListCaller.AddArg("eventSeverity", typeof(UserEventSeverity));
            getUserEventsListCaller.AddArg("fieldValues", typeof(Dictionary<string, Object>));

            updateEventsJournalPresetsCaller = new RemoteMethodCaller("events", "updateEventsJournalPresets");
            updateEventsJournalPresetsCaller.AddArg("presetsList", typeof(List<ByValue<EventsJournalPreset>>));

            updateOrderPaymentTransactionsCaller = new RemoteMethodCaller("events", "updateOrderPaymentTransactions");
            updateOrderPaymentTransactionsCaller.AddArg("paymentTransactions", typeof(ICollection<OrderPaymentTransaction>));
        }

        #region Synchronous versions
        public IServiceMethodCall<object> CreateExportedTo1CEvent(string path)
        {
            return createExportedTo1CEventCaller.CreateCall<object>(new object[] { path });
        }

        public IServiceMethodCall<object> CreateExportedToKUTZUPEvent(bool? success, string comment)
        {
            return createExportedToKUTZUPEventCaller.CreateCall<object>(new object[] { success, comment });
        }

        public IServiceMethodCall<object> CreateExportedToStoreHouseEvent(string exportPath)
        {
            return createExportedToStoreHouseEventCaller.CreateCall<object>(new object[] { exportPath });
        }

        public IServiceMethodCall<object> FireGetConnectionCode(AgentDevice device)
        {
            return fireGetConnectionCodeCaller.CreateCall<object>(new object[] { device });
        }

        public IServiceMethodCall<BanquetDeliveryDishesReportInfo> GetBanquetDeliveryDishesReportInfo(List<Guid> orderIds)
        {
            return getBanquetDeliveryDishesReportInfoCaller.CreateCall<BanquetDeliveryDishesReportInfo>(new object[] { orderIds });
        }

        public IServiceMethodCall<CloseSessionEvent> GetCloseEventBySessionId(Guid? session)
        {
            return getCloseEventBySessionIdCaller.CreateCall<CloseSessionEvent>(new object[] { session });
        }

        public IServiceMethodCall<List<CloseSessionEvent>> GetCloseSessionEvents(DateTime? fromDate, DateTime? toDate, ICollection<Group> groups, ICollection<DepartmentEntity> departments)
        {
            return getCloseSessionEventsCaller.CreateCall<List<CloseSessionEvent>>(new object[] { fromDate, toDate, groups, departments });
        }

        public IServiceMethodCall<List<UserEvent>> GetEventsByRevision(int fromRevision)
        {
            return getEventsByRevisionCaller.CreateCall<List<UserEvent>>(new object[] { fromRevision });
        }

        public IServiceMethodCall<List<ItemSaleEvent>> GetItemSaleEvents(List<Guid> orderIds)
        {
            return getItemSaleEventsCaller.CreateCall<List<ItemSaleEvent>>(new object[] { orderIds });
        }

        public IServiceMethodCall<List<ItemSaleEvent>> GetItemSaleEventsBySessions(List<Guid> sessionIds, bool planned)
        {
            return getItemSaleEventsBySessionsCaller.CreateCall<List<ItemSaleEvent>>(new object[] { sessionIds, planned });
        }

        public IServiceMethodCall<OrderAndSessionDto> GetOrderEvents(List<Guid> orderIds)
        {
            return getOrderEventsCaller.CreateCall<OrderAndSessionDto>(new object[] { orderIds });
        }

        public IServiceMethodCall<OrderAndSessionDto> GetOrderPaymentAndTransactionsAndPayInOutEvents(List<Guid> sessionIds, bool planned)
        {
            return getOrderPaymentAndTransactionsAndPayInOutEventsCaller.CreateCall<OrderAndSessionDto>(new object[] { sessionIds, planned });
        }

        public IServiceMethodCall<List<OrderPaymentEvent>> GetOrderPaymentEvents(List<Guid> sessionIds, bool planned)
        {
            return getOrderPaymentEventsCaller.CreateCall<List<OrderPaymentEvent>>(new object[] { sessionIds, planned });
        }

        public IServiceMethodCall<Dictionary<Guid, ICollection<OrderPaymentTransaction>>> GetOrderPaymentTransactions(ICollection<Guid> sessionIds, bool planned)
        {
            return getOrderPaymentTransactionsCaller.CreateCall<Dictionary<Guid, ICollection<OrderPaymentTransaction>>>(new object[] { sessionIds, planned });
        }

        public IServiceMethodCall<SessionFullReport> GetSessionFullReport(Guid? sessionId)
        {
            return getSessionFullReportCaller.CreateCall<SessionFullReport>(new object[] { sessionId });
        }

        public IServiceMethodCall<ICollection<EventAttributeMetadata>> GetUserEventAttributes()
        {
            return getUserEventAttributesCaller.CreateCall<ICollection<EventAttributeMetadata>>(new object[] {  });
        }

        public IServiceMethodCall<ICollection<EventGroupMetadata>> GetUserEventGroups()
        {
            return getUserEventGroupsCaller.CreateCall<ICollection<EventGroupMetadata>>(new object[] {  });
        }

        public IServiceMethodCall<ICollection<EventTypeMetadata>> GetUserEventTypes()
        {
            return getUserEventTypesCaller.CreateCall<ICollection<EventTypeMetadata>>(new object[] {  });
        }

        public IServiceMethodCall<List<UserEvent>> GetUserEventsList(DateTime? fromTime, DateTime? toTime, HashSet<DepartmentEntity> departments, HashSet<string> eventTypes, UserEventSeverity eventSeverity, Dictionary<string, Object> fieldValues)
        {
            return getUserEventsListCaller.CreateCall<List<UserEvent>>(new object[] { fromTime, toTime, departments, eventTypes, eventSeverity, fieldValues });
        }

        public IServiceMethodCall<object> UpdateEventsJournalPresets(List<ByValue<EventsJournalPreset>> presetsList)
        {
            return updateEventsJournalPresetsCaller.CreateCall<object>(new object[] { presetsList });
        }

        public IServiceMethodCall<object> UpdateOrderPaymentTransactions(ICollection<OrderPaymentTransaction> paymentTransactions)
        {
            return updateOrderPaymentTransactionsCaller.CreateCall<object>(new object[] { paymentTransactions });
        }

        #endregion

        #region asynchronous version
        public void CreateExportedTo1CEvent(string path, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createExportedTo1CEventCaller.CallAsync(new object[] {path}, resultHandler, errorHandler);
        }

        public void CreateExportedToKUTZUPEvent(bool? success, string comment, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createExportedToKUTZUPEventCaller.CallAsync(new object[] {success, comment}, resultHandler, errorHandler);
        }

        public void CreateExportedToStoreHouseEvent(string exportPath, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            createExportedToStoreHouseEventCaller.CallAsync(new object[] {exportPath}, resultHandler, errorHandler);
        }

        public void FireGetConnectionCode(AgentDevice device, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            fireGetConnectionCodeCaller.CallAsync(new object[] {device}, resultHandler, errorHandler);
        }

        public void GetBanquetDeliveryDishesReportInfo(List<Guid> orderIds, AsyncErrorHandler errorHandler, Action<BanquetDeliveryDishesReportInfo> resultHandler)
        {
            getBanquetDeliveryDishesReportInfoCaller.CallAsync(new object[] {orderIds}, resultHandler, errorHandler);
        }

        public void GetCloseEventBySessionId(Guid? session, AsyncErrorHandler errorHandler, Action<CloseSessionEvent> resultHandler)
        {
            getCloseEventBySessionIdCaller.CallAsync(new object[] {session}, resultHandler, errorHandler);
        }

        public void GetCloseSessionEvents(DateTime? fromDate, DateTime? toDate, ICollection<Group> groups, ICollection<DepartmentEntity> departments, AsyncErrorHandler errorHandler, Action<List<CloseSessionEvent>> resultHandler)
        {
            getCloseSessionEventsCaller.CallAsync(new object[] {fromDate, toDate, groups, departments}, resultHandler, errorHandler);
        }

        public void GetEventsByRevision(int fromRevision, AsyncErrorHandler errorHandler, Action<List<UserEvent>> resultHandler)
        {
            getEventsByRevisionCaller.CallAsync(new object[] {fromRevision}, resultHandler, errorHandler);
        }

        public void GetItemSaleEvents(List<Guid> orderIds, AsyncErrorHandler errorHandler, Action<List<ItemSaleEvent>> resultHandler)
        {
            getItemSaleEventsCaller.CallAsync(new object[] {orderIds}, resultHandler, errorHandler);
        }

        public void GetItemSaleEventsBySessions(List<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<List<ItemSaleEvent>> resultHandler)
        {
            getItemSaleEventsBySessionsCaller.CallAsync(new object[] {sessionIds, planned}, resultHandler, errorHandler);
        }

        public void GetOrderEvents(List<Guid> orderIds, AsyncErrorHandler errorHandler, Action<OrderAndSessionDto> resultHandler)
        {
            getOrderEventsCaller.CallAsync(new object[] {orderIds}, resultHandler, errorHandler);
        }

        public void GetOrderPaymentAndTransactionsAndPayInOutEvents(List<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<OrderAndSessionDto> resultHandler)
        {
            getOrderPaymentAndTransactionsAndPayInOutEventsCaller.CallAsync(new object[] {sessionIds, planned}, resultHandler, errorHandler);
        }

        public void GetOrderPaymentEvents(List<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<List<OrderPaymentEvent>> resultHandler)
        {
            getOrderPaymentEventsCaller.CallAsync(new object[] {sessionIds, planned}, resultHandler, errorHandler);
        }

        public void GetOrderPaymentTransactions(ICollection<Guid> sessionIds, bool planned, AsyncErrorHandler errorHandler, Action<Dictionary<Guid, ICollection<OrderPaymentTransaction>>> resultHandler)
        {
            getOrderPaymentTransactionsCaller.CallAsync(new object[] {sessionIds, planned}, resultHandler, errorHandler);
        }

        public void GetSessionFullReport(Guid? sessionId, AsyncErrorHandler errorHandler, Action<SessionFullReport> resultHandler)
        {
            getSessionFullReportCaller.CallAsync(new object[] {sessionId}, resultHandler, errorHandler);
        }

        public void GetUserEventAttributes(AsyncErrorHandler errorHandler, Action<ICollection<EventAttributeMetadata>> resultHandler)
        {
            getUserEventAttributesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetUserEventGroups(AsyncErrorHandler errorHandler, Action<ICollection<EventGroupMetadata>> resultHandler)
        {
            getUserEventGroupsCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetUserEventTypes(AsyncErrorHandler errorHandler, Action<ICollection<EventTypeMetadata>> resultHandler)
        {
            getUserEventTypesCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GetUserEventsList(DateTime? fromTime, DateTime? toTime, HashSet<DepartmentEntity> departments, HashSet<string> eventTypes, UserEventSeverity eventSeverity, Dictionary<string, Object> fieldValues, AsyncErrorHandler errorHandler, Action<List<UserEvent>> resultHandler)
        {
            getUserEventsListCaller.CallAsync(new object[] {fromTime, toTime, departments, eventTypes, eventSeverity, fieldValues}, resultHandler, errorHandler);
        }

        public void UpdateEventsJournalPresets(List<ByValue<EventsJournalPreset>> presetsList, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateEventsJournalPresetsCaller.CallAsync(new object[] {presetsList}, resultHandler, errorHandler);
        }

        public void UpdateOrderPaymentTransactions(ICollection<OrderPaymentTransaction> paymentTransactions, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateOrderPaymentTransactionsCaller.CallAsync(new object[] {paymentTransactions}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<object> CreateExportedTo1CEvent(string path, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createExportedTo1CEventCaller.Call<object>(new object[] { path }, asyncState, requestTimeout);
        }

        public Task<object> CreateExportedToKUTZUPEvent(bool? success, string comment, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createExportedToKUTZUPEventCaller.Call<object>(new object[] { success, comment }, asyncState, requestTimeout);
        }

        public Task<object> CreateExportedToStoreHouseEvent(string exportPath, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createExportedToStoreHouseEventCaller.Call<object>(new object[] { exportPath }, asyncState, requestTimeout);
        }

        public Task<object> FireGetConnectionCode(AgentDevice device, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return fireGetConnectionCodeCaller.Call<object>(new object[] { device }, asyncState, requestTimeout);
        }

        public Task<BanquetDeliveryDishesReportInfo> GetBanquetDeliveryDishesReportInfo(List<Guid> orderIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getBanquetDeliveryDishesReportInfoCaller.Call<BanquetDeliveryDishesReportInfo>(new object[] { orderIds }, asyncState, requestTimeout);
        }

        public Task<CloseSessionEvent> GetCloseEventBySessionId(Guid? session, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCloseEventBySessionIdCaller.Call<CloseSessionEvent>(new object[] { session }, asyncState, requestTimeout);
        }

        public Task<List<CloseSessionEvent>> GetCloseSessionEvents(DateTime? fromDate, DateTime? toDate, ICollection<Group> groups, ICollection<DepartmentEntity> departments, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getCloseSessionEventsCaller.Call<List<CloseSessionEvent>>(new object[] { fromDate, toDate, groups, departments }, asyncState, requestTimeout);
        }

        public Task<List<UserEvent>> GetEventsByRevision(int fromRevision, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getEventsByRevisionCaller.Call<List<UserEvent>>(new object[] { fromRevision }, asyncState, requestTimeout);
        }

        public Task<List<ItemSaleEvent>> GetItemSaleEvents(List<Guid> orderIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getItemSaleEventsCaller.Call<List<ItemSaleEvent>>(new object[] { orderIds }, asyncState, requestTimeout);
        }

        public Task<List<ItemSaleEvent>> GetItemSaleEventsBySessions(List<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getItemSaleEventsBySessionsCaller.Call<List<ItemSaleEvent>>(new object[] { sessionIds, planned }, asyncState, requestTimeout);
        }

        public Task<OrderAndSessionDto> GetOrderEvents(List<Guid> orderIds, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getOrderEventsCaller.Call<OrderAndSessionDto>(new object[] { orderIds }, asyncState, requestTimeout);
        }

        public Task<OrderAndSessionDto> GetOrderPaymentAndTransactionsAndPayInOutEvents(List<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getOrderPaymentAndTransactionsAndPayInOutEventsCaller.Call<OrderAndSessionDto>(new object[] { sessionIds, planned }, asyncState, requestTimeout);
        }

        public Task<List<OrderPaymentEvent>> GetOrderPaymentEvents(List<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getOrderPaymentEventsCaller.Call<List<OrderPaymentEvent>>(new object[] { sessionIds, planned }, asyncState, requestTimeout);
        }

        public Task<Dictionary<Guid, ICollection<OrderPaymentTransaction>>> GetOrderPaymentTransactions(ICollection<Guid> sessionIds, bool planned, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getOrderPaymentTransactionsCaller.Call<Dictionary<Guid, ICollection<OrderPaymentTransaction>>>(new object[] { sessionIds, planned }, asyncState, requestTimeout);
        }

        public Task<SessionFullReport> GetSessionFullReport(Guid? sessionId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getSessionFullReportCaller.Call<SessionFullReport>(new object[] { sessionId }, asyncState, requestTimeout);
        }

        public Task<ICollection<EventAttributeMetadata>> GetUserEventAttributes([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUserEventAttributesCaller.Call<ICollection<EventAttributeMetadata>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<ICollection<EventGroupMetadata>> GetUserEventGroups([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUserEventGroupsCaller.Call<ICollection<EventGroupMetadata>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<ICollection<EventTypeMetadata>> GetUserEventTypes([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUserEventTypesCaller.Call<ICollection<EventTypeMetadata>>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<List<UserEvent>> GetUserEventsList(DateTime? fromTime, DateTime? toTime, HashSet<DepartmentEntity> departments, HashSet<string> eventTypes, UserEventSeverity eventSeverity, Dictionary<string, Object> fieldValues, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getUserEventsListCaller.Call<List<UserEvent>>(new object[] { fromTime, toTime, departments, eventTypes, eventSeverity, fieldValues }, asyncState, requestTimeout);
        }

        public Task<object> UpdateEventsJournalPresets(List<ByValue<EventsJournalPreset>> presetsList, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateEventsJournalPresetsCaller.Call<object>(new object[] { presetsList }, asyncState, requestTimeout);
        }

        public Task<object> UpdateOrderPaymentTransactions(ICollection<OrderPaymentTransaction> paymentTransactions, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateOrderPaymentTransactionsCaller.Call<object>(new object[] { paymentTransactions }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class InformationService : IInformationService
    {
        private readonly RemoteMethodCaller getAgentDeltaCaller;
        private readonly RemoteMethodCaller getServerUnixTimeInMillisCaller;
        private readonly RemoteMethodCaller writeTimeDiagnosticsToServerLogCaller;

        internal InformationService()
        {

            getAgentDeltaCaller = new RemoteMethodCaller("information", "getAgentDelta");
            getAgentDeltaCaller.AddArg("agentId", typeof(Guid?));

            getServerUnixTimeInMillisCaller = new RemoteMethodCaller("information", "getServerUnixTimeInMillis");

            writeTimeDiagnosticsToServerLogCaller = new RemoteMethodCaller("information", "writeTimeDiagnosticsToServerLog");
            writeTimeDiagnosticsToServerLogCaller.AddArg("delta", typeof(long));
            writeTimeDiagnosticsToServerLogCaller.AddArg("responseDuration", typeof(long));
        }

        #region Synchronous versions
        public IServiceMethodCall<long> GetAgentDelta(Guid? agentId)
        {
            return getAgentDeltaCaller.CreateCall<long>(new object[] { agentId });
        }

        public IServiceMethodCall<long> GetServerUnixTimeInMillis()
        {
            return getServerUnixTimeInMillisCaller.CreateCall<long>(new object[] {  });
        }

        public IServiceMethodCall<object> WriteTimeDiagnosticsToServerLog(long delta, long responseDuration)
        {
            return writeTimeDiagnosticsToServerLogCaller.CreateCall<object>(new object[] { delta, responseDuration });
        }

        #endregion

        #region asynchronous version
        public void GetAgentDelta(Guid? agentId, AsyncErrorHandler errorHandler, Action<long> resultHandler)
        {
            getAgentDeltaCaller.CallAsync(new object[] {agentId}, resultHandler, errorHandler);
        }

        public void GetServerUnixTimeInMillis(AsyncErrorHandler errorHandler, Action<long> resultHandler)
        {
            getServerUnixTimeInMillisCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void WriteTimeDiagnosticsToServerLog(long delta, long responseDuration, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            writeTimeDiagnosticsToServerLogCaller.CallAsync(new object[] {delta, responseDuration}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<long> GetAgentDelta(Guid? agentId, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getAgentDeltaCaller.Call<long>(new object[] { agentId }, asyncState, requestTimeout);
        }

        public Task<long> GetServerUnixTimeInMillis([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return getServerUnixTimeInMillisCaller.Call<long>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<object> WriteTimeDiagnosticsToServerLog(long delta, long responseDuration, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return writeTimeDiagnosticsToServerLogCaller.Call<object>(new object[] { delta, responseDuration }, asyncState, requestTimeout);
        }

        #endregion
    }

    internal class UsersService : IUsersService
    {
        private readonly RemoteMethodCaller createDiscountCardCaller;
        private readonly RemoteMethodCaller createUserCaller;
        private readonly RemoteMethodCaller deleteDiscountCardCaller;
        private readonly RemoteMethodCaller deleteDiscountCardsCaller;
        private readonly RemoteMethodCaller generateExternalPinCaller;
        private readonly RemoteMethodCaller generatePinCodeCaller;
        private readonly RemoteMethodCaller setUserDeletedCaller;
        private readonly RemoteMethodCaller undeleteDiscountCardCaller;
        private readonly RemoteMethodCaller updateDiscountCardCaller;
        private readonly RemoteMethodCaller updateUserCaller;
        private readonly RemoteMethodCaller updateUsersCaller;

        internal UsersService()
        {

            createDiscountCardCaller = new RemoteMethodCaller("users", "createDiscountCard");
            createDiscountCardCaller.AddArg("card", typeof(ByValue<DiscountCard>));

            createUserCaller = new RemoteMethodCaller("users", "createUser");
            createUserCaller.AddArg("user", typeof(ByValue<User>));

            deleteDiscountCardCaller = new RemoteMethodCaller("users", "deleteDiscountCard");
            deleteDiscountCardCaller.AddArg("card", typeof(DiscountCard));

            deleteDiscountCardsCaller = new RemoteMethodCaller("users", "deleteDiscountCards");
            deleteDiscountCardsCaller.AddArg("cards", typeof(List<DiscountCard>));

            generateExternalPinCaller = new RemoteMethodCaller("users", "generateExternalPin");

            generatePinCodeCaller = new RemoteMethodCaller("users", "generatePinCode");

            setUserDeletedCaller = new RemoteMethodCaller("users", "setUserDeleted");
            setUserDeletedCaller.AddArg("user", typeof(User));
            setUserDeletedCaller.AddArg("deleted", typeof(bool));

            undeleteDiscountCardCaller = new RemoteMethodCaller("users", "undeleteDiscountCard");
            undeleteDiscountCardCaller.AddArg("card", typeof(DiscountCard));

            updateDiscountCardCaller = new RemoteMethodCaller("users", "updateDiscountCard");
            updateDiscountCardCaller.AddArg("card", typeof(ByValue<DiscountCard>));

            updateUserCaller = new RemoteMethodCaller("users", "updateUser");
            updateUserCaller.AddArg("user", typeof(ByValue<User>));

            updateUsersCaller = new RemoteMethodCaller("users", "updateUsers");
            updateUsersCaller.AddArg("users", typeof(List<ByValue<User>>));
        }

        #region Synchronous versions
        public IServiceMethodCall<DiscountCard> CreateDiscountCard(ByValue<DiscountCard> card)
        {
            return createDiscountCardCaller.CreateCall<DiscountCard>(new object[] { card });
        }

        public IServiceMethodCall<UserWithValidationInfo> CreateUser(ByValue<User> user)
        {
            return createUserCaller.CreateCall<UserWithValidationInfo>(new object[] { user });
        }

        public IServiceMethodCall<object> DeleteDiscountCard(DiscountCard card)
        {
            return deleteDiscountCardCaller.CreateCall<object>(new object[] { card });
        }

        public IServiceMethodCall<object> DeleteDiscountCards(List<DiscountCard> cards)
        {
            return deleteDiscountCardsCaller.CreateCall<object>(new object[] { cards });
        }

        public IServiceMethodCall<string> GenerateExternalPin()
        {
            return generateExternalPinCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<string> GeneratePinCode()
        {
            return generatePinCodeCaller.CreateCall<string>(new object[] {  });
        }

        public IServiceMethodCall<UserValidationInfo> SetUserDeleted(User user, bool deleted)
        {
            return setUserDeletedCaller.CreateCall<UserValidationInfo>(new object[] { user, deleted });
        }

        public IServiceMethodCall<object> UndeleteDiscountCard(DiscountCard card)
        {
            return undeleteDiscountCardCaller.CreateCall<object>(new object[] { card });
        }

        public IServiceMethodCall<object> UpdateDiscountCard(ByValue<DiscountCard> card)
        {
            return updateDiscountCardCaller.CreateCall<object>(new object[] { card });
        }

        public IServiceMethodCall<UserWithValidationInfo> UpdateUser(ByValue<User> user)
        {
            return updateUserCaller.CreateCall<UserWithValidationInfo>(new object[] { user });
        }

        public IServiceMethodCall<object> UpdateUsers(List<ByValue<User>> users)
        {
            return updateUsersCaller.CreateCall<object>(new object[] { users });
        }

        #endregion

        #region asynchronous version
        public void CreateDiscountCard(ByValue<DiscountCard> card, AsyncErrorHandler errorHandler, Action<DiscountCard> resultHandler)
        {
            createDiscountCardCaller.CallAsync(new object[] {card}, resultHandler, errorHandler);
        }

        public void CreateUser(ByValue<User> user, AsyncErrorHandler errorHandler, Action<UserWithValidationInfo> resultHandler)
        {
            createUserCaller.CallAsync(new object[] {user}, resultHandler, errorHandler);
        }

        public void DeleteDiscountCard(DiscountCard card, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteDiscountCardCaller.CallAsync(new object[] {card}, resultHandler, errorHandler);
        }

        public void DeleteDiscountCards(List<DiscountCard> cards, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            deleteDiscountCardsCaller.CallAsync(new object[] {cards}, resultHandler, errorHandler);
        }

        public void GenerateExternalPin(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            generateExternalPinCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void GeneratePinCode(AsyncErrorHandler errorHandler, Action<string> resultHandler)
        {
            generatePinCodeCaller.CallAsync(new object[] {}, resultHandler, errorHandler);
        }

        public void SetUserDeleted(User user, bool deleted, AsyncErrorHandler errorHandler, Action<UserValidationInfo> resultHandler)
        {
            setUserDeletedCaller.CallAsync(new object[] {user, deleted}, resultHandler, errorHandler);
        }

        public void UndeleteDiscountCard(DiscountCard card, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            undeleteDiscountCardCaller.CallAsync(new object[] {card}, resultHandler, errorHandler);
        }

        public void UpdateDiscountCard(ByValue<DiscountCard> card, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateDiscountCardCaller.CallAsync(new object[] {card}, resultHandler, errorHandler);
        }

        public void UpdateUser(ByValue<User> user, AsyncErrorHandler errorHandler, Action<UserWithValidationInfo> resultHandler)
        {
            updateUserCaller.CallAsync(new object[] {user}, resultHandler, errorHandler);
        }

        public void UpdateUsers(List<ByValue<User>> users, AsyncErrorHandler errorHandler, Action resultHandler)
        {
            updateUsersCaller.CallAsync(new object[] {users}, resultHandler, errorHandler);
        }

        #endregion

        #region task versions
        public Task<DiscountCard> CreateDiscountCard(ByValue<DiscountCard> card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createDiscountCardCaller.Call<DiscountCard>(new object[] { card }, asyncState, requestTimeout);
        }

        public Task<UserWithValidationInfo> CreateUser(ByValue<User> user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return createUserCaller.Call<UserWithValidationInfo>(new object[] { user }, asyncState, requestTimeout);
        }

        public Task<object> DeleteDiscountCard(DiscountCard card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteDiscountCardCaller.Call<object>(new object[] { card }, asyncState, requestTimeout);
        }

        public Task<object> DeleteDiscountCards(List<DiscountCard> cards, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return deleteDiscountCardsCaller.Call<object>(new object[] { cards }, asyncState, requestTimeout);
        }

        public Task<string> GenerateExternalPin([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return generateExternalPinCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<string> GeneratePinCode([CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return generatePinCodeCaller.Call<string>(new object[] {  }, asyncState, requestTimeout);
        }

        public Task<UserValidationInfo> SetUserDeleted(User user, bool deleted, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return setUserDeletedCaller.Call<UserValidationInfo>(new object[] { user, deleted }, asyncState, requestTimeout);
        }

        public Task<object> UndeleteDiscountCard(DiscountCard card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return undeleteDiscountCardCaller.Call<object>(new object[] { card }, asyncState, requestTimeout);
        }

        public Task<object> UpdateDiscountCard(ByValue<DiscountCard> card, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateDiscountCardCaller.Call<object>(new object[] { card }, asyncState, requestTimeout);
        }

        public Task<UserWithValidationInfo> UpdateUser(ByValue<User> user, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateUserCaller.Call<UserWithValidationInfo>(new object[] { user }, asyncState, requestTimeout);
        }

        public Task<object> UpdateUsers(List<ByValue<User>> users, [CanBeNull] object asyncState, TimeSpan? requestTimeout = null)
        {
            return updateUsersCaller.Call<object>(new object[] { users }, asyncState, requestTimeout);
        }

        #endregion
    }

}

// ReSharper restore PartialTypeWithSinglePart
// ReSharper restore ConvertToAutoProperty
