@using System
@using System.Collections.Generic
@using System.Linq
@using Resto.Front.PrintTemplates.Reports
@using Resto.Front.PrintTemplates.Reports.OlapReports
@using Resto.Front.PrintTemplates.Reports.TemplateModels
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 012 Общая выручка почасовая *@
@* Парный к 042-му отчет по серверным данным *@
@inherits TemplateBase
@{
    settings = Model.ReportSettings;

    FillData();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);
        
    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }
    
    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" /> 
    
    <pair left="@Resources.From" right="@FormatDate(settings.GetPeriodBegin())" />
    <pair left="@Resources.To" right="@FormatDate(settings.GetPeriodEnd())" />
    
    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth=""/>
            <column align="right"/>
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table> 
}

@helper Body()
{
    var c = 0;
    <line symbols="-" />
    <table>
        <columns>
            <column autowidth="" minwidth="11" />
            <column align="right" formatter="split" />
            <column align="right" minwidth="5" />
        </columns>
        <cells>
            <ct>@Resources.Period</ct>
            <ct>@(showAverage ? Resources.OrdersAvg : Resources.Orders)</ct>
            <ct>@(showAverage ? Resources.RescueAvg : Resources.Rescue)</ct>
            <linecell symbols="-"/>
            
            @foreach (var day in sourceItems.GroupBy(i => i.Key.Date))
            {
                // Если несколько дней, то между ними вставляем пустую строку
                if (c++ > 0)
                {
                    <c colspan="0"><np/></c>
                }
                if (!showAverage)
                {
                    <c colspan="3">@FormatDate(day.Key)</c>
                }
                if (day.Count() == 1 && day.First().Value.OrdersCount == 0)
                {
                    <c colspan="3">@Resources.NoSales</c>
                }
                else
                {
                    foreach (var item in day)
                    {
                        <ct>@string.Format("{0:HH:mm}-{1:HH:mm}", item.Key, GetHourEnd(item.Key))</ct>
                        <ct>@FormatAverage(item.Value.OrdersCount)</ct>
                        <ct>@FormatPrice(item.Value.Sum)</ct>
                    }
                }
            }

            <linecell symbols="-" />
            <ct>@Resources.Total</ct>
            <ct>@FormatAverage(totalOrdersCount)</ct>
            <ct>@FormatPrice(totalSum)</ct>
            <linecell symbols="-" />
        </cells>
    </table>
}

@helper Footer()
{
    <np />
    <center>
        @string.Format(Resources.AllSumsInFormat, Model.CafeSetup.CurrencyName)
    </center>
    <np />
}

@functions
{
    private ISettings settings;

    private readonly SortedDictionary<DateTime, RevenueItem> sourceItems = new SortedDictionary<DateTime, RevenueItem>(new HourComparer());
    private decimal totalSum;
    private decimal totalOrdersCount;
    private bool showAverage;

    private sealed class RevenueItem
    {
        public decimal OrdersCount { get; set; }
        public decimal Sum { get; set; }
    }

    /// <summary>
    /// Заполнение данных о выручке
    /// </summary>
    private void FillData()
    {
        showAverage = settings.GetBool("ShowAverage");

        var report = Model.OlapReports.BuildReport(new OlapReportSettings(OlapReportType.Sales,
            new List<string> { OlapField.CloseTime, OlapField.PayTypesId, OlapField.NonCashPaymentTypeId },
            new List<string>(),
            new List<string> { OlapField.UniqOrderId, OlapField.DishDiscountSum },
            new Dictionary<string, OlapReportFilterCriteria>
            {
                { OlapField.SessionIdOperDay, new OlapReportFilterRangeCriteria(settings.GetPeriodBegin(), true, settings.GetPeriodEnd(), true) },
                // Исключаем сторнированные заказы
                { OlapField.IsStorned, new OlapReportFilterExcludeValuesCriteria(new object[] { true }) },
                // Исключаем транзакции внесения / возврата чаевых
                { OlapField.PayTypesTransactionType, new OlapReportFilterExcludeValuesCriteria(new object[] { "TIPS" }) }
            }));

        // Оплата пустого заказа сюда не придет, т.к. у нее нет ItemSaleEvent'а
        // Предоплата сюда придет только после оплаты заказа
        foreach (var data in report.Data)
        {
            var paymentType = data.GetValue<IPaymentType>(OlapField.PayTypesId);
            var nonCashPaymentType = data.GetValue<IPaymentType>(OlapField.NonCashPaymentTypeId);
            // Исключаем оплаты без транзакций (закрытие заказа без оплаты, оплата типом "Без выручки")
            if (paymentType == null &&
                (nonCashPaymentType == null || nonCashPaymentType.IsWriteoffPaymentType()))
                continue;

            var uniqOrderId = data.GetValue<Int32>(OlapField.UniqOrderId);
            var dishDiscountSum = data.GetValue<Decimal>(OlapField.DishDiscountSum);
            var closeTime = data.GetValue<DateTime>(OlapField.CloseTime);

            closeTime = showAverage ? DateTime.Today.AddHours(closeTime.Hour) : GetHourStart(closeTime);
            if (!sourceItems.ContainsKey(closeTime))
                sourceItems[closeTime] = new RevenueItem();

            sourceItems[closeTime].Sum += dishDiscountSum;
            sourceItems[closeTime].OrdersCount += uniqOrderId;
        }

        if (settings.GetBool("TakeIntoAccountHoursWithZeroSells"))
            FillEmptyHours();

        if (showAverage)
        {
            totalSum = sourceItems.Count == 0 ? 0 : sourceItems.Average(i => i.Value.Sum);
            totalOrdersCount = sourceItems.Count == 0 ? 0 : sourceItems.Average(i => i.Value.OrdersCount);
        }
        else
        {
            FillEmptyDays();
            totalSum = sourceItems.Sum(i => i.Value.Sum);
            totalOrdersCount = sourceItems.Sum(i => i.Value.OrdersCount);
        }
    }

    /// <summary>
    /// Заполнение пустых часов в дне
    /// </summary>
    private void FillEmptyHours()
    {
        foreach (var dayItems in sourceItems.GroupBy(i => i.Key.Date).Where(i => i.Any()))
        {
            var minDateTime = dayItems.Min(i => i.Key);
            var maxDateTime = dayItems.Max(i => i.Key);

            for (var time = minDateTime; time <= maxDateTime; time = time.AddHours(1))
            {
                if (!sourceItems.ContainsKey(time))
                    sourceItems.Add(time, new RevenueItem());
            }
        }
    }

    /// <summary>
    /// Заполнение пустых дней
    /// </summary>
    private void FillEmptyDays()
    {
        if (sourceItems.Count == 0)
        {
            for (var date = settings.GetPeriodBegin().Date; date <= settings.GetPeriodEnd().Date; date = date.AddDays(1))
                sourceItems.Add(date, new RevenueItem());
            return;
        }

        var minDate = Min(sourceItems.Min(i => i.Key.Date), settings.GetPeriodBegin().Date);
        var maxDate = Max(sourceItems.Max(i => i.Key.Date), settings.GetPeriodEnd().Date);

        var days = new HashSet<DateTime>(sourceItems.Select(i => i.Key.Date).Distinct(), new DateComparer());
        for (var date = minDate; date <= maxDate; date = date.AddDays(1))
        {
            if (!days.Contains(date))
                sourceItems.Add(date, new RevenueItem());
        }
    }

    private static DateTime GetHourStart(DateTime x)
    {
        return new DateTime(x.Year, x.Month, x.Day, x.Hour, 0, 0, 0);
    }

    private static DateTime GetHourEnd(DateTime x)
    {
        return new DateTime(x.Year, x.Month, x.Day, x.Hour, 59, 59, 999);
    }

    private sealed class DateComparer : IEqualityComparer<DateTime>
    {
        public bool Equals(DateTime x, DateTime y)
        {
            return x.Date == y.Date;
        }

        public int GetHashCode(DateTime obj)
        {
            return obj.Date.GetHashCode();
        }
    }

    private sealed class HourComparer : IComparer<DateTime>
    {
        public int Compare(DateTime x, DateTime y)
        {
            return DateTime.Compare(GetHourStart(x), GetHourStart(y));
        }
    }

    private static DateTime Max(DateTime d1, DateTime d2)
    {
        return d1 > d2 ? d1 : d2;
    }

    private static DateTime Min(DateTime d1, DateTime d2)
    {
        return d1 < d2 ? d1 : d2;
    }
}