@using System
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@using Resto.Front.PrintTemplates.Reports
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 033 Время от пречека до оплаты *@
@* Отчет по кассовым данным *@
@inherits TemplateBase
@{
    if (Model.CafeSession == null)
    {
        <doc><center>@Resources.CafeSessionIsClosed</center></doc>
        return;
    }
    FillData();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);
        
    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }
    
    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" /> 
    
    if (Model.CafeSession != null)
    {
        <pair left="@Resources.HeadCashRegisterShift" right="@Model.CafeSession.Number" />
        <pair left="@Resources.HeadCashRegisterShiftOpened" right="@FormatLongDateTime(Model.CafeSession.OpenTime)" />
    } 
    
    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth=""/>
            <column align="right"/>
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table> 
}

@helper Body()
{
    <line symbols="-" />
    <table>
        <columns>
            <column autowidth="" />
            <column align="right" />
            <column align="right" autowidth="" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            <ct>@Resources.Precheque</ct>
            <ct>@Resources.TableColumn</ct>
            <ct>@Resources.Payment</ct>
            <ct>@Resources.Interval</ct>
            <linecell symbols="-"/>

            @foreach (var orders in orderGapInfos.GroupBy(order => order.Waiter).OrderByDescending(group => group.Average(order => order.Interval.TotalSeconds)))
            {
                <c colspan="4">@(orders.Key != null ? orders.Key.Name : string.Empty)</c>
                <linecell symbols="-"/>
                foreach (var order in orders.OrderByDescending(order => order.Interval.TotalSeconds).TakeWhile((order, num) => num < 10))
                {
                    <ct>@order.PrechequeTime.ToLongTimeString()</ct>
                    <ct>@order.TableNumber</ct>
                    <ct>@order.PaymentTime.ToLongTimeString()</ct>
                    <ct>@FormatTimeSpan(order.Interval, true)</ct>
                }
                <linecell symbols="-"/>
                <c colspan="3">@Resources.AverageTime</c>
                var average = RoundTimeSpan(TimeSpan.FromSeconds(orders.Average(order => order.Interval.TotalSeconds)));
                <ct>@FormatTimeSpan(average, true)</ct>
                <c colspan="3">@Resources.MaximalTime</c>
                var max = orders.Max(order => order.Interval);
                <ct>@FormatTimeSpan(max, true)</ct>
                <linecell symbols="-" />
            }
        </cells>
    </table>
    <center>@Resources.IntervalsDescription</center>
}

@helper Footer()
{
    <np />
    <center>
        @string.Format(Resources.AllSumsInFormat, Model.CafeSetup.CurrencyName)
    </center>
    <np />
}

@functions
{
    private readonly List<OrderGapInfo> orderGapInfos = new List<OrderGapInfo>(); 

    private sealed class OrderGapInfo
    {
        private readonly IUser waiter;
        private readonly int tableNumber;
        private readonly DateTime prechequeTime;
        private readonly DateTime paymentTime;
        private readonly TimeSpan interval;

        public OrderGapInfo(IUser waiter, int tableNumber, DateTime prechequeTime, DateTime paymentTime, TimeSpan interval)
        {
            this.waiter = waiter;
            this.tableNumber = tableNumber;
            this.prechequeTime = prechequeTime;
            this.paymentTime = paymentTime;
            this.interval = interval;
        }

        public IUser Waiter
        {
            get { return waiter; }
        }

        public int TableNumber
        {
            get { return tableNumber; }
        }

        public DateTime PrechequeTime
        {
            get { return prechequeTime; }
        }

        public DateTime PaymentTime
        {
            get { return paymentTime; }
        }

        public TimeSpan Interval
        {
            get { return interval; }
        }
    }

    /// <summary>
    /// Получение данных о заказах, времени пречека, оплаты и их заполнение
    /// </summary>
    private void FillData()
    {
        var session = Model.CafeSession;
        Debug.Assert(session != null);

        foreach (var order in session.ClosedOrders)
        {
            Debug.Assert(order.PrechequeTime.HasValue);
            Debug.Assert(order.CloseInfo != null);
            
            var prechequeTime = RoundDateTime(order.PrechequeTime.Value);
            var paymentTime = RoundDateTime(order.CloseInfo.Time);
            orderGapInfos.Add(new OrderGapInfo(order.Waiter, order.Table.Number, prechequeTime, paymentTime, RoundTimeSpan(paymentTime.Subtract(prechequeTime))));
        }
    }

    private static TimeSpan RoundTimeSpan(TimeSpan timeSpan)
    {
        return new TimeSpan(timeSpan.Days, timeSpan.Hours, timeSpan.Minutes, timeSpan.Seconds);
    }

    private static DateTime RoundDateTime(DateTime dateTime)
    {
        return new DateTime(dateTime.Year, dateTime.Month, dateTime.Day, dateTime.Hour, dateTime.Minute, dateTime.Second);
    }
}
