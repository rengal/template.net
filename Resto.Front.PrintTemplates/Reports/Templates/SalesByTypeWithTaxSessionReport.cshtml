@using System
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@using Resto.Front.PrintTemplates.Reports
@using Resto.Front.PrintTemplates.Reports.TemplateModels
@using Resto.Front.PrintTemplates.RmsEntityWrappers

@* 041 Выручка по типам с налогами *@
@* Парный к 011-му отчет по кассовым данным *@
@inherits TemplateBase
@{
    if (Model.CafeSession == null)
    {
        <doc><center>@Resources.CafeSessionIsClosed</center></doc>
        return;
    }

    FillSalesData();
    FillTaxesData();
}

@if (!Model.IsOnlyBodyMarkupRequired)
{
    <doc formatter="split">
        @Header()
        @Body()
        @Footer()
    </doc>
}
else
{
    <doc formatter="split">
        @Body()
    </doc>
}

@helper Header()
{
    var terminalName = Model.CashRegister != null
        ? string.Format(Resources.TerminalNumberNamePattern, Model.CashRegister.Number, Model.Group.Name)
        : string.Format(Resources.TerminalNamePattern, Model.CurrentTerminal, Model.Group.Name);
        
    foreach (var headerLine in Model.CafeSetup.ReportHeader.Split(Environment.NewLine.ToCharArray()))
    {
        <left>
            <whitespace-preserve>@headerLine</whitespace-preserve>
        </left>
    }
    
    <np />
    <center>@Model.Name</center>
    <np />
    <pair fit="left" left="@Resources.HeadTerminal" right="@terminalName" /> 
    
    if (Model.CafeSession != null)
    {
        <pair left="@Resources.HeadCashRegisterShift" right="@Model.CafeSession.Number" />
        <pair left="@Resources.HeadCashRegisterShiftOpened" right="@FormatLongDateTime(Model.CafeSession.OpenTime)" />
    } 
    
    <pair left="@Resources.HeadCurrentTime" right="@FormatLongDateTime(Model.CurrentTime)" />
    <table>
        <columns>
            <column autowidth=""/>
            <column align="right"/>
        </columns>
        <cells>
            <ct>@Resources.HeadCurrentUser</ct>
            <ct>@(Model.CurrentUser == null ? string.Empty : Model.CurrentUser.Name)</ct>
        </cells>
    </table> 
}

@helper Footer()
{
    <np />
    <center>
        @string.Format(Resources.AllSumsInFormat, Model.CafeSetup.CurrencyName)
    </center>
    <np />
}

@helper Body()
{
    <table>
        <columns>
            <column formatter="split" />
            <column align="right" autowidth="" />
            <column align="right" autowidth="" />
        </columns>
        <cells>
            @foreach (var groupIsFiscal in salesData)
            {
                var c = 0;
                <c colspan="0"><np /></c>
                <c colspan="3">@(groupIsFiscal.Key ? Resources.FiscalPaymentTypeList : Resources.NonFiscalPaymentTypeList)</c>
            
                <linecell symbols="-" />
                <ct>@Resources.PaymentType</ct>
                <ct>@Resources.Orders</ct>
                <ct>@Resources.Sum</ct>
                <linecell symbols="-" />

                foreach (var groupPaymentGroup in groupIsFiscal.Value)
                {
                    // Если несколько групп оплаты, то между ними вставляем пустую строку
                    if (c++ > 0)
                    {
                        <c colspan="0"><np /></c>
                    }
                    <c colspan="3">@groupPaymentGroup.Key.GetLocalName()</c>
                    
                    foreach (var saleInfo in groupPaymentGroup.Value)
                    {
                        <ct>@saleInfo.PaymentTypeName</ct>
                        <ct>@FormatAmount(saleInfo.ChequesNum)</ct>
                        <ct>@FormatPrice(saleInfo.Sum)</ct>
                    }
                    <ct>@string.Format(Resources.TotalSub, groupPaymentGroup.Key.GetLocalName())</ct>
                    <ct>@FormatAmount(groupPaymentGroup.Value.Sum(i => i.ChequesNum))</ct>
                    <ct>@FormatPrice(groupPaymentGroup.Value.Sum(i => i.Sum))</ct>
                }
                if (groupIsFiscal.Value.Any())
                {
                    <linecell symbols="-" />
                }
                
                <ct>@(groupIsFiscal.Key ? Resources.TotalFiscal : Resources.TotalNonFiscal)</ct>
                <ct>@FormatAmount(groupIsFiscal.Value.Sum(i => i.Value.Sum(j => j.ChequesNum)))</ct>
                <ct>@FormatPrice(groupIsFiscal.Value.Sum(i => i.Value.Sum(j => j.Sum)))</ct>

                if (groupIsFiscal.Key)
                {
                    @GetTaxesMarkup()
                }
            }

            <c colspan="0"><np/></c>
            <linecell symbols="-"/>

            <ct>@Resources.TotalAllPaymentTypes</ct>
            <ct>@FormatAmount(totalChequesNum)</ct>
            <ct>@FormatPrice(salesData.Sum(i => i.Value.Sum(j => j.Value.Sum(k => k.Sum))))</ct>
            <linecell symbols="-" />
        </cells>
    </table>
}

@helper GetTaxesMarkup()
{
    <c colspan="0"><np /></c>
    <c colspan="3">@Resources.VatList</c>
    <linecell symbols="-"/>
    
    <ct>@Resources.VatPercent</ct>
    <ct>@Resources.VatSum</ct>
    <ct>@Resources.VatVatSum</ct>
    <linecell symbols="-"/>
    
    foreach (var tax in taxesData)
    {
        <ct>@string.Format(Resources.Vat, FormatPercent(tax.VatPercent))</ct>
        <ct>@FormatPrice(tax.Sum)</ct>
        <ct>@FormatPriceFractional(tax.VatSum)</ct>
    }
    if (taxesData.Any())
    {
        <linecell symbols="-" />
    }
    
    <ct>@Resources.TotalVat</ct>
    <ct>@FormatPrice(taxesData.Sum(tax => tax.Sum))</ct>
    <ct>@FormatPriceFractional(taxesData.Sum(tax => tax.VatSum))</ct>
}

@functions
{
    private SortedDictionary<bool, Dictionary<PaymentGroup, List<DetailedSaleInfo>>> salesData;
    private IEnumerable<TaxInfo> taxesData;
    private int totalChequesNum;

    private sealed class SaleInfo
    {
        public bool IsFiscal { get; set; }
        public PaymentGroup PaymentGroup { get; set; }
        public DetailedSaleInfo DetailedSaleInfo { get; set; }
    }

    private sealed class DetailedSaleInfo
    {
        public string PaymentTypeName { get; set; }
        public int ChequesNum { get; set; }
        public decimal Sum { get; set; }
    }

    private sealed class TaxInfo
    {
        public decimal VatPercent { get; set; }
        public decimal VatSum { get; set; }
        public decimal Sum { get; set; }
    }

    /// <summary>
    /// Заполнение данных о фискальных/нефискальных оплатах
    /// </summary>
    private void FillSalesData()
    {
        var session = Model.CafeSession;
        Debug.Assert(session != null);
        
        var transactionsBySession = Model.Transactions.GetOrderPaymentTransactionsBySession(session)
            // Предоплаты учитываем только после оплаты заказа и не учитываем сторнированные заказы
            .Where(pt => !(pt is IOrderPrepayTransaction) && (pt.Order == null || !pt.Order.IsStorned))
            .ToList();

        // Группировка по фиск./нефиск. типам, потом по группам оплаты, где у каждой группы оплаты есть список DetailedSaleInfo (тип оплаты с количеством заказов и суммой)
        var sales = transactionsBySession
            .GroupBy(t => t.PaymentType)
            .Select(data => new SaleInfo
            {
                IsFiscal = data.Key.PrintCheque,
                PaymentGroup = data.Key.Group,
                
                DetailedSaleInfo = new DetailedSaleInfo
                {
                    PaymentTypeName = data.Key.Name,
                    Sum = data.Sum(t => t.Sum),
                    ChequesNum = data.Select(t => t.Order).Distinct().Count()
                }
            })
            .GroupBy(sale => sale.IsFiscal)
            .ToDictionary(fiscalGroup => fiscalGroup.Key, fiscalGroup => fiscalGroup
                .GroupBy(sale => sale.PaymentGroup)
                .ToDictionary(paymentGroupGroup => paymentGroupGroup.Key, paymentGroupGroup => paymentGroupGroup
                    .Select(info => info.DetailedSaleInfo)
                    .OrderBy(info => info.PaymentTypeName)
                    .ToList()));

        if (!sales.ContainsKey(true))
            sales.Add(true, new Dictionary<PaymentGroup, List<DetailedSaleInfo>>());
        if (!sales.ContainsKey(false))
            sales.Add(false, new Dictionary<PaymentGroup, List<DetailedSaleInfo>>());

        salesData = new SortedDictionary<bool, Dictionary<PaymentGroup, List<DetailedSaleInfo>>>(sales, new DescendingComparer<bool>());
        totalChequesNum = transactionsBySession.Select(t => t.Order).Distinct().Count();
    }

    /// <summary>
    /// Заполнение данных о налогах (НДС)
    /// </summary>
    private void FillTaxesData()
    {
        var session = Model.CafeSession;
        Debug.Assert(session != null);

        var allTransactions = Model.Transactions.GetOrderPaymentTransactionsBySession(session).ToArray();
        var allEvents = Model.Events.GetItemSaleEventsBySession(session).ToArray();
        var paidFiscalOrders = new HashSet<IOrder>(allTransactions
            .Where(t => t.PaymentType.PrintCheque)
            .Select(t => t.Order));

        // получение информации по возврату товаров без существующих заказов
        var revenueReturnTransactionOrders = new HashSet<Guid>(allTransactions
            .Where(tr => tr.TransactionType == OrderPaymentTransactionType.RevenueReturn && tr.PaymentType.PrintCheque)
            .Select(tr => tr.OrderId).Distinct());

        taxesData = allEvents
            .Where(e => e.RemovalType == null && paidFiscalOrders.Contains(e.Order) && e.Vat > 0) 
            .Concat(
                allEvents.Where(i => i.Order == null && revenueReturnTransactionOrders.Contains(i.OrderId) && i.Vat > 0))
            .GroupBy(e => e.Vat)
            .Select(data => new TaxInfo
            {
                VatPercent = data.Key,
                Sum = data.Sum(e => e.SumAfterDiscount),
                VatSum = data.Sum(e => e.VatSum)
            })
            .OrderBy(tax => tax.VatPercent)
            .ToList();
    }

    private sealed class DescendingComparer<T> : IComparer<T> where T : IComparable<T>
    {
        public int Compare(T x, T y)
        {
            return y.CompareTo(x);
        }
    }
}