// This file was generated with T4.
// Do not edit it manually.

// ReSharper disable RedundantUsingDirective

using Resto.Front.PrintTemplates.RmsEntityWrappers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using Resto.Framework.Attributes.JetBrains;

namespace Resto.Front.PrintTemplates.Cheques.Razor.TemplateModels
{
    /// <summary>
    /// Этикетка
    /// </summary>
    public interface IPriceTicket : ITemplateRootModel
    {
        /// <summary>
        /// Общая информация
        /// </summary>
        [NotNull]
        IChequeCommonInfo CommonInfo { get; }

        /// <summary>
        /// Продукт, для которого печатается этикетка
        /// </summary>
        [NotNull]
        IProduct Product { get; }

        /// <summary>
        /// Количество
        /// </summary>
        decimal Amount { get; }

        /// <summary>
        /// Штрихкод
        /// </summary>
        [CanBeNull]
        string Barcode { get; }

        /// <summary>
        /// Признак того, что штрихкод сгенерирован автоматически при печати этикетки
        /// </summary>
        bool IsBarcodeAutogenerated { get; }

    }

    internal sealed class PriceTicket : TemplateModelBase, IPriceTicket
    {
        #region Fields
        private readonly ChequeCommonInfo commonInfo;
        private readonly Product product;
        private readonly decimal amount;
        private readonly string barcode;
        private readonly bool isBarcodeAutogenerated;
        #endregion

        #region Ctor
        [UsedImplicitly]
        private PriceTicket()
        {}

        internal PriceTicket([NotNull] CopyContext context, [NotNull] IPriceTicket src)
        {
            System.Diagnostics.Debug.Assert(context != null);
            System.Diagnostics.Debug.Assert(src != null);

            commonInfo = context.GetConverted(src.CommonInfo, Resto.Front.PrintTemplates.Cheques.Razor.TemplateModels.ChequeCommonInfo.Convert);
            product = context.GetConverted(src.Product, Resto.Front.PrintTemplates.Cheques.Razor.TemplateModels.Product.Convert);
            amount = src.Amount;
            barcode = src.Barcode;
            isBarcodeAutogenerated = src.IsBarcodeAutogenerated;
        }

        #endregion

        #region Props
        public IChequeCommonInfo CommonInfo
        {
            get { return commonInfo; }
        }

        public IProduct Product
        {
            get { return product; }
        }

        public decimal Amount
        {
            get { return amount; }
        }

        public string Barcode
        {
            get { return GetLocalizedValue(barcode); }
        }

        public bool IsBarcodeAutogenerated
        {
            get { return isBarcodeAutogenerated; }
        }

        #endregion
    }

    public static partial class ChequeSerializer
    {
        [NotNull]
        public static string Serialize([NotNull] this IPriceTicket cheque)
        {
            if (cheque == null)
                throw new ArgumentNullException("cheque");

            var context = new CopyContext();
            var copy = new PriceTicket(context, cheque);

            return Resto.Framework.Common.XmlSerialization.Serializer.GetXmlText<IPriceTicket>(copy, "PriceTicket");
        }
    }
}
